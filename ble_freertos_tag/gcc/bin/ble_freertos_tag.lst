
../gcc/bin/ble_freertos_tag_asb.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 6d 83 02 00 d5 83 02 00 91 1a 02 00     .+..m...........
    c010:	d7 83 02 00 d7 83 02 00 d7 83 02 00 00 00 00 00     ................
	...
    c02c:	51 92 01 00 d9 83 02 00 00 00 00 00 31 94 01 00     Q...........1...
    c03c:	99 94 01 00 d9 83 02 00 d9 83 02 00 d9 83 02 00     ................
    c04c:	d9 83 02 00 d9 83 02 00 d9 83 02 00 d9 83 02 00     ................
    c05c:	d9 83 02 00 d9 83 02 00 d9 83 02 00 d9 83 02 00     ................
    c06c:	d9 83 02 00 a1 cd 00 00 d9 83 02 00 f9 cd 00 00     ................
    c07c:	7d cd 00 00 d9 83 02 00 d9 83 02 00 d9 83 02 00     }...............
    c08c:	d9 83 02 00 d9 83 02 00 d9 83 02 00 d9 83 02 00     ................
    c09c:	19 97 01 00 45 97 01 00 d9 83 02 00 d9 83 02 00     ....E...........
    c0ac:	d9 83 02 00 d9 83 02 00 d9 83 02 00 d9 83 02 00     ................
    c0bc:	d9 83 02 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <l2cDefaultDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    c2d4:	b500      	push	{lr}
    c2d6:	b083      	sub	sp, #12
    c2d8:	4603      	mov	r3, r0
    c2da:	9200      	str	r2, [sp, #0]
    c2dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    c2e0:	460b      	mov	r3, r1
    c2e2:	f8ad 3004 	strh.w	r3, [sp, #4]
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
    c2e6:	4803      	ldr	r0, [pc, #12]	; (c2f4 <l2cDefaultDataCback+0x20>)
    c2e8:	f001 fbae 	bl	da48 <WsfTrace>
}
    c2ec:	bf00      	nop
    c2ee:	b003      	add	sp, #12
    c2f0:	f85d fb04 	ldr.w	pc, [sp], #4
    c2f4:	0002ae48 	.word	0x0002ae48

0000c2f8 <l2cDefaultDataCidCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultDataCidCback(uint16_t handle, uint16_t cid, uint16_t len, uint8_t *pPacket)
{
    c2f8:	b500      	push	{lr}
    c2fa:	b085      	sub	sp, #20
    c2fc:	9301      	str	r3, [sp, #4]
    c2fe:	4603      	mov	r3, r0
    c300:	f8ad 300e 	strh.w	r3, [sp, #14]
    c304:	460b      	mov	r3, r1
    c306:	f8ad 300c 	strh.w	r3, [sp, #12]
    c30a:	4613      	mov	r3, r2
    c30c:	f8ad 300a 	strh.w	r3, [sp, #10]
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
    c310:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c314:	4619      	mov	r1, r3
    c316:	4803      	ldr	r0, [pc, #12]	; (c324 <l2cDefaultDataCidCback+0x2c>)
    c318:	f001 fb96 	bl	da48 <WsfTrace>
}
    c31c:	bf00      	nop
    c31e:	b005      	add	sp, #20
    c320:	f85d fb04 	ldr.w	pc, [sp], #4
    c324:	0002ae68 	.word	0x0002ae68

0000c328 <l2cDefaultCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
    c328:	b082      	sub	sp, #8
    c32a:	9001      	str	r0, [sp, #4]
  return;
    c32c:	bf00      	nop
}
    c32e:	b002      	add	sp, #8
    c330:	4770      	bx	lr
	...

0000c334 <l2cRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cRxSignalingPkt(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    c334:	b500      	push	{lr}
    c336:	b085      	sub	sp, #20
    c338:	4603      	mov	r3, r0
    c33a:	9200      	str	r2, [sp, #0]
    c33c:	f8ad 3006 	strh.w	r3, [sp, #6]
    c340:	460b      	mov	r3, r1
    c342:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t role;
  dmConnId_t connId;

  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
    c346:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c34a:	4618      	mov	r0, r3
    c34c:	f009 fd04 	bl	15d58 <DmConnIdByHandle>
    c350:	4603      	mov	r3, r0
    c352:	f88d 300f 	strb.w	r3, [sp, #15]
    c356:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c35a:	2b00      	cmp	r3, #0
    c35c:	d030      	beq.n	c3c0 <l2cRxSignalingPkt+0x8c>
  {
    return;
  }

  role = DmConnRole(connId);
    c35e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c362:	4618      	mov	r0, r3
    c364:	f009 fe58 	bl	16018 <DmConnRole>
    c368:	4603      	mov	r3, r0
    c36a:	f88d 300e 	strb.w	r3, [sp, #14]

  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
    c36e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c372:	2b00      	cmp	r3, #0
    c374:	d10c      	bne.n	c390 <l2cRxSignalingPkt+0x5c>
    c376:	4b14      	ldr	r3, [pc, #80]	; (c3c8 <l2cRxSignalingPkt+0x94>)
    c378:	699b      	ldr	r3, [r3, #24]
    c37a:	2b00      	cmp	r3, #0
    c37c:	d008      	beq.n	c390 <l2cRxSignalingPkt+0x5c>
  {
    (*l2cCb.masterRxSignalingPkt)(handle, len, pPacket);
    c37e:	4b12      	ldr	r3, [pc, #72]	; (c3c8 <l2cRxSignalingPkt+0x94>)
    c380:	699b      	ldr	r3, [r3, #24]
    c382:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c386:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    c38a:	9a00      	ldr	r2, [sp, #0]
    c38c:	4798      	blx	r3
    c38e:	e018      	b.n	c3c2 <l2cRxSignalingPkt+0x8e>
  }
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
    c390:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c394:	2b01      	cmp	r3, #1
    c396:	d10c      	bne.n	c3b2 <l2cRxSignalingPkt+0x7e>
    c398:	4b0b      	ldr	r3, [pc, #44]	; (c3c8 <l2cRxSignalingPkt+0x94>)
    c39a:	69db      	ldr	r3, [r3, #28]
    c39c:	2b00      	cmp	r3, #0
    c39e:	d008      	beq.n	c3b2 <l2cRxSignalingPkt+0x7e>
  {
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
    c3a0:	4b09      	ldr	r3, [pc, #36]	; (c3c8 <l2cRxSignalingPkt+0x94>)
    c3a2:	69db      	ldr	r3, [r3, #28]
    c3a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c3a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    c3ac:	9a00      	ldr	r2, [sp, #0]
    c3ae:	4798      	blx	r3
    c3b0:	e007      	b.n	c3c2 <l2cRxSignalingPkt+0x8e>
  }
  else
  {
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
    c3b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c3b6:	4619      	mov	r1, r3
    c3b8:	4804      	ldr	r0, [pc, #16]	; (c3cc <l2cRxSignalingPkt+0x98>)
    c3ba:	f001 fb45 	bl	da48 <WsfTrace>
    c3be:	e000      	b.n	c3c2 <l2cRxSignalingPkt+0x8e>
    return;
    c3c0:	bf00      	nop
  }
}
    c3c2:	b005      	add	sp, #20
    c3c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3c8:	100088dc 	.word	0x100088dc
    c3cc:	0002ae7c 	.word	0x0002ae7c

0000c3d0 <l2cHciAclCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciAclCback(uint8_t *pPacket)
{
    c3d0:	b510      	push	{r4, lr}
    c3d2:	b086      	sub	sp, #24
    c3d4:	9001      	str	r0, [sp, #4]
  uint16_t  handle;
  uint16_t  hciLen;
  uint16_t  cid;
  uint16_t  l2cLen;
  uint8_t   *p = pPacket;
    c3d6:	9b01      	ldr	r3, [sp, #4]
    c3d8:	9304      	str	r3, [sp, #16]

  /* parse HCI handle and length */
  BSTREAM_TO_UINT16(handle, p);
    c3da:	9b04      	ldr	r3, [sp, #16]
    c3dc:	781b      	ldrb	r3, [r3, #0]
    c3de:	b29a      	uxth	r2, r3
    c3e0:	9b04      	ldr	r3, [sp, #16]
    c3e2:	3301      	adds	r3, #1
    c3e4:	781b      	ldrb	r3, [r3, #0]
    c3e6:	b29b      	uxth	r3, r3
    c3e8:	021b      	lsls	r3, r3, #8
    c3ea:	b29b      	uxth	r3, r3
    c3ec:	4413      	add	r3, r2
    c3ee:	f8ad 300e 	strh.w	r3, [sp, #14]
    c3f2:	9b04      	ldr	r3, [sp, #16]
    c3f4:	3302      	adds	r3, #2
    c3f6:	9304      	str	r3, [sp, #16]
  handle &= HCI_HANDLE_MASK;
    c3f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c3fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c400:	f8ad 300e 	strh.w	r3, [sp, #14]
  BSTREAM_TO_UINT16(hciLen, p);
    c404:	9b04      	ldr	r3, [sp, #16]
    c406:	781b      	ldrb	r3, [r3, #0]
    c408:	b29a      	uxth	r2, r3
    c40a:	9b04      	ldr	r3, [sp, #16]
    c40c:	3301      	adds	r3, #1
    c40e:	781b      	ldrb	r3, [r3, #0]
    c410:	b29b      	uxth	r3, r3
    c412:	021b      	lsls	r3, r3, #8
    c414:	b29b      	uxth	r3, r3
    c416:	4413      	add	r3, r2
    c418:	f8ad 300c 	strh.w	r3, [sp, #12]
    c41c:	9b04      	ldr	r3, [sp, #16]
    c41e:	3302      	adds	r3, #2
    c420:	9304      	str	r3, [sp, #16]

  /* parse L2CAP length */
  if (hciLen >= L2C_HDR_LEN)
    c422:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c426:	2b03      	cmp	r3, #3
    c428:	d90f      	bls.n	c44a <l2cHciAclCback+0x7a>
  {
    BSTREAM_TO_UINT16(l2cLen, p);
    c42a:	9b04      	ldr	r3, [sp, #16]
    c42c:	781b      	ldrb	r3, [r3, #0]
    c42e:	b29a      	uxth	r2, r3
    c430:	9b04      	ldr	r3, [sp, #16]
    c432:	3301      	adds	r3, #1
    c434:	781b      	ldrb	r3, [r3, #0]
    c436:	b29b      	uxth	r3, r3
    c438:	021b      	lsls	r3, r3, #8
    c43a:	b29b      	uxth	r3, r3
    c43c:	4413      	add	r3, r2
    c43e:	f8ad 3016 	strh.w	r3, [sp, #22]
    c442:	9b04      	ldr	r3, [sp, #16]
    c444:	3302      	adds	r3, #2
    c446:	9304      	str	r3, [sp, #16]
    c448:	e002      	b.n	c450 <l2cHciAclCback+0x80>
  }
  else
  {
    l2cLen = 0;
    c44a:	2300      	movs	r3, #0
    c44c:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  /* verify L2CAP length vs HCI length */
  if (hciLen == (l2cLen + L2C_HDR_LEN))
    c450:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c454:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c458:	3304      	adds	r3, #4
    c45a:	429a      	cmp	r2, r3
    c45c:	d13e      	bne.n	c4dc <l2cHciAclCback+0x10c>
  {
    /* parse CID */
    BSTREAM_TO_UINT16(cid, p);
    c45e:	9b04      	ldr	r3, [sp, #16]
    c460:	781b      	ldrb	r3, [r3, #0]
    c462:	b29a      	uxth	r2, r3
    c464:	9b04      	ldr	r3, [sp, #16]
    c466:	3301      	adds	r3, #1
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	b29b      	uxth	r3, r3
    c46c:	021b      	lsls	r3, r3, #8
    c46e:	b29b      	uxth	r3, r3
    c470:	4413      	add	r3, r2
    c472:	f8ad 300a 	strh.w	r3, [sp, #10]
    c476:	9b04      	ldr	r3, [sp, #16]
    c478:	3302      	adds	r3, #2
    c47a:	9304      	str	r3, [sp, #16]

    switch (cid)
    c47c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c480:	2b06      	cmp	r3, #6
    c482:	d017      	beq.n	c4b4 <l2cHciAclCback+0xe4>
    c484:	2b06      	cmp	r3, #6
    c486:	dc1e      	bgt.n	c4c6 <l2cHciAclCback+0xf6>
    c488:	2b04      	cmp	r3, #4
    c48a:	d00a      	beq.n	c4a2 <l2cHciAclCback+0xd2>
    c48c:	2b05      	cmp	r3, #5
    c48e:	d11a      	bne.n	c4c6 <l2cHciAclCback+0xf6>
    {
      case L2C_CID_LE_SIGNALING:
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
    c490:	4b19      	ldr	r3, [pc, #100]	; (c4f8 <l2cHciAclCback+0x128>)
    c492:	689b      	ldr	r3, [r3, #8]
    c494:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    c498:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    c49c:	9a01      	ldr	r2, [sp, #4]
    c49e:	4798      	blx	r3
        break;
    c4a0:	e024      	b.n	c4ec <l2cHciAclCback+0x11c>

      case L2C_CID_ATT:
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
    c4a2:	4b15      	ldr	r3, [pc, #84]	; (c4f8 <l2cHciAclCback+0x128>)
    c4a4:	681b      	ldr	r3, [r3, #0]
    c4a6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    c4aa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    c4ae:	9a01      	ldr	r2, [sp, #4]
    c4b0:	4798      	blx	r3
        break;
    c4b2:	e01b      	b.n	c4ec <l2cHciAclCback+0x11c>

      case L2C_CID_SMP:
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
    c4b4:	4b10      	ldr	r3, [pc, #64]	; (c4f8 <l2cHciAclCback+0x128>)
    c4b6:	685b      	ldr	r3, [r3, #4]
    c4b8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    c4bc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    c4c0:	9a01      	ldr	r2, [sp, #4]
    c4c2:	4798      	blx	r3
        break;
    c4c4:	e012      	b.n	c4ec <l2cHciAclCback+0x11c>

      default:
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
    c4c6:	4b0c      	ldr	r3, [pc, #48]	; (c4f8 <l2cHciAclCback+0x128>)
    c4c8:	6a1c      	ldr	r4, [r3, #32]
    c4ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c4ce:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    c4d2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    c4d6:	9b01      	ldr	r3, [sp, #4]
    c4d8:	47a0      	blx	r4
        break;
    c4da:	e007      	b.n	c4ec <l2cHciAclCback+0x11c>
    }
  }
  /* else length mismatch */
  else
  {
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
    c4dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c4e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c4e4:	4619      	mov	r1, r3
    c4e6:	4805      	ldr	r0, [pc, #20]	; (c4fc <l2cHciAclCback+0x12c>)
    c4e8:	f001 faae 	bl	da48 <WsfTrace>
  }

  /* deallocate buffer */
  WsfMsgFree(pPacket);
    c4ec:	9801      	ldr	r0, [sp, #4]
    c4ee:	f000 fe59 	bl	d1a4 <WsfMsgFree>
}
    c4f2:	bf00      	nop
    c4f4:	b006      	add	sp, #24
    c4f6:	bd10      	pop	{r4, pc}
    c4f8:	100088dc 	.word	0x100088dc
    c4fc:	0002aea0 	.word	0x0002aea0

0000c500 <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
    c500:	b500      	push	{lr}
    c502:	b085      	sub	sp, #20
    c504:	4603      	mov	r3, r0
    c506:	460a      	mov	r2, r1
    c508:	f8ad 3006 	strh.w	r3, [sp, #6]
    c50c:	4613      	mov	r3, r2
    c50e:	f88d 3005 	strb.w	r3, [sp, #5]
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    c512:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c516:	4618      	mov	r0, r3
    c518:	f009 fc1e 	bl	15d58 <DmConnIdByHandle>
    c51c:	4603      	mov	r3, r0
    c51e:	b29b      	uxth	r3, r3
    c520:	f8ad 300c 	strh.w	r3, [sp, #12]
    c524:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c528:	2b00      	cmp	r3, #0
    c52a:	d01a      	beq.n	c562 <l2cHciFlowCback+0x62>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
    c52c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c530:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.attCtrlCback)(&hdr);
    c534:	4b0d      	ldr	r3, [pc, #52]	; (c56c <l2cHciFlowCback+0x6c>)
    c536:	68db      	ldr	r3, [r3, #12]
    c538:	aa03      	add	r2, sp, #12
    c53a:	4610      	mov	r0, r2
    c53c:	4798      	blx	r3
    hdr.event = flowDisabled;
    c53e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c542:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.smpCtrlCback)(&hdr);
    c546:	4b09      	ldr	r3, [pc, #36]	; (c56c <l2cHciFlowCback+0x6c>)
    c548:	691b      	ldr	r3, [r3, #16]
    c54a:	aa03      	add	r2, sp, #12
    c54c:	4610      	mov	r0, r2
    c54e:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
    c550:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c554:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
    c558:	4b04      	ldr	r3, [pc, #16]	; (c56c <l2cHciFlowCback+0x6c>)
    c55a:	695b      	ldr	r3, [r3, #20]
    c55c:	aa03      	add	r2, sp, #12
    c55e:	4610      	mov	r0, r2
    c560:	4798      	blx	r3
  }
}
    c562:	bf00      	nop
    c564:	b005      	add	sp, #20
    c566:	f85d fb04 	ldr.w	pc, [sp], #4
    c56a:	bf00      	nop
    c56c:	100088dc 	.word	0x100088dc

0000c570 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
    c570:	b500      	push	{lr}
    c572:	b085      	sub	sp, #20
    c574:	4603      	mov	r3, r0
    c576:	f8ad 3006 	strh.w	r3, [sp, #6]
    c57a:	460b      	mov	r3, r1
    c57c:	f88d 3005 	strb.w	r3, [sp, #5]
    c580:	4613      	mov	r3, r2
    c582:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t *pPacket;
  uint8_t *p;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
    c586:	200e      	movs	r0, #14
    c588:	f000 f837 	bl	c5fa <l2cMsgAlloc>
    c58c:	9003      	str	r0, [sp, #12]
    c58e:	9b03      	ldr	r3, [sp, #12]
    c590:	2b00      	cmp	r3, #0
    c592:	d02e      	beq.n	c5f2 <l2cSendCmdReject+0x82>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    c594:	9b03      	ldr	r3, [sp, #12]
    c596:	3308      	adds	r3, #8
    c598:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
    c59a:	9b02      	ldr	r3, [sp, #8]
    c59c:	1c5a      	adds	r2, r3, #1
    c59e:	9202      	str	r2, [sp, #8]
    c5a0:	2201      	movs	r2, #1
    c5a2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
    c5a4:	9b02      	ldr	r3, [sp, #8]
    c5a6:	1c5a      	adds	r2, r3, #1
    c5a8:	9202      	str	r2, [sp, #8]
    c5aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c5ae:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
    c5b0:	9b02      	ldr	r3, [sp, #8]
    c5b2:	1c5a      	adds	r2, r3, #1
    c5b4:	9202      	str	r2, [sp, #8]
    c5b6:	2202      	movs	r2, #2
    c5b8:	701a      	strb	r2, [r3, #0]
    c5ba:	9b02      	ldr	r3, [sp, #8]
    c5bc:	1c5a      	adds	r2, r3, #1
    c5be:	9202      	str	r2, [sp, #8]
    c5c0:	2200      	movs	r2, #0
    c5c2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
    c5c4:	9b02      	ldr	r3, [sp, #8]
    c5c6:	1c5a      	adds	r2, r3, #1
    c5c8:	9202      	str	r2, [sp, #8]
    c5ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c5ce:	b2d2      	uxtb	r2, r2
    c5d0:	701a      	strb	r2, [r3, #0]
    c5d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c5d6:	0a1b      	lsrs	r3, r3, #8
    c5d8:	b299      	uxth	r1, r3
    c5da:	9b02      	ldr	r3, [sp, #8]
    c5dc:	1c5a      	adds	r2, r3, #1
    c5de:	9202      	str	r2, [sp, #8]
    c5e0:	b2ca      	uxtb	r2, r1
    c5e2:	701a      	strb	r2, [r3, #0]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CMD_REJ_LEN), pPacket);
    c5e4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    c5e8:	9b03      	ldr	r3, [sp, #12]
    c5ea:	2206      	movs	r2, #6
    c5ec:	2005      	movs	r0, #5
    c5ee:	f000 f85f 	bl	c6b0 <L2cDataReq>
  }
}
    c5f2:	bf00      	nop
    c5f4:	b005      	add	sp, #20
    c5f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000c5fa <l2cMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
    c5fa:	b500      	push	{lr}
    c5fc:	b083      	sub	sp, #12
    c5fe:	4603      	mov	r3, r0
    c600:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
    c604:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c608:	2100      	movs	r1, #0
    c60a:	4618      	mov	r0, r3
    c60c:	f000 fd9a 	bl	d144 <WsfMsgDataAlloc>
    c610:	4603      	mov	r3, r0
}
    c612:	4618      	mov	r0, r3
    c614:	b003      	add	sp, #12
    c616:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c61c <L2cInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cInit(void)
{
    c61c:	b508      	push	{r3, lr}
  /* Initialize control block */
  l2cCb.attDataCback = l2cDefaultDataCback;
    c61e:	4b0f      	ldr	r3, [pc, #60]	; (c65c <L2cInit+0x40>)
    c620:	4a0f      	ldr	r2, [pc, #60]	; (c660 <L2cInit+0x44>)
    c622:	601a      	str	r2, [r3, #0]
  l2cCb.smpDataCback = l2cDefaultDataCback;
    c624:	4b0d      	ldr	r3, [pc, #52]	; (c65c <L2cInit+0x40>)
    c626:	4a0e      	ldr	r2, [pc, #56]	; (c660 <L2cInit+0x44>)
    c628:	605a      	str	r2, [r3, #4]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
    c62a:	4b0c      	ldr	r3, [pc, #48]	; (c65c <L2cInit+0x40>)
    c62c:	4a0d      	ldr	r2, [pc, #52]	; (c664 <L2cInit+0x48>)
    c62e:	609a      	str	r2, [r3, #8]
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
    c630:	4b0a      	ldr	r3, [pc, #40]	; (c65c <L2cInit+0x40>)
    c632:	4a0d      	ldr	r2, [pc, #52]	; (c668 <L2cInit+0x4c>)
    c634:	60da      	str	r2, [r3, #12]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
    c636:	4b09      	ldr	r3, [pc, #36]	; (c65c <L2cInit+0x40>)
    c638:	4a0b      	ldr	r2, [pc, #44]	; (c668 <L2cInit+0x4c>)
    c63a:	611a      	str	r2, [r3, #16]
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
    c63c:	4b07      	ldr	r3, [pc, #28]	; (c65c <L2cInit+0x40>)
    c63e:	4a0a      	ldr	r2, [pc, #40]	; (c668 <L2cInit+0x4c>)
    c640:	615a      	str	r2, [r3, #20]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
    c642:	4b06      	ldr	r3, [pc, #24]	; (c65c <L2cInit+0x40>)
    c644:	4a09      	ldr	r2, [pc, #36]	; (c66c <L2cInit+0x50>)
    c646:	621a      	str	r2, [r3, #32]
  l2cCb.identifier = 1;
    c648:	4b04      	ldr	r3, [pc, #16]	; (c65c <L2cInit+0x40>)
    c64a:	2201      	movs	r2, #1
    c64c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Register with HCI */
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
    c650:	4907      	ldr	r1, [pc, #28]	; (c670 <L2cInit+0x54>)
    c652:	4808      	ldr	r0, [pc, #32]	; (c674 <L2cInit+0x58>)
    c654:	f011 facc 	bl	1dbf0 <HciAclRegister>
}
    c658:	bf00      	nop
    c65a:	bd08      	pop	{r3, pc}
    c65c:	100088dc 	.word	0x100088dc
    c660:	0000c2d5 	.word	0x0000c2d5
    c664:	0000c335 	.word	0x0000c335
    c668:	0000c329 	.word	0x0000c329
    c66c:	0000c2f9 	.word	0x0000c2f9
    c670:	0000c501 	.word	0x0000c501
    c674:	0000c3d1 	.word	0x0000c3d1

0000c678 <L2cRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cRegister(uint16_t cid, l2cDataCback_t dataCback, l2cCtrlCback_t ctrlCback)
{
    c678:	b084      	sub	sp, #16
    c67a:	4603      	mov	r3, r0
    c67c:	9102      	str	r1, [sp, #8]
    c67e:	9201      	str	r2, [sp, #4]
    c680:	f8ad 300e 	strh.w	r3, [sp, #14]
  WSF_ASSERT((cid == L2C_CID_ATT) || (cid == L2C_CID_SMP));

  /* store the callbacks */
  if (cid == L2C_CID_ATT)
    c684:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c688:	2b04      	cmp	r3, #4
    c68a:	d106      	bne.n	c69a <L2cRegister+0x22>
  {
    /* registering for attribute protocol */
    l2cCb.attDataCback = dataCback;
    c68c:	4a07      	ldr	r2, [pc, #28]	; (c6ac <L2cRegister+0x34>)
    c68e:	9b02      	ldr	r3, [sp, #8]
    c690:	6013      	str	r3, [r2, #0]
    l2cCb.attCtrlCback = ctrlCback;
    c692:	4a06      	ldr	r2, [pc, #24]	; (c6ac <L2cRegister+0x34>)
    c694:	9b01      	ldr	r3, [sp, #4]
    c696:	60d3      	str	r3, [r2, #12]
  {
    /* registering for security manager protocol */
    l2cCb.smpDataCback = dataCback;
    l2cCb.smpCtrlCback = ctrlCback;
  }
}
    c698:	e005      	b.n	c6a6 <L2cRegister+0x2e>
    l2cCb.smpDataCback = dataCback;
    c69a:	4a04      	ldr	r2, [pc, #16]	; (c6ac <L2cRegister+0x34>)
    c69c:	9b02      	ldr	r3, [sp, #8]
    c69e:	6053      	str	r3, [r2, #4]
    l2cCb.smpCtrlCback = ctrlCback;
    c6a0:	4a02      	ldr	r2, [pc, #8]	; (c6ac <L2cRegister+0x34>)
    c6a2:	9b01      	ldr	r3, [sp, #4]
    c6a4:	6113      	str	r3, [r2, #16]
}
    c6a6:	bf00      	nop
    c6a8:	b004      	add	sp, #16
    c6aa:	4770      	bx	lr
    c6ac:	100088dc 	.word	0x100088dc

0000c6b0 <L2cDataReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    c6b0:	b500      	push	{lr}
    c6b2:	b087      	sub	sp, #28
    c6b4:	9301      	str	r3, [sp, #4]
    c6b6:	4603      	mov	r3, r0
    c6b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    c6bc:	460b      	mov	r3, r1
    c6be:	f8ad 300c 	strh.w	r3, [sp, #12]
    c6c2:	4613      	mov	r3, r2
    c6c4:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t *p = pPacket;
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	9305      	str	r3, [sp, #20]

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
    c6cc:	9b05      	ldr	r3, [sp, #20]
    c6ce:	1c5a      	adds	r2, r3, #1
    c6d0:	9205      	str	r2, [sp, #20]
    c6d2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c6d6:	b2d2      	uxtb	r2, r2
    c6d8:	701a      	strb	r2, [r3, #0]
    c6da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c6de:	0a1b      	lsrs	r3, r3, #8
    c6e0:	b299      	uxth	r1, r3
    c6e2:	9b05      	ldr	r3, [sp, #20]
    c6e4:	1c5a      	adds	r2, r3, #1
    c6e6:	9205      	str	r2, [sp, #20]
    c6e8:	b2ca      	uxtb	r2, r1
    c6ea:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
    c6ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c6f0:	b2da      	uxtb	r2, r3
    c6f2:	9b05      	ldr	r3, [sp, #20]
    c6f4:	1c59      	adds	r1, r3, #1
    c6f6:	9105      	str	r1, [sp, #20]
    c6f8:	3204      	adds	r2, #4
    c6fa:	b2d2      	uxtb	r2, r2
    c6fc:	701a      	strb	r2, [r3, #0]
    c6fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c702:	3304      	adds	r3, #4
    c704:	1219      	asrs	r1, r3, #8
    c706:	9b05      	ldr	r3, [sp, #20]
    c708:	1c5a      	adds	r2, r3, #1
    c70a:	9205      	str	r2, [sp, #20]
    c70c:	b2ca      	uxtb	r2, r1
    c70e:	701a      	strb	r2, [r3, #0]

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
    c710:	9b05      	ldr	r3, [sp, #20]
    c712:	1c5a      	adds	r2, r3, #1
    c714:	9205      	str	r2, [sp, #20]
    c716:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c71a:	b2d2      	uxtb	r2, r2
    c71c:	701a      	strb	r2, [r3, #0]
    c71e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c722:	0a1b      	lsrs	r3, r3, #8
    c724:	b299      	uxth	r1, r3
    c726:	9b05      	ldr	r3, [sp, #20]
    c728:	1c5a      	adds	r2, r3, #1
    c72a:	9205      	str	r2, [sp, #20]
    c72c:	b2ca      	uxtb	r2, r1
    c72e:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, cid);
    c730:	9b05      	ldr	r3, [sp, #20]
    c732:	1c5a      	adds	r2, r3, #1
    c734:	9205      	str	r2, [sp, #20]
    c736:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c73a:	b2d2      	uxtb	r2, r2
    c73c:	701a      	strb	r2, [r3, #0]
    c73e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c742:	0a1b      	lsrs	r3, r3, #8
    c744:	b299      	uxth	r1, r3
    c746:	9b05      	ldr	r3, [sp, #20]
    c748:	1c5a      	adds	r2, r3, #1
    c74a:	9205      	str	r2, [sp, #20]
    c74c:	b2ca      	uxtb	r2, r1
    c74e:	701a      	strb	r2, [r3, #0]

  /* Send to HCI */
  HciSendAclData(pPacket);
    c750:	9801      	ldr	r0, [sp, #4]
    c752:	f012 fdb5 	bl	1f2c0 <HciSendAclData>
}
    c756:	bf00      	nop
    c758:	b007      	add	sp, #28
    c75a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c760 <l2cSlaveReqTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveReqTimeout(wsfMsgHdr_t *pMsg)
{
    c760:	b500      	push	{lr}
    c762:	b083      	sub	sp, #12
    c764:	9001      	str	r0, [sp, #4]
  L2C_TRACE_WARN0("conn update req timeout");
    c766:	4806      	ldr	r0, [pc, #24]	; (c780 <l2cSlaveReqTimeout+0x20>)
    c768:	f001 f96e 	bl	da48 <WsfTrace>

  /* Notify DM that connection update has failed (handle is stored in param) */
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	881b      	ldrh	r3, [r3, #0]
    c770:	2101      	movs	r1, #1
    c772:	4618      	mov	r0, r3
    c774:	f009 fcd6 	bl	16124 <DmL2cConnUpdateCnf>
}
    c778:	bf00      	nop
    c77a:	b003      	add	sp, #12
    c77c:	f85d fb04 	ldr.w	pc, [sp], #4
    c780:	0002aec0 	.word	0x0002aec0

0000c784 <l2cSlaveRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
    c784:	b500      	push	{lr}
    c786:	b085      	sub	sp, #20
    c788:	4603      	mov	r3, r0
    c78a:	9200      	str	r2, [sp, #0]
    c78c:	f8ad 3006 	strh.w	r3, [sp, #6]
    c790:	460b      	mov	r3, r1
    c792:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t   id;
  uint16_t  len;
  uint16_t  result;

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
    c796:	9b00      	ldr	r3, [sp, #0]
    c798:	3308      	adds	r3, #8
    c79a:	9300      	str	r3, [sp, #0]
  BSTREAM_TO_UINT8(code, pPacket);
    c79c:	9b00      	ldr	r3, [sp, #0]
    c79e:	1c5a      	adds	r2, r3, #1
    c7a0:	9200      	str	r2, [sp, #0]
    c7a2:	781b      	ldrb	r3, [r3, #0]
    c7a4:	f88d 300d 	strb.w	r3, [sp, #13]
  BSTREAM_TO_UINT8(id, pPacket);
    c7a8:	9b00      	ldr	r3, [sp, #0]
    c7aa:	1c5a      	adds	r2, r3, #1
    c7ac:	9200      	str	r2, [sp, #0]
    c7ae:	781b      	ldrb	r3, [r3, #0]
    c7b0:	f88d 300c 	strb.w	r3, [sp, #12]
  BSTREAM_TO_UINT16(len, pPacket);
    c7b4:	9b00      	ldr	r3, [sp, #0]
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	b29a      	uxth	r2, r3
    c7ba:	9b00      	ldr	r3, [sp, #0]
    c7bc:	3301      	adds	r3, #1
    c7be:	781b      	ldrb	r3, [r3, #0]
    c7c0:	b29b      	uxth	r3, r3
    c7c2:	021b      	lsls	r3, r3, #8
    c7c4:	b29b      	uxth	r3, r3
    c7c6:	4413      	add	r3, r2
    c7c8:	f8ad 300a 	strh.w	r3, [sp, #10]
    c7cc:	9b00      	ldr	r3, [sp, #0]
    c7ce:	3302      	adds	r3, #2
    c7d0:	9300      	str	r3, [sp, #0]

  /* verify signal identifier is valid */
  if (id == L2C_SIGNAL_ID_INVALID)
    c7d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d06d      	beq.n	c8b6 <l2cSlaveRxSignalingPkt+0x132>
  /* verify signal identifier is expected
   * verify signaling length vs. l2c length
   * verify this is a conn param update rsp or command reject
   * verify parameter length
   */
  if ((id == l2cSlaveCb.signId[handle])   &&
    c7da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c7de:	4a39      	ldr	r2, [pc, #228]	; (c8c4 <l2cSlaveRxSignalingPkt+0x140>)
    c7e0:	4413      	add	r3, r2
    c7e2:	7d1b      	ldrb	r3, [r3, #20]
    c7e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
    c7e8:	429a      	cmp	r2, r3
    c7ea:	d14e      	bne.n	c88a <l2cSlaveRxSignalingPkt+0x106>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
    c7ec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c7f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c7f4:	3304      	adds	r3, #4
  if ((id == l2cSlaveCb.signId[handle])   &&
    c7f6:	429a      	cmp	r2, r3
    c7f8:	d147      	bne.n	c88a <l2cSlaveRxSignalingPkt+0x106>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
    c7fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c7fe:	2b13      	cmp	r3, #19
    c800:	d103      	bne.n	c80a <l2cSlaveRxSignalingPkt+0x86>
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
    c802:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c806:	2b02      	cmp	r3, #2
    c808:	d003      	beq.n	c812 <l2cSlaveRxSignalingPkt+0x8e>
    c80a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c80e:	2b01      	cmp	r3, #1
    c810:	d13b      	bne.n	c88a <l2cSlaveRxSignalingPkt+0x106>
       (code == L2C_SIG_CMD_REJ)))
  {
    /* get last sent code */
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
    c812:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c816:	4a2b      	ldr	r2, [pc, #172]	; (c8c4 <l2cSlaveRxSignalingPkt+0x140>)
    c818:	4413      	add	r3, r2
    c81a:	7c5b      	ldrb	r3, [r3, #17]
    c81c:	f88d 3009 	strb.w	r3, [sp, #9]

    /* clear pending signal id */
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
    c820:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c824:	4a27      	ldr	r2, [pc, #156]	; (c8c4 <l2cSlaveRxSignalingPkt+0x140>)
    c826:	4413      	add	r3, r2
    c828:	2200      	movs	r2, #0
    c82a:	751a      	strb	r2, [r3, #20]

    /* parse result parameter */
    BSTREAM_TO_UINT16(result, pPacket);
    c82c:	9b00      	ldr	r3, [sp, #0]
    c82e:	781b      	ldrb	r3, [r3, #0]
    c830:	b29a      	uxth	r2, r3
    c832:	9b00      	ldr	r3, [sp, #0]
    c834:	3301      	adds	r3, #1
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	b29b      	uxth	r3, r3
    c83a:	021b      	lsls	r3, r3, #8
    c83c:	b29b      	uxth	r3, r3
    c83e:	4413      	add	r3, r2
    c840:	f8ad 300e 	strh.w	r3, [sp, #14]
    c844:	9b00      	ldr	r3, [sp, #0]
    c846:	3302      	adds	r3, #2
    c848:	9300      	str	r3, [sp, #0]

    /* stop req timer */
    WsfTimerStop(&l2cSlaveCb.reqTimer);
    c84a:	481e      	ldr	r0, [pc, #120]	; (c8c4 <l2cSlaveRxSignalingPkt+0x140>)
    c84c:	f001 f838 	bl	d8c0 <WsfTimerStop>

    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
    c850:	f89d 3009 	ldrb.w	r3, [sp, #9]
    c854:	2b12      	cmp	r3, #18
    c856:	d10f      	bne.n	c878 <l2cSlaveRxSignalingPkt+0xf4>
    {
      if (code == L2C_SIG_CMD_REJ)
    c858:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c85c:	2b01      	cmp	r3, #1
    c85e:	d102      	bne.n	c866 <l2cSlaveRxSignalingPkt+0xe2>
      {
        /* got command reject */
        result = L2C_CONN_PARAM_REJECTED;
    c860:	2301      	movs	r3, #1
    c862:	f8ad 300e 	strh.w	r3, [sp, #14]
      }

      /* send to DM */
      DmL2cConnUpdateCnf(handle, result);
    c866:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c86a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c86e:	4611      	mov	r1, r2
    c870:	4618      	mov	r0, r3
    c872:	f009 fc57 	bl	16124 <DmL2cConnUpdateCnf>
  {
    c876:	e021      	b.n	c8bc <l2cSlaveRxSignalingPkt+0x138>
    }
    else
    {
      /* send to DM */
      DmL2cCmdRejInd(handle, result);
    c878:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c87c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c880:	4611      	mov	r1, r2
    c882:	4618      	mov	r0, r3
    c884:	f009 fc70 	bl	16168 <DmL2cCmdRejInd>
  {
    c888:	e018      	b.n	c8bc <l2cSlaveRxSignalingPkt+0x138>
    }
  }
  else
  {
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
    c88a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    c88e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c892:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c896:	480c      	ldr	r0, [pc, #48]	; (c8c8 <l2cSlaveRxSignalingPkt+0x144>)
    c898:	f001 f8d6 	bl	da48 <WsfTrace>

    /* reject all unknown, invalid or unidentified commands except command reject. */
    if (code != L2C_SIG_CMD_REJ)
    c89c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c8a0:	2b01      	cmp	r3, #1
    c8a2:	d00a      	beq.n	c8ba <l2cSlaveRxSignalingPkt+0x136>
    {
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
    c8a4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c8a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c8ac:	2200      	movs	r2, #0
    c8ae:	4618      	mov	r0, r3
    c8b0:	f7ff fe5e 	bl	c570 <l2cSendCmdReject>
    }

    return;
    c8b4:	e001      	b.n	c8ba <l2cSlaveRxSignalingPkt+0x136>
    return;
    c8b6:	bf00      	nop
    c8b8:	e000      	b.n	c8bc <l2cSlaveRxSignalingPkt+0x138>
    return;
    c8ba:	bf00      	nop
  }
}
    c8bc:	b005      	add	sp, #20
    c8be:	f85d fb04 	ldr.w	pc, [sp], #4
    c8c2:	bf00      	nop
    c8c4:	100035e8 	.word	0x100035e8
    c8c8:	0002aed8 	.word	0x0002aed8

0000c8cc <L2cSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveInit(void)
{
    c8cc:	b082      	sub	sp, #8
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;
    c8ce:	4b0d      	ldr	r3, [pc, #52]	; (c904 <L2cSlaveInit+0x38>)
    c8d0:	4a0d      	ldr	r2, [pc, #52]	; (c908 <L2cSlaveInit+0x3c>)
    c8d2:	61da      	str	r2, [r3, #28]

  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    c8d4:	2300      	movs	r3, #0
    c8d6:	f88d 3007 	strb.w	r3, [sp, #7]
    c8da:	e00a      	b.n	c8f2 <L2cSlaveInit+0x26>
  {
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
    c8dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8e0:	4a0a      	ldr	r2, [pc, #40]	; (c90c <L2cSlaveInit+0x40>)
    c8e2:	4413      	add	r3, r2
    c8e4:	2200      	movs	r2, #0
    c8e6:	751a      	strb	r2, [r3, #20]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    c8e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8ec:	3301      	adds	r3, #1
    c8ee:	f88d 3007 	strb.w	r3, [sp, #7]
    c8f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8f6:	2b02      	cmp	r3, #2
    c8f8:	d9f0      	bls.n	c8dc <L2cSlaveInit+0x10>
  }
}
    c8fa:	bf00      	nop
    c8fc:	bf00      	nop
    c8fe:	b002      	add	sp, #8
    c900:	4770      	bx	lr
    c902:	bf00      	nop
    c904:	100088dc 	.word	0x100088dc
    c908:	0000c785 	.word	0x0000c785
    c90c:	100035e8 	.word	0x100035e8

0000c910 <L2cDmConnUpdateReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDmConnUpdateReq(uint16_t handle, hciConnSpec_t *pConnSpec)
{
    c910:	b500      	push	{lr}
    c912:	b085      	sub	sp, #20
    c914:	4603      	mov	r3, r0
    c916:	9100      	str	r1, [sp, #0]
    c918:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pPacket;
  uint8_t *p;

  /* record code */
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
    c91c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c920:	4a47      	ldr	r2, [pc, #284]	; (ca40 <L2cDmConnUpdateReq+0x130>)
    c922:	4413      	add	r3, r2
    c924:	2212      	movs	r2, #18
    c926:	745a      	strb	r2, [r3, #17]

  /* Start signaling request timer and store handle */
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
    c928:	211e      	movs	r1, #30
    c92a:	4845      	ldr	r0, [pc, #276]	; (ca40 <L2cDmConnUpdateReq+0x130>)
    c92c:	f000 ffa4 	bl	d878 <WsfTimerStartSec>
  l2cSlaveCb.reqTimer.msg.param = handle;
    c930:	4a43      	ldr	r2, [pc, #268]	; (ca40 <L2cDmConnUpdateReq+0x130>)
    c932:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c936:	8153      	strh	r3, [r2, #10]

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
    c938:	2014      	movs	r0, #20
    c93a:	f7ff fe5e 	bl	c5fa <l2cMsgAlloc>
    c93e:	9003      	str	r0, [sp, #12]
    c940:	9b03      	ldr	r3, [sp, #12]
    c942:	2b00      	cmp	r3, #0
    c944:	d077      	beq.n	ca36 <L2cDmConnUpdateReq+0x126>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    c946:	9b03      	ldr	r3, [sp, #12]
    c948:	3308      	adds	r3, #8
    c94a:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
    c94c:	9b02      	ldr	r3, [sp, #8]
    c94e:	1c5a      	adds	r2, r3, #1
    c950:	9202      	str	r2, [sp, #8]
    c952:	2212      	movs	r2, #18
    c954:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
    c956:	9b02      	ldr	r3, [sp, #8]
    c958:	1c5a      	adds	r2, r3, #1
    c95a:	9202      	str	r2, [sp, #8]
    c95c:	4a39      	ldr	r2, [pc, #228]	; (ca44 <L2cDmConnUpdateReq+0x134>)
    c95e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    c962:	701a      	strb	r2, [r3, #0]
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
    c964:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c968:	4a36      	ldr	r2, [pc, #216]	; (ca44 <L2cDmConnUpdateReq+0x134>)
    c96a:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
    c96e:	4a34      	ldr	r2, [pc, #208]	; (ca40 <L2cDmConnUpdateReq+0x130>)
    c970:	4413      	add	r3, r2
    c972:	460a      	mov	r2, r1
    c974:	751a      	strb	r2, [r3, #20]
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
    c976:	4b33      	ldr	r3, [pc, #204]	; (ca44 <L2cDmConnUpdateReq+0x134>)
    c978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c97c:	2bff      	cmp	r3, #255	; 0xff
    c97e:	d005      	beq.n	c98c <L2cDmConnUpdateReq+0x7c>
    c980:	4b30      	ldr	r3, [pc, #192]	; (ca44 <L2cDmConnUpdateReq+0x134>)
    c982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c986:	3301      	adds	r3, #1
    c988:	b2db      	uxtb	r3, r3
    c98a:	e000      	b.n	c98e <L2cDmConnUpdateReq+0x7e>
    c98c:	2301      	movs	r3, #1
    c98e:	4a2d      	ldr	r2, [pc, #180]	; (ca44 <L2cDmConnUpdateReq+0x134>)
    c990:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ_LEN);  /* parameter length */
    c994:	9b02      	ldr	r3, [sp, #8]
    c996:	1c5a      	adds	r2, r3, #1
    c998:	9202      	str	r2, [sp, #8]
    c99a:	2208      	movs	r2, #8
    c99c:	701a      	strb	r2, [r3, #0]
    c99e:	9b02      	ldr	r3, [sp, #8]
    c9a0:	1c5a      	adds	r2, r3, #1
    c9a2:	9202      	str	r2, [sp, #8]
    c9a4:	2200      	movs	r2, #0
    c9a6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);   /* interval min */
    c9a8:	9b00      	ldr	r3, [sp, #0]
    c9aa:	8819      	ldrh	r1, [r3, #0]
    c9ac:	9b02      	ldr	r3, [sp, #8]
    c9ae:	1c5a      	adds	r2, r3, #1
    c9b0:	9202      	str	r2, [sp, #8]
    c9b2:	b2ca      	uxtb	r2, r1
    c9b4:	701a      	strb	r2, [r3, #0]
    c9b6:	9b00      	ldr	r3, [sp, #0]
    c9b8:	881b      	ldrh	r3, [r3, #0]
    c9ba:	0a1b      	lsrs	r3, r3, #8
    c9bc:	b299      	uxth	r1, r3
    c9be:	9b02      	ldr	r3, [sp, #8]
    c9c0:	1c5a      	adds	r2, r3, #1
    c9c2:	9202      	str	r2, [sp, #8]
    c9c4:	b2ca      	uxtb	r2, r1
    c9c6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);   /* interval max */
    c9c8:	9b00      	ldr	r3, [sp, #0]
    c9ca:	8859      	ldrh	r1, [r3, #2]
    c9cc:	9b02      	ldr	r3, [sp, #8]
    c9ce:	1c5a      	adds	r2, r3, #1
    c9d0:	9202      	str	r2, [sp, #8]
    c9d2:	b2ca      	uxtb	r2, r1
    c9d4:	701a      	strb	r2, [r3, #0]
    c9d6:	9b00      	ldr	r3, [sp, #0]
    c9d8:	885b      	ldrh	r3, [r3, #2]
    c9da:	0a1b      	lsrs	r3, r3, #8
    c9dc:	b299      	uxth	r1, r3
    c9de:	9b02      	ldr	r3, [sp, #8]
    c9e0:	1c5a      	adds	r2, r3, #1
    c9e2:	9202      	str	r2, [sp, #8]
    c9e4:	b2ca      	uxtb	r2, r1
    c9e6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);       /* slave latency */
    c9e8:	9b00      	ldr	r3, [sp, #0]
    c9ea:	8899      	ldrh	r1, [r3, #4]
    c9ec:	9b02      	ldr	r3, [sp, #8]
    c9ee:	1c5a      	adds	r2, r3, #1
    c9f0:	9202      	str	r2, [sp, #8]
    c9f2:	b2ca      	uxtb	r2, r1
    c9f4:	701a      	strb	r2, [r3, #0]
    c9f6:	9b00      	ldr	r3, [sp, #0]
    c9f8:	889b      	ldrh	r3, [r3, #4]
    c9fa:	0a1b      	lsrs	r3, r3, #8
    c9fc:	b299      	uxth	r1, r3
    c9fe:	9b02      	ldr	r3, [sp, #8]
    ca00:	1c5a      	adds	r2, r3, #1
    ca02:	9202      	str	r2, [sp, #8]
    ca04:	b2ca      	uxtb	r2, r1
    ca06:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);        /* timeout multiplier */
    ca08:	9b00      	ldr	r3, [sp, #0]
    ca0a:	88d9      	ldrh	r1, [r3, #6]
    ca0c:	9b02      	ldr	r3, [sp, #8]
    ca0e:	1c5a      	adds	r2, r3, #1
    ca10:	9202      	str	r2, [sp, #8]
    ca12:	b2ca      	uxtb	r2, r1
    ca14:	701a      	strb	r2, [r3, #0]
    ca16:	9b00      	ldr	r3, [sp, #0]
    ca18:	88db      	ldrh	r3, [r3, #6]
    ca1a:	0a1b      	lsrs	r3, r3, #8
    ca1c:	b299      	uxth	r1, r3
    ca1e:	9b02      	ldr	r3, [sp, #8]
    ca20:	1c5a      	adds	r2, r3, #1
    ca22:	9202      	str	r2, [sp, #8]
    ca24:	b2ca      	uxtb	r2, r1
    ca26:	701a      	strb	r2, [r3, #0]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
    ca28:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    ca2c:	9b03      	ldr	r3, [sp, #12]
    ca2e:	220c      	movs	r2, #12
    ca30:	2005      	movs	r0, #5
    ca32:	f7ff fe3d 	bl	c6b0 <L2cDataReq>
  }
}
    ca36:	bf00      	nop
    ca38:	b005      	add	sp, #20
    ca3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ca3e:	bf00      	nop
    ca40:	100035e8 	.word	0x100035e8
    ca44:	100088dc 	.word	0x100088dc

0000ca48 <L2cSlaveHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandlerInit(wsfHandlerId_t handlerId)
{
    ca48:	b082      	sub	sp, #8
    ca4a:	4603      	mov	r3, r0
    ca4c:	f88d 3007 	strb.w	r3, [sp, #7]
  l2cSlaveCb.reqTimer.msg.event = L2C_MSG_REQ_TIMEOUT;
    ca50:	4b06      	ldr	r3, [pc, #24]	; (ca6c <L2cSlaveHandlerInit+0x24>)
    ca52:	2201      	movs	r2, #1
    ca54:	731a      	strb	r2, [r3, #12]
  l2cSlaveCb.reqTimer.handlerId = handlerId;
    ca56:	4a05      	ldr	r2, [pc, #20]	; (ca6c <L2cSlaveHandlerInit+0x24>)
    ca58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca5c:	7213      	strb	r3, [r2, #8]
  l2cSlaveCb.handlerId = handlerId;
    ca5e:	4a03      	ldr	r2, [pc, #12]	; (ca6c <L2cSlaveHandlerInit+0x24>)
    ca60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca64:	7413      	strb	r3, [r2, #16]
}
    ca66:	bf00      	nop
    ca68:	b002      	add	sp, #8
    ca6a:	4770      	bx	lr
    ca6c:	100035e8 	.word	0x100035e8

0000ca70 <L2cSlaveHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    ca70:	b500      	push	{lr}
    ca72:	b083      	sub	sp, #12
    ca74:	4603      	mov	r3, r0
    ca76:	9100      	str	r1, [sp, #0]
    ca78:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
    ca7c:	9b00      	ldr	r3, [sp, #0]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d006      	beq.n	ca90 <L2cSlaveHandler+0x20>
  {
    WSF_ASSERT(pMsg->event > 0 && pMsg->event <= L2C_MSG_TYPE_MAX);

    /* handle slave signaling request timeout */
    if (pMsg->event == L2C_MSG_REQ_TIMEOUT)
    ca82:	9b00      	ldr	r3, [sp, #0]
    ca84:	789b      	ldrb	r3, [r3, #2]
    ca86:	2b01      	cmp	r3, #1
    ca88:	d102      	bne.n	ca90 <L2cSlaveHandler+0x20>
    {
      l2cSlaveReqTimeout(pMsg);
    ca8a:	9800      	ldr	r0, [sp, #0]
    ca8c:	f7ff fe68 	bl	c760 <l2cSlaveReqTimeout>
  /* Handle events */
  else if (event)
  {

  }
}
    ca90:	bf00      	nop
    ca92:	b003      	add	sp, #12
    ca94:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca98 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
    ca98:	b508      	push	{r3, lr}
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
    ca9a:	f01e f8c7 	bl	2ac2c <am_bsp_itm_printf_enable>
}
    ca9e:	bf00      	nop
    caa0:	bd08      	pop	{r3, pc}
	...

0000caa4 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
    caa4:	b508      	push	{r3, lr}
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    caa6:	2100      	movs	r1, #0
    caa8:	2000      	movs	r0, #0
    caaa:	f01d fa73 	bl	29f94 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    caae:	480a      	ldr	r0, [pc, #40]	; (cad8 <main+0x34>)
    cab0:	f01d f8ce 	bl	29c50 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    cab4:	f01d f8f2 	bl	29c9c <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
    cab8:	f01e f864 	bl	2ab84 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    cabc:	2001      	movs	r0, #1
    cabe:	f01e f869 	bl	2ab94 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    cac2:	f01e f881 	bl	2abc8 <am_bsp_low_power_init>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
    cac6:	f7ff ffe7 	bl	ca98 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Tag Example\n");
    caca:	4804      	ldr	r0, [pc, #16]	; (cadc <main+0x38>)
    cacc:	f015 fee8 	bl	228a0 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
    cad0:	f000 f9d8 	bl	ce84 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
    cad4:	e7fe      	b.n	cad4 <main+0x30>
    cad6:	bf00      	nop
    cad8:	0002e8b4 	.word	0x0002e8b4
    cadc:	0002af00 	.word	0x0002af00

0000cae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    cae0:	b082      	sub	sp, #8
    cae2:	4603      	mov	r3, r0
    cae4:	9100      	str	r1, [sp, #0]
    cae6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    caea:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    caee:	2b00      	cmp	r3, #0
    caf0:	db0a      	blt.n	cb08 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    caf2:	9b00      	ldr	r3, [sp, #0]
    caf4:	b2da      	uxtb	r2, r3
    caf6:	490c      	ldr	r1, [pc, #48]	; (cb28 <__NVIC_SetPriority+0x48>)
    caf8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    cafc:	0152      	lsls	r2, r2, #5
    cafe:	b2d2      	uxtb	r2, r2
    cb00:	440b      	add	r3, r1
    cb02:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    cb06:	e00b      	b.n	cb20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb08:	9b00      	ldr	r3, [sp, #0]
    cb0a:	b2da      	uxtb	r2, r3
    cb0c:	4907      	ldr	r1, [pc, #28]	; (cb2c <__NVIC_SetPriority+0x4c>)
    cb0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb12:	f003 030f 	and.w	r3, r3, #15
    cb16:	3b04      	subs	r3, #4
    cb18:	0152      	lsls	r2, r2, #5
    cb1a:	b2d2      	uxtb	r2, r2
    cb1c:	440b      	add	r3, r1
    cb1e:	761a      	strb	r2, [r3, #24]
}
    cb20:	bf00      	nop
    cb22:	b002      	add	sp, #8
    cb24:	4770      	bx	lr
    cb26:	bf00      	nop
    cb28:	e000e100 	.word	0xe000e100
    cb2c:	e000ed00 	.word	0xe000ed00

0000cb30 <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    cb30:	b500      	push	{lr}
    cb32:	b083      	sub	sp, #12
    cb34:	4603      	mov	r3, r0
    cb36:	9100      	str	r1, [sp, #0]
    cb38:	f88d 3007 	strb.w	r3, [sp, #7]
    //
    // Restart the button timer.
    //
    WsfTimerStartMs(&ButtonTimer, 10);
    cb3c:	210a      	movs	r1, #10
    cb3e:	481e      	ldr	r0, [pc, #120]	; (cbb8 <button_handler+0x88>)
    cb40:	f000 feaa 	bl	d898 <WsfTimerStartMs>

#ifdef AM_BSP_NUM_BUTTONS
    //
    // Every time we get a button timer tick, check all of our buttons.
    //
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
    cb44:	2101      	movs	r1, #1
    cb46:	481d      	ldr	r0, [pc, #116]	; (cbbc <button_handler+0x8c>)
    cb48:	f017 ff92 	bl	24a70 <am_devices_button_array_tick>

    //
    // If we got a a press, do something with it.
    //
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
    cb4c:	4b1b      	ldr	r3, [pc, #108]	; (cbbc <button_handler+0x8c>)
    cb4e:	7b1b      	ldrb	r3, [r3, #12]
    cb50:	f083 0301 	eor.w	r3, r3, #1
    cb54:	b2db      	uxtb	r3, r3
    cb56:	2b00      	cmp	r3, #0
    cb58:	d009      	beq.n	cb6e <button_handler+0x3e>
    cb5a:	4b18      	ldr	r3, [pc, #96]	; (cbbc <button_handler+0x8c>)
    cb5c:	7b5b      	ldrb	r3, [r3, #13]
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d005      	beq.n	cb6e <button_handler+0x3e>
    {
        am_util_debug_printf("Got Button 0 Press\n");
    cb62:	4817      	ldr	r0, [pc, #92]	; (cbc0 <button_handler+0x90>)
    cb64:	f015 fe9c 	bl	228a0 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
    cb68:	2002      	movs	r0, #2
    cb6a:	f007 f8cb 	bl	13d04 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[1]) )
    cb6e:	4b13      	ldr	r3, [pc, #76]	; (cbbc <button_handler+0x8c>)
    cb70:	7f1b      	ldrb	r3, [r3, #28]
    cb72:	f083 0301 	eor.w	r3, r3, #1
    cb76:	b2db      	uxtb	r3, r3
    cb78:	2b00      	cmp	r3, #0
    cb7a:	d009      	beq.n	cb90 <button_handler+0x60>
    cb7c:	4b0f      	ldr	r3, [pc, #60]	; (cbbc <button_handler+0x8c>)
    cb7e:	7f5b      	ldrb	r3, [r3, #29]
    cb80:	2b00      	cmp	r3, #0
    cb82:	d005      	beq.n	cb90 <button_handler+0x60>
    {
        am_util_debug_printf("Got Button 1 Press\n");
    cb84:	480f      	ldr	r0, [pc, #60]	; (cbc4 <button_handler+0x94>)
    cb86:	f015 fe8b 	bl	228a0 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
    cb8a:	2002      	movs	r0, #2
    cb8c:	f007 f8ba 	bl	13d04 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[2]) )
    cb90:	4b0a      	ldr	r3, [pc, #40]	; (cbbc <button_handler+0x8c>)
    cb92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    cb96:	f083 0301 	eor.w	r3, r3, #1
    cb9a:	b2db      	uxtb	r3, r3
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d007      	beq.n	cbb0 <button_handler+0x80>
    cba0:	4b06      	ldr	r3, [pc, #24]	; (cbbc <button_handler+0x8c>)
    cba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    cba6:	2b00      	cmp	r3, #0
    cba8:	d002      	beq.n	cbb0 <button_handler+0x80>
    {
        am_util_debug_printf("Got Button 2 Press\n");
    cbaa:	4807      	ldr	r0, [pc, #28]	; (cbc8 <button_handler+0x98>)
    cbac:	f015 fe78 	bl	228a0 <am_util_stdio_printf>
    }
#endif // AM_BSP_NUM_BUTTONS
}
    cbb0:	bf00      	nop
    cbb2:	b003      	add	sp, #12
    cbb4:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb8:	1000890c 	.word	0x1000890c
    cbbc:	100035b8 	.word	0x100035b8
    cbc0:	0002af18 	.word	0x0002af18
    cbc4:	0002af2c 	.word	0x0002af2c
    cbc8:	0002af40 	.word	0x0002af40

0000cbcc <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
    cbcc:	b508      	push	{r3, lr}
#ifdef AM_BSP_NUM_BUTTONS
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
    cbce:	2101      	movs	r1, #1
    cbd0:	4806      	ldr	r0, [pc, #24]	; (cbec <setup_buttons+0x20>)
    cbd2:	f017 fee9 	bl	249a8 <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
    cbd6:	4b06      	ldr	r3, [pc, #24]	; (cbf0 <setup_buttons+0x24>)
    cbd8:	781a      	ldrb	r2, [r3, #0]
    cbda:	4b06      	ldr	r3, [pc, #24]	; (cbf4 <setup_buttons+0x28>)
    cbdc:	721a      	strb	r2, [r3, #8]
    WsfTimerStartSec(&ButtonTimer, 2);
    cbde:	2102      	movs	r1, #2
    cbe0:	4804      	ldr	r0, [pc, #16]	; (cbf4 <setup_buttons+0x28>)
    cbe2:	f000 fe49 	bl	d878 <WsfTimerStartSec>
#endif // AM_BSP_NUM_BUTTONS
}
    cbe6:	bf00      	nop
    cbe8:	bd08      	pop	{r3, pc}
    cbea:	bf00      	nop
    cbec:	100035b8 	.word	0x100035b8
    cbf0:	10008904 	.word	0x10008904
    cbf4:	1000890c 	.word	0x1000890c

0000cbf8 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
    cbf8:	b500      	push	{lr}
    cbfa:	b083      	sub	sp, #12
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    WsfOsInit();
    cbfc:	f000 fc12 	bl	d424 <WsfOsInit>
    WsfTimerInit();
    cc00:	f000 fe12 	bl	d828 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
    cc04:	4b50      	ldr	r3, [pc, #320]	; (cd48 <exactle_stack_init+0x150>)
    cc06:	2204      	movs	r2, #4
    cc08:	4950      	ldr	r1, [pc, #320]	; (cd4c <exactle_stack_init+0x154>)
    cc0a:	f44f 6038 	mov.w	r0, #2944	; 0xb80
    cc0e:	f000 f965 	bl	cedc <WsfBufInit>
    cc12:	4603      	mov	r3, r0
    cc14:	f8ad 3006 	strh.w	r3, [sp, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
    cc18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cc1c:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
    cc20:	d907      	bls.n	cc32 <exactle_stack_init+0x3a>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
    cc22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cc26:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
    cc2a:	4619      	mov	r1, r3
    cc2c:	4848      	ldr	r0, [pc, #288]	; (cd50 <exactle_stack_init+0x158>)
    cc2e:	f015 fe37 	bl	228a0 <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
    cc32:	f00d f8d3 	bl	19ddc <SecInit>
    SecAesInit();
    cc36:	f00c fe67 	bl	19908 <SecAesInit>
    SecCmacInit();
    cc3a:	f00d f835 	bl	19ca8 <SecCmacInit>
    SecEccInit();
    cc3e:	f006 fb83 	bl	13348 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
    cc42:	4844      	ldr	r0, [pc, #272]	; (cd54 <exactle_stack_init+0x15c>)
    cc44:	f000 fbd4 	bl	d3f0 <WsfOsSetNextHandler>
    cc48:	4603      	mov	r3, r0
    cc4a:	f88d 3005 	strb.w	r3, [sp, #5]
    HciHandlerInit(handlerId);
    cc4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cc52:	4618      	mov	r0, r3
    cc54:	f010 ffda 	bl	1dc0c <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
    cc58:	483f      	ldr	r0, [pc, #252]	; (cd58 <exactle_stack_init+0x160>)
    cc5a:	f000 fbc9 	bl	d3f0 <WsfOsSetNextHandler>
    cc5e:	4603      	mov	r3, r0
    cc60:	f88d 3005 	strb.w	r3, [sp, #5]
    DmDevVsInit(0);
    cc64:	2000      	movs	r0, #0
    cc66:	f009 fd03 	bl	16670 <DmDevVsInit>
    DmAdvInit();
    cc6a:	f008 f92f 	bl	14ecc <DmAdvInit>
    DmConnInit();
    cc6e:	f008 ff17 	bl	15aa0 <DmConnInit>
    DmConnSlaveInit();
    cc72:	f009 fb07 	bl	16284 <DmConnSlaveInit>
    DmSecInit();
    cc76:	f00a fa5b 	bl	17130 <DmSecInit>
    DmSecLescInit();
    cc7a:	f00a fb47 	bl	1730c <DmSecLescInit>
    DmPrivInit();
    cc7e:	f00a f821 	bl	16cc4 <DmPrivInit>
    DmHandlerInit(handlerId);
    cc82:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cc86:	4618      	mov	r0, r3
    cc88:	f009 fd80 	bl	1678c <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
    cc8c:	4833      	ldr	r0, [pc, #204]	; (cd5c <exactle_stack_init+0x164>)
    cc8e:	f000 fbaf 	bl	d3f0 <WsfOsSetNextHandler>
    cc92:	4603      	mov	r3, r0
    cc94:	f88d 3005 	strb.w	r3, [sp, #5]
    L2cSlaveHandlerInit(handlerId);
    cc98:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cc9c:	4618      	mov	r0, r3
    cc9e:	f7ff fed3 	bl	ca48 <L2cSlaveHandlerInit>
    L2cInit();
    cca2:	f7ff fcbb 	bl	c61c <L2cInit>
    L2cSlaveInit();
    cca6:	f7ff fe11 	bl	c8cc <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
    ccaa:	482d      	ldr	r0, [pc, #180]	; (cd60 <exactle_stack_init+0x168>)
    ccac:	f000 fba0 	bl	d3f0 <WsfOsSetNextHandler>
    ccb0:	4603      	mov	r3, r0
    ccb2:	f88d 3005 	strb.w	r3, [sp, #5]
    AttHandlerInit(handlerId);
    ccb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ccba:	4618      	mov	r0, r3
    ccbc:	f006 fa22 	bl	13104 <AttHandlerInit>
    AttsInit();
    ccc0:	f004 f8c4 	bl	10e4c <AttsInit>
    AttsIndInit();
    ccc4:	f003 fd7e 	bl	107c4 <AttsIndInit>
    AttcInit();
    ccc8:	f001 ffc0 	bl	ec4c <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
    cccc:	4825      	ldr	r0, [pc, #148]	; (cd64 <exactle_stack_init+0x16c>)
    ccce:	f000 fb8f 	bl	d3f0 <WsfOsSetNextHandler>
    ccd2:	4603      	mov	r3, r0
    ccd4:	f88d 3005 	strb.w	r3, [sp, #5]
    SmpHandlerInit(handlerId);
    ccd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ccdc:	4618      	mov	r0, r3
    ccde:	f00f fbbd 	bl	1c45c <SmpHandlerInit>
    SmprInit();
    cce2:	f00d ff07 	bl	1aaf4 <SmprInit>
    SmprScInit();
    cce6:	f00d fef7 	bl	1aad8 <SmprScInit>
    HciSetMaxRxAclLen(251);
    ccea:	20fb      	movs	r0, #251	; 0xfb
    ccec:	f012 fada 	bl	1f2a4 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
    ccf0:	481d      	ldr	r0, [pc, #116]	; (cd68 <exactle_stack_init+0x170>)
    ccf2:	f000 fb7d 	bl	d3f0 <WsfOsSetNextHandler>
    ccf6:	4603      	mov	r3, r0
    ccf8:	f88d 3005 	strb.w	r3, [sp, #5]
    AppHandlerInit(handlerId);
    ccfc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cd00:	4618      	mov	r0, r3
    cd02:	f019 fc07 	bl	26514 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(TagHandler);
    cd06:	4819      	ldr	r0, [pc, #100]	; (cd6c <exactle_stack_init+0x174>)
    cd08:	f000 fb72 	bl	d3f0 <WsfOsSetNextHandler>
    cd0c:	4603      	mov	r3, r0
    cd0e:	f88d 3005 	strb.w	r3, [sp, #5]
    TagHandlerInit(handlerId);
    cd12:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cd16:	4618      	mov	r0, r3
    cd18:	f018 fc98 	bl	2564c <TagHandlerInit>

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
    cd1c:	4814      	ldr	r0, [pc, #80]	; (cd70 <exactle_stack_init+0x178>)
    cd1e:	f000 fb67 	bl	d3f0 <WsfOsSetNextHandler>
    cd22:	4603      	mov	r3, r0
    cd24:	461a      	mov	r2, r3
    cd26:	4b13      	ldr	r3, [pc, #76]	; (cd74 <exactle_stack_init+0x17c>)
    cd28:	701a      	strb	r2, [r3, #0]

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
    cd2a:	4813      	ldr	r0, [pc, #76]	; (cd78 <exactle_stack_init+0x180>)
    cd2c:	f000 fb60 	bl	d3f0 <WsfOsSetNextHandler>
    cd30:	4603      	mov	r3, r0
    cd32:	f88d 3005 	strb.w	r3, [sp, #5]
    HciDrvHandlerInit(handlerId);
    cd36:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cd3a:	4618      	mov	r0, r3
    cd3c:	f007 fa1e 	bl	1417c <HciDrvHandlerInit>
}
    cd40:	bf00      	nop
    cd42:	b003      	add	sp, #12
    cd44:	f85d fb04 	ldr.w	pc, [sp], #4
    cd48:	10002b00 	.word	0x10002b00
    cd4c:	10003600 	.word	0x10003600
    cd50:	0002af54 	.word	0x0002af54
    cd54:	0001dc3d 	.word	0x0001dc3d
    cd58:	000167c1 	.word	0x000167c1
    cd5c:	0000ca71 	.word	0x0000ca71
    cd60:	00013155 	.word	0x00013155
    cd64:	0001c4f1 	.word	0x0001c4f1
    cd68:	00026539 	.word	0x00026539
    cd6c:	00025709 	.word	0x00025709
    cd70:	0000cb31 	.word	0x0000cb31
    cd74:	10008904 	.word	0x10008904
    cd78:	00014205 	.word	0x00014205

0000cd7c <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
    cd7c:	b500      	push	{lr}
    cd7e:	b083      	sub	sp, #12
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
    cd80:	4b06      	ldr	r3, [pc, #24]	; (cd9c <am_uart_isr+0x20>)
    cd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cd84:	9301      	str	r3, [sp, #4]
    UARTn(0)->IEC = ui32Status;
    cd86:	4a05      	ldr	r2, [pc, #20]	; (cd9c <am_uart_isr+0x20>)
    cd88:	9b01      	ldr	r3, [sp, #4]
    cd8a:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
    cd8c:	2100      	movs	r1, #0
    cd8e:	2000      	movs	r0, #0
    cd90:	f000 fb04 	bl	d39c <WsfTaskSetReady>
}
    cd94:	bf00      	nop
    cd96:	b003      	add	sp, #12
    cd98:	f85d fb04 	ldr.w	pc, [sp], #4
    cd9c:	4001c000 	.word	0x4001c000

0000cda0 <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
    cda0:	b508      	push	{r3, lr}

    HciDrvIntService();
    cda2:	f007 fa0b 	bl	141bc <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
    cda6:	2100      	movs	r1, #0
    cda8:	2000      	movs	r0, #0
    cdaa:	f000 faf7 	bl	d39c <WsfTaskSetReady>
}
    cdae:	bf00      	nop
    cdb0:	bd08      	pop	{r3, pc}
	...

0000cdb4 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
    cdb4:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");
    cdb6:	4806      	ldr	r0, [pc, #24]	; (cdd0 <RadioTaskSetup+0x1c>)
    cdb8:	f015 fd72 	bl	228a0 <am_util_stdio_printf>


    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
    cdbc:	2104      	movs	r1, #4
    cdbe:	200c      	movs	r0, #12
    cdc0:	f7ff fe8e 	bl	cae0 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
    cdc4:	2001      	movs	r0, #1
    cdc6:	f007 f80b 	bl	13de0 <HciDrvRadioBoot>
}
    cdca:	bf00      	nop
    cdcc:	bd08      	pop	{r3, pc}
    cdce:	bf00      	nop
    cdd0:	0002af78 	.word	0x0002af78

0000cdd4 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
    cdd4:	b500      	push	{lr}
    cdd6:	b083      	sub	sp, #12
    cdd8:	9001      	str	r0, [sp, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
    cdda:	4806      	ldr	r0, [pc, #24]	; (cdf4 <RadioTask+0x20>)
    cddc:	f015 fd60 	bl	228a0 <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
    cde0:	f7ff ff0a 	bl	cbf8 <exactle_stack_init>

    //
    // Prep the buttons for use
    //

    setup_buttons();
    cde4:	f7ff fef2 	bl	cbcc <setup_buttons>

    //
    // Start the "Tag" profile.
    //
    TagStart();
    cde8:	f018 fcbe 	bl	25768 <TagStart>

        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
    cdec:	f000 fb30 	bl	d450 <wsfOsDispatcher>
    cdf0:	e7fc      	b.n	cdec <RadioTask+0x18>
    cdf2:	bf00      	nop
    cdf4:	0002af8c 	.word	0x0002af8c

0000cdf8 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    cdf8:	b500      	push	{lr}
    cdfa:	b083      	sub	sp, #12
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
    cdfc:	2000      	movs	r0, #0
    cdfe:	f01d f99d 	bl	2a13c <am_hal_ctimer_int_status_get>
    ce02:	9001      	str	r0, [sp, #4]
    am_hal_ctimer_int_clear(ui32Status);
    ce04:	9801      	ldr	r0, [sp, #4]
    ce06:	f01d f989 	bl	2a11c <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
    ce0a:	9801      	ldr	r0, [sp, #4]
    ce0c:	f01d f96e 	bl	2a0ec <am_hal_ctimer_int_service>
}
    ce10:	bf00      	nop
    ce12:	b003      	add	sp, #12
    ce14:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce18 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
    ce18:	b500      	push	{lr}
    ce1a:	b083      	sub	sp, #12
    ce1c:	9001      	str	r0, [sp, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    ce1e:	2001      	movs	r0, #1
    ce20:	f01d fe78 	bl	2ab14 <am_hal_sysctrl_sleep>
    return 0;
    ce24:	2300      	movs	r3, #0
}
    ce26:	4618      	mov	r0, r3
    ce28:	b003      	add	sp, #12
    ce2a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce2e <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
    ce2e:	b082      	sub	sp, #8
    ce30:	9001      	str	r0, [sp, #4]
    return;
    ce32:	bf00      	nop
}
    ce34:	b002      	add	sp, #8
    ce36:	4770      	bx	lr

0000ce38 <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
    ce38:	e7fe      	b.n	ce38 <vApplicationMallocFailedHook>

0000ce3a <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    ce3a:	b082      	sub	sp, #8
    ce3c:	9001      	str	r0, [sp, #4]
    ce3e:	9100      	str	r1, [sp, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
    ce40:	be00      	bkpt	0x0000
    ce42:	e7fd      	b.n	ce40 <vApplicationStackOverflowHook+0x6>

0000ce44 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
    ce44:	b500      	push	{lr}
    ce46:	b085      	sub	sp, #20
    ce48:	9003      	str	r0, [sp, #12]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
    ce4a:	480a      	ldr	r0, [pc, #40]	; (ce74 <setup_task+0x30>)
    ce4c:	f015 fd28 	bl	228a0 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
    ce50:	f7ff ffb0 	bl	cdb4 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
    ce54:	4b08      	ldr	r3, [pc, #32]	; (ce78 <setup_task+0x34>)
    ce56:	9301      	str	r3, [sp, #4]
    ce58:	2303      	movs	r3, #3
    ce5a:	9300      	str	r3, [sp, #0]
    ce5c:	2300      	movs	r3, #0
    ce5e:	f44f 7200 	mov.w	r2, #512	; 0x200
    ce62:	4906      	ldr	r1, [pc, #24]	; (ce7c <setup_task+0x38>)
    ce64:	4806      	ldr	r0, [pc, #24]	; (ce80 <setup_task+0x3c>)
    ce66:	f016 fb23 	bl	234b0 <xTaskCreate>

    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
    ce6a:	2000      	movs	r0, #0
    ce6c:	f016 fc48 	bl	23700 <vTaskSuspend>

    while (1);
    ce70:	e7fe      	b.n	ce70 <setup_task+0x2c>
    ce72:	bf00      	nop
    ce74:	0002afa8 	.word	0x0002afa8
    ce78:	10008908 	.word	0x10008908
    ce7c:	0002afc4 	.word	0x0002afc4
    ce80:	0000cdd5 	.word	0x0000cdd5

0000ce84 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
    ce84:	b500      	push	{lr}
    ce86:	b083      	sub	sp, #12
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
    ce88:	4b08      	ldr	r3, [pc, #32]	; (ceac <run_tasks+0x28>)
    ce8a:	9301      	str	r3, [sp, #4]
    ce8c:	2303      	movs	r3, #3
    ce8e:	9300      	str	r3, [sp, #0]
    ce90:	2300      	movs	r3, #0
    ce92:	f44f 7200 	mov.w	r2, #512	; 0x200
    ce96:	4906      	ldr	r1, [pc, #24]	; (ceb0 <run_tasks+0x2c>)
    ce98:	4806      	ldr	r0, [pc, #24]	; (ceb4 <run_tasks+0x30>)
    ce9a:	f016 fb09 	bl	234b0 <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
    ce9e:	f016 fc99 	bl	237d4 <vTaskStartScheduler>
}
    cea2:	bf00      	nop
    cea4:	b003      	add	sp, #12
    cea6:	f85d fb04 	ldr.w	pc, [sp], #4
    ceaa:	bf00      	nop
    ceac:	1000891c 	.word	0x1000891c
    ceb0:	0002afd0 	.word	0x0002afd0
    ceb4:	0000ce45 	.word	0x0000ce45

0000ceb8 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
    ceb8:	b084      	sub	sp, #16
    ceba:	9001      	str	r0, [sp, #4]
    cebc:	460b      	mov	r3, r1
    cebe:	f8ad 3002 	strh.w	r3, [sp, #2]
  volatile uint8_t escape=0;
    cec2:	2300      	movs	r3, #0
    cec4:	f88d 300f 	strb.w	r3, [sp, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
    cec8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cecc:	b2db      	uxtb	r3, r3
    cece:	2b00      	cmp	r3, #0
    ced0:	d100      	bne.n	ced4 <WsfAssert+0x1c>
    ced2:	e7f9      	b.n	cec8 <WsfAssert+0x10>
    {
      break;
    ced4:	bf00      	nop
    }
  }
}
    ced6:	bf00      	nop
    ced8:	b004      	add	sp, #16
    ceda:	4770      	bx	lr

0000cedc <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
    cedc:	b088      	sub	sp, #32
    cede:	9102      	str	r1, [sp, #8]
    cee0:	9301      	str	r3, [sp, #4]
    cee2:	4603      	mov	r3, r0
    cee4:	f8ad 300e 	strh.w	r3, [sp, #14]
    cee8:	4613      	mov	r3, r2
    ceea:	f88d 300d 	strb.w	r3, [sp, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
    ceee:	4a53      	ldr	r2, [pc, #332]	; (d03c <WsfBufInit+0x160>)
    cef0:	9b02      	ldr	r3, [sp, #8]
    cef2:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
    cef4:	4b51      	ldr	r3, [pc, #324]	; (d03c <WsfBufInit+0x160>)
    cef6:	681b      	ldr	r3, [r3, #0]
    cef8:	9307      	str	r3, [sp, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
    cefa:	f89d 200d 	ldrb.w	r2, [sp, #13]
    cefe:	4613      	mov	r3, r2
    cf00:	005b      	lsls	r3, r3, #1
    cf02:	4413      	add	r3, r2
    cf04:	009b      	lsls	r3, r3, #2
    cf06:	461a      	mov	r2, r3
    cf08:	9b07      	ldr	r3, [sp, #28]
    cf0a:	4413      	add	r3, r2
    cf0c:	9306      	str	r3, [sp, #24]

  wsfBufNumPools = numPools;
    cf0e:	4a4c      	ldr	r2, [pc, #304]	; (d040 <WsfBufInit+0x164>)
    cf10:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cf14:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    cf16:	4b49      	ldr	r3, [pc, #292]	; (d03c <WsfBufInit+0x160>)
    cf18:	681a      	ldr	r2, [r3, #0]
    cf1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    cf1e:	08db      	lsrs	r3, r3, #3
    cf20:	b29b      	uxth	r3, r3
    cf22:	00db      	lsls	r3, r3, #3
    cf24:	4413      	add	r3, r2
    cf26:	9a06      	ldr	r2, [sp, #24]
    cf28:	429a      	cmp	r2, r3
    cf2a:	d901      	bls.n	cf30 <WsfBufInit+0x54>
    {
      WSF_ASSERT(FALSE);
      return 0;
    cf2c:	2300      	movs	r3, #0
    cf2e:	e081      	b.n	d034 <WsfBufInit+0x158>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
    cf30:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cf34:	1e5a      	subs	r2, r3, #1
    cf36:	f88d 200d 	strb.w	r2, [sp, #13]
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d070      	beq.n	d020 <WsfBufInit+0x144>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    cf3e:	9b01      	ldr	r3, [sp, #4]
    cf40:	881b      	ldrh	r3, [r3, #0]
    cf42:	2b07      	cmp	r3, #7
    cf44:	d803      	bhi.n	cf4e <WsfBufInit+0x72>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
    cf46:	9b07      	ldr	r3, [sp, #28]
    cf48:	2208      	movs	r2, #8
    cf4a:	801a      	strh	r2, [r3, #0]
    cf4c:	e014      	b.n	cf78 <WsfBufInit+0x9c>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
    cf4e:	9b01      	ldr	r3, [sp, #4]
    cf50:	881b      	ldrh	r3, [r3, #0]
    cf52:	f003 0307 	and.w	r3, r3, #7
    cf56:	b29b      	uxth	r3, r3
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d009      	beq.n	cf70 <WsfBufInit+0x94>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
    cf5c:	9b01      	ldr	r3, [sp, #4]
    cf5e:	881b      	ldrh	r3, [r3, #0]
    cf60:	f023 0307 	bic.w	r3, r3, #7
    cf64:	b29b      	uxth	r3, r3
    cf66:	3308      	adds	r3, #8
    cf68:	b29a      	uxth	r2, r3
    cf6a:	9b07      	ldr	r3, [sp, #28]
    cf6c:	801a      	strh	r2, [r3, #0]
    cf6e:	e003      	b.n	cf78 <WsfBufInit+0x9c>
    }
    else
    {
      pPool->desc.len = pDesc->len;
    cf70:	9b01      	ldr	r3, [sp, #4]
    cf72:	881a      	ldrh	r2, [r3, #0]
    cf74:	9b07      	ldr	r3, [sp, #28]
    cf76:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
    cf78:	9b01      	ldr	r3, [sp, #4]
    cf7a:	789a      	ldrb	r2, [r3, #2]
    cf7c:	9b07      	ldr	r3, [sp, #28]
    cf7e:	709a      	strb	r2, [r3, #2]
    pDesc++;
    cf80:	9b01      	ldr	r3, [sp, #4]
    cf82:	3304      	adds	r3, #4
    cf84:	9301      	str	r3, [sp, #4]

    pPool->pStart = pStart;
    cf86:	9b07      	ldr	r3, [sp, #28]
    cf88:	9a06      	ldr	r2, [sp, #24]
    cf8a:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
    cf8c:	9b07      	ldr	r3, [sp, #28]
    cf8e:	9a06      	ldr	r2, [sp, #24]
    cf90:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
    cf92:	9b07      	ldr	r3, [sp, #28]
    cf94:	881b      	ldrh	r3, [r3, #0]
    cf96:	08db      	lsrs	r3, r3, #3
    cf98:	f8ad 3014 	strh.w	r3, [sp, #20]
    for (i = pPool->desc.num; i > 1; i--)
    cf9c:	9b07      	ldr	r3, [sp, #28]
    cf9e:	789b      	ldrb	r3, [r3, #2]
    cfa0:	f88d 3017 	strb.w	r3, [sp, #23]
    cfa4:	e01e      	b.n	cfe4 <WsfBufInit+0x108>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    cfa6:	4b25      	ldr	r3, [pc, #148]	; (d03c <WsfBufInit+0x160>)
    cfa8:	681a      	ldr	r2, [r3, #0]
    cfaa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    cfae:	08db      	lsrs	r3, r3, #3
    cfb0:	b29b      	uxth	r3, r3
    cfb2:	00db      	lsls	r3, r3, #3
    cfb4:	4413      	add	r3, r2
    cfb6:	9a06      	ldr	r2, [sp, #24]
    cfb8:	429a      	cmp	r2, r3
    cfba:	d901      	bls.n	cfc0 <WsfBufInit+0xe4>
      {
        WSF_ASSERT(FALSE);
        return 0;
    cfbc:	2300      	movs	r3, #0
    cfbe:	e039      	b.n	d034 <WsfBufInit+0x158>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
    cfc0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    cfc4:	00db      	lsls	r3, r3, #3
    cfc6:	9a06      	ldr	r2, [sp, #24]
    cfc8:	441a      	add	r2, r3
    cfca:	9b06      	ldr	r3, [sp, #24]
    cfcc:	601a      	str	r2, [r3, #0]
      pStart += len;
    cfce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    cfd2:	00db      	lsls	r3, r3, #3
    cfd4:	9a06      	ldr	r2, [sp, #24]
    cfd6:	4413      	add	r3, r2
    cfd8:	9306      	str	r3, [sp, #24]
    for (i = pPool->desc.num; i > 1; i--)
    cfda:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cfde:	3b01      	subs	r3, #1
    cfe0:	f88d 3017 	strb.w	r3, [sp, #23]
    cfe4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cfe8:	2b01      	cmp	r3, #1
    cfea:	d8dc      	bhi.n	cfa6 <WsfBufInit+0xca>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    cfec:	4b13      	ldr	r3, [pc, #76]	; (d03c <WsfBufInit+0x160>)
    cfee:	681a      	ldr	r2, [r3, #0]
    cff0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    cff4:	08db      	lsrs	r3, r3, #3
    cff6:	b29b      	uxth	r3, r3
    cff8:	00db      	lsls	r3, r3, #3
    cffa:	4413      	add	r3, r2
    cffc:	9a06      	ldr	r2, [sp, #24]
    cffe:	429a      	cmp	r2, r3
    d000:	d901      	bls.n	d006 <WsfBufInit+0x12a>
    {
      WSF_ASSERT(FALSE);
      return 0;
    d002:	2300      	movs	r3, #0
    d004:	e016      	b.n	d034 <WsfBufInit+0x158>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
    d006:	9b06      	ldr	r3, [sp, #24]
    d008:	2200      	movs	r2, #0
    d00a:	601a      	str	r2, [r3, #0]
    pStart += len;
    d00c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    d010:	00db      	lsls	r3, r3, #3
    d012:	9a06      	ldr	r2, [sp, #24]
    d014:	4413      	add	r3, r2
    d016:	9306      	str	r3, [sp, #24]

    /* next pool */
    pPool++;
    d018:	9b07      	ldr	r3, [sp, #28]
    d01a:	330c      	adds	r3, #12
    d01c:	9307      	str	r3, [sp, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    d01e:	e77a      	b.n	cf16 <WsfBufInit+0x3a>
      break;
    d020:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
    d022:	4b06      	ldr	r3, [pc, #24]	; (d03c <WsfBufInit+0x160>)
    d024:	681b      	ldr	r3, [r3, #0]
    d026:	9a06      	ldr	r2, [sp, #24]
    d028:	1ad3      	subs	r3, r2, r3
    d02a:	b29a      	uxth	r2, r3
    d02c:	4b05      	ldr	r3, [pc, #20]	; (d044 <WsfBufInit+0x168>)
    d02e:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
    d030:	4b04      	ldr	r3, [pc, #16]	; (d044 <WsfBufInit+0x168>)
    d032:	881b      	ldrh	r3, [r3, #0]
}
    d034:	4618      	mov	r0, r3
    d036:	b008      	add	sp, #32
    d038:	4770      	bx	lr
    d03a:	bf00      	nop
    d03c:	10004180 	.word	0x10004180
    d040:	10008922 	.word	0x10008922
    d044:	10008920 	.word	0x10008920

0000d048 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
    d048:	b500      	push	{lr}
    d04a:	b087      	sub	sp, #28
    d04c:	4603      	mov	r3, r0
    d04e:	f8ad 3006 	strh.w	r3, [sp, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
    d052:	4b1d      	ldr	r3, [pc, #116]	; (d0c8 <WsfBufAlloc+0x80>)
    d054:	681b      	ldr	r3, [r3, #0]
    d056:	9305      	str	r3, [sp, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    d058:	4b1c      	ldr	r3, [pc, #112]	; (d0cc <WsfBufAlloc+0x84>)
    d05a:	781b      	ldrb	r3, [r3, #0]
    d05c:	f88d 3013 	strb.w	r3, [sp, #19]
    d060:	e023      	b.n	d0aa <WsfBufAlloc+0x62>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
    d062:	9b05      	ldr	r3, [sp, #20]
    d064:	881b      	ldrh	r3, [r3, #0]
    d066:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d06a:	429a      	cmp	r2, r3
    d06c:	d815      	bhi.n	d09a <WsfBufAlloc+0x52>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    d06e:	f000 f8ed 	bl	d24c <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
    d072:	9b05      	ldr	r3, [sp, #20]
    d074:	689b      	ldr	r3, [r3, #8]
    d076:	2b00      	cmp	r3, #0
    d078:	d00d      	beq.n	d096 <WsfBufAlloc+0x4e>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
    d07a:	9b05      	ldr	r3, [sp, #20]
    d07c:	689b      	ldr	r3, [r3, #8]
    d07e:	9303      	str	r3, [sp, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
    d080:	9b03      	ldr	r3, [sp, #12]
    d082:	681a      	ldr	r2, [r3, #0]
    d084:	9b05      	ldr	r3, [sp, #20]
    d086:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
    d088:	9b03      	ldr	r3, [sp, #12]
    d08a:	2200      	movs	r2, #0
    d08c:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
    d08e:	f000 f8ed 	bl	d26c <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
    d092:	9b03      	ldr	r3, [sp, #12]
    d094:	e014      	b.n	d0c0 <WsfBufAlloc+0x78>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
    d096:	f000 f8e9 	bl	d26c <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    d09a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d09e:	3b01      	subs	r3, #1
    d0a0:	f88d 3013 	strb.w	r3, [sp, #19]
    d0a4:	9b05      	ldr	r3, [sp, #20]
    d0a6:	330c      	adds	r3, #12
    d0a8:	9305      	str	r3, [sp, #20]
    d0aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d1d7      	bne.n	d062 <WsfBufAlloc+0x1a>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
    d0b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d0b6:	4619      	mov	r1, r3
    d0b8:	4805      	ldr	r0, [pc, #20]	; (d0d0 <WsfBufAlloc+0x88>)
    d0ba:	f000 fcc5 	bl	da48 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
    d0be:	2300      	movs	r3, #0
}
    d0c0:	4618      	mov	r0, r3
    d0c2:	b007      	add	sp, #28
    d0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c8:	10004180 	.word	0x10004180
    d0cc:	10008922 	.word	0x10008922
    d0d0:	0002afd8 	.word	0x0002afd8

0000d0d4 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
    d0d4:	b500      	push	{lr}
    d0d6:	b085      	sub	sp, #20
    d0d8:	9001      	str	r0, [sp, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
    d0da:	9b01      	ldr	r3, [sp, #4]
    d0dc:	9302      	str	r3, [sp, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
    d0de:	4b16      	ldr	r3, [pc, #88]	; (d138 <WsfBufFree+0x64>)
    d0e0:	681a      	ldr	r2, [r3, #0]
    d0e2:	4b16      	ldr	r3, [pc, #88]	; (d13c <WsfBufFree+0x68>)
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	4619      	mov	r1, r3
    d0e8:	460b      	mov	r3, r1
    d0ea:	005b      	lsls	r3, r3, #1
    d0ec:	440b      	add	r3, r1
    d0ee:	009b      	lsls	r3, r3, #2
    d0f0:	3b0c      	subs	r3, #12
    d0f2:	4413      	add	r3, r2
    d0f4:	9303      	str	r3, [sp, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    d0f6:	e016      	b.n	d126 <WsfBufFree+0x52>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
    d0f8:	9b03      	ldr	r3, [sp, #12]
    d0fa:	685b      	ldr	r3, [r3, #4]
    d0fc:	9a02      	ldr	r2, [sp, #8]
    d0fe:	429a      	cmp	r2, r3
    d100:	d30e      	bcc.n	d120 <WsfBufFree+0x4c>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    d102:	f000 f8a3 	bl	d24c <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
    d106:	9b02      	ldr	r3, [sp, #8]
    d108:	4a0d      	ldr	r2, [pc, #52]	; (d140 <WsfBufFree+0x6c>)
    d10a:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
    d10c:	9b03      	ldr	r3, [sp, #12]
    d10e:	689a      	ldr	r2, [r3, #8]
    d110:	9b02      	ldr	r3, [sp, #8]
    d112:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
    d114:	9b03      	ldr	r3, [sp, #12]
    d116:	9a02      	ldr	r2, [sp, #8]
    d118:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
    d11a:	f000 f8a7 	bl	d26c <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
    d11e:	e008      	b.n	d132 <WsfBufFree+0x5e>
    }

    /* next pool */
    pPool--;
    d120:	9b03      	ldr	r3, [sp, #12]
    d122:	3b0c      	subs	r3, #12
    d124:	9303      	str	r3, [sp, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    d126:	4b04      	ldr	r3, [pc, #16]	; (d138 <WsfBufFree+0x64>)
    d128:	681b      	ldr	r3, [r3, #0]
    d12a:	9a03      	ldr	r2, [sp, #12]
    d12c:	429a      	cmp	r2, r3
    d12e:	d2e3      	bcs.n	d0f8 <WsfBufFree+0x24>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
    d130:	bf00      	nop
}
    d132:	b005      	add	sp, #20
    d134:	f85d fb04 	ldr.w	pc, [sp], #4
    d138:	10004180 	.word	0x10004180
    d13c:	10008922 	.word	0x10008922
    d140:	faabd00d 	.word	0xfaabd00d

0000d144 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
    d144:	b500      	push	{lr}
    d146:	b083      	sub	sp, #12
    d148:	4603      	mov	r3, r0
    d14a:	460a      	mov	r2, r1
    d14c:	f8ad 3006 	strh.w	r3, [sp, #6]
    d150:	4613      	mov	r3, r2
    d152:	f88d 3005 	strb.w	r3, [sp, #5]
  return WsfMsgAlloc(len + tailroom);
    d156:	f89d 3005 	ldrb.w	r3, [sp, #5]
    d15a:	b29a      	uxth	r2, r3
    d15c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d160:	4413      	add	r3, r2
    d162:	b29b      	uxth	r3, r3
    d164:	4618      	mov	r0, r3
    d166:	f000 f805 	bl	d174 <WsfMsgAlloc>
    d16a:	4603      	mov	r3, r0
}
    d16c:	4618      	mov	r0, r3
    d16e:	b003      	add	sp, #12
    d170:	f85d fb04 	ldr.w	pc, [sp], #4

0000d174 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
    d174:	b500      	push	{lr}
    d176:	b085      	sub	sp, #20
    d178:	4603      	mov	r3, r0
    d17a:	f8ad 3006 	strh.w	r3, [sp, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    d17e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d182:	3308      	adds	r3, #8
    d184:	b29b      	uxth	r3, r3
    d186:	4618      	mov	r0, r3
    d188:	f7ff ff5e 	bl	d048 <WsfBufAlloc>
    d18c:	9003      	str	r0, [sp, #12]

  /* hide header */
  if (pMsg != NULL)
    d18e:	9b03      	ldr	r3, [sp, #12]
    d190:	2b00      	cmp	r3, #0
    d192:	d002      	beq.n	d19a <WsfMsgAlloc+0x26>
  {
    pMsg++;
    d194:	9b03      	ldr	r3, [sp, #12]
    d196:	3308      	adds	r3, #8
    d198:	9303      	str	r3, [sp, #12]
  }

  return pMsg;
    d19a:	9b03      	ldr	r3, [sp, #12]
}
    d19c:	4618      	mov	r0, r3
    d19e:	b005      	add	sp, #20
    d1a0:	f85d fb04 	ldr.w	pc, [sp], #4

0000d1a4 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
    d1a4:	b500      	push	{lr}
    d1a6:	b083      	sub	sp, #12
    d1a8:	9001      	str	r0, [sp, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
    d1aa:	9b01      	ldr	r3, [sp, #4]
    d1ac:	3b08      	subs	r3, #8
    d1ae:	4618      	mov	r0, r3
    d1b0:	f7ff ff90 	bl	d0d4 <WsfBufFree>
}
    d1b4:	bf00      	nop
    d1b6:	b003      	add	sp, #12
    d1b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000d1bc <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
    d1bc:	b500      	push	{lr}
    d1be:	b083      	sub	sp, #12
    d1c0:	4603      	mov	r3, r0
    d1c2:	9100      	str	r1, [sp, #0]
    d1c4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
    d1c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1cc:	4618      	mov	r0, r3
    d1ce:	f000 f905 	bl	d3dc <WsfTaskMsgQueue>
    d1d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1d6:	9a00      	ldr	r2, [sp, #0]
    d1d8:	4619      	mov	r1, r3
    d1da:	f000 f80a 	bl	d1f2 <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
    d1de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1e2:	2101      	movs	r1, #1
    d1e4:	4618      	mov	r0, r3
    d1e6:	f000 f8d9 	bl	d39c <WsfTaskSetReady>
}
    d1ea:	bf00      	nop
    d1ec:	b003      	add	sp, #12
    d1ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000d1f2 <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
    d1f2:	b500      	push	{lr}
    d1f4:	b087      	sub	sp, #28
    d1f6:	9003      	str	r0, [sp, #12]
    d1f8:	460b      	mov	r3, r1
    d1fa:	9201      	str	r2, [sp, #4]
    d1fc:	f88d 300b 	strb.w	r3, [sp, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
    d200:	9b01      	ldr	r3, [sp, #4]
    d202:	3b08      	subs	r3, #8
    d204:	9305      	str	r3, [sp, #20]

  /* set handler ID */
  p->handlerId = handlerId;
    d206:	9b05      	ldr	r3, [sp, #20]
    d208:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d20c:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
    d20e:	9905      	ldr	r1, [sp, #20]
    d210:	9803      	ldr	r0, [sp, #12]
    d212:	f000 f9c1 	bl	d598 <WsfQueueEnq>
}
    d216:	bf00      	nop
    d218:	b007      	add	sp, #28
    d21a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d21e <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
    d21e:	b500      	push	{lr}
    d220:	b085      	sub	sp, #20
    d222:	9001      	str	r0, [sp, #4]
    d224:	9100      	str	r1, [sp, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
    d226:	9801      	ldr	r0, [sp, #4]
    d228:	f000 f9d7 	bl	d5da <WsfQueueDeq>
    d22c:	9003      	str	r0, [sp, #12]
    d22e:	9b03      	ldr	r3, [sp, #12]
    d230:	2b00      	cmp	r3, #0
    d232:	d006      	beq.n	d242 <WsfMsgDeq+0x24>
  {
    *pHandlerId = pMsg->handlerId;
    d234:	9b03      	ldr	r3, [sp, #12]
    d236:	791a      	ldrb	r2, [r3, #4]
    d238:	9b00      	ldr	r3, [sp, #0]
    d23a:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
    d23c:	9b03      	ldr	r3, [sp, #12]
    d23e:	3308      	adds	r3, #8
    d240:	9303      	str	r3, [sp, #12]
  }

  return pMsg;
    d242:	9b03      	ldr	r3, [sp, #12]
}
    d244:	4618      	mov	r0, r3
    d246:	b005      	add	sp, #20
    d248:	f85d fb04 	ldr.w	pc, [sp], #4

0000d24c <WsfCsEnter>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
    d24c:	4b06      	ldr	r3, [pc, #24]	; (d268 <WsfCsEnter+0x1c>)
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	2b00      	cmp	r3, #0
    d252:	d100      	bne.n	d256 <WsfCsEnter+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
    d254:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
    d256:	4b04      	ldr	r3, [pc, #16]	; (d268 <WsfCsEnter+0x1c>)
    d258:	781b      	ldrb	r3, [r3, #0]
    d25a:	3301      	adds	r3, #1
    d25c:	b2da      	uxtb	r2, r3
    d25e:	4b02      	ldr	r3, [pc, #8]	; (d268 <WsfCsEnter+0x1c>)
    d260:	701a      	strb	r2, [r3, #0]
}
    d262:	bf00      	nop
    d264:	4770      	bx	lr
    d266:	bf00      	nop
    d268:	10004184 	.word	0x10004184

0000d26c <WsfCsExit>:
/*************************************************************************************************/
void WsfCsExit(void)
{
  WSF_ASSERT(csNesting != 0);

  csNesting--;
    d26c:	4b06      	ldr	r3, [pc, #24]	; (d288 <WsfCsExit+0x1c>)
    d26e:	781b      	ldrb	r3, [r3, #0]
    d270:	3b01      	subs	r3, #1
    d272:	b2da      	uxtb	r2, r3
    d274:	4b04      	ldr	r3, [pc, #16]	; (d288 <WsfCsExit+0x1c>)
    d276:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
    d278:	4b03      	ldr	r3, [pc, #12]	; (d288 <WsfCsExit+0x1c>)
    d27a:	781b      	ldrb	r3, [r3, #0]
    d27c:	2b00      	cmp	r3, #0
    d27e:	d100      	bne.n	d282 <WsfCsExit+0x16>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
    d280:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
    d282:	bf00      	nop
    d284:	4770      	bx	lr
    d286:	bf00      	nop
    d288:	10004184 	.word	0x10004184

0000d28c <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
    d28c:	b508      	push	{r3, lr}
  WsfCsEnter();
    d28e:	f7ff ffdd 	bl	d24c <WsfCsEnter>
}
    d292:	bf00      	nop
    d294:	bd08      	pop	{r3, pc}

0000d296 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
    d296:	b508      	push	{r3, lr}
  WsfCsExit();
    d298:	f7ff ffe8 	bl	d26c <WsfCsExit>
}
    d29c:	bf00      	nop
    d29e:	bd08      	pop	{r3, pc}

0000d2a0 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
    d2a0:	b500      	push	{lr}
    d2a2:	b085      	sub	sp, #20
  if(xRadioTaskEventObject != NULL) 
    d2a4:	4b20      	ldr	r3, [pc, #128]	; (d328 <WsfSetOsSpecificEvent+0x88>)
    d2a6:	681b      	ldr	r3, [r3, #0]
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d039      	beq.n	d320 <WsfSetOsSpecificEvent+0x80>
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    d2ac:	f3ef 8305 	mrs	r3, IPSR
    d2b0:	9302      	str	r3, [sp, #8]

	if( ulCurrentInterrupt == 0 )
    d2b2:	9b02      	ldr	r3, [sp, #8]
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d102      	bne.n	d2be <WsfSetOsSpecificEvent+0x1e>
	{
		xReturn = pdFALSE;
    d2b8:	2300      	movs	r3, #0
    d2ba:	9301      	str	r3, [sp, #4]
    d2bc:	e001      	b.n	d2c2 <WsfSetOsSpecificEvent+0x22>
	}
	else
	{
		xReturn = pdTRUE;
    d2be:	2301      	movs	r3, #1
    d2c0:	9301      	str	r3, [sp, #4]
	}

	return xReturn;
    d2c2:	9b01      	ldr	r3, [sp, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
    d2c4:	2b01      	cmp	r3, #1
    d2c6:	d118      	bne.n	d2fa <WsfSetOsSpecificEvent+0x5a>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
    d2c8:	2300      	movs	r3, #0
    d2ca:	9300      	str	r3, [sp, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    d2cc:	4b16      	ldr	r3, [pc, #88]	; (d328 <WsfSetOsSpecificEvent+0x88>)
    d2ce:	6819      	ldr	r1, [r3, #0]
    d2d0:	466b      	mov	r3, sp
    d2d2:	2201      	movs	r2, #1
    d2d4:	4815      	ldr	r0, [pc, #84]	; (d32c <WsfSetOsSpecificEvent+0x8c>)
    d2d6:	f017 fa41 	bl	2475c <xTimerPendFunctionCallFromISR>
    d2da:	9003      	str	r0, [sp, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
    d2dc:	9b03      	ldr	r3, [sp, #12]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d01e      	beq.n	d320 <WsfSetOsSpecificEvent+0x80>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    d2e2:	9b00      	ldr	r3, [sp, #0]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d01b      	beq.n	d320 <WsfSetOsSpecificEvent+0x80>
    d2e8:	4b11      	ldr	r3, [pc, #68]	; (d330 <WsfSetOsSpecificEvent+0x90>)
    d2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d2ee:	601a      	str	r2, [r3, #0]
    d2f0:	f3bf 8f4f 	dsb	sy
    d2f4:	f3bf 8f6f 	isb	sy
              portYIELD();
          }
      }

  }    
}
    d2f8:	e012      	b.n	d320 <WsfSetOsSpecificEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
    d2fa:	4b0b      	ldr	r3, [pc, #44]	; (d328 <WsfSetOsSpecificEvent+0x88>)
    d2fc:	681b      	ldr	r3, [r3, #0]
    d2fe:	2101      	movs	r1, #1
    d300:	4618      	mov	r0, r3
    d302:	f015 fba9 	bl	22a58 <xEventGroupSetBits>
    d306:	4603      	mov	r3, r0
    d308:	9303      	str	r3, [sp, #12]
          if ( xResult != pdFAIL )
    d30a:	9b03      	ldr	r3, [sp, #12]
    d30c:	2b00      	cmp	r3, #0
    d30e:	d007      	beq.n	d320 <WsfSetOsSpecificEvent+0x80>
              portYIELD();
    d310:	4b07      	ldr	r3, [pc, #28]	; (d330 <WsfSetOsSpecificEvent+0x90>)
    d312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d316:	601a      	str	r2, [r3, #0]
    d318:	f3bf 8f4f 	dsb	sy
    d31c:	f3bf 8f6f 	isb	sy
}
    d320:	bf00      	nop
    d322:	b005      	add	sp, #20
    d324:	f85d fb04 	ldr.w	pc, [sp], #4
    d328:	10004188 	.word	0x10004188
    d32c:	00022b45 	.word	0x00022b45
    d330:	e000ed04 	.word	0xe000ed04

0000d334 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
    d334:	b500      	push	{lr}
    d336:	b083      	sub	sp, #12
    d338:	4603      	mov	r3, r0
    d33a:	460a      	mov	r2, r1
    d33c:	f88d 3007 	strb.w	r3, [sp, #7]
    d340:	4613      	mov	r3, r2
    d342:	f88d 3006 	strb.w	r3, [sp, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
    d346:	f7ff ff81 	bl	d24c <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    d34a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d34e:	f003 030f 	and.w	r3, r3, #15
    d352:	4a11      	ldr	r2, [pc, #68]	; (d398 <WsfSetEvent+0x64>)
    d354:	4413      	add	r3, r2
    d356:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
    d35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d35e:	f003 030f 	and.w	r3, r3, #15
    d362:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d366:	430a      	orrs	r2, r1
    d368:	b2d1      	uxtb	r1, r2
    d36a:	4a0b      	ldr	r2, [pc, #44]	; (d398 <WsfSetEvent+0x64>)
    d36c:	4413      	add	r3, r2
    d36e:	460a      	mov	r2, r1
    d370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    d374:	4b08      	ldr	r3, [pc, #32]	; (d398 <WsfSetEvent+0x64>)
    d376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    d37a:	f043 0304 	orr.w	r3, r3, #4
    d37e:	b2da      	uxtb	r2, r3
    d380:	4b05      	ldr	r3, [pc, #20]	; (d398 <WsfSetEvent+0x64>)
    d382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
    d386:	f7ff ff71 	bl	d26c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
    d38a:	f7ff ff89 	bl	d2a0 <WsfSetOsSpecificEvent>
}
    d38e:	bf00      	nop
    d390:	b003      	add	sp, #12
    d392:	f85d fb04 	ldr.w	pc, [sp], #4
    d396:	bf00      	nop
    d398:	10008924 	.word	0x10008924

0000d39c <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
    d39c:	b500      	push	{lr}
    d39e:	b083      	sub	sp, #12
    d3a0:	4603      	mov	r3, r0
    d3a2:	460a      	mov	r2, r1
    d3a4:	f88d 3007 	strb.w	r3, [sp, #7]
    d3a8:	4613      	mov	r3, r2
    d3aa:	f88d 3006 	strb.w	r3, [sp, #6]
  /* Unused parameter */
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
    d3ae:	f7ff ff4d 	bl	d24c <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
    d3b2:	4b09      	ldr	r3, [pc, #36]	; (d3d8 <WsfTaskSetReady+0x3c>)
    d3b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    d3b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d3bc:	4313      	orrs	r3, r2
    d3be:	b2da      	uxtb	r2, r3
    d3c0:	4b05      	ldr	r3, [pc, #20]	; (d3d8 <WsfTaskSetReady+0x3c>)
    d3c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
    d3c6:	f7ff ff51 	bl	d26c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
    d3ca:	f7ff ff69 	bl	d2a0 <WsfSetOsSpecificEvent>
}
    d3ce:	bf00      	nop
    d3d0:	b003      	add	sp, #12
    d3d2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3d6:	bf00      	nop
    d3d8:	10008924 	.word	0x10008924

0000d3dc <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
    d3dc:	b082      	sub	sp, #8
    d3de:	4603      	mov	r3, r0
    d3e0:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
    d3e4:	4b01      	ldr	r3, [pc, #4]	; (d3ec <WsfTaskMsgQueue+0x10>)
}
    d3e6:	4618      	mov	r0, r3
    d3e8:	b002      	add	sp, #8
    d3ea:	4770      	bx	lr
    d3ec:	10008954 	.word	0x10008954

0000d3f0 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
    d3f0:	b084      	sub	sp, #16
    d3f2:	9001      	str	r0, [sp, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
    d3f4:	4b0a      	ldr	r3, [pc, #40]	; (d420 <WsfOsSetNextHandler+0x30>)
    d3f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    d3fa:	1c5a      	adds	r2, r3, #1
    d3fc:	b2d1      	uxtb	r1, r2
    d3fe:	4a08      	ldr	r2, [pc, #32]	; (d420 <WsfOsSetNextHandler+0x30>)
    d400:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    d404:	f88d 300f 	strb.w	r3, [sp, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
    d408:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d40c:	4904      	ldr	r1, [pc, #16]	; (d420 <WsfOsSetNextHandler+0x30>)
    d40e:	9a01      	ldr	r2, [sp, #4]
    d410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
    d414:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d418:	4618      	mov	r0, r3
    d41a:	b004      	add	sp, #16
    d41c:	4770      	bx	lr
    d41e:	bf00      	nop
    d420:	10008924 	.word	0x10008924

0000d424 <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
    d424:	b508      	push	{r3, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));
    d426:	223c      	movs	r2, #60	; 0x3c
    d428:	2100      	movs	r1, #0
    d42a:	4807      	ldr	r0, [pc, #28]	; (d448 <WsfOsInit+0x24>)
    d42c:	f01b f806 	bl	2843c <memset>

  if( xRadioTaskEventObject == NULL)
    d430:	4b06      	ldr	r3, [pc, #24]	; (d44c <WsfOsInit+0x28>)
    d432:	681b      	ldr	r3, [r3, #0]
    d434:	2b00      	cmp	r3, #0
    d436:	d104      	bne.n	d442 <WsfOsInit+0x1e>
  {
    xRadioTaskEventObject = xEventGroupCreate();
    d438:	f015 fa52 	bl	228e0 <xEventGroupCreate>
    d43c:	4603      	mov	r3, r0
    d43e:	4a03      	ldr	r2, [pc, #12]	; (d44c <WsfOsInit+0x28>)
    d440:	6013      	str	r3, [r2, #0]

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
    d442:	bf00      	nop
    d444:	bd08      	pop	{r3, pc}
    d446:	bf00      	nop
    d448:	10008924 	.word	0x10008924
    d44c:	10004188 	.word	0x10004188

0000d450 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
    d450:	b500      	push	{lr}
    d452:	b089      	sub	sp, #36	; 0x24
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
    d454:	4b4e      	ldr	r3, [pc, #312]	; (d590 <wsfOsDispatcher+0x140>)
    d456:	9306      	str	r3, [sp, #24]

  WsfTimerUpdateTicks();
    d458:	f000 fab4 	bl	d9c4 <WsfTimerUpdateTicks>

  while (pTask->taskEventMask)
    d45c:	e083      	b.n	d566 <wsfOsDispatcher+0x116>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
    d45e:	f7ff fef5 	bl	d24c <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
    d462:	9b06      	ldr	r3, [sp, #24]
    d464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    d468:	f88d 3017 	strb.w	r3, [sp, #23]
    pTask->taskEventMask = 0;
    d46c:	9b06      	ldr	r3, [sp, #24]
    d46e:	2200      	movs	r2, #0
    d470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
    d474:	f7ff fefa 	bl	d26c <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    d478:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d47c:	f003 0301 	and.w	r3, r3, #1
    d480:	2b00      	cmp	r3, #0
    d482:	d018      	beq.n	d4b6 <wsfOsDispatcher+0x66>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    d484:	e00b      	b.n	d49e <wsfOsDispatcher+0x4e>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
    d486:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d48a:	461a      	mov	r2, r3
    d48c:	9b06      	ldr	r3, [sp, #24]
    d48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d492:	9904      	ldr	r1, [sp, #16]
    d494:	2000      	movs	r0, #0
    d496:	4798      	blx	r3
        WsfMsgFree(pMsg);
    d498:	9804      	ldr	r0, [sp, #16]
    d49a:	f7ff fe83 	bl	d1a4 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    d49e:	9b06      	ldr	r3, [sp, #24]
    d4a0:	3330      	adds	r3, #48	; 0x30
    d4a2:	f10d 020a 	add.w	r2, sp, #10
    d4a6:	4611      	mov	r1, r2
    d4a8:	4618      	mov	r0, r3
    d4aa:	f7ff feb8 	bl	d21e <WsfMsgDeq>
    d4ae:	9004      	str	r0, [sp, #16]
    d4b0:	9b04      	ldr	r3, [sp, #16]
    d4b2:	2b00      	cmp	r3, #0
    d4b4:	d1e7      	bne.n	d486 <wsfOsDispatcher+0x36>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
    d4b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d4ba:	f003 0302 	and.w	r3, r3, #2
    d4be:	2b00      	cmp	r3, #0
    d4c0:	d012      	beq.n	d4e8 <wsfOsDispatcher+0x98>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    d4c2:	e00a      	b.n	d4da <wsfOsDispatcher+0x8a>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
    d4c4:	9b03      	ldr	r3, [sp, #12]
    d4c6:	7a1b      	ldrb	r3, [r3, #8]
    d4c8:	461a      	mov	r2, r3
    d4ca:	9b06      	ldr	r3, [sp, #24]
    d4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d4d0:	9a03      	ldr	r2, [sp, #12]
    d4d2:	320a      	adds	r2, #10
    d4d4:	4611      	mov	r1, r2
    d4d6:	2000      	movs	r0, #0
    d4d8:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    d4da:	2000      	movs	r0, #0
    d4dc:	f000 fa4a 	bl	d974 <WsfTimerServiceExpired>
    d4e0:	9003      	str	r0, [sp, #12]
    d4e2:	9b03      	ldr	r3, [sp, #12]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d1ed      	bne.n	d4c4 <wsfOsDispatcher+0x74>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
    d4e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d4ec:	f003 0304 	and.w	r3, r3, #4
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d038      	beq.n	d566 <wsfOsDispatcher+0x116>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    d4f4:	2300      	movs	r3, #0
    d4f6:	f88d 301f 	strb.w	r3, [sp, #31]
    d4fa:	e030      	b.n	d55e <wsfOsDispatcher+0x10e>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
    d4fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d500:	9a06      	ldr	r2, [sp, #24]
    d502:	4413      	add	r3, r2
    d504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d508:	2b00      	cmp	r3, #0
    d50a:	d023      	beq.n	d554 <wsfOsDispatcher+0x104>
    d50c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d510:	9b06      	ldr	r3, [sp, #24]
    d512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d516:	2b00      	cmp	r3, #0
    d518:	d01c      	beq.n	d554 <wsfOsDispatcher+0x104>
        {
          WSF_CS_ENTER(cs);
    d51a:	f7ff fe97 	bl	d24c <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
    d51e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d522:	9a06      	ldr	r2, [sp, #24]
    d524:	4413      	add	r3, r2
    d526:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d52a:	f88d 300b 	strb.w	r3, [sp, #11]
          pTask->handlerEventMask[i] = 0;
    d52e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d532:	9a06      	ldr	r2, [sp, #24]
    d534:	4413      	add	r3, r2
    d536:	2200      	movs	r2, #0
    d538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
    d53c:	f7ff fe96 	bl	d26c <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
    d540:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d544:	9b06      	ldr	r3, [sp, #24]
    d546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d54a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d54e:	2100      	movs	r1, #0
    d550:	4610      	mov	r0, r2
    d552:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    d554:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d558:	3301      	adds	r3, #1
    d55a:	f88d 301f 	strb.w	r3, [sp, #31]
    d55e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d562:	2b08      	cmp	r3, #8
    d564:	d9ca      	bls.n	d4fc <wsfOsDispatcher+0xac>
  while (pTask->taskEventMask)
    d566:	9b06      	ldr	r3, [sp, #24]
    d568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    d56c:	2b00      	cmp	r3, #0
    d56e:	f47f af76 	bne.w	d45e <wsfOsDispatcher+0xe>
        }
      }
    }
  }
  xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
    d572:	4b08      	ldr	r3, [pc, #32]	; (d594 <wsfOsDispatcher+0x144>)
    d574:	6818      	ldr	r0, [r3, #0]
    d576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d57a:	9300      	str	r3, [sp, #0]
    d57c:	2300      	movs	r3, #0
    d57e:	2201      	movs	r2, #1
    d580:	2101      	movs	r1, #1
    d582:	f015 f9c3 	bl	2290c <xEventGroupWaitBits>
                      pdFALSE, portMAX_DELAY);
}
    d586:	bf00      	nop
    d588:	b009      	add	sp, #36	; 0x24
    d58a:	f85d fb04 	ldr.w	pc, [sp], #4
    d58e:	bf00      	nop
    d590:	10008924 	.word	0x10008924
    d594:	10004188 	.word	0x10004188

0000d598 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
    d598:	b500      	push	{lr}
    d59a:	b083      	sub	sp, #12
    d59c:	9001      	str	r0, [sp, #4]
    d59e:	9100      	str	r1, [sp, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
    d5a0:	9b00      	ldr	r3, [sp, #0]
    d5a2:	2200      	movs	r2, #0
    d5a4:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d5a6:	f7ff fe51 	bl	d24c <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
    d5aa:	9b01      	ldr	r3, [sp, #4]
    d5ac:	681b      	ldr	r3, [r3, #0]
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	d106      	bne.n	d5c0 <WsfQueueEnq+0x28>
  {
    pQueue->pHead = pElem;
    d5b2:	9b01      	ldr	r3, [sp, #4]
    d5b4:	9a00      	ldr	r2, [sp, #0]
    d5b6:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
    d5b8:	9b01      	ldr	r3, [sp, #4]
    d5ba:	9a00      	ldr	r2, [sp, #0]
    d5bc:	605a      	str	r2, [r3, #4]
    d5be:	e006      	b.n	d5ce <WsfQueueEnq+0x36>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
    d5c0:	9b01      	ldr	r3, [sp, #4]
    d5c2:	685b      	ldr	r3, [r3, #4]
    d5c4:	9a00      	ldr	r2, [sp, #0]
    d5c6:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
    d5c8:	9b01      	ldr	r3, [sp, #4]
    d5ca:	9a00      	ldr	r2, [sp, #0]
    d5cc:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d5ce:	f7ff fe4d 	bl	d26c <WsfCsExit>
}
    d5d2:	bf00      	nop
    d5d4:	b003      	add	sp, #12
    d5d6:	f85d fb04 	ldr.w	pc, [sp], #4

0000d5da <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
    d5da:	b500      	push	{lr}
    d5dc:	b085      	sub	sp, #20
    d5de:	9001      	str	r0, [sp, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d5e0:	f7ff fe34 	bl	d24c <WsfCsEnter>

  pElem = pQueue->pHead;
    d5e4:	9b01      	ldr	r3, [sp, #4]
    d5e6:	681b      	ldr	r3, [r3, #0]
    d5e8:	9303      	str	r3, [sp, #12]

  /* if queue is not empty */
  if (pElem != NULL)
    d5ea:	9b03      	ldr	r3, [sp, #12]
    d5ec:	2b00      	cmp	r3, #0
    d5ee:	d00a      	beq.n	d606 <WsfQueueDeq+0x2c>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    d5f0:	9b03      	ldr	r3, [sp, #12]
    d5f2:	681a      	ldr	r2, [r3, #0]
    d5f4:	9b01      	ldr	r3, [sp, #4]
    d5f6:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
    d5f8:	9b01      	ldr	r3, [sp, #4]
    d5fa:	681b      	ldr	r3, [r3, #0]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d102      	bne.n	d606 <WsfQueueDeq+0x2c>
    {
      pQueue->pTail = NULL;
    d600:	9b01      	ldr	r3, [sp, #4]
    d602:	2200      	movs	r2, #0
    d604:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d606:	f7ff fe31 	bl	d26c <WsfCsExit>

  return pElem;
    d60a:	9b03      	ldr	r3, [sp, #12]
}
    d60c:	4618      	mov	r0, r3
    d60e:	b005      	add	sp, #20
    d610:	f85d fb04 	ldr.w	pc, [sp], #4

0000d614 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
    d614:	b500      	push	{lr}
    d616:	b083      	sub	sp, #12
    d618:	9001      	str	r0, [sp, #4]
    d61a:	9100      	str	r1, [sp, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d61c:	f7ff fe16 	bl	d24c <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
    d620:	9b01      	ldr	r3, [sp, #4]
    d622:	681a      	ldr	r2, [r3, #0]
    d624:	9b00      	ldr	r3, [sp, #0]
    d626:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	681b      	ldr	r3, [r3, #0]
    d62c:	2b00      	cmp	r3, #0
    d62e:	d102      	bne.n	d636 <WsfQueuePush+0x22>
  {
    pQueue->pTail = pElem;
    d630:	9b01      	ldr	r3, [sp, #4]
    d632:	9a00      	ldr	r2, [sp, #0]
    d634:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
    d636:	9b01      	ldr	r3, [sp, #4]
    d638:	9a00      	ldr	r2, [sp, #0]
    d63a:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d63c:	f7ff fe16 	bl	d26c <WsfCsExit>
}
    d640:	bf00      	nop
    d642:	b003      	add	sp, #12
    d644:	f85d fb04 	ldr.w	pc, [sp], #4

0000d648 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    d648:	b500      	push	{lr}
    d64a:	b085      	sub	sp, #20
    d64c:	9003      	str	r0, [sp, #12]
    d64e:	9102      	str	r1, [sp, #8]
    d650:	9201      	str	r2, [sp, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d652:	f7ff fdfb 	bl	d24c <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
    d656:	9b03      	ldr	r3, [sp, #12]
    d658:	681b      	ldr	r3, [r3, #0]
    d65a:	2b00      	cmp	r3, #0
    d65c:	d004      	beq.n	d668 <WsfQueueInsert+0x20>
    d65e:	9b03      	ldr	r3, [sp, #12]
    d660:	685b      	ldr	r3, [r3, #4]
    d662:	9a01      	ldr	r2, [sp, #4]
    d664:	429a      	cmp	r2, r3
    d666:	d104      	bne.n	d672 <WsfQueueInsert+0x2a>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
    d668:	9902      	ldr	r1, [sp, #8]
    d66a:	9803      	ldr	r0, [sp, #12]
    d66c:	f7ff ff94 	bl	d598 <WsfQueueEnq>
    d670:	e00e      	b.n	d690 <WsfQueueInsert+0x48>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
    d672:	9b01      	ldr	r3, [sp, #4]
    d674:	2b00      	cmp	r3, #0
    d676:	d104      	bne.n	d682 <WsfQueueInsert+0x3a>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
    d678:	9902      	ldr	r1, [sp, #8]
    d67a:	9803      	ldr	r0, [sp, #12]
    d67c:	f7ff ffca 	bl	d614 <WsfQueuePush>
    d680:	e006      	b.n	d690 <WsfQueueInsert+0x48>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
    d682:	9b01      	ldr	r3, [sp, #4]
    d684:	681a      	ldr	r2, [r3, #0]
    d686:	9b02      	ldr	r3, [sp, #8]
    d688:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
    d68a:	9b01      	ldr	r3, [sp, #4]
    d68c:	9a02      	ldr	r2, [sp, #8]
    d68e:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d690:	f7ff fdec 	bl	d26c <WsfCsExit>
}
    d694:	bf00      	nop
    d696:	b005      	add	sp, #20
    d698:	f85d fb04 	ldr.w	pc, [sp], #4

0000d69c <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    d69c:	b500      	push	{lr}
    d69e:	b085      	sub	sp, #20
    d6a0:	9003      	str	r0, [sp, #12]
    d6a2:	9102      	str	r1, [sp, #8]
    d6a4:	9201      	str	r2, [sp, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d6a6:	f7ff fdd1 	bl	d24c <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
    d6aa:	9b03      	ldr	r3, [sp, #12]
    d6ac:	681b      	ldr	r3, [r3, #0]
    d6ae:	9a02      	ldr	r2, [sp, #8]
    d6b0:	429a      	cmp	r2, r3
    d6b2:	d104      	bne.n	d6be <WsfQueueRemove+0x22>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    d6b4:	9b02      	ldr	r3, [sp, #8]
    d6b6:	681a      	ldr	r2, [r3, #0]
    d6b8:	9b03      	ldr	r3, [sp, #12]
    d6ba:	601a      	str	r2, [r3, #0]
    d6bc:	e006      	b.n	d6cc <WsfQueueRemove+0x30>
  }
  else if (pPrev)
    d6be:	9b01      	ldr	r3, [sp, #4]
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d003      	beq.n	d6cc <WsfQueueRemove+0x30>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
    d6c4:	9b02      	ldr	r3, [sp, #8]
    d6c6:	681a      	ldr	r2, [r3, #0]
    d6c8:	9b01      	ldr	r3, [sp, #4]
    d6ca:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
    d6cc:	9b03      	ldr	r3, [sp, #12]
    d6ce:	685b      	ldr	r3, [r3, #4]
    d6d0:	9a02      	ldr	r2, [sp, #8]
    d6d2:	429a      	cmp	r2, r3
    d6d4:	d102      	bne.n	d6dc <WsfQueueRemove+0x40>
  {
    /* update tail */
    pQueue->pTail = pPrev;
    d6d6:	9b03      	ldr	r3, [sp, #12]
    d6d8:	9a01      	ldr	r2, [sp, #4]
    d6da:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d6dc:	f7ff fdc6 	bl	d26c <WsfCsExit>
}
    d6e0:	bf00      	nop
    d6e2:	b005      	add	sp, #20
    d6e4:	f85d fb04 	ldr.w	pc, [sp], #4

0000d6e8 <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
    d6e8:	b500      	push	{lr}
    d6ea:	b085      	sub	sp, #20
    d6ec:	9001      	str	r0, [sp, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
    d6ee:	2300      	movs	r3, #0
    d6f0:	f8ad 300a 	strh.w	r3, [sp, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d6f4:	f7ff fdaa 	bl	d24c <WsfCsEnter>

  pElem = pQueue->pHead;
    d6f8:	9b01      	ldr	r3, [sp, #4]
    d6fa:	681b      	ldr	r3, [r3, #0]
    d6fc:	9303      	str	r3, [sp, #12]

  /* iterate over queue */
  while (pElem != NULL)
    d6fe:	e007      	b.n	d710 <WsfQueueCount+0x28>
  {
    count++;
    d700:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d704:	3301      	adds	r3, #1
    d706:	f8ad 300a 	strh.w	r3, [sp, #10]
    pElem = pElem->pNext;
    d70a:	9b03      	ldr	r3, [sp, #12]
    d70c:	681b      	ldr	r3, [r3, #0]
    d70e:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
    d710:	9b03      	ldr	r3, [sp, #12]
    d712:	2b00      	cmp	r3, #0
    d714:	d1f4      	bne.n	d700 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d716:	f7ff fda9 	bl	d26c <WsfCsExit>

  return count;
    d71a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
}
    d71e:	4618      	mov	r0, r3
    d720:	b005      	add	sp, #20
    d722:	f85d fb04 	ldr.w	pc, [sp], #4

0000d726 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
    d726:	b500      	push	{lr}
    d728:	b085      	sub	sp, #20
    d72a:	9001      	str	r0, [sp, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    d72c:	f7ff fd8e 	bl	d24c <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
    d730:	9b01      	ldr	r3, [sp, #4]
    d732:	681b      	ldr	r3, [r3, #0]
    d734:	2b00      	cmp	r3, #0
    d736:	bf0c      	ite	eq
    d738:	2301      	moveq	r3, #1
    d73a:	2300      	movne	r3, #0
    d73c:	b2db      	uxtb	r3, r3
    d73e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
    d742:	f7ff fd93 	bl	d26c <WsfCsExit>

  return empty;
    d746:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d74a:	4618      	mov	r0, r3
    d74c:	b005      	add	sp, #20
    d74e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000d754 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
    d754:	b500      	push	{lr}
    d756:	b085      	sub	sp, #20
    d758:	9001      	str	r0, [sp, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    d75a:	2300      	movs	r3, #0
    d75c:	9302      	str	r3, [sp, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    d75e:	4b10      	ldr	r3, [pc, #64]	; (d7a0 <wsfTimerRemove+0x4c>)
    d760:	681b      	ldr	r3, [r3, #0]
    d762:	9303      	str	r3, [sp, #12]

  /* find timer in queue */
  while (pElem != NULL)
    d764:	e008      	b.n	d778 <wsfTimerRemove+0x24>
  {
    if (pElem == pTimer)
    d766:	9a03      	ldr	r2, [sp, #12]
    d768:	9b01      	ldr	r3, [sp, #4]
    d76a:	429a      	cmp	r2, r3
    d76c:	d008      	beq.n	d780 <wsfTimerRemove+0x2c>
    {
      break;
    }
    pPrev = pElem;
    d76e:	9b03      	ldr	r3, [sp, #12]
    d770:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
    d772:	9b03      	ldr	r3, [sp, #12]
    d774:	681b      	ldr	r3, [r3, #0]
    d776:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
    d778:	9b03      	ldr	r3, [sp, #12]
    d77a:	2b00      	cmp	r3, #0
    d77c:	d1f3      	bne.n	d766 <wsfTimerRemove+0x12>
    d77e:	e000      	b.n	d782 <wsfTimerRemove+0x2e>
      break;
    d780:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
    d782:	9b03      	ldr	r3, [sp, #12]
    d784:	2b00      	cmp	r3, #0
    d786:	d007      	beq.n	d798 <wsfTimerRemove+0x44>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
    d788:	9a02      	ldr	r2, [sp, #8]
    d78a:	9901      	ldr	r1, [sp, #4]
    d78c:	4804      	ldr	r0, [pc, #16]	; (d7a0 <wsfTimerRemove+0x4c>)
    d78e:	f7ff ff85 	bl	d69c <WsfQueueRemove>

    pTimer->isStarted = FALSE;
    d792:	9b01      	ldr	r3, [sp, #4]
    d794:	2200      	movs	r2, #0
    d796:	725a      	strb	r2, [r3, #9]
  }
}
    d798:	bf00      	nop
    d79a:	b005      	add	sp, #20
    d79c:	f85d fb04 	ldr.w	pc, [sp], #4
    d7a0:	10008960 	.word	0x10008960

0000d7a4 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
    d7a4:	b500      	push	{lr}
    d7a6:	b085      	sub	sp, #20
    d7a8:	9001      	str	r0, [sp, #4]
    d7aa:	9100      	str	r1, [sp, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    d7ac:	2300      	movs	r3, #0
    d7ae:	9302      	str	r3, [sp, #8]

  /* task schedule lock */
  WsfTaskLock();
    d7b0:	f7ff fd6c 	bl	d28c <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
    d7b4:	9b01      	ldr	r3, [sp, #4]
    d7b6:	7a5b      	ldrb	r3, [r3, #9]
    d7b8:	2b00      	cmp	r3, #0
    d7ba:	d002      	beq.n	d7c2 <wsfTimerInsert+0x1e>
  {
    wsfTimerRemove(pTimer);
    d7bc:	9801      	ldr	r0, [sp, #4]
    d7be:	f7ff ffc9 	bl	d754 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
    d7c2:	9b01      	ldr	r3, [sp, #4]
    d7c4:	2201      	movs	r2, #1
    d7c6:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
    d7c8:	9b01      	ldr	r3, [sp, #4]
    d7ca:	9a00      	ldr	r2, [sp, #0]
    d7cc:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    d7ce:	4b0f      	ldr	r3, [pc, #60]	; (d80c <wsfTimerInsert+0x68>)
    d7d0:	681b      	ldr	r3, [r3, #0]
    d7d2:	9303      	str	r3, [sp, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
    d7d4:	e00a      	b.n	d7ec <wsfTimerInsert+0x48>
  {
    if (pTimer->ticks < pElem->ticks)
    d7d6:	9b01      	ldr	r3, [sp, #4]
    d7d8:	685a      	ldr	r2, [r3, #4]
    d7da:	9b03      	ldr	r3, [sp, #12]
    d7dc:	685b      	ldr	r3, [r3, #4]
    d7de:	429a      	cmp	r2, r3
    d7e0:	d308      	bcc.n	d7f4 <wsfTimerInsert+0x50>
    {
      break;
    }
    pPrev = pElem;
    d7e2:	9b03      	ldr	r3, [sp, #12]
    d7e4:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
    d7e6:	9b03      	ldr	r3, [sp, #12]
    d7e8:	681b      	ldr	r3, [r3, #0]
    d7ea:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
    d7ec:	9b03      	ldr	r3, [sp, #12]
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	d1f1      	bne.n	d7d6 <wsfTimerInsert+0x32>
    d7f2:	e000      	b.n	d7f6 <wsfTimerInsert+0x52>
      break;
    d7f4:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
    d7f6:	9a02      	ldr	r2, [sp, #8]
    d7f8:	9901      	ldr	r1, [sp, #4]
    d7fa:	4804      	ldr	r0, [pc, #16]	; (d80c <wsfTimerInsert+0x68>)
    d7fc:	f7ff ff24 	bl	d648 <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
    d800:	f7ff fd49 	bl	d296 <WsfTaskUnlock>
}
    d804:	bf00      	nop
    d806:	b005      	add	sp, #20
    d808:	f85d fb04 	ldr.w	pc, [sp], #4
    d80c:	10008960 	.word	0x10008960

0000d810 <WsfTimer_handler>:

static void WsfTimer_handler(TimerHandle_t xTimer)
{
    d810:	b500      	push	{lr}
    d812:	b083      	sub	sp, #12
    d814:	9001      	str	r0, [sp, #4]
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
    d816:	2102      	movs	r1, #2
    d818:	2000      	movs	r0, #0
    d81a:	f7ff fdbf 	bl	d39c <WsfTaskSetReady>
}
    d81e:	bf00      	nop
    d820:	b003      	add	sp, #12
    d822:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000d828 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
    d828:	b500      	push	{lr}
    d82a:	b083      	sub	sp, #12
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
    d82c:	4b0e      	ldr	r3, [pc, #56]	; (d868 <WsfTimerInit+0x40>)
    d82e:	2200      	movs	r2, #0
    d830:	601a      	str	r2, [r3, #0]
    d832:	4b0d      	ldr	r3, [pc, #52]	; (d868 <WsfTimerInit+0x40>)
    d834:	2200      	movs	r2, #0
    d836:	605a      	str	r2, [r3, #4]

  if(xWsfTimer == NULL)
    d838:	4b0c      	ldr	r3, [pc, #48]	; (d86c <WsfTimerInit+0x44>)
    d83a:	681b      	ldr	r3, [r3, #0]
    d83c:	2b00      	cmp	r3, #0
    d83e:	d10f      	bne.n	d860 <WsfTimerInit+0x38>
  {
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
    d840:	4b0b      	ldr	r3, [pc, #44]	; (d870 <WsfTimerInit+0x48>)
    d842:	9300      	str	r3, [sp, #0]
    d844:	2300      	movs	r3, #0
    d846:	2200      	movs	r2, #0
    d848:	210a      	movs	r1, #10
    d84a:	480a      	ldr	r0, [pc, #40]	; (d874 <WsfTimerInit+0x4c>)
    d84c:	f016 fce2 	bl	24214 <xTimerCreate>
    d850:	4603      	mov	r3, r0
    d852:	4a06      	ldr	r2, [pc, #24]	; (d86c <WsfTimerInit+0x44>)
    d854:	6013      	str	r3, [r2, #0]
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
    d856:	4b05      	ldr	r3, [pc, #20]	; (d86c <WsfTimerInit+0x44>)
    d858:	681b      	ldr	r3, [r3, #0]
    d85a:	2b00      	cmp	r3, #0
    d85c:	d100      	bne.n	d860 <WsfTimerInit+0x38>
    d85e:	e7fe      	b.n	d85e <WsfTimerInit+0x36>
  }
}
    d860:	bf00      	nop
    d862:	b003      	add	sp, #12
    d864:	f85d fb04 	ldr.w	pc, [sp], #4
    d868:	10008960 	.word	0x10008960
    d86c:	10008968 	.word	0x10008968
    d870:	0000d811 	.word	0x0000d811
    d874:	0002aff4 	.word	0x0002aff4

0000d878 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
    d878:	b500      	push	{lr}
    d87a:	b083      	sub	sp, #12
    d87c:	9001      	str	r0, [sp, #4]
    d87e:	9100      	str	r1, [sp, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
    d880:	9b00      	ldr	r3, [sp, #0]
    d882:	2264      	movs	r2, #100	; 0x64
    d884:	fb02 f303 	mul.w	r3, r2, r3
    d888:	4619      	mov	r1, r3
    d88a:	9801      	ldr	r0, [sp, #4]
    d88c:	f7ff ff8a 	bl	d7a4 <wsfTimerInsert>
}
    d890:	bf00      	nop
    d892:	b003      	add	sp, #12
    d894:	f85d fb04 	ldr.w	pc, [sp], #4

0000d898 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
    d898:	b500      	push	{lr}
    d89a:	b083      	sub	sp, #12
    d89c:	9001      	str	r0, [sp, #4]
    d89e:	9100      	str	r1, [sp, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
    d8a0:	9b00      	ldr	r3, [sp, #0]
    d8a2:	4a06      	ldr	r2, [pc, #24]	; (d8bc <WsfTimerStartMs+0x24>)
    d8a4:	fba2 2303 	umull	r2, r3, r2, r3
    d8a8:	08db      	lsrs	r3, r3, #3
    d8aa:	4619      	mov	r1, r3
    d8ac:	9801      	ldr	r0, [sp, #4]
    d8ae:	f7ff ff79 	bl	d7a4 <wsfTimerInsert>
}
    d8b2:	bf00      	nop
    d8b4:	b003      	add	sp, #12
    d8b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ba:	bf00      	nop
    d8bc:	cccccccd 	.word	0xcccccccd

0000d8c0 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
    d8c0:	b500      	push	{lr}
    d8c2:	b083      	sub	sp, #12
    d8c4:	9001      	str	r0, [sp, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
    d8c6:	f7ff fce1 	bl	d28c <WsfTaskLock>

  wsfTimerRemove(pTimer);
    d8ca:	9801      	ldr	r0, [sp, #4]
    d8cc:	f7ff ff42 	bl	d754 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
    d8d0:	f7ff fce1 	bl	d296 <WsfTaskUnlock>
}
    d8d4:	bf00      	nop
    d8d6:	b003      	add	sp, #12
    d8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000d8dc <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
    d8dc:	b500      	push	{lr}
    d8de:	b085      	sub	sp, #20
    d8e0:	9001      	str	r0, [sp, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
    d8e2:	f7ff fcd3 	bl	d28c <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    d8e6:	4b12      	ldr	r3, [pc, #72]	; (d930 <WsfTimerUpdate+0x54>)
    d8e8:	681b      	ldr	r3, [r3, #0]
    d8ea:	9303      	str	r3, [sp, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
    d8ec:	e017      	b.n	d91e <WsfTimerUpdate+0x42>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
    d8ee:	9b03      	ldr	r3, [sp, #12]
    d8f0:	685b      	ldr	r3, [r3, #4]
    d8f2:	9a01      	ldr	r2, [sp, #4]
    d8f4:	429a      	cmp	r2, r3
    d8f6:	d206      	bcs.n	d906 <WsfTimerUpdate+0x2a>
    {
      pElem->ticks -= ticks;
    d8f8:	9b03      	ldr	r3, [sp, #12]
    d8fa:	685a      	ldr	r2, [r3, #4]
    d8fc:	9b01      	ldr	r3, [sp, #4]
    d8fe:	1ad2      	subs	r2, r2, r3
    d900:	9b03      	ldr	r3, [sp, #12]
    d902:	605a      	str	r2, [r3, #4]
    d904:	e008      	b.n	d918 <WsfTimerUpdate+0x3c>
    }
    else
    {
      pElem->ticks = 0;
    d906:	9b03      	ldr	r3, [sp, #12]
    d908:	2200      	movs	r2, #0
    d90a:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
    d90c:	9b03      	ldr	r3, [sp, #12]
    d90e:	7a1b      	ldrb	r3, [r3, #8]
    d910:	2102      	movs	r1, #2
    d912:	4618      	mov	r0, r3
    d914:	f7ff fd42 	bl	d39c <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
    d918:	9b03      	ldr	r3, [sp, #12]
    d91a:	681b      	ldr	r3, [r3, #0]
    d91c:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
    d91e:	9b03      	ldr	r3, [sp, #12]
    d920:	2b00      	cmp	r3, #0
    d922:	d1e4      	bne.n	d8ee <WsfTimerUpdate+0x12>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    d924:	f7ff fcb7 	bl	d296 <WsfTaskUnlock>
}
    d928:	bf00      	nop
    d92a:	b005      	add	sp, #20
    d92c:	f85d fb04 	ldr.w	pc, [sp], #4
    d930:	10008960 	.word	0x10008960

0000d934 <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
    d934:	b500      	push	{lr}
    d936:	b085      	sub	sp, #20
    d938:	9001      	str	r0, [sp, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
    d93a:	f7ff fca7 	bl	d28c <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
    d93e:	4b0c      	ldr	r3, [pc, #48]	; (d970 <WsfTimerNextExpiration+0x3c>)
    d940:	681b      	ldr	r3, [r3, #0]
    d942:	2b00      	cmp	r3, #0
    d944:	d105      	bne.n	d952 <WsfTimerNextExpiration+0x1e>
  {
    *pTimerRunning = FALSE;
    d946:	9b01      	ldr	r3, [sp, #4]
    d948:	2200      	movs	r2, #0
    d94a:	701a      	strb	r2, [r3, #0]
    ticks = 0;
    d94c:	2300      	movs	r3, #0
    d94e:	9303      	str	r3, [sp, #12]
    d950:	e006      	b.n	d960 <WsfTimerNextExpiration+0x2c>
  }
  else
  {
    *pTimerRunning = TRUE;
    d952:	9b01      	ldr	r3, [sp, #4]
    d954:	2201      	movs	r2, #1
    d956:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
    d958:	4b05      	ldr	r3, [pc, #20]	; (d970 <WsfTimerNextExpiration+0x3c>)
    d95a:	681b      	ldr	r3, [r3, #0]
    d95c:	685b      	ldr	r3, [r3, #4]
    d95e:	9303      	str	r3, [sp, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    d960:	f7ff fc99 	bl	d296 <WsfTaskUnlock>

  return ticks;
    d964:	9b03      	ldr	r3, [sp, #12]
}
    d966:	4618      	mov	r0, r3
    d968:	b005      	add	sp, #20
    d96a:	f85d fb04 	ldr.w	pc, [sp], #4
    d96e:	bf00      	nop
    d970:	10008960 	.word	0x10008960

0000d974 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
    d974:	b500      	push	{lr}
    d976:	b085      	sub	sp, #20
    d978:	4603      	mov	r3, r0
    d97a:	f88d 3007 	strb.w	r3, [sp, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    d97e:	2300      	movs	r3, #0
    d980:	9303      	str	r3, [sp, #12]

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
    d982:	f7ff fc83 	bl	d28c <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    d986:	4b0e      	ldr	r3, [pc, #56]	; (d9c0 <WsfTimerServiceExpired+0x4c>)
    d988:	681b      	ldr	r3, [r3, #0]
    d98a:	9302      	str	r3, [sp, #8]
    d98c:	9b02      	ldr	r3, [sp, #8]
    d98e:	2b00      	cmp	r3, #0
    d990:	d00f      	beq.n	d9b2 <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
    d992:	9b02      	ldr	r3, [sp, #8]
    d994:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    d996:	2b00      	cmp	r3, #0
    d998:	d10b      	bne.n	d9b2 <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
    d99a:	9a03      	ldr	r2, [sp, #12]
    d99c:	9902      	ldr	r1, [sp, #8]
    d99e:	4808      	ldr	r0, [pc, #32]	; (d9c0 <WsfTimerServiceExpired+0x4c>)
    d9a0:	f7ff fe7c 	bl	d69c <WsfQueueRemove>

    pElem->isStarted = FALSE;
    d9a4:	9b02      	ldr	r3, [sp, #8]
    d9a6:	2200      	movs	r2, #0
    d9a8:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
    d9aa:	f7ff fc74 	bl	d296 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
    d9ae:	9b02      	ldr	r3, [sp, #8]
    d9b0:	e002      	b.n	d9b8 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    d9b2:	f7ff fc70 	bl	d296 <WsfTaskUnlock>

  return NULL;
    d9b6:	2300      	movs	r3, #0
}
    d9b8:	4618      	mov	r0, r3
    d9ba:	b005      	add	sp, #20
    d9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c0:	10008960 	.word	0x10008960

0000d9c4 <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
    d9c4:	b500      	push	{lr}
    d9c6:	b087      	sub	sp, #28
    wsfTimerTicks_t xNextExpiration;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
    d9c8:	f016 f816 	bl	239f8 <xTaskGetTickCount>
    d9cc:	9005      	str	r0, [sp, #20]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
    d9ce:	4b1a      	ldr	r3, [pc, #104]	; (da38 <WsfTimerUpdateTicks+0x74>)
    d9d0:	681b      	ldr	r3, [r3, #0]
    d9d2:	9a05      	ldr	r2, [sp, #20]
    d9d4:	1ad3      	subs	r3, r2, r3
    d9d6:	9304      	str	r3, [sp, #16]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
    d9d8:	9b04      	ldr	r3, [sp, #16]
    d9da:	2b09      	cmp	r3, #9
    d9dc:	d90a      	bls.n	d9f4 <WsfTimerUpdateTicks+0x30>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
    d9de:	9b04      	ldr	r3, [sp, #16]
    d9e0:	4a16      	ldr	r2, [pc, #88]	; (da3c <WsfTimerUpdateTicks+0x78>)
    d9e2:	fba2 2303 	umull	r2, r3, r2, r3
    d9e6:	08db      	lsrs	r3, r3, #3
    d9e8:	4618      	mov	r0, r3
    d9ea:	f7ff ff77 	bl	d8dc <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
    d9ee:	4a12      	ldr	r2, [pc, #72]	; (da38 <WsfTimerUpdateTicks+0x74>)
    d9f0:	9b05      	ldr	r3, [sp, #20]
    d9f2:	6013      	str	r3, [r2, #0]
    }

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
    d9f4:	f10d 030b 	add.w	r3, sp, #11
    d9f8:	4618      	mov	r0, r3
    d9fa:	f7ff ff9b 	bl	d934 <WsfTimerNextExpiration>
    d9fe:	9003      	str	r0, [sp, #12]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
    da00:	9b03      	ldr	r3, [sp, #12]
    da02:	2b00      	cmp	r3, #0
    da04:	d014      	beq.n	da30 <WsfTimerUpdateTicks+0x6c>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
    da06:	4b0e      	ldr	r3, [pc, #56]	; (da40 <WsfTimerUpdateTicks+0x7c>)
    da08:	6818      	ldr	r0, [r3, #0]
    da0a:	9b03      	ldr	r3, [sp, #12]
    da0c:	f242 7210 	movw	r2, #10000	; 0x2710
    da10:	fb02 f303 	mul.w	r3, r2, r3
    da14:	4a0b      	ldr	r2, [pc, #44]	; (da44 <WsfTimerUpdateTicks+0x80>)
    da16:	fba2 2303 	umull	r2, r3, r2, r3
    da1a:	099a      	lsrs	r2, r3, #6
    da1c:	2364      	movs	r3, #100	; 0x64
    da1e:	9300      	str	r3, [sp, #0]
    da20:	2300      	movs	r3, #0
    da22:	2104      	movs	r1, #4
    da24:	f016 fc3a 	bl	2429c <xTimerGenericCommand>
    da28:	4603      	mov	r3, r0
    da2a:	2b01      	cmp	r3, #1
    da2c:	d000      	beq.n	da30 <WsfTimerUpdateTicks+0x6c>
    da2e:	e7fe      	b.n	da2e <WsfTimerUpdateTicks+0x6a>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
    da30:	bf00      	nop
    da32:	b007      	add	sp, #28
    da34:	f85d fb04 	ldr.w	pc, [sp], #4
    da38:	1000418c 	.word	0x1000418c
    da3c:	cccccccd 	.word	0xcccccccd
    da40:	10008968 	.word	0x10008968
    da44:	10624dd3 	.word	0x10624dd3

0000da48 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
    da48:	b40f      	push	{r0, r1, r2, r3}
    da4a:	b500      	push	{lr}
    da4c:	b0c3      	sub	sp, #268	; 0x10c
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
    da4e:	aa45      	add	r2, sp, #276	; 0x114
    da50:	466b      	mov	r3, sp
    da52:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
    da54:	466b      	mov	r3, sp
    da56:	a801      	add	r0, sp, #4
    da58:	681a      	ldr	r2, [r3, #0]
    da5a:	9944      	ldr	r1, [sp, #272]	; 0x110
    da5c:	f014 fc16 	bl	2228c <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
    da60:	ab01      	add	r3, sp, #4
    da62:	4618      	mov	r0, r3
    da64:	f014 ff1c 	bl	228a0 <am_util_stdio_printf>
    da68:	9041      	str	r0, [sp, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
    da6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    da6c:	2bff      	cmp	r3, #255	; 0xff
    da6e:	d903      	bls.n	da78 <WsfTrace+0x30>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
    da70:	2183      	movs	r1, #131	; 0x83
    da72:	4806      	ldr	r0, [pc, #24]	; (da8c <WsfTrace+0x44>)
    da74:	f7ff fa20 	bl	ceb8 <WsfAssert>
  am_util_debug_printf("\n");
    da78:	4805      	ldr	r0, [pc, #20]	; (da90 <WsfTrace+0x48>)
    da7a:	f014 ff11 	bl	228a0 <am_util_stdio_printf>
}
    da7e:	bf00      	nop
    da80:	b043      	add	sp, #268	; 0x10c
    da82:	f85d eb04 	ldr.w	lr, [sp], #4
    da86:	b004      	add	sp, #16
    da88:	4770      	bx	lr
    da8a:	bf00      	nop
    da8c:	0002b010 	.word	0x0002b010
    da90:	0002b008 	.word	0x0002b008

0000da94 <FmplIasDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FmplIasDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
    da94:	b500      	push	{lr}
    da96:	b085      	sub	sp, #20
    da98:	4603      	mov	r3, r0
    da9a:	9102      	str	r1, [sp, #8]
    da9c:	f88d 300f 	strb.w	r3, [sp, #15]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attIasSvcUuid,
    daa0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    daa4:	9b02      	ldr	r3, [sp, #8]
    daa6:	9301      	str	r3, [sp, #4]
    daa8:	4b05      	ldr	r3, [pc, #20]	; (dac0 <FmplIasDiscover+0x2c>)
    daaa:	9300      	str	r3, [sp, #0]
    daac:	2301      	movs	r3, #1
    daae:	4a05      	ldr	r2, [pc, #20]	; (dac4 <FmplIasDiscover+0x30>)
    dab0:	2102      	movs	r1, #2
    dab2:	f018 fb83 	bl	261bc <AppDiscFindService>
                     FMPL_IAS_HDL_LIST_LEN, (attcDiscChar_t **) fmplIasDiscCharList, pHdlList);
}
    dab6:	bf00      	nop
    dab8:	b005      	add	sp, #20
    daba:	f85d fb04 	ldr.w	pc, [sp], #4
    dabe:	bf00      	nop
    dac0:	10002b10 	.word	0x10002b10
    dac4:	0002c214 	.word	0x0002c214

0000dac8 <FmplSendAlert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FmplSendAlert(dmConnId_t connId, uint16_t handle, uint8_t alert)
{
    dac8:	b500      	push	{lr}
    daca:	b085      	sub	sp, #20
    dacc:	4603      	mov	r3, r0
    dace:	f88d 3007 	strb.w	r3, [sp, #7]
    dad2:	460b      	mov	r3, r1
    dad4:	f8ad 3004 	strh.w	r3, [sp, #4]
    dad8:	4613      	mov	r3, r2
    dada:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t buf[1];

  if (handle != ATT_HANDLE_NONE)
    dade:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dae2:	2b00      	cmp	r3, #0
    dae4:	d00b      	beq.n	dafe <FmplSendAlert+0x36>
  {
    buf[0] = alert;
    dae6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    daea:	f88d 300c 	strb.w	r3, [sp, #12]
    AttcWriteCmd(connId, handle, 1, buf);
    daee:	ab03      	add	r3, sp, #12
    daf0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    daf4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    daf8:	2201      	movs	r2, #1
    dafa:	f001 fe82 	bl	f802 <AttcWriteCmd>
  }
}
    dafe:	bf00      	nop
    db00:	b005      	add	sp, #20
    db02:	f85d fb04 	ldr.w	pc, [sp], #4

0000db06 <attcUuidCmp>:
 *
 *  \return TRUE if UUIDs match.
 */
/*************************************************************************************************/
static bool_t attcUuidCmp(attcDiscChar_t *pChar, uint8_t *pUuid, uint8_t settings)
{
    db06:	b500      	push	{lr}
    db08:	b085      	sub	sp, #20
    db0a:	9003      	str	r0, [sp, #12]
    db0c:	9102      	str	r1, [sp, #8]
    db0e:	4613      	mov	r3, r2
    db10:	f88d 3007 	strb.w	r3, [sp, #7]
  /* if both uuids are the same length */
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
    db14:	9b03      	ldr	r3, [sp, #12]
    db16:	791b      	ldrb	r3, [r3, #4]
    db18:	f003 0201 	and.w	r2, r3, #1
    db1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db20:	429a      	cmp	r2, r3
    db22:	d113      	bne.n	db4c <attcUuidCmp+0x46>
  {
    /* simply compare the data */
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
    db24:	9b03      	ldr	r3, [sp, #12]
    db26:	6818      	ldr	r0, [r3, #0]
    db28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d101      	bne.n	db34 <attcUuidCmp+0x2e>
    db30:	2302      	movs	r3, #2
    db32:	e000      	b.n	db36 <attcUuidCmp+0x30>
    db34:	2310      	movs	r3, #16
    db36:	461a      	mov	r2, r3
    db38:	9902      	ldr	r1, [sp, #8]
    db3a:	f01a fc4f 	bl	283dc <memcmp>
    db3e:	4603      	mov	r3, r0
    db40:	2b00      	cmp	r3, #0
    db42:	bf0c      	ite	eq
    db44:	2301      	moveq	r3, #1
    db46:	2300      	movne	r3, #0
    db48:	b2db      	uxtb	r3, r3
    db4a:	e012      	b.n	db72 <attcUuidCmp+0x6c>
  }
  /* if discovered UUID is 128 bit and our UUID is 16 bit */
  else if ((settings == ATTC_SET_UUID_128) && ((pChar->settings & ATTC_SET_UUID_128) == 0))
    db4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db50:	2b01      	cmp	r3, #1
    db52:	d10d      	bne.n	db70 <attcUuidCmp+0x6a>
    db54:	9b03      	ldr	r3, [sp, #12]
    db56:	791b      	ldrb	r3, [r3, #4]
    db58:	f003 0301 	and.w	r3, r3, #1
    db5c:	2b00      	cmp	r3, #0
    db5e:	d107      	bne.n	db70 <attcUuidCmp+0x6a>
  {
    /* convert our UUID to 128 bit and compare */
    return attUuidCmp16to128(pChar->pUuid, pUuid);
    db60:	9b03      	ldr	r3, [sp, #12]
    db62:	681b      	ldr	r3, [r3, #0]
    db64:	9902      	ldr	r1, [sp, #8]
    db66:	4618      	mov	r0, r3
    db68:	f005 fa38 	bl	12fdc <attUuidCmp16to128>
    db6c:	4603      	mov	r3, r0
    db6e:	e000      	b.n	db72 <attcUuidCmp+0x6c>
  }
  /* else discovered UUID is 16 bit and our UUID is 128 bit */
  else
  {
    /* no match */
    return FALSE;
    db70:	2300      	movs	r3, #0
  }
}
    db72:	4618      	mov	r0, r3
    db74:	b005      	add	sp, #20
    db76:	f85d fb04 	ldr.w	pc, [sp], #4

0000db7a <attcDiscVerify>:
 *  \return ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscVerify(attcDiscCb_t *pCb)
{
    db7a:	b084      	sub	sp, #16
    db7c:	9001      	str	r0, [sp, #4]
  attcDiscChar_t  **pChar;
  uint8_t         i;

  /* for each characteristic */
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    db7e:	2300      	movs	r3, #0
    db80:	f88d 300b 	strb.w	r3, [sp, #11]
    db84:	9b01      	ldr	r3, [sp, #4]
    db86:	681b      	ldr	r3, [r3, #0]
    db88:	9303      	str	r3, [sp, #12]
    db8a:	e019      	b.n	dbc0 <attcDiscVerify+0x46>
  {
    /* if characteristic required */
    if (((*pChar)->settings & ATTC_SET_REQUIRED) != 0)
    db8c:	9b03      	ldr	r3, [sp, #12]
    db8e:	681b      	ldr	r3, [r3, #0]
    db90:	791b      	ldrb	r3, [r3, #4]
    db92:	f003 0302 	and.w	r3, r3, #2
    db96:	2b00      	cmp	r3, #0
    db98:	d00a      	beq.n	dbb0 <attcDiscVerify+0x36>
    {
      /* verify handle was discovered */
      if (pCb->pHdlList[i] == ATT_HANDLE_NONE)
    db9a:	9b01      	ldr	r3, [sp, #4]
    db9c:	685a      	ldr	r2, [r3, #4]
    db9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dba2:	005b      	lsls	r3, r3, #1
    dba4:	4413      	add	r3, r2
    dba6:	881b      	ldrh	r3, [r3, #0]
    dba8:	2b00      	cmp	r3, #0
    dbaa:	d101      	bne.n	dbb0 <attcDiscVerify+0x36>
      {
        return ATT_ERR_REQ_NOT_FOUND;
    dbac:	2376      	movs	r3, #118	; 0x76
    dbae:	e00e      	b.n	dbce <attcDiscVerify+0x54>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    dbb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbb4:	3301      	adds	r3, #1
    dbb6:	f88d 300b 	strb.w	r3, [sp, #11]
    dbba:	9b03      	ldr	r3, [sp, #12]
    dbbc:	3304      	adds	r3, #4
    dbbe:	9303      	str	r3, [sp, #12]
    dbc0:	9b01      	ldr	r3, [sp, #4]
    dbc2:	7b1b      	ldrb	r3, [r3, #12]
    dbc4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    dbc8:	429a      	cmp	r2, r3
    dbca:	d3df      	bcc.n	db8c <attcDiscVerify+0x12>
      }
    }
  }

  return ATT_SUCCESS;
    dbcc:	2300      	movs	r3, #0
}
    dbce:	4618      	mov	r0, r3
    dbd0:	b004      	add	sp, #16
    dbd2:	4770      	bx	lr

0000dbd4 <attcDiscDescriptors>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscDescriptors(dmConnId_t connId, attcDiscCb_t *pCb)
{
    dbd4:	b500      	push	{lr}
    dbd6:	b085      	sub	sp, #20
    dbd8:	4603      	mov	r3, r0
    dbda:	9100      	str	r1, [sp, #0]
    dbdc:	f88d 3007 	strb.w	r3, [sp, #7]
  attcDiscChar_t  **pChar;
  uint16_t        startHdl = ATT_HANDLE_NONE;
    dbe0:	2300      	movs	r3, #0
    dbe2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t        endHdl = ATT_HANDLE_NONE;
    dbe6:	2300      	movs	r3, #0
    dbe8:	f8ad 3008 	strh.w	r3, [sp, #8]

  /* find next descriptor in list */
  pChar = pCb->pCharList + pCb->charListIdx;
    dbec:	9b00      	ldr	r3, [sp, #0]
    dbee:	681a      	ldr	r2, [r3, #0]
    dbf0:	9b00      	ldr	r3, [sp, #0]
    dbf2:	7c9b      	ldrb	r3, [r3, #18]
    dbf4:	009b      	lsls	r3, r3, #2
    dbf6:	4413      	add	r3, r2
    dbf8:	9303      	str	r3, [sp, #12]
  while (pCb->charListIdx < pCb->charListLen)
    dbfa:	e04c      	b.n	dc96 <attcDiscDescriptors+0xc2>
  {
    /* if this is a descriptor */
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
    dbfc:	9b03      	ldr	r3, [sp, #12]
    dbfe:	681b      	ldr	r3, [r3, #0]
    dc00:	791b      	ldrb	r3, [r3, #4]
    dc02:	f003 0304 	and.w	r3, r3, #4
    dc06:	2b00      	cmp	r3, #0
    dc08:	d03c      	beq.n	dc84 <attcDiscDescriptors+0xb0>
    {
      /* start handle is one greater than characteristic value handle,
       * which is stored in the previous entry in the list;
       * end handle is stored at current entry in the list
       */
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
    dc0a:	9b00      	ldr	r3, [sp, #0]
    dc0c:	685a      	ldr	r2, [r3, #4]
    dc0e:	9b00      	ldr	r3, [sp, #0]
    dc10:	7c9b      	ldrb	r3, [r3, #18]
    dc12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    dc16:	3b01      	subs	r3, #1
    dc18:	005b      	lsls	r3, r3, #1
    dc1a:	4413      	add	r3, r2
    dc1c:	881b      	ldrh	r3, [r3, #0]
    dc1e:	3301      	adds	r3, #1
    dc20:	f8ad 300a 	strh.w	r3, [sp, #10]
      endHdl = pCb->pHdlList[pCb->charListIdx];
    dc24:	9b00      	ldr	r3, [sp, #0]
    dc26:	685a      	ldr	r2, [r3, #4]
    dc28:	9b00      	ldr	r3, [sp, #0]
    dc2a:	7c9b      	ldrb	r3, [r3, #18]
    dc2c:	005b      	lsls	r3, r3, #1
    dc2e:	4413      	add	r3, r2
    dc30:	881b      	ldrh	r3, [r3, #0]
    dc32:	f8ad 3008 	strh.w	r3, [sp, #8]

      /* clear temp end handle */
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
    dc36:	9b00      	ldr	r3, [sp, #0]
    dc38:	685a      	ldr	r2, [r3, #4]
    dc3a:	9b00      	ldr	r3, [sp, #0]
    dc3c:	7c9b      	ldrb	r3, [r3, #18]
    dc3e:	005b      	lsls	r3, r3, #1
    dc40:	4413      	add	r3, r2
    dc42:	2200      	movs	r2, #0
    dc44:	801a      	strh	r2, [r3, #0]

      /* if there are descriptors */
      if (startHdl <= endHdl)
    dc46:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    dc4a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    dc4e:	429a      	cmp	r2, r3
    dc50:	d928      	bls.n	dca4 <attcDiscDescriptors+0xd0>
      {
        /* we are looking for descriptors for this characteristic but
         * there aren't any;
         * skip over any other descriptors that follow in our list
         */
        while (++pCb->charListIdx < pCb->charListLen)
    dc52:	e00a      	b.n	dc6a <attcDiscDescriptors+0x96>
        {
          pChar++;
    dc54:	9b03      	ldr	r3, [sp, #12]
    dc56:	3304      	adds	r3, #4
    dc58:	9303      	str	r3, [sp, #12]
          if ((*pChar)->settings & ATTC_SET_DESCRIPTOR)
    dc5a:	9b03      	ldr	r3, [sp, #12]
    dc5c:	681b      	ldr	r3, [r3, #0]
    dc5e:	791b      	ldrb	r3, [r3, #4]
    dc60:	f003 0304 	and.w	r3, r3, #4
    dc64:	2b00      	cmp	r3, #0
    dc66:	d000      	beq.n	dc6a <attcDiscDescriptors+0x96>
          {
            continue;
    dc68:	bf00      	nop
        while (++pCb->charListIdx < pCb->charListLen)
    dc6a:	9b00      	ldr	r3, [sp, #0]
    dc6c:	7c9b      	ldrb	r3, [r3, #18]
    dc6e:	3301      	adds	r3, #1
    dc70:	b2da      	uxtb	r2, r3
    dc72:	9b00      	ldr	r3, [sp, #0]
    dc74:	749a      	strb	r2, [r3, #18]
    dc76:	9b00      	ldr	r3, [sp, #0]
    dc78:	7c9a      	ldrb	r2, [r3, #18]
    dc7a:	9b00      	ldr	r3, [sp, #0]
    dc7c:	7b1b      	ldrb	r3, [r3, #12]
    dc7e:	429a      	cmp	r2, r3
    dc80:	d3e8      	bcc.n	dc54 <attcDiscDescriptors+0x80>
    dc82:	e008      	b.n	dc96 <attcDiscDescriptors+0xc2>
      }
    }
    else
    {
      /* go to next in list */
      pChar++;
    dc84:	9b03      	ldr	r3, [sp, #12]
    dc86:	3304      	adds	r3, #4
    dc88:	9303      	str	r3, [sp, #12]
      pCb->charListIdx++;
    dc8a:	9b00      	ldr	r3, [sp, #0]
    dc8c:	7c9b      	ldrb	r3, [r3, #18]
    dc8e:	3301      	adds	r3, #1
    dc90:	b2da      	uxtb	r2, r3
    dc92:	9b00      	ldr	r3, [sp, #0]
    dc94:	749a      	strb	r2, [r3, #18]
  while (pCb->charListIdx < pCb->charListLen)
    dc96:	9b00      	ldr	r3, [sp, #0]
    dc98:	7c9a      	ldrb	r2, [r3, #18]
    dc9a:	9b00      	ldr	r3, [sp, #0]
    dc9c:	7b1b      	ldrb	r3, [r3, #12]
    dc9e:	429a      	cmp	r2, r3
    dca0:	d3ac      	bcc.n	dbfc <attcDiscDescriptors+0x28>
    dca2:	e000      	b.n	dca6 <attcDiscDescriptors+0xd2>
        break;
    dca4:	bf00      	nop
    }
  }

  /* if no more descriptors to be discovered */
  if (pCb->charListIdx == pCb->charListLen)
    dca6:	9b00      	ldr	r3, [sp, #0]
    dca8:	7c9a      	ldrb	r2, [r3, #18]
    dcaa:	9b00      	ldr	r3, [sp, #0]
    dcac:	7b1b      	ldrb	r3, [r3, #12]
    dcae:	429a      	cmp	r2, r3
    dcb0:	d104      	bne.n	dcbc <attcDiscDescriptors+0xe8>
  {
    /* we're done; verify required characteristics and descriptors were discovered */
    return attcDiscVerify(pCb);
    dcb2:	9800      	ldr	r0, [sp, #0]
    dcb4:	f7ff ff61 	bl	db7a <attcDiscVerify>
    dcb8:	4603      	mov	r3, r0
    dcba:	e009      	b.n	dcd0 <attcDiscDescriptors+0xfc>
  }
  /* else initiate characteristic descriptor discovery */
  else
  {
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
    dcbc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    dcc0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    dcc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dcc8:	2301      	movs	r3, #1
    dcca:	f001 fafd 	bl	f2c8 <AttcFindInfoReq>
    return ATT_CONTINUING;
    dcce:	2378      	movs	r3, #120	; 0x78
  }
}
    dcd0:	4618      	mov	r0, r3
    dcd2:	b005      	add	sp, #20
    dcd4:	f85d fb04 	ldr.w	pc, [sp], #4

0000dcd8 <attcDiscProcDescPair>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static void attcDiscProcDescPair(attcDiscCb_t *pCb, uint8_t settings, uint8_t *pPair)
{
    dcd8:	b500      	push	{lr}
    dcda:	b087      	sub	sp, #28
    dcdc:	9003      	str	r0, [sp, #12]
    dcde:	460b      	mov	r3, r1
    dce0:	9201      	str	r2, [sp, #4]
    dce2:	f88d 300b 	strb.w	r3, [sp, #11]
  attcDiscChar_t  **pDesc;
  uint16_t        hdl;
  uint8_t         i;

  /* parse handle */
  BSTREAM_TO_UINT16(hdl, pPair);
    dce6:	9b01      	ldr	r3, [sp, #4]
    dce8:	781b      	ldrb	r3, [r3, #0]
    dcea:	b29a      	uxth	r2, r3
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	3301      	adds	r3, #1
    dcf0:	781b      	ldrb	r3, [r3, #0]
    dcf2:	b29b      	uxth	r3, r3
    dcf4:	021b      	lsls	r3, r3, #8
    dcf6:	b29b      	uxth	r3, r3
    dcf8:	4413      	add	r3, r2
    dcfa:	f8ad 3010 	strh.w	r3, [sp, #16]
    dcfe:	9b01      	ldr	r3, [sp, #4]
    dd00:	3302      	adds	r3, #2
    dd02:	9301      	str	r3, [sp, #4]

  /* now pPair points to UUID; find descriptor with matching UUID */
  pDesc = &pCb->pCharList[pCb->charListIdx];
    dd04:	9b03      	ldr	r3, [sp, #12]
    dd06:	681a      	ldr	r2, [r3, #0]
    dd08:	9b03      	ldr	r3, [sp, #12]
    dd0a:	7c9b      	ldrb	r3, [r3, #18]
    dd0c:	009b      	lsls	r3, r3, #2
    dd0e:	4413      	add	r3, r2
    dd10:	9305      	str	r3, [sp, #20]
  for (i = pCb->charListIdx;
    dd12:	9b03      	ldr	r3, [sp, #12]
    dd14:	7c9b      	ldrb	r3, [r3, #18]
    dd16:	f88d 3013 	strb.w	r3, [sp, #19]
    dd1a:	e02c      	b.n	dd76 <attcDiscProcDescPair+0x9e>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
       i++, pDesc++)
  {
    /* if characteristic not already found */
    if (pCb->pHdlList[i] == 0)
    dd1c:	9b03      	ldr	r3, [sp, #12]
    dd1e:	685a      	ldr	r2, [r3, #4]
    dd20:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dd24:	005b      	lsls	r3, r3, #1
    dd26:	4413      	add	r3, r2
    dd28:	881b      	ldrh	r3, [r3, #0]
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d11b      	bne.n	dd66 <attcDiscProcDescPair+0x8e>
    {
      /* if UUIDs match */
      if (attcUuidCmp(*pDesc, pPair, settings))
    dd2e:	9b05      	ldr	r3, [sp, #20]
    dd30:	681b      	ldr	r3, [r3, #0]
    dd32:	f89d 200b 	ldrb.w	r2, [sp, #11]
    dd36:	9901      	ldr	r1, [sp, #4]
    dd38:	4618      	mov	r0, r3
    dd3a:	f7ff fee4 	bl	db06 <attcUuidCmp>
    dd3e:	4603      	mov	r3, r0
    dd40:	2b00      	cmp	r3, #0
    dd42:	d010      	beq.n	dd66 <attcDiscProcDescPair+0x8e>
      {
        /* match found; store handle */
        pCb->pHdlList[i] = hdl;
    dd44:	9b03      	ldr	r3, [sp, #12]
    dd46:	685a      	ldr	r2, [r3, #4]
    dd48:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dd4c:	005b      	lsls	r3, r3, #1
    dd4e:	4413      	add	r3, r2
    dd50:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    dd54:	801a      	strh	r2, [r3, #0]

        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
    dd56:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    dd5a:	4619      	mov	r1, r3
    dd5c:	480e      	ldr	r0, [pc, #56]	; (dd98 <attcDiscProcDescPair+0xc0>)
    dd5e:	f7ff fe73 	bl	da48 <WsfTrace>
        break;
    dd62:	bf00      	nop
      }
    }
  }
}
    dd64:	e014      	b.n	dd90 <attcDiscProcDescPair+0xb8>
       i++, pDesc++)
    dd66:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dd6a:	3301      	adds	r3, #1
    dd6c:	f88d 3013 	strb.w	r3, [sp, #19]
    dd70:	9b05      	ldr	r3, [sp, #20]
    dd72:	3304      	adds	r3, #4
    dd74:	9305      	str	r3, [sp, #20]
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
    dd76:	9b03      	ldr	r3, [sp, #12]
    dd78:	7b1b      	ldrb	r3, [r3, #12]
  for (i = pCb->charListIdx;
    dd7a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    dd7e:	429a      	cmp	r2, r3
    dd80:	d206      	bcs.n	dd90 <attcDiscProcDescPair+0xb8>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
    dd82:	9b05      	ldr	r3, [sp, #20]
    dd84:	681b      	ldr	r3, [r3, #0]
    dd86:	791b      	ldrb	r3, [r3, #4]
    dd88:	f003 0304 	and.w	r3, r3, #4
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d1c5      	bne.n	dd1c <attcDiscProcDescPair+0x44>
}
    dd90:	bf00      	nop
    dd92:	b007      	add	sp, #28
    dd94:	f85d fb04 	ldr.w	pc, [sp], #4
    dd98:	0002b064 	.word	0x0002b064

0000dd9c <attcDiscProcDesc>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscProcDesc(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
    dd9c:	b500      	push	{lr}
    dd9e:	b089      	sub	sp, #36	; 0x24
    dda0:	9001      	str	r0, [sp, #4]
    dda2:	9100      	str	r1, [sp, #0]
  uint8_t         format;
  uint8_t         pairLen;
  uint8_t         settings;

  /* if find info successful */
  if (pMsg->hdr.status == ATT_SUCCESS)
    dda4:	9b00      	ldr	r3, [sp, #0]
    dda6:	78db      	ldrb	r3, [r3, #3]
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d136      	bne.n	de1a <attcDiscProcDesc+0x7e>
  {
    p = pMsg->pValue;
    ddac:	9b00      	ldr	r3, [sp, #0]
    ddae:	685b      	ldr	r3, [r3, #4]
    ddb0:	9306      	str	r3, [sp, #24]
    pEnd = pMsg->pValue + pMsg->valueLen;
    ddb2:	9b00      	ldr	r3, [sp, #0]
    ddb4:	685b      	ldr	r3, [r3, #4]
    ddb6:	9a00      	ldr	r2, [sp, #0]
    ddb8:	8912      	ldrh	r2, [r2, #8]
    ddba:	4413      	add	r3, r2
    ddbc:	9304      	str	r3, [sp, #16]

    /* determine UUID format */
    BSTREAM_TO_UINT8(format, p);
    ddbe:	9b06      	ldr	r3, [sp, #24]
    ddc0:	1c5a      	adds	r2, r3, #1
    ddc2:	9206      	str	r2, [sp, #24]
    ddc4:	781b      	ldrb	r3, [r3, #0]
    ddc6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (format == ATT_FIND_HANDLE_16_UUID)
    ddca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ddce:	2b01      	cmp	r3, #1
    ddd0:	d106      	bne.n	dde0 <attcDiscProcDesc+0x44>
    {
      settings = 0;
    ddd2:	2300      	movs	r3, #0
    ddd4:	f88d 3016 	strb.w	r3, [sp, #22]
      pairLen = ATT_FIND_RSP_LEN_UUID16;
    ddd8:	2304      	movs	r3, #4
    ddda:	f88d 3017 	strb.w	r3, [sp, #23]
    ddde:	e018      	b.n	de12 <attcDiscProcDesc+0x76>
    }
    else if (format == ATT_FIND_HANDLE_128_UUID)
    dde0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dde4:	2b02      	cmp	r3, #2
    dde6:	d106      	bne.n	ddf6 <attcDiscProcDesc+0x5a>
    {
      settings = ATTC_SET_UUID_128;
    dde8:	2301      	movs	r3, #1
    ddea:	f88d 3016 	strb.w	r3, [sp, #22]
      pairLen = ATT_FIND_RSP_LEN_UUID128;
    ddee:	2312      	movs	r3, #18
    ddf0:	f88d 3017 	strb.w	r3, [sp, #23]
    ddf4:	e00d      	b.n	de12 <attcDiscProcDesc+0x76>
    }
    else
    {
      return ATT_ERR_INVALID_RSP;
    ddf6:	2373      	movs	r3, #115	; 0x73
    ddf8:	e040      	b.n	de7c <attcDiscProcDesc+0xe0>

    /* for each handle/UUID pair */
    while (p < pEnd)
    {
      /* process descriptor handle/UUID pair */
      attcDiscProcDescPair(pCb, settings, p);
    ddfa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ddfe:	9a06      	ldr	r2, [sp, #24]
    de00:	4619      	mov	r1, r3
    de02:	9801      	ldr	r0, [sp, #4]
    de04:	f7ff ff68 	bl	dcd8 <attcDiscProcDescPair>

      /* go to next */
      p += pairLen;
    de08:	f89d 3017 	ldrb.w	r3, [sp, #23]
    de0c:	9a06      	ldr	r2, [sp, #24]
    de0e:	4413      	add	r3, r2
    de10:	9306      	str	r3, [sp, #24]
    while (p < pEnd)
    de12:	9a06      	ldr	r2, [sp, #24]
    de14:	9b04      	ldr	r3, [sp, #16]
    de16:	429a      	cmp	r2, r3
    de18:	d3ef      	bcc.n	ddfa <attcDiscProcDesc+0x5e>
    }
  }

  /* if descriptor discovery complete for this characteristic */
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
    de1a:	9b00      	ldr	r3, [sp, #0]
    de1c:	78db      	ldrb	r3, [r3, #3]
    de1e:	2b00      	cmp	r3, #0
    de20:	d103      	bne.n	de2a <attcDiscProcDesc+0x8e>
    de22:	9b00      	ldr	r3, [sp, #0]
    de24:	7b1b      	ldrb	r3, [r3, #12]
    de26:	2b00      	cmp	r3, #0
    de28:	d127      	bne.n	de7a <attcDiscProcDesc+0xde>
  {
    /* go to next entry in list */
    pChar = &pCb->pCharList[pCb->charListIdx];
    de2a:	9b01      	ldr	r3, [sp, #4]
    de2c:	681a      	ldr	r2, [r3, #0]
    de2e:	9b01      	ldr	r3, [sp, #4]
    de30:	7c9b      	ldrb	r3, [r3, #18]
    de32:	009b      	lsls	r3, r3, #2
    de34:	4413      	add	r3, r2
    de36:	9307      	str	r3, [sp, #28]
    do
    {
      /* check if at end of list */
      pCb->charListIdx++;
    de38:	9b01      	ldr	r3, [sp, #4]
    de3a:	7c9b      	ldrb	r3, [r3, #18]
    de3c:	3301      	adds	r3, #1
    de3e:	b2da      	uxtb	r2, r3
    de40:	9b01      	ldr	r3, [sp, #4]
    de42:	749a      	strb	r2, [r3, #18]
      if (pCb->charListIdx == pCb->charListLen)
    de44:	9b01      	ldr	r3, [sp, #4]
    de46:	7c9a      	ldrb	r2, [r3, #18]
    de48:	9b01      	ldr	r3, [sp, #4]
    de4a:	7b1b      	ldrb	r3, [r3, #12]
    de4c:	429a      	cmp	r2, r3
    de4e:	d00a      	beq.n	de66 <attcDiscProcDesc+0xca>
      {
        break;
      }

      /* skip over descriptors that follow current characteristic */
      pChar++;
    de50:	9b07      	ldr	r3, [sp, #28]
    de52:	3304      	adds	r3, #4
    de54:	9307      	str	r3, [sp, #28]
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
    de56:	9b07      	ldr	r3, [sp, #28]
    de58:	681b      	ldr	r3, [r3, #0]
    de5a:	791b      	ldrb	r3, [r3, #4]
    de5c:	f003 0304 	and.w	r3, r3, #4
    de60:	2b00      	cmp	r3, #0
    de62:	d1e9      	bne.n	de38 <attcDiscProcDesc+0x9c>
    de64:	e000      	b.n	de68 <attcDiscProcDesc+0xcc>
        break;
    de66:	bf00      	nop

    /* proceed with descriptor discovery for the next characteristic */
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
    de68:	9b00      	ldr	r3, [sp, #0]
    de6a:	881b      	ldrh	r3, [r3, #0]
    de6c:	b2db      	uxtb	r3, r3
    de6e:	9901      	ldr	r1, [sp, #4]
    de70:	4618      	mov	r0, r3
    de72:	f7ff feaf 	bl	dbd4 <attcDiscDescriptors>
    de76:	4603      	mov	r3, r0
    de78:	e000      	b.n	de7c <attcDiscProcDesc+0xe0>
  }
  else
  {
    /* still more to do */
    return ATT_CONTINUING;
    de7a:	2378      	movs	r3, #120	; 0x78
  }
}
    de7c:	4618      	mov	r0, r3
    de7e:	b009      	add	sp, #36	; 0x24
    de80:	f85d fb04 	ldr.w	pc, [sp], #4

0000de84 <attcDiscProcCharDecl>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static void attcDiscProcCharDecl(attcDiscCb_t *pCb, uint8_t settings, uint8_t *pDecl)
{
    de84:	b500      	push	{lr}
    de86:	b089      	sub	sp, #36	; 0x24
    de88:	9003      	str	r0, [sp, #12]
    de8a:	460b      	mov	r3, r1
    de8c:	9201      	str	r2, [sp, #4]
    de8e:	f88d 300b 	strb.w	r3, [sp, #11]
  uint16_t        hdl;
  uint16_t        declHdl;
  uint8_t         i;

  /* parse it */
  BSTREAM_TO_UINT16(declHdl, pDecl);
    de92:	9b01      	ldr	r3, [sp, #4]
    de94:	781b      	ldrb	r3, [r3, #0]
    de96:	b29a      	uxth	r2, r3
    de98:	9b01      	ldr	r3, [sp, #4]
    de9a:	3301      	adds	r3, #1
    de9c:	781b      	ldrb	r3, [r3, #0]
    de9e:	b29b      	uxth	r3, r3
    dea0:	021b      	lsls	r3, r3, #8
    dea2:	b29b      	uxth	r3, r3
    dea4:	4413      	add	r3, r2
    dea6:	f8ad 3018 	strh.w	r3, [sp, #24]
    deaa:	9b01      	ldr	r3, [sp, #4]
    deac:	3302      	adds	r3, #2
    deae:	9301      	str	r3, [sp, #4]
  pDecl++;    /* skip properties field */
    deb0:	9b01      	ldr	r3, [sp, #4]
    deb2:	3301      	adds	r3, #1
    deb4:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(hdl, pDecl);
    deb6:	9b01      	ldr	r3, [sp, #4]
    deb8:	781b      	ldrb	r3, [r3, #0]
    deba:	b29a      	uxth	r2, r3
    debc:	9b01      	ldr	r3, [sp, #4]
    debe:	3301      	adds	r3, #1
    dec0:	781b      	ldrb	r3, [r3, #0]
    dec2:	b29b      	uxth	r3, r3
    dec4:	021b      	lsls	r3, r3, #8
    dec6:	b29b      	uxth	r3, r3
    dec8:	4413      	add	r3, r2
    deca:	f8ad 3016 	strh.w	r3, [sp, #22]
    dece:	9b01      	ldr	r3, [sp, #4]
    ded0:	3302      	adds	r3, #2
    ded2:	9301      	str	r3, [sp, #4]

  /* if looking for end handle of previous characteristic */
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
    ded4:	9b03      	ldr	r3, [sp, #12]
    ded6:	7cdb      	ldrb	r3, [r3, #19]
    ded8:	2bff      	cmp	r3, #255	; 0xff
    deda:	d00d      	beq.n	def8 <attcDiscProcCharDecl+0x74>
  {
    /* end handle of previous characteristic is one less than
     * the handle of the current characteristic declaration
     */
    pCb->pHdlList[pCb->endHdlIdx] = declHdl - 1;
    dedc:	9b03      	ldr	r3, [sp, #12]
    dede:	685a      	ldr	r2, [r3, #4]
    dee0:	9b03      	ldr	r3, [sp, #12]
    dee2:	7cdb      	ldrb	r3, [r3, #19]
    dee4:	005b      	lsls	r3, r3, #1
    dee6:	4413      	add	r3, r2
    dee8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    deec:	3a01      	subs	r2, #1
    deee:	b292      	uxth	r2, r2
    def0:	801a      	strh	r2, [r3, #0]
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
    def2:	9b03      	ldr	r3, [sp, #12]
    def4:	22ff      	movs	r2, #255	; 0xff
    def6:	74da      	strb	r2, [r3, #19]
  }

  /* check handle */
  if (hdl > declHdl && hdl <= pCb->svcEndHdl)
    def8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    defc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    df00:	429a      	cmp	r2, r3
    df02:	d953      	bls.n	dfac <attcDiscProcCharDecl+0x128>
    df04:	9b03      	ldr	r3, [sp, #12]
    df06:	8a1b      	ldrh	r3, [r3, #16]
    df08:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    df0c:	429a      	cmp	r2, r3
    df0e:	d84d      	bhi.n	dfac <attcDiscProcCharDecl+0x128>
  {
    /* now pDecl points to UUID; search for UUID in characteristic list */
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    df10:	2300      	movs	r3, #0
    df12:	f88d 301b 	strb.w	r3, [sp, #27]
    df16:	9b03      	ldr	r3, [sp, #12]
    df18:	681b      	ldr	r3, [r3, #0]
    df1a:	9307      	str	r3, [sp, #28]
    df1c:	e03f      	b.n	df9e <attcDiscProcCharDecl+0x11a>
    {
      /* if characteristic not already found */
      if (pCb->pHdlList[i] == 0)
    df1e:	9b03      	ldr	r3, [sp, #12]
    df20:	685a      	ldr	r2, [r3, #4]
    df22:	f89d 301b 	ldrb.w	r3, [sp, #27]
    df26:	005b      	lsls	r3, r3, #1
    df28:	4413      	add	r3, r2
    df2a:	881b      	ldrh	r3, [r3, #0]
    df2c:	2b00      	cmp	r3, #0
    df2e:	d12e      	bne.n	df8e <attcDiscProcCharDecl+0x10a>
      {
        /* if UUIDs match */
        if (attcUuidCmp(*pChar, pDecl, settings))
    df30:	9b07      	ldr	r3, [sp, #28]
    df32:	681b      	ldr	r3, [r3, #0]
    df34:	f89d 200b 	ldrb.w	r2, [sp, #11]
    df38:	9901      	ldr	r1, [sp, #4]
    df3a:	4618      	mov	r0, r3
    df3c:	f7ff fde3 	bl	db06 <attcUuidCmp>
    df40:	4603      	mov	r3, r0
    df42:	2b00      	cmp	r3, #0
    df44:	d023      	beq.n	df8e <attcDiscProcCharDecl+0x10a>
        {
          /* match found; store handle */
          pCb->pHdlList[i] = hdl;
    df46:	9b03      	ldr	r3, [sp, #12]
    df48:	685a      	ldr	r2, [r3, #4]
    df4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    df4e:	005b      	lsls	r3, r3, #1
    df50:	4413      	add	r3, r2
    df52:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    df56:	801a      	strh	r2, [r3, #0]

          /* if not at end of list and next in list is a descriptor */
          if (i < (pCb->charListLen - 1) &&
    df58:	f89d 201b 	ldrb.w	r2, [sp, #27]
    df5c:	9b03      	ldr	r3, [sp, #12]
    df5e:	7b1b      	ldrb	r3, [r3, #12]
    df60:	3b01      	subs	r3, #1
    df62:	429a      	cmp	r2, r3
    df64:	da0d      	bge.n	df82 <attcDiscProcCharDecl+0xfe>
              ((*(pChar + 1))->settings & ATTC_SET_DESCRIPTOR) == ATTC_SET_DESCRIPTOR)
    df66:	9b07      	ldr	r3, [sp, #28]
    df68:	3304      	adds	r3, #4
    df6a:	681b      	ldr	r3, [r3, #0]
    df6c:	791b      	ldrb	r3, [r3, #4]
    df6e:	f003 0304 	and.w	r3, r3, #4
          if (i < (pCb->charListLen - 1) &&
    df72:	2b00      	cmp	r3, #0
    df74:	d005      	beq.n	df82 <attcDiscProcCharDecl+0xfe>
          {
            /* characteristic has descriptors, we need to find end handle
             * store end handle temporarily in handle list location
             * for the first descriptor
             */
            pCb->endHdlIdx = i + 1;
    df76:	f89d 301b 	ldrb.w	r3, [sp, #27]
    df7a:	3301      	adds	r3, #1
    df7c:	b2da      	uxtb	r2, r3
    df7e:	9b03      	ldr	r3, [sp, #12]
    df80:	74da      	strb	r2, [r3, #19]
          }

          ATT_TRACE_INFO1("characteristic found handle:0x%x", hdl);
    df82:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    df86:	4619      	mov	r1, r3
    df88:	480e      	ldr	r0, [pc, #56]	; (dfc4 <attcDiscProcCharDecl+0x140>)
    df8a:	f7ff fd5d 	bl	da48 <WsfTrace>
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    df8e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    df92:	3301      	adds	r3, #1
    df94:	f88d 301b 	strb.w	r3, [sp, #27]
    df98:	9b07      	ldr	r3, [sp, #28]
    df9a:	3304      	adds	r3, #4
    df9c:	9307      	str	r3, [sp, #28]
    df9e:	9b03      	ldr	r3, [sp, #12]
    dfa0:	7b1b      	ldrb	r3, [r3, #12]
    dfa2:	f89d 201b 	ldrb.w	r2, [sp, #27]
    dfa6:	429a      	cmp	r2, r3
    dfa8:	d3b9      	bcc.n	df1e <attcDiscProcCharDecl+0x9a>
  if (hdl > declHdl && hdl <= pCb->svcEndHdl)
    dfaa:	e006      	b.n	dfba <attcDiscProcCharDecl+0x136>
    }
  }
  else
  {
    /* invalid handle; skip this declaration */
    ATT_TRACE_WARN1("invalid handle:0x%x", hdl);
    dfac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    dfb0:	4619      	mov	r1, r3
    dfb2:	4805      	ldr	r0, [pc, #20]	; (dfc8 <attcDiscProcCharDecl+0x144>)
    dfb4:	f7ff fd48 	bl	da48 <WsfTrace>
  }
}
    dfb8:	bf00      	nop
    dfba:	bf00      	nop
    dfbc:	b009      	add	sp, #36	; 0x24
    dfbe:	f85d fb04 	ldr.w	pc, [sp], #4
    dfc2:	bf00      	nop
    dfc4:	0002b084 	.word	0x0002b084
    dfc8:	0002b0a8 	.word	0x0002b0a8

0000dfcc <attcDiscProcChar>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscProcChar(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
    dfcc:	b500      	push	{lr}
    dfce:	b087      	sub	sp, #28
    dfd0:	9001      	str	r0, [sp, #4]
    dfd2:	9100      	str	r1, [sp, #0]
  uint8_t     *pEnd;
  uint8_t     pairLen;
  uint8_t     settings;

  /* if read by type successful */
  if (pMsg->hdr.status == ATT_SUCCESS)
    dfd4:	9b00      	ldr	r3, [sp, #0]
    dfd6:	78db      	ldrb	r3, [r3, #3]
    dfd8:	2b00      	cmp	r3, #0
    dfda:	d130      	bne.n	e03e <attcDiscProcChar+0x72>
  {
    p = pMsg->pValue;
    dfdc:	9b00      	ldr	r3, [sp, #0]
    dfde:	685b      	ldr	r3, [r3, #4]
    dfe0:	9305      	str	r3, [sp, #20]
    pEnd = pMsg->pValue + pMsg->valueLen;
    dfe2:	9b00      	ldr	r3, [sp, #0]
    dfe4:	685b      	ldr	r3, [r3, #4]
    dfe6:	9a00      	ldr	r2, [sp, #0]
    dfe8:	8912      	ldrh	r2, [r2, #8]
    dfea:	4413      	add	r3, r2
    dfec:	9303      	str	r3, [sp, #12]

    /* verify attribute-handle pair length and determine UUID length */
    BSTREAM_TO_UINT8(pairLen, p);
    dfee:	9b05      	ldr	r3, [sp, #20]
    dff0:	1c5a      	adds	r2, r3, #1
    dff2:	9205      	str	r2, [sp, #20]
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	f88d 300b 	strb.w	r3, [sp, #11]
    if (pairLen == ATT_READ_RSP_LEN_UUID16)
    dffa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dffe:	2b07      	cmp	r3, #7
    e000:	d103      	bne.n	e00a <attcDiscProcChar+0x3e>
    {
      settings = 0;
    e002:	2300      	movs	r3, #0
    e004:	f88d 3013 	strb.w	r3, [sp, #19]
    e008:	e015      	b.n	e036 <attcDiscProcChar+0x6a>
    }
    else if (pairLen == ATT_READ_RSP_LEN_UUID128)
    e00a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e00e:	2b15      	cmp	r3, #21
    e010:	d103      	bne.n	e01a <attcDiscProcChar+0x4e>
    {
      settings = ATTC_SET_UUID_128;
    e012:	2301      	movs	r3, #1
    e014:	f88d 3013 	strb.w	r3, [sp, #19]
    e018:	e00d      	b.n	e036 <attcDiscProcChar+0x6a>
    }
    else
    {
      return ATT_ERR_INVALID_RSP;
    e01a:	2373      	movs	r3, #115	; 0x73
    e01c:	e031      	b.n	e082 <attcDiscProcChar+0xb6>

    /* for each characteristic declaration */
    while (p < pEnd)
    {
      /* process characteristic declaration */
      attcDiscProcCharDecl(pCb, settings, p);
    e01e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e022:	9a05      	ldr	r2, [sp, #20]
    e024:	4619      	mov	r1, r3
    e026:	9801      	ldr	r0, [sp, #4]
    e028:	f7ff ff2c 	bl	de84 <attcDiscProcCharDecl>

      /* go to next */
      p += pairLen;
    e02c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e030:	9a05      	ldr	r2, [sp, #20]
    e032:	4413      	add	r3, r2
    e034:	9305      	str	r3, [sp, #20]
    while (p < pEnd)
    e036:	9a05      	ldr	r2, [sp, #20]
    e038:	9b03      	ldr	r3, [sp, #12]
    e03a:	429a      	cmp	r2, r3
    e03c:	d3ef      	bcc.n	e01e <attcDiscProcChar+0x52>
    }
  }

  /* if characteristic discovery complete */
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
    e03e:	9b00      	ldr	r3, [sp, #0]
    e040:	78db      	ldrb	r3, [r3, #3]
    e042:	2b00      	cmp	r3, #0
    e044:	d103      	bne.n	e04e <attcDiscProcChar+0x82>
    e046:	9b00      	ldr	r3, [sp, #0]
    e048:	7b1b      	ldrb	r3, [r3, #12]
    e04a:	2b00      	cmp	r3, #0
    e04c:	d118      	bne.n	e080 <attcDiscProcChar+0xb4>
  {
    /* check if characteristic end handle needs to be set */
    if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
    e04e:	9b01      	ldr	r3, [sp, #4]
    e050:	7cdb      	ldrb	r3, [r3, #19]
    e052:	2bff      	cmp	r3, #255	; 0xff
    e054:	d008      	beq.n	e068 <attcDiscProcChar+0x9c>
    {
      /* end handle of characteristic declaration is end handle of service */
      pCb->pHdlList[pCb->endHdlIdx] = pCb->svcEndHdl;
    e056:	9b01      	ldr	r3, [sp, #4]
    e058:	685a      	ldr	r2, [r3, #4]
    e05a:	9b01      	ldr	r3, [sp, #4]
    e05c:	7cdb      	ldrb	r3, [r3, #19]
    e05e:	005b      	lsls	r3, r3, #1
    e060:	4413      	add	r3, r2
    e062:	9a01      	ldr	r2, [sp, #4]
    e064:	8a12      	ldrh	r2, [r2, #16]
    e066:	801a      	strh	r2, [r3, #0]
    }

    /* proceed with descriptor discovery */
    pCb->charListIdx = 0;
    e068:	9b01      	ldr	r3, [sp, #4]
    e06a:	2200      	movs	r2, #0
    e06c:	749a      	strb	r2, [r3, #18]
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
    e06e:	9b00      	ldr	r3, [sp, #0]
    e070:	881b      	ldrh	r3, [r3, #0]
    e072:	b2db      	uxtb	r3, r3
    e074:	9901      	ldr	r1, [sp, #4]
    e076:	4618      	mov	r0, r3
    e078:	f7ff fdac 	bl	dbd4 <attcDiscDescriptors>
    e07c:	4603      	mov	r3, r0
    e07e:	e000      	b.n	e082 <attcDiscProcChar+0xb6>
  }
  else
  {
    /* still more to do */
    return ATT_CONTINUING;
    e080:	2378      	movs	r3, #120	; 0x78
  }
}
    e082:	4618      	mov	r0, r3
    e084:	b007      	add	sp, #28
    e086:	f85d fb04 	ldr.w	pc, [sp], #4

0000e08a <attcDiscConfigNext>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
static uint8_t attcDiscConfigNext(dmConnId_t connId, attcDiscCb_t *pCb)
{
    e08a:	b500      	push	{lr}
    e08c:	b085      	sub	sp, #20
    e08e:	4603      	mov	r3, r0
    e090:	9100      	str	r1, [sp, #0]
    e092:	f88d 3007 	strb.w	r3, [sp, #7]
  attcDiscCfg_t *pCfg;

  pCfg = pCb->pCfgList + pCb->charListIdx;
    e096:	9b00      	ldr	r3, [sp, #0]
    e098:	689a      	ldr	r2, [r3, #8]
    e09a:	9b00      	ldr	r3, [sp, #0]
    e09c:	7c9b      	ldrb	r3, [r3, #18]
    e09e:	00db      	lsls	r3, r3, #3
    e0a0:	4413      	add	r3, r2
    e0a2:	9303      	str	r3, [sp, #12]

  /* iterate over list */
  while (pCb->charListIdx < pCb->cfgListLen)
    e0a4:	e035      	b.n	e112 <attcDiscConfigNext+0x88>
  {
    /* if handle was discovered */
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    e0a6:	9b00      	ldr	r3, [sp, #0]
    e0a8:	685a      	ldr	r2, [r3, #4]
    e0aa:	9b03      	ldr	r3, [sp, #12]
    e0ac:	795b      	ldrb	r3, [r3, #5]
    e0ae:	005b      	lsls	r3, r3, #1
    e0b0:	4413      	add	r3, r2
    e0b2:	881b      	ldrh	r3, [r3, #0]
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d023      	beq.n	e100 <attcDiscConfigNext+0x76>
    {
      /* if value present do write req */
      if (pCfg->valueLen != 0)
    e0b8:	9b03      	ldr	r3, [sp, #12]
    e0ba:	791b      	ldrb	r3, [r3, #4]
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d010      	beq.n	e0e2 <attcDiscConfigNext+0x58>
      {
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
    e0c0:	9b00      	ldr	r3, [sp, #0]
    e0c2:	685a      	ldr	r2, [r3, #4]
    e0c4:	9b03      	ldr	r3, [sp, #12]
    e0c6:	795b      	ldrb	r3, [r3, #5]
    e0c8:	005b      	lsls	r3, r3, #1
    e0ca:	4413      	add	r3, r2
    e0cc:	8819      	ldrh	r1, [r3, #0]
    e0ce:	9b03      	ldr	r3, [sp, #12]
    e0d0:	791b      	ldrb	r3, [r3, #4]
    e0d2:	b29a      	uxth	r2, r3
    e0d4:	9b03      	ldr	r3, [sp, #12]
    e0d6:	681b      	ldr	r3, [r3, #0]
    e0d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    e0dc:	f001 f967 	bl	f3ae <AttcWriteReq>
    e0e0:	e00c      	b.n	e0fc <attcDiscConfigNext+0x72>
      }
      /* else do read */
      else
      {
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
    e0e2:	9b00      	ldr	r3, [sp, #0]
    e0e4:	685a      	ldr	r2, [r3, #4]
    e0e6:	9b03      	ldr	r3, [sp, #12]
    e0e8:	795b      	ldrb	r3, [r3, #5]
    e0ea:	005b      	lsls	r3, r3, #1
    e0ec:	4413      	add	r3, r2
    e0ee:	881a      	ldrh	r2, [r3, #0]
    e0f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0f4:	4611      	mov	r1, r2
    e0f6:	4618      	mov	r0, r3
    e0f8:	f001 f920 	bl	f33c <AttcReadReq>
      }

      /* done for now */
      return ATT_CONTINUING;
    e0fc:	2378      	movs	r3, #120	; 0x78
    e0fe:	e00f      	b.n	e120 <attcDiscConfigNext+0x96>
    }

    /* next in list */
    pCb->charListIdx++;
    e100:	9b00      	ldr	r3, [sp, #0]
    e102:	7c9b      	ldrb	r3, [r3, #18]
    e104:	3301      	adds	r3, #1
    e106:	b2da      	uxtb	r2, r3
    e108:	9b00      	ldr	r3, [sp, #0]
    e10a:	749a      	strb	r2, [r3, #18]
    pCfg++;
    e10c:	9b03      	ldr	r3, [sp, #12]
    e10e:	3308      	adds	r3, #8
    e110:	9303      	str	r3, [sp, #12]
  while (pCb->charListIdx < pCb->cfgListLen)
    e112:	9b00      	ldr	r3, [sp, #0]
    e114:	7c9a      	ldrb	r2, [r3, #18]
    e116:	9b00      	ldr	r3, [sp, #0]
    e118:	7b5b      	ldrb	r3, [r3, #13]
    e11a:	429a      	cmp	r2, r3
    e11c:	d3c3      	bcc.n	e0a6 <attcDiscConfigNext+0x1c>
  }

  /* nothing left to configure; we're done */
  return ATT_SUCCESS;
    e11e:	2300      	movs	r3, #0
}
    e120:	4618      	mov	r0, r3
    e122:	b005      	add	sp, #20
    e124:	f85d fb04 	ldr.w	pc, [sp], #4

0000e128 <AttcDiscService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscService(dmConnId_t connId, attcDiscCb_t *pCb, uint8_t uuidLen, uint8_t *pUuid)
{
    e128:	b500      	push	{lr}
    e12a:	b089      	sub	sp, #36	; 0x24
    e12c:	9106      	str	r1, [sp, #24]
    e12e:	9305      	str	r3, [sp, #20]
    e130:	4603      	mov	r3, r0
    e132:	f88d 301f 	strb.w	r3, [sp, #31]
    e136:	4613      	mov	r3, r2
    e138:	f88d 301e 	strb.w	r3, [sp, #30]
  AttcFindByTypeValueReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_UUID_PRIMARY_SERVICE,
    e13c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e140:	b29b      	uxth	r3, r3
    e142:	f89d 001f 	ldrb.w	r0, [sp, #31]
    e146:	2200      	movs	r2, #0
    e148:	9202      	str	r2, [sp, #8]
    e14a:	9a05      	ldr	r2, [sp, #20]
    e14c:	9201      	str	r2, [sp, #4]
    e14e:	9300      	str	r3, [sp, #0]
    e150:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e154:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e158:	2101      	movs	r1, #1
    e15a:	f001 fa8a 	bl	f672 <AttcFindByTypeValueReq>
                         uuidLen, pUuid, FALSE);
}
    e15e:	bf00      	nop
    e160:	b009      	add	sp, #36	; 0x24
    e162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e168 <AttcDiscServiceCmpl>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttcDiscServiceCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
    e168:	b500      	push	{lr}
    e16a:	b085      	sub	sp, #20
    e16c:	9001      	str	r0, [sp, #4]
    e16e:	9100      	str	r1, [sp, #0]
  uint8_t *p;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_FIND_BY_TYPE_VALUE_RSP)
    e170:	9b00      	ldr	r3, [sp, #0]
    e172:	789b      	ldrb	r3, [r3, #2]
    e174:	2b03      	cmp	r3, #3
    e176:	d007      	beq.n	e188 <AttcDiscServiceCmpl+0x20>
  {
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    e178:	9b00      	ldr	r3, [sp, #0]
    e17a:	789b      	ldrb	r3, [r3, #2]
    e17c:	4619      	mov	r1, r3
    e17e:	4821      	ldr	r0, [pc, #132]	; (e204 <AttcDiscServiceCmpl+0x9c>)
    e180:	f7ff fc62 	bl	da48 <WsfTrace>
    return ATT_ERR_UNDEFINED;
    e184:	2375      	movs	r3, #117	; 0x75
    e186:	e039      	b.n	e1fc <AttcDiscServiceCmpl+0x94>
  }
  /* verify status */
  else if (pMsg->hdr.status != ATT_SUCCESS)
    e188:	9b00      	ldr	r3, [sp, #0]
    e18a:	78db      	ldrb	r3, [r3, #3]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d002      	beq.n	e196 <AttcDiscServiceCmpl+0x2e>
  {
    return pMsg->hdr.status;
    e190:	9b00      	ldr	r3, [sp, #0]
    e192:	78db      	ldrb	r3, [r3, #3]
    e194:	e032      	b.n	e1fc <AttcDiscServiceCmpl+0x94>
  }
  /* verify result was found */
  else if (pMsg->valueLen == 0)
    e196:	9b00      	ldr	r3, [sp, #0]
    e198:	891b      	ldrh	r3, [r3, #8]
    e19a:	2b00      	cmp	r3, #0
    e19c:	d101      	bne.n	e1a2 <AttcDiscServiceCmpl+0x3a>
  {
    return ATT_ERR_NOT_FOUND;
    e19e:	230a      	movs	r3, #10
    e1a0:	e02c      	b.n	e1fc <AttcDiscServiceCmpl+0x94>
  }

  /* get handles of first returned service only; ATT has already performed error checking */
  p = pMsg->pValue;
    e1a2:	9b00      	ldr	r3, [sp, #0]
    e1a4:	685b      	ldr	r3, [r3, #4]
    e1a6:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(pCb->svcStartHdl, p);
    e1a8:	9b03      	ldr	r3, [sp, #12]
    e1aa:	781b      	ldrb	r3, [r3, #0]
    e1ac:	b29a      	uxth	r2, r3
    e1ae:	9b03      	ldr	r3, [sp, #12]
    e1b0:	3301      	adds	r3, #1
    e1b2:	781b      	ldrb	r3, [r3, #0]
    e1b4:	b29b      	uxth	r3, r3
    e1b6:	021b      	lsls	r3, r3, #8
    e1b8:	b29b      	uxth	r3, r3
    e1ba:	4413      	add	r3, r2
    e1bc:	b29a      	uxth	r2, r3
    e1be:	9b01      	ldr	r3, [sp, #4]
    e1c0:	81da      	strh	r2, [r3, #14]
    e1c2:	9b03      	ldr	r3, [sp, #12]
    e1c4:	3302      	adds	r3, #2
    e1c6:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
    e1c8:	9b03      	ldr	r3, [sp, #12]
    e1ca:	781b      	ldrb	r3, [r3, #0]
    e1cc:	b29a      	uxth	r2, r3
    e1ce:	9b03      	ldr	r3, [sp, #12]
    e1d0:	3301      	adds	r3, #1
    e1d2:	781b      	ldrb	r3, [r3, #0]
    e1d4:	b29b      	uxth	r3, r3
    e1d6:	021b      	lsls	r3, r3, #8
    e1d8:	b29b      	uxth	r3, r3
    e1da:	4413      	add	r3, r2
    e1dc:	b29a      	uxth	r2, r3
    e1de:	9b01      	ldr	r3, [sp, #4]
    e1e0:	821a      	strh	r2, [r3, #16]
    e1e2:	9b03      	ldr	r3, [sp, #12]
    e1e4:	3302      	adds	r3, #2
    e1e6:	9303      	str	r3, [sp, #12]

  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	89db      	ldrh	r3, [r3, #14]
    e1ec:	4619      	mov	r1, r3
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	8a1b      	ldrh	r3, [r3, #16]
    e1f2:	461a      	mov	r2, r3
    e1f4:	4804      	ldr	r0, [pc, #16]	; (e208 <AttcDiscServiceCmpl+0xa0>)
    e1f6:	f7ff fc27 	bl	da48 <WsfTrace>

  return ATT_SUCCESS;
    e1fa:	2300      	movs	r3, #0
}
    e1fc:	4618      	mov	r0, r3
    e1fe:	b005      	add	sp, #20
    e200:	f85d fb04 	ldr.w	pc, [sp], #4
    e204:	0002b0bc 	.word	0x0002b0bc
    e208:	0002b0dc 	.word	0x0002b0dc

0000e20c <AttcDiscCharStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscCharStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
    e20c:	b500      	push	{lr}
    e20e:	b085      	sub	sp, #20
    e210:	4603      	mov	r3, r0
    e212:	9102      	str	r1, [sp, #8]
    e214:	f88d 300f 	strb.w	r3, [sp, #15]
  /* initialize control block */
  pCb->charListIdx = 0;
    e218:	9b02      	ldr	r3, [sp, #8]
    e21a:	2200      	movs	r2, #0
    e21c:	749a      	strb	r2, [r3, #18]
  pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
    e21e:	9b02      	ldr	r3, [sp, #8]
    e220:	22ff      	movs	r2, #255	; 0xff
    e222:	74da      	strb	r2, [r3, #19]

  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
    e224:	9b02      	ldr	r3, [sp, #8]
    e226:	89d9      	ldrh	r1, [r3, #14]
    e228:	9b02      	ldr	r3, [sp, #8]
    e22a:	8a1a      	ldrh	r2, [r3, #16]
    e22c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e230:	2301      	movs	r3, #1
    e232:	9301      	str	r3, [sp, #4]
    e234:	4b04      	ldr	r3, [pc, #16]	; (e248 <AttcDiscCharStart+0x3c>)
    e236:	9300      	str	r3, [sp, #0]
    e238:	2302      	movs	r3, #2
    e23a:	f001 fa75 	bl	f728 <AttcReadByTypeReq>
                    (uint8_t *) attChUuid, TRUE);
}
    e23e:	bf00      	nop
    e240:	b005      	add	sp, #20
    e242:	f85d fb04 	ldr.w	pc, [sp], #4
    e246:	bf00      	nop
    e248:	0002c21c 	.word	0x0002c21c

0000e24c <AttcDiscCharCmpl>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
uint8_t AttcDiscCharCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
    e24c:	b500      	push	{lr}
    e24e:	b085      	sub	sp, #20
    e250:	9001      	str	r0, [sp, #4]
    e252:	9100      	str	r1, [sp, #0]
  uint8_t status;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
    e254:	9b00      	ldr	r3, [sp, #0]
    e256:	789b      	ldrb	r3, [r3, #2]
    e258:	2b04      	cmp	r3, #4
    e25a:	d00b      	beq.n	e274 <AttcDiscCharCmpl+0x28>
      pMsg->hdr.event != ATTC_FIND_INFO_RSP)
    e25c:	9b00      	ldr	r3, [sp, #0]
    e25e:	789b      	ldrb	r3, [r3, #2]
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
    e260:	2b02      	cmp	r3, #2
    e262:	d007      	beq.n	e274 <AttcDiscCharCmpl+0x28>
  {
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    e264:	9b00      	ldr	r3, [sp, #0]
    e266:	789b      	ldrb	r3, [r3, #2]
    e268:	4619      	mov	r1, r3
    e26a:	4817      	ldr	r0, [pc, #92]	; (e2c8 <AttcDiscCharCmpl+0x7c>)
    e26c:	f7ff fbec 	bl	da48 <WsfTrace>
    return ATT_ERR_UNDEFINED;
    e270:	2375      	movs	r3, #117	; 0x75
    e272:	e025      	b.n	e2c0 <AttcDiscCharCmpl+0x74>
  }

  /* if read by type (characteristic discovery) */
  if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP)
    e274:	9b00      	ldr	r3, [sp, #0]
    e276:	789b      	ldrb	r3, [r3, #2]
    e278:	2b04      	cmp	r3, #4
    e27a:	d107      	bne.n	e28c <AttcDiscCharCmpl+0x40>
  {
    status = attcDiscProcChar(pCb, pMsg);
    e27c:	9900      	ldr	r1, [sp, #0]
    e27e:	9801      	ldr	r0, [sp, #4]
    e280:	f7ff fea4 	bl	dfcc <attcDiscProcChar>
    e284:	4603      	mov	r3, r0
    e286:	f88d 300f 	strb.w	r3, [sp, #15]
    e28a:	e006      	b.n	e29a <AttcDiscCharCmpl+0x4e>
  }
  /* else if find info (descriptor discovery) */
  else
  {
    status = attcDiscProcDesc(pCb, pMsg);
    e28c:	9900      	ldr	r1, [sp, #0]
    e28e:	9801      	ldr	r0, [sp, #4]
    e290:	f7ff fd84 	bl	dd9c <attcDiscProcDesc>
    e294:	4603      	mov	r3, r0
    e296:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  /* if characteristic discovery failed clear any handles */
  if (status != ATT_SUCCESS && status != ATT_CONTINUING)
    e29a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d00c      	beq.n	e2bc <AttcDiscCharCmpl+0x70>
    e2a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e2a6:	2b78      	cmp	r3, #120	; 0x78
    e2a8:	d008      	beq.n	e2bc <AttcDiscCharCmpl+0x70>
  {
    memset(pCb->pHdlList, 0, (pCb->charListLen * sizeof(uint16_t)));
    e2aa:	9b01      	ldr	r3, [sp, #4]
    e2ac:	6858      	ldr	r0, [r3, #4]
    e2ae:	9b01      	ldr	r3, [sp, #4]
    e2b0:	7b1b      	ldrb	r3, [r3, #12]
    e2b2:	005b      	lsls	r3, r3, #1
    e2b4:	461a      	mov	r2, r3
    e2b6:	2100      	movs	r1, #0
    e2b8:	f01a f8c0 	bl	2843c <memset>
  }

  return status;
    e2bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e2c0:	4618      	mov	r0, r3
    e2c2:	b005      	add	sp, #20
    e2c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2c8:	0002b0bc 	.word	0x0002b0bc

0000e2cc <AttcDiscConfigStart>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if nothing to configure.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
    e2cc:	b500      	push	{lr}
    e2ce:	b083      	sub	sp, #12
    e2d0:	4603      	mov	r3, r0
    e2d2:	9100      	str	r1, [sp, #0]
    e2d4:	f88d 3007 	strb.w	r3, [sp, #7]
  /* use char list index to iterate over config list */
  pCb->charListIdx = 0;
    e2d8:	9b00      	ldr	r3, [sp, #0]
    e2da:	2200      	movs	r2, #0
    e2dc:	749a      	strb	r2, [r3, #18]

  return attcDiscConfigNext(connId, pCb);
    e2de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2e2:	9900      	ldr	r1, [sp, #0]
    e2e4:	4618      	mov	r0, r3
    e2e6:	f7ff fed0 	bl	e08a <attcDiscConfigNext>
    e2ea:	4603      	mov	r3, r0
}
    e2ec:	4618      	mov	r0, r3
    e2ee:	b003      	add	sp, #12
    e2f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000e2f4 <AttcDiscConfigCmpl>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigCmpl(dmConnId_t connId, attcDiscCb_t *pCb)
{
    e2f4:	b500      	push	{lr}
    e2f6:	b083      	sub	sp, #12
    e2f8:	4603      	mov	r3, r0
    e2fa:	9100      	str	r1, [sp, #0]
    e2fc:	f88d 3007 	strb.w	r3, [sp, #7]
  /* go to next in list */
  pCb->charListIdx++;
    e300:	9b00      	ldr	r3, [sp, #0]
    e302:	7c9b      	ldrb	r3, [r3, #18]
    e304:	3301      	adds	r3, #1
    e306:	b2da      	uxtb	r2, r3
    e308:	9b00      	ldr	r3, [sp, #0]
    e30a:	749a      	strb	r2, [r3, #18]

  return attcDiscConfigNext(connId, pCb);
    e30c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e310:	9900      	ldr	r1, [sp, #0]
    e312:	4618      	mov	r0, r3
    e314:	f7ff feb9 	bl	e08a <attcDiscConfigNext>
    e318:	4603      	mov	r3, r0
}
    e31a:	4618      	mov	r0, r3
    e31c:	b003      	add	sp, #12
    e31e:	f85d fb04 	ldr.w	pc, [sp], #4

0000e322 <AttcDiscConfigResume>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigResume(dmConnId_t connId, attcDiscCb_t *pCb)
{
    e322:	b500      	push	{lr}
    e324:	b083      	sub	sp, #12
    e326:	4603      	mov	r3, r0
    e328:	9100      	str	r1, [sp, #0]
    e32a:	f88d 3007 	strb.w	r3, [sp, #7]
  return attcDiscConfigNext(connId, pCb);
    e32e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e332:	9900      	ldr	r1, [sp, #0]
    e334:	4618      	mov	r0, r3
    e336:	f7ff fea8 	bl	e08a <attcDiscConfigNext>
    e33a:	4603      	mov	r3, r0
}
    e33c:	4618      	mov	r0, r3
    e33e:	b003      	add	sp, #12
    e340:	f85d fb04 	ldr.w	pc, [sp], #4

0000e344 <attcPendWriteCmd>:
 *  \return TRUE if app callback's pending or maximum number of simultaneous write commands reached.
 *          FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t attcPendWriteCmd(attcCcb_t *pCcb, attcApiMsg_t *pMsg)
{
    e344:	b084      	sub	sp, #16
    e346:	9001      	str	r0, [sp, #4]
    e348:	9100      	str	r1, [sp, #0]
  uint8_t     pendRsp;
  uint8_t     i;

  /* initialize number of response callbacks pending */
  pendRsp = 0;
    e34a:	2300      	movs	r3, #0
    e34c:	f88d 300f 	strb.w	r3, [sp, #15]

  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
    e350:	2300      	movs	r3, #0
    e352:	f88d 300e 	strb.w	r3, [sp, #14]
    e356:	e01f      	b.n	e398 <attcPendWriteCmd+0x54>
  {
    /* if callback pending for write command */
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
    e358:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e35c:	9a01      	ldr	r2, [sp, #4]
    e35e:	3318      	adds	r3, #24
    e360:	005b      	lsls	r3, r3, #1
    e362:	4413      	add	r3, r2
    e364:	88db      	ldrh	r3, [r3, #6]
    e366:	2b00      	cmp	r3, #0
    e368:	d011      	beq.n	e38e <attcPendWriteCmd+0x4a>
    {
      /* if callback pending for this handle */
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
    e36a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e36e:	9a01      	ldr	r2, [sp, #4]
    e370:	3318      	adds	r3, #24
    e372:	005b      	lsls	r3, r3, #1
    e374:	4413      	add	r3, r2
    e376:	88da      	ldrh	r2, [r3, #6]
    e378:	9b00      	ldr	r3, [sp, #0]
    e37a:	891b      	ldrh	r3, [r3, #8]
    e37c:	429a      	cmp	r2, r3
    e37e:	d101      	bne.n	e384 <attcPendWriteCmd+0x40>
      {
        /* callback pending for this write command */
        return TRUE;
    e380:	2301      	movs	r3, #1
    e382:	e014      	b.n	e3ae <attcPendWriteCmd+0x6a>
      }

      pendRsp++;
    e384:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e388:	3301      	adds	r3, #1
    e38a:	f88d 300f 	strb.w	r3, [sp, #15]
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
    e38e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e392:	3301      	adds	r3, #1
    e394:	f88d 300e 	strb.w	r3, [sp, #14]
    e398:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e39c:	2b00      	cmp	r3, #0
    e39e:	d0db      	beq.n	e358 <attcPendWriteCmd+0x14>
    }
  }

  /* no callback is pending for this write command but see if the maximum number of simultaneous
     write commands has been reached */
  return (pendRsp < ATT_NUM_SIMUL_WRITE_CMD) ? FALSE : TRUE;
    e3a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	bf14      	ite	ne
    e3a8:	2301      	movne	r3, #1
    e3aa:	2300      	moveq	r3, #0
    e3ac:	b2db      	uxtb	r3, r3
}
    e3ae:	4618      	mov	r0, r3
    e3b0:	b004      	add	sp, #16
    e3b2:	4770      	bx	lr

0000e3b4 <attcSetPendWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSetPendWriteCmd(attcCcb_t *pCcb)
{
    e3b4:	b084      	sub	sp, #16
    e3b6:	9001      	str	r0, [sp, #4]
  uint8_t     i;

  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
    e3b8:	2300      	movs	r3, #0
    e3ba:	f88d 300f 	strb.w	r3, [sp, #15]
    e3be:	e018      	b.n	e3f2 <attcSetPendWriteCmd+0x3e>
  {
    /* if entry free */
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
    e3c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e3c4:	9a01      	ldr	r2, [sp, #4]
    e3c6:	3318      	adds	r3, #24
    e3c8:	005b      	lsls	r3, r3, #1
    e3ca:	4413      	add	r3, r2
    e3cc:	88db      	ldrh	r3, [r3, #6]
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d10a      	bne.n	e3e8 <attcSetPendWriteCmd+0x34>
    {
      /* set pending write command handle */
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
    e3d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e3d6:	9a01      	ldr	r2, [sp, #4]
    e3d8:	8b11      	ldrh	r1, [r2, #24]
    e3da:	9a01      	ldr	r2, [sp, #4]
    e3dc:	3318      	adds	r3, #24
    e3de:	005b      	lsls	r3, r3, #1
    e3e0:	4413      	add	r3, r2
    e3e2:	460a      	mov	r2, r1
    e3e4:	80da      	strh	r2, [r3, #6]
      break;
    e3e6:	e009      	b.n	e3fc <attcSetPendWriteCmd+0x48>
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
    e3e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e3ec:	3301      	adds	r3, #1
    e3ee:	f88d 300f 	strb.w	r3, [sp, #15]
    e3f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d0e2      	beq.n	e3c0 <attcSetPendWriteCmd+0xc>
    }
  }
}
    e3fa:	bf00      	nop
    e3fc:	bf00      	nop
    e3fe:	b004      	add	sp, #16
    e400:	4770      	bx	lr

0000e402 <attcWriteCmdCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcWriteCmdCallback(dmConnId_t connId, attcCcb_t *pCcb, uint8_t status)
{
    e402:	b500      	push	{lr}
    e404:	b085      	sub	sp, #20
    e406:	4603      	mov	r3, r0
    e408:	9100      	str	r1, [sp, #0]
    e40a:	f88d 3007 	strb.w	r3, [sp, #7]
    e40e:	4613      	mov	r3, r2
    e410:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t     i;

  /* if any pending write command callback */
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
    e414:	2300      	movs	r3, #0
    e416:	f88d 300f 	strb.w	r3, [sp, #15]
    e41a:	e023      	b.n	e464 <attcWriteCmdCallback+0x62>
  {
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
    e41c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e420:	9a00      	ldr	r2, [sp, #0]
    e422:	3318      	adds	r3, #24
    e424:	005b      	lsls	r3, r3, #1
    e426:	4413      	add	r3, r2
    e428:	88db      	ldrh	r3, [r3, #6]
    e42a:	2b00      	cmp	r3, #0
    e42c:	d015      	beq.n	e45a <attcWriteCmdCallback+0x58>
    {
      /* call callback with status */
      attcExecCallback(connId, ATTC_WRITE_CMD_RSP, pCcb->pendWriteCmdHandle[i], status);
    e42e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e432:	9a00      	ldr	r2, [sp, #0]
    e434:	3318      	adds	r3, #24
    e436:	005b      	lsls	r3, r3, #1
    e438:	4413      	add	r3, r2
    e43a:	88da      	ldrh	r2, [r3, #6]
    e43c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e440:	f89d 0007 	ldrb.w	r0, [sp, #7]
    e444:	210a      	movs	r1, #10
    e446:	f000 fbc0 	bl	ebca <attcExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
    e44a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e44e:	9a00      	ldr	r2, [sp, #0]
    e450:	3318      	adds	r3, #24
    e452:	005b      	lsls	r3, r3, #1
    e454:	4413      	add	r3, r2
    e456:	2200      	movs	r2, #0
    e458:	80da      	strh	r2, [r3, #6]
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
    e45a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e45e:	3301      	adds	r3, #1
    e460:	f88d 300f 	strb.w	r3, [sp, #15]
    e464:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e468:	2b00      	cmp	r3, #0
    e46a:	d0d7      	beq.n	e41c <attcWriteCmdCallback+0x1a>
    }
  }
}
    e46c:	bf00      	nop
    e46e:	bf00      	nop
    e470:	b005      	add	sp, #20
    e472:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e478 <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
    e478:	b500      	push	{lr}
    e47a:	b085      	sub	sp, #20
    e47c:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
    e47e:	9b01      	ldr	r3, [sp, #4]
    e480:	695b      	ldr	r3, [r3, #20]
    e482:	9303      	str	r3, [sp, #12]

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;
    e484:	9b01      	ldr	r3, [sp, #4]
    e486:	2200      	movs	r2, #0
    e488:	615a      	str	r2, [r3, #20]

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    e48a:	9b01      	ldr	r3, [sp, #4]
    e48c:	7c9b      	ldrb	r3, [r3, #18]
    e48e:	2b0a      	cmp	r3, #10
    e490:	d00d      	beq.n	e4ae <attcSendSimpleReq+0x36>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    e492:	9b01      	ldr	r3, [sp, #4]
    e494:	2210      	movs	r2, #16
    e496:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    e49a:	9b01      	ldr	r3, [sp, #4]
    e49c:	f103 0224 	add.w	r2, r3, #36	; 0x24
    e4a0:	4b09      	ldr	r3, [pc, #36]	; (e4c8 <attcSendSimpleReq+0x50>)
    e4a2:	681b      	ldr	r3, [r3, #0]
    e4a4:	799b      	ldrb	r3, [r3, #6]
    e4a6:	4619      	mov	r1, r3
    e4a8:	4610      	mov	r0, r2
    e4aa:	f7ff f9e5 	bl	d878 <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    e4ae:	9b01      	ldr	r3, [sp, #4]
    e4b0:	681b      	ldr	r3, [r3, #0]
    e4b2:	8b19      	ldrh	r1, [r3, #24]
    e4b4:	9b03      	ldr	r3, [sp, #12]
    e4b6:	881a      	ldrh	r2, [r3, #0]
    e4b8:	9b03      	ldr	r3, [sp, #12]
    e4ba:	2004      	movs	r0, #4
    e4bc:	f7fe f8f8 	bl	c6b0 <L2cDataReq>
}
    e4c0:	bf00      	nop
    e4c2:	b005      	add	sp, #20
    e4c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4c8:	10002bcc 	.word	0x10002bcc

0000e4cc <attcSendContinuingReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendContinuingReq(attcCcb_t *pCcb)
{
    e4cc:	b500      	push	{lr}
    e4ce:	b085      	sub	sp, #20
    e4d0:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    e4d2:	9b01      	ldr	r3, [sp, #4]
    e4d4:	7cdb      	ldrb	r3, [r3, #19]
    e4d6:	2b01      	cmp	r3, #1
    e4d8:	d11e      	bne.n	e518 <attcSendContinuingReq+0x4c>
  {
    /* allocate new buffer */
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
    e4da:	9b01      	ldr	r3, [sp, #4]
    e4dc:	695b      	ldr	r3, [r3, #20]
    e4de:	881b      	ldrh	r3, [r3, #0]
    e4e0:	3308      	adds	r3, #8
    e4e2:	b29b      	uxth	r3, r3
    e4e4:	4618      	mov	r0, r3
    e4e6:	f004 fdfd 	bl	130e4 <attMsgAlloc>
    e4ea:	9003      	str	r0, [sp, #12]
    e4ec:	9b03      	ldr	r3, [sp, #12]
    e4ee:	2b00      	cmp	r3, #0
    e4f0:	d00a      	beq.n	e508 <attcSendContinuingReq+0x3c>
    {
      /* copy stored packet to new */
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
    e4f2:	9b01      	ldr	r3, [sp, #4]
    e4f4:	6959      	ldr	r1, [r3, #20]
    e4f6:	9b01      	ldr	r3, [sp, #4]
    e4f8:	695b      	ldr	r3, [r3, #20]
    e4fa:	881b      	ldrh	r3, [r3, #0]
    e4fc:	3308      	adds	r3, #8
    e4fe:	461a      	mov	r2, r3
    e500:	9803      	ldr	r0, [sp, #12]
    e502:	f7fd fdfd 	bl	c100 <memcpy>
    e506:	e00d      	b.n	e524 <attcSendContinuingReq+0x58>
    }
    /* else handle error case of allocation failure */
    else
    {
      /* free stored packet and call callback with failure status */
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_MEMORY);
    e508:	9b01      	ldr	r3, [sp, #4]
    e50a:	3310      	adds	r3, #16
    e50c:	2270      	movs	r2, #112	; 0x70
    e50e:	4619      	mov	r1, r3
    e510:	9801      	ldr	r0, [sp, #4]
    e512:	f000 fb7f 	bl	ec14 <attcReqClear>
      return;
    e516:	e057      	b.n	e5c8 <attcSendContinuingReq+0xfc>
  }
  /* else not continuing */
  else
  {
    /* send the stored packet */
    pPkt = pCcb->outReq.pPkt;
    e518:	9b01      	ldr	r3, [sp, #4]
    e51a:	695b      	ldr	r3, [r3, #20]
    e51c:	9303      	str	r3, [sp, #12]

    /* clear stored packet pointer */
    pCcb->outReq.pPkt = NULL;
    e51e:	9b01      	ldr	r3, [sp, #4]
    e520:	2200      	movs	r2, #0
    e522:	615a      	str	r2, [r3, #20]
  }

  /* build remaining fields of packet from stored parameters */
  p = (uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_HDR_LEN;
    e524:	9b03      	ldr	r3, [sp, #12]
    e526:	3309      	adds	r3, #9
    e528:	9302      	str	r3, [sp, #8]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
    e52a:	9b01      	ldr	r3, [sp, #4]
    e52c:	7c9b      	ldrb	r3, [r3, #18]
    e52e:	2b06      	cmp	r3, #6
    e530:	d113      	bne.n	e55a <attcSendContinuingReq+0x8e>
  {
    /* build offset field */
    p += sizeof(uint16_t);
    e532:	9b02      	ldr	r3, [sp, #8]
    e534:	3302      	adds	r3, #2
    e536:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
    e538:	9b01      	ldr	r3, [sp, #4]
    e53a:	8bd9      	ldrh	r1, [r3, #30]
    e53c:	9b02      	ldr	r3, [sp, #8]
    e53e:	1c5a      	adds	r2, r3, #1
    e540:	9202      	str	r2, [sp, #8]
    e542:	b2ca      	uxtb	r2, r1
    e544:	701a      	strb	r2, [r3, #0]
    e546:	9b01      	ldr	r3, [sp, #4]
    e548:	8bdb      	ldrh	r3, [r3, #30]
    e54a:	0a1b      	lsrs	r3, r3, #8
    e54c:	b299      	uxth	r1, r3
    e54e:	9b02      	ldr	r3, [sp, #8]
    e550:	1c5a      	adds	r2, r3, #1
    e552:	9202      	str	r2, [sp, #8]
    e554:	b2ca      	uxtb	r2, r1
    e556:	701a      	strb	r2, [r3, #0]
    e558:	e01f      	b.n	e59a <attcSendContinuingReq+0xce>
  {
    /*
     * Find Info, Find By Type Value, Read By Type, and Read By Group Type
     * request packets all begin with a start handle and end handle.
     */
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
    e55a:	9b01      	ldr	r3, [sp, #4]
    e55c:	8bd9      	ldrh	r1, [r3, #30]
    e55e:	9b02      	ldr	r3, [sp, #8]
    e560:	1c5a      	adds	r2, r3, #1
    e562:	9202      	str	r2, [sp, #8]
    e564:	b2ca      	uxtb	r2, r1
    e566:	701a      	strb	r2, [r3, #0]
    e568:	9b01      	ldr	r3, [sp, #4]
    e56a:	8bdb      	ldrh	r3, [r3, #30]
    e56c:	0a1b      	lsrs	r3, r3, #8
    e56e:	b299      	uxth	r1, r3
    e570:	9b02      	ldr	r3, [sp, #8]
    e572:	1c5a      	adds	r2, r3, #1
    e574:	9202      	str	r2, [sp, #8]
    e576:	b2ca      	uxtb	r2, r1
    e578:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
    e57a:	9b01      	ldr	r3, [sp, #4]
    e57c:	8c19      	ldrh	r1, [r3, #32]
    e57e:	9b02      	ldr	r3, [sp, #8]
    e580:	1c5a      	adds	r2, r3, #1
    e582:	9202      	str	r2, [sp, #8]
    e584:	b2ca      	uxtb	r2, r1
    e586:	701a      	strb	r2, [r3, #0]
    e588:	9b01      	ldr	r3, [sp, #4]
    e58a:	8c1b      	ldrh	r3, [r3, #32]
    e58c:	0a1b      	lsrs	r3, r3, #8
    e58e:	b299      	uxth	r1, r3
    e590:	9b02      	ldr	r3, [sp, #8]
    e592:	1c5a      	adds	r2, r3, #1
    e594:	9202      	str	r2, [sp, #8]
    e596:	b2ca      	uxtb	r2, r1
    e598:	701a      	strb	r2, [r3, #0]
  }

  /* start request timer */
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    e59a:	9b01      	ldr	r3, [sp, #4]
    e59c:	2210      	movs	r2, #16
    e59e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    e5a2:	9b01      	ldr	r3, [sp, #4]
    e5a4:	f103 0224 	add.w	r2, r3, #36	; 0x24
    e5a8:	4b09      	ldr	r3, [pc, #36]	; (e5d0 <attcSendContinuingReq+0x104>)
    e5aa:	681b      	ldr	r3, [r3, #0]
    e5ac:	799b      	ldrb	r3, [r3, #6]
    e5ae:	4619      	mov	r1, r3
    e5b0:	4610      	mov	r0, r2
    e5b2:	f7ff f961 	bl	d878 <WsfTimerStartSec>

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    e5b6:	9b01      	ldr	r3, [sp, #4]
    e5b8:	681b      	ldr	r3, [r3, #0]
    e5ba:	8b19      	ldrh	r1, [r3, #24]
    e5bc:	9b03      	ldr	r3, [sp, #12]
    e5be:	881a      	ldrh	r2, [r3, #0]
    e5c0:	9b03      	ldr	r3, [sp, #12]
    e5c2:	2004      	movs	r0, #4
    e5c4:	f7fe f874 	bl	c6b0 <L2cDataReq>
}
    e5c8:	b005      	add	sp, #20
    e5ca:	f85d fb04 	ldr.w	pc, [sp], #4
    e5ce:	bf00      	nop
    e5d0:	10002bcc 	.word	0x10002bcc

0000e5d4 <attcSendMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendMtuReq(attcCcb_t *pCcb)
{
    e5d4:	b500      	push	{lr}
    e5d6:	b083      	sub	sp, #12
    e5d8:	9001      	str	r0, [sp, #4]
  /* if MTU already exchanged */
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
    e5da:	9b01      	ldr	r3, [sp, #4]
    e5dc:	681b      	ldr	r3, [r3, #0]
    e5de:	7f5b      	ldrb	r3, [r3, #29]
    e5e0:	f003 0301 	and.w	r3, r3, #1
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	d00b      	beq.n	e600 <attcSendMtuReq+0x2c>
  {
    /* discard request */
    attcFreePkt(&pCcb->outReq);
    e5e8:	9b01      	ldr	r3, [sp, #4]
    e5ea:	3310      	adds	r3, #16
    e5ec:	4618      	mov	r0, r3
    e5ee:	f000 fad9 	bl	eba4 <attcFreePkt>

    /* clear out req */
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    e5f2:	9b01      	ldr	r3, [sp, #4]
    e5f4:	2200      	movs	r2, #0
    e5f6:	749a      	strb	r2, [r3, #18]

    ATT_TRACE_WARN0("MTU req discarded");
    e5f8:	4809      	ldr	r0, [pc, #36]	; (e620 <attcSendMtuReq+0x4c>)
    e5fa:	f7ff fa25 	bl	da48 <WsfTrace>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;

    /* send packet */
    attcSendSimpleReq(pCcb);
  }
}
    e5fe:	e00b      	b.n	e618 <attcSendMtuReq+0x44>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
    e600:	9b01      	ldr	r3, [sp, #4]
    e602:	681b      	ldr	r3, [r3, #0]
    e604:	7f5a      	ldrb	r2, [r3, #29]
    e606:	9b01      	ldr	r3, [sp, #4]
    e608:	681b      	ldr	r3, [r3, #0]
    e60a:	f042 0201 	orr.w	r2, r2, #1
    e60e:	b2d2      	uxtb	r2, r2
    e610:	775a      	strb	r2, [r3, #29]
    attcSendSimpleReq(pCcb);
    e612:	9801      	ldr	r0, [sp, #4]
    e614:	f7ff ff30 	bl	e478 <attcSendSimpleReq>
}
    e618:	bf00      	nop
    e61a:	b003      	add	sp, #12
    e61c:	f85d fb04 	ldr.w	pc, [sp], #4
    e620:	0002b104 	.word	0x0002b104

0000e624 <attcSendWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendWriteCmd(attcCcb_t *pCcb)
{
    e624:	b500      	push	{lr}
    e626:	b083      	sub	sp, #12
    e628:	9001      	str	r0, [sp, #4]
  /* send packet */
  attcSendSimpleReq(pCcb);
    e62a:	9801      	ldr	r0, [sp, #4]
    e62c:	f7ff ff24 	bl	e478 <attcSendSimpleReq>

  /* if flow not disabled */
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
    e630:	9b01      	ldr	r3, [sp, #4]
    e632:	681b      	ldr	r3, [r3, #0]
    e634:	7f5b      	ldrb	r3, [r3, #29]
    e636:	f003 0302 	and.w	r3, r3, #2
    e63a:	2b00      	cmp	r3, #0
    e63c:	d109      	bne.n	e652 <attcSendWriteCmd+0x2e>
  {
    /* call callback */
    attcExecCallback(pCcb->pMainCcb->connId, ATTC_WRITE_CMD_RSP, pCcb->outReq.handle, ATT_SUCCESS);
    e63e:	9b01      	ldr	r3, [sp, #4]
    e640:	681b      	ldr	r3, [r3, #0]
    e642:	7f18      	ldrb	r0, [r3, #28]
    e644:	9b01      	ldr	r3, [sp, #4]
    e646:	8b1a      	ldrh	r2, [r3, #24]
    e648:	2300      	movs	r3, #0
    e64a:	210a      	movs	r1, #10
    e64c:	f000 fabd 	bl	ebca <attcExecCallback>
    e650:	e002      	b.n	e658 <attcSendWriteCmd+0x34>
  }
  else
  {
    /* set pending write command callback for this handle */
    attcSetPendWriteCmd(pCcb);
    e652:	9801      	ldr	r0, [sp, #4]
    e654:	f7ff feae 	bl	e3b4 <attcSetPendWriteCmd>
  }

  /* clear out req */
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    e658:	9b01      	ldr	r3, [sp, #4]
    e65a:	2200      	movs	r2, #0
    e65c:	749a      	strb	r2, [r3, #18]
}
    e65e:	bf00      	nop
    e660:	b003      	add	sp, #12
    e662:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e668 <attcSendPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendPrepWriteReq(attcCcb_t *pCcb)
{
    e668:	b500      	push	{lr}
    e66a:	b087      	sub	sp, #28
    e66c:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt;
  uint8_t         *p;
  uint16_t        dataLen;

  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    e66e:	9b01      	ldr	r3, [sp, #4]
    e670:	7cdb      	ldrb	r3, [r3, #19]
    e672:	2b01      	cmp	r3, #1
    e674:	d147      	bne.n	e706 <attcSendPrepWriteReq+0x9e>
  {
    /* determine size of buffer to allocate */
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
    e676:	9b01      	ldr	r3, [sp, #4]
    e678:	8b9b      	ldrh	r3, [r3, #28]
    e67a:	461a      	mov	r2, r3
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	681b      	ldr	r3, [r3, #0]
    e680:	8b5b      	ldrh	r3, [r3, #26]
    e682:	3b05      	subs	r3, #5
    e684:	429a      	cmp	r2, r3
    e686:	da04      	bge.n	e692 <attcSendPrepWriteReq+0x2a>
    {
      dataLen = pCcb->outReqParams.w.len;
    e688:	9b01      	ldr	r3, [sp, #4]
    e68a:	8b9b      	ldrh	r3, [r3, #28]
    e68c:	f8ad 3012 	strh.w	r3, [sp, #18]
    e690:	e005      	b.n	e69e <attcSendPrepWriteReq+0x36>
    }
    else
    {
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
    e692:	9b01      	ldr	r3, [sp, #4]
    e694:	681b      	ldr	r3, [r3, #0]
    e696:	8b5b      	ldrh	r3, [r3, #26]
    e698:	3b05      	subs	r3, #5
    e69a:	f8ad 3012 	strh.w	r3, [sp, #18]
    }

    /* allocate new buffer */
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
    e69e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e6a2:	330d      	adds	r3, #13
    e6a4:	b29b      	uxth	r3, r3
    e6a6:	4618      	mov	r0, r3
    e6a8:	f004 fd1c 	bl	130e4 <attMsgAlloc>
    e6ac:	9005      	str	r0, [sp, #20]
    e6ae:	9b05      	ldr	r3, [sp, #20]
    e6b0:	2b00      	cmp	r3, #0
    e6b2:	d020      	beq.n	e6f6 <attcSendPrepWriteReq+0x8e>
    {
      /* copy fixed fields */
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
    e6b4:	9b01      	ldr	r3, [sp, #4]
    e6b6:	695b      	ldr	r3, [r3, #20]
    e6b8:	220d      	movs	r2, #13
    e6ba:	4619      	mov	r1, r3
    e6bc:	9805      	ldr	r0, [sp, #20]
    e6be:	f7fd fd1f 	bl	c100 <memcpy>

      /* copy data */
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
    e6c2:	9b05      	ldr	r3, [sp, #20]
    e6c4:	f103 000d 	add.w	r0, r3, #13
             pCcb->outReqParams.w.pValue, dataLen);
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	6a1b      	ldr	r3, [r3, #32]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
    e6cc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e6d0:	4619      	mov	r1, r3
    e6d2:	f7fd fd15 	bl	c100 <memcpy>

      /* update length and data pointer */
      pCcb->outReqParams.w.pValue += dataLen;
    e6d6:	9b01      	ldr	r3, [sp, #4]
    e6d8:	6a1a      	ldr	r2, [r3, #32]
    e6da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e6de:	441a      	add	r2, r3
    e6e0:	9b01      	ldr	r3, [sp, #4]
    e6e2:	621a      	str	r2, [r3, #32]
      pCcb->outReqParams.w.len -= dataLen;
    e6e4:	9b01      	ldr	r3, [sp, #4]
    e6e6:	8b9a      	ldrh	r2, [r3, #28]
    e6e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e6ec:	1ad3      	subs	r3, r2, r3
    e6ee:	b29a      	uxth	r2, r3
    e6f0:	9b01      	ldr	r3, [sp, #4]
    e6f2:	839a      	strh	r2, [r3, #28]
    e6f4:	e011      	b.n	e71a <attcSendPrepWriteReq+0xb2>
    }
    /* else handle error case of allocation failure */
    else
    {
      /* free stored packet and call callback with failure status */
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_MEMORY);
    e6f6:	9b01      	ldr	r3, [sp, #4]
    e6f8:	3310      	adds	r3, #16
    e6fa:	2270      	movs	r2, #112	; 0x70
    e6fc:	4619      	mov	r1, r3
    e6fe:	9801      	ldr	r0, [sp, #4]
    e700:	f000 fa88 	bl	ec14 <attcReqClear>
      return;
    e704:	e03d      	b.n	e782 <attcSendPrepWriteReq+0x11a>
    }
  }
  /* else not continuing */
  else
  {
    dataLen = pCcb->outReqParams.w.len;
    e706:	9b01      	ldr	r3, [sp, #4]
    e708:	8b9b      	ldrh	r3, [r3, #28]
    e70a:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* send the stored packet */
    pPkt = pCcb->outReq.pPkt;
    e70e:	9b01      	ldr	r3, [sp, #4]
    e710:	695b      	ldr	r3, [r3, #20]
    e712:	9305      	str	r3, [sp, #20]

    /* clear stored packet pointer */
    pCcb->outReq.pPkt = NULL;
    e714:	9b01      	ldr	r3, [sp, #4]
    e716:	2200      	movs	r2, #0
    e718:	615a      	str	r2, [r3, #20]
  }

  /* build remaining fields of packet from stored parameters */
  p = (uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_HDR_LEN + sizeof(uint16_t);
    e71a:	9b05      	ldr	r3, [sp, #20]
    e71c:	330b      	adds	r3, #11
    e71e:	9303      	str	r3, [sp, #12]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
    e720:	9b01      	ldr	r3, [sp, #4]
    e722:	8bd9      	ldrh	r1, [r3, #30]
    e724:	9b03      	ldr	r3, [sp, #12]
    e726:	1c5a      	adds	r2, r3, #1
    e728:	9203      	str	r2, [sp, #12]
    e72a:	b2ca      	uxtb	r2, r1
    e72c:	701a      	strb	r2, [r3, #0]
    e72e:	9b01      	ldr	r3, [sp, #4]
    e730:	8bdb      	ldrh	r3, [r3, #30]
    e732:	0a1b      	lsrs	r3, r3, #8
    e734:	b299      	uxth	r1, r3
    e736:	9b03      	ldr	r3, [sp, #12]
    e738:	1c5a      	adds	r2, r3, #1
    e73a:	9203      	str	r2, [sp, #12]
    e73c:	b2ca      	uxtb	r2, r1
    e73e:	701a      	strb	r2, [r3, #0]

  /* update offset after building packet */
  pCcb->outReqParams.w.offset += dataLen;
    e740:	9b01      	ldr	r3, [sp, #4]
    e742:	8bda      	ldrh	r2, [r3, #30]
    e744:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e748:	4413      	add	r3, r2
    e74a:	b29a      	uxth	r2, r3
    e74c:	9b01      	ldr	r3, [sp, #4]
    e74e:	83da      	strh	r2, [r3, #30]

  /* start request timer */
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    e750:	9b01      	ldr	r3, [sp, #4]
    e752:	2210      	movs	r2, #16
    e754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    e758:	9b01      	ldr	r3, [sp, #4]
    e75a:	f103 0224 	add.w	r2, r3, #36	; 0x24
    e75e:	4b0a      	ldr	r3, [pc, #40]	; (e788 <attcSendPrepWriteReq+0x120>)
    e760:	681b      	ldr	r3, [r3, #0]
    e762:	799b      	ldrb	r3, [r3, #6]
    e764:	4619      	mov	r1, r3
    e766:	4610      	mov	r0, r2
    e768:	f7ff f886 	bl	d878 <WsfTimerStartSec>

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
    e76c:	9b01      	ldr	r3, [sp, #4]
    e76e:	681b      	ldr	r3, [r3, #0]
    e770:	8b19      	ldrh	r1, [r3, #24]
    e772:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e776:	3305      	adds	r3, #5
    e778:	b29a      	uxth	r2, r3
    e77a:	9b05      	ldr	r3, [sp, #20]
    e77c:	2004      	movs	r0, #4
    e77e:	f7fd ff97 	bl	c6b0 <L2cDataReq>
}
    e782:	b007      	add	sp, #28
    e784:	f85d fb04 	ldr.w	pc, [sp], #4
    e788:	10002bcc 	.word	0x10002bcc

0000e78c <attcSendReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendReq(attcCcb_t *pCcb)
{
    e78c:	b500      	push	{lr}
    e78e:	b083      	sub	sp, #12
    e790:	9001      	str	r0, [sp, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    e792:	9b01      	ldr	r3, [sp, #4]
    e794:	7c9b      	ldrb	r3, [r3, #18]
    e796:	461a      	mov	r2, r3
    e798:	4b04      	ldr	r3, [pc, #16]	; (e7ac <attcSendReq+0x20>)
    e79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e79e:	9801      	ldr	r0, [sp, #4]
    e7a0:	4798      	blx	r3
}
    e7a2:	bf00      	nop
    e7a4:	b003      	add	sp, #12
    e7a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e7aa:	bf00      	nop
    e7ac:	0002c160 	.word	0x0002c160

0000e7b0 <attcSetupReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSetupReq(attcCcb_t *pCcb, attcApiMsg_t *pMsg)
{
    e7b0:	b500      	push	{lr}
    e7b2:	b083      	sub	sp, #12
    e7b4:	9001      	str	r0, [sp, #4]
    e7b6:	9100      	str	r1, [sp, #0]
  /* set out req to api message */
  pCcb->outReq = *pMsg;
    e7b8:	9b01      	ldr	r3, [sp, #4]
    e7ba:	9a00      	ldr	r2, [sp, #0]
    e7bc:	3310      	adds	r3, #16
    e7be:	ca07      	ldmia	r2, {r0, r1, r2}
    e7c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* store parameters */
  pCcb->outReqParams = *(pMsg->pPkt);
    e7c4:	9b00      	ldr	r3, [sp, #0]
    e7c6:	685a      	ldr	r2, [r3, #4]
    e7c8:	9b01      	ldr	r3, [sp, #4]
    e7ca:	331c      	adds	r3, #28
    e7cc:	e892 0003 	ldmia.w	r2, {r0, r1}
    e7d0:	e883 0003 	stmia.w	r3, {r0, r1}

  /* build and send request */
  attcSendReq(pCcb);
    e7d4:	9801      	ldr	r0, [sp, #4]
    e7d6:	f7ff ffd9 	bl	e78c <attcSendReq>
}
    e7da:	bf00      	nop
    e7dc:	b003      	add	sp, #12
    e7de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e7e4 <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    e7e4:	b500      	push	{lr}
    e7e6:	b085      	sub	sp, #20
    e7e8:	4603      	mov	r3, r0
    e7ea:	9200      	str	r2, [sp, #0]
    e7ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    e7f0:	460b      	mov	r3, r1
    e7f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       opcode;
  attcCcb_t     *pCcb;

  /* get connection control block for this handle, ignore packet if not found */
  if ((pCcb = attcCcbByHandle(handle)) == NULL)
    e7f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e7fa:	4618      	mov	r0, r3
    e7fc:	f000 f9b0 	bl	eb60 <attcCcbByHandle>
    e800:	9003      	str	r0, [sp, #12]
    e802:	9b03      	ldr	r3, [sp, #12]
    e804:	2b00      	cmp	r3, #0
    e806:	d026      	beq.n	e856 <attcDataCback+0x72>
  {
    return;
  }

  /* parse opcode */
  opcode = *(pPacket + L2C_PAYLOAD_START);
    e808:	9b00      	ldr	r3, [sp, #0]
    e80a:	7a1b      	ldrb	r3, [r3, #8]
    e80c:	f88d 300b 	strb.w	r3, [sp, #11]

  /* if response */
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
    e810:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e814:	2b19      	cmp	r3, #25
    e816:	d807      	bhi.n	e828 <attcDataCback+0x44>
  {
    attcProcRsp(pCcb, len, pPacket);
    e818:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e81c:	9a00      	ldr	r2, [sp, #0]
    e81e:	4619      	mov	r1, r3
    e820:	9803      	ldr	r0, [sp, #12]
    e822:	f000 fbc1 	bl	efa8 <attcProcRsp>
    e826:	e017      	b.n	e858 <attcDataCback+0x74>
  }
  /* else if indication or notification */
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
    e828:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e82c:	2b1b      	cmp	r3, #27
    e82e:	d003      	beq.n	e838 <attcDataCback+0x54>
    e830:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e834:	2b1d      	cmp	r3, #29
    e836:	d107      	bne.n	e848 <attcDataCback+0x64>
  {
    attcProcInd(pCcb, len, pPacket);
    e838:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e83c:	9a00      	ldr	r2, [sp, #0]
    e83e:	4619      	mov	r1, r3
    e840:	9803      	ldr	r0, [sp, #12]
    e842:	f000 fc37 	bl	f0b4 <attcProcInd>
    e846:	e007      	b.n	e858 <attcDataCback+0x74>
  }
  /* else unknown opcode */
  else
  {
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
    e848:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e84c:	4619      	mov	r1, r3
    e84e:	4804      	ldr	r0, [pc, #16]	; (e860 <attcDataCback+0x7c>)
    e850:	f7ff f8fa 	bl	da48 <WsfTrace>
    e854:	e000      	b.n	e858 <attcDataCback+0x74>
    return;
    e856:	bf00      	nop
  }
}
    e858:	b005      	add	sp, #20
    e85a:	f85d fb04 	ldr.w	pc, [sp], #4
    e85e:	bf00      	nop
    e860:	0002b118 	.word	0x0002b118

0000e864 <attcCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcCtrlCback(wsfMsgHdr_t *pMsg)
{
    e864:	b500      	push	{lr}
    e866:	b085      	sub	sp, #20
    e868:	9001      	str	r0, [sp, #4]
  attcCcb_t     *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	881b      	ldrh	r3, [r3, #0]
    e86e:	b2db      	uxtb	r3, r3
    e870:	4618      	mov	r0, r3
    e872:	f000 f94f 	bl	eb14 <attcCcbByConnId>
    e876:	9003      	str	r0, [sp, #12]
    e878:	9b03      	ldr	r3, [sp, #12]
    e87a:	2b00      	cmp	r3, #0
    e87c:	d00d      	beq.n	e89a <attcCtrlCback+0x36>
  {
    /* if confirmation pending try sending now */
    AttcIndConfirm((dmConnId_t) pMsg->param);
    e87e:	9b01      	ldr	r3, [sp, #4]
    e880:	881b      	ldrh	r3, [r3, #0]
    e882:	b2db      	uxtb	r3, r3
    e884:	4618      	mov	r0, r3
    e886:	f000 fe14 	bl	f4b2 <AttcIndConfirm>

    /* call pending write command callback */
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
    e88a:	9b01      	ldr	r3, [sp, #4]
    e88c:	881b      	ldrh	r3, [r3, #0]
    e88e:	b2db      	uxtb	r3, r3
    e890:	2200      	movs	r2, #0
    e892:	9903      	ldr	r1, [sp, #12]
    e894:	4618      	mov	r0, r3
    e896:	f7ff fdb4 	bl	e402 <attcWriteCmdCallback>
  }
}
    e89a:	bf00      	nop
    e89c:	b005      	add	sp, #20
    e89e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e8a4 <attcConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
    e8a4:	b510      	push	{r4, lr}
    e8a6:	b086      	sub	sp, #24
    e8a8:	9001      	str	r0, [sp, #4]
    e8aa:	9100      	str	r1, [sp, #0]
  attcCcb_t *pClient;
  uint16_t  localMtu;
  uint8_t   status;

  /* if connection opened */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    e8ac:	9b00      	ldr	r3, [sp, #0]
    e8ae:	789b      	ldrb	r3, [r3, #2]
    e8b0:	2b27      	cmp	r3, #39	; 0x27
    e8b2:	d129      	bne.n	e908 <attcConnCback+0x64>
  {
    /* if we initiated connection send MTU request */
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
    e8b4:	9b01      	ldr	r3, [sp, #4]
    e8b6:	7f1b      	ldrb	r3, [r3, #28]
    e8b8:	4618      	mov	r0, r3
    e8ba:	f007 fbad 	bl	16018 <DmConnRole>
    e8be:	4603      	mov	r3, r0
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d179      	bne.n	e9b8 <attcConnCback+0x114>
    {
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    e8c4:	4b3e      	ldr	r3, [pc, #248]	; (e9c0 <attcConnCback+0x11c>)
    e8c6:	681b      	ldr	r3, [r3, #0]
    e8c8:	889b      	ldrh	r3, [r3, #4]
    e8ca:	461c      	mov	r4, r3
    e8cc:	f010 fe5c 	bl	1f588 <HciGetMaxRxAclLen>
    e8d0:	4603      	mov	r3, r0
    e8d2:	3b04      	subs	r3, #4
    e8d4:	429c      	cmp	r4, r3
    e8d6:	da03      	bge.n	e8e0 <attcConnCback+0x3c>
    e8d8:	4b39      	ldr	r3, [pc, #228]	; (e9c0 <attcConnCback+0x11c>)
    e8da:	681b      	ldr	r3, [r3, #0]
    e8dc:	889b      	ldrh	r3, [r3, #4]
    e8de:	e004      	b.n	e8ea <attcConnCback+0x46>
    e8e0:	f010 fe52 	bl	1f588 <HciGetMaxRxAclLen>
    e8e4:	4603      	mov	r3, r0
    e8e6:	3b04      	subs	r3, #4
    e8e8:	b29b      	uxth	r3, r3
    e8ea:	f8ad 300e 	strh.w	r3, [sp, #14]

      /* if desired MTU is not the default */
      if (localMtu != ATT_DEFAULT_MTU)
    e8ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e8f2:	2b17      	cmp	r3, #23
    e8f4:	d060      	beq.n	e9b8 <attcConnCback+0x114>
      {
        AttcMtuReq(pCcb->connId, localMtu);
    e8f6:	9b01      	ldr	r3, [sp, #4]
    e8f8:	7f1b      	ldrb	r3, [r3, #28]
    e8fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    e8fe:	4611      	mov	r1, r2
    e900:	4618      	mov	r0, r3
    e902:	f000 fd9e 	bl	f442 <AttcMtuReq>
    }

    /* call pending write command callback */
    attcWriteCmdCallback(pCcb->connId, pClient, status);
  }
}
    e906:	e057      	b.n	e9b8 <attcConnCback+0x114>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    e908:	9b00      	ldr	r3, [sp, #0]
    e90a:	789b      	ldrb	r3, [r3, #2]
    e90c:	2b28      	cmp	r3, #40	; 0x28
    e90e:	d153      	bne.n	e9b8 <attcConnCback+0x114>
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
    e910:	9b00      	ldr	r3, [sp, #0]
    e912:	78db      	ldrb	r3, [r3, #3]
    e914:	2b00      	cmp	r3, #0
    e916:	d105      	bne.n	e924 <attcConnCback+0x80>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
    e918:	9b00      	ldr	r3, [sp, #0]
    e91a:	7a1b      	ldrb	r3, [r3, #8]
    e91c:	3320      	adds	r3, #32
    e91e:	f88d 3017 	strb.w	r3, [sp, #23]
    e922:	e004      	b.n	e92e <attcConnCback+0x8a>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
    e924:	9b00      	ldr	r3, [sp, #0]
    e926:	78db      	ldrb	r3, [r3, #3]
    e928:	3320      	adds	r3, #32
    e92a:	f88d 3017 	strb.w	r3, [sp, #23]
    pClient = &attcCb.ccb[pCcb->connId - 1];
    e92e:	9b01      	ldr	r3, [sp, #4]
    e930:	7f1b      	ldrb	r3, [r3, #28]
    e932:	1e5a      	subs	r2, r3, #1
    e934:	4613      	mov	r3, r2
    e936:	00db      	lsls	r3, r3, #3
    e938:	1a9b      	subs	r3, r3, r2
    e93a:	00db      	lsls	r3, r3, #3
    e93c:	4a21      	ldr	r2, [pc, #132]	; (e9c4 <attcConnCback+0x120>)
    e93e:	4413      	add	r3, r2
    e940:	9304      	str	r3, [sp, #16]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
    e942:	9b04      	ldr	r3, [sp, #16]
    e944:	7c9b      	ldrb	r3, [r3, #18]
    e946:	2b00      	cmp	r3, #0
    e948:	d00c      	beq.n	e964 <attcConnCback+0xc0>
      WsfTimerStop(&pClient->outReqTimer);
    e94a:	9b04      	ldr	r3, [sp, #16]
    e94c:	3324      	adds	r3, #36	; 0x24
    e94e:	4618      	mov	r0, r3
    e950:	f7fe ffb6 	bl	d8c0 <WsfTimerStop>
      attcReqClear(pClient, &pClient->outReq, status);
    e954:	9b04      	ldr	r3, [sp, #16]
    e956:	3310      	adds	r3, #16
    e958:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e95c:	4619      	mov	r1, r3
    e95e:	9804      	ldr	r0, [sp, #16]
    e960:	f000 f958 	bl	ec14 <attcReqClear>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
    e964:	9b04      	ldr	r3, [sp, #16]
    e966:	799b      	ldrb	r3, [r3, #6]
    e968:	2b00      	cmp	r3, #0
    e96a:	d007      	beq.n	e97c <attcConnCback+0xd8>
      attcReqClear(pClient, &pClient->onDeck, status);
    e96c:	9b04      	ldr	r3, [sp, #16]
    e96e:	3304      	adds	r3, #4
    e970:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e974:	4619      	mov	r1, r3
    e976:	9804      	ldr	r0, [sp, #16]
    e978:	f000 f94c 	bl	ec14 <attcReqClear>
    pClient->flowDisabled = FALSE;
    e97c:	9b04      	ldr	r3, [sp, #16]
    e97e:	2200      	movs	r2, #0
    e980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    pClient->cnfPending = FALSE;
    e984:	9b04      	ldr	r3, [sp, #16]
    e986:	2200      	movs	r2, #0
    e988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (attcCb.pSign != NULL)
    e98c:	4b0d      	ldr	r3, [pc, #52]	; (e9c4 <attcConnCback+0x120>)
    e98e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    e992:	2b00      	cmp	r3, #0
    e994:	d008      	beq.n	e9a8 <attcConnCback+0x104>
      (*attcCb.pSign->closeCback)(pClient, status);
    e996:	4b0b      	ldr	r3, [pc, #44]	; (e9c4 <attcConnCback+0x120>)
    e998:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    e99c:	685b      	ldr	r3, [r3, #4]
    e99e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e9a2:	4611      	mov	r1, r2
    e9a4:	9804      	ldr	r0, [sp, #16]
    e9a6:	4798      	blx	r3
    attcWriteCmdCallback(pCcb->connId, pClient, status);
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	7f1b      	ldrb	r3, [r3, #28]
    e9ac:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e9b0:	9904      	ldr	r1, [sp, #16]
    e9b2:	4618      	mov	r0, r3
    e9b4:	f7ff fd25 	bl	e402 <attcWriteCmdCallback>
}
    e9b8:	bf00      	nop
    e9ba:	b006      	add	sp, #24
    e9bc:	bd10      	pop	{r4, pc}
    e9be:	bf00      	nop
    e9c0:	10002bcc 	.word	0x10002bcc
    e9c4:	1000896c 	.word	0x1000896c

0000e9c8 <attcMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcMsgCback(attcApiMsg_t *pMsg)
{
    e9c8:	b500      	push	{lr}
    e9ca:	b085      	sub	sp, #20
    e9cc:	9001      	str	r0, [sp, #4]
  attcCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
    e9ce:	9b01      	ldr	r3, [sp, #4]
    e9d0:	881b      	ldrh	r3, [r3, #0]
    e9d2:	b2db      	uxtb	r3, r3
    e9d4:	4618      	mov	r0, r3
    e9d6:	f000 f89d 	bl	eb14 <attcCcbByConnId>
    e9da:	9003      	str	r0, [sp, #12]
    e9dc:	9b03      	ldr	r3, [sp, #12]
    e9de:	2b00      	cmp	r3, #0
    e9e0:	d10d      	bne.n	e9fe <attcMsgCback+0x36>
  {
    /* if message has a packet buffer */
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
    e9e2:	9b01      	ldr	r3, [sp, #4]
    e9e4:	789b      	ldrb	r3, [r3, #2]
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	f000 808e 	beq.w	eb08 <attcMsgCback+0x140>
        pMsg->hdr.event <= ATTC_MSG_API_SIGNED_WRITE_CMD)
    e9ec:	9b01      	ldr	r3, [sp, #4]
    e9ee:	789b      	ldrb	r3, [r3, #2]
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
    e9f0:	2b0d      	cmp	r3, #13
    e9f2:	f200 8089 	bhi.w	eb08 <attcMsgCback+0x140>
    {
      /* free packet buffer */
      attcFreePkt(pMsg);
    e9f6:	9801      	ldr	r0, [sp, #4]
    e9f8:	f000 f8d4 	bl	eba4 <attcFreePkt>
    }

    /* ignore if connection not in use */
    return;
    e9fc:	e084      	b.n	eb08 <attcMsgCback+0x140>
  }

  /* if an API request to send packet (non-signed) */
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
    e9fe:	9b01      	ldr	r3, [sp, #4]
    ea00:	789b      	ldrb	r3, [r3, #2]
    ea02:	2b0c      	cmp	r3, #12
    ea04:	d82d      	bhi.n	ea62 <attcMsgCback+0x9a>
  {
    /* verify no API request already waiting on deck, in progress, or no pending write command
       already for this handle */
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
    ea06:	9b03      	ldr	r3, [sp, #12]
    ea08:	799b      	ldrb	r3, [r3, #6]
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d10e      	bne.n	ea2c <attcMsgCback+0x64>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
    ea0e:	9b03      	ldr	r3, [sp, #12]
    ea10:	7c9b      	ldrb	r3, [r3, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
    ea12:	2b01      	cmp	r3, #1
    ea14:	d80a      	bhi.n	ea2c <attcMsgCback+0x64>
        ((pMsg->hdr.event == ATTC_MSG_API_WRITE_CMD)  &&
    ea16:	9b01      	ldr	r3, [sp, #4]
    ea18:	789b      	ldrb	r3, [r3, #2]
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
    ea1a:	2b0a      	cmp	r3, #10
    ea1c:	d10c      	bne.n	ea38 <attcMsgCback+0x70>
         attcPendWriteCmd(pCcb, pMsg)))
    ea1e:	9901      	ldr	r1, [sp, #4]
    ea20:	9803      	ldr	r0, [sp, #12]
    ea22:	f7ff fc8f 	bl	e344 <attcPendWriteCmd>
    ea26:	4603      	mov	r3, r0
        ((pMsg->hdr.event == ATTC_MSG_API_WRITE_CMD)  &&
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d005      	beq.n	ea38 <attcMsgCback+0x70>
    {
      /* free request and call callback with failure status */
      attcReqClear(pCcb, pMsg, ATT_ERR_OVERFLOW);
    ea2c:	2272      	movs	r2, #114	; 0x72
    ea2e:	9901      	ldr	r1, [sp, #4]
    ea30:	9803      	ldr	r0, [sp, #12]
    ea32:	f000 f8ef 	bl	ec14 <attcReqClear>
      return;
    ea36:	e068      	b.n	eb0a <attcMsgCback+0x142>
    }

    /* if MTU request in progress or flow controlled */
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
    ea38:	9b03      	ldr	r3, [sp, #12]
    ea3a:	7c9b      	ldrb	r3, [r3, #18]
    ea3c:	2b01      	cmp	r3, #1
    ea3e:	d004      	beq.n	ea4a <attcMsgCback+0x82>
    ea40:	9b03      	ldr	r3, [sp, #12]
    ea42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    ea46:	2b00      	cmp	r3, #0
    ea48:	d006      	beq.n	ea58 <attcMsgCback+0x90>
    {
      /* put request "on deck" for processing later */
      pCcb->onDeck = *pMsg;
    ea4a:	9b03      	ldr	r3, [sp, #12]
    ea4c:	9a01      	ldr	r2, [sp, #4]
    ea4e:	3304      	adds	r3, #4
    ea50:	ca07      	ldmia	r2, {r0, r1, r2}
    ea52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ea56:	e058      	b.n	eb0a <attcMsgCback+0x142>
    }
    /* otherwise ready to send; set up request */
    else
    {
      attcSetupReq(pCcb, pMsg);
    ea58:	9901      	ldr	r1, [sp, #4]
    ea5a:	9803      	ldr	r0, [sp, #12]
    ea5c:	f7ff fea8 	bl	e7b0 <attcSetupReq>
    ea60:	e053      	b.n	eb0a <attcMsgCback+0x142>
    }
  }
  /* else if signed data event */
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
    ea62:	9b01      	ldr	r3, [sp, #4]
    ea64:	789b      	ldrb	r3, [r3, #2]
    ea66:	2b0c      	cmp	r3, #12
    ea68:	d910      	bls.n	ea8c <attcMsgCback+0xc4>
           pMsg->hdr.event <= ATTC_MSG_CMAC_CMPL)
    ea6a:	9b01      	ldr	r3, [sp, #4]
    ea6c:	789b      	ldrb	r3, [r3, #2]
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
    ea6e:	2b0e      	cmp	r3, #14
    ea70:	d80c      	bhi.n	ea8c <attcMsgCback+0xc4>
  {
    /* pass to message callback for signed data */
    if (attcCb.pSign != NULL)
    ea72:	4b27      	ldr	r3, [pc, #156]	; (eb10 <attcMsgCback+0x148>)
    ea74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    ea78:	2b00      	cmp	r3, #0
    ea7a:	d046      	beq.n	eb0a <attcMsgCback+0x142>
    {
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
    ea7c:	4b24      	ldr	r3, [pc, #144]	; (eb10 <attcMsgCback+0x148>)
    ea7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    ea82:	681b      	ldr	r3, [r3, #0]
    ea84:	9901      	ldr	r1, [sp, #4]
    ea86:	9803      	ldr	r0, [sp, #12]
    ea88:	4798      	blx	r3
    if (attcCb.pSign != NULL)
    ea8a:	e03e      	b.n	eb0a <attcMsgCback+0x142>
    }
  }
  /* else if cancel request */
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
    ea8c:	9b01      	ldr	r3, [sp, #4]
    ea8e:	789b      	ldrb	r3, [r3, #2]
    ea90:	2b0f      	cmp	r3, #15
    ea92:	d120      	bne.n	ead6 <attcMsgCback+0x10e>
  {
    /* free any out req (except mtu req) */
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
    ea94:	9b03      	ldr	r3, [sp, #12]
    ea96:	7c9b      	ldrb	r3, [r3, #18]
    ea98:	2b00      	cmp	r3, #0
    ea9a:	d010      	beq.n	eabe <attcMsgCback+0xf6>
        pCcb->outReq.hdr.event != ATTC_MSG_API_MTU)
    ea9c:	9b03      	ldr	r3, [sp, #12]
    ea9e:	7c9b      	ldrb	r3, [r3, #18]
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
    eaa0:	2b01      	cmp	r3, #1
    eaa2:	d00c      	beq.n	eabe <attcMsgCback+0xf6>
    {
      WsfTimerStop(&pCcb->outReqTimer);
    eaa4:	9b03      	ldr	r3, [sp, #12]
    eaa6:	3324      	adds	r3, #36	; 0x24
    eaa8:	4618      	mov	r0, r3
    eaaa:	f7fe ff09 	bl	d8c0 <WsfTimerStop>
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_CANCELLED);
    eaae:	9b03      	ldr	r3, [sp, #12]
    eab0:	3310      	adds	r3, #16
    eab2:	2274      	movs	r2, #116	; 0x74
    eab4:	4619      	mov	r1, r3
    eab6:	9803      	ldr	r0, [sp, #12]
    eab8:	f000 f8ac 	bl	ec14 <attcReqClear>
    eabc:	e025      	b.n	eb0a <attcMsgCback+0x142>
    }
    /* else free any req on deck */
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
    eabe:	9b03      	ldr	r3, [sp, #12]
    eac0:	799b      	ldrb	r3, [r3, #6]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d021      	beq.n	eb0a <attcMsgCback+0x142>
    {
      attcReqClear(pCcb, &pCcb->onDeck, ATT_ERR_CANCELLED);
    eac6:	9b03      	ldr	r3, [sp, #12]
    eac8:	3304      	adds	r3, #4
    eaca:	2274      	movs	r2, #116	; 0x74
    eacc:	4619      	mov	r1, r3
    eace:	9803      	ldr	r0, [sp, #12]
    ead0:	f000 f8a0 	bl	ec14 <attcReqClear>
    ead4:	e019      	b.n	eb0a <attcMsgCback+0x142>
    }
  }
  /* else if timeout */
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
    ead6:	9b01      	ldr	r3, [sp, #4]
    ead8:	789b      	ldrb	r3, [r3, #2]
    eada:	2b10      	cmp	r3, #16
    eadc:	d115      	bne.n	eb0a <attcMsgCback+0x142>
  {
    /* free any out req */
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
    eade:	9b03      	ldr	r3, [sp, #12]
    eae0:	7c9b      	ldrb	r3, [r3, #18]
    eae2:	2b00      	cmp	r3, #0
    eae4:	d011      	beq.n	eb0a <attcMsgCback+0x142>
    {
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_TIMEOUT);
    eae6:	9b03      	ldr	r3, [sp, #12]
    eae8:	3310      	adds	r3, #16
    eaea:	2271      	movs	r2, #113	; 0x71
    eaec:	4619      	mov	r1, r3
    eaee:	9803      	ldr	r0, [sp, #12]
    eaf0:	f000 f890 	bl	ec14 <attcReqClear>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    eaf4:	9b03      	ldr	r3, [sp, #12]
    eaf6:	681b      	ldr	r3, [r3, #0]
    eaf8:	7f5a      	ldrb	r2, [r3, #29]
    eafa:	9b03      	ldr	r3, [sp, #12]
    eafc:	681b      	ldr	r3, [r3, #0]
    eafe:	f042 0204 	orr.w	r2, r2, #4
    eb02:	b2d2      	uxtb	r2, r2
    eb04:	775a      	strb	r2, [r3, #29]
    eb06:	e000      	b.n	eb0a <attcMsgCback+0x142>
    return;
    eb08:	bf00      	nop
    }
  }
}
    eb0a:	b005      	add	sp, #20
    eb0c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb10:	1000896c 	.word	0x1000896c

0000eb14 <attcCcbByConnId>:
 *
 *  \return Pointer to connection control block or NULL if not in use.
 */
/*************************************************************************************************/
attcCcb_t *attcCcbByConnId(dmConnId_t connId)
{
    eb14:	b500      	push	{lr}
    eb16:	b083      	sub	sp, #12
    eb18:	4603      	mov	r3, r0
    eb1a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnInUse(connId))
    eb1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb22:	4618      	mov	r0, r3
    eb24:	f007 f94c 	bl	15dc0 <DmConnInUse>
    eb28:	4603      	mov	r3, r0
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d009      	beq.n	eb42 <attcCcbByConnId+0x2e>
  {
    return &attcCb.ccb[connId - 1];
    eb2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb32:	1e5a      	subs	r2, r3, #1
    eb34:	4613      	mov	r3, r2
    eb36:	00db      	lsls	r3, r3, #3
    eb38:	1a9b      	subs	r3, r3, r2
    eb3a:	00db      	lsls	r3, r3, #3
    eb3c:	4a06      	ldr	r2, [pc, #24]	; (eb58 <attcCcbByConnId+0x44>)
    eb3e:	4413      	add	r3, r2
    eb40:	e006      	b.n	eb50 <attcCcbByConnId+0x3c>
  }
  else
  {
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
    eb42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb46:	4619      	mov	r1, r3
    eb48:	4804      	ldr	r0, [pc, #16]	; (eb5c <attcCcbByConnId+0x48>)
    eb4a:	f7fe ff7d 	bl	da48 <WsfTrace>
    return NULL;
    eb4e:	2300      	movs	r3, #0
  }
}
    eb50:	4618      	mov	r0, r3
    eb52:	b003      	add	sp, #12
    eb54:	f85d fb04 	ldr.w	pc, [sp], #4
    eb58:	1000896c 	.word	0x1000896c
    eb5c:	0002b134 	.word	0x0002b134

0000eb60 <attcCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
    eb60:	b500      	push	{lr}
    eb62:	b085      	sub	sp, #20
    eb64:	4603      	mov	r3, r0
    eb66:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    eb6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    eb6e:	4618      	mov	r0, r3
    eb70:	f007 f8f2 	bl	15d58 <DmConnIdByHandle>
    eb74:	4603      	mov	r3, r0
    eb76:	f88d 300f 	strb.w	r3, [sp, #15]
    eb7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb7e:	2b00      	cmp	r3, #0
    eb80:	d009      	beq.n	eb96 <attcCcbByHandle+0x36>
  {
    return &attcCb.ccb[connId - 1];
    eb82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb86:	1e5a      	subs	r2, r3, #1
    eb88:	4613      	mov	r3, r2
    eb8a:	00db      	lsls	r3, r3, #3
    eb8c:	1a9b      	subs	r3, r3, r2
    eb8e:	00db      	lsls	r3, r3, #3
    eb90:	4a03      	ldr	r2, [pc, #12]	; (eba0 <attcCcbByHandle+0x40>)
    eb92:	4413      	add	r3, r2
    eb94:	e000      	b.n	eb98 <attcCcbByHandle+0x38>
  }

  return NULL;
    eb96:	2300      	movs	r3, #0
}
    eb98:	4618      	mov	r0, r3
    eb9a:	b005      	add	sp, #20
    eb9c:	f85d fb04 	ldr.w	pc, [sp], #4
    eba0:	1000896c 	.word	0x1000896c

0000eba4 <attcFreePkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcFreePkt(attcApiMsg_t *pMsg)
{
    eba4:	b500      	push	{lr}
    eba6:	b083      	sub	sp, #12
    eba8:	9001      	str	r0, [sp, #4]
  if (pMsg->pPkt != NULL)
    ebaa:	9b01      	ldr	r3, [sp, #4]
    ebac:	685b      	ldr	r3, [r3, #4]
    ebae:	2b00      	cmp	r3, #0
    ebb0:	d007      	beq.n	ebc2 <attcFreePkt+0x1e>
  {
    WsfMsgFree(pMsg->pPkt);
    ebb2:	9b01      	ldr	r3, [sp, #4]
    ebb4:	685b      	ldr	r3, [r3, #4]
    ebb6:	4618      	mov	r0, r3
    ebb8:	f7fe faf4 	bl	d1a4 <WsfMsgFree>
    pMsg->pPkt = NULL;
    ebbc:	9b01      	ldr	r3, [sp, #4]
    ebbe:	2200      	movs	r2, #0
    ebc0:	605a      	str	r2, [r3, #4]
  }
}
    ebc2:	bf00      	nop
    ebc4:	b003      	add	sp, #12
    ebc6:	f85d fb04 	ldr.w	pc, [sp], #4

0000ebca <attcExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
    ebca:	b510      	push	{r4, lr}
    ebcc:	b084      	sub	sp, #16
    ebce:	4604      	mov	r4, r0
    ebd0:	4608      	mov	r0, r1
    ebd2:	4611      	mov	r1, r2
    ebd4:	461a      	mov	r2, r3
    ebd6:	4623      	mov	r3, r4
    ebd8:	f88d 300f 	strb.w	r3, [sp, #15]
    ebdc:	4603      	mov	r3, r0
    ebde:	f88d 300e 	strb.w	r3, [sp, #14]
    ebe2:	460b      	mov	r3, r1
    ebe4:	f8ad 300c 	strh.w	r3, [sp, #12]
    ebe8:	4613      	mov	r3, r2
    ebea:	f88d 300b 	strb.w	r3, [sp, #11]
  if (event != ATT_METHOD_MTU)
    ebee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ebf2:	2b01      	cmp	r3, #1
    ebf4:	d00b      	beq.n	ec0e <attcExecCallback+0x44>
  {
    attExecCallback(connId, event, handle, status, 0);
    ebf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ebfa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ebfe:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ec02:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ec06:	2400      	movs	r4, #0
    ec08:	9400      	str	r4, [sp, #0]
    ec0a:	f004 fa2f 	bl	1306c <attExecCallback>
  }
}
    ec0e:	bf00      	nop
    ec10:	b004      	add	sp, #16
    ec12:	bd10      	pop	{r4, pc}

0000ec14 <attcReqClear>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
    ec14:	b500      	push	{lr}
    ec16:	b085      	sub	sp, #20
    ec18:	9003      	str	r0, [sp, #12]
    ec1a:	9102      	str	r1, [sp, #8]
    ec1c:	4613      	mov	r3, r2
    ec1e:	f88d 3007 	strb.w	r3, [sp, #7]
  attcFreePkt(pMsg);
    ec22:	9802      	ldr	r0, [sp, #8]
    ec24:	f7ff ffbe 	bl	eba4 <attcFreePkt>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ec28:	9b03      	ldr	r3, [sp, #12]
    ec2a:	681b      	ldr	r3, [r3, #0]
    ec2c:	7f18      	ldrb	r0, [r3, #28]
    ec2e:	9b02      	ldr	r3, [sp, #8]
    ec30:	7899      	ldrb	r1, [r3, #2]
    ec32:	9b02      	ldr	r3, [sp, #8]
    ec34:	891a      	ldrh	r2, [r3, #8]
    ec36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec3a:	f7ff ffc6 	bl	ebca <attcExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    ec3e:	9b02      	ldr	r3, [sp, #8]
    ec40:	2200      	movs	r2, #0
    ec42:	709a      	strb	r2, [r3, #2]
}
    ec44:	bf00      	nop
    ec46:	b005      	add	sp, #20
    ec48:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec4c <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
    ec4c:	b082      	sub	sp, #8
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
    ec4e:	4b1b      	ldr	r3, [pc, #108]	; (ecbc <AttcInit+0x70>)
    ec50:	2200      	movs	r2, #0
    ec52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  attcCb.autoCnf = TRUE;
    ec56:	4b19      	ldr	r3, [pc, #100]	; (ecbc <AttcInit+0x70>)
    ec58:	2201      	movs	r2, #1
    ec5a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attcCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
    ec5e:	2300      	movs	r3, #0
    ec60:	f88d 3007 	strb.w	r3, [sp, #7]
    ec64:	4b15      	ldr	r3, [pc, #84]	; (ecbc <AttcInit+0x70>)
    ec66:	9300      	str	r3, [sp, #0]
    ec68:	e01e      	b.n	eca8 <AttcInit+0x5c>
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
    ec6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ec6e:	4613      	mov	r3, r2
    ec70:	00db      	lsls	r3, r3, #3
    ec72:	4413      	add	r3, r2
    ec74:	009b      	lsls	r3, r3, #2
    ec76:	4a12      	ldr	r2, [pc, #72]	; (ecc0 <AttcInit+0x74>)
    ec78:	441a      	add	r2, r3
    ec7a:	9b00      	ldr	r3, [sp, #0]
    ec7c:	601a      	str	r2, [r3, #0]

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
    ec7e:	4b10      	ldr	r3, [pc, #64]	; (ecc0 <AttcInit+0x74>)
    ec80:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
    ec84:	9b00      	ldr	r3, [sp, #0]
    ec86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
    ec8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec8e:	b29b      	uxth	r3, r3
    ec90:	3301      	adds	r3, #1
    ec92:	b29a      	uxth	r2, r3
    ec94:	9b00      	ldr	r3, [sp, #0]
    ec96:	85da      	strh	r2, [r3, #46]	; 0x2e
  for (i = 0, pCcb = attcCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
    ec98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec9c:	3301      	adds	r3, #1
    ec9e:	f88d 3007 	strb.w	r3, [sp, #7]
    eca2:	9b00      	ldr	r3, [sp, #0]
    eca4:	3338      	adds	r3, #56	; 0x38
    eca6:	9300      	str	r3, [sp, #0]
    eca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ecac:	2b02      	cmp	r3, #2
    ecae:	d9dc      	bls.n	ec6a <AttcInit+0x1e>
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
    ecb0:	4b03      	ldr	r3, [pc, #12]	; (ecc0 <AttcInit+0x74>)
    ecb2:	4a04      	ldr	r2, [pc, #16]	; (ecc4 <AttcInit+0x78>)
    ecb4:	66da      	str	r2, [r3, #108]	; 0x6c
}
    ecb6:	bf00      	nop
    ecb8:	b002      	add	sp, #8
    ecba:	4770      	bx	lr
    ecbc:	1000896c 	.word	0x1000896c
    ecc0:	10008a98 	.word	0x10008a98
    ecc4:	0002c150 	.word	0x0002c150

0000ecc8 <attcProcErrRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcErrRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    ecc8:	b086      	sub	sp, #24
    ecca:	9003      	str	r0, [sp, #12]
    eccc:	9201      	str	r2, [sp, #4]
    ecce:	9300      	str	r3, [sp, #0]
    ecd0:	460b      	mov	r3, r1
    ecd2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    ecd6:	9b01      	ldr	r3, [sp, #4]
    ecd8:	3309      	adds	r3, #9
    ecda:	9305      	str	r3, [sp, #20]

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
    ecdc:	9b03      	ldr	r3, [sp, #12]
    ecde:	7c9a      	ldrb	r2, [r3, #18]
    ece0:	9b00      	ldr	r3, [sp, #0]
    ece2:	709a      	strb	r2, [r3, #2]

  /* ignore request opcode in the error response */
  p++;
    ece4:	9b05      	ldr	r3, [sp, #20]
    ece6:	3301      	adds	r3, #1
    ece8:	9305      	str	r3, [sp, #20]

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
    ecea:	9b00      	ldr	r3, [sp, #0]
    ecec:	789b      	ldrb	r3, [r3, #2]
    ecee:	2b05      	cmp	r3, #5
    ecf0:	d00b      	beq.n	ed0a <attcProcErrRsp+0x42>
    ecf2:	9b00      	ldr	r3, [sp, #0]
    ecf4:	789b      	ldrb	r3, [r3, #2]
    ecf6:	2b06      	cmp	r3, #6
    ecf8:	d007      	beq.n	ed0a <attcProcErrRsp+0x42>
      pEvt->hdr.event == ATTC_WRITE_RSP || pEvt->hdr.event == ATTC_PREPARE_WRITE_RSP)
    ecfa:	9b00      	ldr	r3, [sp, #0]
    ecfc:	789b      	ldrb	r3, [r3, #2]
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
    ecfe:	2b09      	cmp	r3, #9
    ed00:	d003      	beq.n	ed0a <attcProcErrRsp+0x42>
      pEvt->hdr.event == ATTC_WRITE_RSP || pEvt->hdr.event == ATTC_PREPARE_WRITE_RSP)
    ed02:	9b00      	ldr	r3, [sp, #0]
    ed04:	789b      	ldrb	r3, [r3, #2]
    ed06:	2b0b      	cmp	r3, #11
    ed08:	d103      	bne.n	ed12 <attcProcErrRsp+0x4a>
  {
    /* ignore handle in the error response; callback will use stored handle from request */
    p += 2;
    ed0a:	9b05      	ldr	r3, [sp, #20]
    ed0c:	3302      	adds	r3, #2
    ed0e:	9305      	str	r3, [sp, #20]
    ed10:	e00f      	b.n	ed32 <attcProcErrRsp+0x6a>
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
    ed12:	9b05      	ldr	r3, [sp, #20]
    ed14:	781b      	ldrb	r3, [r3, #0]
    ed16:	b29a      	uxth	r2, r3
    ed18:	9b05      	ldr	r3, [sp, #20]
    ed1a:	3301      	adds	r3, #1
    ed1c:	781b      	ldrb	r3, [r3, #0]
    ed1e:	b29b      	uxth	r3, r3
    ed20:	021b      	lsls	r3, r3, #8
    ed22:	b29b      	uxth	r3, r3
    ed24:	4413      	add	r3, r2
    ed26:	b29a      	uxth	r2, r3
    ed28:	9b00      	ldr	r3, [sp, #0]
    ed2a:	815a      	strh	r2, [r3, #10]
    ed2c:	9b05      	ldr	r3, [sp, #20]
    ed2e:	3302      	adds	r3, #2
    ed30:	9305      	str	r3, [sp, #20]
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
    ed32:	9b05      	ldr	r3, [sp, #20]
    ed34:	1c5a      	adds	r2, r3, #1
    ed36:	9205      	str	r2, [sp, #20]
    ed38:	781a      	ldrb	r2, [r3, #0]
    ed3a:	9b00      	ldr	r3, [sp, #0]
    ed3c:	70da      	strb	r2, [r3, #3]
  if (pEvt->hdr.status == ATT_SUCCESS)
    ed3e:	9b00      	ldr	r3, [sp, #0]
    ed40:	78db      	ldrb	r3, [r3, #3]
    ed42:	2b00      	cmp	r3, #0
    ed44:	d102      	bne.n	ed4c <attcProcErrRsp+0x84>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
    ed46:	9b00      	ldr	r3, [sp, #0]
    ed48:	2275      	movs	r2, #117	; 0x75
    ed4a:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
    ed4c:	9b00      	ldr	r3, [sp, #0]
    ed4e:	2200      	movs	r2, #0
    ed50:	811a      	strh	r2, [r3, #8]
}
    ed52:	bf00      	nop
    ed54:	b006      	add	sp, #24
    ed56:	4770      	bx	lr

0000ed58 <attcProcMtuRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcMtuRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    ed58:	b530      	push	{r4, r5, lr}
    ed5a:	b087      	sub	sp, #28
    ed5c:	9003      	str	r0, [sp, #12]
    ed5e:	9201      	str	r2, [sp, #4]
    ed60:	9300      	str	r3, [sp, #0]
    ed62:	460b      	mov	r3, r1
    ed64:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t  mtu;

  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
    ed68:	9b01      	ldr	r3, [sp, #4]
    ed6a:	3309      	adds	r3, #9
    ed6c:	781b      	ldrb	r3, [r3, #0]
    ed6e:	b29a      	uxth	r2, r3
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	330a      	adds	r3, #10
    ed74:	781b      	ldrb	r3, [r3, #0]
    ed76:	b29b      	uxth	r3, r3
    ed78:	021b      	lsls	r3, r3, #8
    ed7a:	b29b      	uxth	r3, r3
    ed7c:	4413      	add	r3, r2
    ed7e:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* verify */
  if (mtu < ATT_DEFAULT_MTU)
    ed82:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ed86:	2b16      	cmp	r3, #22
    ed88:	d802      	bhi.n	ed90 <attcProcMtuRsp+0x38>
  {
    mtu = ATT_DEFAULT_MTU;
    ed8a:	2317      	movs	r3, #23
    ed8c:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  /* set mtu for the connection */
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
    ed90:	9b03      	ldr	r3, [sp, #12]
    ed92:	681c      	ldr	r4, [r3, #0]
    ed94:	4b0d      	ldr	r3, [pc, #52]	; (edcc <attcProcMtuRsp+0x74>)
    ed96:	681b      	ldr	r3, [r3, #0]
    ed98:	889b      	ldrh	r3, [r3, #4]
    ed9a:	461d      	mov	r5, r3
    ed9c:	f010 fbf4 	bl	1f588 <HciGetMaxRxAclLen>
    eda0:	4603      	mov	r3, r0
    eda2:	3b04      	subs	r3, #4
    eda4:	429d      	cmp	r5, r3
    eda6:	da03      	bge.n	edb0 <attcProcMtuRsp+0x58>
    eda8:	4b08      	ldr	r3, [pc, #32]	; (edcc <attcProcMtuRsp+0x74>)
    edaa:	681b      	ldr	r3, [r3, #0]
    edac:	889b      	ldrh	r3, [r3, #4]
    edae:	e004      	b.n	edba <attcProcMtuRsp+0x62>
    edb0:	f010 fbea 	bl	1f588 <HciGetMaxRxAclLen>
    edb4:	4603      	mov	r3, r0
    edb6:	3b04      	subs	r3, #4
    edb8:	b29b      	uxth	r3, r3
    edba:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    edbe:	461a      	mov	r2, r3
    edc0:	4620      	mov	r0, r4
    edc2:	f004 f929 	bl	13018 <attSetMtu>
}
    edc6:	bf00      	nop
    edc8:	b007      	add	sp, #28
    edca:	bd30      	pop	{r4, r5, pc}
    edcc:	10002bcc 	.word	0x10002bcc

0000edd0 <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    edd0:	b08a      	sub	sp, #40	; 0x28
    edd2:	9003      	str	r0, [sp, #12]
    edd4:	9201      	str	r2, [sp, #4]
    edd6:	9300      	str	r3, [sp, #0]
    edd8:	460b      	mov	r3, r1
    edda:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t  handle;
  uint16_t  nextHandle;
  uint16_t  prevHandle;
  uint8_t   paramLen;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    edde:	9b01      	ldr	r3, [sp, #4]
    ede0:	3309      	adds	r3, #9
    ede2:	9309      	str	r3, [sp, #36]	; 0x24
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    ede4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    ede8:	3308      	adds	r3, #8
    edea:	9a01      	ldr	r2, [sp, #4]
    edec:	4413      	add	r3, r2
    edee:	9306      	str	r3, [sp, #24]

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
    edf0:	9b03      	ldr	r3, [sp, #12]
    edf2:	7c9b      	ldrb	r3, [r3, #18]
    edf4:	2b02      	cmp	r3, #2
    edf6:	d10d      	bne.n	ee14 <attcProcFindOrReadRsp+0x44>
  {
    /* length in find info response is coded by UUID */
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
    edf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edfa:	1c5a      	adds	r2, r3, #1
    edfc:	9209      	str	r2, [sp, #36]	; 0x24
    edfe:	781b      	ldrb	r3, [r3, #0]
    ee00:	2b01      	cmp	r3, #1
    ee02:	d103      	bne.n	ee0c <attcProcFindOrReadRsp+0x3c>
    {
      paramLen = ATT_16_UUID_LEN;
    ee04:	2302      	movs	r3, #2
    ee06:	f88d 301f 	strb.w	r3, [sp, #31]
    ee0a:	e016      	b.n	ee3a <attcProcFindOrReadRsp+0x6a>
    }
    else
    {
      paramLen = ATT_128_UUID_LEN;
    ee0c:	2310      	movs	r3, #16
    ee0e:	f88d 301f 	strb.w	r3, [sp, #31]
    ee12:	e012      	b.n	ee3a <attcProcFindOrReadRsp+0x6a>
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
    ee14:	9b03      	ldr	r3, [sp, #12]
    ee16:	7c9b      	ldrb	r3, [r3, #18]
    ee18:	2b04      	cmp	r3, #4
    ee1a:	d107      	bne.n	ee2c <attcProcFindOrReadRsp+0x5c>
  {
    /* length in read by type response is handle plus parameter length */
    paramLen = *p++ - sizeof(uint16_t);
    ee1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee1e:	1c5a      	adds	r2, r3, #1
    ee20:	9209      	str	r2, [sp, #36]	; 0x24
    ee22:	781b      	ldrb	r3, [r3, #0]
    ee24:	3b02      	subs	r3, #2
    ee26:	f88d 301f 	strb.w	r3, [sp, #31]
    ee2a:	e006      	b.n	ee3a <attcProcFindOrReadRsp+0x6a>
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
    ee2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee2e:	1c5a      	adds	r2, r3, #1
    ee30:	9209      	str	r2, [sp, #36]	; 0x24
    ee32:	781b      	ldrb	r3, [r3, #0]
    ee34:	3b04      	subs	r3, #4
    ee36:	f88d 301f 	strb.w	r3, [sp, #31]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
    ee3a:	9b03      	ldr	r3, [sp, #12]
    ee3c:	8bdb      	ldrh	r3, [r3, #30]
    ee3e:	f8ad 3020 	strh.w	r3, [sp, #32]
  while (p < pEnd)
    ee42:	e073      	b.n	ef2c <attcProcFindOrReadRsp+0x15c>
  {
    /* get and compare handle */
    BSTREAM_TO_UINT16(handle, p);
    ee44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee46:	781b      	ldrb	r3, [r3, #0]
    ee48:	b29a      	uxth	r2, r3
    ee4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee4c:	3301      	adds	r3, #1
    ee4e:	781b      	ldrb	r3, [r3, #0]
    ee50:	b29b      	uxth	r3, r3
    ee52:	021b      	lsls	r3, r3, #8
    ee54:	b29b      	uxth	r3, r3
    ee56:	4413      	add	r3, r2
    ee58:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    ee5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee5e:	3302      	adds	r3, #2
    ee60:	9309      	str	r3, [sp, #36]	; 0x24
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
    ee62:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    ee66:	2b00      	cmp	r3, #0
    ee68:	d00f      	beq.n	ee8a <attcProcFindOrReadRsp+0xba>
    ee6a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d00b      	beq.n	ee8a <attcProcFindOrReadRsp+0xba>
    ee72:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    ee76:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ee7a:	429a      	cmp	r2, r3
    ee7c:	d305      	bcc.n	ee8a <attcProcFindOrReadRsp+0xba>
        handle > pCcb->outReqParams.h.endHandle)
    ee7e:	9b03      	ldr	r3, [sp, #12]
    ee80:	8c1b      	ldrh	r3, [r3, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
    ee82:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    ee86:	429a      	cmp	r2, r3
    ee88:	d903      	bls.n	ee92 <attcProcFindOrReadRsp+0xc2>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    ee8a:	9b00      	ldr	r3, [sp, #0]
    ee8c:	2273      	movs	r2, #115	; 0x73
    ee8e:	70da      	strb	r2, [r3, #3]
      break;
    ee90:	e050      	b.n	ef34 <attcProcFindOrReadRsp+0x164>
    }

    /* if read by group type response get second handle */
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_GROUP_TYPE)
    ee92:	9b03      	ldr	r3, [sp, #12]
    ee94:	7c9b      	ldrb	r3, [r3, #18]
    ee96:	2b08      	cmp	r3, #8
    ee98:	d12c      	bne.n	eef4 <attcProcFindOrReadRsp+0x124>
    {
      prevHandle = handle;
    ee9a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    ee9e:	f8ad 3016 	strh.w	r3, [sp, #22]
      BSTREAM_TO_UINT16(handle, p);
    eea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eea4:	781b      	ldrb	r3, [r3, #0]
    eea6:	b29a      	uxth	r2, r3
    eea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eeaa:	3301      	adds	r3, #1
    eeac:	781b      	ldrb	r3, [r3, #0]
    eeae:	b29b      	uxth	r3, r3
    eeb0:	021b      	lsls	r3, r3, #8
    eeb2:	b29b      	uxth	r3, r3
    eeb4:	4413      	add	r3, r2
    eeb6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    eeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eebc:	3302      	adds	r3, #2
    eebe:	9309      	str	r3, [sp, #36]	; 0x24
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
    eec0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    eec4:	2b00      	cmp	r3, #0
    eec6:	d011      	beq.n	eeec <attcProcFindOrReadRsp+0x11c>
    eec8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    eecc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    eed0:	429a      	cmp	r2, r3
    eed2:	d30b      	bcc.n	eeec <attcProcFindOrReadRsp+0x11c>
    eed4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    eed8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    eedc:	429a      	cmp	r2, r3
    eede:	d305      	bcc.n	eeec <attcProcFindOrReadRsp+0x11c>
          handle > pCcb->outReqParams.h.endHandle)
    eee0:	9b03      	ldr	r3, [sp, #12]
    eee2:	8c1b      	ldrh	r3, [r3, #32]
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
    eee4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    eee8:	429a      	cmp	r2, r3
    eeea:	d903      	bls.n	eef4 <attcProcFindOrReadRsp+0x124>
      {
        pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    eeec:	9b00      	ldr	r3, [sp, #0]
    eeee:	2273      	movs	r2, #115	; 0x73
    eef0:	70da      	strb	r2, [r3, #3]
        break;
    eef2:	e01f      	b.n	ef34 <attcProcFindOrReadRsp+0x164>
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
    eef4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    eef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eefc:	4293      	cmp	r3, r2
    eefe:	d103      	bne.n	ef08 <attcProcFindOrReadRsp+0x138>
    {
      nextHandle = 0;
    ef00:	2300      	movs	r3, #0
    ef02:	f8ad 3020 	strh.w	r3, [sp, #32]
    ef06:	e004      	b.n	ef12 <attcProcFindOrReadRsp+0x142>
    }
    else
    {
      nextHandle = handle + 1;
    ef08:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    ef0c:	3301      	adds	r3, #1
    ef0e:	f8ad 3020 	strh.w	r3, [sp, #32]
    }

    /* skip over parameter */
    p += paramLen;
    ef12:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ef16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef18:	4413      	add	r3, r2
    ef1a:	9309      	str	r3, [sp, #36]	; 0x24

    /* check for truncated response */
    if (p > pEnd)
    ef1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef1e:	9b06      	ldr	r3, [sp, #24]
    ef20:	429a      	cmp	r2, r3
    ef22:	d903      	bls.n	ef2c <attcProcFindOrReadRsp+0x15c>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    ef24:	9b00      	ldr	r3, [sp, #0]
    ef26:	2273      	movs	r2, #115	; 0x73
    ef28:	70da      	strb	r2, [r3, #3]
      break;
    ef2a:	e003      	b.n	ef34 <attcProcFindOrReadRsp+0x164>
  while (p < pEnd)
    ef2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef2e:	9b06      	ldr	r3, [sp, #24]
    ef30:	429a      	cmp	r2, r3
    ef32:	d387      	bcc.n	ee44 <attcProcFindOrReadRsp+0x74>
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
    ef34:	9b00      	ldr	r3, [sp, #0]
    ef36:	78db      	ldrb	r3, [r3, #3]
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d11a      	bne.n	ef72 <attcProcFindOrReadRsp+0x1a2>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    ef3c:	9b03      	ldr	r3, [sp, #12]
    ef3e:	7cdb      	ldrb	r3, [r3, #19]
    ef40:	2b01      	cmp	r3, #1
    ef42:	d116      	bne.n	ef72 <attcProcFindOrReadRsp+0x1a2>
    {
      /* if all handles read */
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
    ef44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d006      	beq.n	ef5a <attcProcFindOrReadRsp+0x18a>
    ef4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    ef50:	9b03      	ldr	r3, [sp, #12]
    ef52:	8c1b      	ldrh	r3, [r3, #32]
    ef54:	3301      	adds	r3, #1
    ef56:	429a      	cmp	r2, r3
    ef58:	d103      	bne.n	ef62 <attcProcFindOrReadRsp+0x192>
      {
        /* we're done */
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    ef5a:	9b03      	ldr	r3, [sp, #12]
    ef5c:	2200      	movs	r2, #0
    ef5e:	74da      	strb	r2, [r3, #19]
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
    ef60:	e007      	b.n	ef72 <attcProcFindOrReadRsp+0x1a2>
        pCcb->outReqParams.h.startHandle = nextHandle;
    ef62:	9b03      	ldr	r3, [sp, #12]
    ef64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    ef68:	83da      	strh	r2, [r3, #30]
        pCcb->outReq.handle = nextHandle;
    ef6a:	9b03      	ldr	r3, [sp, #12]
    ef6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    ef70:	831a      	strh	r2, [r3, #24]
}
    ef72:	bf00      	nop
    ef74:	b00a      	add	sp, #40	; 0x28
    ef76:	4770      	bx	lr

0000ef78 <attcProcReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    ef78:	b084      	sub	sp, #16
    ef7a:	9003      	str	r0, [sp, #12]
    ef7c:	9201      	str	r2, [sp, #4]
    ef7e:	9300      	str	r3, [sp, #0]
    ef80:	460b      	mov	r3, r1
    ef82:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* nothing to process */
}
    ef86:	bf00      	nop
    ef88:	b004      	add	sp, #16
    ef8a:	4770      	bx	lr

0000ef8c <attcProcWriteRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    ef8c:	b084      	sub	sp, #16
    ef8e:	9003      	str	r0, [sp, #12]
    ef90:	9201      	str	r2, [sp, #4]
    ef92:	9300      	str	r3, [sp, #0]
    ef94:	460b      	mov	r3, r1
    ef96:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* no parameters so clear length */
  pEvt->valueLen = 0;
    ef9a:	9b00      	ldr	r3, [sp, #0]
    ef9c:	2200      	movs	r2, #0
    ef9e:	811a      	strh	r2, [r3, #8]
}
    efa0:	bf00      	nop
    efa2:	b004      	add	sp, #16
    efa4:	4770      	bx	lr
	...

0000efa8 <attcProcRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    efa8:	b510      	push	{r4, lr}
    efaa:	b088      	sub	sp, #32
    efac:	9003      	str	r0, [sp, #12]
    efae:	460b      	mov	r3, r1
    efb0:	9201      	str	r2, [sp, #4]
    efb2:	f8ad 300a 	strh.w	r3, [sp, #10]
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
    efb6:	9b03      	ldr	r3, [sp, #12]
    efb8:	7c9b      	ldrb	r3, [r3, #18]
    efba:	2b00      	cmp	r3, #0
    efbc:	d071      	beq.n	f0a2 <attcProcRsp+0xfa>
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
    efbe:	9b01      	ldr	r3, [sp, #4]
    efc0:	3308      	adds	r3, #8
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	105b      	asrs	r3, r3, #1
    efc6:	b2db      	uxtb	r3, r3
    efc8:	f88d 3012 	strb.w	r3, [sp, #18]

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
    efcc:	f89d 3012 	ldrb.w	r3, [sp, #18]
    efd0:	2b00      	cmp	r3, #0
    efd2:	d005      	beq.n	efe0 <attcProcRsp+0x38>
    efd4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    efd8:	9b03      	ldr	r3, [sp, #12]
    efda:	7c9b      	ldrb	r3, [r3, #18]
    efdc:	429a      	cmp	r2, r3
    efde:	d162      	bne.n	f0a6 <attcProcRsp+0xfe>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
    efe0:	9b03      	ldr	r3, [sp, #12]
    efe2:	3324      	adds	r3, #36	; 0x24
    efe4:	4618      	mov	r0, r3
    efe6:	f7fe fc6b 	bl	d8c0 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    efea:	9b01      	ldr	r3, [sp, #4]
    efec:	3309      	adds	r3, #9
    efee:	9305      	str	r3, [sp, #20]
  evt.valueLen = len - ATT_HDR_LEN;
    eff0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    eff4:	3b01      	subs	r3, #1
    eff6:	b29b      	uxth	r3, r3
    eff8:	f8ad 3018 	strh.w	r3, [sp, #24]
  evt.handle = pCcb->outReq.handle;
    effc:	9b03      	ldr	r3, [sp, #12]
    effe:	8b1b      	ldrh	r3, [r3, #24]
    f000:	f8ad 301a 	strh.w	r3, [sp, #26]
  evt.hdr.status = ATT_SUCCESS;
    f004:	2300      	movs	r3, #0
    f006:	f88d 3013 	strb.w	r3, [sp, #19]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
    f00a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f00e:	461a      	mov	r2, r3
    f010:	4b26      	ldr	r3, [pc, #152]	; (f0ac <attcProcRsp+0x104>)
    f012:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    f016:	ab04      	add	r3, sp, #16
    f018:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    f01c:	9a01      	ldr	r2, [sp, #4]
    f01e:	9803      	ldr	r0, [sp, #12]
    f020:	47a0      	blx	r4

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
    f022:	9b03      	ldr	r3, [sp, #12]
    f024:	7cdb      	ldrb	r3, [r3, #19]
    f026:	2b00      	cmp	r3, #0
    f028:	d003      	beq.n	f032 <attcProcRsp+0x8a>
    f02a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f02e:	2b00      	cmp	r3, #0
    f030:	d007      	beq.n	f042 <attcProcRsp+0x9a>
  {
    /* we're not sending another request so clear the out req */
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    f032:	9b03      	ldr	r3, [sp, #12]
    f034:	2200      	movs	r2, #0
    f036:	749a      	strb	r2, [r3, #18]
    attcFreePkt(&pCcb->outReq);
    f038:	9b03      	ldr	r3, [sp, #12]
    f03a:	3310      	adds	r3, #16
    f03c:	4618      	mov	r0, r3
    f03e:	f7ff fdb1 	bl	eba4 <attcFreePkt>
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
    f042:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f046:	2b01      	cmp	r3, #1
    f048:	d010      	beq.n	f06c <attcProcRsp+0xc4>
    f04a:	4b19      	ldr	r3, [pc, #100]	; (f0b0 <attcProcRsp+0x108>)
    f04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    f04e:	2b00      	cmp	r3, #0
    f050:	d00c      	beq.n	f06c <attcProcRsp+0xc4>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
    f052:	9b03      	ldr	r3, [sp, #12]
    f054:	7cdb      	ldrb	r3, [r3, #19]
    f056:	f88d 301c 	strb.w	r3, [sp, #28]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
    f05a:	9b03      	ldr	r3, [sp, #12]
    f05c:	8a1b      	ldrh	r3, [r3, #16]
    f05e:	f8ad 3010 	strh.w	r3, [sp, #16]
    (*attCb.cback)(&evt);
    f062:	4b13      	ldr	r3, [pc, #76]	; (f0b0 <attcProcRsp+0x108>)
    f064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    f066:	aa04      	add	r2, sp, #16
    f068:	4610      	mov	r0, r2
    f06a:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
    f06c:	9b03      	ldr	r3, [sp, #12]
    f06e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    f072:	2b00      	cmp	r3, #0
    f074:	d118      	bne.n	f0a8 <attcProcRsp+0x100>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
    f076:	9b03      	ldr	r3, [sp, #12]
    f078:	695b      	ldr	r3, [r3, #20]
    f07a:	2b00      	cmp	r3, #0
    f07c:	d003      	beq.n	f086 <attcProcRsp+0xde>
    {
      /* build and send request */
      attcSendReq(pCcb);
    f07e:	9803      	ldr	r0, [sp, #12]
    f080:	f7ff fb84 	bl	e78c <attcSendReq>
    f084:	e010      	b.n	f0a8 <attcProcRsp+0x100>
    }
    /* else if api is on deck */
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
    f086:	9b03      	ldr	r3, [sp, #12]
    f088:	799b      	ldrb	r3, [r3, #6]
    f08a:	2b00      	cmp	r3, #0
    f08c:	d00c      	beq.n	f0a8 <attcProcRsp+0x100>
    {
      /* set up and send request */
      attcSetupReq(pCcb, &pCcb->onDeck);
    f08e:	9b03      	ldr	r3, [sp, #12]
    f090:	3304      	adds	r3, #4
    f092:	4619      	mov	r1, r3
    f094:	9803      	ldr	r0, [sp, #12]
    f096:	f7ff fb8b 	bl	e7b0 <attcSetupReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
    f09a:	9b03      	ldr	r3, [sp, #12]
    f09c:	2200      	movs	r2, #0
    f09e:	719a      	strb	r2, [r3, #6]
    f0a0:	e002      	b.n	f0a8 <attcProcRsp+0x100>
    return;
    f0a2:	bf00      	nop
    f0a4:	e000      	b.n	f0a8 <attcProcRsp+0x100>
    return;
    f0a6:	bf00      	nop
    }
  }
}
    f0a8:	b008      	add	sp, #32
    f0aa:	bd10      	pop	{r4, pc}
    f0ac:	0002c194 	.word	0x0002c194
    f0b0:	10008a98 	.word	0x10008a98

0000f0b4 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    f0b4:	b500      	push	{lr}
    f0b6:	b08b      	sub	sp, #44	; 0x2c
    f0b8:	9003      	str	r0, [sp, #12]
    f0ba:	460b      	mov	r3, r1
    f0bc:	9201      	str	r2, [sp, #4]
    f0be:	f8ad 300a 	strh.w	r3, [sp, #10]
  attEvt_t    evt;
  uint8_t     *p;
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;
    f0c2:	9b01      	ldr	r3, [sp, #4]
    f0c4:	3308      	adds	r3, #8
    f0c6:	9309      	str	r3, [sp, #36]	; 0x24

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
    f0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0ca:	1c5a      	adds	r2, r3, #1
    f0cc:	9209      	str	r2, [sp, #36]	; 0x24
    f0ce:	781b      	ldrb	r3, [r3, #0]
    f0d0:	105b      	asrs	r3, r3, #1
    f0d2:	b2db      	uxtb	r3, r3
    f0d4:	f88d 3012 	strb.w	r3, [sp, #18]
  BSTREAM_TO_UINT16(evt.handle, p);
    f0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0da:	781b      	ldrb	r3, [r3, #0]
    f0dc:	b29a      	uxth	r2, r3
    f0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0e0:	3301      	adds	r3, #1
    f0e2:	781b      	ldrb	r3, [r3, #0]
    f0e4:	b29b      	uxth	r3, r3
    f0e6:	021b      	lsls	r3, r3, #8
    f0e8:	b29b      	uxth	r3, r3
    f0ea:	4413      	add	r3, r2
    f0ec:	b29b      	uxth	r3, r3
    f0ee:	f8ad 301a 	strh.w	r3, [sp, #26]
    f0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0f4:	3302      	adds	r3, #2
    f0f6:	9309      	str	r3, [sp, #36]	; 0x24
  evt.pValue = p;
    f0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0fa:	9305      	str	r3, [sp, #20]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
    f0fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    f100:	3b03      	subs	r3, #3
    f102:	b29b      	uxth	r3, r3
    f104:	f8ad 3018 	strh.w	r3, [sp, #24]
  evt.hdr.param = pCcb->pMainCcb->connId;
    f108:	9b03      	ldr	r3, [sp, #12]
    f10a:	681b      	ldr	r3, [r3, #0]
    f10c:	7f1b      	ldrb	r3, [r3, #28]
    f10e:	b29b      	uxth	r3, r3
    f110:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.hdr.status = ATT_SUCCESS;
    f114:	2300      	movs	r3, #0
    f116:	f88d 3013 	strb.w	r3, [sp, #19]
  evt.continuing = FALSE;
    f11a:	2300      	movs	r3, #0
    f11c:	f88d 301c 	strb.w	r3, [sp, #28]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
    f120:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f124:	2b00      	cmp	r3, #0
    f126:	d008      	beq.n	f13a <attcProcInd+0x86>
    f128:	4b19      	ldr	r3, [pc, #100]	; (f190 <attcProcInd+0xdc>)
    f12a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    f12c:	2b00      	cmp	r3, #0
    f12e:	d004      	beq.n	f13a <attcProcInd+0x86>
  {
    (*attCb.cback)(&evt);
    f130:	4b17      	ldr	r3, [pc, #92]	; (f190 <attcProcInd+0xdc>)
    f132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    f134:	aa04      	add	r2, sp, #16
    f136:	4610      	mov	r0, r2
    f138:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
    f13a:	4b16      	ldr	r3, [pc, #88]	; (f194 <attcProcInd+0xe0>)
    f13c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f140:	2b00      	cmp	r3, #0
    f142:	d01c      	beq.n	f17e <attcProcInd+0xca>
    f144:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f148:	2b0e      	cmp	r3, #14
    f14a:	d118      	bne.n	f17e <attcProcInd+0xca>
  {
    if (!pCcb->flowDisabled)
    f14c:	9b03      	ldr	r3, [sp, #12]
    f14e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    f152:	2b00      	cmp	r3, #0
    f154:	d118      	bne.n	f188 <attcProcInd+0xd4>
    {
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    f156:	2009      	movs	r0, #9
    f158:	f003 ffc4 	bl	130e4 <attMsgAlloc>
    f15c:	9008      	str	r0, [sp, #32]
    f15e:	9b08      	ldr	r3, [sp, #32]
    f160:	2b00      	cmp	r3, #0
    f162:	d011      	beq.n	f188 <attcProcInd+0xd4>
      {
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
    f164:	9b08      	ldr	r3, [sp, #32]
    f166:	3308      	adds	r3, #8
    f168:	221e      	movs	r2, #30
    f16a:	701a      	strb	r2, [r3, #0]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    f16c:	9b03      	ldr	r3, [sp, #12]
    f16e:	681b      	ldr	r3, [r3, #0]
    f170:	8b19      	ldrh	r1, [r3, #24]
    f172:	9b08      	ldr	r3, [sp, #32]
    f174:	2201      	movs	r2, #1
    f176:	2004      	movs	r0, #4
    f178:	f7fd fa9a 	bl	c6b0 <L2cDataReq>
    f17c:	e005      	b.n	f18a <attcProcInd+0xd6>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
    f17e:	9b03      	ldr	r3, [sp, #12]
    f180:	2201      	movs	r2, #1
    f182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    f186:	e000      	b.n	f18a <attcProcInd+0xd6>
    return;
    f188:	bf00      	nop
}
    f18a:	b00b      	add	sp, #44	; 0x2c
    f18c:	f85d fb04 	ldr.w	pc, [sp], #4
    f190:	10008a98 	.word	0x10008a98
    f194:	1000896c 	.word	0x1000896c

0000f198 <attcSendMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendMsg(dmConnId_t connId, uint16_t handle, uint8_t msgId, attcPktParam_t *pPkt, bool_t continuing)
{
    f198:	b500      	push	{lr}
    f19a:	b087      	sub	sp, #28
    f19c:	9300      	str	r3, [sp, #0]
    f19e:	4603      	mov	r3, r0
    f1a0:	f88d 3007 	strb.w	r3, [sp, #7]
    f1a4:	460b      	mov	r3, r1
    f1a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    f1aa:	4613      	mov	r3, r2
    f1ac:	f88d 3006 	strb.w	r3, [sp, #6]
  attcCcb_t   *pCcb;
  uint16_t    mtu;
  bool_t      transTimedOut;

  WsfTaskLock();
    f1b0:	f7fe f86c 	bl	d28c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
    f1b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1b8:	4618      	mov	r0, r3
    f1ba:	f7ff fcab 	bl	eb14 <attcCcbByConnId>
    f1be:	9003      	str	r0, [sp, #12]
    f1c0:	9b03      	ldr	r3, [sp, #12]
    f1c2:	2b00      	cmp	r3, #0
    f1c4:	d011      	beq.n	f1ea <attcSendMsg+0x52>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
    f1c6:	9b03      	ldr	r3, [sp, #12]
    f1c8:	681b      	ldr	r3, [r3, #0]
    f1ca:	8b5b      	ldrh	r3, [r3, #26]
    f1cc:	f8ad 3016 	strh.w	r3, [sp, #22]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
    f1d0:	9b03      	ldr	r3, [sp, #12]
    f1d2:	681b      	ldr	r3, [r3, #0]
    f1d4:	7f5b      	ldrb	r3, [r3, #29]
    f1d6:	f003 0304 	and.w	r3, r3, #4
    f1da:	2b00      	cmp	r3, #0
    f1dc:	bf14      	ite	ne
    f1de:	2301      	movne	r3, #1
    f1e0:	2300      	moveq	r3, #0
    f1e2:	b2db      	uxtb	r3, r3
    f1e4:	f88d 3015 	strb.w	r3, [sp, #21]
    f1e8:	e005      	b.n	f1f6 <attcSendMsg+0x5e>
  }
  /* else connection not in use */
  else
  {
    /* MTU size unknown */
    mtu = 0;
    f1ea:	2300      	movs	r3, #0
    f1ec:	f8ad 3016 	strh.w	r3, [sp, #22]
    transTimedOut = FALSE;
    f1f0:	2300      	movs	r3, #0
    f1f2:	f88d 3015 	strb.w	r3, [sp, #21]
  }

  WsfTaskUnlock();
    f1f6:	f7fe f84e 	bl	d296 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
    f1fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    f1fe:	2b00      	cmp	r3, #0
    f200:	d057      	beq.n	f2b2 <attcSendMsg+0x11a>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
    f202:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f206:	2b00      	cmp	r3, #0
    f208:	d14a      	bne.n	f2a0 <attcSendMsg+0x108>
    {
      uint16_t dataLen = 0;
    f20a:	2300      	movs	r3, #0
    f20c:	f8ad 3012 	strh.w	r3, [sp, #18]

      /* if packet is not null then find out its length */
      if (pPkt != NULL)
    f210:	9b00      	ldr	r3, [sp, #0]
    f212:	2b00      	cmp	r3, #0
    f214:	d011      	beq.n	f23a <attcSendMsg+0xa2>
      {
        /* if not prepare write request */
        if (msgId != ATTC_MSG_API_PREP_WRITE)
    f216:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f21a:	2b0b      	cmp	r3, #11
    f21c:	d004      	beq.n	f228 <attcSendMsg+0x90>
        {
          dataLen = pPkt->len;
    f21e:	9b00      	ldr	r3, [sp, #0]
    f220:	881b      	ldrh	r3, [r3, #0]
    f222:	f8ad 3012 	strh.w	r3, [sp, #18]
    f226:	e008      	b.n	f23a <attcSendMsg+0xa2>
        }
        /* else prepare write request */
        else
        {
          /* if not continuing */
          if (!continuing)
    f228:	f89d 3020 	ldrb.w	r3, [sp, #32]
    f22c:	2b00      	cmp	r3, #0
    f22e:	d104      	bne.n	f23a <attcSendMsg+0xa2>
          {
            /* single prepare write request */
            dataLen = ATT_PREP_WRITE_REQ_LEN + pPkt->w.len;
    f230:	9b00      	ldr	r3, [sp, #0]
    f232:	881b      	ldrh	r3, [r3, #0]
    f234:	3305      	adds	r3, #5
    f236:	f8ad 3012 	strh.w	r3, [sp, #18]
          /* else will be sent as multiple prepare write requests */
        }
      }

      /* if packet length is less than or equal to negotiated MTU */
      if (dataLen <= mtu)
    f23a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    f23e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    f242:	429a      	cmp	r2, r3
    f244:	d822      	bhi.n	f28c <attcSendMsg+0xf4>
      {
        attcApiMsg_t *pMsg;

        /* allocate message buffer */
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
    f246:	200c      	movs	r0, #12
    f248:	f7fd ff94 	bl	d174 <WsfMsgAlloc>
    f24c:	9002      	str	r0, [sp, #8]
    f24e:	9b02      	ldr	r3, [sp, #8]
    f250:	2b00      	cmp	r3, #0
    f252:	d02e      	beq.n	f2b2 <attcSendMsg+0x11a>
        {
          /* set parameters */
          pMsg->hdr.param = connId;
    f254:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f258:	b29a      	uxth	r2, r3
    f25a:	9b02      	ldr	r3, [sp, #8]
    f25c:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = continuing;
    f25e:	9b02      	ldr	r3, [sp, #8]
    f260:	f89d 2020 	ldrb.w	r2, [sp, #32]
    f264:	70da      	strb	r2, [r3, #3]
          pMsg->hdr.event = msgId;
    f266:	9b02      	ldr	r3, [sp, #8]
    f268:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f26c:	709a      	strb	r2, [r3, #2]
          pMsg->pPkt = pPkt;
    f26e:	9b02      	ldr	r3, [sp, #8]
    f270:	9a00      	ldr	r2, [sp, #0]
    f272:	605a      	str	r2, [r3, #4]
          pMsg->handle = handle;
    f274:	9b02      	ldr	r3, [sp, #8]
    f276:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f27a:	811a      	strh	r2, [r3, #8]

          /* send message */
          WsfMsgSend(attCb.handlerId, pMsg);
    f27c:	4b11      	ldr	r3, [pc, #68]	; (f2c4 <attcSendMsg+0x12c>)
    f27e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f282:	9902      	ldr	r1, [sp, #8]
    f284:	4618      	mov	r0, r3
    f286:	f7fd ff99 	bl	d1bc <WsfMsgSend>
          return;
    f28a:	e018      	b.n	f2be <attcSendMsg+0x126>
      }
      /* else packet length exceeds MTU size */
      else
      {
        /* call callback with failure status */
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
    f28c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f290:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f294:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f298:	2377      	movs	r3, #119	; 0x77
    f29a:	f7ff fc96 	bl	ebca <attcExecCallback>
    f29e:	e008      	b.n	f2b2 <attcSendMsg+0x11a>
    }
    else
    /* transaction's timed out */
    {
      /* call callback with failure status */
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
    f2a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f2a4:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f2a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f2ac:	2371      	movs	r3, #113	; 0x71
    f2ae:	f7ff fc8c 	bl	ebca <attcExecCallback>
    }
  }

  /* alloc failed, transaction's timed out or packet length exceeded MTU size; free packet buffer */
  if (pPkt != NULL)
    f2b2:	9b00      	ldr	r3, [sp, #0]
    f2b4:	2b00      	cmp	r3, #0
    f2b6:	d002      	beq.n	f2be <attcSendMsg+0x126>
  {
    WsfMsgFree(pPkt);
    f2b8:	9800      	ldr	r0, [sp, #0]
    f2ba:	f7fd ff73 	bl	d1a4 <WsfMsgFree>
  }
}
    f2be:	b007      	add	sp, #28
    f2c0:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c4:	10008a98 	.word	0x10008a98

0000f2c8 <AttcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindInfoReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle, bool_t continuing)
{
    f2c8:	b510      	push	{r4, lr}
    f2ca:	b086      	sub	sp, #24
    f2cc:	4604      	mov	r4, r0
    f2ce:	4608      	mov	r0, r1
    f2d0:	4611      	mov	r1, r2
    f2d2:	461a      	mov	r2, r3
    f2d4:	4623      	mov	r3, r4
    f2d6:	f88d 300f 	strb.w	r3, [sp, #15]
    f2da:	4603      	mov	r3, r0
    f2dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    f2e0:	460b      	mov	r3, r1
    f2e2:	f8ad 300a 	strh.w	r3, [sp, #10]
    f2e6:	4613      	mov	r3, r2
    f2e8:	f88d 300e 	strb.w	r3, [sp, #14]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
    f2ec:	200d      	movs	r0, #13
    f2ee:	f003 fef9 	bl	130e4 <attMsgAlloc>
    f2f2:	9005      	str	r0, [sp, #20]
    f2f4:	9b05      	ldr	r3, [sp, #20]
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d01d      	beq.n	f336 <AttcFindInfoReq+0x6e>
  {
    /* set parameters */
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
    f2fa:	9b05      	ldr	r3, [sp, #20]
    f2fc:	2205      	movs	r2, #5
    f2fe:	801a      	strh	r2, [r3, #0]
    pPkt->h.startHandle = startHandle;
    f300:	9b05      	ldr	r3, [sp, #20]
    f302:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f306:	805a      	strh	r2, [r3, #2]
    pPkt->h.endHandle = endHandle;
    f308:	9b05      	ldr	r3, [sp, #20]
    f30a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f30e:	809a      	strh	r2, [r3, #4]

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f310:	9b05      	ldr	r3, [sp, #20]
    f312:	3308      	adds	r3, #8
    f314:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_REQ);
    f316:	9b04      	ldr	r3, [sp, #16]
    f318:	1c5a      	adds	r2, r3, #1
    f31a:	9204      	str	r2, [sp, #16]
    f31c:	2204      	movs	r2, #4
    f31e:	701a      	strb	r2, [r3, #0]

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_INFO, pPkt, continuing);
    f320:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f324:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f328:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f32c:	9300      	str	r3, [sp, #0]
    f32e:	9b05      	ldr	r3, [sp, #20]
    f330:	2202      	movs	r2, #2
    f332:	f7ff ff31 	bl	f198 <attcSendMsg>
  }
}
    f336:	bf00      	nop
    f338:	b006      	add	sp, #24
    f33a:	bd10      	pop	{r4, pc}

0000f33c <AttcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadReq(dmConnId_t connId, uint16_t handle)
{
    f33c:	b500      	push	{lr}
    f33e:	b087      	sub	sp, #28
    f340:	4603      	mov	r3, r0
    f342:	460a      	mov	r2, r1
    f344:	f88d 300f 	strb.w	r3, [sp, #15]
    f348:	4613      	mov	r3, r2
    f34a:	f8ad 300c 	strh.w	r3, [sp, #12]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
    f34e:	200b      	movs	r0, #11
    f350:	f003 fec8 	bl	130e4 <attMsgAlloc>
    f354:	9005      	str	r0, [sp, #20]
    f356:	9b05      	ldr	r3, [sp, #20]
    f358:	2b00      	cmp	r3, #0
    f35a:	d024      	beq.n	f3a6 <AttcReadReq+0x6a>
  {
    /* set length */
    pPkt->len = ATT_READ_REQ_LEN;
    f35c:	9b05      	ldr	r3, [sp, #20]
    f35e:	2203      	movs	r2, #3
    f360:	801a      	strh	r2, [r3, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f362:	9b05      	ldr	r3, [sp, #20]
    f364:	3308      	adds	r3, #8
    f366:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_REQ);
    f368:	9b04      	ldr	r3, [sp, #16]
    f36a:	1c5a      	adds	r2, r3, #1
    f36c:	9204      	str	r2, [sp, #16]
    f36e:	220a      	movs	r2, #10
    f370:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, handle);
    f372:	9b04      	ldr	r3, [sp, #16]
    f374:	1c5a      	adds	r2, r3, #1
    f376:	9204      	str	r2, [sp, #16]
    f378:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f37c:	b2d2      	uxtb	r2, r2
    f37e:	701a      	strb	r2, [r3, #0]
    f380:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    f384:	0a1b      	lsrs	r3, r3, #8
    f386:	b299      	uxth	r1, r3
    f388:	9b04      	ldr	r3, [sp, #16]
    f38a:	1c5a      	adds	r2, r3, #1
    f38c:	9204      	str	r2, [sp, #16]
    f38e:	b2ca      	uxtb	r2, r1
    f390:	701a      	strb	r2, [r3, #0]

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_READ, pPkt, FALSE);
    f392:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f396:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f39a:	2300      	movs	r3, #0
    f39c:	9300      	str	r3, [sp, #0]
    f39e:	9b05      	ldr	r3, [sp, #20]
    f3a0:	2205      	movs	r2, #5
    f3a2:	f7ff fef9 	bl	f198 <attcSendMsg>
  }
}
    f3a6:	bf00      	nop
    f3a8:	b007      	add	sp, #28
    f3aa:	f85d fb04 	ldr.w	pc, [sp], #4

0000f3ae <AttcWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteReq(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
    f3ae:	b500      	push	{lr}
    f3b0:	b089      	sub	sp, #36	; 0x24
    f3b2:	9303      	str	r3, [sp, #12]
    f3b4:	4603      	mov	r3, r0
    f3b6:	f88d 3017 	strb.w	r3, [sp, #23]
    f3ba:	460b      	mov	r3, r1
    f3bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    f3c0:	4613      	mov	r3, r2
    f3c2:	f8ad 3012 	strh.w	r3, [sp, #18]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
    f3c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f3ca:	330b      	adds	r3, #11
    f3cc:	b29b      	uxth	r3, r3
    f3ce:	4618      	mov	r0, r3
    f3d0:	f003 fe88 	bl	130e4 <attMsgAlloc>
    f3d4:	9007      	str	r0, [sp, #28]
    f3d6:	9b07      	ldr	r3, [sp, #28]
    f3d8:	2b00      	cmp	r3, #0
    f3da:	d02e      	beq.n	f43a <AttcWriteReq+0x8c>
  {
    /* set length */
    pPkt->len = ATT_WRITE_REQ_LEN + valueLen;
    f3dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f3e0:	3303      	adds	r3, #3
    f3e2:	b29a      	uxth	r2, r3
    f3e4:	9b07      	ldr	r3, [sp, #28]
    f3e6:	801a      	strh	r2, [r3, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f3e8:	9b07      	ldr	r3, [sp, #28]
    f3ea:	3308      	adds	r3, #8
    f3ec:	9306      	str	r3, [sp, #24]
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_REQ);
    f3ee:	9b06      	ldr	r3, [sp, #24]
    f3f0:	1c5a      	adds	r2, r3, #1
    f3f2:	9206      	str	r2, [sp, #24]
    f3f4:	2212      	movs	r2, #18
    f3f6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, handle);
    f3f8:	9b06      	ldr	r3, [sp, #24]
    f3fa:	1c5a      	adds	r2, r3, #1
    f3fc:	9206      	str	r2, [sp, #24]
    f3fe:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    f402:	b2d2      	uxtb	r2, r2
    f404:	701a      	strb	r2, [r3, #0]
    f406:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    f40a:	0a1b      	lsrs	r3, r3, #8
    f40c:	b299      	uxth	r1, r3
    f40e:	9b06      	ldr	r3, [sp, #24]
    f410:	1c5a      	adds	r2, r3, #1
    f412:	9206      	str	r2, [sp, #24]
    f414:	b2ca      	uxtb	r2, r1
    f416:	701a      	strb	r2, [r3, #0]
    memcpy(p, pValue, valueLen);
    f418:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f41c:	461a      	mov	r2, r3
    f41e:	9903      	ldr	r1, [sp, #12]
    f420:	9806      	ldr	r0, [sp, #24]
    f422:	f7fc fe6d 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE, pPkt, FALSE);
    f426:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    f42a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    f42e:	2300      	movs	r3, #0
    f430:	9300      	str	r3, [sp, #0]
    f432:	9b07      	ldr	r3, [sp, #28]
    f434:	2209      	movs	r2, #9
    f436:	f7ff feaf 	bl	f198 <attcSendMsg>
  }
}
    f43a:	bf00      	nop
    f43c:	b009      	add	sp, #36	; 0x24
    f43e:	f85d fb04 	ldr.w	pc, [sp], #4

0000f442 <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
    f442:	b500      	push	{lr}
    f444:	b087      	sub	sp, #28
    f446:	4603      	mov	r3, r0
    f448:	460a      	mov	r2, r1
    f44a:	f88d 300f 	strb.w	r3, [sp, #15]
    f44e:	4613      	mov	r3, r2
    f450:	f8ad 300c 	strh.w	r3, [sp, #12]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
    f454:	200b      	movs	r0, #11
    f456:	f003 fe45 	bl	130e4 <attMsgAlloc>
    f45a:	9005      	str	r0, [sp, #20]
    f45c:	9b05      	ldr	r3, [sp, #20]
    f45e:	2b00      	cmp	r3, #0
    f460:	d023      	beq.n	f4aa <AttcMtuReq+0x68>
  {
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;
    f462:	9b05      	ldr	r3, [sp, #20]
    f464:	2203      	movs	r2, #3
    f466:	801a      	strh	r2, [r3, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f468:	9b05      	ldr	r3, [sp, #20]
    f46a:	3308      	adds	r3, #8
    f46c:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
    f46e:	9b04      	ldr	r3, [sp, #16]
    f470:	1c5a      	adds	r2, r3, #1
    f472:	9204      	str	r2, [sp, #16]
    f474:	2202      	movs	r2, #2
    f476:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, mtu);
    f478:	9b04      	ldr	r3, [sp, #16]
    f47a:	1c5a      	adds	r2, r3, #1
    f47c:	9204      	str	r2, [sp, #16]
    f47e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f482:	b2d2      	uxtb	r2, r2
    f484:	701a      	strb	r2, [r3, #0]
    f486:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    f48a:	0a1b      	lsrs	r3, r3, #8
    f48c:	b299      	uxth	r1, r3
    f48e:	9b04      	ldr	r3, [sp, #16]
    f490:	1c5a      	adds	r2, r3, #1
    f492:	9204      	str	r2, [sp, #16]
    f494:	b2ca      	uxtb	r2, r1
    f496:	701a      	strb	r2, [r3, #0]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
    f498:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f49c:	2300      	movs	r3, #0
    f49e:	9300      	str	r3, [sp, #0]
    f4a0:	9b05      	ldr	r3, [sp, #20]
    f4a2:	2201      	movs	r2, #1
    f4a4:	2100      	movs	r1, #0
    f4a6:	f7ff fe77 	bl	f198 <attcSendMsg>
  }
}
    f4aa:	bf00      	nop
    f4ac:	b007      	add	sp, #28
    f4ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000f4b2 <AttcIndConfirm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcIndConfirm(dmConnId_t connId)
{
    f4b2:	b500      	push	{lr}
    f4b4:	b085      	sub	sp, #20
    f4b6:	4603      	mov	r3, r0
    f4b8:	f88d 3007 	strb.w	r3, [sp, #7]
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
    f4bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4c0:	b29b      	uxth	r3, r3
    f4c2:	3b01      	subs	r3, #1
    f4c4:	b29b      	uxth	r3, r3
    f4c6:	4618      	mov	r0, r3
    f4c8:	f7ff fb4a 	bl	eb60 <attcCcbByHandle>
    f4cc:	9003      	str	r0, [sp, #12]

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
    f4ce:	9b03      	ldr	r3, [sp, #12]
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d020      	beq.n	f516 <AttcIndConfirm+0x64>
    f4d4:	9b03      	ldr	r3, [sp, #12]
    f4d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d01b      	beq.n	f516 <AttcIndConfirm+0x64>
    f4de:	9b03      	ldr	r3, [sp, #12]
    f4e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d116      	bne.n	f516 <AttcIndConfirm+0x64>
  {
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    f4e8:	2009      	movs	r0, #9
    f4ea:	f003 fdfb 	bl	130e4 <attMsgAlloc>
    f4ee:	9002      	str	r0, [sp, #8]
    f4f0:	9b02      	ldr	r3, [sp, #8]
    f4f2:	2b00      	cmp	r3, #0
    f4f4:	d00f      	beq.n	f516 <AttcIndConfirm+0x64>
    {
      pCcb->cnfPending = FALSE;
    f4f6:	9b03      	ldr	r3, [sp, #12]
    f4f8:	2200      	movs	r2, #0
    f4fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
    f4fe:	9b02      	ldr	r3, [sp, #8]
    f500:	3308      	adds	r3, #8
    f502:	221e      	movs	r2, #30
    f504:	701a      	strb	r2, [r3, #0]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    f506:	9b03      	ldr	r3, [sp, #12]
    f508:	681b      	ldr	r3, [r3, #0]
    f50a:	8b19      	ldrh	r1, [r3, #24]
    f50c:	9b02      	ldr	r3, [sp, #8]
    f50e:	2201      	movs	r2, #1
    f510:	2004      	movs	r0, #4
    f512:	f7fd f8cd 	bl	c6b0 <L2cDataReq>
    }
  }
}
    f516:	bf00      	nop
    f518:	b005      	add	sp, #20
    f51a:	f85d fb04 	ldr.w	pc, [sp], #4

0000f51e <attcProcFindByTypeRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindByTypeRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    f51e:	b088      	sub	sp, #32
    f520:	9003      	str	r0, [sp, #12]
    f522:	9201      	str	r2, [sp, #4]
    f524:	9300      	str	r3, [sp, #0]
    f526:	460b      	mov	r3, r1
    f528:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t   *pEnd;
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    f52c:	9b01      	ldr	r3, [sp, #4]
    f52e:	3309      	adds	r3, #9
    f530:	9307      	str	r3, [sp, #28]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    f532:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    f536:	3308      	adds	r3, #8
    f538:	9a01      	ldr	r2, [sp, #4]
    f53a:	4413      	add	r3, r2
    f53c:	9305      	str	r3, [sp, #20]

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
    f53e:	9b03      	ldr	r3, [sp, #12]
    f540:	8bdb      	ldrh	r3, [r3, #30]
    f542:	f8ad 301a 	strh.w	r3, [sp, #26]
  while (p < pEnd)
    f546:	e04e      	b.n	f5e6 <attcProcFindByTypeRsp+0xc8>
  {
    /* get handle pair */
    BSTREAM_TO_UINT16(startHandle, p);
    f548:	9b07      	ldr	r3, [sp, #28]
    f54a:	781b      	ldrb	r3, [r3, #0]
    f54c:	b29a      	uxth	r2, r3
    f54e:	9b07      	ldr	r3, [sp, #28]
    f550:	3301      	adds	r3, #1
    f552:	781b      	ldrb	r3, [r3, #0]
    f554:	b29b      	uxth	r3, r3
    f556:	021b      	lsls	r3, r3, #8
    f558:	b29b      	uxth	r3, r3
    f55a:	4413      	add	r3, r2
    f55c:	f8ad 3012 	strh.w	r3, [sp, #18]
    f560:	9b07      	ldr	r3, [sp, #28]
    f562:	3302      	adds	r3, #2
    f564:	9307      	str	r3, [sp, #28]
    BSTREAM_TO_UINT16(endHandle, p);
    f566:	9b07      	ldr	r3, [sp, #28]
    f568:	781b      	ldrb	r3, [r3, #0]
    f56a:	b29a      	uxth	r2, r3
    f56c:	9b07      	ldr	r3, [sp, #28]
    f56e:	3301      	adds	r3, #1
    f570:	781b      	ldrb	r3, [r3, #0]
    f572:	b29b      	uxth	r3, r3
    f574:	021b      	lsls	r3, r3, #8
    f576:	b29b      	uxth	r3, r3
    f578:	4413      	add	r3, r2
    f57a:	f8ad 3010 	strh.w	r3, [sp, #16]
    f57e:	9b07      	ldr	r3, [sp, #28]
    f580:	3302      	adds	r3, #2
    f582:	9307      	str	r3, [sp, #28]
     *  not greater than end handle of handle pair
     *  not less than than start handle of request or end handle of previous handle pair
     *  not greater than end handle of request
     * and no additional handle pairs following end handle = 0xFFFF
     */
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
    f584:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    f588:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f58c:	429a      	cmp	r2, r3
    f58e:	d80f      	bhi.n	f5b0 <attcProcFindByTypeRsp+0x92>
    f590:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    f594:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f598:	429a      	cmp	r2, r3
    f59a:	d309      	bcc.n	f5b0 <attcProcFindByTypeRsp+0x92>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
    f59c:	9b03      	ldr	r3, [sp, #12]
    f59e:	8c1b      	ldrh	r3, [r3, #32]
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
    f5a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    f5a4:	429a      	cmp	r2, r3
    f5a6:	d803      	bhi.n	f5b0 <attcProcFindByTypeRsp+0x92>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
    f5a8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f5ac:	2b00      	cmp	r3, #0
    f5ae:	d103      	bne.n	f5b8 <attcProcFindByTypeRsp+0x9a>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    f5b0:	9b00      	ldr	r3, [sp, #0]
    f5b2:	2273      	movs	r2, #115	; 0x73
    f5b4:	70da      	strb	r2, [r3, #3]
      break;
    f5b6:	e01a      	b.n	f5ee <attcProcFindByTypeRsp+0xd0>
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
    f5b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f5bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f5c0:	4293      	cmp	r3, r2
    f5c2:	d103      	bne.n	f5cc <attcProcFindByTypeRsp+0xae>
    {
      nextHandle = 0;
    f5c4:	2300      	movs	r3, #0
    f5c6:	f8ad 301a 	strh.w	r3, [sp, #26]
    f5ca:	e004      	b.n	f5d6 <attcProcFindByTypeRsp+0xb8>
    }
    else
    {
      nextHandle = endHandle + 1;
    f5cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f5d0:	3301      	adds	r3, #1
    f5d2:	f8ad 301a 	strh.w	r3, [sp, #26]
    }

    /* check for truncated response */
    if (p > pEnd)
    f5d6:	9a07      	ldr	r2, [sp, #28]
    f5d8:	9b05      	ldr	r3, [sp, #20]
    f5da:	429a      	cmp	r2, r3
    f5dc:	d903      	bls.n	f5e6 <attcProcFindByTypeRsp+0xc8>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    f5de:	9b00      	ldr	r3, [sp, #0]
    f5e0:	2273      	movs	r2, #115	; 0x73
    f5e2:	70da      	strb	r2, [r3, #3]
      break;
    f5e4:	e003      	b.n	f5ee <attcProcFindByTypeRsp+0xd0>
  while (p < pEnd)
    f5e6:	9a07      	ldr	r2, [sp, #28]
    f5e8:	9b05      	ldr	r3, [sp, #20]
    f5ea:	429a      	cmp	r2, r3
    f5ec:	d3ac      	bcc.n	f548 <attcProcFindByTypeRsp+0x2a>
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
    f5ee:	9b00      	ldr	r3, [sp, #0]
    f5f0:	78db      	ldrb	r3, [r3, #3]
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	d119      	bne.n	f62a <attcProcFindByTypeRsp+0x10c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    f5f6:	9b03      	ldr	r3, [sp, #12]
    f5f8:	7cdb      	ldrb	r3, [r3, #19]
    f5fa:	2b01      	cmp	r3, #1
    f5fc:	d115      	bne.n	f62a <attcProcFindByTypeRsp+0x10c>
    {
      /* if all handles read */
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
    f5fe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f602:	2b00      	cmp	r3, #0
    f604:	d005      	beq.n	f612 <attcProcFindByTypeRsp+0xf4>
    f606:	9b03      	ldr	r3, [sp, #12]
    f608:	8c1b      	ldrh	r3, [r3, #32]
    f60a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f60e:	429a      	cmp	r2, r3
    f610:	d903      	bls.n	f61a <attcProcFindByTypeRsp+0xfc>
      {
        /* we're done */
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    f612:	9b03      	ldr	r3, [sp, #12]
    f614:	2200      	movs	r2, #0
    f616:	74da      	strb	r2, [r3, #19]
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
    f618:	e007      	b.n	f62a <attcProcFindByTypeRsp+0x10c>
        pCcb->outReqParams.h.startHandle = nextHandle;
    f61a:	9b03      	ldr	r3, [sp, #12]
    f61c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f620:	83da      	strh	r2, [r3, #30]
        pCcb->outReq.handle = nextHandle;
    f622:	9b03      	ldr	r3, [sp, #12]
    f624:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f628:	831a      	strh	r2, [r3, #24]
}
    f62a:	bf00      	nop
    f62c:	b008      	add	sp, #32
    f62e:	4770      	bx	lr

0000f630 <attcProcReadLongRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    f630:	b084      	sub	sp, #16
    f632:	9003      	str	r0, [sp, #12]
    f634:	9201      	str	r2, [sp, #4]
    f636:	9300      	str	r3, [sp, #0]
    f638:	460b      	mov	r3, r1
    f63a:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    f63e:	9b03      	ldr	r3, [sp, #12]
    f640:	7cdb      	ldrb	r3, [r3, #19]
    f642:	2b01      	cmp	r3, #1
    f644:	d112      	bne.n	f66c <attcProcReadLongRsp+0x3c>
  {
    /* length of response is less than mtu */
    if (len < pCcb->pMainCcb->mtu)
    f646:	9b03      	ldr	r3, [sp, #12]
    f648:	681b      	ldr	r3, [r3, #0]
    f64a:	8b5b      	ldrh	r3, [r3, #26]
    f64c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f650:	429a      	cmp	r2, r3
    f652:	d203      	bcs.n	f65c <attcProcReadLongRsp+0x2c>
    {
      /* we're done */
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    f654:	9b03      	ldr	r3, [sp, #12]
    f656:	2200      	movs	r2, #0
    f658:	74da      	strb	r2, [r3, #19]
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
    f65a:	e007      	b.n	f66c <attcProcReadLongRsp+0x3c>
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    f65c:	9b03      	ldr	r3, [sp, #12]
    f65e:	8bda      	ldrh	r2, [r3, #30]
    f660:	9b00      	ldr	r3, [sp, #0]
    f662:	891b      	ldrh	r3, [r3, #8]
    f664:	4413      	add	r3, r2
    f666:	b29a      	uxth	r2, r3
    f668:	9b03      	ldr	r3, [sp, #12]
    f66a:	83da      	strh	r2, [r3, #30]
}
    f66c:	bf00      	nop
    f66e:	b004      	add	sp, #16
    f670:	4770      	bx	lr

0000f672 <AttcFindByTypeValueReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindByTypeValueReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                            uint16_t uuid16, uint16_t valueLen, uint8_t *pValue, bool_t continuing)
{
    f672:	b510      	push	{r4, lr}
    f674:	b086      	sub	sp, #24
    f676:	4604      	mov	r4, r0
    f678:	4608      	mov	r0, r1
    f67a:	4611      	mov	r1, r2
    f67c:	461a      	mov	r2, r3
    f67e:	4623      	mov	r3, r4
    f680:	f88d 300f 	strb.w	r3, [sp, #15]
    f684:	4603      	mov	r3, r0
    f686:	f8ad 300c 	strh.w	r3, [sp, #12]
    f68a:	460b      	mov	r3, r1
    f68c:	f8ad 300a 	strh.w	r3, [sp, #10]
    f690:	4613      	mov	r3, r2
    f692:	f8ad 3008 	strh.w	r3, [sp, #8]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
    f696:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f69a:	330f      	adds	r3, #15
    f69c:	b29b      	uxth	r3, r3
    f69e:	4618      	mov	r0, r3
    f6a0:	f003 fd20 	bl	130e4 <attMsgAlloc>
    f6a4:	9005      	str	r0, [sp, #20]
    f6a6:	9b05      	ldr	r3, [sp, #20]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d03a      	beq.n	f722 <AttcFindByTypeValueReq+0xb0>
  {
    /* set parameters */
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
    f6ac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f6b0:	3307      	adds	r3, #7
    f6b2:	b29a      	uxth	r2, r3
    f6b4:	9b05      	ldr	r3, [sp, #20]
    f6b6:	801a      	strh	r2, [r3, #0]
    pPkt->h.startHandle = startHandle;
    f6b8:	9b05      	ldr	r3, [sp, #20]
    f6ba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f6be:	805a      	strh	r2, [r3, #2]
    pPkt->h.endHandle = endHandle;
    f6c0:	9b05      	ldr	r3, [sp, #20]
    f6c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f6c6:	809a      	strh	r2, [r3, #4]

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f6c8:	9b05      	ldr	r3, [sp, #20]
    f6ca:	3308      	adds	r3, #8
    f6cc:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
    f6ce:	9b04      	ldr	r3, [sp, #16]
    f6d0:	1c5a      	adds	r2, r3, #1
    f6d2:	9204      	str	r2, [sp, #16]
    f6d4:	2206      	movs	r2, #6
    f6d6:	701a      	strb	r2, [r3, #0]
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    f6d8:	9b04      	ldr	r3, [sp, #16]
    f6da:	3304      	adds	r3, #4
    f6dc:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, uuid16);
    f6de:	9b04      	ldr	r3, [sp, #16]
    f6e0:	1c5a      	adds	r2, r3, #1
    f6e2:	9204      	str	r2, [sp, #16]
    f6e4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    f6e8:	b2d2      	uxtb	r2, r2
    f6ea:	701a      	strb	r2, [r3, #0]
    f6ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f6f0:	0a1b      	lsrs	r3, r3, #8
    f6f2:	b299      	uxth	r1, r3
    f6f4:	9b04      	ldr	r3, [sp, #16]
    f6f6:	1c5a      	adds	r2, r3, #1
    f6f8:	9204      	str	r2, [sp, #16]
    f6fa:	b2ca      	uxtb	r2, r1
    f6fc:	701a      	strb	r2, [r3, #0]
    memcpy(p, pValue, valueLen);
    f6fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f702:	461a      	mov	r2, r3
    f704:	9909      	ldr	r1, [sp, #36]	; 0x24
    f706:	9804      	ldr	r0, [sp, #16]
    f708:	f7fc fcfa 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
    f70c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f710:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f714:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f718:	9300      	str	r3, [sp, #0]
    f71a:	9b05      	ldr	r3, [sp, #20]
    f71c:	2203      	movs	r2, #3
    f71e:	f7ff fd3b 	bl	f198 <attcSendMsg>
  }
}
    f722:	bf00      	nop
    f724:	b006      	add	sp, #24
    f726:	bd10      	pop	{r4, pc}

0000f728 <AttcReadByTypeReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadByTypeReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                       uint8_t uuidLen, uint8_t *pUuid, bool_t continuing)
{
    f728:	b510      	push	{r4, lr}
    f72a:	b086      	sub	sp, #24
    f72c:	4604      	mov	r4, r0
    f72e:	4608      	mov	r0, r1
    f730:	4611      	mov	r1, r2
    f732:	461a      	mov	r2, r3
    f734:	4623      	mov	r3, r4
    f736:	f88d 300f 	strb.w	r3, [sp, #15]
    f73a:	4603      	mov	r3, r0
    f73c:	f8ad 300c 	strh.w	r3, [sp, #12]
    f740:	460b      	mov	r3, r1
    f742:	f8ad 300a 	strh.w	r3, [sp, #10]
    f746:	4613      	mov	r3, r2
    f748:	f88d 300e 	strb.w	r3, [sp, #14]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
    f74c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f750:	b29b      	uxth	r3, r3
    f752:	330d      	adds	r3, #13
    f754:	b29b      	uxth	r3, r3
    f756:	4618      	mov	r0, r3
    f758:	f003 fcc4 	bl	130e4 <attMsgAlloc>
    f75c:	9005      	str	r0, [sp, #20]
    f75e:	9b05      	ldr	r3, [sp, #20]
    f760:	2b00      	cmp	r3, #0
    f762:	d02b      	beq.n	f7bc <AttcReadByTypeReq+0x94>
  {
    /* set parameters */
    pPkt->len = ATT_READ_TYPE_REQ_LEN + uuidLen;
    f764:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f768:	b29b      	uxth	r3, r3
    f76a:	3305      	adds	r3, #5
    f76c:	b29a      	uxth	r2, r3
    f76e:	9b05      	ldr	r3, [sp, #20]
    f770:	801a      	strh	r2, [r3, #0]
    pPkt->h.startHandle = startHandle;
    f772:	9b05      	ldr	r3, [sp, #20]
    f774:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f778:	805a      	strh	r2, [r3, #2]
    pPkt->h.endHandle = endHandle;
    f77a:	9b05      	ldr	r3, [sp, #20]
    f77c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f780:	809a      	strh	r2, [r3, #4]

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f782:	9b05      	ldr	r3, [sp, #20]
    f784:	3308      	adds	r3, #8
    f786:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
    f788:	9b04      	ldr	r3, [sp, #16]
    f78a:	1c5a      	adds	r2, r3, #1
    f78c:	9204      	str	r2, [sp, #16]
    f78e:	2208      	movs	r2, #8
    f790:	701a      	strb	r2, [r3, #0]
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    f792:	9b04      	ldr	r3, [sp, #16]
    f794:	3304      	adds	r3, #4
    f796:	9304      	str	r3, [sp, #16]
    memcpy(p, pUuid, uuidLen);
    f798:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f79c:	461a      	mov	r2, r3
    f79e:	9908      	ldr	r1, [sp, #32]
    f7a0:	9804      	ldr	r0, [sp, #16]
    f7a2:	f7fc fcad 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
    f7a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f7aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f7ae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f7b2:	9300      	str	r3, [sp, #0]
    f7b4:	9b05      	ldr	r3, [sp, #20]
    f7b6:	2204      	movs	r2, #4
    f7b8:	f7ff fcee 	bl	f198 <attcSendMsg>
  }
}
    f7bc:	bf00      	nop
    f7be:	b006      	add	sp, #24
    f7c0:	bd10      	pop	{r4, pc}

0000f7c2 <attcProcPrepWriteRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    f7c2:	b084      	sub	sp, #16
    f7c4:	9003      	str	r0, [sp, #12]
    f7c6:	9201      	str	r2, [sp, #4]
    f7c8:	9300      	str	r3, [sp, #0]
    f7ca:	460b      	mov	r3, r1
    f7cc:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    f7d0:	9b03      	ldr	r3, [sp, #12]
    f7d2:	7cdb      	ldrb	r3, [r3, #19]
    f7d4:	2b01      	cmp	r3, #1
    f7d6:	d106      	bne.n	f7e6 <attcProcPrepWriteRsp+0x24>
  {
    /* if no more data to send */
    if (pCcb->outReqParams.w.len == 0)
    f7d8:	9b03      	ldr	r3, [sp, #12]
    f7da:	8b9b      	ldrh	r3, [r3, #28]
    f7dc:	2b00      	cmp	r3, #0
    f7de:	d102      	bne.n	f7e6 <attcProcPrepWriteRsp+0x24>
    {
      /* we're done */
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    f7e0:	9b03      	ldr	r3, [sp, #12]
    f7e2:	2200      	movs	r2, #0
    f7e4:	74da      	strb	r2, [r3, #19]
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    f7e6:	9b00      	ldr	r3, [sp, #0]
    f7e8:	685b      	ldr	r3, [r3, #4]
    f7ea:	1d1a      	adds	r2, r3, #4
    f7ec:	9b00      	ldr	r3, [sp, #0]
    f7ee:	605a      	str	r2, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    f7f0:	9b00      	ldr	r3, [sp, #0]
    f7f2:	891b      	ldrh	r3, [r3, #8]
    f7f4:	3b04      	subs	r3, #4
    f7f6:	b29a      	uxth	r2, r3
    f7f8:	9b00      	ldr	r3, [sp, #0]
    f7fa:	811a      	strh	r2, [r3, #8]
}
    f7fc:	bf00      	nop
    f7fe:	b004      	add	sp, #16
    f800:	4770      	bx	lr

0000f802 <AttcWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteCmd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
    f802:	b500      	push	{lr}
    f804:	b089      	sub	sp, #36	; 0x24
    f806:	9303      	str	r3, [sp, #12]
    f808:	4603      	mov	r3, r0
    f80a:	f88d 3017 	strb.w	r3, [sp, #23]
    f80e:	460b      	mov	r3, r1
    f810:	f8ad 3014 	strh.w	r3, [sp, #20]
    f814:	4613      	mov	r3, r2
    f816:	f8ad 3012 	strh.w	r3, [sp, #18]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
    f81a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f81e:	330b      	adds	r3, #11
    f820:	b29b      	uxth	r3, r3
    f822:	4618      	mov	r0, r3
    f824:	f003 fc5e 	bl	130e4 <attMsgAlloc>
    f828:	9007      	str	r0, [sp, #28]
    f82a:	9b07      	ldr	r3, [sp, #28]
    f82c:	2b00      	cmp	r3, #0
    f82e:	d02e      	beq.n	f88e <AttcWriteCmd+0x8c>
  {
    /* set length */
    pPkt->len = ATT_WRITE_CMD_LEN + valueLen;
    f830:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f834:	3303      	adds	r3, #3
    f836:	b29a      	uxth	r2, r3
    f838:	9b07      	ldr	r3, [sp, #28]
    f83a:	801a      	strh	r2, [r3, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    f83c:	9b07      	ldr	r3, [sp, #28]
    f83e:	3308      	adds	r3, #8
    f840:	9306      	str	r3, [sp, #24]
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_CMD);
    f842:	9b06      	ldr	r3, [sp, #24]
    f844:	1c5a      	adds	r2, r3, #1
    f846:	9206      	str	r2, [sp, #24]
    f848:	2252      	movs	r2, #82	; 0x52
    f84a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, handle);
    f84c:	9b06      	ldr	r3, [sp, #24]
    f84e:	1c5a      	adds	r2, r3, #1
    f850:	9206      	str	r2, [sp, #24]
    f852:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    f856:	b2d2      	uxtb	r2, r2
    f858:	701a      	strb	r2, [r3, #0]
    f85a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    f85e:	0a1b      	lsrs	r3, r3, #8
    f860:	b299      	uxth	r1, r3
    f862:	9b06      	ldr	r3, [sp, #24]
    f864:	1c5a      	adds	r2, r3, #1
    f866:	9206      	str	r2, [sp, #24]
    f868:	b2ca      	uxtb	r2, r1
    f86a:	701a      	strb	r2, [r3, #0]
    memcpy(p, pValue, valueLen);
    f86c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f870:	461a      	mov	r2, r3
    f872:	9903      	ldr	r1, [sp, #12]
    f874:	9806      	ldr	r0, [sp, #24]
    f876:	f7fc fc43 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE_CMD, pPkt, FALSE);
    f87a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    f87e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    f882:	2300      	movs	r3, #0
    f884:	9300      	str	r3, [sp, #0]
    f886:	9b07      	ldr	r3, [sp, #28]
    f888:	220a      	movs	r2, #10
    f88a:	f7ff fc85 	bl	f198 <attcSendMsg>
  }
}
    f88e:	bf00      	nop
    f890:	b009      	add	sp, #36	; 0x24
    f892:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000f898 <attsCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsCccCback(dmConnId_t connId, uint8_t idx, uint16_t handle, uint16_t value)
{
    f898:	b510      	push	{r4, lr}
    f89a:	b086      	sub	sp, #24
    f89c:	4604      	mov	r4, r0
    f89e:	4608      	mov	r0, r1
    f8a0:	4611      	mov	r1, r2
    f8a2:	461a      	mov	r2, r3
    f8a4:	4623      	mov	r3, r4
    f8a6:	f88d 3007 	strb.w	r3, [sp, #7]
    f8aa:	4603      	mov	r3, r0
    f8ac:	f88d 3006 	strb.w	r3, [sp, #6]
    f8b0:	460b      	mov	r3, r1
    f8b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    f8b6:	4613      	mov	r3, r2
    f8b8:	f8ad 3002 	strh.w	r3, [sp, #2]
  attsCccEvt_t  evt;

  evt.hdr.event = ATTS_CCC_STATE_IND;
    f8bc:	2310      	movs	r3, #16
    f8be:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.hdr.param = connId;
    f8c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f8c6:	b29b      	uxth	r3, r3
    f8c8:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.idx = idx;
    f8cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f8d0:	f88d 3014 	strb.w	r3, [sp, #20]
  evt.handle = handle;
    f8d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f8d8:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.value = value;
    f8dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f8e0:	f8ad 3012 	strh.w	r3, [sp, #18]

  (*attsCccCb.cback)(&evt);
    f8e4:	4b03      	ldr	r3, [pc, #12]	; (f8f4 <attsCccCback+0x5c>)
    f8e6:	691b      	ldr	r3, [r3, #16]
    f8e8:	aa03      	add	r2, sp, #12
    f8ea:	4610      	mov	r0, r2
    f8ec:	4798      	blx	r3
}
    f8ee:	bf00      	nop
    f8f0:	b006      	add	sp, #24
    f8f2:	bd10      	pop	{r4, pc}
    f8f4:	10004190 	.word	0x10004190

0000f8f8 <attsCccAllocTbl>:
 *
 *  \return Pointer into the CCC table.
 */
/*************************************************************************************************/
static uint16_t *attsCccAllocTbl(dmConnId_t connId)
{
    f8f8:	b510      	push	{r4, lr}
    f8fa:	b082      	sub	sp, #8
    f8fc:	4603      	mov	r3, r0
    f8fe:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  /* if not already allocated */
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
    f902:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f906:	3b01      	subs	r3, #1
    f908:	4a0e      	ldr	r2, [pc, #56]	; (f944 <attsCccAllocTbl+0x4c>)
    f90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f90e:	2b00      	cmp	r3, #0
    f910:	d10e      	bne.n	f930 <attsCccAllocTbl+0x38>
  {
    WSF_ASSERT(attsCccCb.setLen > 0);

    /* allocate new buffer */
    attsCccCb.pCccTbl[connId - 1] = WsfBufAlloc(attsCccCb.setLen * sizeof(uint16_t));
    f912:	4b0c      	ldr	r3, [pc, #48]	; (f944 <attsCccAllocTbl+0x4c>)
    f914:	7d1b      	ldrb	r3, [r3, #20]
    f916:	b29b      	uxth	r3, r3
    f918:	005b      	lsls	r3, r3, #1
    f91a:	b29a      	uxth	r2, r3
    f91c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f920:	1e5c      	subs	r4, r3, #1
    f922:	4610      	mov	r0, r2
    f924:	f7fd fb90 	bl	d048 <WsfBufAlloc>
    f928:	4603      	mov	r3, r0
    f92a:	4a06      	ldr	r2, [pc, #24]	; (f944 <attsCccAllocTbl+0x4c>)
    f92c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  }

  return attsCccCb.pCccTbl[connId - 1];
    f930:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f934:	3b01      	subs	r3, #1
    f936:	4a03      	ldr	r2, [pc, #12]	; (f944 <attsCccAllocTbl+0x4c>)
    f938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
    f93c:	4618      	mov	r0, r3
    f93e:	b002      	add	sp, #8
    f940:	bd10      	pop	{r4, pc}
    f942:	bf00      	nop
    f944:	10004190 	.word	0x10004190

0000f948 <attsCccGetTbl>:
 *
 *  \return Pointer into the CCC table.
 */
/*************************************************************************************************/
static uint16_t *attsCccGetTbl(dmConnId_t connId)
{
    f948:	b082      	sub	sp, #8
    f94a:	4603      	mov	r3, r0
    f94c:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return attsCccCb.pCccTbl[connId - 1];
    f950:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f954:	3b01      	subs	r3, #1
    f956:	4a03      	ldr	r2, [pc, #12]	; (f964 <attsCccGetTbl+0x1c>)
    f958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
    f95c:	4618      	mov	r0, r3
    f95e:	b002      	add	sp, #8
    f960:	4770      	bx	lr
    f962:	bf00      	nop
    f964:	10004190 	.word	0x10004190

0000f968 <attsCccFreeTbl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsCccFreeTbl(dmConnId_t connId)
{
    f968:	b500      	push	{lr}
    f96a:	b083      	sub	sp, #12
    f96c:	4603      	mov	r3, r0
    f96e:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  if (attsCccCb.pCccTbl[connId - 1] != NULL)
    f972:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f976:	3b01      	subs	r3, #1
    f978:	4a0c      	ldr	r2, [pc, #48]	; (f9ac <attsCccFreeTbl+0x44>)
    f97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f97e:	2b00      	cmp	r3, #0
    f980:	d00f      	beq.n	f9a2 <attsCccFreeTbl+0x3a>
  {
    WsfBufFree(attsCccCb.pCccTbl[connId - 1]);
    f982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f986:	3b01      	subs	r3, #1
    f988:	4a08      	ldr	r2, [pc, #32]	; (f9ac <attsCccFreeTbl+0x44>)
    f98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f98e:	4618      	mov	r0, r3
    f990:	f7fd fba0 	bl	d0d4 <WsfBufFree>
    attsCccCb.pCccTbl[connId - 1] = NULL;
    f994:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f998:	3b01      	subs	r3, #1
    f99a:	4a04      	ldr	r2, [pc, #16]	; (f9ac <attsCccFreeTbl+0x44>)
    f99c:	2100      	movs	r1, #0
    f99e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
    f9a2:	bf00      	nop
    f9a4:	b003      	add	sp, #12
    f9a6:	f85d fb04 	ldr.w	pc, [sp], #4
    f9aa:	bf00      	nop
    f9ac:	10004190 	.word	0x10004190

0000f9b0 <attsCccReadValue>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccReadValue(dmConnId_t connId, uint16_t handle, uint8_t *pValue)
{
    f9b0:	b500      	push	{lr}
    f9b2:	b087      	sub	sp, #28
    f9b4:	4603      	mov	r3, r0
    f9b6:	9200      	str	r2, [sp, #0]
    f9b8:	f88d 3007 	strb.w	r3, [sp, #7]
    f9bc:	460b      	mov	r3, r1
    f9be:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsCccSet_t  *pSet;
  uint16_t      *pTbl;
  uint8_t       i;

  /* find handle in handle array */
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    f9c2:	4b26      	ldr	r3, [pc, #152]	; (fa5c <attsCccReadValue+0xac>)
    f9c4:	68db      	ldr	r3, [r3, #12]
    f9c6:	9305      	str	r3, [sp, #20]
    f9c8:	2300      	movs	r3, #0
    f9ca:	f88d 3013 	strb.w	r3, [sp, #19]
    f9ce:	e00d      	b.n	f9ec <attsCccReadValue+0x3c>
  {
    if (pSet->handle == handle)
    f9d0:	9b05      	ldr	r3, [sp, #20]
    f9d2:	881b      	ldrh	r3, [r3, #0]
    f9d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f9d8:	429a      	cmp	r2, r3
    f9da:	d00e      	beq.n	f9fa <attsCccReadValue+0x4a>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    f9dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f9e0:	3301      	adds	r3, #1
    f9e2:	f88d 3013 	strb.w	r3, [sp, #19]
    f9e6:	9b05      	ldr	r3, [sp, #20]
    f9e8:	3306      	adds	r3, #6
    f9ea:	9305      	str	r3, [sp, #20]
    f9ec:	4b1b      	ldr	r3, [pc, #108]	; (fa5c <attsCccReadValue+0xac>)
    f9ee:	7d1b      	ldrb	r3, [r3, #20]
    f9f0:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f9f4:	429a      	cmp	r2, r3
    f9f6:	d3eb      	bcc.n	f9d0 <attsCccReadValue+0x20>
    f9f8:	e000      	b.n	f9fc <attsCccReadValue+0x4c>
    {
      break;
    f9fa:	bf00      	nop
    }
  }

  /* if handle not found return error */
  if (i == attsCccCb.setLen)
    f9fc:	4b17      	ldr	r3, [pc, #92]	; (fa5c <attsCccReadValue+0xac>)
    f9fe:	7d1b      	ldrb	r3, [r3, #20]
    fa00:	f89d 2013 	ldrb.w	r2, [sp, #19]
    fa04:	429a      	cmp	r2, r3
    fa06:	d101      	bne.n	fa0c <attsCccReadValue+0x5c>
  {
    return ATT_ERR_NOT_FOUND;
    fa08:	230a      	movs	r3, #10
    fa0a:	e023      	b.n	fa54 <attsCccReadValue+0xa4>
  }

  /* get pointer to the table for this connection */
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    fa0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa10:	4618      	mov	r0, r3
    fa12:	f7ff ff99 	bl	f948 <attsCccGetTbl>
    fa16:	9003      	str	r0, [sp, #12]
    fa18:	9b03      	ldr	r3, [sp, #12]
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d019      	beq.n	fa52 <attsCccReadValue+0xa2>
  {
    /* read value */
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
    fa1e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fa22:	005b      	lsls	r3, r3, #1
    fa24:	9a03      	ldr	r2, [sp, #12]
    fa26:	4413      	add	r3, r2
    fa28:	8819      	ldrh	r1, [r3, #0]
    fa2a:	9b00      	ldr	r3, [sp, #0]
    fa2c:	1c5a      	adds	r2, r3, #1
    fa2e:	9200      	str	r2, [sp, #0]
    fa30:	b2ca      	uxtb	r2, r1
    fa32:	701a      	strb	r2, [r3, #0]
    fa34:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fa38:	005b      	lsls	r3, r3, #1
    fa3a:	9a03      	ldr	r2, [sp, #12]
    fa3c:	4413      	add	r3, r2
    fa3e:	881b      	ldrh	r3, [r3, #0]
    fa40:	0a1b      	lsrs	r3, r3, #8
    fa42:	b299      	uxth	r1, r3
    fa44:	9b00      	ldr	r3, [sp, #0]
    fa46:	1c5a      	adds	r2, r3, #1
    fa48:	9200      	str	r2, [sp, #0]
    fa4a:	b2ca      	uxtb	r2, r1
    fa4c:	701a      	strb	r2, [r3, #0]

    return ATT_SUCCESS;
    fa4e:	2300      	movs	r3, #0
    fa50:	e000      	b.n	fa54 <attsCccReadValue+0xa4>
  }
  else
  {
    return ATT_ERR_RESOURCES;
    fa52:	2311      	movs	r3, #17
  }
}
    fa54:	4618      	mov	r0, r3
    fa56:	b007      	add	sp, #28
    fa58:	f85d fb04 	ldr.w	pc, [sp], #4
    fa5c:	10004190 	.word	0x10004190

0000fa60 <attsCccWriteValue>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccWriteValue(dmConnId_t connId, uint16_t handle, uint8_t *pValue)
{
    fa60:	b500      	push	{lr}
    fa62:	b087      	sub	sp, #28
    fa64:	4603      	mov	r3, r0
    fa66:	9200      	str	r2, [sp, #0]
    fa68:	f88d 3007 	strb.w	r3, [sp, #7]
    fa6c:	460b      	mov	r3, r1
    fa6e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       i;
  uint16_t      value;
  uint16_t      prevValue;

  /* find handle in handle array */
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    fa72:	4b3d      	ldr	r3, [pc, #244]	; (fb68 <attsCccWriteValue+0x108>)
    fa74:	68db      	ldr	r3, [r3, #12]
    fa76:	9305      	str	r3, [sp, #20]
    fa78:	2300      	movs	r3, #0
    fa7a:	f88d 3013 	strb.w	r3, [sp, #19]
    fa7e:	e00d      	b.n	fa9c <attsCccWriteValue+0x3c>
  {
    if (pSet->handle == handle)
    fa80:	9b05      	ldr	r3, [sp, #20]
    fa82:	881b      	ldrh	r3, [r3, #0]
    fa84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fa88:	429a      	cmp	r2, r3
    fa8a:	d00e      	beq.n	faaa <attsCccWriteValue+0x4a>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    fa8c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fa90:	3301      	adds	r3, #1
    fa92:	f88d 3013 	strb.w	r3, [sp, #19]
    fa96:	9b05      	ldr	r3, [sp, #20]
    fa98:	3306      	adds	r3, #6
    fa9a:	9305      	str	r3, [sp, #20]
    fa9c:	4b32      	ldr	r3, [pc, #200]	; (fb68 <attsCccWriteValue+0x108>)
    fa9e:	7d1b      	ldrb	r3, [r3, #20]
    faa0:	f89d 2013 	ldrb.w	r2, [sp, #19]
    faa4:	429a      	cmp	r2, r3
    faa6:	d3eb      	bcc.n	fa80 <attsCccWriteValue+0x20>
    faa8:	e000      	b.n	faac <attsCccWriteValue+0x4c>
    {
      break;
    faaa:	bf00      	nop
    }
  }

  /* if handle not found return error */
  if (i == attsCccCb.setLen)
    faac:	4b2e      	ldr	r3, [pc, #184]	; (fb68 <attsCccWriteValue+0x108>)
    faae:	7d1b      	ldrb	r3, [r3, #20]
    fab0:	f89d 2013 	ldrb.w	r2, [sp, #19]
    fab4:	429a      	cmp	r2, r3
    fab6:	d101      	bne.n	fabc <attsCccWriteValue+0x5c>
  {
    return ATT_ERR_NOT_FOUND;
    fab8:	230a      	movs	r3, #10
    faba:	e051      	b.n	fb60 <attsCccWriteValue+0x100>
  }

  BYTES_TO_UINT16(value, pValue);
    fabc:	9b00      	ldr	r3, [sp, #0]
    fabe:	781b      	ldrb	r3, [r3, #0]
    fac0:	b29a      	uxth	r2, r3
    fac2:	9b00      	ldr	r3, [sp, #0]
    fac4:	3301      	adds	r3, #1
    fac6:	781b      	ldrb	r3, [r3, #0]
    fac8:	b29b      	uxth	r3, r3
    faca:	021b      	lsls	r3, r3, #8
    facc:	b29b      	uxth	r3, r3
    face:	4413      	add	r3, r2
    fad0:	f8ad 3010 	strh.w	r3, [sp, #16]

  /* verify value range */
  if (((value != 0) && (value != ATT_CLIENT_CFG_NOTIFY) && (value != ATT_CLIENT_CFG_INDICATE)) ||
    fad4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fad8:	2b00      	cmp	r3, #0
    fada:	d007      	beq.n	faec <attsCccWriteValue+0x8c>
    fadc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fae0:	2b01      	cmp	r3, #1
    fae2:	d003      	beq.n	faec <attsCccWriteValue+0x8c>
    fae4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fae8:	2b02      	cmp	r3, #2
    faea:	d10b      	bne.n	fb04 <attsCccWriteValue+0xa4>
    faec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    faf0:	2b00      	cmp	r3, #0
    faf2:	d009      	beq.n	fb08 <attsCccWriteValue+0xa8>
      ((value != 0) && ((value & pSet->valueRange) == 0)))
    faf4:	9b05      	ldr	r3, [sp, #20]
    faf6:	885a      	ldrh	r2, [r3, #2]
    faf8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fafc:	4013      	ands	r3, r2
    fafe:	b29b      	uxth	r3, r3
    fb00:	2b00      	cmp	r3, #0
    fb02:	d101      	bne.n	fb08 <attsCccWriteValue+0xa8>
  {
    return ATT_ERR_VALUE_RANGE;
    fb04:	2380      	movs	r3, #128	; 0x80
    fb06:	e02b      	b.n	fb60 <attsCccWriteValue+0x100>
  }

  /* get pointer to the table for this connection */
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    fb08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fb0c:	4618      	mov	r0, r3
    fb0e:	f7ff ff1b 	bl	f948 <attsCccGetTbl>
    fb12:	9003      	str	r0, [sp, #12]
    fb14:	9b03      	ldr	r3, [sp, #12]
    fb16:	2b00      	cmp	r3, #0
    fb18:	d021      	beq.n	fb5e <attsCccWriteValue+0xfe>
  {
    /* write value */
    prevValue = pTbl[i];
    fb1a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fb1e:	005b      	lsls	r3, r3, #1
    fb20:	9a03      	ldr	r2, [sp, #12]
    fb22:	4413      	add	r3, r2
    fb24:	881b      	ldrh	r3, [r3, #0]
    fb26:	f8ad 300a 	strh.w	r3, [sp, #10]
    pTbl[i] = value;
    fb2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fb2e:	005b      	lsls	r3, r3, #1
    fb30:	9a03      	ldr	r2, [sp, #12]
    fb32:	4413      	add	r3, r2
    fb34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    fb38:	801a      	strh	r2, [r3, #0]

    /* if value changed call callback */
    if (prevValue != value)
    fb3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    fb3e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fb42:	429a      	cmp	r2, r3
    fb44:	d009      	beq.n	fb5a <attsCccWriteValue+0xfa>
    {
      attsCccCback(connId, i, handle, value);
    fb46:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    fb4a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fb4e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    fb52:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fb56:	f7ff fe9f 	bl	f898 <attsCccCback>
    }

    return ATT_SUCCESS;
    fb5a:	2300      	movs	r3, #0
    fb5c:	e000      	b.n	fb60 <attsCccWriteValue+0x100>
  }
  else
  {
    return ATT_ERR_RESOURCES;
    fb5e:	2311      	movs	r3, #17
  }
}
    fb60:	4618      	mov	r0, r3
    fb62:	b007      	add	sp, #28
    fb64:	f85d fb04 	ldr.w	pc, [sp], #4
    fb68:	10004190 	.word	0x10004190

0000fb6c <attsCccMainCback>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccMainCback(dmConnId_t connId, uint8_t method, uint16_t handle, uint8_t *pValue)
{
    fb6c:	b500      	push	{lr}
    fb6e:	b083      	sub	sp, #12
    fb70:	9300      	str	r3, [sp, #0]
    fb72:	4603      	mov	r3, r0
    fb74:	f88d 3007 	strb.w	r3, [sp, #7]
    fb78:	460b      	mov	r3, r1
    fb7a:	f88d 3006 	strb.w	r3, [sp, #6]
    fb7e:	4613      	mov	r3, r2
    fb80:	f8ad 3004 	strh.w	r3, [sp, #4]
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
    fb84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fb88:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fb8c:	4619      	mov	r1, r3
    fb8e:	480f      	ldr	r0, [pc, #60]	; (fbcc <attsCccMainCback+0x60>)
    fb90:	f7fd ff5a 	bl	da48 <WsfTrace>

  if (method == ATT_METHOD_READ)
    fb94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb98:	2b05      	cmp	r3, #5
    fb9a:	d109      	bne.n	fbb0 <attsCccMainCback+0x44>
  {
    return attsCccReadValue(connId, handle, pValue);
    fb9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fba4:	9a00      	ldr	r2, [sp, #0]
    fba6:	4618      	mov	r0, r3
    fba8:	f7ff ff02 	bl	f9b0 <attsCccReadValue>
    fbac:	4603      	mov	r3, r0
    fbae:	e008      	b.n	fbc2 <attsCccMainCback+0x56>
  }
  else
  {
    return attsCccWriteValue(connId, handle, pValue);
    fbb0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fbb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fbb8:	9a00      	ldr	r2, [sp, #0]
    fbba:	4618      	mov	r0, r3
    fbbc:	f7ff ff50 	bl	fa60 <attsCccWriteValue>
    fbc0:	4603      	mov	r3, r0
  }
}
    fbc2:	4618      	mov	r0, r3
    fbc4:	b003      	add	sp, #12
    fbc6:	f85d fb04 	ldr.w	pc, [sp], #4
    fbca:	bf00      	nop
    fbcc:	0002b14c 	.word	0x0002b14c

0000fbd0 <AttsCccRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccRegister(uint8_t setLen, attsCccSet_t *pSet, attsCccCback_t cback)
{
    fbd0:	b084      	sub	sp, #16
    fbd2:	4603      	mov	r3, r0
    fbd4:	9102      	str	r1, [sp, #8]
    fbd6:	9201      	str	r2, [sp, #4]
    fbd8:	f88d 300f 	strb.w	r3, [sp, #15]
  attsCccCb.setLen = setLen;
    fbdc:	4a07      	ldr	r2, [pc, #28]	; (fbfc <AttsCccRegister+0x2c>)
    fbde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fbe2:	7513      	strb	r3, [r2, #20]
  attsCccCb.pSet = pSet;
    fbe4:	4a05      	ldr	r2, [pc, #20]	; (fbfc <AttsCccRegister+0x2c>)
    fbe6:	9b02      	ldr	r3, [sp, #8]
    fbe8:	60d3      	str	r3, [r2, #12]
  attsCccCb.cback = cback;
    fbea:	4a04      	ldr	r2, [pc, #16]	; (fbfc <AttsCccRegister+0x2c>)
    fbec:	9b01      	ldr	r3, [sp, #4]
    fbee:	6113      	str	r3, [r2, #16]

  attsCb.cccCback = attsCccMainCback;
    fbf0:	4b03      	ldr	r3, [pc, #12]	; (fc00 <AttsCccRegister+0x30>)
    fbf2:	4a04      	ldr	r2, [pc, #16]	; (fc04 <AttsCccRegister+0x34>)
    fbf4:	615a      	str	r2, [r3, #20]
}
    fbf6:	bf00      	nop
    fbf8:	b004      	add	sp, #16
    fbfa:	4770      	bx	lr
    fbfc:	10004190 	.word	0x10004190
    fc00:	10008a80 	.word	0x10008a80
    fc04:	0000fb6d 	.word	0x0000fb6d

0000fc08 <AttsCccInitTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccInitTable(dmConnId_t connId, uint16_t *pCccTbl)
{
    fc08:	b500      	push	{lr}
    fc0a:	b085      	sub	sp, #20
    fc0c:	4603      	mov	r3, r0
    fc0e:	9100      	str	r1, [sp, #0]
    fc10:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t   i;
  uint16_t  *pTbl;

  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);
    fc14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc18:	4619      	mov	r1, r3
    fc1a:	4821      	ldr	r0, [pc, #132]	; (fca0 <AttsCccInitTable+0x98>)
    fc1c:	f7fd ff14 	bl	da48 <WsfTrace>

  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
    fc20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc24:	4618      	mov	r0, r3
    fc26:	f7ff fe67 	bl	f8f8 <attsCccAllocTbl>
    fc2a:	9002      	str	r0, [sp, #8]
    fc2c:	9b02      	ldr	r3, [sp, #8]
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d031      	beq.n	fc96 <AttsCccInitTable+0x8e>
  {
    /* if initializer table is passed in */
    if (pCccTbl != NULL)
    fc32:	9b00      	ldr	r3, [sp, #0]
    fc34:	2b00      	cmp	r3, #0
    fc36:	d026      	beq.n	fc86 <AttsCccInitTable+0x7e>
    {
      /* initialize table */
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
    fc38:	2300      	movs	r3, #0
    fc3a:	f88d 300f 	strb.w	r3, [sp, #15]
    fc3e:	e01b      	b.n	fc78 <AttsCccInitTable+0x70>
      {
        /* copy value */
        *pTbl = *pCccTbl;
    fc40:	9b00      	ldr	r3, [sp, #0]
    fc42:	881a      	ldrh	r2, [r3, #0]
    fc44:	9b02      	ldr	r3, [sp, #8]
    fc46:	801a      	strh	r2, [r3, #0]

        /* execute callback for each nonzero entry in table */
        if (*pCccTbl != 0)
    fc48:	9b00      	ldr	r3, [sp, #0]
    fc4a:	881b      	ldrh	r3, [r3, #0]
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	d008      	beq.n	fc62 <AttsCccInitTable+0x5a>
        {
          attsCccCback(connId, i, ATT_HANDLE_NONE, *pCccTbl);
    fc50:	9b00      	ldr	r3, [sp, #0]
    fc52:	881b      	ldrh	r3, [r3, #0]
    fc54:	f89d 100f 	ldrb.w	r1, [sp, #15]
    fc58:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fc5c:	2200      	movs	r2, #0
    fc5e:	f7ff fe1b 	bl	f898 <attsCccCback>
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
    fc62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fc66:	3301      	adds	r3, #1
    fc68:	f88d 300f 	strb.w	r3, [sp, #15]
    fc6c:	9b00      	ldr	r3, [sp, #0]
    fc6e:	3302      	adds	r3, #2
    fc70:	9300      	str	r3, [sp, #0]
    fc72:	9b02      	ldr	r3, [sp, #8]
    fc74:	3302      	adds	r3, #2
    fc76:	9302      	str	r3, [sp, #8]
    fc78:	4b0a      	ldr	r3, [pc, #40]	; (fca4 <AttsCccInitTable+0x9c>)
    fc7a:	7d1b      	ldrb	r3, [r3, #20]
    fc7c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fc80:	429a      	cmp	r2, r3
    fc82:	d3dd      	bcc.n	fc40 <AttsCccInitTable+0x38>
    {
      /* initialize table to zero */
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    }
  }
}
    fc84:	e007      	b.n	fc96 <AttsCccInitTable+0x8e>
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    fc86:	4b07      	ldr	r3, [pc, #28]	; (fca4 <AttsCccInitTable+0x9c>)
    fc88:	7d1b      	ldrb	r3, [r3, #20]
    fc8a:	005b      	lsls	r3, r3, #1
    fc8c:	461a      	mov	r2, r3
    fc8e:	2100      	movs	r1, #0
    fc90:	9802      	ldr	r0, [sp, #8]
    fc92:	f018 fbd3 	bl	2843c <memset>
}
    fc96:	bf00      	nop
    fc98:	b005      	add	sp, #20
    fc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    fc9e:	bf00      	nop
    fca0:	0002b174 	.word	0x0002b174
    fca4:	10004190 	.word	0x10004190

0000fca8 <AttsCccClearTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccClearTable(dmConnId_t connId)
{
    fca8:	b500      	push	{lr}
    fcaa:	b083      	sub	sp, #12
    fcac:	4603      	mov	r3, r0
    fcae:	f88d 3007 	strb.w	r3, [sp, #7]
  ATT_TRACE_INFO1("AttsCccClearTable connId=%d", connId);
    fcb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fcb6:	4619      	mov	r1, r3
    fcb8:	4805      	ldr	r0, [pc, #20]	; (fcd0 <AttsCccClearTable+0x28>)
    fcba:	f7fd fec5 	bl	da48 <WsfTrace>

  attsCccFreeTbl(connId);
    fcbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fcc2:	4618      	mov	r0, r3
    fcc4:	f7ff fe50 	bl	f968 <attsCccFreeTbl>
}
    fcc8:	bf00      	nop
    fcca:	b003      	add	sp, #12
    fccc:	f85d fb04 	ldr.w	pc, [sp], #4
    fcd0:	0002b190 	.word	0x0002b190

0000fcd4 <AttsCccGet>:
 *
 *  \return Value of the descriptor.
 */
/*************************************************************************************************/
uint16_t AttsCccGet(dmConnId_t connId, uint8_t idx)
{
    fcd4:	b500      	push	{lr}
    fcd6:	b085      	sub	sp, #20
    fcd8:	4603      	mov	r3, r0
    fcda:	460a      	mov	r2, r1
    fcdc:	f88d 3007 	strb.w	r3, [sp, #7]
    fce0:	4613      	mov	r3, r2
    fce2:	f88d 3006 	strb.w	r3, [sp, #6]
  uint16_t      *pTbl;

  WSF_ASSERT(idx < attsCccCb.setLen);

  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    fce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fcea:	4618      	mov	r0, r3
    fcec:	f7ff fe2c 	bl	f948 <attsCccGetTbl>
    fcf0:	9003      	str	r0, [sp, #12]
    fcf2:	9b03      	ldr	r3, [sp, #12]
    fcf4:	2b00      	cmp	r3, #0
    fcf6:	d006      	beq.n	fd06 <AttsCccGet+0x32>
  {
    /* return value from table */
    return pTbl[idx];
    fcf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fcfc:	005b      	lsls	r3, r3, #1
    fcfe:	9a03      	ldr	r2, [sp, #12]
    fd00:	4413      	add	r3, r2
    fd02:	881b      	ldrh	r3, [r3, #0]
    fd04:	e000      	b.n	fd08 <AttsCccGet+0x34>
  }
  else
  {
    return 0;
    fd06:	2300      	movs	r3, #0
  }
}
    fd08:	4618      	mov	r0, r3
    fd0a:	b005      	add	sp, #20
    fd0c:	f85d fb04 	ldr.w	pc, [sp], #4

0000fd10 <AttsCccEnabled>:
 *
 *  \return Value of the descriptor if security level is met, otherwise zero.
 */
/*************************************************************************************************/
uint16_t AttsCccEnabled(dmConnId_t connId, uint8_t idx)
{
    fd10:	b500      	push	{lr}
    fd12:	b083      	sub	sp, #12
    fd14:	4603      	mov	r3, r0
    fd16:	460a      	mov	r2, r1
    fd18:	f88d 3007 	strb.w	r3, [sp, #7]
    fd1c:	4613      	mov	r3, r2
    fd1e:	f88d 3006 	strb.w	r3, [sp, #6]
  WSF_ASSERT(idx < attsCccCb.setLen);

  /* check security level */
  if (DmConnSecLevel(connId) < attsCccCb.pSet[idx].secLevel)
    fd22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd26:	4618      	mov	r0, r3
    fd28:	f006 f8d4 	bl	15ed4 <DmConnSecLevel>
    fd2c:	4603      	mov	r3, r0
    fd2e:	4618      	mov	r0, r3
    fd30:	4b0d      	ldr	r3, [pc, #52]	; (fd68 <AttsCccEnabled+0x58>)
    fd32:	68d9      	ldr	r1, [r3, #12]
    fd34:	f89d 2006 	ldrb.w	r2, [sp, #6]
    fd38:	4613      	mov	r3, r2
    fd3a:	005b      	lsls	r3, r3, #1
    fd3c:	4413      	add	r3, r2
    fd3e:	005b      	lsls	r3, r3, #1
    fd40:	440b      	add	r3, r1
    fd42:	791b      	ldrb	r3, [r3, #4]
    fd44:	4298      	cmp	r0, r3
    fd46:	d201      	bcs.n	fd4c <AttsCccEnabled+0x3c>
  {
    return 0;
    fd48:	2300      	movs	r3, #0
    fd4a:	e008      	b.n	fd5e <AttsCccEnabled+0x4e>
  }

  /* get value */
  return AttsCccGet(connId, idx);
    fd4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    fd50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd54:	4611      	mov	r1, r2
    fd56:	4618      	mov	r0, r3
    fd58:	f7ff ffbc 	bl	fcd4 <AttsCccGet>
    fd5c:	4603      	mov	r3, r0
}
    fd5e:	4618      	mov	r0, r3
    fd60:	b003      	add	sp, #12
    fd62:	f85d fb04 	ldr.w	pc, [sp], #4
    fd66:	bf00      	nop
    fd68:	10004190 	.word	0x10004190

0000fd6c <AttsGetCccTableLen>:
 *  \return  Number of CCC entries in table.
 */
/*************************************************************************************************/
uint8_t AttsGetCccTableLen(void)
{
  return attsCccCb.setLen;
    fd6c:	4b01      	ldr	r3, [pc, #4]	; (fd74 <AttsGetCccTableLen+0x8>)
    fd6e:	7d1b      	ldrb	r3, [r3, #20]
}
    fd70:	4618      	mov	r0, r3
    fd72:	4770      	bx	lr
    fd74:	10004190 	.word	0x10004190

0000fd78 <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
    fd78:	b500      	push	{lr}
    fd7a:	b085      	sub	sp, #20
    fd7c:	4603      	mov	r3, r0
    fd7e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (attsCsfCb.isHashUpdating == isUpdating)
    fd82:	4b1c      	ldr	r3, [pc, #112]	; (fdf4 <attsCsfSetHashUpdateStatus+0x7c>)
    fd84:	7b1b      	ldrb	r3, [r3, #12]
    fd86:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fd8a:	429a      	cmp	r2, r3
    fd8c:	d02d      	beq.n	fdea <attsCsfSetHashUpdateStatus+0x72>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
    fd8e:	4a19      	ldr	r2, [pc, #100]	; (fdf4 <attsCsfSetHashUpdateStatus+0x7c>)
    fd90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd94:	7313      	strb	r3, [r2, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
    fd96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d105      	bne.n	fdaa <attsCsfSetHashUpdateStatus+0x32>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");
    fd9e:	4816      	ldr	r0, [pc, #88]	; (fdf8 <attsCsfSetHashUpdateStatus+0x80>)
    fda0:	f7fd fe52 	bl	da48 <WsfTrace>

    attsCheckPendDbHashReadRsp();
    fda4:	f000 ff56 	bl	10c54 <attsCheckPendDbHashReadRsp>
    fda8:	e020      	b.n	fdec <attsCsfSetHashUpdateStatus+0x74>
     * sync.
     */
  }
  else
  {
    ATT_TRACE_INFO0("Calculating database hash");
    fdaa:	4814      	ldr	r0, [pc, #80]	; (fdfc <attsCsfSetHashUpdateStatus+0x84>)
    fdac:	f7fd fe4c 	bl	da48 <WsfTrace>
    /* If the application, for whatever reason, previously recalculated the database hash over an
     * unchanged database and a client pended on a Read By Type Request of the database hash, then
     * that clients state may be out of step if the application did not initiate a state
     * transition.  That state transition is forced here to keep handle next transition.
     */
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    fdb0:	2300      	movs	r3, #0
    fdb2:	f88d 300f 	strb.w	r3, [sp, #15]
    fdb6:	e013      	b.n	fde0 <attsCsfSetHashUpdateStatus+0x68>
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    fdb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fdbc:	4a0d      	ldr	r2, [pc, #52]	; (fdf4 <attsCsfSetHashUpdateStatus+0x7c>)
    fdbe:	005b      	lsls	r3, r3, #1
    fdc0:	4413      	add	r3, r2
    fdc2:	785b      	ldrb	r3, [r3, #1]
    fdc4:	2b02      	cmp	r3, #2
    fdc6:	d106      	bne.n	fdd6 <attsCsfSetHashUpdateStatus+0x5e>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    fdc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fdcc:	4a09      	ldr	r2, [pc, #36]	; (fdf4 <attsCsfSetHashUpdateStatus+0x7c>)
    fdce:	005b      	lsls	r3, r3, #1
    fdd0:	4413      	add	r3, r2
    fdd2:	2201      	movs	r2, #1
    fdd4:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    fdd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fdda:	3301      	adds	r3, #1
    fddc:	f88d 300f 	strb.w	r3, [sp, #15]
    fde0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fde4:	2b02      	cmp	r3, #2
    fde6:	d9e7      	bls.n	fdb8 <attsCsfSetHashUpdateStatus+0x40>
    fde8:	e000      	b.n	fdec <attsCsfSetHashUpdateStatus+0x74>
    return;
    fdea:	bf00      	nop
      }
    }
  }
}
    fdec:	b005      	add	sp, #20
    fdee:	f85d fb04 	ldr.w	pc, [sp], #4
    fdf2:	bf00      	nop
    fdf4:	10008a1c 	.word	0x10008a1c
    fdf8:	0002b1ac 	.word	0x0002b1ac
    fdfc:	0002b1d0 	.word	0x0002b1d0

0000fe00 <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
    fe00:	4b01      	ldr	r3, [pc, #4]	; (fe08 <attsCsfGetHashUpdateStatus+0x8>)
    fe02:	7b1b      	ldrb	r3, [r3, #12]
}
    fe04:	4618      	mov	r0, r3
    fe06:	4770      	bx	lr
    fe08:	10008a1c 	.word	0x10008a1c

0000fe0c <attsCsfIsClientChangeAware>:
 *
 *  \return \ref TRUE if client is aware, otherwise \ref FALSE.
 */
/*************************************************************************************************/
uint8_t attsCsfIsClientChangeAware(dmConnId_t connId, uint16_t handle)
{
    fe0c:	b082      	sub	sp, #8
    fe0e:	4603      	mov	r3, r0
    fe10:	460a      	mov	r2, r1
    fe12:	f88d 3007 	strb.w	r3, [sp, #7]
    fe16:	4613      	mov	r3, r2
    fe18:	f8ad 3004 	strh.w	r3, [sp, #4]
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
    fe1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe20:	3b01      	subs	r3, #1
    fe22:	4a0d      	ldr	r2, [pc, #52]	; (fe58 <attsCsfIsClientChangeAware+0x4c>)
    fe24:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
    fe28:	f003 0301 	and.w	r3, r3, #1
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	d00e      	beq.n	fe4e <attsCsfIsClientChangeAware+0x42>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
    fe30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe34:	3b01      	subs	r3, #1
    fe36:	4a08      	ldr	r2, [pc, #32]	; (fe58 <attsCsfIsClientChangeAware+0x4c>)
    fe38:	005b      	lsls	r3, r3, #1
    fe3a:	4413      	add	r3, r2
    fe3c:	785b      	ldrb	r3, [r3, #1]
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
    fe3e:	2b03      	cmp	r3, #3
    fe40:	d105      	bne.n	fe4e <attsCsfIsClientChangeAware+0x42>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
    fe42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fe46:	2b12      	cmp	r3, #18
    fe48:	d001      	beq.n	fe4e <attsCsfIsClientChangeAware+0x42>
      (handle != GATT_SC_HDL))
  {
    return FALSE;
    fe4a:	2300      	movs	r3, #0
    fe4c:	e000      	b.n	fe50 <attsCsfIsClientChangeAware+0x44>
  }

  return TRUE;
    fe4e:	2301      	movs	r3, #1
}
    fe50:	4618      	mov	r0, r3
    fe52:	b002      	add	sp, #8
    fe54:	4770      	bx	lr
    fe56:	bf00      	nop
    fe58:	10008a1c 	.word	0x10008a1c

0000fe5c <attsCsfActClientState>:
 *
 *  \return \ref ATT_SUCCESS if client is change-aware, else \ref ATT_ERR_DATABASE_OUT_OF_SYNC.
 */
/*************************************************************************************************/
uint8_t attsCsfActClientState(uint16_t handle, uint8_t opcode, uint8_t *pPacket)
{
    fe5c:	b500      	push	{lr}
    fe5e:	b087      	sub	sp, #28
    fe60:	4603      	mov	r3, r0
    fe62:	9200      	str	r2, [sp, #0]
    fe64:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe68:	460b      	mov	r3, r1
    fe6a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t err = ATT_SUCCESS;
    fe6e:	2300      	movs	r3, #0
    fe70:	f88d 3017 	strb.w	r3, [sp, #23]
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
    fe74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fe78:	2b02      	cmp	r3, #2
    fe7a:	d003      	beq.n	fe84 <attsCsfActClientState+0x28>
    fe7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fe80:	2b1e      	cmp	r3, #30
    fe82:	d102      	bne.n	fe8a <attsCsfActClientState+0x2e>
  {
    return err;
    fe84:	f89d 3017 	ldrb.w	r3, [sp, #23]
    fe88:	e08a      	b.n	ffa0 <attsCsfActClientState+0x144>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];
    fe8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fe8e:	005b      	lsls	r3, r3, #1
    fe90:	4a45      	ldr	r2, [pc, #276]	; (ffa8 <attsCsfActClientState+0x14c>)
    fe92:	4413      	add	r3, r2
    fe94:	9304      	str	r3, [sp, #16]

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
    fe96:	9b04      	ldr	r3, [sp, #16]
    fe98:	785b      	ldrb	r3, [r3, #1]
    fe9a:	2b03      	cmp	r3, #3
    fe9c:	d120      	bne.n	fee0 <attsCsfActClientState+0x84>
  {
    /* If not a command */
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
    fe9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fea6:	2b00      	cmp	r3, #0
    fea8:	d10a      	bne.n	fec0 <attsCsfActClientState+0x64>
      /* Note: there is no need to call back to the application here.  The application only
       * needs to know when a transition to or from the change-aware state occurs.
       */

      /* Move client change-aware state to pending */
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    feaa:	9b04      	ldr	r3, [sp, #16]
    feac:	2201      	movs	r2, #1
    feae:	705a      	strb	r2, [r3, #1]

      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
    feb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    feb4:	3301      	adds	r3, #1
    feb6:	2201      	movs	r2, #1
    feb8:	4619      	mov	r1, r3
    feba:	483c      	ldr	r0, [pc, #240]	; (ffac <attsCsfActClientState+0x150>)
    febc:	f7fd fdc4 	bl	da48 <WsfTrace>
    }

    /* If this is a command or the Client has indicated Robust Caching, set an error so that
     * this command or request is not processed.
     */
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
    fec0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fec8:	2b00      	cmp	r3, #0
    feca:	d105      	bne.n	fed8 <attsCsfActClientState+0x7c>
        (pRec->csf & ATTS_CSF_ROBUST_CACHING))
    fecc:	9b04      	ldr	r3, [sp, #16]
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	f003 0301 	and.w	r3, r3, #1
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
    fed4:	2b00      	cmp	r3, #0
    fed6:	d02b      	beq.n	ff30 <attsCsfActClientState+0xd4>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    fed8:	2312      	movs	r3, #18
    feda:	f88d 3017 	strb.w	r3, [sp, #23]
    fede:	e027      	b.n	ff30 <attsCsfActClientState+0xd4>
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
    fee0:	9b04      	ldr	r3, [sp, #16]
    fee2:	785b      	ldrb	r3, [r3, #1]
    fee4:	2b01      	cmp	r3, #1
    fee6:	d123      	bne.n	ff30 <attsCsfActClientState+0xd4>
  {
    /* If not a command */
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
    fee8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    feec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fef0:	2b00      	cmp	r3, #0
    fef2:	d11a      	bne.n	ff2a <attsCsfActClientState+0xce>
    {
      /* Move client change-aware state to aware */
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
    fef4:	9b04      	ldr	r3, [sp, #16]
    fef6:	2200      	movs	r2, #0
    fef8:	705a      	strb	r2, [r3, #1]

      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
    fefa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fefe:	3301      	adds	r3, #1
    ff00:	2200      	movs	r2, #0
    ff02:	4619      	mov	r1, r3
    ff04:	4829      	ldr	r0, [pc, #164]	; (ffac <attsCsfActClientState+0x150>)
    ff06:	f7fd fd9f 	bl	da48 <WsfTrace>

      /* Callback to application to store updated awareness, if bonded. */
      if (attsCsfCb.writeCback != NULL)
    ff0a:	4b27      	ldr	r3, [pc, #156]	; (ffa8 <attsCsfActClientState+0x14c>)
    ff0c:	689b      	ldr	r3, [r3, #8]
    ff0e:	2b00      	cmp	r3, #0
    ff10:	d00e      	beq.n	ff30 <attsCsfActClientState+0xd4>
      {
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
    ff12:	4b25      	ldr	r3, [pc, #148]	; (ffa8 <attsCsfActClientState+0x14c>)
    ff14:	689b      	ldr	r3, [r3, #8]
    ff16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ff1a:	b2d2      	uxtb	r2, r2
    ff1c:	3201      	adds	r2, #1
    ff1e:	b2d0      	uxtb	r0, r2
    ff20:	9a04      	ldr	r2, [sp, #16]
    ff22:	7851      	ldrb	r1, [r2, #1]
    ff24:	9a04      	ldr	r2, [sp, #16]
    ff26:	4798      	blx	r3
    ff28:	e002      	b.n	ff30 <attsCsfActClientState+0xd4>
      }
    }
    else
    {
      /* Return an error so that command is not processed. */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    ff2a:	2312      	movs	r3, #18
    ff2c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
    ff30:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ff34:	2b08      	cmp	r3, #8
    ff36:	d124      	bne.n	ff82 <attsCsfActClientState+0x126>
  {
    uint16_t    uuid;

    /* Extract UUID: Skip L2C, ATT Header and 4 byte handle range */
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
    ff38:	9b00      	ldr	r3, [sp, #0]
    ff3a:	330d      	adds	r3, #13
    ff3c:	781b      	ldrb	r3, [r3, #0]
    ff3e:	b29a      	uxth	r2, r3
    ff40:	9b00      	ldr	r3, [sp, #0]
    ff42:	330e      	adds	r3, #14
    ff44:	781b      	ldrb	r3, [r3, #0]
    ff46:	b29b      	uxth	r3, r3
    ff48:	021b      	lsls	r3, r3, #8
    ff4a:	b29b      	uxth	r3, r3
    ff4c:	4413      	add	r3, r2
    ff4e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
    ff52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ff56:	f642 322a 	movw	r2, #11050	; 0x2b2a
    ff5a:	4293      	cmp	r3, r2
    ff5c:	d111      	bne.n	ff82 <attsCsfActClientState+0x126>
    {
      err = ATT_SUCCESS;
    ff5e:	2300      	movs	r3, #0
    ff60:	f88d 3017 	strb.w	r3, [sp, #23]

      /* Reading the hash during a hash update causes the new hash to be returned and counts
       * towards the peer's progression towards a change-aware state.
       */
      if (attsCsfCb.isHashUpdating)
    ff64:	4b10      	ldr	r3, [pc, #64]	; (ffa8 <attsCsfActClientState+0x14c>)
    ff66:	7b1b      	ldrb	r3, [r3, #12]
    ff68:	2b00      	cmp	r3, #0
    ff6a:	d00a      	beq.n	ff82 <attsCsfActClientState+0x126>
      {
        /* This read will not be processed until after the hash update completes, so this read
        * request shall be counted as a move from change-unaware to chang-aware pending.
        */
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
    ff6c:	9b04      	ldr	r3, [sp, #16]
    ff6e:	2202      	movs	r2, #2
    ff70:	705a      	strb	r2, [r3, #1]

        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
    ff72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ff76:	3301      	adds	r3, #1
    ff78:	2202      	movs	r2, #2
    ff7a:	4619      	mov	r1, r3
    ff7c:	480b      	ldr	r0, [pc, #44]	; (ffac <attsCsfActClientState+0x150>)
    ff7e:	f7fd fd63 	bl	da48 <WsfTrace>
                        ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING);
      }
    }
  }

  if (err == ATT_ERR_DATABASE_OUT_OF_SYNC)
    ff82:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ff86:	2b12      	cmp	r3, #18
    ff88:	d108      	bne.n	ff9c <attsCsfActClientState+0x140>
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
    ff8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ff8e:	3301      	adds	r3, #1
    ff90:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ff94:	4619      	mov	r1, r3
    ff96:	4806      	ldr	r0, [pc, #24]	; (ffb0 <attsCsfActClientState+0x154>)
    ff98:	f7fd fd56 	bl	da48 <WsfTrace>
  }

  return err;
    ff9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    ffa0:	4618      	mov	r0, r3
    ffa2:	b007      	add	sp, #28
    ffa4:	f85d fb04 	ldr.w	pc, [sp], #4
    ffa8:	10008a1c 	.word	0x10008a1c
    ffac:	0002b1ec 	.word	0x0002b1ec
    ffb0:	0002b210 	.word	0x0002b210

0000ffb4 <AttsCsfSetClientsChangeAwarenessState>:
 *  \note A callback to application is not needed as it is expected the caller (i.e. the
 *        application) will have updated all persistent records prior to calling this function.
 */
/*************************************************************************************************/
void AttsCsfSetClientsChangeAwarenessState(dmConnId_t connId, uint8_t state)
{
    ffb4:	b500      	push	{lr}
    ffb6:	b085      	sub	sp, #20
    ffb8:	4603      	mov	r3, r0
    ffba:	460a      	mov	r2, r1
    ffbc:	f88d 3007 	strb.w	r3, [sp, #7]
    ffc0:	4613      	mov	r3, r2
    ffc2:	f88d 3006 	strb.w	r3, [sp, #6]
  if (connId == DM_CONN_ID_NONE)
    ffc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d125      	bne.n	1001a <AttsCsfSetClientsChangeAwarenessState+0x66>
  {
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    ffce:	2300      	movs	r3, #0
    ffd0:	f88d 300f 	strb.w	r3, [sp, #15]
    ffd4:	e01c      	b.n	10010 <AttsCsfSetClientsChangeAwarenessState+0x5c>
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    ffd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ffda:	4a1a      	ldr	r2, [pc, #104]	; (10044 <AttsCsfSetClientsChangeAwarenessState+0x90>)
    ffdc:	005b      	lsls	r3, r3, #1
    ffde:	4413      	add	r3, r2
    ffe0:	785b      	ldrb	r3, [r3, #1]
    ffe2:	2b02      	cmp	r3, #2
    ffe4:	d107      	bne.n	fff6 <AttsCsfSetClientsChangeAwarenessState+0x42>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    ffe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ffea:	4a16      	ldr	r2, [pc, #88]	; (10044 <AttsCsfSetClientsChangeAwarenessState+0x90>)
    ffec:	005b      	lsls	r3, r3, #1
    ffee:	4413      	add	r3, r2
    fff0:	2201      	movs	r2, #1
    fff2:	705a      	strb	r2, [r3, #1]
    fff4:	e007      	b.n	10006 <AttsCsfSetClientsChangeAwarenessState+0x52>
      }
      else
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = state;
    fff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fffa:	4a12      	ldr	r2, [pc, #72]	; (10044 <AttsCsfSetClientsChangeAwarenessState+0x90>)
    fffc:	005b      	lsls	r3, r3, #1
    fffe:	4413      	add	r3, r2
   10000:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10004:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   10006:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1000a:	3301      	adds	r3, #1
   1000c:	f88d 300f 	strb.w	r3, [sp, #15]
   10010:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10014:	2b02      	cmp	r3, #2
   10016:	d9de      	bls.n	ffd6 <AttsCsfSetClientsChangeAwarenessState+0x22>
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;

    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
  }
}
   10018:	e010      	b.n	1003c <AttsCsfSetClientsChangeAwarenessState+0x88>
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;
   1001a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1001e:	3b01      	subs	r3, #1
   10020:	4a08      	ldr	r2, [pc, #32]	; (10044 <AttsCsfSetClientsChangeAwarenessState+0x90>)
   10022:	005b      	lsls	r3, r3, #1
   10024:	4413      	add	r3, r2
   10026:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1002a:	705a      	strb	r2, [r3, #1]
    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
   1002c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10030:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10034:	4619      	mov	r1, r3
   10036:	4804      	ldr	r0, [pc, #16]	; (10048 <AttsCsfSetClientsChangeAwarenessState+0x94>)
   10038:	f7fd fd06 	bl	da48 <WsfTrace>
}
   1003c:	bf00      	nop
   1003e:	b005      	add	sp, #20
   10040:	f85d fb04 	ldr.w	pc, [sp], #4
   10044:	10008a1c 	.word	0x10008a1c
   10048:	0002b1ec 	.word	0x0002b1ec

0001004c <AttsCsfConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfConnOpen(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
   1004c:	b500      	push	{lr}
   1004e:	b083      	sub	sp, #12
   10050:	4603      	mov	r3, r0
   10052:	9200      	str	r2, [sp, #0]
   10054:	f88d 3007 	strb.w	r3, [sp, #7]
   10058:	460b      	mov	r3, r1
   1005a:	f88d 3006 	strb.w	r3, [sp, #6]
  if (pCsf != NULL)
   1005e:	9b00      	ldr	r3, [sp, #0]
   10060:	2b00      	cmp	r3, #0
   10062:	d012      	beq.n	1008a <AttsCsfConnOpen+0x3e>
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
   10064:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10068:	3b01      	subs	r3, #1
   1006a:	4a0f      	ldr	r2, [pc, #60]	; (100a8 <AttsCsfConnOpen+0x5c>)
   1006c:	005b      	lsls	r3, r3, #1
   1006e:	4413      	add	r3, r2
   10070:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10074:	705a      	strb	r2, [r3, #1]
    memcpy(&attsCsfCb.attsCsfTable[connId - 1].csf, pCsf, ATT_CSF_LEN);
   10076:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1007a:	3b01      	subs	r3, #1
   1007c:	005b      	lsls	r3, r3, #1
   1007e:	4a0a      	ldr	r2, [pc, #40]	; (100a8 <AttsCsfConnOpen+0x5c>)
   10080:	4413      	add	r3, r2
   10082:	9a00      	ldr	r2, [sp, #0]
   10084:	7812      	ldrb	r2, [r2, #0]
   10086:	701a      	strb	r2, [r3, #0]
  else
  {
    /* Note: this set client to the change-aware state. */
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
  }
}
   10088:	e00a      	b.n	100a0 <AttsCsfConnOpen+0x54>
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
   1008a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1008e:	3b01      	subs	r3, #1
   10090:	005b      	lsls	r3, r3, #1
   10092:	4a05      	ldr	r2, [pc, #20]	; (100a8 <AttsCsfConnOpen+0x5c>)
   10094:	4413      	add	r3, r2
   10096:	2202      	movs	r2, #2
   10098:	2100      	movs	r1, #0
   1009a:	4618      	mov	r0, r3
   1009c:	f018 f9ce 	bl	2843c <memset>
}
   100a0:	bf00      	nop
   100a2:	b003      	add	sp, #12
   100a4:	f85d fb04 	ldr.w	pc, [sp], #4
   100a8:	10008a1c 	.word	0x10008a1c

000100ac <AttsCsfRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfRegister(attsCsfWriteCback_t writeCback)
{
   100ac:	b082      	sub	sp, #8
   100ae:	9001      	str	r0, [sp, #4]
  attsCsfCb.writeCback = writeCback;
   100b0:	4a02      	ldr	r2, [pc, #8]	; (100bc <AttsCsfRegister+0x10>)
   100b2:	9b01      	ldr	r3, [sp, #4]
   100b4:	6093      	str	r3, [r2, #8]
}
   100b6:	bf00      	nop
   100b8:	b002      	add	sp, #8
   100ba:	4770      	bx	lr
   100bc:	10008a1c 	.word	0x10008a1c

000100c0 <AttsCsfWriteFeatures>:
 *  \return \ref ATT_SUCCESS is successful, \ref ATT_ERR_VALUE_NOT_ALLOWED if any supported
 *          features are flipped from 1 to 0.
 */
/*************************************************************************************************/
uint8_t AttsCsfWriteFeatures(dmConnId_t connId, uint16_t offset, uint16_t valueLen, uint8_t *pValue)
{
   100c0:	b500      	push	{lr}
   100c2:	b087      	sub	sp, #28
   100c4:	9301      	str	r3, [sp, #4]
   100c6:	4603      	mov	r3, r0
   100c8:	f88d 300f 	strb.w	r3, [sp, #15]
   100cc:	460b      	mov	r3, r1
   100ce:	f8ad 300c 	strh.w	r3, [sp, #12]
   100d2:	4613      	mov	r3, r2
   100d4:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsCsfRec_t *pCsfRec = &attsCsfCb.attsCsfTable[connId - 1];
   100d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   100dc:	3b01      	subs	r3, #1
   100de:	005b      	lsls	r3, r3, #1
   100e0:	4a1a      	ldr	r2, [pc, #104]	; (1014c <AttsCsfWriteFeatures+0x8c>)
   100e2:	4413      	add	r3, r2
   100e4:	9305      	str	r3, [sp, #20]
  /* future parameter in case the client supported features characteristic becomes a multi-octet
   * structure.
   */
  (void)offset;

  if (valueLen > ATT_CSF_LEN)
   100e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   100ea:	2b01      	cmp	r3, #1
   100ec:	d901      	bls.n	100f2 <AttsCsfWriteFeatures+0x32>
  {
    return ATT_ERR_LENGTH;
   100ee:	230d      	movs	r3, #13
   100f0:	e027      	b.n	10142 <AttsCsfWriteFeatures+0x82>
  }

  /* A client can not clear any bits it has set. */
  if ((pCsfRec->csf & *pValue) < pCsfRec->csf)
   100f2:	9b05      	ldr	r3, [sp, #20]
   100f4:	781a      	ldrb	r2, [r3, #0]
   100f6:	9b01      	ldr	r3, [sp, #4]
   100f8:	781b      	ldrb	r3, [r3, #0]
   100fa:	4013      	ands	r3, r2
   100fc:	b2da      	uxtb	r2, r3
   100fe:	9b05      	ldr	r3, [sp, #20]
   10100:	781b      	ldrb	r3, [r3, #0]
   10102:	429a      	cmp	r2, r3
   10104:	d201      	bcs.n	1010a <AttsCsfWriteFeatures+0x4a>
  {
    return ATT_ERR_VALUE_NOT_ALLOWED;
   10106:	2313      	movs	r3, #19
   10108:	e01b      	b.n	10142 <AttsCsfWriteFeatures+0x82>
  }

  pCsfRec->csf = *pValue & ATTS_CSF_OCT0_FEATURES;
   1010a:	9b01      	ldr	r3, [sp, #4]
   1010c:	781b      	ldrb	r3, [r3, #0]
   1010e:	f003 0301 	and.w	r3, r3, #1
   10112:	b2da      	uxtb	r2, r3
   10114:	9b05      	ldr	r3, [sp, #20]
   10116:	701a      	strb	r2, [r3, #0]

  ATT_TRACE_INFO2("connId %d updated csf to 0x%02x", connId, pCsfRec->csf);
   10118:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1011c:	9b05      	ldr	r3, [sp, #20]
   1011e:	781b      	ldrb	r3, [r3, #0]
   10120:	461a      	mov	r2, r3
   10122:	480b      	ldr	r0, [pc, #44]	; (10150 <AttsCsfWriteFeatures+0x90>)
   10124:	f7fd fc90 	bl	da48 <WsfTrace>

  /* Callback to application to store updated features, if bonded. */
  if (attsCsfCb.writeCback != NULL)
   10128:	4b08      	ldr	r3, [pc, #32]	; (1014c <AttsCsfWriteFeatures+0x8c>)
   1012a:	689b      	ldr	r3, [r3, #8]
   1012c:	2b00      	cmp	r3, #0
   1012e:	d007      	beq.n	10140 <AttsCsfWriteFeatures+0x80>
  {
    attsCsfCb.writeCback(connId, pCsfRec->changeAwareState, &pCsfRec->csf);
   10130:	4b06      	ldr	r3, [pc, #24]	; (1014c <AttsCsfWriteFeatures+0x8c>)
   10132:	689b      	ldr	r3, [r3, #8]
   10134:	9a05      	ldr	r2, [sp, #20]
   10136:	7851      	ldrb	r1, [r2, #1]
   10138:	9a05      	ldr	r2, [sp, #20]
   1013a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1013e:	4798      	blx	r3
  }

  return ATT_SUCCESS;
   10140:	2300      	movs	r3, #0
}
   10142:	4618      	mov	r0, r3
   10144:	b007      	add	sp, #28
   10146:	f85d fb04 	ldr.w	pc, [sp], #4
   1014a:	bf00      	nop
   1014c:	10008a1c 	.word	0x10008a1c
   10150:	0002b248 	.word	0x0002b248

00010154 <AttsCsfGetFeatures>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfGetFeatures(dmConnId_t connId, uint8_t *pCsfOut, uint8_t pCsfOutLen)
{
   10154:	b500      	push	{lr}
   10156:	b083      	sub	sp, #12
   10158:	4603      	mov	r3, r0
   1015a:	9100      	str	r1, [sp, #0]
   1015c:	f88d 3007 	strb.w	r3, [sp, #7]
   10160:	4613      	mov	r3, r2
   10162:	f88d 3006 	strb.w	r3, [sp, #6]
  if (pCsfOutLen <= ATT_CSF_LEN)
   10166:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1016a:	2b01      	cmp	r3, #1
   1016c:	d80b      	bhi.n	10186 <AttsCsfGetFeatures+0x32>
  {
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
   1016e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10172:	3b01      	subs	r3, #1
   10174:	005b      	lsls	r3, r3, #1
   10176:	4a06      	ldr	r2, [pc, #24]	; (10190 <AttsCsfGetFeatures+0x3c>)
   10178:	4413      	add	r3, r2
   1017a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1017e:	4619      	mov	r1, r3
   10180:	9800      	ldr	r0, [sp, #0]
   10182:	f7fb ffbd 	bl	c100 <memcpy>
  }
}
   10186:	bf00      	nop
   10188:	b003      	add	sp, #12
   1018a:	f85d fb04 	ldr.w	pc, [sp], #4
   1018e:	bf00      	nop
   10190:	10008a1c 	.word	0x10008a1c

00010194 <AttsCsfGetChangeAwareState>:
 *
 *  \return Client's change-aware state.
 */
/*************************************************************************************************/
uint8_t AttsCsfGetChangeAwareState(dmConnId_t connId)
{
   10194:	b082      	sub	sp, #8
   10196:	4603      	mov	r3, r0
   10198:	f88d 3007 	strb.w	r3, [sp, #7]
  return attsCsfCb.attsCsfTable[connId - 1].changeAwareState;
   1019c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101a0:	3b01      	subs	r3, #1
   101a2:	4a03      	ldr	r2, [pc, #12]	; (101b0 <AttsCsfGetChangeAwareState+0x1c>)
   101a4:	005b      	lsls	r3, r3, #1
   101a6:	4413      	add	r3, r2
   101a8:	785b      	ldrb	r3, [r3, #1]
}
   101aa:	4618      	mov	r0, r3
   101ac:	b002      	add	sp, #8
   101ae:	4770      	bx	lr
   101b0:	10008a1c 	.word	0x10008a1c

000101b4 <attsIndCcbByConnId>:
 *
 *  \return Pointer to connection control block or NULL if not in use.
 */
/*************************************************************************************************/
static attsIndCcb_t *attsIndCcbByConnId(dmConnId_t connId)
{
   101b4:	b500      	push	{lr}
   101b6:	b083      	sub	sp, #12
   101b8:	4603      	mov	r3, r0
   101ba:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnInUse(connId))
   101be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101c2:	4618      	mov	r0, r3
   101c4:	f005 fdfc 	bl	15dc0 <DmConnInUse>
   101c8:	4603      	mov	r3, r0
   101ca:	2b00      	cmp	r3, #0
   101cc:	d009      	beq.n	101e2 <attsIndCcbByConnId+0x2e>
  {
    return &attsIndCb.ccb[connId - 1];
   101ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101d2:	1e5a      	subs	r2, r3, #1
   101d4:	4613      	mov	r3, r2
   101d6:	00db      	lsls	r3, r3, #3
   101d8:	1a9b      	subs	r3, r3, r2
   101da:	009b      	lsls	r3, r3, #2
   101dc:	4a06      	ldr	r2, [pc, #24]	; (101f8 <attsIndCcbByConnId+0x44>)
   101de:	4413      	add	r3, r2
   101e0:	e006      	b.n	101f0 <attsIndCcbByConnId+0x3c>
  }
  else
  {
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   101e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101e6:	4619      	mov	r1, r3
   101e8:	4804      	ldr	r0, [pc, #16]	; (101fc <attsIndCcbByConnId+0x48>)
   101ea:	f7fd fc2d 	bl	da48 <WsfTrace>
    return NULL;
   101ee:	2300      	movs	r3, #0
  }
}
   101f0:	4618      	mov	r0, r3
   101f2:	b003      	add	sp, #12
   101f4:	f85d fb04 	ldr.w	pc, [sp], #4
   101f8:	10008a2c 	.word	0x10008a2c
   101fc:	0002b268 	.word	0x0002b268

00010200 <attsPendIndNtfHandle>:
 *  \return TRUE if app callback's pending or max number of simultaneous notifications reached.
 *          FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t attsPendIndNtfHandle(attsIndCcb_t *pCcb, attsPktParam_t *pPkt)
{
   10200:	b084      	sub	sp, #16
   10202:	9001      	str	r0, [sp, #4]
   10204:	9100      	str	r1, [sp, #0]
  uint8_t     opcode;
  uint8_t     pendNtfs;
  uint8_t     i;

  /* extract opcode */
  opcode = *(((uint8_t *) pPkt) + L2C_PAYLOAD_START);
   10206:	9b00      	ldr	r3, [sp, #0]
   10208:	7a1b      	ldrb	r3, [r3, #8]
   1020a:	f88d 300d 	strb.w	r3, [sp, #13]

  /* if indication */
  if (opcode == ATT_PDU_VALUE_IND)
   1020e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   10212:	2b1d      	cmp	r3, #29
   10214:	d107      	bne.n	10226 <attsPendIndNtfHandle+0x26>
  {
    /* see if callback pending for indication */
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
   10216:	9b01      	ldr	r3, [sp, #4]
   10218:	8adb      	ldrh	r3, [r3, #22]
   1021a:	2b00      	cmp	r3, #0
   1021c:	bf14      	ite	ne
   1021e:	2301      	movne	r3, #1
   10220:	2300      	moveq	r3, #0
   10222:	b2db      	uxtb	r3, r3
   10224:	e02f      	b.n	10286 <attsPendIndNtfHandle+0x86>
  }

  /* initialize number of notification callbacks pending */
  pendNtfs = 0;
   10226:	2300      	movs	r3, #0
   10228:	f88d 300f 	strb.w	r3, [sp, #15]

  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   1022c:	2300      	movs	r3, #0
   1022e:	f88d 300e 	strb.w	r3, [sp, #14]
   10232:	e01d      	b.n	10270 <attsPendIndNtfHandle+0x70>
  {
    /* if callback pending for notification */
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   10234:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10238:	9b01      	ldr	r3, [sp, #4]
   1023a:	320c      	adds	r2, #12
   1023c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   10240:	2b00      	cmp	r3, #0
   10242:	d010      	beq.n	10266 <attsPendIndNtfHandle+0x66>
    {
      /* if callback pending for this handle */
      if (pCcb->pendNtfHandle[i] == pPkt->handle)
   10244:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10248:	9b01      	ldr	r3, [sp, #4]
   1024a:	320c      	adds	r2, #12
   1024c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   10250:	9b00      	ldr	r3, [sp, #0]
   10252:	885b      	ldrh	r3, [r3, #2]
   10254:	429a      	cmp	r2, r3
   10256:	d101      	bne.n	1025c <attsPendIndNtfHandle+0x5c>
      {
        /* callback pending for this notification */
        return TRUE;
   10258:	2301      	movs	r3, #1
   1025a:	e014      	b.n	10286 <attsPendIndNtfHandle+0x86>
      }

      pendNtfs++;
   1025c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10260:	3301      	adds	r3, #1
   10262:	f88d 300f 	strb.w	r3, [sp, #15]
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   10266:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1026a:	3301      	adds	r3, #1
   1026c:	f88d 300e 	strb.w	r3, [sp, #14]
   10270:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10274:	2b00      	cmp	r3, #0
   10276:	d0dd      	beq.n	10234 <attsPendIndNtfHandle+0x34>
    }
  }

  /* no callback is pending for this notification but see if the maximum number of simultaneous
     notifications has been reached */
  return (pendNtfs < ATT_NUM_SIMUL_NTF) ? FALSE : TRUE;
   10278:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1027c:	2b00      	cmp	r3, #0
   1027e:	bf14      	ite	ne
   10280:	2301      	movne	r3, #1
   10282:	2300      	moveq	r3, #0
   10284:	b2db      	uxtb	r3, r3
}
   10286:	4618      	mov	r0, r3
   10288:	b004      	add	sp, #16
   1028a:	4770      	bx	lr

0001028c <attsSetPendNtfHandle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsSetPendNtfHandle(attsIndCcb_t *pCcb, uint16_t handle)
{
   1028c:	b084      	sub	sp, #16
   1028e:	9001      	str	r0, [sp, #4]
   10290:	460b      	mov	r3, r1
   10292:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t     i;

  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   10296:	2300      	movs	r3, #0
   10298:	f88d 300f 	strb.w	r3, [sp, #15]
   1029c:	e015      	b.n	102ca <attsSetPendNtfHandle+0x3e>
  {
    /* if entry free */
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
   1029e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   102a2:	9b01      	ldr	r3, [sp, #4]
   102a4:	320c      	adds	r2, #12
   102a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   102aa:	2b00      	cmp	r3, #0
   102ac:	d108      	bne.n	102c0 <attsSetPendNtfHandle+0x34>
    {
      /* set pending notification handle */
      pCcb->pendNtfHandle[i] = handle;
   102ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   102b2:	9b01      	ldr	r3, [sp, #4]
   102b4:	320c      	adds	r2, #12
   102b6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   102ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      break;
   102be:	e009      	b.n	102d4 <attsSetPendNtfHandle+0x48>
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   102c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   102c4:	3301      	adds	r3, #1
   102c6:	f88d 300f 	strb.w	r3, [sp, #15]
   102ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   102ce:	2b00      	cmp	r3, #0
   102d0:	d0e5      	beq.n	1029e <attsSetPendNtfHandle+0x12>
    }
  }
}
   102d2:	bf00      	nop
   102d4:	bf00      	nop
   102d6:	b004      	add	sp, #16
   102d8:	4770      	bx	lr

000102da <attsExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsExecCallback(dmConnId_t connId, uint16_t handle, uint8_t status)
{
   102da:	b500      	push	{lr}
   102dc:	b085      	sub	sp, #20
   102de:	4603      	mov	r3, r0
   102e0:	f88d 300f 	strb.w	r3, [sp, #15]
   102e4:	460b      	mov	r3, r1
   102e6:	f8ad 300c 	strh.w	r3, [sp, #12]
   102ea:	4613      	mov	r3, r2
   102ec:	f88d 300e 	strb.w	r3, [sp, #14]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   102f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   102f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   102f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
   102fc:	2100      	movs	r1, #0
   102fe:	9100      	str	r1, [sp, #0]
   10300:	210f      	movs	r1, #15
   10302:	f002 feb3 	bl	1306c <attExecCallback>
}
   10306:	bf00      	nop
   10308:	b005      	add	sp, #20
   1030a:	f85d fb04 	ldr.w	pc, [sp], #4

0001030e <attsIndNtfCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndNtfCallback(dmConnId_t connId, attsIndCcb_t *pCcb, uint8_t status)
{
   1030e:	b500      	push	{lr}
   10310:	b085      	sub	sp, #20
   10312:	4603      	mov	r3, r0
   10314:	9100      	str	r1, [sp, #0]
   10316:	f88d 3007 	strb.w	r3, [sp, #7]
   1031a:	4613      	mov	r3, r2
   1031c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t     i;

  /* if pending indication callback */
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   10320:	9b00      	ldr	r3, [sp, #0]
   10322:	8adb      	ldrh	r3, [r3, #22]
   10324:	2b00      	cmp	r3, #0
   10326:	d00b      	beq.n	10340 <attsIndNtfCallback+0x32>
  {
    /* call indication callback with status */
    attsExecCallback(connId, pCcb->pendIndHandle, status);
   10328:	9b00      	ldr	r3, [sp, #0]
   1032a:	8ad9      	ldrh	r1, [r3, #22]
   1032c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10330:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10334:	4618      	mov	r0, r3
   10336:	f7ff ffd0 	bl	102da <attsExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   1033a:	9b00      	ldr	r3, [sp, #0]
   1033c:	2200      	movs	r2, #0
   1033e:	82da      	strh	r2, [r3, #22]
  }

  /* if any pending notification callback */
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   10340:	2300      	movs	r3, #0
   10342:	f88d 300f 	strb.w	r3, [sp, #15]
   10346:	e020      	b.n	1038a <attsIndNtfCallback+0x7c>
  {
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   10348:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1034c:	9b00      	ldr	r3, [sp, #0]
   1034e:	320c      	adds	r2, #12
   10350:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   10354:	2b00      	cmp	r3, #0
   10356:	d013      	beq.n	10380 <attsIndNtfCallback+0x72>
    {
      /* call notification callback with status */
      attsExecCallback(connId, pCcb->pendNtfHandle[i], status);
   10358:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1035c:	9b00      	ldr	r3, [sp, #0]
   1035e:	320c      	adds	r2, #12
   10360:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   10364:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10368:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1036c:	4618      	mov	r0, r3
   1036e:	f7ff ffb4 	bl	102da <attsExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   10372:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10376:	9b00      	ldr	r3, [sp, #0]
   10378:	320c      	adds	r2, #12
   1037a:	2100      	movs	r1, #0
   1037c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   10380:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10384:	3301      	adds	r3, #1
   10386:	f88d 300f 	strb.w	r3, [sp, #15]
   1038a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1038e:	2b00      	cmp	r3, #0
   10390:	d0da      	beq.n	10348 <attsIndNtfCallback+0x3a>
    }
  }
}
   10392:	bf00      	nop
   10394:	bf00      	nop
   10396:	b005      	add	sp, #20
   10398:	f85d fb04 	ldr.w	pc, [sp], #4

0001039c <attsSetupMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsSetupMsg(attsIndCcb_t *pCcb, dmConnId_t connId, attsPktParam_t *pPkt)
{
   1039c:	b500      	push	{lr}
   1039e:	b087      	sub	sp, #28
   103a0:	9003      	str	r0, [sp, #12]
   103a2:	460b      	mov	r3, r1
   103a4:	9201      	str	r2, [sp, #4]
   103a6:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t     opcode;
  uint16_t    handle;

  /* extract opcode */
  opcode = *(((uint8_t *) pPkt) + L2C_PAYLOAD_START);
   103aa:	9b01      	ldr	r3, [sp, #4]
   103ac:	7a1b      	ldrb	r3, [r3, #8]
   103ae:	f88d 3017 	strb.w	r3, [sp, #23]

  /* copy handle (it may be overwritten in pPkt) */
  handle = pPkt->handle;
   103b2:	9b01      	ldr	r3, [sp, #4]
   103b4:	885b      	ldrh	r3, [r3, #2]
   103b6:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* send pdu */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   103ba:	9b03      	ldr	r3, [sp, #12]
   103bc:	691b      	ldr	r3, [r3, #16]
   103be:	8b19      	ldrh	r1, [r3, #24]
   103c0:	9b01      	ldr	r3, [sp, #4]
   103c2:	881a      	ldrh	r2, [r3, #0]
   103c4:	9b01      	ldr	r3, [sp, #4]
   103c6:	2004      	movs	r0, #4
   103c8:	f7fc f972 	bl	c6b0 <L2cDataReq>

  /* if indication store handle and start timer */
  if (opcode == ATT_PDU_VALUE_IND)
   103cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   103d0:	2b1d      	cmp	r3, #29
   103d2:	d113      	bne.n	103fc <attsSetupMsg+0x60>
  {
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   103d4:	9b03      	ldr	r3, [sp, #12]
   103d6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   103da:	82da      	strh	r2, [r3, #22]
   103dc:	9b03      	ldr	r3, [sp, #12]
   103de:	8ada      	ldrh	r2, [r3, #22]
   103e0:	9b03      	ldr	r3, [sp, #12]
   103e2:	829a      	strh	r2, [r3, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   103e4:	9b03      	ldr	r3, [sp, #12]
   103e6:	2222      	movs	r2, #34	; 0x22
   103e8:	731a      	strb	r2, [r3, #12]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   103ea:	9a03      	ldr	r2, [sp, #12]
   103ec:	4b10      	ldr	r3, [pc, #64]	; (10430 <attsSetupMsg+0x94>)
   103ee:	681b      	ldr	r3, [r3, #0]
   103f0:	799b      	ldrb	r3, [r3, #6]
   103f2:	4619      	mov	r1, r3
   103f4:	4610      	mov	r0, r2
   103f6:	f7fd fa3f 	bl	d878 <WsfTimerStartSec>
  /* else set pending notification callback for this handle */
  else
  {
    attsSetPendNtfHandle(pCcb, handle);
  }
}
   103fa:	e015      	b.n	10428 <attsSetupMsg+0x8c>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   103fc:	9b03      	ldr	r3, [sp, #12]
   103fe:	691b      	ldr	r3, [r3, #16]
   10400:	7f5b      	ldrb	r3, [r3, #29]
   10402:	f003 0302 	and.w	r3, r3, #2
   10406:	2b00      	cmp	r3, #0
   10408:	d108      	bne.n	1041c <attsSetupMsg+0x80>
    attsExecCallback(connId, handle, ATT_SUCCESS);
   1040a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1040e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10412:	2200      	movs	r2, #0
   10414:	4618      	mov	r0, r3
   10416:	f7ff ff60 	bl	102da <attsExecCallback>
}
   1041a:	e005      	b.n	10428 <attsSetupMsg+0x8c>
    attsSetPendNtfHandle(pCcb, handle);
   1041c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   10420:	4619      	mov	r1, r3
   10422:	9803      	ldr	r0, [sp, #12]
   10424:	f7ff ff32 	bl	1028c <attsSetPendNtfHandle>
}
   10428:	bf00      	nop
   1042a:	b007      	add	sp, #28
   1042c:	f85d fb04 	ldr.w	pc, [sp], #4
   10430:	10002bcc 	.word	0x10002bcc

00010434 <attsIndConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   10434:	b500      	push	{lr}
   10436:	b085      	sub	sp, #20
   10438:	9001      	str	r0, [sp, #4]
   1043a:	9100      	str	r1, [sp, #0]
  attsIndCcb_t *pIndCcb;
  uint8_t      status;

  /* if connection opened */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1043c:	9b00      	ldr	r3, [sp, #0]
   1043e:	789b      	ldrb	r3, [r3, #2]
   10440:	2b27      	cmp	r3, #39	; 0x27
   10442:	d02f      	beq.n	104a4 <attsIndConnCback+0x70>
  {

  }
  /* if connection closed */
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   10444:	9b00      	ldr	r3, [sp, #0]
   10446:	789b      	ldrb	r3, [r3, #2]
   10448:	2b28      	cmp	r3, #40	; 0x28
   1044a:	d12b      	bne.n	104a4 <attsIndConnCback+0x70>
  {
    /* set status */
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   1044c:	9b00      	ldr	r3, [sp, #0]
   1044e:	78db      	ldrb	r3, [r3, #3]
   10450:	2b00      	cmp	r3, #0
   10452:	d105      	bne.n	10460 <attsIndConnCback+0x2c>
    {
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   10454:	9b00      	ldr	r3, [sp, #0]
   10456:	7a1b      	ldrb	r3, [r3, #8]
   10458:	3320      	adds	r3, #32
   1045a:	f88d 300f 	strb.w	r3, [sp, #15]
   1045e:	e004      	b.n	1046a <attsIndConnCback+0x36>
    }
    else
    {
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   10460:	9b00      	ldr	r3, [sp, #0]
   10462:	78db      	ldrb	r3, [r3, #3]
   10464:	3320      	adds	r3, #32
   10466:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    /* get server control block directly */
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   1046a:	9b01      	ldr	r3, [sp, #4]
   1046c:	7f1b      	ldrb	r3, [r3, #28]
   1046e:	1e5a      	subs	r2, r3, #1
   10470:	4613      	mov	r3, r2
   10472:	00db      	lsls	r3, r3, #3
   10474:	1a9b      	subs	r3, r3, r2
   10476:	009b      	lsls	r3, r3, #2
   10478:	4a0c      	ldr	r2, [pc, #48]	; (104ac <attsIndConnCback+0x78>)
   1047a:	4413      	add	r3, r2
   1047c:	9302      	str	r3, [sp, #8]

    /* if outstanding indication */
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   1047e:	9b02      	ldr	r3, [sp, #8]
   10480:	8a9b      	ldrh	r3, [r3, #20]
   10482:	2b00      	cmp	r3, #0
   10484:	d006      	beq.n	10494 <attsIndConnCback+0x60>
    {
      /* stop timer */
      WsfTimerStop(&pIndCcb->outIndTimer);
   10486:	9b02      	ldr	r3, [sp, #8]
   10488:	4618      	mov	r0, r3
   1048a:	f7fd fa19 	bl	d8c0 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   1048e:	9b02      	ldr	r3, [sp, #8]
   10490:	2200      	movs	r2, #0
   10492:	829a      	strh	r2, [r3, #20]
    }

    /* call pending indication and notification callback */
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
   10494:	9b01      	ldr	r3, [sp, #4]
   10496:	7f1b      	ldrb	r3, [r3, #28]
   10498:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1049c:	9902      	ldr	r1, [sp, #8]
   1049e:	4618      	mov	r0, r3
   104a0:	f7ff ff35 	bl	1030e <attsIndNtfCallback>
  }
}
   104a4:	bf00      	nop
   104a6:	b005      	add	sp, #20
   104a8:	f85d fb04 	ldr.w	pc, [sp], #4
   104ac:	10008a2c 	.word	0x10008a2c

000104b0 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
   104b0:	b500      	push	{lr}
   104b2:	b085      	sub	sp, #20
   104b4:	9001      	str	r0, [sp, #4]
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   104b6:	9b01      	ldr	r3, [sp, #4]
   104b8:	881b      	ldrh	r3, [r3, #0]
   104ba:	b2db      	uxtb	r3, r3
   104bc:	4618      	mov	r0, r3
   104be:	f7ff fe79 	bl	101b4 <attsIndCcbByConnId>
   104c2:	9003      	str	r0, [sp, #12]
   104c4:	9b03      	ldr	r3, [sp, #12]
   104c6:	2b00      	cmp	r3, #0
   104c8:	d109      	bne.n	104de <attsIndMsgCback+0x2e>
  {
    /* if message has a packet buffer free packet buffer */
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	789b      	ldrb	r3, [r3, #2]
   104ce:	2b21      	cmp	r3, #33	; 0x21
   104d0:	d14d      	bne.n	1056e <attsIndMsgCback+0xbe>
    {
      WsfMsgFree(pMsg->pPkt);
   104d2:	9b01      	ldr	r3, [sp, #4]
   104d4:	685b      	ldr	r3, [r3, #4]
   104d6:	4618      	mov	r0, r3
   104d8:	f7fc fe64 	bl	d1a4 <WsfMsgFree>
    }

    /* ignore if connection not in use */
    return;
   104dc:	e047      	b.n	1056e <attsIndMsgCback+0xbe>
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   104de:	9b01      	ldr	r3, [sp, #4]
   104e0:	789b      	ldrb	r3, [r3, #2]
   104e2:	2b21      	cmp	r3, #33	; 0x21
   104e4:	d122      	bne.n	1052c <attsIndMsgCback+0x7c>
  {
    /* verify no API message already pending */
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   104e6:	9b01      	ldr	r3, [sp, #4]
   104e8:	685b      	ldr	r3, [r3, #4]
   104ea:	4619      	mov	r1, r3
   104ec:	9803      	ldr	r0, [sp, #12]
   104ee:	f7ff fe87 	bl	10200 <attsPendIndNtfHandle>
   104f2:	4603      	mov	r3, r0
   104f4:	2b00      	cmp	r3, #0
   104f6:	d00f      	beq.n	10518 <attsIndMsgCback+0x68>
    {
      /* call callback with failure status and free packet buffer */
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pMsg->pPkt->handle, ATT_ERR_OVERFLOW);
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	881b      	ldrh	r3, [r3, #0]
   104fc:	b2d8      	uxtb	r0, r3
   104fe:	9b01      	ldr	r3, [sp, #4]
   10500:	685b      	ldr	r3, [r3, #4]
   10502:	885b      	ldrh	r3, [r3, #2]
   10504:	2272      	movs	r2, #114	; 0x72
   10506:	4619      	mov	r1, r3
   10508:	f7ff fee7 	bl	102da <attsExecCallback>
      WsfMsgFree(pMsg->pPkt);
   1050c:	9b01      	ldr	r3, [sp, #4]
   1050e:	685b      	ldr	r3, [r3, #4]
   10510:	4618      	mov	r0, r3
   10512:	f7fc fe47 	bl	d1a4 <WsfMsgFree>
   10516:	e02b      	b.n	10570 <attsIndMsgCback+0xc0>
    }
    /* otherwise ready to send; set up request */
    else
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
   10518:	9b01      	ldr	r3, [sp, #4]
   1051a:	881b      	ldrh	r3, [r3, #0]
   1051c:	b2d9      	uxtb	r1, r3
   1051e:	9b01      	ldr	r3, [sp, #4]
   10520:	685b      	ldr	r3, [r3, #4]
   10522:	461a      	mov	r2, r3
   10524:	9803      	ldr	r0, [sp, #12]
   10526:	f7ff ff39 	bl	1039c <attsSetupMsg>
   1052a:	e021      	b.n	10570 <attsIndMsgCback+0xc0>
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
   1052c:	9b01      	ldr	r3, [sp, #4]
   1052e:	789b      	ldrb	r3, [r3, #2]
   10530:	2b22      	cmp	r3, #34	; 0x22
   10532:	d11d      	bne.n	10570 <attsIndMsgCback+0xc0>
  {
    /* if outstanding indication */
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
   10534:	9b03      	ldr	r3, [sp, #12]
   10536:	8a9b      	ldrh	r3, [r3, #20]
   10538:	2b00      	cmp	r3, #0
   1053a:	d019      	beq.n	10570 <attsIndMsgCback+0xc0>
    {
      /* clear out handle */
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   1053c:	9b03      	ldr	r3, [sp, #12]
   1053e:	2200      	movs	r2, #0
   10540:	829a      	strh	r2, [r3, #20]

      /* call callback with timeout error */
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
   10542:	9b01      	ldr	r3, [sp, #4]
   10544:	881b      	ldrh	r3, [r3, #0]
   10546:	b2d8      	uxtb	r0, r3
   10548:	9b03      	ldr	r3, [sp, #12]
   1054a:	8adb      	ldrh	r3, [r3, #22]
   1054c:	2271      	movs	r2, #113	; 0x71
   1054e:	4619      	mov	r1, r3
   10550:	f7ff fec3 	bl	102da <attsExecCallback>
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
   10554:	9b03      	ldr	r3, [sp, #12]
   10556:	2200      	movs	r2, #0
   10558:	82da      	strh	r2, [r3, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   1055a:	9b03      	ldr	r3, [sp, #12]
   1055c:	691b      	ldr	r3, [r3, #16]
   1055e:	7f5a      	ldrb	r2, [r3, #29]
   10560:	9b03      	ldr	r3, [sp, #12]
   10562:	691b      	ldr	r3, [r3, #16]
   10564:	f042 0204 	orr.w	r2, r2, #4
   10568:	b2d2      	uxtb	r2, r2
   1056a:	775a      	strb	r2, [r3, #29]
   1056c:	e000      	b.n	10570 <attsIndMsgCback+0xc0>
    return;
   1056e:	bf00      	nop
    }
  }
}
   10570:	b005      	add	sp, #20
   10572:	f85d fb04 	ldr.w	pc, [sp], #4

00010576 <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
   10576:	b500      	push	{lr}
   10578:	b085      	sub	sp, #20
   1057a:	9001      	str	r0, [sp, #4]
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   1057c:	9b01      	ldr	r3, [sp, #4]
   1057e:	881b      	ldrh	r3, [r3, #0]
   10580:	b2db      	uxtb	r3, r3
   10582:	4618      	mov	r0, r3
   10584:	f7ff fe16 	bl	101b4 <attsIndCcbByConnId>
   10588:	9003      	str	r0, [sp, #12]
   1058a:	9b03      	ldr	r3, [sp, #12]
   1058c:	2b00      	cmp	r3, #0
   1058e:	d007      	beq.n	105a0 <attsIndCtrlCback+0x2a>
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   10590:	9b01      	ldr	r3, [sp, #4]
   10592:	881b      	ldrh	r3, [r3, #0]
   10594:	b2db      	uxtb	r3, r3
   10596:	2200      	movs	r2, #0
   10598:	9903      	ldr	r1, [sp, #12]
   1059a:	4618      	mov	r0, r3
   1059c:	f7ff feb7 	bl	1030e <attsIndNtfCallback>
  }
}
   105a0:	bf00      	nop
   105a2:	b005      	add	sp, #20
   105a4:	f85d fb04 	ldr.w	pc, [sp], #4

000105a8 <attsHandleValueIndNtf>:
 *  \return None.
 */
/*************************************************************************************************/
static void attsHandleValueIndNtf(dmConnId_t connId, uint16_t handle, uint16_t valueLen,
                                  uint8_t *pValue, uint8_t opcode, bool_t zeroCpy)
{
   105a8:	b500      	push	{lr}
   105aa:	b089      	sub	sp, #36	; 0x24
   105ac:	9301      	str	r3, [sp, #4]
   105ae:	4603      	mov	r3, r0
   105b0:	f88d 300f 	strb.w	r3, [sp, #15]
   105b4:	460b      	mov	r3, r1
   105b6:	f8ad 300c 	strh.w	r3, [sp, #12]
   105ba:	4613      	mov	r3, r2
   105bc:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsIndCcb_t   *pCcb;
  uint16_t       mtu;
  bool_t         transTimedOut;
  bool_t         pktSent = FALSE;
   105c0:	2300      	movs	r3, #0
   105c2:	f88d 301c 	strb.w	r3, [sp, #28]

  WsfTaskLock();
   105c6:	f7fc fe61 	bl	d28c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId(connId)) != NULL)
   105ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   105ce:	4618      	mov	r0, r3
   105d0:	f7ff fdf0 	bl	101b4 <attsIndCcbByConnId>
   105d4:	9006      	str	r0, [sp, #24]
   105d6:	9b06      	ldr	r3, [sp, #24]
   105d8:	2b00      	cmp	r3, #0
   105da:	d011      	beq.n	10600 <attsHandleValueIndNtf+0x58>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   105dc:	9b06      	ldr	r3, [sp, #24]
   105de:	691b      	ldr	r3, [r3, #16]
   105e0:	8b5b      	ldrh	r3, [r3, #26]
   105e2:	f8ad 301e 	strh.w	r3, [sp, #30]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   105e6:	9b06      	ldr	r3, [sp, #24]
   105e8:	691b      	ldr	r3, [r3, #16]
   105ea:	7f5b      	ldrb	r3, [r3, #29]
   105ec:	f003 0304 	and.w	r3, r3, #4
   105f0:	2b00      	cmp	r3, #0
   105f2:	bf14      	ite	ne
   105f4:	2301      	movne	r3, #1
   105f6:	2300      	moveq	r3, #0
   105f8:	b2db      	uxtb	r3, r3
   105fa:	f88d 301d 	strb.w	r3, [sp, #29]
   105fe:	e005      	b.n	1060c <attsHandleValueIndNtf+0x64>
  }
  /* else connection not in use */
  else
  {
    /* MTU size unknown */
    mtu = 0;
   10600:	2300      	movs	r3, #0
   10602:	f8ad 301e 	strh.w	r3, [sp, #30]
    transTimedOut = FALSE;
   10606:	2300      	movs	r3, #0
   10608:	f88d 301d 	strb.w	r3, [sp, #29]
  }

  WsfTaskUnlock();
   1060c:	f7fc fe43 	bl	d296 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   10610:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   10614:	2b00      	cmp	r3, #0
   10616:	f000 808f 	beq.w	10738 <attsHandleValueIndNtf+0x190>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   1061a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1061e:	2b00      	cmp	r3, #0
   10620:	f040 8082 	bne.w	10728 <attsHandleValueIndNtf+0x180>
    {
      /* Only send notifications and indications if client is aware of any database changes. */
      if (attsCsfIsClientChangeAware(connId, handle))
   10624:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10628:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1062c:	4611      	mov	r1, r2
   1062e:	4618      	mov	r0, r3
   10630:	f7ff fbec 	bl	fe0c <attsCsfIsClientChangeAware>
   10634:	4603      	mov	r3, r0
   10636:	2b00      	cmp	r3, #0
   10638:	d07e      	beq.n	10738 <attsHandleValueIndNtf+0x190>
      {
        /* if packet length is less than or equal to negotiated MTU */
        if ((valueLen + ATT_VALUE_NTF_LEN) <= mtu)
   1063a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1063e:	1c9a      	adds	r2, r3, #2
   10640:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   10644:	429a      	cmp	r2, r3
   10646:	da66      	bge.n	10716 <attsHandleValueIndNtf+0x16e>
        {
          attsApiMsg_t  *pMsg;
          uint8_t       *p;

          /* allocate message buffer */
          if ((pMsg = WsfMsgAlloc(sizeof(attsApiMsg_t))) != NULL)
   10648:	2008      	movs	r0, #8
   1064a:	f7fc fd93 	bl	d174 <WsfMsgAlloc>
   1064e:	9005      	str	r0, [sp, #20]
   10650:	9b05      	ldr	r3, [sp, #20]
   10652:	2b00      	cmp	r3, #0
   10654:	d070      	beq.n	10738 <attsHandleValueIndNtf+0x190>
          {
            /* set parameters */
            pMsg->hdr.param = connId;
   10656:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1065a:	b29a      	uxth	r2, r3
   1065c:	9b05      	ldr	r3, [sp, #20]
   1065e:	801a      	strh	r2, [r3, #0]
            pMsg->hdr.event = ATTS_MSG_API_VALUE_IND_NTF;
   10660:	9b05      	ldr	r3, [sp, #20]
   10662:	2221      	movs	r2, #33	; 0x21
   10664:	709a      	strb	r2, [r3, #2]

            if (zeroCpy)
   10666:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1066a:	2b00      	cmp	r3, #0
   1066c:	d005      	beq.n	1067a <attsHandleValueIndNtf+0xd2>
            {
              /* use packet buffer provided */
              pMsg->pPkt = (attsPktParam_t *)(pValue - ATT_VALUE_IND_NTF_BUF_LEN);
   1066e:	9b01      	ldr	r3, [sp, #4]
   10670:	f1a3 020b 	sub.w	r2, r3, #11
   10674:	9b05      	ldr	r3, [sp, #20]
   10676:	605a      	str	r2, [r3, #4]
   10678:	e009      	b.n	1068e <attsHandleValueIndNtf+0xe6>
            }
            else
            {
              /* allocate packet buffer */
              pMsg->pPkt = attMsgAlloc(ATT_VALUE_IND_NTF_BUF_LEN + valueLen);
   1067a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1067e:	330b      	adds	r3, #11
   10680:	b29b      	uxth	r3, r3
   10682:	4618      	mov	r0, r3
   10684:	f002 fd2e 	bl	130e4 <attMsgAlloc>
   10688:	4602      	mov	r2, r0
   1068a:	9b05      	ldr	r3, [sp, #20]
   1068c:	605a      	str	r2, [r3, #4]
            }

            if (pMsg->pPkt != NULL)
   1068e:	9b05      	ldr	r3, [sp, #20]
   10690:	685b      	ldr	r3, [r3, #4]
   10692:	2b00      	cmp	r3, #0
   10694:	d03b      	beq.n	1070e <attsHandleValueIndNtf+0x166>
            {
              /* set data length and handle (ind and ntf have same header length) */
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
   10696:	9b05      	ldr	r3, [sp, #20]
   10698:	685b      	ldr	r3, [r3, #4]
   1069a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1069e:	3203      	adds	r2, #3
   106a0:	b292      	uxth	r2, r2
   106a2:	801a      	strh	r2, [r3, #0]
              pMsg->pPkt->handle = handle;
   106a4:	9b05      	ldr	r3, [sp, #20]
   106a6:	685b      	ldr	r3, [r3, #4]
   106a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   106ac:	805a      	strh	r2, [r3, #2]

              /* build packet */
              p = (uint8_t *)pMsg->pPkt + L2C_PAYLOAD_START;
   106ae:	9b05      	ldr	r3, [sp, #20]
   106b0:	685b      	ldr	r3, [r3, #4]
   106b2:	3308      	adds	r3, #8
   106b4:	9304      	str	r3, [sp, #16]
              UINT8_TO_BSTREAM(p, opcode);
   106b6:	9b04      	ldr	r3, [sp, #16]
   106b8:	1c5a      	adds	r2, r3, #1
   106ba:	9204      	str	r2, [sp, #16]
   106bc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   106c0:	701a      	strb	r2, [r3, #0]
              UINT16_TO_BSTREAM(p, handle);
   106c2:	9b04      	ldr	r3, [sp, #16]
   106c4:	1c5a      	adds	r2, r3, #1
   106c6:	9204      	str	r2, [sp, #16]
   106c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   106cc:	b2d2      	uxtb	r2, r2
   106ce:	701a      	strb	r2, [r3, #0]
   106d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   106d4:	0a1b      	lsrs	r3, r3, #8
   106d6:	b299      	uxth	r1, r3
   106d8:	9b04      	ldr	r3, [sp, #16]
   106da:	1c5a      	adds	r2, r3, #1
   106dc:	9204      	str	r2, [sp, #16]
   106de:	b2ca      	uxtb	r2, r1
   106e0:	701a      	strb	r2, [r3, #0]

              if (!zeroCpy)
   106e2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   106e6:	2b00      	cmp	r3, #0
   106e8:	d106      	bne.n	106f8 <attsHandleValueIndNtf+0x150>
              {
                memcpy(p, pValue, valueLen);
   106ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   106ee:	461a      	mov	r2, r3
   106f0:	9901      	ldr	r1, [sp, #4]
   106f2:	9804      	ldr	r0, [sp, #16]
   106f4:	f7fb fd04 	bl	c100 <memcpy>
              }

              /* send message */
              WsfMsgSend(attCb.handlerId, pMsg);
   106f8:	4b18      	ldr	r3, [pc, #96]	; (1075c <attsHandleValueIndNtf+0x1b4>)
   106fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   106fe:	9905      	ldr	r1, [sp, #20]
   10700:	4618      	mov	r0, r3
   10702:	f7fc fd5b 	bl	d1bc <WsfMsgSend>
              pktSent = TRUE;
   10706:	2301      	movs	r3, #1
   10708:	f88d 301c 	strb.w	r3, [sp, #28]
   1070c:	e014      	b.n	10738 <attsHandleValueIndNtf+0x190>
            }
            else
            {
              /* free message buffer if packet buffer alloc failed */
              WsfMsgFree(pMsg);
   1070e:	9805      	ldr	r0, [sp, #20]
   10710:	f7fc fd48 	bl	d1a4 <WsfMsgFree>
   10714:	e010      	b.n	10738 <attsHandleValueIndNtf+0x190>
        }
        /* packet length exceeds MTU size */
        else
        {
          /* call callback with failure status */
          attsExecCallback(connId, handle, ATT_ERR_MTU_EXCEEDED);
   10716:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1071a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1071e:	2277      	movs	r2, #119	; 0x77
   10720:	4618      	mov	r0, r3
   10722:	f7ff fdda 	bl	102da <attsExecCallback>
   10726:	e007      	b.n	10738 <attsHandleValueIndNtf+0x190>
    }
    else
    /* transaction's timed out */
    {
      /* call callback with failure status */
      attsExecCallback(connId, handle, ATT_ERR_TIMEOUT);
   10728:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1072c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10730:	2271      	movs	r2, #113	; 0x71
   10732:	4618      	mov	r0, r3
   10734:	f7ff fdd1 	bl	102da <attsExecCallback>
    }
  }

  /* if packet wasn't sent and it's a zero-copy packet */
  if (!pktSent && zeroCpy)
   10738:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1073c:	2b00      	cmp	r3, #0
   1073e:	d109      	bne.n	10754 <attsHandleValueIndNtf+0x1ac>
   10740:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   10744:	2b00      	cmp	r3, #0
   10746:	d005      	beq.n	10754 <attsHandleValueIndNtf+0x1ac>
  {
    /* free packet buffer provided */
    AttMsgFree(pValue, opcode);
   10748:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1074c:	4619      	mov	r1, r3
   1074e:	9801      	ldr	r0, [sp, #4]
   10750:	f002 fd48 	bl	131e4 <AttMsgFree>
  }
}
   10754:	bf00      	nop
   10756:	b009      	add	sp, #36	; 0x24
   10758:	f85d fb04 	ldr.w	pc, [sp], #4
   1075c:	10008a98 	.word	0x10008a98

00010760 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   10760:	b500      	push	{lr}
   10762:	b087      	sub	sp, #28
   10764:	9003      	str	r0, [sp, #12]
   10766:	460b      	mov	r3, r1
   10768:	9201      	str	r2, [sp, #4]
   1076a:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
   1076e:	9b03      	ldr	r3, [sp, #12]
   10770:	7f1b      	ldrb	r3, [r3, #28]
   10772:	4618      	mov	r0, r3
   10774:	f7ff fd1e 	bl	101b4 <attsIndCcbByConnId>
   10778:	9005      	str	r0, [sp, #20]
   1077a:	9b05      	ldr	r3, [sp, #20]
   1077c:	2b00      	cmp	r3, #0
   1077e:	d01c      	beq.n	107ba <attsProcValueCnf+0x5a>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   10780:	9b05      	ldr	r3, [sp, #20]
   10782:	8a9b      	ldrh	r3, [r3, #20]
   10784:	2b00      	cmp	r3, #0
   10786:	d019      	beq.n	107bc <attsProcValueCnf+0x5c>
  {
    /* clear outstanding indication */
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   10788:	9b05      	ldr	r3, [sp, #20]
   1078a:	2200      	movs	r2, #0
   1078c:	829a      	strh	r2, [r3, #20]

    /* stop indication timer */
    WsfTimerStop(&pIndCcb->outIndTimer);
   1078e:	9b05      	ldr	r3, [sp, #20]
   10790:	4618      	mov	r0, r3
   10792:	f7fd f895 	bl	d8c0 <WsfTimerStop>

    /* call callback if flow control permits */
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   10796:	9b03      	ldr	r3, [sp, #12]
   10798:	7f5b      	ldrb	r3, [r3, #29]
   1079a:	f003 0302 	and.w	r3, r3, #2
   1079e:	2b00      	cmp	r3, #0
   107a0:	d10c      	bne.n	107bc <attsProcValueCnf+0x5c>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
   107a2:	9b03      	ldr	r3, [sp, #12]
   107a4:	7f18      	ldrb	r0, [r3, #28]
   107a6:	9b05      	ldr	r3, [sp, #20]
   107a8:	8adb      	ldrh	r3, [r3, #22]
   107aa:	2200      	movs	r2, #0
   107ac:	4619      	mov	r1, r3
   107ae:	f7ff fd94 	bl	102da <attsExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
   107b2:	9b05      	ldr	r3, [sp, #20]
   107b4:	2200      	movs	r2, #0
   107b6:	82da      	strh	r2, [r3, #22]
   107b8:	e000      	b.n	107bc <attsProcValueCnf+0x5c>
    return;
   107ba:	bf00      	nop
    }
  }
}
   107bc:	b007      	add	sp, #28
   107be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000107c4 <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
   107c4:	b082      	sub	sp, #8
  uint8_t       i;
  attsIndCcb_t  *pCcb;

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   107c6:	2300      	movs	r3, #0
   107c8:	f88d 3007 	strb.w	r3, [sp, #7]
   107cc:	4b15      	ldr	r3, [pc, #84]	; (10824 <AttsIndInit+0x60>)
   107ce:	9300      	str	r3, [sp, #0]
   107d0:	e01d      	b.n	1080e <AttsIndInit+0x4a>
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   107d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   107d6:	4613      	mov	r3, r2
   107d8:	00db      	lsls	r3, r3, #3
   107da:	4413      	add	r3, r2
   107dc:	009b      	lsls	r3, r3, #2
   107de:	4a12      	ldr	r2, [pc, #72]	; (10828 <AttsIndInit+0x64>)
   107e0:	441a      	add	r2, r3
   107e2:	9b00      	ldr	r3, [sp, #0]
   107e4:	611a      	str	r2, [r3, #16]

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   107e6:	4b10      	ldr	r3, [pc, #64]	; (10828 <AttsIndInit+0x64>)
   107e8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   107ec:	9b00      	ldr	r3, [sp, #0]
   107ee:	721a      	strb	r2, [r3, #8]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   107f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107f4:	b29b      	uxth	r3, r3
   107f6:	3301      	adds	r3, #1
   107f8:	b29a      	uxth	r2, r3
   107fa:	9b00      	ldr	r3, [sp, #0]
   107fc:	815a      	strh	r2, [r3, #10]
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   107fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10802:	3301      	adds	r3, #1
   10804:	f88d 3007 	strb.w	r3, [sp, #7]
   10808:	9b00      	ldr	r3, [sp, #0]
   1080a:	331c      	adds	r3, #28
   1080c:	9300      	str	r3, [sp, #0]
   1080e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10812:	2b02      	cmp	r3, #2
   10814:	d9dd      	bls.n	107d2 <AttsIndInit+0xe>
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
   10816:	4b05      	ldr	r3, [pc, #20]	; (1082c <AttsIndInit+0x68>)
   10818:	4a05      	ldr	r2, [pc, #20]	; (10830 <AttsIndInit+0x6c>)
   1081a:	609a      	str	r2, [r3, #8]
}
   1081c:	bf00      	nop
   1081e:	b002      	add	sp, #8
   10820:	4770      	bx	lr
   10822:	bf00      	nop
   10824:	10008a2c 	.word	0x10008a2c
   10828:	10008a98 	.word	0x10008a98
   1082c:	10008a80 	.word	0x10008a80
   10830:	0002c1c8 	.word	0x0002c1c8

00010834 <AttsHandleValueInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueInd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   10834:	b500      	push	{lr}
   10836:	b087      	sub	sp, #28
   10838:	9303      	str	r3, [sp, #12]
   1083a:	4603      	mov	r3, r0
   1083c:	f88d 3017 	strb.w	r3, [sp, #23]
   10840:	460b      	mov	r3, r1
   10842:	f8ad 3014 	strh.w	r3, [sp, #20]
   10846:	4613      	mov	r3, r2
   10848:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_IND, FALSE);
   1084c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   10850:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   10854:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10858:	2300      	movs	r3, #0
   1085a:	9301      	str	r3, [sp, #4]
   1085c:	231d      	movs	r3, #29
   1085e:	9300      	str	r3, [sp, #0]
   10860:	9b03      	ldr	r3, [sp, #12]
   10862:	f7ff fea1 	bl	105a8 <attsHandleValueIndNtf>
}
   10866:	bf00      	nop
   10868:	b007      	add	sp, #28
   1086a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010870 <attsDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   10870:	b500      	push	{lr}
   10872:	b087      	sub	sp, #28
   10874:	4603      	mov	r3, r0
   10876:	9200      	str	r2, [sp, #0]
   10878:	f8ad 3006 	strh.w	r3, [sp, #6]
   1087c:	460b      	mov	r3, r1
   1087e:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsProcFcn_t procFcn;
  attCcb_t      *pCcb;
  uint16_t      attHandle;

  /* get connection cb for this handle */
  if ((pCcb = attCcbByHandle(handle)) == NULL)
   10882:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10886:	4618      	mov	r0, r3
   10888:	f002 fb74 	bl	12f74 <attCcbByHandle>
   1088c:	9004      	str	r0, [sp, #16]
   1088e:	9b04      	ldr	r3, [sp, #16]
   10890:	2b00      	cmp	r3, #0
   10892:	f000 8097 	beq.w	109c4 <attsDataCback+0x154>
  {
    return;
  }

  /* parse opcode */
  opcode = *(pPacket + L2C_PAYLOAD_START);
   10896:	9b00      	ldr	r3, [sp, #0]
   10898:	7a1b      	ldrb	r3, [r3, #8]
   1089a:	f88d 300f 	strb.w	r3, [sp, #15]

  /* get method */
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
   1089e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108a2:	2b12      	cmp	r3, #18
   108a4:	d907      	bls.n	108b6 <attsDataCback+0x46>
   108a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108aa:	2b15      	cmp	r3, #21
   108ac:	d909      	bls.n	108c2 <attsDataCback+0x52>
      ((opcode >= ATT_PDU_PREP_WRITE_REQ) && (opcode <= ATT_PDU_VALUE_CNF)))
   108ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108b2:	2b1e      	cmp	r3, #30
   108b4:	d805      	bhi.n	108c2 <attsDataCback+0x52>
  {
    method = ATT_OPCODE_2_METHOD(opcode);
   108b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108ba:	105b      	asrs	r3, r3, #1
   108bc:	f88d 3017 	strb.w	r3, [sp, #23]
   108c0:	e012      	b.n	108e8 <attsDataCback+0x78>
  }
  else if (opcode == ATT_PDU_WRITE_CMD)
   108c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108c6:	2b52      	cmp	r3, #82	; 0x52
   108c8:	d103      	bne.n	108d2 <attsDataCback+0x62>
  {
    method = ATT_METHOD_WRITE_CMD;
   108ca:	230a      	movs	r3, #10
   108cc:	f88d 3017 	strb.w	r3, [sp, #23]
   108d0:	e00a      	b.n	108e8 <attsDataCback+0x78>
  }
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
   108d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108d6:	2bd2      	cmp	r3, #210	; 0xd2
   108d8:	d103      	bne.n	108e2 <attsDataCback+0x72>
  {
    method = ATT_METHOD_SIGNED_WRITE_CMD;
   108da:	2310      	movs	r3, #16
   108dc:	f88d 3017 	strb.w	r3, [sp, #23]
   108e0:	e002      	b.n	108e8 <attsDataCback+0x78>
  }
  else
  {
    method = ATT_METHOD_ERR;
   108e2:	2300      	movs	r3, #0
   108e4:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* ignore packet if write response is pending. */
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   108e8:	9b04      	ldr	r3, [sp, #16]
   108ea:	7f5b      	ldrb	r3, [r3, #29]
   108ec:	f003 0308 	and.w	r3, r3, #8
   108f0:	2b00      	cmp	r3, #0
   108f2:	d003      	beq.n	108fc <attsDataCback+0x8c>
  {
    if (method != ATT_METHOD_VALUE_CNF)
   108f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   108f8:	2b0f      	cmp	r3, #15
   108fa:	d165      	bne.n	109c8 <attsDataCback+0x158>
      return;
    }
  }

  /* check client's status to see if server is allowed to process this PDU. */
  err = attsCsfActClientState(handle, opcode, pPacket);
   108fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   10900:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10904:	9a00      	ldr	r2, [sp, #0]
   10906:	4618      	mov	r0, r3
   10908:	f7ff faa8 	bl	fe5c <attsCsfActClientState>
   1090c:	4603      	mov	r3, r0
   1090e:	f88d 3016 	strb.w	r3, [sp, #22]
  if (err)
   10912:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10916:	2b00      	cmp	r3, #0
   10918:	d00d      	beq.n	10936 <attsDataCback+0xc6>
  {
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   1091a:	9b00      	ldr	r3, [sp, #0]
   1091c:	3309      	adds	r3, #9
   1091e:	781b      	ldrb	r3, [r3, #0]
   10920:	b29a      	uxth	r2, r3
   10922:	9b00      	ldr	r3, [sp, #0]
   10924:	330a      	adds	r3, #10
   10926:	781b      	ldrb	r3, [r3, #0]
   10928:	b29b      	uxth	r3, r3
   1092a:	021b      	lsls	r3, r3, #8
   1092c:	b29b      	uxth	r3, r3
   1092e:	4413      	add	r3, r2
   10930:	f8ad 3014 	strh.w	r3, [sp, #20]
   10934:	e002      	b.n	1093c <attsDataCback+0xcc>
  }
  else
  {
    attHandle = ATT_HANDLE_NONE;
   10936:	2300      	movs	r3, #0
   10938:	f8ad 3014 	strh.w	r3, [sp, #20]
    return;
  }
#endif

  /* if no error process request */
  if (!err)
   1093c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10940:	2b00      	cmp	r3, #0
   10942:	d122      	bne.n	1098a <attsDataCback+0x11a>
  {
    /* look up processing function */
    procFcn = attsProcFcnTbl[method];
   10944:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10948:	4a21      	ldr	r2, [pc, #132]	; (109d0 <attsDataCback+0x160>)
   1094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1094e:	9302      	str	r3, [sp, #8]

    /* if method is supported */
    if (procFcn != NULL)
   10950:	9b02      	ldr	r3, [sp, #8]
   10952:	2b00      	cmp	r3, #0
   10954:	d016      	beq.n	10984 <attsDataCback+0x114>
    {
      /* verify length */
      if (len >= attsMinPduLen[method])
   10956:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1095a:	4a1e      	ldr	r2, [pc, #120]	; (109d4 <attsDataCback+0x164>)
   1095c:	5cd3      	ldrb	r3, [r2, r3]
   1095e:	b29b      	uxth	r3, r3
   10960:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10964:	429a      	cmp	r2, r3
   10966:	d309      	bcc.n	1097c <attsDataCback+0x10c>
      {
        /* execute processing function */
        (*procFcn)(pCcb, len, pPacket);
   10968:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1096c:	9b02      	ldr	r3, [sp, #8]
   1096e:	9a00      	ldr	r2, [sp, #0]
   10970:	9804      	ldr	r0, [sp, #16]
   10972:	4798      	blx	r3
        err = 0;
   10974:	2300      	movs	r3, #0
   10976:	f88d 3016 	strb.w	r3, [sp, #22]
   1097a:	e006      	b.n	1098a <attsDataCback+0x11a>
      }
      else
      {
        /* invalid PDU length */
        err = ATT_ERR_INVALID_PDU;
   1097c:	2304      	movs	r3, #4
   1097e:	f88d 3016 	strb.w	r3, [sp, #22]
   10982:	e002      	b.n	1098a <attsDataCback+0x11a>
      }
    }
    else
    {
      /* PDU not supported */
      err = ATT_ERR_NOT_SUP;
   10984:	2306      	movs	r3, #6
   10986:	f88d 3016 	strb.w	r3, [sp, #22]
    }
  }

  /* if there's an error and an error response can be sent for this opcode */
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   1098a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1098e:	2b00      	cmp	r3, #0
   10990:	d01b      	beq.n	109ca <attsDataCback+0x15a>
   10992:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10996:	2b02      	cmp	r3, #2
   10998:	d017      	beq.n	109ca <attsDataCback+0x15a>
   1099a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1099e:	2b1e      	cmp	r3, #30
   109a0:	d013      	beq.n	109ca <attsDataCback+0x15a>
      ((opcode & ATT_PDU_MASK_COMMAND) == 0))
   109a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   109a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   109aa:	2b00      	cmp	r3, #0
   109ac:	d10d      	bne.n	109ca <attsDataCback+0x15a>
  {
    attsErrRsp(handle, opcode, attHandle, err);
   109ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
   109b2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   109b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   109ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   109be:	f000 f86f 	bl	10aa0 <attsErrRsp>
   109c2:	e002      	b.n	109ca <attsDataCback+0x15a>
    return;
   109c4:	bf00      	nop
   109c6:	e000      	b.n	109ca <attsDataCback+0x15a>
      return;
   109c8:	bf00      	nop
  }
}
   109ca:	b007      	add	sp, #28
   109cc:	f85d fb04 	ldr.w	pc, [sp], #4
   109d0:	10002b14 	.word	0x10002b14
   109d4:	0002c1e8 	.word	0x0002c1e8

000109d8 <attsConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   109d8:	b500      	push	{lr}
   109da:	b083      	sub	sp, #12
   109dc:	9001      	str	r0, [sp, #4]
   109de:	9100      	str	r1, [sp, #0]
  /* if connection closed */
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   109e0:	9b00      	ldr	r3, [sp, #0]
   109e2:	789b      	ldrb	r3, [r3, #2]
   109e4:	2b28      	cmp	r3, #40	; 0x28
   109e6:	d111      	bne.n	10a0c <attsConnCback+0x34>
  {
    /* clear prepare write queue */
    attsClearPrepWrites(pCcb);
   109e8:	9801      	ldr	r0, [sp, #4]
   109ea:	f000 f8a0 	bl	10b2e <attsClearPrepWrites>

    /* stop service discovery idle timer, if running */
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
   109ee:	9b01      	ldr	r3, [sp, #4]
   109f0:	7f1b      	ldrb	r3, [r3, #28]
   109f2:	4618      	mov	r0, r3
   109f4:	f005 faf2 	bl	15fdc <DmConnCheckIdle>
   109f8:	4603      	mov	r3, r0
   109fa:	f003 0304 	and.w	r3, r3, #4
   109fe:	2b00      	cmp	r3, #0
   10a00:	d004      	beq.n	10a0c <attsConnCback+0x34>
    {
      WsfTimerStop(&pCcb->idleTimer);
   10a02:	9b01      	ldr	r3, [sp, #4]
   10a04:	3308      	adds	r3, #8
   10a06:	4618      	mov	r0, r3
   10a08:	f7fc ff5a 	bl	d8c0 <WsfTimerStop>
    }
  }

  /* pass event to indication interface */
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   10a0c:	4b04      	ldr	r3, [pc, #16]	; (10a20 <attsConnCback+0x48>)
   10a0e:	689b      	ldr	r3, [r3, #8]
   10a10:	68db      	ldr	r3, [r3, #12]
   10a12:	9900      	ldr	r1, [sp, #0]
   10a14:	9801      	ldr	r0, [sp, #4]
   10a16:	4798      	blx	r3
}
   10a18:	bf00      	nop
   10a1a:	b003      	add	sp, #12
   10a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   10a20:	10008a80 	.word	0x10008a80

00010a24 <attsMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsMsgCback(wsfMsgHdr_t *pMsg)
{
   10a24:	b500      	push	{lr}
   10a26:	b083      	sub	sp, #12
   10a28:	9001      	str	r0, [sp, #4]
  /* handle service discovery idle timeout */
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
   10a2a:	9b01      	ldr	r3, [sp, #4]
   10a2c:	789b      	ldrb	r3, [r3, #2]
   10a2e:	2b20      	cmp	r3, #32
   10a30:	d108      	bne.n	10a44 <attsMsgCback+0x20>
  {
    /* set channel as idle */
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
   10a32:	9b01      	ldr	r3, [sp, #4]
   10a34:	881b      	ldrh	r3, [r3, #0]
   10a36:	b2db      	uxtb	r3, r3
   10a38:	2200      	movs	r2, #0
   10a3a:	2104      	movs	r1, #4
   10a3c:	4618      	mov	r0, r3
   10a3e:	f005 fa5d 	bl	15efc <DmConnSetIdle>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
  {
    /* handle database hash update */
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
  }
}
   10a42:	e019      	b.n	10a78 <attsMsgCback+0x54>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
   10a44:	9b01      	ldr	r3, [sp, #4]
   10a46:	789b      	ldrb	r3, [r3, #2]
   10a48:	2b22      	cmp	r3, #34	; 0x22
   10a4a:	d805      	bhi.n	10a58 <attsMsgCback+0x34>
    (*attsCb.pInd->msgCback)(pMsg);
   10a4c:	4b0c      	ldr	r3, [pc, #48]	; (10a80 <attsMsgCback+0x5c>)
   10a4e:	689b      	ldr	r3, [r3, #8]
   10a50:	689b      	ldr	r3, [r3, #8]
   10a52:	9801      	ldr	r0, [sp, #4]
   10a54:	4798      	blx	r3
}
   10a56:	e00f      	b.n	10a78 <attsMsgCback+0x54>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
   10a58:	9b01      	ldr	r3, [sp, #4]
   10a5a:	789b      	ldrb	r3, [r3, #2]
   10a5c:	2b23      	cmp	r3, #35	; 0x23
   10a5e:	d104      	bne.n	10a6a <attsMsgCback+0x46>
    (*attsCb.signMsgCback)(pMsg);
   10a60:	4b07      	ldr	r3, [pc, #28]	; (10a80 <attsMsgCback+0x5c>)
   10a62:	68db      	ldr	r3, [r3, #12]
   10a64:	9801      	ldr	r0, [sp, #4]
   10a66:	4798      	blx	r3
}
   10a68:	e006      	b.n	10a78 <attsMsgCback+0x54>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
   10a6a:	9b01      	ldr	r3, [sp, #4]
   10a6c:	789b      	ldrb	r3, [r3, #2]
   10a6e:	2b24      	cmp	r3, #36	; 0x24
   10a70:	d102      	bne.n	10a78 <attsMsgCback+0x54>
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
   10a72:	9801      	ldr	r0, [sp, #4]
   10a74:	f000 f89e 	bl	10bb4 <attsProcessDatabaseHashUpdate>
}
   10a78:	bf00      	nop
   10a7a:	b003      	add	sp, #12
   10a7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10a80:	10008a80 	.word	0x10008a80

00010a84 <attsL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   10a84:	b500      	push	{lr}
   10a86:	b083      	sub	sp, #12
   10a88:	9001      	str	r0, [sp, #4]
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
   10a8a:	4b04      	ldr	r3, [pc, #16]	; (10a9c <attsL2cCtrlCback+0x18>)
   10a8c:	689b      	ldr	r3, [r3, #8]
   10a8e:	685b      	ldr	r3, [r3, #4]
   10a90:	9801      	ldr	r0, [sp, #4]
   10a92:	4798      	blx	r3
}
   10a94:	bf00      	nop
   10a96:	b003      	add	sp, #12
   10a98:	f85d fb04 	ldr.w	pc, [sp], #4
   10a9c:	10008a80 	.word	0x10008a80

00010aa0 <attsErrRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsErrRsp(uint16_t handle, uint8_t opcode, uint16_t attHandle, uint8_t reason)
{
   10aa0:	b510      	push	{r4, lr}
   10aa2:	b084      	sub	sp, #16
   10aa4:	4604      	mov	r4, r0
   10aa6:	4608      	mov	r0, r1
   10aa8:	4611      	mov	r1, r2
   10aaa:	461a      	mov	r2, r3
   10aac:	4623      	mov	r3, r4
   10aae:	f8ad 3006 	strh.w	r3, [sp, #6]
   10ab2:	4603      	mov	r3, r0
   10ab4:	f88d 3005 	strb.w	r3, [sp, #5]
   10ab8:	460b      	mov	r3, r1
   10aba:	f8ad 3002 	strh.w	r3, [sp, #2]
   10abe:	4613      	mov	r3, r2
   10ac0:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  /* allocate buffer */
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   10ac4:	200d      	movs	r0, #13
   10ac6:	f002 fb0d 	bl	130e4 <attMsgAlloc>
   10aca:	9003      	str	r0, [sp, #12]
   10acc:	9b03      	ldr	r3, [sp, #12]
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d02a      	beq.n	10b28 <attsErrRsp+0x88>
  {
    p = pBuf + L2C_PAYLOAD_START;
   10ad2:	9b03      	ldr	r3, [sp, #12]
   10ad4:	3308      	adds	r3, #8
   10ad6:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   10ad8:	9b02      	ldr	r3, [sp, #8]
   10ada:	1c5a      	adds	r2, r3, #1
   10adc:	9202      	str	r2, [sp, #8]
   10ade:	2201      	movs	r2, #1
   10ae0:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, opcode);
   10ae2:	9b02      	ldr	r3, [sp, #8]
   10ae4:	1c5a      	adds	r2, r3, #1
   10ae6:	9202      	str	r2, [sp, #8]
   10ae8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10aec:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, attHandle);
   10aee:	9b02      	ldr	r3, [sp, #8]
   10af0:	1c5a      	adds	r2, r3, #1
   10af2:	9202      	str	r2, [sp, #8]
   10af4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10af8:	b2d2      	uxtb	r2, r2
   10afa:	701a      	strb	r2, [r3, #0]
   10afc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10b00:	0a1b      	lsrs	r3, r3, #8
   10b02:	b299      	uxth	r1, r3
   10b04:	9b02      	ldr	r3, [sp, #8]
   10b06:	1c5a      	adds	r2, r3, #1
   10b08:	9202      	str	r2, [sp, #8]
   10b0a:	b2ca      	uxtb	r2, r1
   10b0c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   10b0e:	9b02      	ldr	r3, [sp, #8]
   10b10:	1c5a      	adds	r2, r3, #1
   10b12:	9202      	str	r2, [sp, #8]
   10b14:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10b18:	701a      	strb	r2, [r3, #0]

    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   10b1a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   10b1e:	9b03      	ldr	r3, [sp, #12]
   10b20:	2205      	movs	r2, #5
   10b22:	2004      	movs	r0, #4
   10b24:	f7fb fdc4 	bl	c6b0 <L2cDataReq>
  }
}
   10b28:	bf00      	nop
   10b2a:	b004      	add	sp, #16
   10b2c:	bd10      	pop	{r4, pc}

00010b2e <attsClearPrepWrites>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsClearPrepWrites(attCcb_t *pCcb)
{
   10b2e:	b500      	push	{lr}
   10b30:	b085      	sub	sp, #20
   10b32:	9001      	str	r0, [sp, #4]
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   10b34:	e002      	b.n	10b3c <attsClearPrepWrites+0xe>
  {
    WsfBufFree(pBuf);
   10b36:	9803      	ldr	r0, [sp, #12]
   10b38:	f7fc facc 	bl	d0d4 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   10b3c:	9b01      	ldr	r3, [sp, #4]
   10b3e:	4618      	mov	r0, r3
   10b40:	f7fc fd4b 	bl	d5da <WsfQueueDeq>
   10b44:	9003      	str	r0, [sp, #12]
   10b46:	9b03      	ldr	r3, [sp, #12]
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d1f4      	bne.n	10b36 <attsClearPrepWrites+0x8>
  }
}
   10b4c:	bf00      	nop
   10b4e:	bf00      	nop
   10b50:	b005      	add	sp, #20
   10b52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010b58 <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
   10b58:	b500      	push	{lr}
   10b5a:	b083      	sub	sp, #12
   10b5c:	9001      	str	r0, [sp, #4]
  if (pAttCfg->discIdleTimeout > 0)
   10b5e:	4b13      	ldr	r3, [pc, #76]	; (10bac <attsDiscBusy+0x54>)
   10b60:	681b      	ldr	r3, [r3, #0]
   10b62:	681b      	ldr	r3, [r3, #0]
   10b64:	2b00      	cmp	r3, #0
   10b66:	d01d      	beq.n	10ba4 <attsDiscBusy+0x4c>
  {
    /* set channel as busy */
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
   10b68:	9b01      	ldr	r3, [sp, #4]
   10b6a:	7f1b      	ldrb	r3, [r3, #28]
   10b6c:	2201      	movs	r2, #1
   10b6e:	2104      	movs	r1, #4
   10b70:	4618      	mov	r0, r3
   10b72:	f005 f9c3 	bl	15efc <DmConnSetIdle>

    /* start service discovery idle timer */
    pCcb->idleTimer.handlerId = attCb.handlerId;
   10b76:	4b0e      	ldr	r3, [pc, #56]	; (10bb0 <attsDiscBusy+0x58>)
   10b78:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   10b7c:	9b01      	ldr	r3, [sp, #4]
   10b7e:	741a      	strb	r2, [r3, #16]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   10b80:	9b01      	ldr	r3, [sp, #4]
   10b82:	2220      	movs	r2, #32
   10b84:	751a      	strb	r2, [r3, #20]
    pCcb->idleTimer.msg.param = pCcb->connId;
   10b86:	9b01      	ldr	r3, [sp, #4]
   10b88:	7f1b      	ldrb	r3, [r3, #28]
   10b8a:	b29a      	uxth	r2, r3
   10b8c:	9b01      	ldr	r3, [sp, #4]
   10b8e:	825a      	strh	r2, [r3, #18]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   10b90:	9b01      	ldr	r3, [sp, #4]
   10b92:	f103 0208 	add.w	r2, r3, #8
   10b96:	4b05      	ldr	r3, [pc, #20]	; (10bac <attsDiscBusy+0x54>)
   10b98:	681b      	ldr	r3, [r3, #0]
   10b9a:	681b      	ldr	r3, [r3, #0]
   10b9c:	4619      	mov	r1, r3
   10b9e:	4610      	mov	r0, r2
   10ba0:	f7fc fe6a 	bl	d878 <WsfTimerStartSec>
  }
}
   10ba4:	bf00      	nop
   10ba6:	b003      	add	sp, #12
   10ba8:	f85d fb04 	ldr.w	pc, [sp], #4
   10bac:	10002bcc 	.word	0x10002bcc
   10bb0:	10008a98 	.word	0x10008a98

00010bb4 <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
   10bb4:	b500      	push	{lr}
   10bb6:	b08d      	sub	sp, #52	; 0x34
   10bb8:	9003      	str	r0, [sp, #12]
  attsAttr_t *pAttr;
  attsGroup_t *pGroup;
  uint16_t dbhCharHandle;

  /* send to application */
  evt.hdr.event = ATTS_DB_HASH_CALC_CMPL_IND;
   10bba:	2311      	movs	r3, #17
   10bbc:	f88d 301e 	strb.w	r3, [sp, #30]
  evt.hdr.status = ATT_SUCCESS;
   10bc0:	2300      	movs	r3, #0
   10bc2:	f88d 301f 	strb.w	r3, [sp, #31]
  evt.hdr.param = DM_CONN_ID_NONE;
   10bc6:	2300      	movs	r3, #0
   10bc8:	f8ad 301c 	strh.w	r3, [sp, #28]

  evt.valueLen = ATT_DATABASE_HASH_LEN;
   10bcc:	2310      	movs	r3, #16
   10bce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  evt.handle = ATT_HANDLE_NONE;
   10bd2:	2300      	movs	r3, #0
   10bd4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  evt.continuing = FALSE;
   10bd8:	2300      	movs	r3, #0
   10bda:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  evt.mtu = 0;
   10bde:	2300      	movs	r3, #0
   10be0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
   10be4:	9b03      	ldr	r3, [sp, #12]
   10be6:	689b      	ldr	r3, [r3, #8]
   10be8:	2b00      	cmp	r3, #0
   10bea:	d007      	beq.n	10bfc <attsProcessDatabaseHashUpdate+0x48>
  {
    WsfBufFree(pMsg->pPlainText);
   10bec:	9b03      	ldr	r3, [sp, #12]
   10bee:	689b      	ldr	r3, [r3, #8]
   10bf0:	4618      	mov	r0, r3
   10bf2:	f7fc fa6f 	bl	d0d4 <WsfBufFree>
    pMsg->pPlainText = NULL;
   10bf6:	9b03      	ldr	r3, [sp, #12]
   10bf8:	2200      	movs	r2, #0
   10bfa:	609a      	str	r2, [r3, #8]
  }

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;
   10bfc:	9b03      	ldr	r3, [sp, #12]
   10bfe:	685b      	ldr	r3, [r3, #4]
   10c00:	9308      	str	r3, [sp, #32]

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   10c02:	ab05      	add	r3, sp, #20
   10c04:	9301      	str	r3, [sp, #4]
   10c06:	ab06      	add	r3, sp, #24
   10c08:	9300      	str	r3, [sp, #0]
   10c0a:	4b10      	ldr	r3, [pc, #64]	; (10c4c <attsProcessDatabaseHashUpdate+0x98>)
   10c0c:	2202      	movs	r2, #2
   10c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10c12:	2001      	movs	r0, #1
   10c14:	f000 fe32 	bl	1187c <attsFindUuidInRange>
   10c18:	4603      	mov	r3, r0
   10c1a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
   10c1e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   10c22:	2b00      	cmp	r3, #0
   10c24:	d006      	beq.n	10c34 <attsProcessDatabaseHashUpdate+0x80>
  {
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
   10c26:	9a08      	ldr	r2, [sp, #32]
   10c28:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   10c2c:	2110      	movs	r1, #16
   10c2e:	4618      	mov	r0, r3
   10c30:	f000 fa4c 	bl	110cc <AttsSetAttr>
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
   10c34:	2000      	movs	r0, #0
   10c36:	f7ff f89f 	bl	fd78 <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
   10c3a:	4b05      	ldr	r3, [pc, #20]	; (10c50 <attsProcessDatabaseHashUpdate+0x9c>)
   10c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   10c3e:	aa07      	add	r2, sp, #28
   10c40:	4610      	mov	r0, r2
   10c42:	4798      	blx	r3
}
   10c44:	bf00      	nop
   10c46:	b00d      	add	sp, #52	; 0x34
   10c48:	f85d fb04 	ldr.w	pc, [sp], #4
   10c4c:	0002c23c 	.word	0x0002c23c
   10c50:	10008a98 	.word	0x10008a98

00010c54 <attsCheckPendDbHashReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCheckPendDbHashReadRsp(void)
{
   10c54:	b500      	push	{lr}
   10c56:	b087      	sub	sp, #28
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   10c58:	2300      	movs	r3, #0
   10c5a:	f88d 3017 	strb.w	r3, [sp, #23]
   10c5e:	e080      	b.n	10d62 <attsCheckPendDbHashReadRsp+0x10e>
  {
    attCcb_t *pCcb = &attCb.ccb[i];
   10c60:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10c64:	4613      	mov	r3, r2
   10c66:	00db      	lsls	r3, r3, #3
   10c68:	4413      	add	r3, r2
   10c6a:	009b      	lsls	r3, r3, #2
   10c6c:	4a42      	ldr	r2, [pc, #264]	; (10d78 <attsCheckPendDbHashReadRsp+0x124>)
   10c6e:	4413      	add	r3, r2
   10c70:	9304      	str	r3, [sp, #16]

    if (pCcb->pPendDbHashRsp)
   10c72:	9b04      	ldr	r3, [sp, #16]
   10c74:	6a1b      	ldr	r3, [r3, #32]
   10c76:	2b00      	cmp	r3, #0
   10c78:	d06e      	beq.n	10d58 <attsCheckPendDbHashReadRsp+0x104>
    {
      uint8_t *pBuf;

      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   10c7a:	9b04      	ldr	r3, [sp, #16]
   10c7c:	8b5b      	ldrh	r3, [r3, #26]
   10c7e:	3308      	adds	r3, #8
   10c80:	b29b      	uxth	r3, r3
   10c82:	4618      	mov	r0, r3
   10c84:	f002 fa2e 	bl	130e4 <attMsgAlloc>
   10c88:	9003      	str	r0, [sp, #12]
   10c8a:	9b03      	ldr	r3, [sp, #12]
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	d051      	beq.n	10d34 <attsCheckPendDbHashReadRsp+0xe0>
      {
        uint8_t *p;
        attsAttr_t  *pAttr;
        attsGroup_t *pGroup;

        p = pBuf + L2C_PAYLOAD_START;
   10c90:	9b03      	ldr	r3, [sp, #12]
   10c92:	3308      	adds	r3, #8
   10c94:	9302      	str	r3, [sp, #8]
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   10c96:	9b02      	ldr	r3, [sp, #8]
   10c98:	1c5a      	adds	r2, r3, #1
   10c9a:	9202      	str	r2, [sp, #8]
   10c9c:	2209      	movs	r2, #9
   10c9e:	701a      	strb	r2, [r3, #0]

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   10ca0:	9b02      	ldr	r3, [sp, #8]
   10ca2:	1c5a      	adds	r2, r3, #1
   10ca4:	9202      	str	r2, [sp, #8]
   10ca6:	2212      	movs	r2, #18
   10ca8:	701a      	strb	r2, [r3, #0]

        /* copy result to response message */
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   10caa:	9b04      	ldr	r3, [sp, #16]
   10cac:	6a1b      	ldr	r3, [r3, #32]
   10cae:	8859      	ldrh	r1, [r3, #2]
   10cb0:	9b02      	ldr	r3, [sp, #8]
   10cb2:	1c5a      	adds	r2, r3, #1
   10cb4:	9202      	str	r2, [sp, #8]
   10cb6:	b2ca      	uxtb	r2, r1
   10cb8:	701a      	strb	r2, [r3, #0]
   10cba:	9b04      	ldr	r3, [sp, #16]
   10cbc:	6a1b      	ldr	r3, [r3, #32]
   10cbe:	885b      	ldrh	r3, [r3, #2]
   10cc0:	0a1b      	lsrs	r3, r3, #8
   10cc2:	b299      	uxth	r1, r3
   10cc4:	9b02      	ldr	r3, [sp, #8]
   10cc6:	1c5a      	adds	r2, r3, #1
   10cc8:	9202      	str	r2, [sp, #8]
   10cca:	b2ca      	uxtb	r2, r1
   10ccc:	701a      	strb	r2, [r3, #0]

        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   10cce:	9b04      	ldr	r3, [sp, #16]
   10cd0:	6a1b      	ldr	r3, [r3, #32]
   10cd2:	885b      	ldrh	r3, [r3, #2]
   10cd4:	466a      	mov	r2, sp
   10cd6:	4611      	mov	r1, r2
   10cd8:	4618      	mov	r0, r3
   10cda:	f000 facf 	bl	1127c <attsFindByHandle>
   10cde:	9001      	str	r0, [sp, #4]
   10ce0:	9b01      	ldr	r3, [sp, #4]
   10ce2:	2b00      	cmp	r3, #0
   10ce4:	d01b      	beq.n	10d1e <attsCheckPendDbHashReadRsp+0xca>
        {
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   10ce6:	9b01      	ldr	r3, [sp, #4]
   10ce8:	6859      	ldr	r1, [r3, #4]
   10cea:	9b01      	ldr	r3, [sp, #4]
   10cec:	689b      	ldr	r3, [r3, #8]
   10cee:	881b      	ldrh	r3, [r3, #0]
   10cf0:	461a      	mov	r2, r3
   10cf2:	9802      	ldr	r0, [sp, #8]
   10cf4:	f7fb fa04 	bl	c100 <memcpy>
          p += *pAttr->pLen;
   10cf8:	9b01      	ldr	r3, [sp, #4]
   10cfa:	689b      	ldr	r3, [r3, #8]
   10cfc:	881b      	ldrh	r3, [r3, #0]
   10cfe:	461a      	mov	r2, r3
   10d00:	9b02      	ldr	r3, [sp, #8]
   10d02:	4413      	add	r3, r2
   10d04:	9302      	str	r3, [sp, #8]

          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   10d06:	9b04      	ldr	r3, [sp, #16]
   10d08:	8b19      	ldrh	r1, [r3, #24]
   10d0a:	9b03      	ldr	r3, [sp, #12]
   10d0c:	3308      	adds	r3, #8
   10d0e:	9a02      	ldr	r2, [sp, #8]
   10d10:	1ad3      	subs	r3, r2, r3
   10d12:	b29a      	uxth	r2, r3
   10d14:	9b03      	ldr	r3, [sp, #12]
   10d16:	2004      	movs	r0, #4
   10d18:	f7fb fcca 	bl	c6b0 <L2cDataReq>
   10d1c:	e014      	b.n	10d48 <attsCheckPendDbHashReadRsp+0xf4>
        }
        else
        {
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
   10d1e:	9b04      	ldr	r3, [sp, #16]
   10d20:	7f1b      	ldrb	r3, [r3, #28]
   10d22:	b298      	uxth	r0, r3
   10d24:	9b04      	ldr	r3, [sp, #16]
   10d26:	6a1b      	ldr	r3, [r3, #32]
   10d28:	881a      	ldrh	r2, [r3, #0]
   10d2a:	230a      	movs	r3, #10
   10d2c:	2108      	movs	r1, #8
   10d2e:	f7ff feb7 	bl	10aa0 <attsErrRsp>
   10d32:	e009      	b.n	10d48 <attsCheckPendDbHashReadRsp+0xf4>
        }
      }
      else
      {
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
   10d34:	9b04      	ldr	r3, [sp, #16]
   10d36:	7f1b      	ldrb	r3, [r3, #28]
   10d38:	b298      	uxth	r0, r3
   10d3a:	9b04      	ldr	r3, [sp, #16]
   10d3c:	6a1b      	ldr	r3, [r3, #32]
   10d3e:	881a      	ldrh	r2, [r3, #0]
   10d40:	2311      	movs	r3, #17
   10d42:	2108      	movs	r1, #8
   10d44:	f7ff feac 	bl	10aa0 <attsErrRsp>
      }

      /* Free pending state information. */
      WsfBufFree(pCcb->pPendDbHashRsp);
   10d48:	9b04      	ldr	r3, [sp, #16]
   10d4a:	6a1b      	ldr	r3, [r3, #32]
   10d4c:	4618      	mov	r0, r3
   10d4e:	f7fc f9c1 	bl	d0d4 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
   10d52:	9b04      	ldr	r3, [sp, #16]
   10d54:	2200      	movs	r2, #0
   10d56:	621a      	str	r2, [r3, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   10d58:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10d5c:	3301      	adds	r3, #1
   10d5e:	f88d 3017 	strb.w	r3, [sp, #23]
   10d62:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10d66:	2b02      	cmp	r3, #2
   10d68:	f67f af7a 	bls.w	10c60 <attsCheckPendDbHashReadRsp+0xc>
    }
  }
}
   10d6c:	bf00      	nop
   10d6e:	bf00      	nop
   10d70:	b007      	add	sp, #28
   10d72:	f85d fb04 	ldr.w	pc, [sp], #4
   10d76:	bf00      	nop
   10d78:	10008a98 	.word	0x10008a98

00010d7c <attsIsHashableAttr>:
 *        Characteristic Format, and Characteristic Aggreate Format which contribute their ATT
 *        handle and ATT type.
 */
/*************************************************************************************************/
uint16_t attsIsHashableAttr(attsAttr_t *pAttr)
{
   10d7c:	b084      	sub	sp, #16
   10d7e:	9001      	str	r0, [sp, #4]
  /* Initialize length to 2 for ATT Handle length */
  uint16_t length = 2;
   10d80:	2302      	movs	r3, #2
   10d82:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint16_t uuid;
  static bool_t isAttrCharVal = FALSE;

  /* Characteristic values are skipped */
  if (isAttrCharVal)
   10d86:	4b30      	ldr	r3, [pc, #192]	; (10e48 <attsIsHashableAttr+0xcc>)
   10d88:	781b      	ldrb	r3, [r3, #0]
   10d8a:	2b00      	cmp	r3, #0
   10d8c:	d004      	beq.n	10d98 <attsIsHashableAttr+0x1c>
  {
    isAttrCharVal = FALSE;
   10d8e:	4b2e      	ldr	r3, [pc, #184]	; (10e48 <attsIsHashableAttr+0xcc>)
   10d90:	2200      	movs	r2, #0
   10d92:	701a      	strb	r2, [r3, #0]
    return 0;
   10d94:	2300      	movs	r3, #0
   10d96:	e053      	b.n	10e40 <attsIsHashableAttr+0xc4>
  }

  BYTES_TO_UINT16(uuid, pAttr->pUuid);
   10d98:	9b01      	ldr	r3, [sp, #4]
   10d9a:	681b      	ldr	r3, [r3, #0]
   10d9c:	781b      	ldrb	r3, [r3, #0]
   10d9e:	b29a      	uxth	r2, r3
   10da0:	9b01      	ldr	r3, [sp, #4]
   10da2:	681b      	ldr	r3, [r3, #0]
   10da4:	3301      	adds	r3, #1
   10da6:	781b      	ldrb	r3, [r3, #0]
   10da8:	b29b      	uxth	r3, r3
   10daa:	021b      	lsls	r3, r3, #8
   10dac:	b29b      	uxth	r3, r3
   10dae:	4413      	add	r3, r2
   10db0:	f8ad 300c 	strh.w	r3, [sp, #12]
  switch (uuid)
   10db4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10db8:	f642 1205 	movw	r2, #10501	; 0x2905
   10dbc:	4293      	cmp	r3, r2
   10dbe:	d027      	beq.n	10e10 <attsIsHashableAttr+0x94>
   10dc0:	f642 1205 	movw	r2, #10501	; 0x2905
   10dc4:	4293      	cmp	r3, r2
   10dc6:	dc35      	bgt.n	10e34 <attsIsHashableAttr+0xb8>
   10dc8:	f642 1203 	movw	r2, #10499	; 0x2903
   10dcc:	4293      	cmp	r3, r2
   10dce:	dc31      	bgt.n	10e34 <attsIsHashableAttr+0xb8>
   10dd0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   10dd4:	dc1c      	bgt.n	10e10 <attsIsHashableAttr+0x94>
   10dd6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   10dda:	d011      	beq.n	10e00 <attsIsHashableAttr+0x84>
   10ddc:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   10de0:	dc28      	bgt.n	10e34 <attsIsHashableAttr+0xb8>
   10de2:	f642 0202 	movw	r2, #10242	; 0x2802
   10de6:	4293      	cmp	r3, r2
   10de8:	dc03      	bgt.n	10df2 <attsIsHashableAttr+0x76>
   10dea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   10dee:	da07      	bge.n	10e00 <attsIsHashableAttr+0x84>
   10df0:	e020      	b.n	10e34 <attsIsHashableAttr+0xb8>
   10df2:	f642 0203 	movw	r2, #10243	; 0x2803
   10df6:	4293      	cmp	r3, r2
   10df8:	d11c      	bne.n	10e34 <attsIsHashableAttr+0xb8>
  {
    /* Top cases include Attribute Value length */
    case ATT_UUID_CHARACTERISTIC:
      /* Set the next characteristic in database to be skipped */
      isAttrCharVal = TRUE;
   10dfa:	4b13      	ldr	r3, [pc, #76]	; (10e48 <attsIsHashableAttr+0xcc>)
   10dfc:	2201      	movs	r2, #1
   10dfe:	701a      	strb	r2, [r3, #0]
      /* Fallthrough */
    case ATT_UUID_PRIMARY_SERVICE:
    case ATT_UUID_SECONDARY_SERVICE:
    case ATT_UUID_INCLUDE:
    case ATT_UUID_CHARACTERISTIC_EXT:
      length += *pAttr->pLen;
   10e00:	9b01      	ldr	r3, [sp, #4]
   10e02:	689b      	ldr	r3, [r3, #8]
   10e04:	881a      	ldrh	r2, [r3, #0]
   10e06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10e0a:	4413      	add	r3, r2
   10e0c:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* All values fall through to include Attribute Type length */
    case ATT_UUID_CHAR_USER_DESC:
    case ATT_UUID_CLIENT_CHAR_CONFIG:
    case ATT_UUID_SERVER_CHAR_CONFIG:
    case ATT_UUID_AGGREGATE_FORMAT:
      if (pAttr->settings & ATTS_SET_UUID_128)
   10e10:	9b01      	ldr	r3, [sp, #4]
   10e12:	7b9b      	ldrb	r3, [r3, #14]
   10e14:	f003 0301 	and.w	r3, r3, #1
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d005      	beq.n	10e28 <attsIsHashableAttr+0xac>
      {
        length += 16;
   10e1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10e20:	3310      	adds	r3, #16
   10e22:	f8ad 300e 	strh.w	r3, [sp, #14]
      }
      else
      {
        length += 2;
      }
      break;
   10e26:	e009      	b.n	10e3c <attsIsHashableAttr+0xc0>
        length += 2;
   10e28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10e2c:	3302      	adds	r3, #2
   10e2e:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
   10e32:	e003      	b.n	10e3c <attsIsHashableAttr+0xc0>

    default:
      length = 0;
   10e34:	2300      	movs	r3, #0
   10e36:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
   10e3a:	bf00      	nop
  }

  return length;
   10e3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   10e40:	4618      	mov	r0, r3
   10e42:	b004      	add	sp, #16
   10e44:	4770      	bx	lr
   10e46:	bf00      	nop
   10e48:	100041a8 	.word	0x100041a8

00010e4c <AttsInit>:
 */
/*************************************************************************************************/
void AttsInit(void)
{
  /* Initialize control block */
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   10e4c:	4b08      	ldr	r3, [pc, #32]	; (10e70 <AttsInit+0x24>)
   10e4e:	2200      	movs	r2, #0
   10e50:	601a      	str	r2, [r3, #0]
   10e52:	4b07      	ldr	r3, [pc, #28]	; (10e70 <AttsInit+0x24>)
   10e54:	2200      	movs	r2, #0
   10e56:	605a      	str	r2, [r3, #4]
  attsCb.pInd = &attFcnDefault;
   10e58:	4b05      	ldr	r3, [pc, #20]	; (10e70 <AttsInit+0x24>)
   10e5a:	4a06      	ldr	r2, [pc, #24]	; (10e74 <AttsInit+0x28>)
   10e5c:	609a      	str	r2, [r3, #8]
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   10e5e:	4b04      	ldr	r3, [pc, #16]	; (10e70 <AttsInit+0x24>)
   10e60:	4a05      	ldr	r2, [pc, #20]	; (10e78 <AttsInit+0x2c>)
   10e62:	60da      	str	r2, [r3, #12]

  /* set up callback interfaces */
  attCb.pServer = &attsFcnIf;
   10e64:	4b05      	ldr	r3, [pc, #20]	; (10e7c <AttsInit+0x30>)
   10e66:	4a06      	ldr	r2, [pc, #24]	; (10e80 <AttsInit+0x34>)
   10e68:	671a      	str	r2, [r3, #112]	; 0x70
}
   10e6a:	bf00      	nop
   10e6c:	4770      	bx	lr
   10e6e:	bf00      	nop
   10e70:	10008a80 	.word	0x10008a80
   10e74:	0002c1fc 	.word	0x0002c1fc
   10e78:	00012f49 	.word	0x00012f49
   10e7c:	10008a98 	.word	0x10008a98
   10e80:	0002c1d8 	.word	0x0002c1d8

00010e84 <AttsHashDatabaseString>:
 *
 *  \return \ref TRUE if successful, \ref FALSE if not.
 */
/*************************************************************************************************/
bool_t AttsHashDatabaseString(uint8_t *pKey, uint8_t *pMsg, uint16_t msgLen)
{
   10e84:	b500      	push	{lr}
   10e86:	b087      	sub	sp, #28
   10e88:	9005      	str	r0, [sp, #20]
   10e8a:	9104      	str	r1, [sp, #16]
   10e8c:	4613      	mov	r3, r2
   10e8e:	f8ad 300e 	strh.w	r3, [sp, #14]
  return SecCmac(pKey, pMsg, msgLen, attCb.handlerId, 0, ATTS_MSG_DBH_CMAC_CMPL);
   10e92:	4b09      	ldr	r3, [pc, #36]	; (10eb8 <AttsHashDatabaseString+0x34>)
   10e94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   10e98:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10e9c:	2124      	movs	r1, #36	; 0x24
   10e9e:	9101      	str	r1, [sp, #4]
   10ea0:	2100      	movs	r1, #0
   10ea2:	9100      	str	r1, [sp, #0]
   10ea4:	9904      	ldr	r1, [sp, #16]
   10ea6:	9805      	ldr	r0, [sp, #20]
   10ea8:	f008 fea4 	bl	19bf4 <SecCmac>
   10eac:	4603      	mov	r3, r0
}
   10eae:	4618      	mov	r0, r3
   10eb0:	b007      	add	sp, #28
   10eb2:	f85d fb04 	ldr.w	pc, [sp], #4
   10eb6:	bf00      	nop
   10eb8:	10008a98 	.word	0x10008a98

00010ebc <AttsCalculateDbHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCalculateDbHash(void)
{
   10ebc:	b500      	push	{lr}
   10ebe:	b08f      	sub	sp, #60	; 0x3c
  uint16_t msgLen = 0;
   10ec0:	2300      	movs	r3, #0
   10ec2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  uint8_t *pMsg;
  attsGroup_t *pGroup = (attsGroup_t *) attsCb.groupQueue.pHead;
   10ec6:	4b6a      	ldr	r3, [pc, #424]	; (11070 <AttsCalculateDbHash+0x1b4>)
   10ec8:	681b      	ldr	r3, [r3, #0]
   10eca:	930c      	str	r3, [sp, #48]	; 0x30

  /* Determine length of message. */
  while (pGroup != NULL)
   10ecc:	e027      	b.n	10f1e <AttsCalculateDbHash+0x62>
  {
    uint8_t numAttrs = (pGroup->endHandle - pGroup->startHandle) + 1;
   10ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ed0:	8a5b      	ldrh	r3, [r3, #18]
   10ed2:	b2da      	uxtb	r2, r3
   10ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ed6:	8a1b      	ldrh	r3, [r3, #16]
   10ed8:	b2db      	uxtb	r3, r3
   10eda:	1ad3      	subs	r3, r2, r3
   10edc:	b2db      	uxtb	r3, r3
   10ede:	3301      	adds	r3, #1
   10ee0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   10ee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ee6:	685b      	ldr	r3, [r3, #4]
   10ee8:	930a      	str	r3, [sp, #40]	; 0x28
   10eea:	e011      	b.n	10f10 <AttsCalculateDbHash+0x54>
    {
      msgLen += attsIsHashableAttr(pAttr);
   10eec:	980a      	ldr	r0, [sp, #40]	; 0x28
   10eee:	f7ff ff45 	bl	10d7c <attsIsHashableAttr>
   10ef2:	4603      	mov	r3, r0
   10ef4:	461a      	mov	r2, r3
   10ef6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   10efa:	4413      	add	r3, r2
   10efc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   10f00:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   10f04:	3b01      	subs	r3, #1
   10f06:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   10f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f0c:	3310      	adds	r3, #16
   10f0e:	930a      	str	r3, [sp, #40]	; 0x28
   10f10:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   10f14:	2b00      	cmp	r3, #0
   10f16:	d1e9      	bne.n	10eec <AttsCalculateDbHash+0x30>
    }

    pGroup = pGroup->pNext;
   10f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f1a:	681b      	ldr	r3, [r3, #0]
   10f1c:	930c      	str	r3, [sp, #48]	; 0x30
  while (pGroup != NULL)
   10f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f20:	2b00      	cmp	r3, #0
   10f22:	d1d4      	bne.n	10ece <AttsCalculateDbHash+0x12>
  }

  /* Allocate buffer for message. */
  if ((pMsg = WsfBufAlloc(msgLen)) != NULL)
   10f24:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   10f28:	4618      	mov	r0, r3
   10f2a:	f7fc f88d 	bl	d048 <WsfBufAlloc>
   10f2e:	9005      	str	r0, [sp, #20]
   10f30:	9b05      	ldr	r3, [sp, #20]
   10f32:	2b00      	cmp	r3, #0
   10f34:	f000 8099 	beq.w	1106a <AttsCalculateDbHash+0x1ae>
  {
    pGroup = (attsGroup_t *)attsCb.groupQueue.pHead;
   10f38:	4b4d      	ldr	r3, [pc, #308]	; (11070 <AttsCalculateDbHash+0x1b4>)
   10f3a:	681b      	ldr	r3, [r3, #0]
   10f3c:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t hashingKey[16] = { 0, };
   10f3e:	2300      	movs	r3, #0
   10f40:	9300      	str	r3, [sp, #0]
   10f42:	ab01      	add	r3, sp, #4
   10f44:	2200      	movs	r2, #0
   10f46:	601a      	str	r2, [r3, #0]
   10f48:	605a      	str	r2, [r3, #4]
   10f4a:	609a      	str	r2, [r3, #8]
    uint8_t *p = pMsg;
   10f4c:	9b05      	ldr	r3, [sp, #20]
   10f4e:	9309      	str	r3, [sp, #36]	; 0x24

    /* For each service in services */
    while (pGroup)
   10f50:	e07e      	b.n	11050 <AttsCalculateDbHash+0x194>
    {
      uint16_t attHandle = pGroup->startHandle;
   10f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f54:	8a1b      	ldrh	r3, [r3, #16]
   10f56:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

      /* For each attribute in the service */
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   10f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f5c:	685b      	ldr	r3, [r3, #4]
   10f5e:	9307      	str	r3, [sp, #28]
   10f60:	e06d      	b.n	1103e <AttsCalculateDbHash+0x182>
      {
        uint16_t valLen;
        uint8_t uuidLen = 2;
   10f62:	2302      	movs	r3, #2
   10f64:	f88d 301b 	strb.w	r3, [sp, #27]

        valLen = attsIsHashableAttr(pAttr);
   10f68:	9807      	ldr	r0, [sp, #28]
   10f6a:	f7ff ff07 	bl	10d7c <attsIsHashableAttr>
   10f6e:	4603      	mov	r3, r0
   10f70:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (valLen)
   10f74:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10f78:	2b00      	cmp	r3, #0
   10f7a:	d058      	beq.n	1102e <AttsCalculateDbHash+0x172>
        {
          /* Add handle */
          UINT16_TO_BSTREAM(p, attHandle);
   10f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f7e:	1c5a      	adds	r2, r3, #1
   10f80:	9209      	str	r2, [sp, #36]	; 0x24
   10f82:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   10f86:	b2d2      	uxtb	r2, r2
   10f88:	701a      	strb	r2, [r3, #0]
   10f8a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   10f8e:	0a1b      	lsrs	r3, r3, #8
   10f90:	b299      	uxth	r1, r3
   10f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f94:	1c5a      	adds	r2, r3, #1
   10f96:	9209      	str	r2, [sp, #36]	; 0x24
   10f98:	b2ca      	uxtb	r2, r1
   10f9a:	701a      	strb	r2, [r3, #0]

          /* Add attribute type*/
          if (pAttr->settings & ATTS_SET_UUID_128)
   10f9c:	9b07      	ldr	r3, [sp, #28]
   10f9e:	7b9b      	ldrb	r3, [r3, #14]
   10fa0:	f003 0301 	and.w	r3, r3, #1
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	d00d      	beq.n	10fc4 <AttsCalculateDbHash+0x108>
          {
            memcpy(p, pAttr->pUuid, 16);
   10fa8:	9b07      	ldr	r3, [sp, #28]
   10faa:	681b      	ldr	r3, [r3, #0]
   10fac:	2210      	movs	r2, #16
   10fae:	4619      	mov	r1, r3
   10fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fb2:	f7fb f8a5 	bl	c100 <memcpy>
            p += 16;
   10fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fb8:	3310      	adds	r3, #16
   10fba:	9309      	str	r3, [sp, #36]	; 0x24
            uuidLen = 16;
   10fbc:	2310      	movs	r3, #16
   10fbe:	f88d 301b 	strb.w	r3, [sp, #27]
   10fc2:	e01d      	b.n	11000 <AttsCalculateDbHash+0x144>
          }
          else
          {
            uint16_t uuid;
            BYTES_TO_UINT16(uuid, pAttr->pUuid);
   10fc4:	9b07      	ldr	r3, [sp, #28]
   10fc6:	681b      	ldr	r3, [r3, #0]
   10fc8:	781b      	ldrb	r3, [r3, #0]
   10fca:	b29a      	uxth	r2, r3
   10fcc:	9b07      	ldr	r3, [sp, #28]
   10fce:	681b      	ldr	r3, [r3, #0]
   10fd0:	3301      	adds	r3, #1
   10fd2:	781b      	ldrb	r3, [r3, #0]
   10fd4:	b29b      	uxth	r3, r3
   10fd6:	021b      	lsls	r3, r3, #8
   10fd8:	b29b      	uxth	r3, r3
   10fda:	4413      	add	r3, r2
   10fdc:	f8ad 3010 	strh.w	r3, [sp, #16]
            UINT16_TO_BSTREAM(p,uuid);
   10fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fe2:	1c5a      	adds	r2, r3, #1
   10fe4:	9209      	str	r2, [sp, #36]	; 0x24
   10fe6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   10fea:	b2d2      	uxtb	r2, r2
   10fec:	701a      	strb	r2, [r3, #0]
   10fee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   10ff2:	0a1b      	lsrs	r3, r3, #8
   10ff4:	b299      	uxth	r1, r3
   10ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ff8:	1c5a      	adds	r2, r3, #1
   10ffa:	9209      	str	r2, [sp, #36]	; 0x24
   10ffc:	b2ca      	uxtb	r2, r1
   10ffe:	701a      	strb	r2, [r3, #0]
          }

          /* Add Attribute value if required */
          if (valLen - (uuidLen + 2))
   11000:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   11004:	f89d 301b 	ldrb.w	r3, [sp, #27]
   11008:	3302      	adds	r3, #2
   1100a:	429a      	cmp	r2, r3
   1100c:	d00f      	beq.n	1102e <AttsCalculateDbHash+0x172>
          {
            memcpy(p, pAttr->pValue, *pAttr->pLen);
   1100e:	9b07      	ldr	r3, [sp, #28]
   11010:	6859      	ldr	r1, [r3, #4]
   11012:	9b07      	ldr	r3, [sp, #28]
   11014:	689b      	ldr	r3, [r3, #8]
   11016:	881b      	ldrh	r3, [r3, #0]
   11018:	461a      	mov	r2, r3
   1101a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1101c:	f7fb f870 	bl	c100 <memcpy>
            p += *pAttr->pLen;
   11020:	9b07      	ldr	r3, [sp, #28]
   11022:	689b      	ldr	r3, [r3, #8]
   11024:	881b      	ldrh	r3, [r3, #0]
   11026:	461a      	mov	r2, r3
   11028:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1102a:	4413      	add	r3, r2
   1102c:	9309      	str	r3, [sp, #36]	; 0x24
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   1102e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   11032:	3301      	adds	r3, #1
   11034:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   11038:	9b07      	ldr	r3, [sp, #28]
   1103a:	3310      	adds	r3, #16
   1103c:	9307      	str	r3, [sp, #28]
   1103e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11040:	8a5b      	ldrh	r3, [r3, #18]
   11042:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   11046:	429a      	cmp	r2, r3
   11048:	d98b      	bls.n	10f62 <AttsCalculateDbHash+0xa6>
          }
        }
      }

      pGroup = pGroup->pNext;
   1104a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1104c:	681b      	ldr	r3, [r3, #0]
   1104e:	930c      	str	r3, [sp, #48]	; 0x30
    while (pGroup)
   11050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11052:	2b00      	cmp	r3, #0
   11054:	f47f af7d 	bne.w	10f52 <AttsCalculateDbHash+0x96>
    }

    /* Send to CMAC */
    if (AttsHashDatabaseString(hashingKey, pMsg, msgLen))
   11058:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1105c:	466b      	mov	r3, sp
   1105e:	9905      	ldr	r1, [sp, #20]
   11060:	4618      	mov	r0, r3
   11062:	f7ff ff0f 	bl	10e84 <AttsHashDatabaseString>
   11066:	4603      	mov	r3, r0
   11068:	2b00      	cmp	r3, #0
    }
  }

  /* Assert on failure to initiate database hash generation. */
  WSF_ASSERT(FALSE);
}
   1106a:	b00f      	add	sp, #60	; 0x3c
   1106c:	f85d fb04 	ldr.w	pc, [sp], #4
   11070:	10008a80 	.word	0x10008a80

00011074 <AttsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsAddGroup(attsGroup_t *pGroup)
{
   11074:	b500      	push	{lr}
   11076:	b085      	sub	sp, #20
   11078:	9001      	str	r0, [sp, #4]
  attsGroup_t   *pElem;
  attsGroup_t   *pPrev = NULL;
   1107a:	2300      	movs	r3, #0
   1107c:	9302      	str	r3, [sp, #8]

  /* task schedule lock */
  WsfTaskLock();
   1107e:	f7fc f905 	bl	d28c <WsfTaskLock>

  pElem = (attsGroup_t *) attsCb.groupQueue.pHead;
   11082:	4b11      	ldr	r3, [pc, #68]	; (110c8 <AttsAddGroup+0x54>)
   11084:	681b      	ldr	r3, [r3, #0]
   11086:	9303      	str	r3, [sp, #12]

  /* iterate over queue sorted by increasing handle value */
  while (pElem != NULL)
   11088:	e00a      	b.n	110a0 <AttsAddGroup+0x2c>
  {
    if (pGroup->startHandle < pElem->startHandle)
   1108a:	9b01      	ldr	r3, [sp, #4]
   1108c:	8a1a      	ldrh	r2, [r3, #16]
   1108e:	9b03      	ldr	r3, [sp, #12]
   11090:	8a1b      	ldrh	r3, [r3, #16]
   11092:	429a      	cmp	r2, r3
   11094:	d308      	bcc.n	110a8 <AttsAddGroup+0x34>
    {
      break;
    }
    pPrev = pElem;
   11096:	9b03      	ldr	r3, [sp, #12]
   11098:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   1109a:	9b03      	ldr	r3, [sp, #12]
   1109c:	681b      	ldr	r3, [r3, #0]
   1109e:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   110a0:	9b03      	ldr	r3, [sp, #12]
   110a2:	2b00      	cmp	r3, #0
   110a4:	d1f1      	bne.n	1108a <AttsAddGroup+0x16>
   110a6:	e000      	b.n	110aa <AttsAddGroup+0x36>
      break;
   110a8:	bf00      	nop
  }

  /* insert new group */
  WsfQueueInsert(&attsCb.groupQueue, pGroup, pPrev);
   110aa:	9a02      	ldr	r2, [sp, #8]
   110ac:	9901      	ldr	r1, [sp, #4]
   110ae:	4806      	ldr	r0, [pc, #24]	; (110c8 <AttsAddGroup+0x54>)
   110b0:	f7fc faca 	bl	d648 <WsfQueueInsert>

  /* set database hash update status to true until a new hash is generated */
  attsCsfSetHashUpdateStatus(TRUE);
   110b4:	2001      	movs	r0, #1
   110b6:	f7fe fe5f 	bl	fd78 <attsCsfSetHashUpdateStatus>

  /* task schedule unlock */
  WsfTaskUnlock();
   110ba:	f7fc f8ec 	bl	d296 <WsfTaskUnlock>
}
   110be:	bf00      	nop
   110c0:	b005      	add	sp, #20
   110c2:	f85d fb04 	ldr.w	pc, [sp], #4
   110c6:	bf00      	nop
   110c8:	10008a80 	.word	0x10008a80

000110cc <AttsSetAttr>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttsSetAttr(uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   110cc:	b500      	push	{lr}
   110ce:	b087      	sub	sp, #28
   110d0:	4603      	mov	r3, r0
   110d2:	9200      	str	r2, [sp, #0]
   110d4:	f8ad 3006 	strh.w	r3, [sp, #6]
   110d8:	460b      	mov	r3, r1
   110da:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   110de:	2300      	movs	r3, #0
   110e0:	f88d 3017 	strb.w	r3, [sp, #23]

  WsfTaskLock();
   110e4:	f7fc f8d2 	bl	d28c <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   110e8:	aa03      	add	r2, sp, #12
   110ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   110ee:	4611      	mov	r1, r2
   110f0:	4618      	mov	r0, r3
   110f2:	f000 f8c3 	bl	1127c <attsFindByHandle>
   110f6:	9004      	str	r0, [sp, #16]
   110f8:	9b04      	ldr	r3, [sp, #16]
   110fa:	2b00      	cmp	r3, #0
   110fc:	d01d      	beq.n	1113a <AttsSetAttr+0x6e>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
   110fe:	9b04      	ldr	r3, [sp, #16]
   11100:	899b      	ldrh	r3, [r3, #12]
   11102:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11106:	429a      	cmp	r2, r3
   11108:	d903      	bls.n	11112 <AttsSetAttr+0x46>
    {
      err = ATT_ERR_LENGTH;
   1110a:	230d      	movs	r3, #13
   1110c:	f88d 3017 	strb.w	r3, [sp, #23]
   11110:	e016      	b.n	11140 <AttsSetAttr+0x74>
    }
    else
    {
      /* set attribute value */
      memcpy(pAttr->pValue, pValue, valueLen);
   11112:	9b04      	ldr	r3, [sp, #16]
   11114:	685b      	ldr	r3, [r3, #4]
   11116:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1111a:	9900      	ldr	r1, [sp, #0]
   1111c:	4618      	mov	r0, r3
   1111e:	f7fa ffef 	bl	c100 <memcpy>

      /* set the length if variable length attribute */
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   11122:	9b04      	ldr	r3, [sp, #16]
   11124:	7b9b      	ldrb	r3, [r3, #14]
   11126:	f003 0308 	and.w	r3, r3, #8
   1112a:	2b00      	cmp	r3, #0
   1112c:	d008      	beq.n	11140 <AttsSetAttr+0x74>
      {
        *(pAttr->pLen) = valueLen;
   1112e:	9b04      	ldr	r3, [sp, #16]
   11130:	689b      	ldr	r3, [r3, #8]
   11132:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11136:	801a      	strh	r2, [r3, #0]
   11138:	e002      	b.n	11140 <AttsSetAttr+0x74>
    }
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_NOT_FOUND;
   1113a:	230a      	movs	r3, #10
   1113c:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  WsfTaskUnlock();
   11140:	f7fc f8a9 	bl	d296 <WsfTaskUnlock>

  return err;
   11144:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   11148:	4618      	mov	r0, r3
   1114a:	b007      	add	sp, #28
   1114c:	f85d fb04 	ldr.w	pc, [sp], #4

00011150 <AttsGetAttr>:
 *
 *  \return ATT_SUCCESS if successful or other error code if failure.
 */
/*************************************************************************************************/
uint8_t AttsGetAttr(uint16_t handle, uint16_t *pLen, uint8_t **pValue)
{
   11150:	b500      	push	{lr}
   11152:	b089      	sub	sp, #36	; 0x24
   11154:	4603      	mov	r3, r0
   11156:	9102      	str	r1, [sp, #8]
   11158:	9201      	str	r2, [sp, #4]
   1115a:	f8ad 300e 	strh.w	r3, [sp, #14]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   1115e:	2300      	movs	r3, #0
   11160:	f88d 301f 	strb.w	r3, [sp, #31]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   11164:	aa05      	add	r2, sp, #20
   11166:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1116a:	4611      	mov	r1, r2
   1116c:	4618      	mov	r0, r3
   1116e:	f000 f885 	bl	1127c <attsFindByHandle>
   11172:	9006      	str	r0, [sp, #24]
   11174:	9b06      	ldr	r3, [sp, #24]
   11176:	2b00      	cmp	r3, #0
   11178:	d009      	beq.n	1118e <AttsGetAttr+0x3e>
  {
    /* set length and value pointers */
    *pLen = *(pAttr->pLen);
   1117a:	9b06      	ldr	r3, [sp, #24]
   1117c:	689b      	ldr	r3, [r3, #8]
   1117e:	881a      	ldrh	r2, [r3, #0]
   11180:	9b02      	ldr	r3, [sp, #8]
   11182:	801a      	strh	r2, [r3, #0]
    *pValue = pAttr->pValue;
   11184:	9b06      	ldr	r3, [sp, #24]
   11186:	685a      	ldr	r2, [r3, #4]
   11188:	9b01      	ldr	r3, [sp, #4]
   1118a:	601a      	str	r2, [r3, #0]
   1118c:	e002      	b.n	11194 <AttsGetAttr+0x44>
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_NOT_FOUND;
   1118e:	230a      	movs	r3, #10
   11190:	f88d 301f 	strb.w	r3, [sp, #31]
  }

  return err;
   11194:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
   11198:	4618      	mov	r0, r3
   1119a:	b009      	add	sp, #36	; 0x24
   1119c:	f85d fb04 	ldr.w	pc, [sp], #4

000111a0 <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
   111a0:	b500      	push	{lr}
   111a2:	b085      	sub	sp, #20
   111a4:	9003      	str	r0, [sp, #12]
   111a6:	460b      	mov	r3, r1
   111a8:	9201      	str	r2, [sp, #4]
   111aa:	f88d 300b 	strb.w	r3, [sp, #11]
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   111ae:	9b03      	ldr	r3, [sp, #12]
   111b0:	7b9b      	ldrb	r3, [r3, #14]
   111b2:	f003 0301 	and.w	r3, r3, #1
   111b6:	2b00      	cmp	r3, #0
   111b8:	d103      	bne.n	111c2 <attsUuidCmp+0x22>
   111ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
   111be:	2b02      	cmp	r3, #2
   111c0:	d009      	beq.n	111d6 <attsUuidCmp+0x36>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   111c2:	9b03      	ldr	r3, [sp, #12]
   111c4:	7b9b      	ldrb	r3, [r3, #14]
   111c6:	f003 0301 	and.w	r3, r3, #1
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   111ca:	2b00      	cmp	r3, #0
   111cc:	d012      	beq.n	111f4 <attsUuidCmp+0x54>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   111ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
   111d2:	2b10      	cmp	r3, #16
   111d4:	d10e      	bne.n	111f4 <attsUuidCmp+0x54>
  {
    /* simply compare the data */
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
   111d6:	9b03      	ldr	r3, [sp, #12]
   111d8:	681b      	ldr	r3, [r3, #0]
   111da:	f89d 200b 	ldrb.w	r2, [sp, #11]
   111de:	9901      	ldr	r1, [sp, #4]
   111e0:	4618      	mov	r0, r3
   111e2:	f017 f8fb 	bl	283dc <memcmp>
   111e6:	4603      	mov	r3, r0
   111e8:	2b00      	cmp	r3, #0
   111ea:	bf0c      	ite	eq
   111ec:	2301      	moveq	r3, #1
   111ee:	2300      	movne	r3, #0
   111f0:	b2db      	uxtb	r3, r3
   111f2:	e018      	b.n	11226 <attsUuidCmp+0x86>
  }
  /* else we need to convert one of the uuids */
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
   111f4:	9b03      	ldr	r3, [sp, #12]
   111f6:	7b9b      	ldrb	r3, [r3, #14]
   111f8:	f003 0301 	and.w	r3, r3, #1
   111fc:	2b00      	cmp	r3, #0
   111fe:	d10b      	bne.n	11218 <attsUuidCmp+0x78>
   11200:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11204:	2b10      	cmp	r3, #16
   11206:	d107      	bne.n	11218 <attsUuidCmp+0x78>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
   11208:	9b03      	ldr	r3, [sp, #12]
   1120a:	681b      	ldr	r3, [r3, #0]
   1120c:	9901      	ldr	r1, [sp, #4]
   1120e:	4618      	mov	r0, r3
   11210:	f001 fee4 	bl	12fdc <attUuidCmp16to128>
   11214:	4603      	mov	r3, r0
   11216:	e006      	b.n	11226 <attsUuidCmp+0x86>
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   11218:	9b03      	ldr	r3, [sp, #12]
   1121a:	681b      	ldr	r3, [r3, #0]
   1121c:	4619      	mov	r1, r3
   1121e:	9801      	ldr	r0, [sp, #4]
   11220:	f001 fedc 	bl	12fdc <attUuidCmp16to128>
   11224:	4603      	mov	r3, r0
  }
}
   11226:	4618      	mov	r0, r3
   11228:	b005      	add	sp, #20
   1122a:	f85d fb04 	ldr.w	pc, [sp], #4

0001122e <attsUuid16Cmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
   1122e:	b500      	push	{lr}
   11230:	b085      	sub	sp, #20
   11232:	9003      	str	r0, [sp, #12]
   11234:	460b      	mov	r3, r1
   11236:	9201      	str	r2, [sp, #4]
   11238:	f88d 300b 	strb.w	r3, [sp, #11]
  if (uuidLen == ATT_16_UUID_LEN)
   1123c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11240:	2b02      	cmp	r3, #2
   11242:	d112      	bne.n	1126a <attsUuid16Cmp+0x3c>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   11244:	9b03      	ldr	r3, [sp, #12]
   11246:	781a      	ldrb	r2, [r3, #0]
   11248:	9b01      	ldr	r3, [sp, #4]
   1124a:	781b      	ldrb	r3, [r3, #0]
   1124c:	429a      	cmp	r2, r3
   1124e:	d109      	bne.n	11264 <attsUuid16Cmp+0x36>
   11250:	9b03      	ldr	r3, [sp, #12]
   11252:	3301      	adds	r3, #1
   11254:	781a      	ldrb	r2, [r3, #0]
   11256:	9b01      	ldr	r3, [sp, #4]
   11258:	3301      	adds	r3, #1
   1125a:	781b      	ldrb	r3, [r3, #0]
   1125c:	429a      	cmp	r2, r3
   1125e:	d101      	bne.n	11264 <attsUuid16Cmp+0x36>
   11260:	2301      	movs	r3, #1
   11262:	e000      	b.n	11266 <attsUuid16Cmp+0x38>
   11264:	2300      	movs	r3, #0
   11266:	b2db      	uxtb	r3, r3
   11268:	e004      	b.n	11274 <attsUuid16Cmp+0x46>
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
   1126a:	9901      	ldr	r1, [sp, #4]
   1126c:	9803      	ldr	r0, [sp, #12]
   1126e:	f001 feb5 	bl	12fdc <attUuidCmp16to128>
   11272:	4603      	mov	r3, r0
  }
}
   11274:	4618      	mov	r0, r3
   11276:	b005      	add	sp, #20
   11278:	f85d fb04 	ldr.w	pc, [sp], #4

0001127c <attsFindByHandle>:
 *
 *  \return Pointer to attribute if found, othewise NULL.
 */
/*************************************************************************************************/
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
   1127c:	b084      	sub	sp, #16
   1127e:	4603      	mov	r3, r0
   11280:	9100      	str	r1, [sp, #0]
   11282:	f8ad 3006 	strh.w	r3, [sp, #6]
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   11286:	4b13      	ldr	r3, [pc, #76]	; (112d4 <attsFindByHandle+0x58>)
   11288:	681b      	ldr	r3, [r3, #0]
   1128a:	9303      	str	r3, [sp, #12]
   1128c:	e01b      	b.n	112c6 <attsFindByHandle+0x4a>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   1128e:	9b03      	ldr	r3, [sp, #12]
   11290:	8a1b      	ldrh	r3, [r3, #16]
   11292:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11296:	429a      	cmp	r2, r3
   11298:	d312      	bcc.n	112c0 <attsFindByHandle+0x44>
   1129a:	9b03      	ldr	r3, [sp, #12]
   1129c:	8a5b      	ldrh	r3, [r3, #18]
   1129e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   112a2:	429a      	cmp	r2, r3
   112a4:	d80c      	bhi.n	112c0 <attsFindByHandle+0x44>
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
   112a6:	9b00      	ldr	r3, [sp, #0]
   112a8:	9a03      	ldr	r2, [sp, #12]
   112aa:	601a      	str	r2, [r3, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
   112ac:	9b03      	ldr	r3, [sp, #12]
   112ae:	685a      	ldr	r2, [r3, #4]
   112b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   112b4:	9903      	ldr	r1, [sp, #12]
   112b6:	8a09      	ldrh	r1, [r1, #16]
   112b8:	1a5b      	subs	r3, r3, r1
   112ba:	011b      	lsls	r3, r3, #4
   112bc:	4413      	add	r3, r2
   112be:	e006      	b.n	112ce <attsFindByHandle+0x52>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   112c0:	9b03      	ldr	r3, [sp, #12]
   112c2:	681b      	ldr	r3, [r3, #0]
   112c4:	9303      	str	r3, [sp, #12]
   112c6:	9b03      	ldr	r3, [sp, #12]
   112c8:	2b00      	cmp	r3, #0
   112ca:	d1e0      	bne.n	1128e <attsFindByHandle+0x12>
    }
  }

  /* handle not found */
  return NULL;
   112cc:	2300      	movs	r3, #0
}
   112ce:	4618      	mov	r0, r3
   112d0:	b004      	add	sp, #16
   112d2:	4770      	bx	lr
   112d4:	10008a80 	.word	0x10008a80

000112d8 <attsFindInRange>:
 *
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindInRange(uint16_t startHandle, uint16_t endHandle, attsAttr_t **pAttr)
{
   112d8:	b084      	sub	sp, #16
   112da:	4603      	mov	r3, r0
   112dc:	9200      	str	r2, [sp, #0]
   112de:	f8ad 3006 	strh.w	r3, [sp, #6]
   112e2:	460b      	mov	r3, r1
   112e4:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   112e8:	4b1b      	ldr	r3, [pc, #108]	; (11358 <attsFindInRange+0x80>)
   112ea:	681b      	ldr	r3, [r3, #0]
   112ec:	9303      	str	r3, [sp, #12]
   112ee:	e02c      	b.n	1134a <attsFindInRange+0x72>
  {
    /* if start handle is less than group start handle but handle range is within group */
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   112f0:	9b03      	ldr	r3, [sp, #12]
   112f2:	8a1b      	ldrh	r3, [r3, #16]
   112f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   112f8:	429a      	cmp	r2, r3
   112fa:	d209      	bcs.n	11310 <attsFindInRange+0x38>
   112fc:	9b03      	ldr	r3, [sp, #12]
   112fe:	8a1b      	ldrh	r3, [r3, #16]
   11300:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11304:	429a      	cmp	r2, r3
   11306:	d303      	bcc.n	11310 <attsFindInRange+0x38>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   11308:	9b03      	ldr	r3, [sp, #12]
   1130a:	8a1b      	ldrh	r3, [r3, #16]
   1130c:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    /*  if start handle within handle range of group */
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   11310:	9b03      	ldr	r3, [sp, #12]
   11312:	8a1b      	ldrh	r3, [r3, #16]
   11314:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11318:	429a      	cmp	r2, r3
   1131a:	d313      	bcc.n	11344 <attsFindInRange+0x6c>
   1131c:	9b03      	ldr	r3, [sp, #12]
   1131e:	8a5b      	ldrh	r3, [r3, #18]
   11320:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11324:	429a      	cmp	r2, r3
   11326:	d80d      	bhi.n	11344 <attsFindInRange+0x6c>
    {
      /* index by handle into attribute array to return attribute */
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   11328:	9b03      	ldr	r3, [sp, #12]
   1132a:	685a      	ldr	r2, [r3, #4]
   1132c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11330:	9903      	ldr	r1, [sp, #12]
   11332:	8a09      	ldrh	r1, [r1, #16]
   11334:	1a5b      	subs	r3, r3, r1
   11336:	011b      	lsls	r3, r3, #4
   11338:	441a      	add	r2, r3
   1133a:	9b00      	ldr	r3, [sp, #0]
   1133c:	601a      	str	r2, [r3, #0]
      return startHandle;
   1133e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11342:	e006      	b.n	11352 <attsFindInRange+0x7a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   11344:	9b03      	ldr	r3, [sp, #12]
   11346:	681b      	ldr	r3, [r3, #0]
   11348:	9303      	str	r3, [sp, #12]
   1134a:	9b03      	ldr	r3, [sp, #12]
   1134c:	2b00      	cmp	r3, #0
   1134e:	d1cf      	bne.n	112f0 <attsFindInRange+0x18>
    }
  }

  /* handle within range not found */
  return ATT_HANDLE_NONE;
   11350:	2300      	movs	r3, #0
}
   11352:	4618      	mov	r0, r3
   11354:	b004      	add	sp, #16
   11356:	4770      	bx	lr
   11358:	10008a80 	.word	0x10008a80

0001135c <attsPermissions>:
 *
 *  \return ATT_SUCCESS if successful or error code on failure.
 */
/*************************************************************************************************/
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
   1135c:	b510      	push	{r4, lr}
   1135e:	b084      	sub	sp, #16
   11360:	4604      	mov	r4, r0
   11362:	4608      	mov	r0, r1
   11364:	4611      	mov	r1, r2
   11366:	461a      	mov	r2, r3
   11368:	4623      	mov	r3, r4
   1136a:	f88d 3007 	strb.w	r3, [sp, #7]
   1136e:	4603      	mov	r3, r0
   11370:	f88d 3006 	strb.w	r3, [sp, #6]
   11374:	460b      	mov	r3, r1
   11376:	f8ad 3004 	strh.w	r3, [sp, #4]
   1137a:	4613      	mov	r3, r2
   1137c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
   11380:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11384:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11388:	4013      	ands	r3, r2
   1138a:	b2db      	uxtb	r3, r3
   1138c:	2b00      	cmp	r3, #0
   1138e:	d107      	bne.n	113a0 <attsPermissions+0x44>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   11390:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11394:	2b01      	cmp	r3, #1
   11396:	d101      	bne.n	1139c <attsPermissions+0x40>
   11398:	2302      	movs	r3, #2
   1139a:	e04a      	b.n	11432 <attsPermissions+0xd6>
   1139c:	2303      	movs	r3, #3
   1139e:	e048      	b.n	11432 <attsPermissions+0xd6>
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
   113a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   113a4:	2b10      	cmp	r3, #16
   113a6:	d104      	bne.n	113b2 <attsPermissions+0x56>
  {
    permissions >>= 4;
   113a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   113ac:	091b      	lsrs	r3, r3, #4
   113ae:	f88d 3003 	strb.w	r3, [sp, #3]
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   113b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   113b6:	f003 030e 	and.w	r3, r3, #14
   113ba:	2b00      	cmp	r3, #0
   113bc:	d101      	bne.n	113c2 <attsPermissions+0x66>
  {
    return ATT_SUCCESS;
   113be:	2300      	movs	r3, #0
   113c0:	e037      	b.n	11432 <attsPermissions+0xd6>
  }

  /* get security level for this connection */
  secLevel = DmConnSecLevel(connId);
   113c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   113c6:	4618      	mov	r0, r3
   113c8:	f004 fd84 	bl	15ed4 <DmConnSecLevel>
   113cc:	4603      	mov	r3, r0
   113ce:	f88d 300f 	strb.w	r3, [sp, #15]

  /* check if encryption required */
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   113d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   113d6:	f003 0308 	and.w	r3, r3, #8
   113da:	2b00      	cmp	r3, #0
   113dc:	d005      	beq.n	113ea <attsPermissions+0x8e>
   113de:	f89d 300f 	ldrb.w	r3, [sp, #15]
   113e2:	2b00      	cmp	r3, #0
   113e4:	d101      	bne.n	113ea <attsPermissions+0x8e>
  {
    return ATT_ERR_AUTH;
   113e6:	2305      	movs	r3, #5
   113e8:	e023      	b.n	11432 <attsPermissions+0xd6>
  }

  /* check if encryption required with authenticated key */
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   113ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   113ee:	f003 030a 	and.w	r3, r3, #10
   113f2:	2b0a      	cmp	r3, #10
   113f4:	d105      	bne.n	11402 <attsPermissions+0xa6>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   113f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   113fa:	2b01      	cmp	r3, #1
   113fc:	d801      	bhi.n	11402 <attsPermissions+0xa6>
  {
    return ATT_ERR_AUTH;
   113fe:	2305      	movs	r3, #5
   11400:	e017      	b.n	11432 <attsPermissions+0xd6>
  }

  /* authorization check */
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   11402:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11406:	f003 0304 	and.w	r3, r3, #4
   1140a:	2b00      	cmp	r3, #0
   1140c:	d010      	beq.n	11430 <attsPermissions+0xd4>
  {
    if (attsCb.authorCback == NULL)
   1140e:	4b0a      	ldr	r3, [pc, #40]	; (11438 <attsPermissions+0xdc>)
   11410:	691b      	ldr	r3, [r3, #16]
   11412:	2b00      	cmp	r3, #0
   11414:	d101      	bne.n	1141a <attsPermissions+0xbe>
    {
      return ATT_ERR_AUTHOR;
   11416:	2308      	movs	r3, #8
   11418:	e00b      	b.n	11432 <attsPermissions+0xd6>
    }
    else
    {
      return (*attsCb.authorCback)(connId, permit, handle);
   1141a:	4b07      	ldr	r3, [pc, #28]	; (11438 <attsPermissions+0xdc>)
   1141c:	691b      	ldr	r3, [r3, #16]
   1141e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11422:	f89d 1006 	ldrb.w	r1, [sp, #6]
   11426:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1142a:	4798      	blx	r3
   1142c:	4603      	mov	r3, r0
   1142e:	e000      	b.n	11432 <attsPermissions+0xd6>
    }
  }
  else
  {
    return ATT_SUCCESS;
   11430:	2300      	movs	r3, #0
  }
}
   11432:	4618      	mov	r0, r3
   11434:	b004      	add	sp, #16
   11436:	bd10      	pop	{r4, pc}
   11438:	10008a80 	.word	0x10008a80

0001143c <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1143c:	b510      	push	{r4, lr}
   1143e:	b088      	sub	sp, #32
   11440:	9003      	str	r0, [sp, #12]
   11442:	460b      	mov	r3, r1
   11444:	9201      	str	r2, [sp, #4]
   11446:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t   *p;
  uint16_t  mtu;
  uint16_t  localMtu;
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   1144a:	9b01      	ldr	r3, [sp, #4]
   1144c:	3309      	adds	r3, #9
   1144e:	9306      	str	r3, [sp, #24]

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
   11450:	9b06      	ldr	r3, [sp, #24]
   11452:	781b      	ldrb	r3, [r3, #0]
   11454:	b29a      	uxth	r2, r3
   11456:	9b06      	ldr	r3, [sp, #24]
   11458:	3301      	adds	r3, #1
   1145a:	781b      	ldrb	r3, [r3, #0]
   1145c:	b29b      	uxth	r3, r3
   1145e:	021b      	lsls	r3, r3, #8
   11460:	b29b      	uxth	r3, r3
   11462:	4413      	add	r3, r2
   11464:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* verify */
  if (mtu < ATT_DEFAULT_MTU)
   11468:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1146c:	2b16      	cmp	r3, #22
   1146e:	d802      	bhi.n	11476 <attsProcMtuReq+0x3a>
  {
    mtu = ATT_DEFAULT_MTU;
   11470:	2317      	movs	r3, #23
   11472:	f8ad 301e 	strh.w	r3, [sp, #30]
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   11476:	4b23      	ldr	r3, [pc, #140]	; (11504 <attsProcMtuReq+0xc8>)
   11478:	681b      	ldr	r3, [r3, #0]
   1147a:	889b      	ldrh	r3, [r3, #4]
   1147c:	461c      	mov	r4, r3
   1147e:	f00e f883 	bl	1f588 <HciGetMaxRxAclLen>
   11482:	4603      	mov	r3, r0
   11484:	3b04      	subs	r3, #4
   11486:	429c      	cmp	r4, r3
   11488:	da03      	bge.n	11492 <attsProcMtuReq+0x56>
   1148a:	4b1e      	ldr	r3, [pc, #120]	; (11504 <attsProcMtuReq+0xc8>)
   1148c:	681b      	ldr	r3, [r3, #0]
   1148e:	889b      	ldrh	r3, [r3, #4]
   11490:	e004      	b.n	1149c <attsProcMtuReq+0x60>
   11492:	f00e f879 	bl	1f588 <HciGetMaxRxAclLen>
   11496:	4603      	mov	r3, r0
   11498:	3b04      	subs	r3, #4
   1149a:	b29b      	uxth	r3, r3
   1149c:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
   114a0:	200b      	movs	r0, #11
   114a2:	f001 fe1f 	bl	130e4 <attMsgAlloc>
   114a6:	9004      	str	r0, [sp, #16]
   114a8:	9b04      	ldr	r3, [sp, #16]
   114aa:	2b00      	cmp	r3, #0
   114ac:	d01e      	beq.n	114ec <attsProcMtuReq+0xb0>
  {
    p = pRsp + L2C_PAYLOAD_START;
   114ae:	9b04      	ldr	r3, [sp, #16]
   114b0:	3308      	adds	r3, #8
   114b2:	9306      	str	r3, [sp, #24]
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
   114b4:	9b06      	ldr	r3, [sp, #24]
   114b6:	1c5a      	adds	r2, r3, #1
   114b8:	9206      	str	r2, [sp, #24]
   114ba:	2203      	movs	r2, #3
   114bc:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, localMtu);
   114be:	9b06      	ldr	r3, [sp, #24]
   114c0:	1c5a      	adds	r2, r3, #1
   114c2:	9206      	str	r2, [sp, #24]
   114c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   114c8:	b2d2      	uxtb	r2, r2
   114ca:	701a      	strb	r2, [r3, #0]
   114cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   114d0:	0a1b      	lsrs	r3, r3, #8
   114d2:	b299      	uxth	r1, r3
   114d4:	9b06      	ldr	r3, [sp, #24]
   114d6:	1c5a      	adds	r2, r3, #1
   114d8:	9206      	str	r2, [sp, #24]
   114da:	b2ca      	uxtb	r2, r1
   114dc:	701a      	strb	r2, [r3, #0]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
   114de:	9b03      	ldr	r3, [sp, #12]
   114e0:	8b19      	ldrh	r1, [r3, #24]
   114e2:	9b04      	ldr	r3, [sp, #16]
   114e4:	2203      	movs	r2, #3
   114e6:	2004      	movs	r0, #4
   114e8:	f7fb f8e2 	bl	c6b0 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
   114ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   114f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   114f4:	4619      	mov	r1, r3
   114f6:	9803      	ldr	r0, [sp, #12]
   114f8:	f001 fd8e 	bl	13018 <attSetMtu>
}
   114fc:	bf00      	nop
   114fe:	b008      	add	sp, #32
   11500:	bd10      	pop	{r4, pc}
   11502:	bf00      	nop
   11504:	10002bcc 	.word	0x10002bcc

00011508 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   11508:	b500      	push	{lr}
   1150a:	b08b      	sub	sp, #44	; 0x2c
   1150c:	9003      	str	r0, [sp, #12]
   1150e:	460b      	mov	r3, r1
   11510:	9201      	str	r2, [sp, #4]
   11512:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;
   11516:	2300      	movs	r3, #0
   11518:	f88d 301d 	strb.w	r3, [sp, #29]

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1151c:	9b01      	ldr	r3, [sp, #4]
   1151e:	3309      	adds	r3, #9
   11520:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   11522:	9b01      	ldr	r3, [sp, #4]
   11524:	781b      	ldrb	r3, [r3, #0]
   11526:	b29a      	uxth	r2, r3
   11528:	9b01      	ldr	r3, [sp, #4]
   1152a:	3301      	adds	r3, #1
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	b29b      	uxth	r3, r3
   11530:	021b      	lsls	r3, r3, #8
   11532:	b29b      	uxth	r3, r3
   11534:	4413      	add	r3, r2
   11536:	f8ad 301a 	strh.w	r3, [sp, #26]
   1153a:	9b01      	ldr	r3, [sp, #4]
   1153c:	3302      	adds	r3, #2
   1153e:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   11540:	9b01      	ldr	r3, [sp, #4]
   11542:	781b      	ldrb	r3, [r3, #0]
   11544:	b29a      	uxth	r2, r3
   11546:	9b01      	ldr	r3, [sp, #4]
   11548:	3301      	adds	r3, #1
   1154a:	781b      	ldrb	r3, [r3, #0]
   1154c:	b29b      	uxth	r3, r3
   1154e:	021b      	lsls	r3, r3, #8
   11550:	b29b      	uxth	r3, r3
   11552:	4413      	add	r3, r2
   11554:	f8ad 3018 	strh.w	r3, [sp, #24]
   11558:	9b01      	ldr	r3, [sp, #4]
   1155a:	3302      	adds	r3, #2
   1155c:	9301      	str	r3, [sp, #4]

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   1155e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11562:	2b00      	cmp	r3, #0
   11564:	d005      	beq.n	11572 <attsProcFindInfoReq+0x6a>
   11566:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1156a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1156e:	429a      	cmp	r2, r3
   11570:	d902      	bls.n	11578 <attsProcFindInfoReq+0x70>
  {
    err = ATT_ERR_HANDLE;
   11572:	2301      	movs	r3, #1
   11574:	f88d 301d 	strb.w	r3, [sp, #29]
  }

  if (!err)
   11578:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1157c:	2b00      	cmp	r3, #0
   1157e:	f040 80ab 	bne.w	116d8 <attsProcFindInfoReq+0x1d0>
  {
    /* allocate max size buffer for response */
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   11582:	9b03      	ldr	r3, [sp, #12]
   11584:	8b5b      	ldrh	r3, [r3, #26]
   11586:	3308      	adds	r3, #8
   11588:	b29b      	uxth	r3, r3
   1158a:	4618      	mov	r0, r3
   1158c:	f001 fdaa 	bl	130e4 <attMsgAlloc>
   11590:	9009      	str	r0, [sp, #36]	; 0x24
   11592:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11594:	2b00      	cmp	r3, #0
   11596:	f000 809c 	beq.w	116d2 <attsProcFindInfoReq+0x1ca>
    {
      p = pBuf + L2C_PAYLOAD_START;
   1159a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1159c:	3308      	adds	r3, #8
   1159e:	9308      	str	r3, [sp, #32]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
   115a0:	9b08      	ldr	r3, [sp, #32]
   115a2:	1c5a      	adds	r2, r3, #1
   115a4:	9208      	str	r2, [sp, #32]
   115a6:	2205      	movs	r2, #5
   115a8:	701a      	strb	r2, [r3, #0]

      /* set result format */
      UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_16_UUID);
   115aa:	9b08      	ldr	r3, [sp, #32]
   115ac:	1c5a      	adds	r2, r3, #1
   115ae:	9208      	str	r2, [sp, #32]
   115b0:	2201      	movs	r2, #1
   115b2:	701a      	strb	r2, [r3, #0]

      /* find attributes within handle range */
      handle = startHandle;
   115b4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   115b8:	f8ad 301e 	strh.w	r3, [sp, #30]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   115bc:	e066      	b.n	1168c <attsProcFindInfoReq+0x184>
      {
        /* copy handle and UUID into response buffer */

        /* if 128 bit UUID */
        if (pAttr->settings & ATTS_SET_UUID_128)
   115be:	9b05      	ldr	r3, [sp, #20]
   115c0:	7b9b      	ldrb	r3, [r3, #14]
   115c2:	f003 0301 	and.w	r3, r3, #1
   115c6:	2b00      	cmp	r3, #0
   115c8:	d027      	beq.n	1161a <attsProcFindInfoReq+0x112>
        {
          /* if this is the first result */
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
   115ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115cc:	330a      	adds	r3, #10
   115ce:	9a08      	ldr	r2, [sp, #32]
   115d0:	429a      	cmp	r2, r3
   115d2:	d16b      	bne.n	116ac <attsProcFindInfoReq+0x1a4>
          {
            p--;
   115d4:	9b08      	ldr	r3, [sp, #32]
   115d6:	3b01      	subs	r3, #1
   115d8:	9308      	str	r3, [sp, #32]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   115da:	9b08      	ldr	r3, [sp, #32]
   115dc:	1c5a      	adds	r2, r3, #1
   115de:	9208      	str	r2, [sp, #32]
   115e0:	2202      	movs	r2, #2
   115e2:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(p, handle);
   115e4:	9b08      	ldr	r3, [sp, #32]
   115e6:	1c5a      	adds	r2, r3, #1
   115e8:	9208      	str	r2, [sp, #32]
   115ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   115ee:	b2d2      	uxtb	r2, r2
   115f0:	701a      	strb	r2, [r3, #0]
   115f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   115f6:	0a1b      	lsrs	r3, r3, #8
   115f8:	b299      	uxth	r1, r3
   115fa:	9b08      	ldr	r3, [sp, #32]
   115fc:	1c5a      	adds	r2, r3, #1
   115fe:	9208      	str	r2, [sp, #32]
   11600:	b2ca      	uxtb	r2, r1
   11602:	701a      	strb	r2, [r3, #0]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   11604:	9b05      	ldr	r3, [sp, #20]
   11606:	681b      	ldr	r3, [r3, #0]
   11608:	2210      	movs	r2, #16
   1160a:	4619      	mov	r1, r3
   1160c:	9808      	ldr	r0, [sp, #32]
   1160e:	f7fa fd77 	bl	c100 <memcpy>
            p += ATT_128_UUID_LEN;
   11612:	9b08      	ldr	r3, [sp, #32]
   11614:	3310      	adds	r3, #16
   11616:	9308      	str	r3, [sp, #32]
          }
          break;
   11618:	e048      	b.n	116ac <attsProcFindInfoReq+0x1a4>
        }
        /* else 16 bit UUID */
        else
        {
          /* check if result fits */
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   1161a:	9b08      	ldr	r3, [sp, #32]
   1161c:	1d1a      	adds	r2, r3, #4
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1161e:	9b03      	ldr	r3, [sp, #12]
   11620:	8b5b      	ldrh	r3, [r3, #26]
   11622:	3308      	adds	r3, #8
   11624:	9909      	ldr	r1, [sp, #36]	; 0x24
   11626:	440b      	add	r3, r1
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   11628:	429a      	cmp	r2, r3
   1162a:	d841      	bhi.n	116b0 <attsProcFindInfoReq+0x1a8>
          {
            /* copy result */
            UINT16_TO_BSTREAM(p, handle);
   1162c:	9b08      	ldr	r3, [sp, #32]
   1162e:	1c5a      	adds	r2, r3, #1
   11630:	9208      	str	r2, [sp, #32]
   11632:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   11636:	b2d2      	uxtb	r2, r2
   11638:	701a      	strb	r2, [r3, #0]
   1163a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1163e:	0a1b      	lsrs	r3, r3, #8
   11640:	b299      	uxth	r1, r3
   11642:	9b08      	ldr	r3, [sp, #32]
   11644:	1c5a      	adds	r2, r3, #1
   11646:	9208      	str	r2, [sp, #32]
   11648:	b2ca      	uxtb	r2, r1
   1164a:	701a      	strb	r2, [r3, #0]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
   1164c:	9b05      	ldr	r3, [sp, #20]
   1164e:	681a      	ldr	r2, [r3, #0]
   11650:	9b08      	ldr	r3, [sp, #32]
   11652:	1c59      	adds	r1, r3, #1
   11654:	9108      	str	r1, [sp, #32]
   11656:	7812      	ldrb	r2, [r2, #0]
   11658:	701a      	strb	r2, [r3, #0]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   1165a:	9b05      	ldr	r3, [sp, #20]
   1165c:	681b      	ldr	r3, [r3, #0]
   1165e:	1c5a      	adds	r2, r3, #1
   11660:	9b08      	ldr	r3, [sp, #32]
   11662:	1c59      	adds	r1, r3, #1
   11664:	9108      	str	r1, [sp, #32]
   11666:	7812      	ldrb	r2, [r2, #0]
   11668:	701a      	strb	r2, [r3, #0]
            break;
          }
        }

        /* special case of handle at max range */
        if (handle == ATT_HANDLE_MAX)
   1166a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1166e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11672:	4293      	cmp	r3, r2
   11674:	d01e      	beq.n	116b4 <attsProcFindInfoReq+0x1ac>
        {
          break;
        }

        /* try next handle */
        if (++handle > endHandle)
   11676:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1167a:	3301      	adds	r3, #1
   1167c:	f8ad 301e 	strh.w	r3, [sp, #30]
   11680:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   11684:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11688:	429a      	cmp	r2, r3
   1168a:	d815      	bhi.n	116b8 <attsProcFindInfoReq+0x1b0>
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   1168c:	aa05      	add	r2, sp, #20
   1168e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   11692:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   11696:	4618      	mov	r0, r3
   11698:	f7ff fe1e 	bl	112d8 <attsFindInRange>
   1169c:	4603      	mov	r3, r0
   1169e:	f8ad 301e 	strh.w	r3, [sp, #30]
   116a2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   116a6:	2b00      	cmp	r3, #0
   116a8:	d189      	bne.n	115be <attsProcFindInfoReq+0xb6>
   116aa:	e006      	b.n	116ba <attsProcFindInfoReq+0x1b2>
          break;
   116ac:	bf00      	nop
   116ae:	e004      	b.n	116ba <attsProcFindInfoReq+0x1b2>
            break;
   116b0:	bf00      	nop
   116b2:	e002      	b.n	116ba <attsProcFindInfoReq+0x1b2>
          break;
   116b4:	bf00      	nop
   116b6:	e000      	b.n	116ba <attsProcFindInfoReq+0x1b2>
        {
          break;
   116b8:	bf00      	nop
        }
      }

      /* if no results found set error, free buffer */
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   116ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116bc:	330a      	adds	r3, #10
   116be:	9a08      	ldr	r2, [sp, #32]
   116c0:	429a      	cmp	r2, r3
   116c2:	d109      	bne.n	116d8 <attsProcFindInfoReq+0x1d0>
      {
        WsfMsgFree(pBuf);
   116c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   116c6:	f7fb fd6d 	bl	d1a4 <WsfMsgFree>
        err = ATT_ERR_NOT_FOUND;
   116ca:	230a      	movs	r3, #10
   116cc:	f88d 301d 	strb.w	r3, [sp, #29]
   116d0:	e002      	b.n	116d8 <attsProcFindInfoReq+0x1d0>
      }
    }
    else
    {
      /* buffer allocation failed */
      err = ATT_ERR_RESOURCES;
   116d2:	2311      	movs	r3, #17
   116d4:	f88d 301d 	strb.w	r3, [sp, #29]
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   116d8:	9803      	ldr	r0, [sp, #12]
   116da:	f7ff fa3d 	bl	10b58 <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   116de:	f89d 301d 	ldrb.w	r3, [sp, #29]
   116e2:	2b00      	cmp	r3, #0
   116e4:	d10b      	bne.n	116fe <attsProcFindInfoReq+0x1f6>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   116e6:	9b03      	ldr	r3, [sp, #12]
   116e8:	8b19      	ldrh	r1, [r3, #24]
   116ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116ec:	3308      	adds	r3, #8
   116ee:	9a08      	ldr	r2, [sp, #32]
   116f0:	1ad3      	subs	r3, r2, r3
   116f2:	b29a      	uxth	r2, r3
   116f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116f6:	2004      	movs	r0, #4
   116f8:	f7fa ffda 	bl	c6b0 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
  }
}
   116fc:	e008      	b.n	11710 <attsProcFindInfoReq+0x208>
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   116fe:	9b03      	ldr	r3, [sp, #12]
   11700:	8b18      	ldrh	r0, [r3, #24]
   11702:	f89d 301d 	ldrb.w	r3, [sp, #29]
   11706:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1170a:	2104      	movs	r1, #4
   1170c:	f7ff f9c8 	bl	10aa0 <attsErrRsp>
}
   11710:	bf00      	nop
   11712:	b00b      	add	sp, #44	; 0x2c
   11714:	f85d fb04 	ldr.w	pc, [sp], #4

00011718 <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   11718:	b510      	push	{r4, lr}
   1171a:	b08c      	sub	sp, #48	; 0x30
   1171c:	9005      	str	r0, [sp, #20]
   1171e:	460b      	mov	r3, r1
   11720:	9203      	str	r2, [sp, #12]
   11722:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle;
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   11726:	2300      	movs	r3, #0
   11728:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1172c:	9b03      	ldr	r3, [sp, #12]
   1172e:	3309      	adds	r3, #9
   11730:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   11732:	9b03      	ldr	r3, [sp, #12]
   11734:	781b      	ldrb	r3, [r3, #0]
   11736:	b29a      	uxth	r2, r3
   11738:	9b03      	ldr	r3, [sp, #12]
   1173a:	3301      	adds	r3, #1
   1173c:	781b      	ldrb	r3, [r3, #0]
   1173e:	b29b      	uxth	r3, r3
   11740:	021b      	lsls	r3, r3, #8
   11742:	b29b      	uxth	r3, r3
   11744:	4413      	add	r3, r2
   11746:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1174a:	9b03      	ldr	r3, [sp, #12]
   1174c:	3302      	adds	r3, #2
   1174e:	9303      	str	r3, [sp, #12]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   11750:	aa06      	add	r2, sp, #24
   11752:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   11756:	4611      	mov	r1, r2
   11758:	4618      	mov	r0, r3
   1175a:	f7ff fd8f 	bl	1127c <attsFindByHandle>
   1175e:	900a      	str	r0, [sp, #40]	; 0x28
   11760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11762:	2b00      	cmp	r3, #0
   11764:	d074      	beq.n	11850 <attsProcReadReq+0x138>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   11766:	9b05      	ldr	r3, [sp, #20]
   11768:	7f18      	ldrb	r0, [r3, #28]
   1176a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1176c:	7bdb      	ldrb	r3, [r3, #15]
   1176e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   11772:	2101      	movs	r1, #1
   11774:	f7ff fdf2 	bl	1135c <attsPermissions>
   11778:	4603      	mov	r3, r0
   1177a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1177e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   11782:	2b00      	cmp	r3, #0
   11784:	d167      	bne.n	11856 <attsProcReadReq+0x13e>
                               handle, pAttr->permissions)) == ATT_SUCCESS)
    {
      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   11786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11788:	7b9b      	ldrb	r3, [r3, #14]
   1178a:	f003 0304 	and.w	r3, r3, #4
   1178e:	2b00      	cmp	r3, #0
   11790:	d012      	beq.n	117b8 <attsProcReadReq+0xa0>
          (pGroup->readCback != NULL))
   11792:	9b06      	ldr	r3, [sp, #24]
   11794:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   11796:	2b00      	cmp	r3, #0
   11798:	d00e      	beq.n	117b8 <attsProcReadReq+0xa0>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
   1179a:	9b06      	ldr	r3, [sp, #24]
   1179c:	689c      	ldr	r4, [r3, #8]
   1179e:	9b05      	ldr	r3, [sp, #20]
   117a0:	7f18      	ldrb	r0, [r3, #28]
   117a2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   117a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117a8:	9300      	str	r3, [sp, #0]
   117aa:	2300      	movs	r3, #0
   117ac:	220a      	movs	r2, #10
   117ae:	47a0      	blx	r4
   117b0:	4603      	mov	r3, r0
   117b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   117b6:	e016      	b.n	117e6 <attsProcReadReq+0xce>
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   117b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117ba:	7b9b      	ldrb	r3, [r3, #14]
   117bc:	f003 0320 	and.w	r3, r3, #32
   117c0:	2b00      	cmp	r3, #0
   117c2:	d010      	beq.n	117e6 <attsProcReadReq+0xce>
   117c4:	4b2c      	ldr	r3, [pc, #176]	; (11878 <attsProcReadReq+0x160>)
   117c6:	695b      	ldr	r3, [r3, #20]
   117c8:	2b00      	cmp	r3, #0
   117ca:	d00c      	beq.n	117e6 <attsProcReadReq+0xce>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   117cc:	4b2a      	ldr	r3, [pc, #168]	; (11878 <attsProcReadReq+0x160>)
   117ce:	695c      	ldr	r4, [r3, #20]
   117d0:	9b05      	ldr	r3, [sp, #20]
   117d2:	7f18      	ldrb	r0, [r3, #28]
   117d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117d6:	685b      	ldr	r3, [r3, #4]
   117d8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   117dc:	2105      	movs	r1, #5
   117de:	47a0      	blx	r4
   117e0:	4603      	mov	r3, r0
   117e2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      }

      if (err == ATT_SUCCESS)
   117e6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   117ea:	2b00      	cmp	r3, #0
   117ec:	d133      	bne.n	11856 <attsProcReadReq+0x13e>
      {
        /* determine length of data to read */
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   117ee:	9b05      	ldr	r3, [sp, #20]
   117f0:	8b5b      	ldrh	r3, [r3, #26]
   117f2:	3b01      	subs	r3, #1
   117f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   117f6:	6892      	ldr	r2, [r2, #8]
   117f8:	8812      	ldrh	r2, [r2, #0]
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
   117fa:	4293      	cmp	r3, r2
   117fc:	bfa8      	it	ge
   117fe:	4613      	movge	r3, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   11800:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

        /* Allocate response buffer */
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
   11804:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   11808:	3309      	adds	r3, #9
   1180a:	b29b      	uxth	r3, r3
   1180c:	4618      	mov	r0, r3
   1180e:	f001 fc69 	bl	130e4 <attMsgAlloc>
   11812:	9008      	str	r0, [sp, #32]
   11814:	9b08      	ldr	r3, [sp, #32]
   11816:	2b00      	cmp	r3, #0
   11818:	d01d      	beq.n	11856 <attsProcReadReq+0x13e>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   1181a:	9b08      	ldr	r3, [sp, #32]
   1181c:	3308      	adds	r3, #8
   1181e:	9307      	str	r3, [sp, #28]
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
   11820:	9b07      	ldr	r3, [sp, #28]
   11822:	1c5a      	adds	r2, r3, #1
   11824:	9207      	str	r2, [sp, #28]
   11826:	220b      	movs	r2, #11
   11828:	701a      	strb	r2, [r3, #0]
          memcpy(p, pAttr->pValue, readLen);
   1182a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1182c:	685b      	ldr	r3, [r3, #4]
   1182e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   11832:	4619      	mov	r1, r3
   11834:	9807      	ldr	r0, [sp, #28]
   11836:	f7fa fc63 	bl	c100 <memcpy>

          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   1183a:	9b05      	ldr	r3, [sp, #20]
   1183c:	8b19      	ldrh	r1, [r3, #24]
   1183e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   11842:	3301      	adds	r3, #1
   11844:	b29a      	uxth	r2, r3
   11846:	9b08      	ldr	r3, [sp, #32]
   11848:	2004      	movs	r0, #4
   1184a:	f7fa ff31 	bl	c6b0 <L2cDataReq>
   1184e:	e002      	b.n	11856 <attsProcReadReq+0x13e>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   11850:	2301      	movs	r3, #1
   11852:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  }

  if (err)
   11856:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1185a:	2b00      	cmp	r3, #0
   1185c:	d008      	beq.n	11870 <attsProcReadReq+0x158>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   1185e:	9b05      	ldr	r3, [sp, #20]
   11860:	8b18      	ldrh	r0, [r3, #24]
   11862:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   11866:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1186a:	210a      	movs	r1, #10
   1186c:	f7ff f918 	bl	10aa0 <attsErrRsp>
  }
}
   11870:	bf00      	nop
   11872:	b00c      	add	sp, #48	; 0x30
   11874:	bd10      	pop	{r4, pc}
   11876:	bf00      	nop
   11878:	10008a80 	.word	0x10008a80

0001187c <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
   1187c:	b500      	push	{lr}
   1187e:	b087      	sub	sp, #28
   11880:	9301      	str	r3, [sp, #4]
   11882:	4603      	mov	r3, r0
   11884:	f8ad 300e 	strh.w	r3, [sp, #14]
   11888:	460b      	mov	r3, r1
   1188a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1188e:	4613      	mov	r3, r2
   11890:	f88d 300b 	strb.w	r3, [sp, #11]
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   11894:	4b33      	ldr	r3, [pc, #204]	; (11964 <attsFindUuidInRange+0xe8>)
   11896:	681b      	ldr	r3, [r3, #0]
   11898:	9305      	str	r3, [sp, #20]
   1189a:	e05a      	b.n	11952 <attsFindUuidInRange+0xd6>
  {
    /* if start handle is less than group start handle but handle range is within group */
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   1189c:	9b05      	ldr	r3, [sp, #20]
   1189e:	8a1b      	ldrh	r3, [r3, #16]
   118a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   118a4:	429a      	cmp	r2, r3
   118a6:	d209      	bcs.n	118bc <attsFindUuidInRange+0x40>
   118a8:	9b05      	ldr	r3, [sp, #20]
   118aa:	8a1b      	ldrh	r3, [r3, #16]
   118ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   118b0:	429a      	cmp	r2, r3
   118b2:	d303      	bcc.n	118bc <attsFindUuidInRange+0x40>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   118b4:	9b05      	ldr	r3, [sp, #20]
   118b6:	8a1b      	ldrh	r3, [r3, #16]
   118b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    /*  if start handle within handle range of group */
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   118bc:	9b05      	ldr	r3, [sp, #20]
   118be:	8a1b      	ldrh	r3, [r3, #16]
   118c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   118c4:	429a      	cmp	r2, r3
   118c6:	d341      	bcc.n	1194c <attsFindUuidInRange+0xd0>
   118c8:	9b05      	ldr	r3, [sp, #20]
   118ca:	8a5b      	ldrh	r3, [r3, #18]
   118cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   118d0:	429a      	cmp	r2, r3
   118d2:	d83b      	bhi.n	1194c <attsFindUuidInRange+0xd0>
    {
      /* compare uuid with each attribute in group */
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   118d4:	9b05      	ldr	r3, [sp, #20]
   118d6:	685a      	ldr	r2, [r3, #4]
   118d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   118dc:	9905      	ldr	r1, [sp, #20]
   118de:	8a09      	ldrh	r1, [r1, #16]
   118e0:	1a5b      	subs	r3, r3, r1
   118e2:	011b      	lsls	r3, r3, #4
   118e4:	441a      	add	r2, r3
   118e6:	9b08      	ldr	r3, [sp, #32]
   118e8:	601a      	str	r2, [r3, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   118ea:	e021      	b.n	11930 <attsFindUuidInRange+0xb4>
      {
        /* compare uuid in attribute */
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   118ec:	9b08      	ldr	r3, [sp, #32]
   118ee:	681b      	ldr	r3, [r3, #0]
   118f0:	f89d 100b 	ldrb.w	r1, [sp, #11]
   118f4:	9a01      	ldr	r2, [sp, #4]
   118f6:	4618      	mov	r0, r3
   118f8:	f7ff fc52 	bl	111a0 <attsUuidCmp>
   118fc:	4603      	mov	r3, r0
   118fe:	2b00      	cmp	r3, #0
   11900:	d005      	beq.n	1190e <attsFindUuidInRange+0x92>
        {
          *pAttrGroup = pGroup;
   11902:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11904:	9a05      	ldr	r2, [sp, #20]
   11906:	601a      	str	r2, [r3, #0]
          return startHandle;
   11908:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1190c:	e025      	b.n	1195a <attsFindUuidInRange+0xde>
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   1190e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11912:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11916:	4293      	cmp	r3, r2
   11918:	d017      	beq.n	1194a <attsFindUuidInRange+0xce>
        {
          break;
        }

        startHandle++;
   1191a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1191e:	3301      	adds	r3, #1
   11920:	f8ad 300e 	strh.w	r3, [sp, #14]
        (*pAttr)++;
   11924:	9b08      	ldr	r3, [sp, #32]
   11926:	681b      	ldr	r3, [r3, #0]
   11928:	f103 0210 	add.w	r2, r3, #16
   1192c:	9b08      	ldr	r3, [sp, #32]
   1192e:	601a      	str	r2, [r3, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   11930:	9b05      	ldr	r3, [sp, #20]
   11932:	8a5b      	ldrh	r3, [r3, #18]
   11934:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11938:	429a      	cmp	r2, r3
   1193a:	d807      	bhi.n	1194c <attsFindUuidInRange+0xd0>
   1193c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11940:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11944:	429a      	cmp	r2, r3
   11946:	d9d1      	bls.n	118ec <attsFindUuidInRange+0x70>
   11948:	e000      	b.n	1194c <attsFindUuidInRange+0xd0>
          break;
   1194a:	bf00      	nop
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1194c:	9b05      	ldr	r3, [sp, #20]
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	9305      	str	r3, [sp, #20]
   11952:	9b05      	ldr	r3, [sp, #20]
   11954:	2b00      	cmp	r3, #0
   11956:	d1a1      	bne.n	1189c <attsFindUuidInRange+0x20>
      }
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
   11958:	2300      	movs	r3, #0
}
   1195a:	4618      	mov	r0, r3
   1195c:	b007      	add	sp, #28
   1195e:	f85d fb04 	ldr.w	pc, [sp], #4
   11962:	bf00      	nop
   11964:	10008a80 	.word	0x10008a80

00011968 <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
   11968:	b500      	push	{lr}
   1196a:	b087      	sub	sp, #28
   1196c:	4603      	mov	r3, r0
   1196e:	f8ad 3006 	strh.w	r3, [sp, #6]
  attsGroup_t   *pGroup;
  attsAttr_t    *pAttr;
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   11972:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11976:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   1197a:	f642 0301 	movw	r3, #10241	; 0x2801
   1197e:	f8ad 3008 	strh.w	r3, [sp, #8]

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
   11982:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11986:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1198a:	4293      	cmp	r3, r2
   1198c:	d102      	bne.n	11994 <attsFindServiceGroupEnd+0x2c>
  {
    return ATT_HANDLE_MAX;
   1198e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11992:	e05f      	b.n	11a54 <attsFindServiceGroupEnd+0xec>
  }

  prevHandle = startHandle;
   11994:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11998:	f8ad 300e 	strh.w	r3, [sp, #14]
  startHandle++;
   1199c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   119a0:	3301      	adds	r3, #1
   119a2:	f8ad 3006 	strh.w	r3, [sp, #6]

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   119a6:	4b2d      	ldr	r3, [pc, #180]	; (11a5c <attsFindServiceGroupEnd+0xf4>)
   119a8:	681b      	ldr	r3, [r3, #0]
   119aa:	9305      	str	r3, [sp, #20]
   119ac:	e04d      	b.n	11a4a <attsFindServiceGroupEnd+0xe2>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
   119ae:	9b05      	ldr	r3, [sp, #20]
   119b0:	8a1b      	ldrh	r3, [r3, #16]
   119b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   119b6:	429a      	cmp	r2, r3
   119b8:	d203      	bcs.n	119c2 <attsFindServiceGroupEnd+0x5a>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   119ba:	9b05      	ldr	r3, [sp, #20]
   119bc:	8a1b      	ldrh	r3, [r3, #16]
   119be:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
   119c2:	9b05      	ldr	r3, [sp, #20]
   119c4:	8a5b      	ldrh	r3, [r3, #18]
   119c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   119ca:	429a      	cmp	r2, r3
   119cc:	d83a      	bhi.n	11a44 <attsFindServiceGroupEnd+0xdc>
    {
      /* compare uuid with each attribute in group */
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   119ce:	9b05      	ldr	r3, [sp, #20]
   119d0:	685a      	ldr	r2, [r3, #4]
   119d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   119d6:	9905      	ldr	r1, [sp, #20]
   119d8:	8a09      	ldrh	r1, [r1, #16]
   119da:	1a5b      	subs	r3, r3, r1
   119dc:	011b      	lsls	r3, r3, #4
   119de:	4413      	add	r3, r2
   119e0:	9304      	str	r3, [sp, #16]
      while (startHandle <= pGroup->endHandle)
   119e2:	e029      	b.n	11a38 <attsFindServiceGroupEnd+0xd0>
      {
        /* compare uuid in attribute to service uuids */
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   119e4:	ab03      	add	r3, sp, #12
   119e6:	461a      	mov	r2, r3
   119e8:	2102      	movs	r1, #2
   119ea:	9804      	ldr	r0, [sp, #16]
   119ec:	f7ff fbd8 	bl	111a0 <attsUuidCmp>
   119f0:	4603      	mov	r3, r0
   119f2:	2b00      	cmp	r3, #0
   119f4:	d108      	bne.n	11a08 <attsFindServiceGroupEnd+0xa0>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   119f6:	ab02      	add	r3, sp, #8
   119f8:	461a      	mov	r2, r3
   119fa:	2102      	movs	r1, #2
   119fc:	9804      	ldr	r0, [sp, #16]
   119fe:	f7ff fbcf 	bl	111a0 <attsUuidCmp>
   11a02:	4603      	mov	r3, r0
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   11a04:	2b00      	cmp	r3, #0
   11a06:	d002      	beq.n	11a0e <attsFindServiceGroupEnd+0xa6>
        {
          /* found next service; return handle of previous attribute */
          return prevHandle;
   11a08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11a0c:	e022      	b.n	11a54 <attsFindServiceGroupEnd+0xec>
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   11a0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11a16:	4293      	cmp	r3, r2
   11a18:	d102      	bne.n	11a20 <attsFindServiceGroupEnd+0xb8>
        {
          return ATT_HANDLE_MAX;
   11a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a1e:	e019      	b.n	11a54 <attsFindServiceGroupEnd+0xec>
        }

        prevHandle = startHandle;
   11a20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a24:	f8ad 300e 	strh.w	r3, [sp, #14]
        startHandle++;
   11a28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a2c:	3301      	adds	r3, #1
   11a2e:	f8ad 3006 	strh.w	r3, [sp, #6]
        pAttr++;
   11a32:	9b04      	ldr	r3, [sp, #16]
   11a34:	3310      	adds	r3, #16
   11a36:	9304      	str	r3, [sp, #16]
      while (startHandle <= pGroup->endHandle)
   11a38:	9b05      	ldr	r3, [sp, #20]
   11a3a:	8a5b      	ldrh	r3, [r3, #18]
   11a3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11a40:	429a      	cmp	r2, r3
   11a42:	d9cf      	bls.n	119e4 <attsFindServiceGroupEnd+0x7c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   11a44:	9b05      	ldr	r3, [sp, #20]
   11a46:	681b      	ldr	r3, [r3, #0]
   11a48:	9305      	str	r3, [sp, #20]
   11a4a:	9b05      	ldr	r3, [sp, #20]
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	d1ae      	bne.n	119ae <attsFindServiceGroupEnd+0x46>
      }
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
   11a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   11a54:	4618      	mov	r0, r3
   11a56:	b007      	add	sp, #28
   11a58:	f85d fb04 	ldr.w	pc, [sp], #4
   11a5c:	10008a80 	.word	0x10008a80

00011a60 <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   11a60:	b510      	push	{r4, lr}
   11a62:	b08e      	sub	sp, #56	; 0x38
   11a64:	9005      	str	r0, [sp, #20]
   11a66:	460b      	mov	r3, r1
   11a68:	9203      	str	r2, [sp, #12]
   11a6a:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle;
  uint16_t    offset;
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   11a6e:	2300      	movs	r3, #0
   11a70:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   11a74:	9b03      	ldr	r3, [sp, #12]
   11a76:	3309      	adds	r3, #9
   11a78:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   11a7a:	9b03      	ldr	r3, [sp, #12]
   11a7c:	781b      	ldrb	r3, [r3, #0]
   11a7e:	b29a      	uxth	r2, r3
   11a80:	9b03      	ldr	r3, [sp, #12]
   11a82:	3301      	adds	r3, #1
   11a84:	781b      	ldrb	r3, [r3, #0]
   11a86:	b29b      	uxth	r3, r3
   11a88:	021b      	lsls	r3, r3, #8
   11a8a:	b29b      	uxth	r3, r3
   11a8c:	4413      	add	r3, r2
   11a8e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   11a92:	9b03      	ldr	r3, [sp, #12]
   11a94:	3302      	adds	r3, #2
   11a96:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(offset, pPacket);
   11a98:	9b03      	ldr	r3, [sp, #12]
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	b29a      	uxth	r2, r3
   11a9e:	9b03      	ldr	r3, [sp, #12]
   11aa0:	3301      	adds	r3, #1
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	b29b      	uxth	r3, r3
   11aa6:	021b      	lsls	r3, r3, #8
   11aa8:	b29b      	uxth	r3, r3
   11aaa:	4413      	add	r3, r2
   11aac:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   11ab0:	9b03      	ldr	r3, [sp, #12]
   11ab2:	3302      	adds	r3, #2
   11ab4:	9303      	str	r3, [sp, #12]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   11ab6:	aa07      	add	r2, sp, #28
   11ab8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   11abc:	4611      	mov	r1, r2
   11abe:	4618      	mov	r0, r3
   11ac0:	f7ff fbdc 	bl	1127c <attsFindByHandle>
   11ac4:	900b      	str	r0, [sp, #44]	; 0x2c
   11ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ac8:	2b00      	cmp	r3, #0
   11aca:	f000 8089 	beq.w	11be0 <attsProcReadBlobReq+0x180>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   11ace:	9b05      	ldr	r3, [sp, #20]
   11ad0:	7f18      	ldrb	r0, [r3, #28]
   11ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ad4:	7bdb      	ldrb	r3, [r3, #15]
   11ad6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   11ada:	2101      	movs	r1, #1
   11adc:	f7ff fc3e 	bl	1135c <attsPermissions>
   11ae0:	4603      	mov	r3, r0
   11ae2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   11ae6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   11aea:	2b00      	cmp	r3, #0
   11aec:	d17b      	bne.n	11be6 <attsProcReadBlobReq+0x186>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
    {
      /* err has been set; fail */
    }
    /* verify offset */
    else if (offset > *pAttr->pLen)
   11aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11af0:	689b      	ldr	r3, [r3, #8]
   11af2:	881b      	ldrh	r3, [r3, #0]
   11af4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   11af8:	429a      	cmp	r2, r3
   11afa:	d903      	bls.n	11b04 <attsProcReadBlobReq+0xa4>
    {
      err = ATT_ERR_OFFSET;
   11afc:	2307      	movs	r3, #7
   11afe:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   11b02:	e070      	b.n	11be6 <attsProcReadBlobReq+0x186>
    }
    else
    {
      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   11b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b06:	7b9b      	ldrb	r3, [r3, #14]
   11b08:	f003 0304 	and.w	r3, r3, #4
   11b0c:	2b00      	cmp	r3, #0
   11b0e:	d014      	beq.n	11b3a <attsProcReadBlobReq+0xda>
          (pGroup->readCback != NULL))
   11b10:	9b07      	ldr	r3, [sp, #28]
   11b12:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   11b14:	2b00      	cmp	r3, #0
   11b16:	d010      	beq.n	11b3a <attsProcReadBlobReq+0xda>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
   11b18:	9b07      	ldr	r3, [sp, #28]
   11b1a:	689c      	ldr	r4, [r3, #8]
   11b1c:	9b05      	ldr	r3, [sp, #20]
   11b1e:	7f18      	ldrb	r0, [r3, #28]
   11b20:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   11b24:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   11b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b2a:	9300      	str	r3, [sp, #0]
   11b2c:	4613      	mov	r3, r2
   11b2e:	220c      	movs	r2, #12
   11b30:	47a0      	blx	r4
   11b32:	4603      	mov	r3, r0
   11b34:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   11b38:	e016      	b.n	11b68 <attsProcReadBlobReq+0x108>
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   11b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b3c:	7b9b      	ldrb	r3, [r3, #14]
   11b3e:	f003 0320 	and.w	r3, r3, #32
   11b42:	2b00      	cmp	r3, #0
   11b44:	d010      	beq.n	11b68 <attsProcReadBlobReq+0x108>
   11b46:	4b30      	ldr	r3, [pc, #192]	; (11c08 <attsProcReadBlobReq+0x1a8>)
   11b48:	695b      	ldr	r3, [r3, #20]
   11b4a:	2b00      	cmp	r3, #0
   11b4c:	d00c      	beq.n	11b68 <attsProcReadBlobReq+0x108>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   11b4e:	4b2e      	ldr	r3, [pc, #184]	; (11c08 <attsProcReadBlobReq+0x1a8>)
   11b50:	695c      	ldr	r4, [r3, #20]
   11b52:	9b05      	ldr	r3, [sp, #20]
   11b54:	7f18      	ldrb	r0, [r3, #28]
   11b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b58:	685b      	ldr	r3, [r3, #4]
   11b5a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   11b5e:	2105      	movs	r1, #5
   11b60:	47a0      	blx	r4
   11b62:	4603      	mov	r3, r0
   11b64:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      }

      if (err == ATT_SUCCESS)
   11b68:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d13a      	bne.n	11be6 <attsProcReadBlobReq+0x186>
      {
        /* determine length of data to read */
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   11b70:	9b05      	ldr	r3, [sp, #20]
   11b72:	8b5b      	ldrh	r3, [r3, #26]
   11b74:	1e5a      	subs	r2, r3, #1
   11b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b78:	689b      	ldr	r3, [r3, #8]
   11b7a:	881b      	ldrh	r3, [r3, #0]
   11b7c:	4619      	mov	r1, r3
   11b7e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11b82:	1acb      	subs	r3, r1, r3
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
   11b84:	4293      	cmp	r3, r2
   11b86:	bfa8      	it	ge
   11b88:	4613      	movge	r3, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   11b8a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

        /* Allocate response buffer */
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
   11b8e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   11b92:	3309      	adds	r3, #9
   11b94:	b29b      	uxth	r3, r3
   11b96:	4618      	mov	r0, r3
   11b98:	f001 faa4 	bl	130e4 <attMsgAlloc>
   11b9c:	9009      	str	r0, [sp, #36]	; 0x24
   11b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ba0:	2b00      	cmp	r3, #0
   11ba2:	d020      	beq.n	11be6 <attsProcReadBlobReq+0x186>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   11ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ba6:	3308      	adds	r3, #8
   11ba8:	9308      	str	r3, [sp, #32]
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
   11baa:	9b08      	ldr	r3, [sp, #32]
   11bac:	1c5a      	adds	r2, r3, #1
   11bae:	9208      	str	r2, [sp, #32]
   11bb0:	220d      	movs	r2, #13
   11bb2:	701a      	strb	r2, [r3, #0]
          memcpy(p, (pAttr->pValue + offset), readLen);
   11bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11bb6:	685a      	ldr	r2, [r3, #4]
   11bb8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11bbc:	4413      	add	r3, r2
   11bbe:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   11bc2:	4619      	mov	r1, r3
   11bc4:	9808      	ldr	r0, [sp, #32]
   11bc6:	f7fa fa9b 	bl	c100 <memcpy>

          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
   11bca:	9b05      	ldr	r3, [sp, #20]
   11bcc:	8b19      	ldrh	r1, [r3, #24]
   11bce:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   11bd2:	3301      	adds	r3, #1
   11bd4:	b29a      	uxth	r2, r3
   11bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bd8:	2004      	movs	r0, #4
   11bda:	f7fa fd69 	bl	c6b0 <L2cDataReq>
   11bde:	e002      	b.n	11be6 <attsProcReadBlobReq+0x186>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   11be0:	2301      	movs	r3, #1
   11be2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  }

  if (err)
   11be6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   11bea:	2b00      	cmp	r3, #0
   11bec:	d008      	beq.n	11c00 <attsProcReadBlobReq+0x1a0>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
   11bee:	9b05      	ldr	r3, [sp, #20]
   11bf0:	8b18      	ldrh	r0, [r3, #24]
   11bf2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   11bf6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   11bfa:	210c      	movs	r1, #12
   11bfc:	f7fe ff50 	bl	10aa0 <attsErrRsp>
  }
}
   11c00:	bf00      	nop
   11c02:	b00e      	add	sp, #56	; 0x38
   11c04:	bd10      	pop	{r4, pc}
   11c06:	bf00      	nop
   11c08:	10008a80 	.word	0x10008a80

00011c0c <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   11c0c:	b500      	push	{lr}
   11c0e:	b08f      	sub	sp, #60	; 0x3c
   11c10:	9005      	str	r0, [sp, #20]
   11c12:	460b      	mov	r3, r1
   11c14:	9203      	str	r2, [sp, #12]
   11c16:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsGroup_t *pGroup;
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;
   11c1a:	2300      	movs	r3, #0
   11c1c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   11c20:	9b03      	ldr	r3, [sp, #12]
   11c22:	3309      	adds	r3, #9
   11c24:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   11c26:	9b03      	ldr	r3, [sp, #12]
   11c28:	781b      	ldrb	r3, [r3, #0]
   11c2a:	b29a      	uxth	r2, r3
   11c2c:	9b03      	ldr	r3, [sp, #12]
   11c2e:	3301      	adds	r3, #1
   11c30:	781b      	ldrb	r3, [r3, #0]
   11c32:	b29b      	uxth	r3, r3
   11c34:	021b      	lsls	r3, r3, #8
   11c36:	b29b      	uxth	r3, r3
   11c38:	4413      	add	r3, r2
   11c3a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   11c3e:	9b03      	ldr	r3, [sp, #12]
   11c40:	3302      	adds	r3, #2
   11c42:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   11c44:	9b03      	ldr	r3, [sp, #12]
   11c46:	781b      	ldrb	r3, [r3, #0]
   11c48:	b29a      	uxth	r2, r3
   11c4a:	9b03      	ldr	r3, [sp, #12]
   11c4c:	3301      	adds	r3, #1
   11c4e:	781b      	ldrb	r3, [r3, #0]
   11c50:	b29b      	uxth	r3, r3
   11c52:	021b      	lsls	r3, r3, #8
   11c54:	b29b      	uxth	r3, r3
   11c56:	4413      	add	r3, r2
   11c58:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   11c5c:	9b03      	ldr	r3, [sp, #12]
   11c5e:	3302      	adds	r3, #2
   11c60:	9303      	str	r3, [sp, #12]
  pUuid = pPacket;
   11c62:	9b03      	ldr	r3, [sp, #12]
   11c64:	9308      	str	r3, [sp, #32]
  pPacket += ATT_16_UUID_LEN;
   11c66:	9b03      	ldr	r3, [sp, #12]
   11c68:	3302      	adds	r3, #2
   11c6a:	9303      	str	r3, [sp, #12]

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;
   11c6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11c70:	3b07      	subs	r3, #7
   11c72:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   11c76:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11c7a:	2b00      	cmp	r3, #0
   11c7c:	d005      	beq.n	11c8a <attsProcFindTypeReq+0x7e>
   11c7e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   11c82:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   11c86:	429a      	cmp	r2, r3
   11c88:	d902      	bls.n	11c90 <attsProcFindTypeReq+0x84>
  {
    err = ATT_ERR_HANDLE;
   11c8a:	2301      	movs	r3, #1
   11c8c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  }

  if (!err)
   11c90:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   11c94:	2b00      	cmp	r3, #0
   11c96:	f040 80af 	bne.w	11df8 <attsProcFindTypeReq+0x1ec>
  {
    /* allocate max size buffer for response */
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   11c9a:	9b05      	ldr	r3, [sp, #20]
   11c9c:	8b5b      	ldrh	r3, [r3, #26]
   11c9e:	3308      	adds	r3, #8
   11ca0:	b29b      	uxth	r3, r3
   11ca2:	4618      	mov	r0, r3
   11ca4:	f001 fa1e 	bl	130e4 <attMsgAlloc>
   11ca8:	900d      	str	r0, [sp, #52]	; 0x34
   11caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11cac:	2b00      	cmp	r3, #0
   11cae:	f000 80a0 	beq.w	11df2 <attsProcFindTypeReq+0x1e6>
    {
      p = pBuf + L2C_PAYLOAD_START;
   11cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11cb4:	3308      	adds	r3, #8
   11cb6:	930c      	str	r3, [sp, #48]	; 0x30
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   11cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11cba:	1c5a      	adds	r2, r3, #1
   11cbc:	920c      	str	r2, [sp, #48]	; 0x30
   11cbe:	2207      	movs	r2, #7
   11cc0:	701a      	strb	r2, [r3, #0]

      /* find attributes with matching uuid within handle range */
      handle = startHandle;
   11cc2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11cc6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   11cca:	e070      	b.n	11dae <attsProcFindTypeReq+0x1a2>
                                           pUuid, &pAttr, &pGroup)) != ATT_HANDLE_NONE)
      {
        /* if value and length matches */
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
   11ccc:	9b07      	ldr	r3, [sp, #28]
   11cce:	7bdb      	ldrb	r3, [r3, #15]
   11cd0:	f003 0301 	and.w	r3, r3, #1
   11cd4:	2b00      	cmp	r3, #0
   11cd6:	d055      	beq.n	11d84 <attsProcFindTypeReq+0x178>
   11cd8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d011      	beq.n	11d04 <attsProcFindTypeReq+0xf8>
            ((len == 0) ||
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   11ce0:	9b07      	ldr	r3, [sp, #28]
   11ce2:	689b      	ldr	r3, [r3, #8]
   11ce4:	881b      	ldrh	r3, [r3, #0]
            ((len == 0) ||
   11ce6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   11cea:	429a      	cmp	r2, r3
   11cec:	d14a      	bne.n	11d84 <attsProcFindTypeReq+0x178>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   11cee:	9b07      	ldr	r3, [sp, #28]
   11cf0:	685b      	ldr	r3, [r3, #4]
   11cf2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   11cf6:	4619      	mov	r1, r3
   11cf8:	9803      	ldr	r0, [sp, #12]
   11cfa:	f016 fb6f 	bl	283dc <memcmp>
   11cfe:	4603      	mov	r3, r0
   11d00:	2b00      	cmp	r3, #0
   11d02:	d13f      	bne.n	11d84 <attsProcFindTypeReq+0x178>
        {
          /* if uuid in request is for primary service */
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   11d04:	9b08      	ldr	r3, [sp, #32]
   11d06:	781b      	ldrb	r3, [r3, #0]
   11d08:	2b00      	cmp	r3, #0
   11d0a:	d10d      	bne.n	11d28 <attsProcFindTypeReq+0x11c>
              pUuid[1] == UINT16_TO_BYTE1(ATT_UUID_PRIMARY_SERVICE))
   11d0c:	9b08      	ldr	r3, [sp, #32]
   11d0e:	3301      	adds	r3, #1
   11d10:	781b      	ldrb	r3, [r3, #0]
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   11d12:	2b28      	cmp	r3, #40	; 0x28
   11d14:	d108      	bne.n	11d28 <attsProcFindTypeReq+0x11c>
          {
            /* next handle is service group end handle */
            nextHandle = attsFindServiceGroupEnd(handle);
   11d16:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   11d1a:	4618      	mov	r0, r3
   11d1c:	f7ff fe24 	bl	11968 <attsFindServiceGroupEnd>
   11d20:	4603      	mov	r3, r0
   11d22:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   11d26:	e003      	b.n	11d30 <attsProcFindTypeReq+0x124>
          }
          else
          {
            /* for any other uuid next handle is same as found handle */
            nextHandle = handle;
   11d28:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   11d2c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
          }

          /* copy result into response buffer; first check if it fits */
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   11d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d32:	1d1a      	adds	r2, r3, #4
   11d34:	9b05      	ldr	r3, [sp, #20]
   11d36:	8b5b      	ldrh	r3, [r3, #26]
   11d38:	3308      	adds	r3, #8
   11d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
   11d3c:	440b      	add	r3, r1
   11d3e:	429a      	cmp	r2, r3
   11d40:	d84a      	bhi.n	11dd8 <attsProcFindTypeReq+0x1cc>
          {
            UINT16_TO_BSTREAM(p, handle);
   11d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d44:	1c5a      	adds	r2, r3, #1
   11d46:	920c      	str	r2, [sp, #48]	; 0x30
   11d48:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   11d4c:	b2d2      	uxtb	r2, r2
   11d4e:	701a      	strb	r2, [r3, #0]
   11d50:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   11d54:	0a1b      	lsrs	r3, r3, #8
   11d56:	b299      	uxth	r1, r3
   11d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d5a:	1c5a      	adds	r2, r3, #1
   11d5c:	920c      	str	r2, [sp, #48]	; 0x30
   11d5e:	b2ca      	uxtb	r2, r1
   11d60:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(p, nextHandle);
   11d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d64:	1c5a      	adds	r2, r3, #1
   11d66:	920c      	str	r2, [sp, #48]	; 0x30
   11d68:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   11d6c:	b2d2      	uxtb	r2, r2
   11d6e:	701a      	strb	r2, [r3, #0]
   11d70:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   11d74:	0a1b      	lsrs	r3, r3, #8
   11d76:	b299      	uxth	r1, r3
   11d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d7a:	1c5a      	adds	r2, r3, #1
   11d7c:	920c      	str	r2, [sp, #48]	; 0x30
   11d7e:	b2ca      	uxtb	r2, r1
   11d80:	701a      	strb	r2, [r3, #0]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   11d82:	e003      	b.n	11d8c <attsProcFindTypeReq+0x180>
          }
        }
        /* value doesn't match; still need to set next handle */
        else
        {
          nextHandle = handle;
   11d84:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   11d88:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        }

        /* check if handle has reached end */
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
   11d8c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   11d90:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   11d94:	429a      	cmp	r2, r3
   11d96:	d220      	bcs.n	11dda <attsProcFindTypeReq+0x1ce>
   11d98:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   11d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11da0:	4293      	cmp	r3, r2
   11da2:	d01a      	beq.n	11dda <attsProcFindTypeReq+0x1ce>
        {
          break;
        }

        /* try next handle */
        handle = nextHandle + 1;
   11da4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   11da8:	3301      	adds	r3, #1
   11daa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   11dae:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   11db2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   11db6:	ab06      	add	r3, sp, #24
   11db8:	9301      	str	r3, [sp, #4]
   11dba:	ab07      	add	r3, sp, #28
   11dbc:	9300      	str	r3, [sp, #0]
   11dbe:	9b08      	ldr	r3, [sp, #32]
   11dc0:	2202      	movs	r2, #2
   11dc2:	f7ff fd5b 	bl	1187c <attsFindUuidInRange>
   11dc6:	4603      	mov	r3, r0
   11dc8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11dcc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	f47f af7b 	bne.w	11ccc <attsProcFindTypeReq+0xc0>
   11dd6:	e000      	b.n	11dda <attsProcFindTypeReq+0x1ce>
            break;
   11dd8:	bf00      	nop
      }

      /* if no results found set error, free buffer */
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
   11dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11ddc:	3309      	adds	r3, #9
   11dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11de0:	429a      	cmp	r2, r3
   11de2:	d109      	bne.n	11df8 <attsProcFindTypeReq+0x1ec>
      {
        WsfMsgFree(pBuf);
   11de4:	980d      	ldr	r0, [sp, #52]	; 0x34
   11de6:	f7fb f9dd 	bl	d1a4 <WsfMsgFree>
        err = ATT_ERR_NOT_FOUND;
   11dea:	230a      	movs	r3, #10
   11dec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   11df0:	e002      	b.n	11df8 <attsProcFindTypeReq+0x1ec>
      }
    }
    else
    {
      /* buffer allocation failed */
      err = ATT_ERR_RESOURCES;
   11df2:	2311      	movs	r3, #17
   11df4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   11df8:	9805      	ldr	r0, [sp, #20]
   11dfa:	f7fe fead 	bl	10b58 <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   11dfe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   11e02:	2b00      	cmp	r3, #0
   11e04:	d10b      	bne.n	11e1e <attsProcFindTypeReq+0x212>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   11e06:	9b05      	ldr	r3, [sp, #20]
   11e08:	8b19      	ldrh	r1, [r3, #24]
   11e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11e0c:	3308      	adds	r3, #8
   11e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11e10:	1ad3      	subs	r3, r2, r3
   11e12:	b29a      	uxth	r2, r3
   11e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11e16:	2004      	movs	r0, #4
   11e18:	f7fa fc4a 	bl	c6b0 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
  }
}
   11e1c:	e008      	b.n	11e30 <attsProcFindTypeReq+0x224>
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   11e1e:	9b05      	ldr	r3, [sp, #20]
   11e20:	8b18      	ldrh	r0, [r3, #24]
   11e22:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   11e26:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   11e2a:	2106      	movs	r1, #6
   11e2c:	f7fe fe38 	bl	10aa0 <attsErrRsp>
}
   11e30:	bf00      	nop
   11e32:	b00f      	add	sp, #60	; 0x3c
   11e34:	f85d fb04 	ldr.w	pc, [sp], #4

00011e38 <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   11e38:	b510      	push	{r4, lr}
   11e3a:	b08e      	sub	sp, #56	; 0x38
   11e3c:	9005      	str	r0, [sp, #20]
   11e3e:	460b      	mov	r3, r1
   11e40:	9203      	str	r2, [sp, #12]
   11e42:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     cbackErr = ATT_SUCCESS;
   11e46:	2300      	movs	r3, #0
   11e48:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  uint8_t     err = ATT_SUCCESS;
   11e4c:	2300      	movs	r3, #0
   11e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   11e52:	9b03      	ldr	r3, [sp, #12]
   11e54:	3309      	adds	r3, #9
   11e56:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   11e58:	9b03      	ldr	r3, [sp, #12]
   11e5a:	781b      	ldrb	r3, [r3, #0]
   11e5c:	b29a      	uxth	r2, r3
   11e5e:	9b03      	ldr	r3, [sp, #12]
   11e60:	3301      	adds	r3, #1
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	b29b      	uxth	r3, r3
   11e66:	021b      	lsls	r3, r3, #8
   11e68:	b29b      	uxth	r3, r3
   11e6a:	4413      	add	r3, r2
   11e6c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11e70:	9b03      	ldr	r3, [sp, #12]
   11e72:	3302      	adds	r3, #2
   11e74:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   11e76:	9b03      	ldr	r3, [sp, #12]
   11e78:	781b      	ldrb	r3, [r3, #0]
   11e7a:	b29a      	uxth	r2, r3
   11e7c:	9b03      	ldr	r3, [sp, #12]
   11e7e:	3301      	adds	r3, #1
   11e80:	781b      	ldrb	r3, [r3, #0]
   11e82:	b29b      	uxth	r3, r3
   11e84:	021b      	lsls	r3, r3, #8
   11e86:	b29b      	uxth	r3, r3
   11e88:	4413      	add	r3, r2
   11e8a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   11e8e:	9b03      	ldr	r3, [sp, #12]
   11e90:	3302      	adds	r3, #2
   11e92:	9303      	str	r3, [sp, #12]

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   11e94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11e98:	b2db      	uxtb	r3, r3
   11e9a:	3b05      	subs	r3, #5
   11e9c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   11ea0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11ea4:	2b02      	cmp	r3, #2
   11ea6:	d007      	beq.n	11eb8 <attsProcReadTypeReq+0x80>
   11ea8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11eac:	2b10      	cmp	r3, #16
   11eae:	d003      	beq.n	11eb8 <attsProcReadTypeReq+0x80>
  {
    err = ATT_ERR_INVALID_PDU;
   11eb0:	2304      	movs	r3, #4
   11eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   11eb6:	e00c      	b.n	11ed2 <attsProcReadTypeReq+0x9a>
  }
  /* verify handles */
  else if ((startHandle == 0) || (startHandle > endHandle))
   11eb8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   11ebc:	2b00      	cmp	r3, #0
   11ebe:	d005      	beq.n	11ecc <attsProcReadTypeReq+0x94>
   11ec0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   11ec4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11ec8:	429a      	cmp	r2, r3
   11eca:	d902      	bls.n	11ed2 <attsProcReadTypeReq+0x9a>
  {
    err = ATT_ERR_HANDLE;
   11ecc:	2301      	movs	r3, #1
   11ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  }

  if (!err)
   11ed2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	f040 8177 	bne.w	121ca <attsProcReadTypeReq+0x392>
  {
    /* find first attribute with matching uuid within handle range */
    handle = attsFindUuidInRange(startHandle, endHandle, uuidLen, pPacket, &pAttr, &pGroup);
   11edc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   11ee0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   11ee4:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   11ee8:	ab07      	add	r3, sp, #28
   11eea:	9301      	str	r3, [sp, #4]
   11eec:	ab08      	add	r3, sp, #32
   11eee:	9300      	str	r3, [sp, #0]
   11ef0:	9b03      	ldr	r3, [sp, #12]
   11ef2:	f7ff fcc3 	bl	1187c <attsFindUuidInRange>
   11ef6:	4603      	mov	r3, r0
   11ef8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    startHandle = handle;
   11efc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   11f00:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

    if (handle == ATT_HANDLE_NONE)
   11f04:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   11f08:	2b00      	cmp	r3, #0
   11f0a:	d103      	bne.n	11f14 <attsProcReadTypeReq+0xdc>
    {
      err = ATT_ERR_NOT_FOUND;
   11f0c:	230a      	movs	r3, #10
   11f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   11f12:	e03f      	b.n	11f94 <attsProcReadTypeReq+0x15c>
    }
    /* check permissions */
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   11f14:	9b05      	ldr	r3, [sp, #20]
   11f16:	7f18      	ldrb	r0, [r3, #28]
                                    handle, pAttr->permissions)) != ATT_SUCCESS)
   11f18:	9b08      	ldr	r3, [sp, #32]
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   11f1a:	7bdb      	ldrb	r3, [r3, #15]
   11f1c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   11f20:	2101      	movs	r1, #1
   11f22:	f7ff fa1b 	bl	1135c <attsPermissions>
   11f26:	4603      	mov	r3, r0
   11f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   11f2c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   11f30:	2b00      	cmp	r3, #0
   11f32:	d12f      	bne.n	11f94 <attsProcReadTypeReq+0x15c>
    {
      /* err is set above */
    }
    /* check if read callback should be called */
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   11f34:	9b08      	ldr	r3, [sp, #32]
   11f36:	7b9b      	ldrb	r3, [r3, #14]
   11f38:	f003 0304 	and.w	r3, r3, #4
   11f3c:	2b00      	cmp	r3, #0
   11f3e:	d012      	beq.n	11f66 <attsProcReadTypeReq+0x12e>
             (pGroup->readCback != NULL))
   11f40:	9b07      	ldr	r3, [sp, #28]
   11f42:	689b      	ldr	r3, [r3, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   11f44:	2b00      	cmp	r3, #0
   11f46:	d00e      	beq.n	11f66 <attsProcReadTypeReq+0x12e>
    {
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   11f48:	9b07      	ldr	r3, [sp, #28]
   11f4a:	689c      	ldr	r4, [r3, #8]
   11f4c:	9b05      	ldr	r3, [sp, #20]
   11f4e:	7f18      	ldrb	r0, [r3, #28]
   11f50:	9b08      	ldr	r3, [sp, #32]
   11f52:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   11f56:	9300      	str	r3, [sp, #0]
   11f58:	2300      	movs	r3, #0
   11f5a:	2208      	movs	r2, #8
   11f5c:	47a0      	blx	r4
   11f5e:	4603      	mov	r3, r0
   11f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   11f64:	e016      	b.n	11f94 <attsProcReadTypeReq+0x15c>
    }
    /* else check if CCC */
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   11f66:	9b08      	ldr	r3, [sp, #32]
   11f68:	7b9b      	ldrb	r3, [r3, #14]
   11f6a:	f003 0320 	and.w	r3, r3, #32
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d010      	beq.n	11f94 <attsProcReadTypeReq+0x15c>
   11f72:	4ba3      	ldr	r3, [pc, #652]	; (12200 <attsProcReadTypeReq+0x3c8>)
   11f74:	695b      	ldr	r3, [r3, #20]
   11f76:	2b00      	cmp	r3, #0
   11f78:	d00c      	beq.n	11f94 <attsProcReadTypeReq+0x15c>
    {
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   11f7a:	4ba1      	ldr	r3, [pc, #644]	; (12200 <attsProcReadTypeReq+0x3c8>)
   11f7c:	695c      	ldr	r4, [r3, #20]
   11f7e:	9b05      	ldr	r3, [sp, #20]
   11f80:	7f18      	ldrb	r0, [r3, #28]
   11f82:	9b08      	ldr	r3, [sp, #32]
   11f84:	685b      	ldr	r3, [r3, #4]
   11f86:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   11f8a:	2105      	movs	r1, #5
   11f8c:	47a0      	blx	r4
   11f8e:	4603      	mov	r3, r0
   11f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    }

    if (err == ATT_SUCCESS)
   11f94:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   11f98:	2b00      	cmp	r3, #0
   11f9a:	f040 8116 	bne.w	121ca <attsProcReadTypeReq+0x392>
    {
      /* Check if UUID is the Database Hash Characteristic Value and the value is being
       * re-calculated
       */
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   11f9e:	2202      	movs	r2, #2
   11fa0:	4998      	ldr	r1, [pc, #608]	; (12204 <attsProcReadTypeReq+0x3cc>)
   11fa2:	9803      	ldr	r0, [sp, #12]
   11fa4:	f016 fa1a 	bl	283dc <memcmp>
   11fa8:	4603      	mov	r3, r0
   11faa:	2b00      	cmp	r3, #0
   11fac:	d122      	bne.n	11ff4 <attsProcReadTypeReq+0x1bc>
   11fae:	f7fd ff27 	bl	fe00 <attsCsfGetHashUpdateStatus>
   11fb2:	4603      	mov	r3, r0
   11fb4:	2b00      	cmp	r3, #0
   11fb6:	d01d      	beq.n	11ff4 <attsProcReadTypeReq+0x1bc>
      {
        /* Store info and return */
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
   11fb8:	2004      	movs	r0, #4
   11fba:	f7fb f845 	bl	d048 <WsfBufAlloc>
   11fbe:	4602      	mov	r2, r0
   11fc0:	9b05      	ldr	r3, [sp, #20]
   11fc2:	621a      	str	r2, [r3, #32]
        if (pCcb->pPendDbHashRsp)
   11fc4:	9b05      	ldr	r3, [sp, #20]
   11fc6:	6a1b      	ldr	r3, [r3, #32]
   11fc8:	2b00      	cmp	r3, #0
   11fca:	d00a      	beq.n	11fe2 <attsProcReadTypeReq+0x1aa>
        {
          pCcb->pPendDbHashRsp->startHandle = startHandle;
   11fcc:	9b05      	ldr	r3, [sp, #20]
   11fce:	6a1b      	ldr	r3, [r3, #32]
   11fd0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   11fd4:	801a      	strh	r2, [r3, #0]
          pCcb->pPendDbHashRsp->handle = handle;
   11fd6:	9b05      	ldr	r3, [sp, #20]
   11fd8:	6a1b      	ldr	r3, [r3, #32]
   11fda:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   11fde:	805a      	strh	r2, [r3, #2]
        else
        {
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
        }

        return;
   11fe0:	e10c      	b.n	121fc <attsProcReadTypeReq+0x3c4>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
   11fe2:	9b05      	ldr	r3, [sp, #20]
   11fe4:	8b18      	ldrh	r0, [r3, #24]
   11fe6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   11fea:	2311      	movs	r3, #17
   11fec:	2108      	movs	r1, #8
   11fee:	f7fe fd57 	bl	10aa0 <attsErrRsp>
   11ff2:	e103      	b.n	121fc <attsProcReadTypeReq+0x3c4>
      }

      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   11ff4:	9b05      	ldr	r3, [sp, #20]
   11ff6:	8b5b      	ldrh	r3, [r3, #26]
   11ff8:	3308      	adds	r3, #8
   11ffa:	b29b      	uxth	r3, r3
   11ffc:	4618      	mov	r0, r3
   11ffe:	f001 f871 	bl	130e4 <attMsgAlloc>
   12002:	900d      	str	r0, [sp, #52]	; 0x34
   12004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12006:	2b00      	cmp	r3, #0
   12008:	f000 80d6 	beq.w	121b8 <attsProcReadTypeReq+0x380>
      {
        p = pBuf + L2C_PAYLOAD_START;
   1200c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1200e:	3308      	adds	r3, #8
   12010:	930c      	str	r3, [sp, #48]	; 0x30
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   12012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12014:	1c5a      	adds	r2, r3, #1
   12016:	920c      	str	r2, [sp, #48]	; 0x30
   12018:	2209      	movs	r2, #9
   1201a:	701a      	strb	r2, [r3, #0]

        /* get length of this first attribute */
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   1201c:	9b05      	ldr	r3, [sp, #20]
   1201e:	8b5b      	ldrh	r3, [r3, #26]
   12020:	3b04      	subs	r3, #4
   12022:	9a08      	ldr	r2, [sp, #32]
   12024:	6892      	ldr	r2, [r2, #8]
   12026:	8812      	ldrh	r2, [r2, #0]
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
   12028:	4293      	cmp	r3, r2
   1202a:	bf28      	it	cs
   1202c:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   1202e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   12032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12034:	1c5a      	adds	r2, r3, #1
   12036:	920c      	str	r2, [sp, #48]	; 0x30
   12038:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1203c:	3202      	adds	r2, #2
   1203e:	b2d2      	uxtb	r2, r2
   12040:	701a      	strb	r2, [r3, #0]

        /* copy result to response message */
        UINT16_TO_BSTREAM(p, handle);
   12042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12044:	1c5a      	adds	r2, r3, #1
   12046:	920c      	str	r2, [sp, #48]	; 0x30
   12048:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1204c:	b2d2      	uxtb	r2, r2
   1204e:	701a      	strb	r2, [r3, #0]
   12050:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12054:	0a1b      	lsrs	r3, r3, #8
   12056:	b299      	uxth	r1, r3
   12058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1205a:	1c5a      	adds	r2, r3, #1
   1205c:	920c      	str	r2, [sp, #48]	; 0x30
   1205e:	b2ca      	uxtb	r2, r1
   12060:	701a      	strb	r2, [r3, #0]
        memcpy(p, pAttr->pValue, attLen);
   12062:	9b08      	ldr	r3, [sp, #32]
   12064:	685b      	ldr	r3, [r3, #4]
   12066:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1206a:	4619      	mov	r1, r3
   1206c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1206e:	f7fa f847 	bl	c100 <memcpy>
        p += attLen;
   12072:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   12076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12078:	4413      	add	r3, r2
   1207a:	930c      	str	r3, [sp, #48]	; 0x30

        /* look for additional attributes */
        handle++;
   1207c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12080:	3301      	adds	r3, #1
   12082:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   12086:	e081      	b.n	1218c <attsProcReadTypeReq+0x354>
                                             pPacket, &pAttr, &pGroup)) != ATT_HANDLE_NONE)
        {
          /* call read callback if desired */
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   12088:	9b08      	ldr	r3, [sp, #32]
   1208a:	7b9b      	ldrb	r3, [r3, #14]
   1208c:	f003 0304 	and.w	r3, r3, #4
   12090:	2b00      	cmp	r3, #0
   12092:	d012      	beq.n	120ba <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
   12094:	9b07      	ldr	r3, [sp, #28]
   12096:	689b      	ldr	r3, [r3, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   12098:	2b00      	cmp	r3, #0
   1209a:	d00e      	beq.n	120ba <attsProcReadTypeReq+0x282>
          {
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   1209c:	9b07      	ldr	r3, [sp, #28]
   1209e:	689c      	ldr	r4, [r3, #8]
   120a0:	9b05      	ldr	r3, [sp, #20]
   120a2:	7f18      	ldrb	r0, [r3, #28]
   120a4:	9b08      	ldr	r3, [sp, #32]
   120a6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   120aa:	9300      	str	r3, [sp, #0]
   120ac:	2300      	movs	r3, #0
   120ae:	2208      	movs	r2, #8
   120b0:	47a0      	blx	r4
   120b2:	4603      	mov	r3, r0
   120b4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   120b8:	e016      	b.n	120e8 <attsProcReadTypeReq+0x2b0>
          }
          /* else check if CCC */
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   120ba:	9b08      	ldr	r3, [sp, #32]
   120bc:	7b9b      	ldrb	r3, [r3, #14]
   120be:	f003 0320 	and.w	r3, r3, #32
   120c2:	2b00      	cmp	r3, #0
   120c4:	d010      	beq.n	120e8 <attsProcReadTypeReq+0x2b0>
   120c6:	4b4e      	ldr	r3, [pc, #312]	; (12200 <attsProcReadTypeReq+0x3c8>)
   120c8:	695b      	ldr	r3, [r3, #20]
   120ca:	2b00      	cmp	r3, #0
   120cc:	d00c      	beq.n	120e8 <attsProcReadTypeReq+0x2b0>
          {
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   120ce:	4b4c      	ldr	r3, [pc, #304]	; (12200 <attsProcReadTypeReq+0x3c8>)
   120d0:	695c      	ldr	r4, [r3, #20]
   120d2:	9b05      	ldr	r3, [sp, #20]
   120d4:	7f18      	ldrb	r0, [r3, #28]
   120d6:	9b08      	ldr	r3, [sp, #32]
   120d8:	685b      	ldr	r3, [r3, #4]
   120da:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   120de:	2105      	movs	r1, #5
   120e0:	47a0      	blx	r4
   120e2:	4603      	mov	r3, r0
   120e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

          /* verify no error from read callback
           * verify length is same as first found attribute
           * verify attribute permissions
           */
          if ((cbackErr == ATT_SUCCESS) &&
   120e8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   120ec:	2b00      	cmp	r3, #0
   120ee:	d16c      	bne.n	121ca <attsProcReadTypeReq+0x392>
              (*pAttr->pLen == attLen) &&
   120f0:	9b08      	ldr	r3, [sp, #32]
   120f2:	689b      	ldr	r3, [r3, #8]
   120f4:	881a      	ldrh	r2, [r3, #0]
   120f6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   120fa:	b29b      	uxth	r3, r3
          if ((cbackErr == ATT_SUCCESS) &&
   120fc:	429a      	cmp	r2, r3
   120fe:	d164      	bne.n	121ca <attsProcReadTypeReq+0x392>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   12100:	9b05      	ldr	r3, [sp, #20]
   12102:	7f18      	ldrb	r0, [r3, #28]
                               handle, pAttr->permissions) == ATT_SUCCESS))
   12104:	9b08      	ldr	r3, [sp, #32]
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   12106:	7bdb      	ldrb	r3, [r3, #15]
   12108:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1210c:	2101      	movs	r1, #1
   1210e:	f7ff f925 	bl	1135c <attsPermissions>
   12112:	4603      	mov	r3, r0
              (*pAttr->pLen == attLen) &&
   12114:	2b00      	cmp	r3, #0
   12116:	d158      	bne.n	121ca <attsProcReadTypeReq+0x392>
          {
            /* copy result into response buffer; first check if it fits */
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   12118:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1211c:	3302      	adds	r3, #2
   1211e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12120:	441a      	add	r2, r3
   12122:	9b05      	ldr	r3, [sp, #20]
   12124:	8b5b      	ldrh	r3, [r3, #26]
   12126:	3308      	adds	r3, #8
   12128:	990d      	ldr	r1, [sp, #52]	; 0x34
   1212a:	440b      	add	r3, r1
   1212c:	429a      	cmp	r2, r3
   1212e:	d847      	bhi.n	121c0 <attsProcReadTypeReq+0x388>
            {
              UINT16_TO_BSTREAM(p, handle);
   12130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12132:	1c5a      	adds	r2, r3, #1
   12134:	920c      	str	r2, [sp, #48]	; 0x30
   12136:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1213a:	b2d2      	uxtb	r2, r2
   1213c:	701a      	strb	r2, [r3, #0]
   1213e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12142:	0a1b      	lsrs	r3, r3, #8
   12144:	b299      	uxth	r1, r3
   12146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12148:	1c5a      	adds	r2, r3, #1
   1214a:	920c      	str	r2, [sp, #48]	; 0x30
   1214c:	b2ca      	uxtb	r2, r1
   1214e:	701a      	strb	r2, [r3, #0]
              memcpy(p, pAttr->pValue, attLen);
   12150:	9b08      	ldr	r3, [sp, #32]
   12152:	685b      	ldr	r3, [r3, #4]
   12154:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   12158:	4619      	mov	r1, r3
   1215a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1215c:	f7f9 ffd0 	bl	c100 <memcpy>
              p += attLen;
   12160:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   12164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12166:	4413      	add	r3, r2
   12168:	930c      	str	r3, [sp, #48]	; 0x30
            /* problem with read callback, length, or permissions; send what we've got so far */
            break;
          }

          /* special case of handle at max range */
          if (handle == ATT_HANDLE_MAX)
   1216a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1216e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12172:	4293      	cmp	r3, r2
   12174:	d026      	beq.n	121c4 <attsProcReadTypeReq+0x38c>
          {
            break;
          }

          /* try next handle */
          if (++handle > endHandle)
   12176:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1217a:	3301      	adds	r3, #1
   1217c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   12180:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   12184:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12188:	429a      	cmp	r2, r3
   1218a:	d81d      	bhi.n	121c8 <attsProcReadTypeReq+0x390>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   1218c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   12190:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   12194:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   12198:	ab07      	add	r3, sp, #28
   1219a:	9301      	str	r3, [sp, #4]
   1219c:	ab08      	add	r3, sp, #32
   1219e:	9300      	str	r3, [sp, #0]
   121a0:	9b03      	ldr	r3, [sp, #12]
   121a2:	f7ff fb6b 	bl	1187c <attsFindUuidInRange>
   121a6:	4603      	mov	r3, r0
   121a8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   121ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   121b0:	2b00      	cmp	r3, #0
   121b2:	f47f af69 	bne.w	12088 <attsProcReadTypeReq+0x250>
   121b6:	e008      	b.n	121ca <attsProcReadTypeReq+0x392>
        }
      }
      else
      {
        /* buffer allocation failed */
        err = ATT_ERR_RESOURCES;
   121b8:	2311      	movs	r3, #17
   121ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   121be:	e004      	b.n	121ca <attsProcReadTypeReq+0x392>
              break;
   121c0:	bf00      	nop
   121c2:	e002      	b.n	121ca <attsProcReadTypeReq+0x392>
            break;
   121c4:	bf00      	nop
   121c6:	e000      	b.n	121ca <attsProcReadTypeReq+0x392>
            break;
   121c8:	bf00      	nop
      }
    }
  }

  /* if no error send response, else send error */
  if (!err)
   121ca:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   121ce:	2b00      	cmp	r3, #0
   121d0:	d10b      	bne.n	121ea <attsProcReadTypeReq+0x3b2>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   121d2:	9b05      	ldr	r3, [sp, #20]
   121d4:	8b19      	ldrh	r1, [r3, #24]
   121d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121d8:	3308      	adds	r3, #8
   121da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   121dc:	1ad3      	subs	r3, r2, r3
   121de:	b29a      	uxth	r2, r3
   121e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121e2:	2004      	movs	r0, #4
   121e4:	f7fa fa64 	bl	c6b0 <L2cDataReq>
   121e8:	e008      	b.n	121fc <attsProcReadTypeReq+0x3c4>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   121ea:	9b05      	ldr	r3, [sp, #20]
   121ec:	8b18      	ldrh	r0, [r3, #24]
   121ee:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   121f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   121f6:	2108      	movs	r1, #8
   121f8:	f7fe fc52 	bl	10aa0 <attsErrRsp>
  }
}
   121fc:	b00e      	add	sp, #56	; 0x38
   121fe:	bd10      	pop	{r4, pc}
   12200:	10008a80 	.word	0x10008a80
   12204:	0002c23c 	.word	0x0002c23c

00012208 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   12208:	b510      	push	{r4, lr}
   1220a:	b08e      	sub	sp, #56	; 0x38
   1220c:	9005      	str	r0, [sp, #20]
   1220e:	460b      	mov	r3, r1
   12210:	9203      	str	r2, [sp, #12]
   12212:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *pBuf;
  uint8_t     *p;
  uint8_t     *pEnd;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle = ATT_HANDLE_NONE;
   12216:	2300      	movs	r3, #0
   12218:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   1221c:	2300      	movs	r3, #0
   1221e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31

  /* points to end of payload */
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   12222:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   12226:	3308      	adds	r3, #8
   12228:	9a03      	ldr	r2, [sp, #12]
   1222a:	4413      	add	r3, r2
   1222c:	930b      	str	r3, [sp, #44]	; 0x2c

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1222e:	9b03      	ldr	r3, [sp, #12]
   12230:	3309      	adds	r3, #9
   12232:	9303      	str	r3, [sp, #12]

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   12234:	9b05      	ldr	r3, [sp, #20]
   12236:	8b5b      	ldrh	r3, [r3, #26]
   12238:	3308      	adds	r3, #8
   1223a:	b29b      	uxth	r3, r3
   1223c:	4618      	mov	r0, r3
   1223e:	f000 ff51 	bl	130e4 <attMsgAlloc>
   12242:	900a      	str	r0, [sp, #40]	; 0x28
   12244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12246:	2b00      	cmp	r3, #0
   12248:	f000 809d 	beq.w	12386 <attsProcReadMultReq+0x17e>
  {
    p = pBuf + L2C_PAYLOAD_START;
   1224c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1224e:	3308      	adds	r3, #8
   12250:	930d      	str	r3, [sp, #52]	; 0x34
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   12252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12254:	1c5a      	adds	r2, r3, #1
   12256:	920d      	str	r2, [sp, #52]	; 0x34
   12258:	220f      	movs	r2, #15
   1225a:	701a      	strb	r2, [r3, #0]

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
   1225c:	e08d      	b.n	1237a <attsProcReadMultReq+0x172>
    {
      /* parse handle */
      BSTREAM_TO_UINT16(handle, pPacket);
   1225e:	9b03      	ldr	r3, [sp, #12]
   12260:	781b      	ldrb	r3, [r3, #0]
   12262:	b29a      	uxth	r2, r3
   12264:	9b03      	ldr	r3, [sp, #12]
   12266:	3301      	adds	r3, #1
   12268:	781b      	ldrb	r3, [r3, #0]
   1226a:	b29b      	uxth	r3, r3
   1226c:	021b      	lsls	r3, r3, #8
   1226e:	b29b      	uxth	r3, r3
   12270:	4413      	add	r3, r2
   12272:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   12276:	9b03      	ldr	r3, [sp, #12]
   12278:	3302      	adds	r3, #2
   1227a:	9303      	str	r3, [sp, #12]

      /* find attribute */
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   1227c:	aa07      	add	r2, sp, #28
   1227e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   12282:	4611      	mov	r1, r2
   12284:	4618      	mov	r0, r3
   12286:	f7fe fff9 	bl	1127c <attsFindByHandle>
   1228a:	9009      	str	r0, [sp, #36]	; 0x24
   1228c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1228e:	2b00      	cmp	r3, #0
   12290:	d103      	bne.n	1229a <attsProcReadMultReq+0x92>
      {
        err = ATT_ERR_HANDLE;
   12292:	2301      	movs	r3, #1
   12294:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        break;
   12298:	e07c      	b.n	12394 <attsProcReadMultReq+0x18c>
      }

      /* verify permissions */
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1229a:	9b05      	ldr	r3, [sp, #20]
   1229c:	7f18      	ldrb	r0, [r3, #28]
   1229e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122a0:	7bdb      	ldrb	r3, [r3, #15]
   122a2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   122a6:	2101      	movs	r1, #1
   122a8:	f7ff f858 	bl	1135c <attsPermissions>
   122ac:	4603      	mov	r3, r0
   122ae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   122b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   122b6:	2b00      	cmp	r3, #0
   122b8:	d169      	bne.n	1238e <attsProcReadMultReq+0x186>
      {
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   122ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122bc:	7b9b      	ldrb	r3, [r3, #14]
   122be:	f003 0304 	and.w	r3, r3, #4
   122c2:	2b00      	cmp	r3, #0
   122c4:	d016      	beq.n	122f4 <attsProcReadMultReq+0xec>
          (pGroup->readCback != NULL))
   122c6:	9b07      	ldr	r3, [sp, #28]
   122c8:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   122ca:	2b00      	cmp	r3, #0
   122cc:	d012      	beq.n	122f4 <attsProcReadMultReq+0xec>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
   122ce:	9b07      	ldr	r3, [sp, #28]
   122d0:	689c      	ldr	r4, [r3, #8]
   122d2:	9b05      	ldr	r3, [sp, #20]
   122d4:	7f18      	ldrb	r0, [r3, #28]
   122d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   122da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122dc:	9300      	str	r3, [sp, #0]
   122de:	2300      	movs	r3, #0
   122e0:	220e      	movs	r2, #14
   122e2:	47a0      	blx	r4
   122e4:	4603      	mov	r3, r0
   122e6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        if (err != ATT_SUCCESS)
   122ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   122ee:	2b00      	cmp	r3, #0
   122f0:	d01b      	beq.n	1232a <attsProcReadMultReq+0x122>
        {
          break;
   122f2:	e04f      	b.n	12394 <attsProcReadMultReq+0x18c>
        }
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   122f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122f6:	7b9b      	ldrb	r3, [r3, #14]
   122f8:	f003 0320 	and.w	r3, r3, #32
   122fc:	2b00      	cmp	r3, #0
   122fe:	d014      	beq.n	1232a <attsProcReadMultReq+0x122>
   12300:	4b35      	ldr	r3, [pc, #212]	; (123d8 <attsProcReadMultReq+0x1d0>)
   12302:	695b      	ldr	r3, [r3, #20]
   12304:	2b00      	cmp	r3, #0
   12306:	d010      	beq.n	1232a <attsProcReadMultReq+0x122>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   12308:	4b33      	ldr	r3, [pc, #204]	; (123d8 <attsProcReadMultReq+0x1d0>)
   1230a:	695c      	ldr	r4, [r3, #20]
   1230c:	9b05      	ldr	r3, [sp, #20]
   1230e:	7f18      	ldrb	r0, [r3, #28]
   12310:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12312:	685b      	ldr	r3, [r3, #4]
   12314:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   12318:	2105      	movs	r1, #5
   1231a:	47a0      	blx	r4
   1231c:	4603      	mov	r3, r0
   1231e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        if (err != ATT_SUCCESS)
   12322:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12326:	2b00      	cmp	r3, #0
   12328:	d133      	bne.n	12392 <attsProcReadMultReq+0x18a>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1232a:	9b05      	ldr	r3, [sp, #20]
   1232c:	8b5b      	ldrh	r3, [r3, #26]
   1232e:	3308      	adds	r3, #8
   12330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12332:	4413      	add	r3, r2
   12334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12336:	429a      	cmp	r2, r3
   12338:	d21f      	bcs.n	1237a <attsProcReadMultReq+0x172>
      {
        /* calculate remaining space in response buffer */
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
   1233a:	9b05      	ldr	r3, [sp, #20]
   1233c:	8b5b      	ldrh	r3, [r3, #26]
   1233e:	3308      	adds	r3, #8
   12340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12342:	441a      	add	r2, r3
   12344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12346:	1ad3      	subs	r3, r2, r3
   12348:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

        /* actual length is minimum of remaining space and attribute length */
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   1234c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1234e:	689b      	ldr	r3, [r3, #8]
   12350:	881b      	ldrh	r3, [r3, #0]
   12352:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   12356:	4293      	cmp	r3, r2
   12358:	bf28      	it	cs
   1235a:	4613      	movcs	r3, r2
   1235c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

        /* copy attribute to response buffer */
        memcpy(p, pAttr->pValue, readLen);
   12360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12362:	685b      	ldr	r3, [r3, #4]
   12364:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   12368:	4619      	mov	r1, r3
   1236a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1236c:	f7f9 fec8 	bl	c100 <memcpy>
        p += readLen;
   12370:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   12374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12376:	4413      	add	r3, r2
   12378:	930d      	str	r3, [sp, #52]	; 0x34
    while (pPacket < pEnd)
   1237a:	9a03      	ldr	r2, [sp, #12]
   1237c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1237e:	429a      	cmp	r2, r3
   12380:	f4ff af6d 	bcc.w	1225e <attsProcReadMultReq+0x56>
   12384:	e006      	b.n	12394 <attsProcReadMultReq+0x18c>
    }
  }
  else
  {
    /* buffer allocation failed */
    err = ATT_ERR_RESOURCES;
   12386:	2311      	movs	r3, #17
   12388:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1238c:	e002      	b.n	12394 <attsProcReadMultReq+0x18c>
        break;
   1238e:	bf00      	nop
   12390:	e000      	b.n	12394 <attsProcReadMultReq+0x18c>
          break;
   12392:	bf00      	nop
  }

  /* if no error send response, else send error */
  if (!err)
   12394:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12398:	2b00      	cmp	r3, #0
   1239a:	d10b      	bne.n	123b4 <attsProcReadMultReq+0x1ac>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1239c:	9b05      	ldr	r3, [sp, #20]
   1239e:	8b19      	ldrh	r1, [r3, #24]
   123a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   123a2:	3308      	adds	r3, #8
   123a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   123a6:	1ad3      	subs	r3, r2, r3
   123a8:	b29a      	uxth	r2, r3
   123aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   123ac:	2004      	movs	r0, #4
   123ae:	f7fa f97f 	bl	c6b0 <L2cDataReq>
      WsfMsgFree(pBuf);
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
  }
}
   123b2:	e00e      	b.n	123d2 <attsProcReadMultReq+0x1ca>
    if (pBuf != NULL)
   123b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   123b6:	2b00      	cmp	r3, #0
   123b8:	d002      	beq.n	123c0 <attsProcReadMultReq+0x1b8>
      WsfMsgFree(pBuf);
   123ba:	980a      	ldr	r0, [sp, #40]	; 0x28
   123bc:	f7fa fef2 	bl	d1a4 <WsfMsgFree>
    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
   123c0:	9b05      	ldr	r3, [sp, #20]
   123c2:	8b18      	ldrh	r0, [r3, #24]
   123c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   123c8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   123cc:	210e      	movs	r1, #14
   123ce:	f7fe fb67 	bl	10aa0 <attsErrRsp>
}
   123d2:	bf00      	nop
   123d4:	b00e      	add	sp, #56	; 0x38
   123d6:	bd10      	pop	{r4, pc}
   123d8:	10008a80 	.word	0x10008a80

000123dc <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   123dc:	b500      	push	{lr}
   123de:	b08f      	sub	sp, #60	; 0x3c
   123e0:	9005      	str	r0, [sp, #20]
   123e2:	460b      	mov	r3, r1
   123e4:	9203      	str	r2, [sp, #12]
   123e6:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *pBuf = NULL;
   123ea:	2300      	movs	r3, #0
   123ec:	930d      	str	r3, [sp, #52]	; 0x34
  uint8_t     *p = NULL;
   123ee:	2300      	movs	r3, #0
   123f0:	930c      	str	r3, [sp, #48]	; 0x30
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
   123f2:	2300      	movs	r3, #0
   123f4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   123f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   123fc:	f8ad 3018 	strh.w	r3, [sp, #24]

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   12400:	9b03      	ldr	r3, [sp, #12]
   12402:	3309      	adds	r3, #9
   12404:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   12406:	9b03      	ldr	r3, [sp, #12]
   12408:	781b      	ldrb	r3, [r3, #0]
   1240a:	b29a      	uxth	r2, r3
   1240c:	9b03      	ldr	r3, [sp, #12]
   1240e:	3301      	adds	r3, #1
   12410:	781b      	ldrb	r3, [r3, #0]
   12412:	b29b      	uxth	r3, r3
   12414:	021b      	lsls	r3, r3, #8
   12416:	b29b      	uxth	r3, r3
   12418:	4413      	add	r3, r2
   1241a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1241e:	9b03      	ldr	r3, [sp, #12]
   12420:	3302      	adds	r3, #2
   12422:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   12424:	9b03      	ldr	r3, [sp, #12]
   12426:	781b      	ldrb	r3, [r3, #0]
   12428:	b29a      	uxth	r2, r3
   1242a:	9b03      	ldr	r3, [sp, #12]
   1242c:	3301      	adds	r3, #1
   1242e:	781b      	ldrb	r3, [r3, #0]
   12430:	b29b      	uxth	r3, r3
   12432:	021b      	lsls	r3, r3, #8
   12434:	b29b      	uxth	r3, r3
   12436:	4413      	add	r3, r2
   12438:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1243c:	9b03      	ldr	r3, [sp, #12]
   1243e:	3302      	adds	r3, #2
   12440:	9303      	str	r3, [sp, #12]

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   12442:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   12446:	b2db      	uxtb	r3, r3
   12448:	3b05      	subs	r3, #5
   1244a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   1244e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12452:	2b02      	cmp	r3, #2
   12454:	d007      	beq.n	12466 <attsProcReadGroupTypeReq+0x8a>
   12456:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1245a:	2b10      	cmp	r3, #16
   1245c:	d003      	beq.n	12466 <attsProcReadGroupTypeReq+0x8a>
  {
    err = ATT_ERR_INVALID_PDU;
   1245e:	2304      	movs	r3, #4
   12460:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   12464:	e01a      	b.n	1249c <attsProcReadGroupTypeReq+0xc0>
  }
  /* verify handles */
  else if ((startHandle == 0) || (startHandle > endHandle))
   12466:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1246a:	2b00      	cmp	r3, #0
   1246c:	d005      	beq.n	1247a <attsProcReadGroupTypeReq+0x9e>
   1246e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   12472:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12476:	429a      	cmp	r2, r3
   12478:	d903      	bls.n	12482 <attsProcReadGroupTypeReq+0xa6>
  {
    err = ATT_ERR_HANDLE;
   1247a:	2301      	movs	r3, #1
   1247c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   12480:	e00c      	b.n	1249c <attsProcReadGroupTypeReq+0xc0>
  }
  /* verify uuid is primary service group */
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
   12482:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   12486:	ab06      	add	r3, sp, #24
   12488:	9a03      	ldr	r2, [sp, #12]
   1248a:	4618      	mov	r0, r3
   1248c:	f7fe fecf 	bl	1122e <attsUuid16Cmp>
   12490:	4603      	mov	r3, r0
   12492:	2b00      	cmp	r3, #0
   12494:	d102      	bne.n	1249c <attsProcReadGroupTypeReq+0xc0>
  {
    err = ATT_ERR_GROUP_TYPE;
   12496:	2310      	movs	r3, #16
   12498:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  }

  if (!err)
   1249c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   124a0:	2b00      	cmp	r3, #0
   124a2:	f040 810f 	bne.w	126c4 <attsProcReadGroupTypeReq+0x2e8>
  {
    /* find first attribute with matching uuid within handle range */
    handle = attsFindUuidInRange(startHandle, endHandle, uuidLen, pPacket, &pAttr, &pGroup);
   124a6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   124aa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   124ae:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   124b2:	ab07      	add	r3, sp, #28
   124b4:	9301      	str	r3, [sp, #4]
   124b6:	ab08      	add	r3, sp, #32
   124b8:	9300      	str	r3, [sp, #0]
   124ba:	9b03      	ldr	r3, [sp, #12]
   124bc:	f7ff f9de 	bl	1187c <attsFindUuidInRange>
   124c0:	4603      	mov	r3, r0
   124c2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

    if (handle == ATT_HANDLE_NONE)
   124c6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   124ca:	2b00      	cmp	r3, #0
   124cc:	d103      	bne.n	124d6 <attsProcReadGroupTypeReq+0xfa>
    {
      err = ATT_ERR_NOT_FOUND;
   124ce:	230a      	movs	r3, #10
   124d0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   124d4:	e0f6      	b.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
    }
    /* check permissions */
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   124d6:	9b05      	ldr	r3, [sp, #20]
   124d8:	7f18      	ldrb	r0, [r3, #28]
                                    handle, pAttr->permissions)) != ATT_SUCCESS)
   124da:	9b08      	ldr	r3, [sp, #32]
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   124dc:	7bdb      	ldrb	r3, [r3, #15]
   124de:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   124e2:	2101      	movs	r1, #1
   124e4:	f7fe ff3a 	bl	1135c <attsPermissions>
   124e8:	4603      	mov	r3, r0
   124ea:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   124ee:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   124f2:	2b00      	cmp	r3, #0
   124f4:	d004      	beq.n	12500 <attsProcReadGroupTypeReq+0x124>
    {
      startHandle = handle;     /* this handle is returned in error response */
   124f6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   124fa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   124fe:	e0e1      	b.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
    }
    else
    {
      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   12500:	9b05      	ldr	r3, [sp, #20]
   12502:	8b5b      	ldrh	r3, [r3, #26]
   12504:	3308      	adds	r3, #8
   12506:	b29b      	uxth	r3, r3
   12508:	4618      	mov	r0, r3
   1250a:	f000 fdeb 	bl	130e4 <attMsgAlloc>
   1250e:	900d      	str	r0, [sp, #52]	; 0x34
   12510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12512:	2b00      	cmp	r3, #0
   12514:	f000 80cb 	beq.w	126ae <attsProcReadGroupTypeReq+0x2d2>
      {
        p = pBuf + L2C_PAYLOAD_START;
   12518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1251a:	3308      	adds	r3, #8
   1251c:	930c      	str	r3, [sp, #48]	; 0x30
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
   1251e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12520:	1c5a      	adds	r2, r3, #1
   12522:	920c      	str	r2, [sp, #48]	; 0x30
   12524:	2211      	movs	r2, #17
   12526:	701a      	strb	r2, [r3, #0]

        /* get length of this first attribute */
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   12528:	9b05      	ldr	r3, [sp, #20]
   1252a:	8b5b      	ldrh	r3, [r3, #26]
   1252c:	3b06      	subs	r3, #6
   1252e:	9a08      	ldr	r2, [sp, #32]
   12530:	6892      	ldr	r2, [r2, #8]
   12532:	8812      	ldrh	r2, [r2, #0]
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
   12534:	4293      	cmp	r3, r2
   12536:	bf28      	it	cs
   12538:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   1253a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   1253e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12540:	1c5a      	adds	r2, r3, #1
   12542:	920c      	str	r2, [sp, #48]	; 0x30
   12544:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   12548:	3204      	adds	r2, #4
   1254a:	b2d2      	uxtb	r2, r2
   1254c:	701a      	strb	r2, [r3, #0]

        /* copy handle to response message */
        UINT16_TO_BSTREAM(p, handle);
   1254e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12550:	1c5a      	adds	r2, r3, #1
   12552:	920c      	str	r2, [sp, #48]	; 0x30
   12554:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   12558:	b2d2      	uxtb	r2, r2
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12560:	0a1b      	lsrs	r3, r3, #8
   12562:	b299      	uxth	r1, r3
   12564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12566:	1c5a      	adds	r2, r3, #1
   12568:	920c      	str	r2, [sp, #48]	; 0x30
   1256a:	b2ca      	uxtb	r2, r1
   1256c:	701a      	strb	r2, [r3, #0]

        /* get end group handle and copy it to response message */
        handle = attsFindServiceGroupEnd(handle);
   1256e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12572:	4618      	mov	r0, r3
   12574:	f7ff f9f8 	bl	11968 <attsFindServiceGroupEnd>
   12578:	4603      	mov	r3, r0
   1257a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        UINT16_TO_BSTREAM(p, handle);
   1257e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12580:	1c5a      	adds	r2, r3, #1
   12582:	920c      	str	r2, [sp, #48]	; 0x30
   12584:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   12588:	b2d2      	uxtb	r2, r2
   1258a:	701a      	strb	r2, [r3, #0]
   1258c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12590:	0a1b      	lsrs	r3, r3, #8
   12592:	b299      	uxth	r1, r3
   12594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12596:	1c5a      	adds	r2, r3, #1
   12598:	920c      	str	r2, [sp, #48]	; 0x30
   1259a:	b2ca      	uxtb	r2, r1
   1259c:	701a      	strb	r2, [r3, #0]

        /* copy the attribute value to response message */
        memcpy(p, pAttr->pValue, attLen);
   1259e:	9b08      	ldr	r3, [sp, #32]
   125a0:	685b      	ldr	r3, [r3, #4]
   125a2:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   125a6:	4619      	mov	r1, r3
   125a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   125aa:	f7f9 fda9 	bl	c100 <memcpy>
        p += attLen;
   125ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   125b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   125b4:	4413      	add	r3, r2
   125b6:	930c      	str	r3, [sp, #48]	; 0x30

        /* look for additional attributes */
        while (TRUE)
        {
          /* special case of handle at max range */
          if (handle == ATT_HANDLE_MAX)
   125b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   125bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   125c0:	4293      	cmp	r3, r2
   125c2:	d078      	beq.n	126b6 <attsProcReadGroupTypeReq+0x2da>
          {
            break;
          }

          /* increment to next handle */
          if (++handle > endHandle)
   125c4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   125c8:	3301      	adds	r3, #1
   125ca:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   125ce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   125d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   125d6:	429a      	cmp	r2, r3
   125d8:	d86f      	bhi.n	126ba <attsProcReadGroupTypeReq+0x2de>
          {
            break;
          }

          /* find next matching handle */
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   125da:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   125de:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   125e2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   125e6:	ab07      	add	r3, sp, #28
   125e8:	9301      	str	r3, [sp, #4]
   125ea:	ab08      	add	r3, sp, #32
   125ec:	9300      	str	r3, [sp, #0]
   125ee:	9b03      	ldr	r3, [sp, #12]
   125f0:	f7ff f944 	bl	1187c <attsFindUuidInRange>
   125f4:	4603      	mov	r3, r0
   125f6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   125fa:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   125fe:	2b00      	cmp	r3, #0
   12600:	d05d      	beq.n	126be <attsProcReadGroupTypeReq+0x2e2>
          }

          /* verify length is same as first found attribute
           * verify attribute permissions
           */
          if ((*pAttr->pLen == attLen) &&
   12602:	9b08      	ldr	r3, [sp, #32]
   12604:	689b      	ldr	r3, [r3, #8]
   12606:	881a      	ldrh	r2, [r3, #0]
   12608:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1260c:	b29b      	uxth	r3, r3
   1260e:	429a      	cmp	r2, r3
   12610:	d158      	bne.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   12612:	9b05      	ldr	r3, [sp, #20]
   12614:	7f18      	ldrb	r0, [r3, #28]
                               handle, pAttr->permissions) == ATT_SUCCESS))
   12616:	9b08      	ldr	r3, [sp, #32]
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   12618:	7bdb      	ldrb	r3, [r3, #15]
   1261a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1261e:	2101      	movs	r1, #1
   12620:	f7fe fe9c 	bl	1135c <attsPermissions>
   12624:	4603      	mov	r3, r0
          if ((*pAttr->pLen == attLen) &&
   12626:	2b00      	cmp	r3, #0
   12628:	d14c      	bne.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
          {
            /* copy result into response buffer; first check if it fits */
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   1262a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1262e:	3304      	adds	r3, #4
   12630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12632:	441a      	add	r2, r3
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   12634:	9b05      	ldr	r3, [sp, #20]
   12636:	8b5b      	ldrh	r3, [r3, #26]
   12638:	3308      	adds	r3, #8
   1263a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1263c:	440b      	add	r3, r1
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   1263e:	429a      	cmp	r2, r3
   12640:	d83f      	bhi.n	126c2 <attsProcReadGroupTypeReq+0x2e6>
            {
              UINT16_TO_BSTREAM(p, handle);
   12642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12644:	1c5a      	adds	r2, r3, #1
   12646:	920c      	str	r2, [sp, #48]	; 0x30
   12648:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1264c:	b2d2      	uxtb	r2, r2
   1264e:	701a      	strb	r2, [r3, #0]
   12650:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12654:	0a1b      	lsrs	r3, r3, #8
   12656:	b299      	uxth	r1, r3
   12658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1265a:	1c5a      	adds	r2, r3, #1
   1265c:	920c      	str	r2, [sp, #48]	; 0x30
   1265e:	b2ca      	uxtb	r2, r1
   12660:	701a      	strb	r2, [r3, #0]
              handle = attsFindServiceGroupEnd(handle);
   12662:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12666:	4618      	mov	r0, r3
   12668:	f7ff f97e 	bl	11968 <attsFindServiceGroupEnd>
   1266c:	4603      	mov	r3, r0
   1266e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
              UINT16_TO_BSTREAM(p, handle);
   12672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12674:	1c5a      	adds	r2, r3, #1
   12676:	920c      	str	r2, [sp, #48]	; 0x30
   12678:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1267c:	b2d2      	uxtb	r2, r2
   1267e:	701a      	strb	r2, [r3, #0]
   12680:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   12684:	0a1b      	lsrs	r3, r3, #8
   12686:	b299      	uxth	r1, r3
   12688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1268a:	1c5a      	adds	r2, r3, #1
   1268c:	920c      	str	r2, [sp, #48]	; 0x30
   1268e:	b2ca      	uxtb	r2, r1
   12690:	701a      	strb	r2, [r3, #0]
              memcpy(p, pAttr->pValue, attLen);
   12692:	9b08      	ldr	r3, [sp, #32]
   12694:	685b      	ldr	r3, [r3, #4]
   12696:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1269a:	4619      	mov	r1, r3
   1269c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1269e:	f7f9 fd2f 	bl	c100 <memcpy>
              p += attLen;
   126a2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   126a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   126a8:	4413      	add	r3, r2
   126aa:	930c      	str	r3, [sp, #48]	; 0x30
          if (handle == ATT_HANDLE_MAX)
   126ac:	e784      	b.n	125b8 <attsProcReadGroupTypeReq+0x1dc>
        }
      }
      else
      {
        /* buffer allocation failed */
        err = ATT_ERR_RESOURCES;
   126ae:	2311      	movs	r3, #17
   126b0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   126b4:	e006      	b.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
            break;
   126b6:	bf00      	nop
   126b8:	e004      	b.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
            break;
   126ba:	bf00      	nop
   126bc:	e002      	b.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
            break;
   126be:	bf00      	nop
   126c0:	e000      	b.n	126c4 <attsProcReadGroupTypeReq+0x2e8>
              break;
   126c2:	bf00      	nop
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   126c4:	9805      	ldr	r0, [sp, #20]
   126c6:	f7fe fa47 	bl	10b58 <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   126ca:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   126ce:	2b00      	cmp	r3, #0
   126d0:	d10b      	bne.n	126ea <attsProcReadGroupTypeReq+0x30e>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   126d2:	9b05      	ldr	r3, [sp, #20]
   126d4:	8b19      	ldrh	r1, [r3, #24]
   126d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   126d8:	3308      	adds	r3, #8
   126da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   126dc:	1ad3      	subs	r3, r2, r3
   126de:	b29a      	uxth	r2, r3
   126e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   126e2:	2004      	movs	r0, #4
   126e4:	f7f9 ffe4 	bl	c6b0 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
  }
}
   126e8:	e008      	b.n	126fc <attsProcReadGroupTypeReq+0x320>
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
   126ea:	9b05      	ldr	r3, [sp, #20]
   126ec:	8b18      	ldrh	r0, [r3, #24]
   126ee:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   126f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   126f6:	2110      	movs	r1, #16
   126f8:	f7fe f9d2 	bl	10aa0 <attsErrRsp>
}
   126fc:	bf00      	nop
   126fe:	b00f      	add	sp, #60	; 0x3c
   12700:	f85d fb04 	ldr.w	pc, [sp], #4

00012704 <attsSignCcbByConnId>:
 *
 *  \return Pointer to control block.
 */
/*************************************************************************************************/
static attsSignCcb_t *attsSignCcbByConnId(dmConnId_t connId)
{
   12704:	b082      	sub	sp, #8
   12706:	4603      	mov	r3, r0
   12708:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attsSignCb.ccb[connId - 1];
   1270c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12710:	3b01      	subs	r3, #1
   12712:	011b      	lsls	r3, r3, #4
   12714:	4a02      	ldr	r2, [pc, #8]	; (12720 <attsSignCcbByConnId+0x1c>)
   12716:	4413      	add	r3, r2
}
   12718:	4618      	mov	r0, r3
   1271a:	b002      	add	sp, #8
   1271c:	4770      	bx	lr
   1271e:	bf00      	nop
   12720:	100041ac 	.word	0x100041ac

00012724 <AttsSetCsrk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetCsrk(dmConnId_t connId, uint8_t *pCsrk, bool_t authenticated)
{
   12724:	b500      	push	{lr}
   12726:	b083      	sub	sp, #12
   12728:	4603      	mov	r3, r0
   1272a:	9100      	str	r1, [sp, #0]
   1272c:	f88d 3007 	strb.w	r3, [sp, #7]
   12730:	4613      	mov	r3, r2
   12732:	f88d 3006 	strb.w	r3, [sp, #6]
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
   12736:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1273a:	4618      	mov	r0, r3
   1273c:	f7ff ffe2 	bl	12704 <attsSignCcbByConnId>
   12740:	4602      	mov	r2, r0
   12742:	9b00      	ldr	r3, [sp, #0]
   12744:	6053      	str	r3, [r2, #4]
  attsSignCcbByConnId(connId)->authenticated = authenticated;
   12746:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1274a:	4618      	mov	r0, r3
   1274c:	f7ff ffda 	bl	12704 <attsSignCcbByConnId>
   12750:	4602      	mov	r2, r0
   12752:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12756:	7313      	strb	r3, [r2, #12]
}
   12758:	bf00      	nop
   1275a:	b003      	add	sp, #12
   1275c:	f85d fb04 	ldr.w	pc, [sp], #4

00012760 <AttsSetSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetSignCounter(dmConnId_t connId, uint32_t signCounter)
{
   12760:	b500      	push	{lr}
   12762:	b083      	sub	sp, #12
   12764:	4603      	mov	r3, r0
   12766:	9100      	str	r1, [sp, #0]
   12768:	f88d 3007 	strb.w	r3, [sp, #7]
  attsSignCcbByConnId(connId)->signCounter = signCounter;
   1276c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12770:	4618      	mov	r0, r3
   12772:	f7ff ffc7 	bl	12704 <attsSignCcbByConnId>
   12776:	4602      	mov	r2, r0
   12778:	9b00      	ldr	r3, [sp, #0]
   1277a:	6013      	str	r3, [r2, #0]
}
   1277c:	bf00      	nop
   1277e:	b003      	add	sp, #12
   12780:	f85d fb04 	ldr.w	pc, [sp], #4

00012784 <AttsGetSignCounter>:
 *
 *  \return Sign counter.
 */
/*************************************************************************************************/
uint32_t AttsGetSignCounter(dmConnId_t connId)
{
   12784:	b500      	push	{lr}
   12786:	b083      	sub	sp, #12
   12788:	4603      	mov	r3, r0
   1278a:	f88d 3007 	strb.w	r3, [sp, #7]
  return attsSignCcbByConnId(connId)->signCounter;
   1278e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12792:	4618      	mov	r0, r3
   12794:	f7ff ffb6 	bl	12704 <attsSignCcbByConnId>
   12798:	4603      	mov	r3, r0
   1279a:	681b      	ldr	r3, [r3, #0]
}
   1279c:	4618      	mov	r0, r3
   1279e:	b003      	add	sp, #12
   127a0:	f85d fb04 	ldr.w	pc, [sp], #4

000127a4 <attsExecPrepWrite>:
 *
 *  \return ATT_SUCCESS or failure status.
 */
/*************************************************************************************************/
static uint8_t attsExecPrepWrite(attCcb_t *pCcb, attsPrepWrite_t *pPrep)
{
   127a4:	b530      	push	{r4, r5, lr}
   127a6:	b08b      	sub	sp, #44	; 0x2c
   127a8:	9005      	str	r0, [sp, #20]
   127aa:	9104      	str	r1, [sp, #16]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   127ac:	2300      	movs	r3, #0
   127ae:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

  p = pPrep->packet;
   127b2:	9b04      	ldr	r3, [sp, #16]
   127b4:	330a      	adds	r3, #10
   127b6:	9308      	str	r3, [sp, #32]

  /* find attribute */
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
   127b8:	9b04      	ldr	r3, [sp, #16]
   127ba:	88db      	ldrh	r3, [r3, #6]
   127bc:	aa06      	add	r2, sp, #24
   127be:	4611      	mov	r1, r2
   127c0:	4618      	mov	r0, r3
   127c2:	f7fe fd5b 	bl	1127c <attsFindByHandle>
   127c6:	9007      	str	r0, [sp, #28]
   127c8:	9b07      	ldr	r3, [sp, #28]
   127ca:	2b00      	cmp	r3, #0
   127cc:	d103      	bne.n	127d6 <attsExecPrepWrite+0x32>
  {
    /* handle not found; only possible unless handle was removed */
    err = ATT_ERR_UNLIKELY;
   127ce:	230e      	movs	r3, #14
   127d0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   127d4:	e05a      	b.n	1288c <attsExecPrepWrite+0xe8>
  }
  /* verify write permissions (in theory could have changed) */
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
   127d6:	9b07      	ldr	r3, [sp, #28]
   127d8:	7bdb      	ldrb	r3, [r3, #15]
   127da:	f003 0310 	and.w	r3, r3, #16
   127de:	2b00      	cmp	r3, #0
   127e0:	d103      	bne.n	127ea <attsExecPrepWrite+0x46>
  {
    err = ATT_ERR_WRITE;
   127e2:	2303      	movs	r3, #3
   127e4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   127e8:	e050      	b.n	1288c <attsExecPrepWrite+0xe8>
  }
  /* if write callback is desired */
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   127ea:	9b07      	ldr	r3, [sp, #28]
   127ec:	7b9b      	ldrb	r3, [r3, #14]
   127ee:	f003 0302 	and.w	r3, r3, #2
   127f2:	2b00      	cmp	r3, #0
   127f4:	d019      	beq.n	1282a <attsExecPrepWrite+0x86>
           (pGroup->writeCback != NULL))
   127f6:	9b06      	ldr	r3, [sp, #24]
   127f8:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   127fa:	2b00      	cmp	r3, #0
   127fc:	d015      	beq.n	1282a <attsExecPrepWrite+0x86>
  {

    /* write callback performs the write */
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
   127fe:	9b06      	ldr	r3, [sp, #24]
   12800:	68dc      	ldr	r4, [r3, #12]
   12802:	9b05      	ldr	r3, [sp, #20]
   12804:	7f18      	ldrb	r0, [r3, #28]
   12806:	9b04      	ldr	r3, [sp, #16]
   12808:	88d9      	ldrh	r1, [r3, #6]
   1280a:	9b04      	ldr	r3, [sp, #16]
   1280c:	891d      	ldrh	r5, [r3, #8]
   1280e:	9b04      	ldr	r3, [sp, #16]
   12810:	889b      	ldrh	r3, [r3, #4]
   12812:	9a07      	ldr	r2, [sp, #28]
   12814:	9202      	str	r2, [sp, #8]
   12816:	9a08      	ldr	r2, [sp, #32]
   12818:	9201      	str	r2, [sp, #4]
   1281a:	9300      	str	r3, [sp, #0]
   1281c:	462b      	mov	r3, r5
   1281e:	2218      	movs	r2, #24
   12820:	47a0      	blx	r4
   12822:	4603      	mov	r3, r0
   12824:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   12828:	e030      	b.n	1288c <attsExecPrepWrite+0xe8>
                                pPrep->offset, pPrep->writeLen, p, pAttr);
  }
  /* else check if CCC */
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1282a:	9b07      	ldr	r3, [sp, #28]
   1282c:	7b9b      	ldrb	r3, [r3, #14]
   1282e:	f003 0320 	and.w	r3, r3, #32
   12832:	2b00      	cmp	r3, #0
   12834:	d010      	beq.n	12858 <attsExecPrepWrite+0xb4>
   12836:	4b18      	ldr	r3, [pc, #96]	; (12898 <attsExecPrepWrite+0xf4>)
   12838:	695b      	ldr	r3, [r3, #20]
   1283a:	2b00      	cmp	r3, #0
   1283c:	d00c      	beq.n	12858 <attsExecPrepWrite+0xb4>
  {
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
   1283e:	4b16      	ldr	r3, [pc, #88]	; (12898 <attsExecPrepWrite+0xf4>)
   12840:	695c      	ldr	r4, [r3, #20]
   12842:	9b05      	ldr	r3, [sp, #20]
   12844:	7f18      	ldrb	r0, [r3, #28]
   12846:	9b04      	ldr	r3, [sp, #16]
   12848:	88da      	ldrh	r2, [r3, #6]
   1284a:	9b08      	ldr	r3, [sp, #32]
   1284c:	2109      	movs	r1, #9
   1284e:	47a0      	blx	r4
   12850:	4603      	mov	r3, r0
   12852:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   12856:	e019      	b.n	1288c <attsExecPrepWrite+0xe8>
  else
  {
    /* perform write; parameters have already been vetted by previous procedures */

    /* write attribute value */
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
   12858:	9b07      	ldr	r3, [sp, #28]
   1285a:	685b      	ldr	r3, [r3, #4]
   1285c:	9a04      	ldr	r2, [sp, #16]
   1285e:	8912      	ldrh	r2, [r2, #8]
   12860:	1898      	adds	r0, r3, r2
   12862:	9b04      	ldr	r3, [sp, #16]
   12864:	889b      	ldrh	r3, [r3, #4]
   12866:	461a      	mov	r2, r3
   12868:	9908      	ldr	r1, [sp, #32]
   1286a:	f7f9 fc49 	bl	c100 <memcpy>

    /* write the length if variable length attribute */
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   1286e:	9b07      	ldr	r3, [sp, #28]
   12870:	7b9b      	ldrb	r3, [r3, #14]
   12872:	f003 0308 	and.w	r3, r3, #8
   12876:	2b00      	cmp	r3, #0
   12878:	d008      	beq.n	1288c <attsExecPrepWrite+0xe8>
    {
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
   1287a:	9b04      	ldr	r3, [sp, #16]
   1287c:	8899      	ldrh	r1, [r3, #4]
   1287e:	9b04      	ldr	r3, [sp, #16]
   12880:	891a      	ldrh	r2, [r3, #8]
   12882:	9b07      	ldr	r3, [sp, #28]
   12884:	689b      	ldr	r3, [r3, #8]
   12886:	440a      	add	r2, r1
   12888:	b292      	uxth	r2, r2
   1288a:	801a      	strh	r2, [r3, #0]
    }
  }

  return err;
   1288c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   12890:	4618      	mov	r0, r3
   12892:	b00b      	add	sp, #44	; 0x2c
   12894:	bd30      	pop	{r4, r5, pc}
   12896:	bf00      	nop
   12898:	10008a80 	.word	0x10008a80

0001289c <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1289c:	b510      	push	{r4, lr}
   1289e:	b08e      	sub	sp, #56	; 0x38
   128a0:	9007      	str	r0, [sp, #28]
   128a2:	460b      	mov	r3, r1
   128a4:	9205      	str	r2, [sp, #20]
   128a6:	f8ad 301a 	strh.w	r3, [sp, #26]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     opcode;
  uint16_t    handle;
  uint16_t    writeLen;
  uint8_t     err = ATT_SUCCESS;
   128aa:	2300      	movs	r3, #0
   128ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
   128b0:	9b05      	ldr	r3, [sp, #20]
   128b2:	3308      	adds	r3, #8
   128b4:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(opcode, pPacket);
   128b6:	9b05      	ldr	r3, [sp, #20]
   128b8:	1c5a      	adds	r2, r3, #1
   128ba:	9205      	str	r2, [sp, #20]
   128bc:	781b      	ldrb	r3, [r3, #0]
   128be:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  BSTREAM_TO_UINT16(handle, pPacket);
   128c2:	9b05      	ldr	r3, [sp, #20]
   128c4:	781b      	ldrb	r3, [r3, #0]
   128c6:	b29a      	uxth	r2, r3
   128c8:	9b05      	ldr	r3, [sp, #20]
   128ca:	3301      	adds	r3, #1
   128cc:	781b      	ldrb	r3, [r3, #0]
   128ce:	b29b      	uxth	r3, r3
   128d0:	021b      	lsls	r3, r3, #8
   128d2:	b29b      	uxth	r3, r3
   128d4:	4413      	add	r3, r2
   128d6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   128da:	9b05      	ldr	r3, [sp, #20]
   128dc:	3302      	adds	r3, #2
   128de:	9305      	str	r3, [sp, #20]
  writeLen = len - ATT_WRITE_REQ_LEN;
   128e0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   128e4:	3b03      	subs	r3, #3
   128e6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   128ea:	aa08      	add	r2, sp, #32
   128ec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   128f0:	4611      	mov	r1, r2
   128f2:	4618      	mov	r0, r3
   128f4:	f7fe fcc2 	bl	1127c <attsFindByHandle>
   128f8:	900b      	str	r0, [sp, #44]	; 0x2c
   128fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   128fc:	2b00      	cmp	r3, #0
   128fe:	f000 8099 	beq.w	12a34 <attsProcWrite+0x198>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   12902:	9b07      	ldr	r3, [sp, #28]
   12904:	7f18      	ldrb	r0, [r3, #28]
   12906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12908:	7bdb      	ldrb	r3, [r3, #15]
   1290a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1290e:	2110      	movs	r1, #16
   12910:	f7fe fd24 	bl	1135c <attsPermissions>
   12914:	4603      	mov	r3, r0
   12916:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1291a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1291e:	2b00      	cmp	r3, #0
   12920:	f040 808b 	bne.w	12a3a <attsProcWrite+0x19e>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
    {
      /* err has been set; fail */
    }
    /* verify write length, fixed length */
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   12924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12926:	7b9b      	ldrb	r3, [r3, #14]
   12928:	f003 0308 	and.w	r3, r3, #8
   1292c:	2b00      	cmp	r3, #0
   1292e:	d109      	bne.n	12944 <attsProcWrite+0xa8>
             (writeLen != pAttr->maxLen))
   12930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12932:	899b      	ldrh	r3, [r3, #12]
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   12934:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   12938:	429a      	cmp	r2, r3
   1293a:	d003      	beq.n	12944 <attsProcWrite+0xa8>
    {
      err = ATT_ERR_LENGTH;
   1293c:	230d      	movs	r3, #13
   1293e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   12942:	e07a      	b.n	12a3a <attsProcWrite+0x19e>
    }
    /* verify write length, variable length */
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   12944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12946:	7b9b      	ldrb	r3, [r3, #14]
   12948:	f003 0308 	and.w	r3, r3, #8
   1294c:	2b00      	cmp	r3, #0
   1294e:	d009      	beq.n	12964 <attsProcWrite+0xc8>
             (writeLen > pAttr->maxLen))
   12950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12952:	899b      	ldrh	r3, [r3, #12]
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   12954:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   12958:	429a      	cmp	r2, r3
   1295a:	d903      	bls.n	12964 <attsProcWrite+0xc8>
    {
      err = ATT_ERR_LENGTH;
   1295c:	230d      	movs	r3, #13
   1295e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   12962:	e06a      	b.n	12a3a <attsProcWrite+0x19e>
    }
    else
    {
      /* if write callback is desired */
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   12964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12966:	7b9b      	ldrb	r3, [r3, #14]
   12968:	f003 0302 	and.w	r3, r3, #2
   1296c:	2b00      	cmp	r3, #0
   1296e:	d018      	beq.n	129a2 <attsProcWrite+0x106>
          (pGroup->writeCback != NULL))
   12970:	9b08      	ldr	r3, [sp, #32]
   12972:	68db      	ldr	r3, [r3, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   12974:	2b00      	cmp	r3, #0
   12976:	d014      	beq.n	129a2 <attsProcWrite+0x106>
      {
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
   12978:	9b08      	ldr	r3, [sp, #32]
   1297a:	68dc      	ldr	r4, [r3, #12]
   1297c:	9b07      	ldr	r3, [sp, #28]
   1297e:	7f18      	ldrb	r0, [r3, #28]
   12980:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
   12984:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   12988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1298a:	9302      	str	r3, [sp, #8]
   1298c:	9b05      	ldr	r3, [sp, #20]
   1298e:	9301      	str	r3, [sp, #4]
   12990:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   12994:	9300      	str	r3, [sp, #0]
   12996:	2300      	movs	r3, #0
   12998:	47a0      	blx	r4
   1299a:	4603      	mov	r3, r0
   1299c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   129a0:	e029      	b.n	129f6 <attsProcWrite+0x15a>
                                    pPacket, pAttr);
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   129a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   129a4:	7b9b      	ldrb	r3, [r3, #14]
   129a6:	f003 0320 	and.w	r3, r3, #32
   129aa:	2b00      	cmp	r3, #0
   129ac:	d010      	beq.n	129d0 <attsProcWrite+0x134>
   129ae:	4b33      	ldr	r3, [pc, #204]	; (12a7c <attsProcWrite+0x1e0>)
   129b0:	695b      	ldr	r3, [r3, #20]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00c      	beq.n	129d0 <attsProcWrite+0x134>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
   129b6:	4b31      	ldr	r3, [pc, #196]	; (12a7c <attsProcWrite+0x1e0>)
   129b8:	695c      	ldr	r4, [r3, #20]
   129ba:	9b07      	ldr	r3, [sp, #28]
   129bc:	7f18      	ldrb	r0, [r3, #28]
   129be:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   129c2:	9b05      	ldr	r3, [sp, #20]
   129c4:	2109      	movs	r1, #9
   129c6:	47a0      	blx	r4
   129c8:	4603      	mov	r3, r0
   129ca:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   129ce:	e012      	b.n	129f6 <attsProcWrite+0x15a>
      }
      else
      {
        /* write attribute value */
        memcpy(pAttr->pValue, pPacket, writeLen);
   129d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   129d2:	685b      	ldr	r3, [r3, #4]
   129d4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   129d8:	9905      	ldr	r1, [sp, #20]
   129da:	4618      	mov	r0, r3
   129dc:	f7f9 fb90 	bl	c100 <memcpy>

        /* write the length if variable length attribute */
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   129e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   129e2:	7b9b      	ldrb	r3, [r3, #14]
   129e4:	f003 0308 	and.w	r3, r3, #8
   129e8:	2b00      	cmp	r3, #0
   129ea:	d004      	beq.n	129f6 <attsProcWrite+0x15a>
        {
          *(pAttr->pLen) = writeLen;
   129ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   129ee:	689b      	ldr	r3, [r3, #8]
   129f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   129f4:	801a      	strh	r2, [r3, #0]
        }
      }

      /* if success and write req allocate response buffer */
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   129f6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   129fa:	2b00      	cmp	r3, #0
   129fc:	d11d      	bne.n	12a3a <attsProcWrite+0x19e>
   129fe:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   12a02:	2b12      	cmp	r3, #18
   12a04:	d119      	bne.n	12a3a <attsProcWrite+0x19e>
      {
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
   12a06:	2009      	movs	r0, #9
   12a08:	f000 fb6c 	bl	130e4 <attMsgAlloc>
   12a0c:	900a      	str	r0, [sp, #40]	; 0x28
   12a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a10:	2b00      	cmp	r3, #0
   12a12:	d012      	beq.n	12a3a <attsProcWrite+0x19e>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   12a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a16:	3308      	adds	r3, #8
   12a18:	9309      	str	r3, [sp, #36]	; 0x24
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
   12a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a1c:	1c5a      	adds	r2, r3, #1
   12a1e:	9209      	str	r2, [sp, #36]	; 0x24
   12a20:	2213      	movs	r2, #19
   12a22:	701a      	strb	r2, [r3, #0]

          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
   12a24:	9b07      	ldr	r3, [sp, #28]
   12a26:	8b19      	ldrh	r1, [r3, #24]
   12a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a2a:	2201      	movs	r2, #1
   12a2c:	2004      	movs	r0, #4
   12a2e:	f7f9 fe3f 	bl	c6b0 <L2cDataReq>
   12a32:	e002      	b.n	12a3a <attsProcWrite+0x19e>
    }
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_HANDLE;
   12a34:	2301      	movs	r3, #1
   12a36:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   12a3a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12a3e:	2b00      	cmp	r3, #0
   12a40:	d018      	beq.n	12a74 <attsProcWrite+0x1d8>
   12a42:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   12a46:	2b12      	cmp	r3, #18
   12a48:	d114      	bne.n	12a74 <attsProcWrite+0x1d8>
  {
    if (err == ATT_RSP_PENDING)
   12a4a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12a4e:	2b79      	cmp	r3, #121	; 0x79
   12a50:	d107      	bne.n	12a62 <attsProcWrite+0x1c6>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
   12a52:	9b07      	ldr	r3, [sp, #28]
   12a54:	7f5b      	ldrb	r3, [r3, #29]
   12a56:	f043 0308 	orr.w	r3, r3, #8
   12a5a:	b2da      	uxtb	r2, r3
   12a5c:	9b07      	ldr	r3, [sp, #28]
   12a5e:	775a      	strb	r2, [r3, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
   12a60:	e008      	b.n	12a74 <attsProcWrite+0x1d8>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   12a62:	9b07      	ldr	r3, [sp, #28]
   12a64:	8b18      	ldrh	r0, [r3, #24]
   12a66:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12a6a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   12a6e:	2112      	movs	r1, #18
   12a70:	f7fe f816 	bl	10aa0 <attsErrRsp>
}
   12a74:	bf00      	nop
   12a76:	b00e      	add	sp, #56	; 0x38
   12a78:	bd10      	pop	{r4, pc}
   12a7a:	bf00      	nop
   12a7c:	10008a80 	.word	0x10008a80

00012a80 <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   12a80:	b510      	push	{r4, lr}
   12a82:	b090      	sub	sp, #64	; 0x40
   12a84:	9007      	str	r0, [sp, #28]
   12a86:	460b      	mov	r3, r1
   12a88:	9205      	str	r2, [sp, #20]
   12a8a:	f8ad 301a 	strh.w	r3, [sp, #26]
  attsGroup_t     *pGroup;
  attsPrepWrite_t *pPrep;
  uint16_t        handle;
  uint16_t        offset;
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;
   12a8e:	2300      	movs	r3, #0
   12a90:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   12a94:	9b05      	ldr	r3, [sp, #20]
   12a96:	3309      	adds	r3, #9
   12a98:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT16(handle, pPacket);
   12a9a:	9b05      	ldr	r3, [sp, #20]
   12a9c:	781b      	ldrb	r3, [r3, #0]
   12a9e:	b29a      	uxth	r2, r3
   12aa0:	9b05      	ldr	r3, [sp, #20]
   12aa2:	3301      	adds	r3, #1
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	b29b      	uxth	r3, r3
   12aa8:	021b      	lsls	r3, r3, #8
   12aaa:	b29b      	uxth	r3, r3
   12aac:	4413      	add	r3, r2
   12aae:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   12ab2:	9b05      	ldr	r3, [sp, #20]
   12ab4:	3302      	adds	r3, #2
   12ab6:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT16(offset, pPacket);
   12ab8:	9b05      	ldr	r3, [sp, #20]
   12aba:	781b      	ldrb	r3, [r3, #0]
   12abc:	b29a      	uxth	r2, r3
   12abe:	9b05      	ldr	r3, [sp, #20]
   12ac0:	3301      	adds	r3, #1
   12ac2:	781b      	ldrb	r3, [r3, #0]
   12ac4:	b29b      	uxth	r3, r3
   12ac6:	021b      	lsls	r3, r3, #8
   12ac8:	b29b      	uxth	r3, r3
   12aca:	4413      	add	r3, r2
   12acc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   12ad0:	9b05      	ldr	r3, [sp, #20]
   12ad2:	3302      	adds	r3, #2
   12ad4:	9305      	str	r3, [sp, #20]
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   12ad6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12ada:	3b05      	subs	r3, #5
   12adc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   12ae0:	aa09      	add	r2, sp, #36	; 0x24
   12ae2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   12ae6:	4611      	mov	r1, r2
   12ae8:	4618      	mov	r0, r3
   12aea:	f7fe fbc7 	bl	1127c <attsFindByHandle>
   12aee:	900c      	str	r0, [sp, #48]	; 0x30
   12af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12af2:	2b00      	cmp	r3, #0
   12af4:	d103      	bne.n	12afe <attsProcPrepWriteReq+0x7e>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
   12af6:	2301      	movs	r3, #1
   12af8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12afc:	e069      	b.n	12bd2 <attsProcPrepWriteReq+0x152>
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   12afe:	9b07      	ldr	r3, [sp, #28]
   12b00:	7f18      	ldrb	r0, [r3, #28]
   12b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b04:	7bdb      	ldrb	r3, [r3, #15]
   12b06:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   12b0a:	2110      	movs	r1, #16
   12b0c:	f7fe fc26 	bl	1135c <attsPermissions>
   12b10:	4603      	mov	r3, r0
   12b12:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12b16:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12b1a:	2b00      	cmp	r3, #0
   12b1c:	d159      	bne.n	12bd2 <attsProcPrepWriteReq+0x152>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
  {
    /* err has been set; fail */
  }
  /* verify offset is allowed */
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
   12b1e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   12b22:	2b00      	cmp	r3, #0
   12b24:	d009      	beq.n	12b3a <attsProcPrepWriteReq+0xba>
   12b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b28:	7b9b      	ldrb	r3, [r3, #14]
   12b2a:	f003 0310 	and.w	r3, r3, #16
   12b2e:	2b00      	cmp	r3, #0
   12b30:	d103      	bne.n	12b3a <attsProcPrepWriteReq+0xba>
  {
    err = ATT_ERR_NOT_LONG;
   12b32:	230b      	movs	r3, #11
   12b34:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12b38:	e04b      	b.n	12bd2 <attsProcPrepWriteReq+0x152>
  }
  /* verify write length, fixed length */
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   12b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b3c:	7b9b      	ldrb	r3, [r3, #14]
   12b3e:	f003 0308 	and.w	r3, r3, #8
   12b42:	2b00      	cmp	r3, #0
   12b44:	d109      	bne.n	12b5a <attsProcPrepWriteReq+0xda>
           (writeLen != pAttr->maxLen))
   12b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b48:	899b      	ldrh	r3, [r3, #12]
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   12b4a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   12b4e:	429a      	cmp	r2, r3
   12b50:	d003      	beq.n	12b5a <attsProcPrepWriteReq+0xda>
  {
    err = ATT_ERR_LENGTH;
   12b52:	230d      	movs	r3, #13
   12b54:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12b58:	e03b      	b.n	12bd2 <attsProcPrepWriteReq+0x152>
  }
  /* verify prepare write queue limit not reached */
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
   12b5a:	9b07      	ldr	r3, [sp, #28]
   12b5c:	4618      	mov	r0, r3
   12b5e:	f7fa fdc3 	bl	d6e8 <WsfQueueCount>
   12b62:	4603      	mov	r3, r0
   12b64:	461a      	mov	r2, r3
   12b66:	4b53      	ldr	r3, [pc, #332]	; (12cb4 <attsProcPrepWriteReq+0x234>)
   12b68:	681b      	ldr	r3, [r3, #0]
   12b6a:	79db      	ldrb	r3, [r3, #7]
   12b6c:	b29b      	uxth	r3, r3
   12b6e:	429a      	cmp	r2, r3
   12b70:	d303      	bcc.n	12b7a <attsProcPrepWriteReq+0xfa>
  {
    err = ATT_ERR_QUEUE_FULL;
   12b72:	2309      	movs	r3, #9
   12b74:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12b78:	e02b      	b.n	12bd2 <attsProcPrepWriteReq+0x152>
  }
  /* allocate new buffer to hold prepared write */
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
   12b7a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12b7e:	330b      	adds	r3, #11
   12b80:	b29b      	uxth	r3, r3
   12b82:	4618      	mov	r0, r3
   12b84:	f7fa fa60 	bl	d048 <WsfBufAlloc>
   12b88:	900f      	str	r0, [sp, #60]	; 0x3c
   12b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b8c:	2b00      	cmp	r3, #0
   12b8e:	d103      	bne.n	12b98 <attsProcPrepWriteReq+0x118>
  {
    err = ATT_ERR_RESOURCES;
   12b90:	2311      	movs	r3, #17
   12b92:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12b96:	e01c      	b.n	12bd2 <attsProcPrepWriteReq+0x152>
  }
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   12b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b9a:	7b9b      	ldrb	r3, [r3, #14]
   12b9c:	f003 0302 	and.w	r3, r3, #2
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	d016      	beq.n	12bd2 <attsProcPrepWriteReq+0x152>
          (pGroup->writeCback != NULL))
   12ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ba6:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   12ba8:	2b00      	cmp	r3, #0
   12baa:	d012      	beq.n	12bd2 <attsProcPrepWriteReq+0x152>
  {
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
   12bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12bae:	68dc      	ldr	r4, [r3, #12]
   12bb0:	9b07      	ldr	r3, [sp, #28]
   12bb2:	7f18      	ldrb	r0, [r3, #28]
   12bb4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   12bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12bba:	9302      	str	r3, [sp, #8]
   12bbc:	9b05      	ldr	r3, [sp, #20]
   12bbe:	9301      	str	r3, [sp, #4]
   12bc0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12bc4:	9300      	str	r3, [sp, #0]
   12bc6:	2300      	movs	r3, #0
   12bc8:	2216      	movs	r2, #22
   12bca:	47a0      	blx	r4
   12bcc:	4603      	mov	r3, r0
   12bce:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
                                pPacket, pAttr);
  }

  if (err == ATT_SUCCESS)
   12bd2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12bd6:	2b00      	cmp	r3, #0
   12bd8:	d15c      	bne.n	12c94 <attsProcPrepWriteReq+0x214>
  {
    /* copy data to new buffer and queue it */
    pPrep->writeLen = writeLen;
   12bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12bdc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   12be0:	809a      	strh	r2, [r3, #4]
    pPrep->handle = handle;
   12be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12be4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   12be8:	80da      	strh	r2, [r3, #6]
    pPrep->offset = offset;
   12bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12bec:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   12bf0:	811a      	strh	r2, [r3, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
   12bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12bf4:	330a      	adds	r3, #10
   12bf6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   12bfa:	9905      	ldr	r1, [sp, #20]
   12bfc:	4618      	mov	r0, r3
   12bfe:	f7f9 fa7f 	bl	c100 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
   12c02:	9b07      	ldr	r3, [sp, #28]
   12c04:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12c06:	4618      	mov	r0, r3
   12c08:	f7fa fcc6 	bl	d598 <WsfQueueEnq>

    /* allocate response buffer */
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
   12c0c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12c10:	330d      	adds	r3, #13
   12c12:	b29b      	uxth	r3, r3
   12c14:	4618      	mov	r0, r3
   12c16:	f000 fa65 	bl	130e4 <attMsgAlloc>
   12c1a:	900b      	str	r0, [sp, #44]	; 0x2c
   12c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12c1e:	2b00      	cmp	r3, #0
   12c20:	d038      	beq.n	12c94 <attsProcPrepWriteReq+0x214>
    {
      /* build and send PDU */
      p = pBuf + L2C_PAYLOAD_START;
   12c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12c24:	3308      	adds	r3, #8
   12c26:	930a      	str	r3, [sp, #40]	; 0x28
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   12c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c2a:	1c5a      	adds	r2, r3, #1
   12c2c:	920a      	str	r2, [sp, #40]	; 0x28
   12c2e:	2217      	movs	r2, #23
   12c30:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, handle);
   12c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c34:	1c5a      	adds	r2, r3, #1
   12c36:	920a      	str	r2, [sp, #40]	; 0x28
   12c38:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   12c3c:	b2d2      	uxtb	r2, r2
   12c3e:	701a      	strb	r2, [r3, #0]
   12c40:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   12c44:	0a1b      	lsrs	r3, r3, #8
   12c46:	b299      	uxth	r1, r3
   12c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c4a:	1c5a      	adds	r2, r3, #1
   12c4c:	920a      	str	r2, [sp, #40]	; 0x28
   12c4e:	b2ca      	uxtb	r2, r1
   12c50:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, offset);
   12c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c54:	1c5a      	adds	r2, r3, #1
   12c56:	920a      	str	r2, [sp, #40]	; 0x28
   12c58:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   12c5c:	b2d2      	uxtb	r2, r2
   12c5e:	701a      	strb	r2, [r3, #0]
   12c60:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   12c64:	0a1b      	lsrs	r3, r3, #8
   12c66:	b299      	uxth	r1, r3
   12c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c6a:	1c5a      	adds	r2, r3, #1
   12c6c:	920a      	str	r2, [sp, #40]	; 0x28
   12c6e:	b2ca      	uxtb	r2, r1
   12c70:	701a      	strb	r2, [r3, #0]
      memcpy(p, pPacket, writeLen);
   12c72:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12c76:	461a      	mov	r2, r3
   12c78:	9905      	ldr	r1, [sp, #20]
   12c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
   12c7c:	f7f9 fa40 	bl	c100 <memcpy>

      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
   12c80:	9b07      	ldr	r3, [sp, #28]
   12c82:	8b19      	ldrh	r1, [r3, #24]
   12c84:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12c88:	3305      	adds	r3, #5
   12c8a:	b29a      	uxth	r2, r3
   12c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12c8e:	2004      	movs	r0, #4
   12c90:	f7f9 fd0e 	bl	c6b0 <L2cDataReq>
    }
  }

  if (err)
   12c94:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12c98:	2b00      	cmp	r3, #0
   12c9a:	d008      	beq.n	12cae <attsProcPrepWriteReq+0x22e>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
   12c9c:	9b07      	ldr	r3, [sp, #28]
   12c9e:	8b18      	ldrh	r0, [r3, #24]
   12ca0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12ca4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   12ca8:	2116      	movs	r1, #22
   12caa:	f7fd fef9 	bl	10aa0 <attsErrRsp>
  }
}
   12cae:	bf00      	nop
   12cb0:	b010      	add	sp, #64	; 0x40
   12cb2:	bd10      	pop	{r4, pc}
   12cb4:	10002bcc 	.word	0x10002bcc

00012cb8 <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   12cb8:	b500      	push	{lr}
   12cba:	b08b      	sub	sp, #44	; 0x2c
   12cbc:	9003      	str	r0, [sp, #12]
   12cbe:	460b      	mov	r3, r1
   12cc0:	9201      	str	r2, [sp, #4]
   12cc2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t         *pBuf;
  uint8_t         *p;
  attsPrepWrite_t *pPrep;
  attsAttr_t      *pAttr;
  attsGroup_t     *pGroup;
  uint8_t         err = ATT_SUCCESS;
   12cc6:	2300      	movs	r3, #0
   12cc8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   12ccc:	9b01      	ldr	r3, [sp, #4]
   12cce:	3309      	adds	r3, #9
   12cd0:	9301      	str	r3, [sp, #4]

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   12cd2:	9b01      	ldr	r3, [sp, #4]
   12cd4:	781b      	ldrb	r3, [r3, #0]
   12cd6:	2b00      	cmp	r3, #0
   12cd8:	d103      	bne.n	12ce2 <attsProcExecWriteReq+0x2a>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
   12cda:	9803      	ldr	r0, [sp, #12]
   12cdc:	f7fd ff27 	bl	10b2e <attsClearPrepWrites>
   12ce0:	e059      	b.n	12d96 <attsProcExecWriteReq+0xde>
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
   12ce2:	9b01      	ldr	r3, [sp, #4]
   12ce4:	781b      	ldrb	r3, [r3, #0]
   12ce6:	2b01      	cmp	r3, #1
   12ce8:	d152      	bne.n	12d90 <attsProcExecWriteReq+0xd8>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   12cea:	9b03      	ldr	r3, [sp, #12]
   12cec:	681b      	ldr	r3, [r3, #0]
   12cee:	9309      	str	r3, [sp, #36]	; 0x24
   12cf0:	e02c      	b.n	12d4c <attsProcExecWriteReq+0x94>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
   12cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12cf4:	88db      	ldrh	r3, [r3, #6]
   12cf6:	aa04      	add	r2, sp, #16
   12cf8:	4611      	mov	r1, r2
   12cfa:	4618      	mov	r0, r3
   12cfc:	f7fe fabe 	bl	1127c <attsFindByHandle>
   12d00:	9007      	str	r0, [sp, #28]
   12d02:	9b07      	ldr	r3, [sp, #28]
   12d04:	2b00      	cmp	r3, #0
   12d06:	d01e      	beq.n	12d46 <attsProcExecWriteReq+0x8e>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
   12d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d0a:	891a      	ldrh	r2, [r3, #8]
   12d0c:	9b07      	ldr	r3, [sp, #28]
   12d0e:	899b      	ldrh	r3, [r3, #12]
   12d10:	429a      	cmp	r2, r3
   12d12:	d903      	bls.n	12d1c <attsProcExecWriteReq+0x64>
        {
          err = ATT_ERR_OFFSET;
   12d14:	2307      	movs	r3, #7
   12d16:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   12d1a:	e00c      	b.n	12d36 <attsProcExecWriteReq+0x7e>
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
   12d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d1e:	889b      	ldrh	r3, [r3, #4]
   12d20:	461a      	mov	r2, r3
   12d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d24:	891b      	ldrh	r3, [r3, #8]
   12d26:	4413      	add	r3, r2
   12d28:	9a07      	ldr	r2, [sp, #28]
   12d2a:	8992      	ldrh	r2, [r2, #12]
   12d2c:	4293      	cmp	r3, r2
   12d2e:	dd02      	ble.n	12d36 <attsProcExecWriteReq+0x7e>
        {
          err = ATT_ERR_LENGTH;
   12d30:	230d      	movs	r3, #13
   12d32:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        }

        if (err)
   12d36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	d003      	beq.n	12d46 <attsProcExecWriteReq+0x8e>
        {
          /* verification failed; discard all prepared writes */
          attsClearPrepWrites(pCcb);
   12d3e:	9803      	ldr	r0, [sp, #12]
   12d40:	f7fd fef5 	bl	10b2e <attsClearPrepWrites>
          break;
   12d44:	e005      	b.n	12d52 <attsProcExecWriteReq+0x9a>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   12d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d48:	681b      	ldr	r3, [r3, #0]
   12d4a:	9309      	str	r3, [sp, #36]	; 0x24
   12d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d4e:	2b00      	cmp	r3, #0
   12d50:	d1cf      	bne.n	12cf2 <attsProcExecWriteReq+0x3a>
        }
      }
    }

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
   12d52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12d56:	2b00      	cmp	r3, #0
   12d58:	d11d      	bne.n	12d96 <attsProcExecWriteReq+0xde>
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   12d5a:	e010      	b.n	12d7e <attsProcExecWriteReq+0xc6>
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
   12d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   12d5e:	9803      	ldr	r0, [sp, #12]
   12d60:	f7ff fd20 	bl	127a4 <attsExecPrepWrite>
   12d64:	4603      	mov	r3, r0
   12d66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   12d6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d002      	beq.n	12d78 <attsProcExecWriteReq+0xc0>
        {
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
   12d72:	9803      	ldr	r0, [sp, #12]
   12d74:	f7fd fedb 	bl	10b2e <attsClearPrepWrites>
        }

        /* free buffer */
        WsfBufFree(pPrep);
   12d78:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d7a:	f7fa f9ab 	bl	d0d4 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   12d7e:	9b03      	ldr	r3, [sp, #12]
   12d80:	4618      	mov	r0, r3
   12d82:	f7fa fc2a 	bl	d5da <WsfQueueDeq>
   12d86:	9009      	str	r0, [sp, #36]	; 0x24
   12d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d8a:	2b00      	cmp	r3, #0
   12d8c:	d1e6      	bne.n	12d5c <attsProcExecWriteReq+0xa4>
   12d8e:	e002      	b.n	12d96 <attsProcExecWriteReq+0xde>
    }
  }
  /* else unknown operation */
  else
  {
    err = ATT_ERR_INVALID_PDU;
   12d90:	2304      	movs	r3, #4
   12d92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  }

  /* send response or error response */
  if (err)
   12d96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12d9a:	2b00      	cmp	r3, #0
   12d9c:	d008      	beq.n	12db0 <attsProcExecWriteReq+0xf8>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
   12d9e:	9b03      	ldr	r3, [sp, #12]
   12da0:	8b18      	ldrh	r0, [r3, #24]
   12da2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12da6:	2200      	movs	r2, #0
   12da8:	2118      	movs	r1, #24
   12daa:	f7fd fe79 	bl	10aa0 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
   12dae:	e015      	b.n	12ddc <attsProcExecWriteReq+0x124>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
   12db0:	2009      	movs	r0, #9
   12db2:	f000 f997 	bl	130e4 <attMsgAlloc>
   12db6:	9006      	str	r0, [sp, #24]
   12db8:	9b06      	ldr	r3, [sp, #24]
   12dba:	2b00      	cmp	r3, #0
   12dbc:	d00e      	beq.n	12ddc <attsProcExecWriteReq+0x124>
      p = pBuf + L2C_PAYLOAD_START;
   12dbe:	9b06      	ldr	r3, [sp, #24]
   12dc0:	3308      	adds	r3, #8
   12dc2:	9305      	str	r3, [sp, #20]
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
   12dc4:	9b05      	ldr	r3, [sp, #20]
   12dc6:	1c5a      	adds	r2, r3, #1
   12dc8:	9205      	str	r2, [sp, #20]
   12dca:	2219      	movs	r2, #25
   12dcc:	701a      	strb	r2, [r3, #0]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
   12dce:	9b03      	ldr	r3, [sp, #12]
   12dd0:	8b19      	ldrh	r1, [r3, #24]
   12dd2:	9b06      	ldr	r3, [sp, #24]
   12dd4:	2201      	movs	r2, #1
   12dd6:	2004      	movs	r0, #4
   12dd8:	f7f9 fc6a 	bl	c6b0 <L2cDataReq>
}
   12ddc:	bf00      	nop
   12dde:	b00b      	add	sp, #44	; 0x2c
   12de0:	f85d fb04 	ldr.w	pc, [sp], #4

00012de4 <attL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   12de4:	b500      	push	{lr}
   12de6:	b085      	sub	sp, #20
   12de8:	4603      	mov	r3, r0
   12dea:	9200      	str	r2, [sp, #0]
   12dec:	f8ad 3006 	strh.w	r3, [sp, #6]
   12df0:	460b      	mov	r3, r1
   12df2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t pduType;

  /* parse PDU type */
  pduType = *(pPacket + L2C_PAYLOAD_START);
   12df6:	9b00      	ldr	r3, [sp, #0]
   12df8:	7a1b      	ldrb	r3, [r3, #8]
   12dfa:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if from server */
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   12dfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e02:	f003 0301 	and.w	r3, r3, #1
   12e06:	2b00      	cmp	r3, #0
   12e08:	d009      	beq.n	12e1e <attL2cDataCback+0x3a>
  {
    /* call client data callback */
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   12e0a:	4b0b      	ldr	r3, [pc, #44]	; (12e38 <attL2cDataCback+0x54>)
   12e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   12e0e:	681b      	ldr	r3, [r3, #0]
   12e10:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12e14:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   12e18:	9a00      	ldr	r2, [sp, #0]
   12e1a:	4798      	blx	r3
  else
  {
    /* call server data callback */
    (*attCb.pServer->dataCback)(handle, len, pPacket);
  }
}
   12e1c:	e008      	b.n	12e30 <attL2cDataCback+0x4c>
    (*attCb.pServer->dataCback)(handle, len, pPacket);
   12e1e:	4b06      	ldr	r3, [pc, #24]	; (12e38 <attL2cDataCback+0x54>)
   12e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   12e22:	681b      	ldr	r3, [r3, #0]
   12e24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12e28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   12e2c:	9a00      	ldr	r2, [sp, #0]
   12e2e:	4798      	blx	r3
}
   12e30:	bf00      	nop
   12e32:	b005      	add	sp, #20
   12e34:	f85d fb04 	ldr.w	pc, [sp], #4
   12e38:	10008a98 	.word	0x10008a98

00012e3c <attL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   12e3c:	b500      	push	{lr}
   12e3e:	b085      	sub	sp, #20
   12e40:	9001      	str	r0, [sp, #4]
  attCcb_t      *pCcb;

  /* get connection control block */
  pCcb = attCcbByConnId((dmConnId_t) pMsg->param);
   12e42:	9b01      	ldr	r3, [sp, #4]
   12e44:	881b      	ldrh	r3, [r3, #0]
   12e46:	b2db      	uxtb	r3, r3
   12e48:	4618      	mov	r0, r3
   12e4a:	f000 f8b5 	bl	12fb8 <attCcbByConnId>
   12e4e:	9003      	str	r0, [sp, #12]

  /* verify connection is open */
  if (pCcb->connId != DM_CONN_ID_NONE)
   12e50:	9b03      	ldr	r3, [sp, #12]
   12e52:	7f1b      	ldrb	r3, [r3, #28]
   12e54:	2b00      	cmp	r3, #0
   12e56:	d022      	beq.n	12e9e <attL2cCtrlCback+0x62>
  {
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   12e58:	9b01      	ldr	r3, [sp, #4]
   12e5a:	789b      	ldrb	r3, [r3, #2]
   12e5c:	2b01      	cmp	r3, #1
   12e5e:	d107      	bne.n	12e70 <attL2cCtrlCback+0x34>
    {
      /* flow disabled */
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   12e60:	9b03      	ldr	r3, [sp, #12]
   12e62:	7f5b      	ldrb	r3, [r3, #29]
   12e64:	f043 0302 	orr.w	r3, r3, #2
   12e68:	b2da      	uxtb	r2, r3
   12e6a:	9b03      	ldr	r3, [sp, #12]
   12e6c:	775a      	strb	r2, [r3, #29]
        /* call client control callback */
        (*attCb.pClient->ctrlCback)(pMsg);
      }
    }
  }
}
   12e6e:	e016      	b.n	12e9e <attL2cCtrlCback+0x62>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
   12e70:	9b03      	ldr	r3, [sp, #12]
   12e72:	7f5b      	ldrb	r3, [r3, #29]
   12e74:	f023 0302 	bic.w	r3, r3, #2
   12e78:	b2da      	uxtb	r2, r3
   12e7a:	9b03      	ldr	r3, [sp, #12]
   12e7c:	775a      	strb	r2, [r3, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
   12e7e:	4b0a      	ldr	r3, [pc, #40]	; (12ea8 <attL2cCtrlCback+0x6c>)
   12e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   12e82:	685b      	ldr	r3, [r3, #4]
   12e84:	9801      	ldr	r0, [sp, #4]
   12e86:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   12e88:	9b03      	ldr	r3, [sp, #12]
   12e8a:	7f5b      	ldrb	r3, [r3, #29]
   12e8c:	f003 0302 	and.w	r3, r3, #2
   12e90:	2b00      	cmp	r3, #0
   12e92:	d104      	bne.n	12e9e <attL2cCtrlCback+0x62>
        (*attCb.pClient->ctrlCback)(pMsg);
   12e94:	4b04      	ldr	r3, [pc, #16]	; (12ea8 <attL2cCtrlCback+0x6c>)
   12e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   12e98:	685b      	ldr	r3, [r3, #4]
   12e9a:	9801      	ldr	r0, [sp, #4]
   12e9c:	4798      	blx	r3
}
   12e9e:	bf00      	nop
   12ea0:	b005      	add	sp, #20
   12ea2:	f85d fb04 	ldr.w	pc, [sp], #4
   12ea6:	bf00      	nop
   12ea8:	10008a98 	.word	0x10008a98

00012eac <attDmConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attDmConnCback(dmEvt_t *pDmEvt)
{
   12eac:	b500      	push	{lr}
   12eae:	b085      	sub	sp, #20
   12eb0:	9001      	str	r0, [sp, #4]
  attCcb_t  *pCcb;

  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   12eb2:	9b01      	ldr	r3, [sp, #4]
   12eb4:	881b      	ldrh	r3, [r3, #0]
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	4618      	mov	r0, r3
   12eba:	f000 f87d 	bl	12fb8 <attCcbByConnId>
   12ebe:	9003      	str	r0, [sp, #12]

  /* if new connection created */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   12ec0:	9b01      	ldr	r3, [sp, #4]
   12ec2:	789b      	ldrb	r3, [r3, #2]
   12ec4:	2b27      	cmp	r3, #39	; 0x27
   12ec6:	d111      	bne.n	12eec <attDmConnCback+0x40>
  {
    /* initialize control block before handling event */
    pCcb->handle = pDmEvt->connOpen.handle;
   12ec8:	9b01      	ldr	r3, [sp, #4]
   12eca:	88da      	ldrh	r2, [r3, #6]
   12ecc:	9b03      	ldr	r3, [sp, #12]
   12ece:	831a      	strh	r2, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
   12ed0:	9b03      	ldr	r3, [sp, #12]
   12ed2:	2217      	movs	r2, #23
   12ed4:	835a      	strh	r2, [r3, #26]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   12ed6:	9b01      	ldr	r3, [sp, #4]
   12ed8:	881b      	ldrh	r3, [r3, #0]
   12eda:	b2da      	uxtb	r2, r3
   12edc:	9b03      	ldr	r3, [sp, #12]
   12ede:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
   12ee0:	9b03      	ldr	r3, [sp, #12]
   12ee2:	2200      	movs	r2, #0
   12ee4:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
   12ee6:	9b03      	ldr	r3, [sp, #12]
   12ee8:	2200      	movs	r2, #0
   12eea:	621a      	str	r2, [r3, #32]
  }

  /* if connection has been opened */
  if (pCcb->connId != DM_CONN_ID_NONE)
   12eec:	9b03      	ldr	r3, [sp, #12]
   12eee:	7f1b      	ldrb	r3, [r3, #28]
   12ef0:	2b00      	cmp	r3, #0
   12ef2:	d01b      	beq.n	12f2c <attDmConnCback+0x80>
  {
    /* pass event to server */
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
   12ef4:	4b13      	ldr	r3, [pc, #76]	; (12f44 <attDmConnCback+0x98>)
   12ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   12ef8:	68db      	ldr	r3, [r3, #12]
   12efa:	9901      	ldr	r1, [sp, #4]
   12efc:	9803      	ldr	r0, [sp, #12]
   12efe:	4798      	blx	r3

    /* pass event to client */
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
   12f00:	4b10      	ldr	r3, [pc, #64]	; (12f44 <attDmConnCback+0x98>)
   12f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   12f04:	68db      	ldr	r3, [r3, #12]
   12f06:	9901      	ldr	r1, [sp, #4]
   12f08:	9803      	ldr	r0, [sp, #12]
   12f0a:	4798      	blx	r3

    /* if connection closed */
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   12f0c:	9b01      	ldr	r3, [sp, #4]
   12f0e:	789b      	ldrb	r3, [r3, #2]
   12f10:	2b28      	cmp	r3, #40	; 0x28
   12f12:	d10b      	bne.n	12f2c <attDmConnCback+0x80>
    {
      /* clear control block after handling event */
      pCcb->connId = DM_CONN_ID_NONE;
   12f14:	9b03      	ldr	r3, [sp, #12]
   12f16:	2200      	movs	r2, #0
   12f18:	771a      	strb	r2, [r3, #28]

      if (pCcb->pPendDbHashRsp)
   12f1a:	9b03      	ldr	r3, [sp, #12]
   12f1c:	6a1b      	ldr	r3, [r3, #32]
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d004      	beq.n	12f2c <attDmConnCback+0x80>
      {
        WsfBufFree(pCcb->pPendDbHashRsp);
   12f22:	9b03      	ldr	r3, [sp, #12]
   12f24:	6a1b      	ldr	r3, [r3, #32]
   12f26:	4618      	mov	r0, r3
   12f28:	f7fa f8d4 	bl	d0d4 <WsfBufFree>
      }
    }
  }

  /* execute ATT connection callback */
  if (attCb.connCback != NULL)
   12f2c:	4b05      	ldr	r3, [pc, #20]	; (12f44 <attDmConnCback+0x98>)
   12f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   12f30:	2b00      	cmp	r3, #0
   12f32:	d003      	beq.n	12f3c <attDmConnCback+0x90>
  {
    (*attCb.connCback)(pDmEvt);
   12f34:	4b03      	ldr	r3, [pc, #12]	; (12f44 <attDmConnCback+0x98>)
   12f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   12f38:	9801      	ldr	r0, [sp, #4]
   12f3a:	4798      	blx	r3
  }
}
   12f3c:	bf00      	nop
   12f3e:	b005      	add	sp, #20
   12f40:	f85d fb04 	ldr.w	pc, [sp], #4
   12f44:	10008a98 	.word	0x10008a98

00012f48 <attEmptyHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
   12f48:	b082      	sub	sp, #8
   12f4a:	9001      	str	r0, [sp, #4]
  return;
   12f4c:	bf00      	nop
}
   12f4e:	b002      	add	sp, #8
   12f50:	4770      	bx	lr

00012f52 <attEmptyConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   12f52:	b082      	sub	sp, #8
   12f54:	9001      	str	r0, [sp, #4]
   12f56:	9100      	str	r1, [sp, #0]
  return;
   12f58:	bf00      	nop
}
   12f5a:	b002      	add	sp, #8
   12f5c:	4770      	bx	lr

00012f5e <attEmptyDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   12f5e:	b082      	sub	sp, #8
   12f60:	4603      	mov	r3, r0
   12f62:	9200      	str	r2, [sp, #0]
   12f64:	f8ad 3006 	strh.w	r3, [sp, #6]
   12f68:	460b      	mov	r3, r1
   12f6a:	f8ad 3004 	strh.w	r3, [sp, #4]
  return;
   12f6e:	bf00      	nop
}
   12f70:	b002      	add	sp, #8
   12f72:	4770      	bx	lr

00012f74 <attCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
attCcb_t *attCcbByHandle(uint16_t handle)
{
   12f74:	b500      	push	{lr}
   12f76:	b085      	sub	sp, #20
   12f78:	4603      	mov	r3, r0
   12f7a:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   12f7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12f82:	4618      	mov	r0, r3
   12f84:	f002 fee8 	bl	15d58 <DmConnIdByHandle>
   12f88:	4603      	mov	r3, r0
   12f8a:	f88d 300f 	strb.w	r3, [sp, #15]
   12f8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12f92:	2b00      	cmp	r3, #0
   12f94:	d009      	beq.n	12faa <attCcbByHandle+0x36>
  {
    return &attCb.ccb[connId - 1];
   12f96:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12f9a:	1e5a      	subs	r2, r3, #1
   12f9c:	4613      	mov	r3, r2
   12f9e:	00db      	lsls	r3, r3, #3
   12fa0:	4413      	add	r3, r2
   12fa2:	009b      	lsls	r3, r3, #2
   12fa4:	4a03      	ldr	r2, [pc, #12]	; (12fb4 <attCcbByHandle+0x40>)
   12fa6:	4413      	add	r3, r2
   12fa8:	e000      	b.n	12fac <attCcbByHandle+0x38>
  }

  return NULL;
   12faa:	2300      	movs	r3, #0
}
   12fac:	4618      	mov	r0, r3
   12fae:	b005      	add	sp, #20
   12fb0:	f85d fb04 	ldr.w	pc, [sp], #4
   12fb4:	10008a98 	.word	0x10008a98

00012fb8 <attCcbByConnId>:
 *
 *  \return Pointer to connection control block.
 */
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
   12fb8:	b082      	sub	sp, #8
   12fba:	4603      	mov	r3, r0
   12fbc:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
   12fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12fc4:	1e5a      	subs	r2, r3, #1
   12fc6:	4613      	mov	r3, r2
   12fc8:	00db      	lsls	r3, r3, #3
   12fca:	4413      	add	r3, r2
   12fcc:	009b      	lsls	r3, r3, #2
   12fce:	4a02      	ldr	r2, [pc, #8]	; (12fd8 <attCcbByConnId+0x20>)
   12fd0:	4413      	add	r3, r2
}
   12fd2:	4618      	mov	r0, r3
   12fd4:	b002      	add	sp, #8
   12fd6:	4770      	bx	lr
   12fd8:	10008a98 	.word	0x10008a98

00012fdc <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
   12fdc:	b500      	push	{lr}
   12fde:	b083      	sub	sp, #12
   12fe0:	9001      	str	r0, [sp, #4]
   12fe2:	9100      	str	r1, [sp, #0]
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
   12fe4:	9b01      	ldr	r3, [sp, #4]
   12fe6:	781a      	ldrb	r2, [r3, #0]
   12fe8:	4b0a      	ldr	r3, [pc, #40]	; (13014 <attUuidCmp16to128+0x38>)
   12fea:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
   12fec:	9b01      	ldr	r3, [sp, #4]
   12fee:	785a      	ldrb	r2, [r3, #1]
   12ff0:	4b08      	ldr	r3, [pc, #32]	; (13014 <attUuidCmp16to128+0x38>)
   12ff2:	735a      	strb	r2, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
   12ff4:	2210      	movs	r2, #16
   12ff6:	9900      	ldr	r1, [sp, #0]
   12ff8:	4806      	ldr	r0, [pc, #24]	; (13014 <attUuidCmp16to128+0x38>)
   12ffa:	f015 f9ef 	bl	283dc <memcmp>
   12ffe:	4603      	mov	r3, r0
   13000:	2b00      	cmp	r3, #0
   13002:	bf0c      	ite	eq
   13004:	2301      	moveq	r3, #1
   13006:	2300      	movne	r3, #0
   13008:	b2db      	uxtb	r3, r3
}
   1300a:	4618      	mov	r0, r3
   1300c:	b003      	add	sp, #12
   1300e:	f85d fb04 	ldr.w	pc, [sp], #4
   13012:	bf00      	nop
   13014:	10002b58 	.word	0x10002b58

00013018 <attSetMtu>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
   13018:	b500      	push	{lr}
   1301a:	b087      	sub	sp, #28
   1301c:	9003      	str	r0, [sp, #12]
   1301e:	460b      	mov	r3, r1
   13020:	f8ad 300a 	strh.w	r3, [sp, #10]
   13024:	4613      	mov	r3, r2
   13026:	f8ad 3008 	strh.w	r3, [sp, #8]
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
   1302a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1302e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   13032:	4293      	cmp	r3, r2
   13034:	bf28      	it	cs
   13036:	4613      	movcs	r3, r2
   13038:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
   1303c:	9b03      	ldr	r3, [sp, #12]
   1303e:	8b5b      	ldrh	r3, [r3, #26]
   13040:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   13044:	429a      	cmp	r2, r3
   13046:	d00d      	beq.n	13064 <attSetMtu+0x4c>
  {
    /* set mtu to the new value */
    pCcb->mtu = mtu;
   13048:	9b03      	ldr	r3, [sp, #12]
   1304a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1304e:	835a      	strh	r2, [r3, #26]

    /* notify app about the new value */
    attExecCallback(pCcb->connId, ATT_MTU_UPDATE_IND, 0, ATT_SUCCESS, mtu);
   13050:	9b03      	ldr	r3, [sp, #12]
   13052:	7f18      	ldrb	r0, [r3, #28]
   13054:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13058:	9300      	str	r3, [sp, #0]
   1305a:	2300      	movs	r3, #0
   1305c:	2200      	movs	r2, #0
   1305e:	2112      	movs	r1, #18
   13060:	f000 f804 	bl	1306c <attExecCallback>
  }
}
   13064:	bf00      	nop
   13066:	b007      	add	sp, #28
   13068:	f85d fb04 	ldr.w	pc, [sp], #4

0001306c <attExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
   1306c:	b510      	push	{r4, lr}
   1306e:	b086      	sub	sp, #24
   13070:	4604      	mov	r4, r0
   13072:	4608      	mov	r0, r1
   13074:	4611      	mov	r1, r2
   13076:	461a      	mov	r2, r3
   13078:	4623      	mov	r3, r4
   1307a:	f88d 3007 	strb.w	r3, [sp, #7]
   1307e:	4603      	mov	r3, r0
   13080:	f88d 3006 	strb.w	r3, [sp, #6]
   13084:	460b      	mov	r3, r1
   13086:	f8ad 3004 	strh.w	r3, [sp, #4]
   1308a:	4613      	mov	r3, r2
   1308c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (attCb.cback)
   13090:	4b13      	ldr	r3, [pc, #76]	; (130e0 <attExecCallback+0x74>)
   13092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   13094:	2b00      	cmp	r3, #0
   13096:	d01f      	beq.n	130d8 <attExecCallback+0x6c>
  {
    attEvt_t evt;

    evt.hdr.param = connId;
   13098:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1309c:	b29b      	uxth	r3, r3
   1309e:	f8ad 3008 	strh.w	r3, [sp, #8]
    evt.hdr.event = event;
   130a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   130a6:	f88d 300a 	strb.w	r3, [sp, #10]
    evt.hdr.status = status;
   130aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   130ae:	f88d 300b 	strb.w	r3, [sp, #11]
    evt.valueLen = 0;
   130b2:	2300      	movs	r3, #0
   130b4:	f8ad 3010 	strh.w	r3, [sp, #16]
    evt.handle = handle;
   130b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   130bc:	f8ad 3012 	strh.w	r3, [sp, #18]
    evt.continuing = 0;
   130c0:	2300      	movs	r3, #0
   130c2:	f88d 3014 	strb.w	r3, [sp, #20]
    evt.mtu = mtu;
   130c6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   130ca:	f8ad 3016 	strh.w	r3, [sp, #22]

    (*attCb.cback)(&evt);
   130ce:	4b04      	ldr	r3, [pc, #16]	; (130e0 <attExecCallback+0x74>)
   130d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   130d2:	aa02      	add	r2, sp, #8
   130d4:	4610      	mov	r0, r2
   130d6:	4798      	blx	r3
  }
}
   130d8:	bf00      	nop
   130da:	b006      	add	sp, #24
   130dc:	bd10      	pop	{r4, pc}
   130de:	bf00      	nop
   130e0:	10008a98 	.word	0x10008a98

000130e4 <attMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
   130e4:	b500      	push	{lr}
   130e6:	b083      	sub	sp, #12
   130e8:	4603      	mov	r3, r0
   130ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   130ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   130f2:	2100      	movs	r1, #0
   130f4:	4618      	mov	r0, r3
   130f6:	f7fa f825 	bl	d144 <WsfMsgDataAlloc>
   130fa:	4603      	mov	r3, r0
}
   130fc:	4618      	mov	r0, r3
   130fe:	b003      	add	sp, #12
   13100:	f85d fb04 	ldr.w	pc, [sp], #4

00013104 <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
   13104:	b500      	push	{lr}
   13106:	b083      	sub	sp, #12
   13108:	4603      	mov	r3, r0
   1310a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  attCb.handlerId = handlerId;
   1310e:	4a0c      	ldr	r2, [pc, #48]	; (13140 <AttHandlerInit+0x3c>)
   13110:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13114:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
   13118:	4b09      	ldr	r3, [pc, #36]	; (13140 <AttHandlerInit+0x3c>)
   1311a:	4a0a      	ldr	r2, [pc, #40]	; (13144 <AttHandlerInit+0x40>)
   1311c:	66da      	str	r2, [r3, #108]	; 0x6c
  attCb.pServer = &attFcnDefault;
   1311e:	4b08      	ldr	r3, [pc, #32]	; (13140 <AttHandlerInit+0x3c>)
   13120:	4a08      	ldr	r2, [pc, #32]	; (13144 <AttHandlerInit+0x40>)
   13122:	671a      	str	r2, [r3, #112]	; 0x70

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   13124:	4a08      	ldr	r2, [pc, #32]	; (13148 <AttHandlerInit+0x44>)
   13126:	4909      	ldr	r1, [pc, #36]	; (1314c <AttHandlerInit+0x48>)
   13128:	2004      	movs	r0, #4
   1312a:	f7f9 faa5 	bl	c678 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
   1312e:	4908      	ldr	r1, [pc, #32]	; (13150 <AttHandlerInit+0x4c>)
   13130:	2000      	movs	r0, #0
   13132:	f002 fccb 	bl	15acc <DmConnRegister>

}
   13136:	bf00      	nop
   13138:	b003      	add	sp, #12
   1313a:	f85d fb04 	ldr.w	pc, [sp], #4
   1313e:	bf00      	nop
   13140:	10008a98 	.word	0x10008a98
   13144:	0002c1fc 	.word	0x0002c1fc
   13148:	00012e3d 	.word	0x00012e3d
   1314c:	00012de5 	.word	0x00012de5
   13150:	00012ead 	.word	0x00012ead

00013154 <AttHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   13154:	b500      	push	{lr}
   13156:	b083      	sub	sp, #12
   13158:	4603      	mov	r3, r0
   1315a:	9100      	str	r1, [sp, #0]
   1315c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   13160:	9b00      	ldr	r3, [sp, #0]
   13162:	2b00      	cmp	r3, #0
   13164:	d00e      	beq.n	13184 <AttHandler+0x30>
  {
    if (pMsg->event >= ATTS_MSG_START)
   13166:	9b00      	ldr	r3, [sp, #0]
   13168:	789b      	ldrb	r3, [r3, #2]
   1316a:	2b1f      	cmp	r3, #31
   1316c:	d905      	bls.n	1317a <AttHandler+0x26>
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
   1316e:	4b07      	ldr	r3, [pc, #28]	; (1318c <AttHandler+0x38>)
   13170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   13172:	689b      	ldr	r3, [r3, #8]
   13174:	9800      	ldr	r0, [sp, #0]
   13176:	4798      	blx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   13178:	e004      	b.n	13184 <AttHandler+0x30>
      (*attCb.pClient->msgCback)(pMsg);
   1317a:	4b04      	ldr	r3, [pc, #16]	; (1318c <AttHandler+0x38>)
   1317c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1317e:	689b      	ldr	r3, [r3, #8]
   13180:	9800      	ldr	r0, [sp, #0]
   13182:	4798      	blx	r3
}
   13184:	bf00      	nop
   13186:	b003      	add	sp, #12
   13188:	f85d fb04 	ldr.w	pc, [sp], #4
   1318c:	10008a98 	.word	0x10008a98

00013190 <AttRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttRegister(attCback_t cback)
{
   13190:	b500      	push	{lr}
   13192:	b085      	sub	sp, #20
   13194:	9003      	str	r0, [sp, #12]
  attCb.cback = cback;
   13196:	4a0c      	ldr	r2, [pc, #48]	; (131c8 <AttRegister+0x38>)
   13198:	9b03      	ldr	r3, [sp, #12]
   1319a:	6753      	str	r3, [r2, #116]	; 0x74

  /* if configured MTU size is larger than maximum RX PDU length */
  if (pAttCfg->mtu > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   1319c:	f00c f9f4 	bl	1f588 <HciGetMaxRxAclLen>
   131a0:	4603      	mov	r3, r0
   131a2:	3b03      	subs	r3, #3
   131a4:	4a09      	ldr	r2, [pc, #36]	; (131cc <AttRegister+0x3c>)
   131a6:	6812      	ldr	r2, [r2, #0]
   131a8:	8892      	ldrh	r2, [r2, #4]
   131aa:	4293      	cmp	r3, r2
   131ac:	dc07      	bgt.n	131be <AttRegister+0x2e>
  {
    /* notify app about MTU misconfiguration */
    attExecCallback(0, DM_ERROR_IND, 0, DM_ERR_ATT_RX_PDU_LEN_EXCEEDED, 0);
   131ae:	2300      	movs	r3, #0
   131b0:	9300      	str	r3, [sp, #0]
   131b2:	2302      	movs	r3, #2
   131b4:	2200      	movs	r2, #0
   131b6:	2164      	movs	r1, #100	; 0x64
   131b8:	2000      	movs	r0, #0
   131ba:	f7ff ff57 	bl	1306c <attExecCallback>
  }
}
   131be:	bf00      	nop
   131c0:	b005      	add	sp, #20
   131c2:	f85d fb04 	ldr.w	pc, [sp], #4
   131c6:	bf00      	nop
   131c8:	10008a98 	.word	0x10008a98
   131cc:	10002bcc 	.word	0x10002bcc

000131d0 <AttConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttConnRegister(dmCback_t cback)
{
   131d0:	b082      	sub	sp, #8
   131d2:	9001      	str	r0, [sp, #4]
  attCb.connCback = cback;
   131d4:	4a02      	ldr	r2, [pc, #8]	; (131e0 <AttConnRegister+0x10>)
   131d6:	9b01      	ldr	r3, [sp, #4]
   131d8:	6793      	str	r3, [r2, #120]	; 0x78
}
   131da:	bf00      	nop
   131dc:	b002      	add	sp, #8
   131de:	4770      	bx	lr
   131e0:	10008a98 	.word	0x10008a98

000131e4 <AttMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttMsgFree(void *pMsg, uint8_t opcode)
{
   131e4:	b500      	push	{lr}
   131e6:	b085      	sub	sp, #20
   131e8:	9001      	str	r0, [sp, #4]
   131ea:	460b      	mov	r3, r1
   131ec:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t  hdrLen;

  WSF_ASSERT((opcode == ATT_PDU_VALUE_IND) || (opcode == ATT_PDU_VALUE_NTF));

  switch (opcode)
   131f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   131f4:	2b1b      	cmp	r3, #27
   131f6:	d001      	beq.n	131fc <AttMsgFree+0x18>
   131f8:	2b1d      	cmp	r3, #29
   131fa:	d103      	bne.n	13204 <AttMsgFree+0x20>
  {
    case ATT_PDU_VALUE_IND:
    case ATT_PDU_VALUE_NTF:
      hdrLen = ATT_VALUE_IND_NTF_BUF_LEN;
   131fc:	230b      	movs	r3, #11
   131fe:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   13202:	e003      	b.n	1320c <AttMsgFree+0x28>

    default:
      hdrLen = 0;
   13204:	2300      	movs	r3, #0
   13206:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1320a:	bf00      	nop
  }

  WsfMsgFree(((uint8_t *)pMsg) - hdrLen);
   1320c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13210:	425b      	negs	r3, r3
   13212:	9a01      	ldr	r2, [sp, #4]
   13214:	4413      	add	r3, r2
   13216:	4618      	mov	r0, r3
   13218:	f7f9 ffc4 	bl	d1a4 <WsfMsgFree>
}
   1321c:	bf00      	nop
   1321e:	b005      	add	sp, #20
   13220:	f85d fb04 	ldr.w	pc, [sp], #4

00013224 <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
   13224:	b500      	push	{lr}
   13226:	b083      	sub	sp, #12
   13228:	9001      	str	r0, [sp, #4]
   1322a:	9100      	str	r1, [sp, #0]
  SecRand(p_dest, p_size);
   1322c:	9b00      	ldr	r3, [sp, #0]
   1322e:	b2db      	uxtb	r3, r3
   13230:	4619      	mov	r1, r3
   13232:	9801      	ldr	r0, [sp, #4]
   13234:	f006 fdf2 	bl	19e1c <SecRand>
  return TRUE;
   13238:	2301      	movs	r3, #1
}
   1323a:	4618      	mov	r0, r3
   1323c:	b003      	add	sp, #12
   1323e:	f85d fb04 	ldr.w	pc, [sp], #4

00013242 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   13242:	b500      	push	{lr}
   13244:	b085      	sub	sp, #20
   13246:	4603      	mov	r3, r0
   13248:	f88d 3007 	strb.w	r3, [sp, #7]
   1324c:	460b      	mov	r3, r1
   1324e:	f8ad 3004 	strh.w	r3, [sp, #4]
   13252:	4613      	mov	r3, r2
   13254:	f88d 3006 	strb.w	r3, [sp, #6]
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   13258:	2064      	movs	r0, #100	; 0x64
   1325a:	f7f9 ff8b 	bl	d174 <WsfMsgAlloc>
   1325e:	9003      	str	r0, [sp, #12]

  if (pMsg)
   13260:	9b03      	ldr	r3, [sp, #12]
   13262:	2b00      	cmp	r3, #0
   13264:	d01a      	beq.n	1329c <SecEccGenKey+0x5a>
  {
    /* Generate the keys */
    uECC_make_key(pMsg->data.key.pubKey_x, pMsg->data.key.privKey);
   13266:	9b03      	ldr	r3, [sp, #12]
   13268:	1d1a      	adds	r2, r3, #4
   1326a:	9b03      	ldr	r3, [sp, #12]
   1326c:	3344      	adds	r3, #68	; 0x44
   1326e:	4619      	mov	r1, r3
   13270:	4610      	mov	r0, r2
   13272:	f005 fe2d 	bl	18ed0 <uECC_make_key>

    /* Send shared secret to handler */
    pMsg->hdr.event = event;
   13276:	9b03      	ldr	r3, [sp, #12]
   13278:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1327c:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   1327e:	9b03      	ldr	r3, [sp, #12]
   13280:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   13284:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = HCI_SUCCESS;
   13286:	9b03      	ldr	r3, [sp, #12]
   13288:	2200      	movs	r2, #0
   1328a:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1328c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13290:	9903      	ldr	r1, [sp, #12]
   13292:	4618      	mov	r0, r3
   13294:	f7f9 ff92 	bl	d1bc <WsfMsgSend>

    return TRUE;
   13298:	2301      	movs	r3, #1
   1329a:	e000      	b.n	1329e <SecEccGenKey+0x5c>
  }

  return FALSE;
   1329c:	2300      	movs	r3, #0
}
   1329e:	4618      	mov	r0, r3
   132a0:	b005      	add	sp, #20
   132a2:	f85d fb04 	ldr.w	pc, [sp], #4

000132a6 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   132a6:	b500      	push	{lr}
   132a8:	b085      	sub	sp, #20
   132aa:	9001      	str	r0, [sp, #4]
   132ac:	4608      	mov	r0, r1
   132ae:	4611      	mov	r1, r2
   132b0:	461a      	mov	r2, r3
   132b2:	4603      	mov	r3, r0
   132b4:	f88d 3003 	strb.w	r3, [sp, #3]
   132b8:	460b      	mov	r3, r1
   132ba:	f8ad 3000 	strh.w	r3, [sp]
   132be:	4613      	mov	r3, r2
   132c0:	f88d 3002 	strb.w	r3, [sp, #2]
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   132c4:	2064      	movs	r0, #100	; 0x64
   132c6:	f7f9 ff55 	bl	d174 <WsfMsgAlloc>
   132ca:	9003      	str	r0, [sp, #12]

  if (pMsg)
   132cc:	9b03      	ldr	r3, [sp, #12]
   132ce:	2b00      	cmp	r3, #0
   132d0:	d034      	beq.n	1333c <SecEccGenSharedSecret+0x96>
  {
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
   132d2:	9b01      	ldr	r3, [sp, #4]
   132d4:	4618      	mov	r0, r3
   132d6:	f005 fed7 	bl	19088 <uECC_valid_public_key>
   132da:	4603      	mov	r3, r0
   132dc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (keyValid)
   132e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   132e4:	2b00      	cmp	r3, #0
   132e6:	d009      	beq.n	132fc <SecEccGenSharedSecret+0x56>
    {
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
   132e8:	9801      	ldr	r0, [sp, #4]
   132ea:	9b01      	ldr	r3, [sp, #4]
   132ec:	f103 0140 	add.w	r1, r3, #64	; 0x40
   132f0:	9b03      	ldr	r3, [sp, #12]
   132f2:	3304      	adds	r3, #4
   132f4:	461a      	mov	r2, r3
   132f6:	f005 fe27 	bl	18f48 <uECC_shared_secret>
   132fa:	e006      	b.n	1330a <SecEccGenSharedSecret+0x64>
    }
    else
    {
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   132fc:	9b03      	ldr	r3, [sp, #12]
   132fe:	3304      	adds	r3, #4
   13300:	2220      	movs	r2, #32
   13302:	21ff      	movs	r1, #255	; 0xff
   13304:	4618      	mov	r0, r3
   13306:	f015 f899 	bl	2843c <memset>
    }

    /* Send shared secret to handler. */
    pMsg->hdr.event = event;
   1330a:	9b03      	ldr	r3, [sp, #12]
   1330c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   13310:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   13312:	9b03      	ldr	r3, [sp, #12]
   13314:	f8bd 2000 	ldrh.w	r2, [sp]
   13318:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   1331a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1331e:	2b00      	cmp	r3, #0
   13320:	d001      	beq.n	13326 <SecEccGenSharedSecret+0x80>
   13322:	2200      	movs	r2, #0
   13324:	e000      	b.n	13328 <SecEccGenSharedSecret+0x82>
   13326:	2212      	movs	r2, #18
   13328:	9b03      	ldr	r3, [sp, #12]
   1332a:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1332c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13330:	9903      	ldr	r1, [sp, #12]
   13332:	4618      	mov	r0, r3
   13334:	f7f9 ff42 	bl	d1bc <WsfMsgSend>

    return TRUE;
   13338:	2301      	movs	r3, #1
   1333a:	e000      	b.n	1333e <SecEccGenSharedSecret+0x98>
  }

  return FALSE;
   1333c:	2300      	movs	r3, #0
}
   1333e:	4618      	mov	r0, r3
   13340:	b005      	add	sp, #20
   13342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013348 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   13348:	b508      	push	{r3, lr}
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
   1334a:	4802      	ldr	r0, [pc, #8]	; (13354 <SecEccInit+0xc>)
   1334c:	f004 f9ea 	bl	17724 <uECC_set_rng>
}
   13350:	bf00      	nop
   13352:	bd08      	pop	{r3, pc}
   13354:	00013225 	.word	0x00013225

00013358 <AppDbInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
  return;
   13358:	bf00      	nop
}
   1335a:	4770      	bx	lr

0001335c <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr, bool_t master_role)
{
   1335c:	b500      	push	{lr}
   1335e:	b085      	sub	sp, #20
   13360:	4603      	mov	r3, r0
   13362:	9100      	str	r1, [sp, #0]
   13364:	f88d 3007 	strb.w	r3, [sp, #7]
   13368:	4613      	mov	r3, r2
   1336a:	f88d 3006 	strb.w	r3, [sp, #6]
  appDbRec_t  *pRec = appDb.rec;
   1336e:	4b28      	ldr	r3, [pc, #160]	; (13410 <AppDbNewRecord+0xb4>)
   13370:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13372:	2303      	movs	r3, #3
   13374:	f88d 300b 	strb.w	r3, [sp, #11]
   13378:	e00c      	b.n	13394 <AppDbNewRecord+0x38>
  {
    if (!pRec->inUse)
   1337a:	9b03      	ldr	r3, [sp, #12]
   1337c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   13380:	2b00      	cmp	r3, #0
   13382:	d00c      	beq.n	1339e <AppDbNewRecord+0x42>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13384:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13388:	3b01      	subs	r3, #1
   1338a:	f88d 300b 	strb.w	r3, [sp, #11]
   1338e:	9b03      	ldr	r3, [sp, #12]
   13390:	33c4      	adds	r3, #196	; 0xc4
   13392:	9303      	str	r3, [sp, #12]
   13394:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13398:	2b00      	cmp	r3, #0
   1339a:	d1ee      	bne.n	1337a <AppDbNewRecord+0x1e>
   1339c:	e000      	b.n	133a0 <AppDbNewRecord+0x44>
    {
      break;
   1339e:	bf00      	nop
    }
  }

  /* if all records were allocated */
  if (i == 0)
   133a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   133a4:	2b00      	cmp	r3, #0
   133a6:	d10f      	bne.n	133c8 <AppDbNewRecord+0x6c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   133a8:	4b1a      	ldr	r3, [pc, #104]	; (13414 <AppDbNewRecord+0xb8>)
   133aa:	681b      	ldr	r3, [r3, #0]
   133ac:	9303      	str	r3, [sp, #12]

    /* get next record to overwrite */
    pAppDbNewRec++;
   133ae:	4b19      	ldr	r3, [pc, #100]	; (13414 <AppDbNewRecord+0xb8>)
   133b0:	681b      	ldr	r3, [r3, #0]
   133b2:	33c4      	adds	r3, #196	; 0xc4
   133b4:	4a17      	ldr	r2, [pc, #92]	; (13414 <AppDbNewRecord+0xb8>)
   133b6:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   133b8:	4b16      	ldr	r3, [pc, #88]	; (13414 <AppDbNewRecord+0xb8>)
   133ba:	681b      	ldr	r3, [r3, #0]
   133bc:	4a16      	ldr	r2, [pc, #88]	; (13418 <AppDbNewRecord+0xbc>)
   133be:	4293      	cmp	r3, r2
   133c0:	d102      	bne.n	133c8 <AppDbNewRecord+0x6c>
    {
      pAppDbNewRec = appDb.rec;
   133c2:	4b14      	ldr	r3, [pc, #80]	; (13414 <AppDbNewRecord+0xb8>)
   133c4:	4a12      	ldr	r2, [pc, #72]	; (13410 <AppDbNewRecord+0xb4>)
   133c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   133c8:	22c4      	movs	r2, #196	; 0xc4
   133ca:	2100      	movs	r1, #0
   133cc:	9803      	ldr	r0, [sp, #12]
   133ce:	f015 f835 	bl	2843c <memset>
  pRec->inUse = TRUE;
   133d2:	9b03      	ldr	r3, [sp, #12]
   133d4:	2201      	movs	r2, #1
   133d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   133da:	9b03      	ldr	r3, [sp, #12]
   133dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   133e0:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   133e2:	9b03      	ldr	r3, [sp, #12]
   133e4:	9900      	ldr	r1, [sp, #0]
   133e6:	4618      	mov	r0, r3
   133e8:	f001 f85e 	bl	144a8 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   133ec:	9b03      	ldr	r3, [sp, #12]
   133ee:	2200      	movs	r2, #0
   133f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   133f4:	9b03      	ldr	r3, [sp, #12]
   133f6:	2200      	movs	r2, #0
   133f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pRec->master_role = master_role;
   133fc:	9b03      	ldr	r3, [sp, #12]
   133fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
   13402:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
  
  return (appDbHdl_t) pRec;
   13406:	9b03      	ldr	r3, [sp, #12]
}
   13408:	4618      	mov	r0, r3
   1340a:	b005      	add	sp, #20
   1340c:	f85d fb04 	ldr.w	pc, [sp], #4
   13410:	100041e4 	.word	0x100041e4
   13414:	10002b68 	.word	0x10002b68
   13418:	10004430 	.word	0x10004430

0001341c <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   1341c:	b500      	push	{lr}
   1341e:	b085      	sub	sp, #20
   13420:	9001      	str	r0, [sp, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   13422:	9b01      	ldr	r3, [sp, #4]
   13424:	2b00      	cmp	r3, #0
   13426:	d102      	bne.n	1342e <AppDbGetNextRecord+0x12>
  {
    pRec = appDb.rec;
   13428:	4b14      	ldr	r3, [pc, #80]	; (1347c <AppDbGetNextRecord+0x60>)
   1342a:	9303      	str	r3, [sp, #12]
   1342c:	e01c      	b.n	13468 <AppDbGetNextRecord+0x4c>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   1342e:	9801      	ldr	r0, [sp, #4]
   13430:	f000 f852 	bl	134d8 <AppDbRecordInUse>
   13434:	4603      	mov	r3, r0
   13436:	2b00      	cmp	r3, #0
   13438:	d005      	beq.n	13446 <AppDbGetNextRecord+0x2a>
  {
    pRec = (appDbRec_t *)hdl;
   1343a:	9b01      	ldr	r3, [sp, #4]
   1343c:	9303      	str	r3, [sp, #12]
    pRec++;
   1343e:	9b03      	ldr	r3, [sp, #12]
   13440:	33c4      	adds	r3, #196	; 0xc4
   13442:	9303      	str	r3, [sp, #12]
   13444:	e010      	b.n	13468 <AppDbGetNextRecord+0x4c>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   13446:	2300      	movs	r3, #0
   13448:	e013      	b.n	13472 <AppDbGetNextRecord+0x56>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   1344a:	9b03      	ldr	r3, [sp, #12]
   1344c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   13450:	2b00      	cmp	r3, #0
   13452:	d006      	beq.n	13462 <AppDbGetNextRecord+0x46>
   13454:	9b03      	ldr	r3, [sp, #12]
   13456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1345a:	2b00      	cmp	r3, #0
   1345c:	d001      	beq.n	13462 <AppDbGetNextRecord+0x46>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   1345e:	9b03      	ldr	r3, [sp, #12]
   13460:	e007      	b.n	13472 <AppDbGetNextRecord+0x56>
    }

    /* look for next record */
    pRec++;
   13462:	9b03      	ldr	r3, [sp, #12]
   13464:	33c4      	adds	r3, #196	; 0xc4
   13466:	9303      	str	r3, [sp, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   13468:	9b03      	ldr	r3, [sp, #12]
   1346a:	4a05      	ldr	r2, [pc, #20]	; (13480 <AppDbGetNextRecord+0x64>)
   1346c:	4293      	cmp	r3, r2
   1346e:	d3ec      	bcc.n	1344a <AppDbGetNextRecord+0x2e>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   13470:	2300      	movs	r3, #0
}
   13472:	4618      	mov	r0, r3
   13474:	b005      	add	sp, #20
   13476:	f85d fb04 	ldr.w	pc, [sp], #4
   1347a:	bf00      	nop
   1347c:	100041e4 	.word	0x100041e4
   13480:	10004430 	.word	0x10004430

00013484 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   13484:	b082      	sub	sp, #8
   13486:	9001      	str	r0, [sp, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   13488:	9b01      	ldr	r3, [sp, #4]
   1348a:	2200      	movs	r2, #0
   1348c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   13490:	bf00      	nop
   13492:	b002      	add	sp, #8
   13494:	4770      	bx	lr

00013496 <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   13496:	b082      	sub	sp, #8
   13498:	9001      	str	r0, [sp, #4]
   1349a:	460b      	mov	r3, r1
   1349c:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   134a0:	9b01      	ldr	r3, [sp, #4]
   134a2:	2201      	movs	r2, #1
   134a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   134a8:	9b01      	ldr	r3, [sp, #4]
   134aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   134ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   134b2:	bf00      	nop
   134b4:	b002      	add	sp, #8
   134b6:	4770      	bx	lr

000134b8 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   134b8:	b500      	push	{lr}
   134ba:	b083      	sub	sp, #12
   134bc:	9001      	str	r0, [sp, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   134be:	9b01      	ldr	r3, [sp, #4]
   134c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   134c4:	2b00      	cmp	r3, #0
   134c6:	d102      	bne.n	134ce <AppDbCheckValidRecord+0x16>
  {
    AppDbDeleteRecord(hdl);
   134c8:	9801      	ldr	r0, [sp, #4]
   134ca:	f7ff ffdb 	bl	13484 <AppDbDeleteRecord>
  }
}
   134ce:	bf00      	nop
   134d0:	b003      	add	sp, #12
   134d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000134d8 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   134d8:	b084      	sub	sp, #16
   134da:	9001      	str	r0, [sp, #4]
  appDbRec_t  *pRec = appDb.rec;
   134dc:	4b12      	ldr	r3, [pc, #72]	; (13528 <AppDbRecordInUse+0x50>)
   134de:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   134e0:	2303      	movs	r3, #3
   134e2:	f88d 300b 	strb.w	r3, [sp, #11]
   134e6:	e017      	b.n	13518 <AppDbRecordInUse+0x40>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   134e8:	9b03      	ldr	r3, [sp, #12]
   134ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   134ee:	2b00      	cmp	r3, #0
   134f0:	d00a      	beq.n	13508 <AppDbRecordInUse+0x30>
   134f2:	9b03      	ldr	r3, [sp, #12]
   134f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   134f8:	2b00      	cmp	r3, #0
   134fa:	d005      	beq.n	13508 <AppDbRecordInUse+0x30>
   134fc:	9a03      	ldr	r2, [sp, #12]
   134fe:	9b01      	ldr	r3, [sp, #4]
   13500:	429a      	cmp	r2, r3
   13502:	d101      	bne.n	13508 <AppDbRecordInUse+0x30>
    {
      return TRUE;
   13504:	2301      	movs	r3, #1
   13506:	e00c      	b.n	13522 <AppDbRecordInUse+0x4a>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13508:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1350c:	3b01      	subs	r3, #1
   1350e:	f88d 300b 	strb.w	r3, [sp, #11]
   13512:	9b03      	ldr	r3, [sp, #12]
   13514:	33c4      	adds	r3, #196	; 0xc4
   13516:	9303      	str	r3, [sp, #12]
   13518:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d1e3      	bne.n	134e8 <AppDbRecordInUse+0x10>
    }
  }

  return FALSE;
   13520:	2300      	movs	r3, #0
}
   13522:	4618      	mov	r0, r3
   13524:	b004      	add	sp, #16
   13526:	4770      	bx	lr
   13528:	100041e4 	.word	0x100041e4

0001352c <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   1352c:	b082      	sub	sp, #8
  appDbRec_t  *pRec = appDb.rec;
   1352e:	4b11      	ldr	r3, [pc, #68]	; (13574 <AppDbCheckBonded+0x48>)
   13530:	9301      	str	r3, [sp, #4]
  uint8_t     i;

  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13532:	2303      	movs	r3, #3
   13534:	f88d 3003 	strb.w	r3, [sp, #3]
   13538:	e013      	b.n	13562 <AppDbCheckBonded+0x36>
  {
    if (pRec->inUse && !pRec->master_role)
   1353a:	9b01      	ldr	r3, [sp, #4]
   1353c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   13540:	2b00      	cmp	r3, #0
   13542:	d006      	beq.n	13552 <AppDbCheckBonded+0x26>
   13544:	9b01      	ldr	r3, [sp, #4]
   13546:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   1354a:	2b00      	cmp	r3, #0
   1354c:	d101      	bne.n	13552 <AppDbCheckBonded+0x26>
    {
      return TRUE;
   1354e:	2301      	movs	r3, #1
   13550:	e00c      	b.n	1356c <AppDbCheckBonded+0x40>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13552:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13556:	3b01      	subs	r3, #1
   13558:	f88d 3003 	strb.w	r3, [sp, #3]
   1355c:	9b01      	ldr	r3, [sp, #4]
   1355e:	33c4      	adds	r3, #196	; 0xc4
   13560:	9301      	str	r3, [sp, #4]
   13562:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13566:	2b00      	cmp	r3, #0
   13568:	d1e7      	bne.n	1353a <AppDbCheckBonded+0xe>
    }
  }

  return FALSE;
   1356a:	2300      	movs	r3, #0
}
   1356c:	4618      	mov	r0, r3
   1356e:	b002      	add	sp, #8
   13570:	4770      	bx	lr
   13572:	bf00      	nop
   13574:	100041e4 	.word	0x100041e4

00013578 <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   13578:	b082      	sub	sp, #8
  appDbRec_t  *pRec = appDb.rec;
   1357a:	4b0d      	ldr	r3, [pc, #52]	; (135b0 <AppDbDeleteAllRecords+0x38>)
   1357c:	9301      	str	r3, [sp, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1357e:	2303      	movs	r3, #3
   13580:	f88d 3003 	strb.w	r3, [sp, #3]
   13584:	e00b      	b.n	1359e <AppDbDeleteAllRecords+0x26>
  {
    pRec->inUse = FALSE;
   13586:	9b01      	ldr	r3, [sp, #4]
   13588:	2200      	movs	r2, #0
   1358a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1358e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13592:	3b01      	subs	r3, #1
   13594:	f88d 3003 	strb.w	r3, [sp, #3]
   13598:	9b01      	ldr	r3, [sp, #4]
   1359a:	33c4      	adds	r3, #196	; 0xc4
   1359c:	9301      	str	r3, [sp, #4]
   1359e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   135a2:	2b00      	cmp	r3, #0
   135a4:	d1ef      	bne.n	13586 <AppDbDeleteAllRecords+0xe>
  }
}
   135a6:	bf00      	nop
   135a8:	bf00      	nop
   135aa:	b002      	add	sp, #8
   135ac:	4770      	bx	lr
   135ae:	bf00      	nop
   135b0:	100041e4 	.word	0x100041e4

000135b4 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   135b4:	b500      	push	{lr}
   135b6:	b085      	sub	sp, #20
   135b8:	4603      	mov	r3, r0
   135ba:	9100      	str	r1, [sp, #0]
   135bc:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbRec_t  *pRec = appDb.rec;
   135c0:	4b19      	ldr	r3, [pc, #100]	; (13628 <AppDbFindByAddr+0x74>)
   135c2:	9303      	str	r3, [sp, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   135c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   135c8:	4618      	mov	r0, r3
   135ca:	f003 f941 	bl	16850 <DmHostAddrType>
   135ce:	4603      	mov	r3, r0
   135d0:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   135d4:	2303      	movs	r3, #3
   135d6:	f88d 300b 	strb.w	r3, [sp, #11]
   135da:	e01c      	b.n	13616 <AppDbFindByAddr+0x62>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   135dc:	9b03      	ldr	r3, [sp, #12]
   135de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   135e2:	2b00      	cmp	r3, #0
   135e4:	d00f      	beq.n	13606 <AppDbFindByAddr+0x52>
   135e6:	9b03      	ldr	r3, [sp, #12]
   135e8:	799b      	ldrb	r3, [r3, #6]
   135ea:	f89d 200a 	ldrb.w	r2, [sp, #10]
   135ee:	429a      	cmp	r2, r3
   135f0:	d109      	bne.n	13606 <AppDbFindByAddr+0x52>
   135f2:	9b03      	ldr	r3, [sp, #12]
   135f4:	9900      	ldr	r1, [sp, #0]
   135f6:	4618      	mov	r0, r3
   135f8:	f000 ff63 	bl	144c2 <BdaCmp>
   135fc:	4603      	mov	r3, r0
   135fe:	2b00      	cmp	r3, #0
   13600:	d001      	beq.n	13606 <AppDbFindByAddr+0x52>
    {
      return (appDbHdl_t) pRec;
   13602:	9b03      	ldr	r3, [sp, #12]
   13604:	e00c      	b.n	13620 <AppDbFindByAddr+0x6c>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13606:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1360a:	3b01      	subs	r3, #1
   1360c:	f88d 300b 	strb.w	r3, [sp, #11]
   13610:	9b03      	ldr	r3, [sp, #12]
   13612:	33c4      	adds	r3, #196	; 0xc4
   13614:	9303      	str	r3, [sp, #12]
   13616:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1361a:	2b00      	cmp	r3, #0
   1361c:	d1de      	bne.n	135dc <AppDbFindByAddr+0x28>
    }
  }

  return APP_DB_HDL_NONE;
   1361e:	2300      	movs	r3, #0
}
   13620:	4618      	mov	r0, r3
   13622:	b005      	add	sp, #20
   13624:	f85d fb04 	ldr.w	pc, [sp], #4
   13628:	100041e4 	.word	0x100041e4

0001362c <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   1362c:	b500      	push	{lr}
   1362e:	b085      	sub	sp, #20
   13630:	4603      	mov	r3, r0
   13632:	9100      	str	r1, [sp, #0]
   13634:	f8ad 3006 	strh.w	r3, [sp, #6]
  appDbRec_t  *pRec = appDb.rec;
   13638:	4b17      	ldr	r3, [pc, #92]	; (13698 <AppDbFindByLtkReq+0x6c>)
   1363a:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1363c:	2303      	movs	r3, #3
   1363e:	f88d 300b 	strb.w	r3, [sp, #11]
   13642:	e01f      	b.n	13684 <AppDbFindByLtkReq+0x58>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   13644:	9b03      	ldr	r3, [sp, #12]
   13646:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1364a:	2b00      	cmp	r3, #0
   1364c:	d012      	beq.n	13674 <AppDbFindByLtkReq+0x48>
   1364e:	9b03      	ldr	r3, [sp, #12]
   13650:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   13654:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   13658:	429a      	cmp	r2, r3
   1365a:	d10b      	bne.n	13674 <AppDbFindByLtkReq+0x48>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   1365c:	9b03      	ldr	r3, [sp, #12]
   1365e:	3344      	adds	r3, #68	; 0x44
   13660:	2208      	movs	r2, #8
   13662:	9900      	ldr	r1, [sp, #0]
   13664:	4618      	mov	r0, r3
   13666:	f014 feb9 	bl	283dc <memcmp>
   1366a:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1366c:	2b00      	cmp	r3, #0
   1366e:	d101      	bne.n	13674 <AppDbFindByLtkReq+0x48>
    {
      return (appDbHdl_t) pRec;
   13670:	9b03      	ldr	r3, [sp, #12]
   13672:	e00c      	b.n	1368e <AppDbFindByLtkReq+0x62>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13674:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13678:	3b01      	subs	r3, #1
   1367a:	f88d 300b 	strb.w	r3, [sp, #11]
   1367e:	9b03      	ldr	r3, [sp, #12]
   13680:	33c4      	adds	r3, #196	; 0xc4
   13682:	9303      	str	r3, [sp, #12]
   13684:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13688:	2b00      	cmp	r3, #0
   1368a:	d1db      	bne.n	13644 <AppDbFindByLtkReq+0x18>
    }
  }

  return APP_DB_HDL_NONE;
   1368c:	2300      	movs	r3, #0
}
   1368e:	4618      	mov	r0, r3
   13690:	b005      	add	sp, #20
   13692:	f85d fb04 	ldr.w	pc, [sp], #4
   13696:	bf00      	nop
   13698:	100041e4 	.word	0x100041e4

0001369c <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   1369c:	b086      	sub	sp, #24
   1369e:	9003      	str	r0, [sp, #12]
   136a0:	460b      	mov	r3, r1
   136a2:	9201      	str	r2, [sp, #4]
   136a4:	f88d 300b 	strb.w	r3, [sp, #11]
  dmSecKey_t *pKey = NULL;
   136a8:	2300      	movs	r3, #0
   136aa:	9305      	str	r3, [sp, #20]

  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   136ac:	9b03      	ldr	r3, [sp, #12]
   136ae:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   136b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   136b6:	4013      	ands	r3, r2
   136b8:	b2db      	uxtb	r3, r3
   136ba:	2b00      	cmp	r3, #0
   136bc:	d032      	beq.n	13724 <AppDbGetKey+0x88>
  {
    switch(type)
   136be:	f89d 300b 	ldrb.w	r3, [sp, #11]
   136c2:	3b01      	subs	r3, #1
   136c4:	2b07      	cmp	r3, #7
   136c6:	d82f      	bhi.n	13728 <AppDbGetKey+0x8c>
   136c8:	a201      	add	r2, pc, #4	; (adr r2, 136d0 <AppDbGetKey+0x34>)
   136ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   136ce:	bf00      	nop
   136d0:	000136f1 	.word	0x000136f1
   136d4:	00013703 	.word	0x00013703
   136d8:	00013729 	.word	0x00013729
   136dc:	00013715 	.word	0x00013715
   136e0:	00013729 	.word	0x00013729
   136e4:	00013729 	.word	0x00013729
   136e8:	00013729 	.word	0x00013729
   136ec:	0001371d 	.word	0x0001371d
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   136f0:	9b03      	ldr	r3, [sp, #12]
   136f2:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   136f6:	9b01      	ldr	r3, [sp, #4]
   136f8:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   136fa:	9b03      	ldr	r3, [sp, #12]
   136fc:	3334      	adds	r3, #52	; 0x34
   136fe:	9305      	str	r3, [sp, #20]
        break;
   13700:	e013      	b.n	1372a <AppDbGetKey+0x8e>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   13702:	9b03      	ldr	r3, [sp, #12]
   13704:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   13708:	9b01      	ldr	r3, [sp, #4]
   1370a:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   1370c:	9b03      	ldr	r3, [sp, #12]
   1370e:	3350      	adds	r3, #80	; 0x50
   13710:	9305      	str	r3, [sp, #20]
        break;
   13712:	e00a      	b.n	1372a <AppDbGetKey+0x8e>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   13714:	9b03      	ldr	r3, [sp, #12]
   13716:	3307      	adds	r3, #7
   13718:	9305      	str	r3, [sp, #20]
        break;
   1371a:	e006      	b.n	1372a <AppDbGetKey+0x8e>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   1371c:	9b03      	ldr	r3, [sp, #12]
   1371e:	331e      	adds	r3, #30
   13720:	9305      	str	r3, [sp, #20]
        break;
   13722:	e002      	b.n	1372a <AppDbGetKey+0x8e>

      default:
        break;
    }
  }
   13724:	bf00      	nop
   13726:	e000      	b.n	1372a <AppDbGetKey+0x8e>
        break;
   13728:	bf00      	nop

  return pKey;
   1372a:	9b05      	ldr	r3, [sp, #20]
}
   1372c:	4618      	mov	r0, r3
   1372e:	b006      	add	sp, #24
   13730:	4770      	bx	lr
   13732:	bf00      	nop

00013734 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   13734:	b530      	push	{r4, r5, lr}
   13736:	b083      	sub	sp, #12
   13738:	9001      	str	r0, [sp, #4]
   1373a:	9100      	str	r1, [sp, #0]
  switch(pKey->type)
   1373c:	9b00      	ldr	r3, [sp, #0]
   1373e:	7f9b      	ldrb	r3, [r3, #30]
   13740:	3b01      	subs	r3, #1
   13742:	2b07      	cmp	r3, #7
   13744:	d86b      	bhi.n	1381e <AppDbSetKey+0xea>
   13746:	a201      	add	r2, pc, #4	; (adr r2, 1374c <AppDbSetKey+0x18>)
   13748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1374c:	0001376d 	.word	0x0001376d
   13750:	00013797 	.word	0x00013797
   13754:	0001381f 	.word	0x0001381f
   13758:	000137c1 	.word	0x000137c1
   1375c:	0001381f 	.word	0x0001381f
   13760:	0001381f 	.word	0x0001381f
   13764:	0001381f 	.word	0x0001381f
   13768:	000137fd 	.word	0x000137fd
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   1376c:	9b00      	ldr	r3, [sp, #0]
   1376e:	7fda      	ldrb	r2, [r3, #31]
   13770:	9b01      	ldr	r3, [sp, #4]
   13772:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   13776:	9a01      	ldr	r2, [sp, #4]
   13778:	9b00      	ldr	r3, [sp, #0]
   1377a:	f102 0434 	add.w	r4, r2, #52	; 0x34
   1377e:	1d1d      	adds	r5, r3, #4
   13780:	6828      	ldr	r0, [r5, #0]
   13782:	6869      	ldr	r1, [r5, #4]
   13784:	68aa      	ldr	r2, [r5, #8]
   13786:	68eb      	ldr	r3, [r5, #12]
   13788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1378a:	6928      	ldr	r0, [r5, #16]
   1378c:	6969      	ldr	r1, [r5, #20]
   1378e:	c403      	stmia	r4!, {r0, r1}
   13790:	8b2b      	ldrh	r3, [r5, #24]
   13792:	8023      	strh	r3, [r4, #0]
      break;
   13794:	e044      	b.n	13820 <AppDbSetKey+0xec>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   13796:	9b00      	ldr	r3, [sp, #0]
   13798:	7fda      	ldrb	r2, [r3, #31]
   1379a:	9b01      	ldr	r3, [sp, #4]
   1379c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   137a0:	9a01      	ldr	r2, [sp, #4]
   137a2:	9b00      	ldr	r3, [sp, #0]
   137a4:	f102 0450 	add.w	r4, r2, #80	; 0x50
   137a8:	1d1d      	adds	r5, r3, #4
   137aa:	6828      	ldr	r0, [r5, #0]
   137ac:	6869      	ldr	r1, [r5, #4]
   137ae:	68aa      	ldr	r2, [r5, #8]
   137b0:	68eb      	ldr	r3, [r5, #12]
   137b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   137b4:	6928      	ldr	r0, [r5, #16]
   137b6:	6969      	ldr	r1, [r5, #20]
   137b8:	c403      	stmia	r4!, {r0, r1}
   137ba:	8b2b      	ldrh	r3, [r5, #24]
   137bc:	8023      	strh	r3, [r4, #0]
      break;
   137be:	e02f      	b.n	13820 <AppDbSetKey+0xec>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   137c0:	9b01      	ldr	r3, [sp, #4]
   137c2:	9a00      	ldr	r2, [sp, #0]
   137c4:	3307      	adds	r3, #7
   137c6:	3204      	adds	r2, #4
   137c8:	6811      	ldr	r1, [r2, #0]
   137ca:	6855      	ldr	r5, [r2, #4]
   137cc:	6894      	ldr	r4, [r2, #8]
   137ce:	68d0      	ldr	r0, [r2, #12]
   137d0:	6019      	str	r1, [r3, #0]
   137d2:	605d      	str	r5, [r3, #4]
   137d4:	609c      	str	r4, [r3, #8]
   137d6:	60d8      	str	r0, [r3, #12]
   137d8:	6911      	ldr	r1, [r2, #16]
   137da:	6119      	str	r1, [r3, #16]
   137dc:	8a91      	ldrh	r1, [r2, #20]
   137de:	7d92      	ldrb	r2, [r2, #22]
   137e0:	8299      	strh	r1, [r3, #20]
   137e2:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   137e4:	9b00      	ldr	r3, [sp, #0]
   137e6:	7e9a      	ldrb	r2, [r3, #26]
   137e8:	9b01      	ldr	r3, [sp, #4]
   137ea:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   137ec:	9a01      	ldr	r2, [sp, #4]
   137ee:	9b00      	ldr	r3, [sp, #0]
   137f0:	3314      	adds	r3, #20
   137f2:	4619      	mov	r1, r3
   137f4:	4610      	mov	r0, r2
   137f6:	f000 fe57 	bl	144a8 <BdaCpy>
      break;
   137fa:	e011      	b.n	13820 <AppDbSetKey+0xec>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   137fc:	9b01      	ldr	r3, [sp, #4]
   137fe:	9a00      	ldr	r2, [sp, #0]
   13800:	331e      	adds	r3, #30
   13802:	3204      	adds	r2, #4
   13804:	6814      	ldr	r4, [r2, #0]
   13806:	6850      	ldr	r0, [r2, #4]
   13808:	6891      	ldr	r1, [r2, #8]
   1380a:	68d2      	ldr	r2, [r2, #12]
   1380c:	601c      	str	r4, [r3, #0]
   1380e:	6058      	str	r0, [r3, #4]
   13810:	6099      	str	r1, [r3, #8]
   13812:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   13814:	9b01      	ldr	r3, [sp, #4]
   13816:	2200      	movs	r2, #0
   13818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   1381c:	e000      	b.n	13820 <AppDbSetKey+0xec>

    default:
      break;
   1381e:	bf00      	nop
  }
}
   13820:	bf00      	nop
   13822:	b003      	add	sp, #12
   13824:	bd30      	pop	{r4, r5, pc}
   13826:	bf00      	nop

00013828 <AppDbGetPeerDbHash>:
 *
 *  \return Pointer to database hash.
 */
/*************************************************************************************************/
uint8_t *AppDbGetPeerDbHash(appDbHdl_t hdl)
{
   13828:	b082      	sub	sp, #8
   1382a:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->dbHash;
   1382c:	9b01      	ldr	r3, [sp, #4]
   1382e:	3387      	adds	r3, #135	; 0x87
}
   13830:	4618      	mov	r0, r3
   13832:	b002      	add	sp, #8
   13834:	4770      	bx	lr

00013836 <AppDbSetPeerDbHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerDbHash(appDbHdl_t hdl, uint8_t *pDbHash)
{
   13836:	b500      	push	{lr}
   13838:	b083      	sub	sp, #12
   1383a:	9001      	str	r0, [sp, #4]
   1383c:	9100      	str	r1, [sp, #0]
  WSF_ASSERT(pDbHash != NULL);

  memcpy(((appDbRec_t *) hdl)->dbHash, pDbHash, ATT_DATABASE_HASH_LEN);
   1383e:	9b01      	ldr	r3, [sp, #4]
   13840:	3387      	adds	r3, #135	; 0x87
   13842:	2210      	movs	r2, #16
   13844:	9900      	ldr	r1, [sp, #0]
   13846:	4618      	mov	r0, r3
   13848:	f7f8 fc5a 	bl	c100 <memcpy>
}
   1384c:	bf00      	nop
   1384e:	b003      	add	sp, #12
   13850:	f85d fb04 	ldr.w	pc, [sp], #4

00013854 <AppDbIsCacheCheckedByHash>:
 *
 *  \return \ref TRUE if peer's database hash must be read to verify handles have not changed.
 */
/*************************************************************************************************/
bool_t AppDbIsCacheCheckedByHash(appDbHdl_t hdl)
{
   13854:	b082      	sub	sp, #8
   13856:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->cacheByHash;
   13858:	9b01      	ldr	r3, [sp, #4]
   1385a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
}
   1385e:	4618      	mov	r0, r3
   13860:	b002      	add	sp, #8
   13862:	4770      	bx	lr

00013864 <AppDbSetCacheByHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCacheByHash(appDbHdl_t hdl, bool_t cacheByHash)
{
   13864:	b082      	sub	sp, #8
   13866:	9001      	str	r0, [sp, #4]
   13868:	460b      	mov	r3, r1
   1386a:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *) hdl)->cacheByHash = cacheByHash;
   1386e:	9b01      	ldr	r3, [sp, #4]
   13870:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13874:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
   13878:	bf00      	nop
   1387a:	b002      	add	sp, #8
   1387c:	4770      	bx	lr

0001387e <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   1387e:	b082      	sub	sp, #8
   13880:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   13882:	9b01      	ldr	r3, [sp, #4]
   13884:	336c      	adds	r3, #108	; 0x6c
}
   13886:	4618      	mov	r0, r3
   13888:	b002      	add	sp, #8
   1388a:	4770      	bx	lr

0001388c <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   1388c:	b082      	sub	sp, #8
   1388e:	9001      	str	r0, [sp, #4]
   13890:	460b      	mov	r3, r1
   13892:	f8ad 3002 	strh.w	r3, [sp, #2]
   13896:	4613      	mov	r3, r2
   13898:	f8ad 3000 	strh.w	r3, [sp]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);

  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   1389c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   138a0:	9a01      	ldr	r2, [sp, #4]
   138a2:	3334      	adds	r3, #52	; 0x34
   138a4:	005b      	lsls	r3, r3, #1
   138a6:	4413      	add	r3, r2
   138a8:	f8bd 2000 	ldrh.w	r2, [sp]
   138ac:	809a      	strh	r2, [r3, #4]
}
   138ae:	bf00      	nop
   138b0:	b002      	add	sp, #8
   138b2:	4770      	bx	lr

000138b4 <AppDbGetCsfRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbGetCsfRecord(appDbHdl_t hdl, uint8_t *pChangeAwareState, uint8_t **pCsf)
{
   138b4:	b084      	sub	sp, #16
   138b6:	9003      	str	r0, [sp, #12]
   138b8:	9102      	str	r1, [sp, #8]
   138ba:	9201      	str	r2, [sp, #4]
  *pChangeAwareState = ((appDbRec_t *)hdl)->changeAwareState;
   138bc:	9b03      	ldr	r3, [sp, #12]
   138be:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
   138c2:	9b02      	ldr	r3, [sp, #8]
   138c4:	701a      	strb	r2, [r3, #0]
  *pCsf = ((appDbRec_t *) hdl)->csf;
   138c6:	9b03      	ldr	r3, [sp, #12]
   138c8:	f103 0285 	add.w	r2, r3, #133	; 0x85
   138cc:	9b01      	ldr	r3, [sp, #4]
   138ce:	601a      	str	r2, [r3, #0]
}
   138d0:	bf00      	nop
   138d2:	b004      	add	sp, #16
   138d4:	4770      	bx	lr

000138d6 <AppDbSetCsfRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCsfRecord(appDbHdl_t hdl, uint8_t changeAwareState, uint8_t *pCsf)
{
   138d6:	b084      	sub	sp, #16
   138d8:	9003      	str	r0, [sp, #12]
   138da:	460b      	mov	r3, r1
   138dc:	9201      	str	r2, [sp, #4]
   138de:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((pCsf != NULL) && (hdl != APP_DB_HDL_NONE))
   138e2:	9b01      	ldr	r3, [sp, #4]
   138e4:	2b00      	cmp	r3, #0
   138e6:	d00c      	beq.n	13902 <AppDbSetCsfRecord+0x2c>
   138e8:	9b03      	ldr	r3, [sp, #12]
   138ea:	2b00      	cmp	r3, #0
   138ec:	d009      	beq.n	13902 <AppDbSetCsfRecord+0x2c>
  {
    ((appDbRec_t *) hdl)->changeAwareState = changeAwareState;
   138ee:	9b03      	ldr	r3, [sp, #12]
   138f0:	f89d 200b 	ldrb.w	r2, [sp, #11]
   138f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    memcpy(&((appDbRec_t *) hdl)->csf, pCsf, ATT_CSF_LEN);
   138f8:	9b03      	ldr	r3, [sp, #12]
   138fa:	3385      	adds	r3, #133	; 0x85
   138fc:	9a01      	ldr	r2, [sp, #4]
   138fe:	7812      	ldrb	r2, [r2, #0]
   13900:	701a      	strb	r2, [r3, #0]
  }
}
   13902:	bf00      	nop
   13904:	b004      	add	sp, #16
   13906:	4770      	bx	lr

00013908 <AppDbSetClientsChangeAwareState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetClientsChangeAwareState(appDbHdl_t hdl, uint8_t state)
{
   13908:	b084      	sub	sp, #16
   1390a:	9001      	str	r0, [sp, #4]
   1390c:	460b      	mov	r3, r1
   1390e:	f88d 3003 	strb.w	r3, [sp, #3]
  if (hdl == APP_DB_HDL_NONE)
   13912:	9b01      	ldr	r3, [sp, #4]
   13914:	2b00      	cmp	r3, #0
   13916:	d117      	bne.n	13948 <AppDbSetClientsChangeAwareState+0x40>
  {
    appDbRec_t  *pRec = appDb.rec;
   13918:	4b0f      	ldr	r3, [pc, #60]	; (13958 <AppDbSetClientsChangeAwareState+0x50>)
   1391a:	9303      	str	r3, [sp, #12]
    uint8_t     i;

    /* Set all clients status to change-unaware. */
    for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1391c:	2303      	movs	r3, #3
   1391e:	f88d 300b 	strb.w	r3, [sp, #11]
   13922:	e00c      	b.n	1393e <AppDbSetClientsChangeAwareState+0x36>
    {
      pRec->changeAwareState = state;
   13924:	9b03      	ldr	r3, [sp, #12]
   13926:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1392a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1392e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13932:	3b01      	subs	r3, #1
   13934:	f88d 300b 	strb.w	r3, [sp, #11]
   13938:	9b03      	ldr	r3, [sp, #12]
   1393a:	33c4      	adds	r3, #196	; 0xc4
   1393c:	9303      	str	r3, [sp, #12]
   1393e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13942:	2b00      	cmp	r3, #0
   13944:	d1ee      	bne.n	13924 <AppDbSetClientsChangeAwareState+0x1c>
  }
  else
  {
    ((appDbRec_t *) hdl)->changeAwareState = state;
  }
}
   13946:	e004      	b.n	13952 <AppDbSetClientsChangeAwareState+0x4a>
    ((appDbRec_t *) hdl)->changeAwareState = state;
   13948:	9b01      	ldr	r3, [sp, #4]
   1394a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1394e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
   13952:	bf00      	nop
   13954:	b004      	add	sp, #16
   13956:	4770      	bx	lr
   13958:	100041e4 	.word	0x100041e4

0001395c <AppDbGetDbHash>:
 *  \return Pointer to database hash.
 */
/*************************************************************************************************/
uint8_t *AppDbGetDbHash(void)
{
  return appDb.dbHash;
   1395c:	4b01      	ldr	r3, [pc, #4]	; (13964 <AppDbGetDbHash+0x8>)
}
   1395e:	4618      	mov	r0, r3
   13960:	4770      	bx	lr
   13962:	bf00      	nop
   13964:	10004445 	.word	0x10004445

00013968 <AppDbSetDbHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDbHash(uint8_t *pHash)
{
   13968:	b410      	push	{r4}
   1396a:	b083      	sub	sp, #12
   1396c:	9001      	str	r0, [sp, #4]
  if (pHash != NULL)
   1396e:	9b01      	ldr	r3, [sp, #4]
   13970:	2b00      	cmp	r3, #0
   13972:	d00b      	beq.n	1398c <AppDbSetDbHash+0x24>
  {
    memcpy(appDb.dbHash, pHash, ATT_DATABASE_HASH_LEN);
   13974:	4b08      	ldr	r3, [pc, #32]	; (13998 <AppDbSetDbHash+0x30>)
   13976:	9a01      	ldr	r2, [sp, #4]
   13978:	f203 2361 	addw	r3, r3, #609	; 0x261
   1397c:	6814      	ldr	r4, [r2, #0]
   1397e:	6850      	ldr	r0, [r2, #4]
   13980:	6891      	ldr	r1, [r2, #8]
   13982:	68d2      	ldr	r2, [r2, #12]
   13984:	601c      	str	r4, [r3, #0]
   13986:	6058      	str	r0, [r3, #4]
   13988:	6099      	str	r1, [r3, #8]
   1398a:	60da      	str	r2, [r3, #12]
  }
}
   1398c:	bf00      	nop
   1398e:	b003      	add	sp, #12
   13990:	f85d 4b04 	ldr.w	r4, [sp], #4
   13994:	4770      	bx	lr
   13996:	bf00      	nop
   13998:	100041e4 	.word	0x100041e4

0001399c <AppDbGetDiscStatus>:
 *
 *  \return Discovery status.
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
   1399c:	b082      	sub	sp, #8
   1399e:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->discStatus;
   139a0:	9b01      	ldr	r3, [sp, #4]
   139a2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
}
   139a6:	4618      	mov	r0, r3
   139a8:	b002      	add	sp, #8
   139aa:	4770      	bx	lr

000139ac <AppDbSetDiscStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
   139ac:	b082      	sub	sp, #8
   139ae:	9001      	str	r0, [sp, #4]
   139b0:	460b      	mov	r3, r1
   139b2:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *) hdl)->discStatus = status;
   139b6:	9b01      	ldr	r3, [sp, #4]
   139b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
   139bc:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
}
   139c0:	bf00      	nop
   139c2:	b002      	add	sp, #8
   139c4:	4770      	bx	lr

000139c6 <AppDbGetHdlList>:
 *
 *  \return Pointer to handle list.
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
   139c6:	b082      	sub	sp, #8
   139c8:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->hdlList;
   139ca:	9b01      	ldr	r3, [sp, #4]
   139cc:	3398      	adds	r3, #152	; 0x98
}
   139ce:	4618      	mov	r0, r3
   139d0:	b002      	add	sp, #8
   139d2:	4770      	bx	lr

000139d4 <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   139d4:	b500      	push	{lr}
   139d6:	b083      	sub	sp, #12
   139d8:	9001      	str	r0, [sp, #4]
   139da:	9100      	str	r1, [sp, #0]
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   139dc:	9b01      	ldr	r3, [sp, #4]
   139de:	3398      	adds	r3, #152	; 0x98
   139e0:	222a      	movs	r2, #42	; 0x2a
   139e2:	9900      	ldr	r1, [sp, #0]
   139e4:	4618      	mov	r0, r3
   139e6:	f7f8 fb8b 	bl	c100 <memcpy>
}
   139ea:	bf00      	nop
   139ec:	b003      	add	sp, #12
   139ee:	f85d fb04 	ldr.w	pc, [sp], #4

000139f2 <AppDbGetPeerAddrRes>:
 *
 *  \return TRUE if address resolution is supported in peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddrRes(appDbHdl_t hdl)
{
   139f2:	b082      	sub	sp, #8
   139f4:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerAddrRes;
   139f6:	9b01      	ldr	r3, [sp, #4]
   139f8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
}
   139fc:	4618      	mov	r0, r3
   139fe:	b002      	add	sp, #8
   13a00:	4770      	bx	lr

00013a02 <AppDbSetPeerAddrRes>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddrRes(appDbHdl_t hdl, uint8_t addrRes)
{
   13a02:	b082      	sub	sp, #8
   13a04:	9001      	str	r0, [sp, #4]
   13a06:	460b      	mov	r3, r1
   13a08:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *)hdl)->peerAddrRes = addrRes;
   13a0c:	9b01      	ldr	r3, [sp, #4]
   13a0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13a12:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
   13a16:	bf00      	nop
   13a18:	b002      	add	sp, #8
   13a1a:	4770      	bx	lr

00013a1c <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   13a1c:	b082      	sub	sp, #8
   13a1e:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   13a20:	9b01      	ldr	r3, [sp, #4]
   13a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   13a26:	4618      	mov	r0, r3
   13a28:	b002      	add	sp, #8
   13a2a:	4770      	bx	lr

00013a2c <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   13a2c:	b082      	sub	sp, #8
   13a2e:	9001      	str	r0, [sp, #4]
   13a30:	9100      	str	r1, [sp, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   13a32:	9b01      	ldr	r3, [sp, #4]
   13a34:	9a00      	ldr	r2, [sp, #0]
   13a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   13a3a:	bf00      	nop
   13a3c:	b002      	add	sp, #8
   13a3e:	4770      	bx	lr

00013a40 <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   13a40:	b082      	sub	sp, #8
   13a42:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   13a44:	9b01      	ldr	r3, [sp, #4]
   13a46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   13a4a:	4618      	mov	r0, r3
   13a4c:	b002      	add	sp, #8
   13a4e:	4770      	bx	lr

00013a50 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   13a50:	b082      	sub	sp, #8
   13a52:	9001      	str	r0, [sp, #4]
   13a54:	460b      	mov	r3, r1
   13a56:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   13a5a:	9b01      	ldr	r3, [sp, #4]
   13a5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13a60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   13a64:	bf00      	nop
   13a66:	b002      	add	sp, #8
   13a68:	4770      	bx	lr

00013a6a <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   13a6a:	b082      	sub	sp, #8
   13a6c:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   13a6e:	9b01      	ldr	r3, [sp, #4]
   13a70:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   13a74:	4618      	mov	r0, r3
   13a76:	b002      	add	sp, #8
   13a78:	4770      	bx	lr

00013a7a <AppDbSetPeerRpao>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerRpao(appDbHdl_t hdl, bool_t peerRpao)
{
   13a7a:	b082      	sub	sp, #8
   13a7c:	9001      	str	r0, [sp, #4]
   13a7e:	460b      	mov	r3, r1
   13a80:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *)hdl)->peerRpao = peerRpao;
   13a84:	9b01      	ldr	r3, [sp, #4]
   13a86:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13a8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   13a8e:	bf00      	nop
   13a90:	b002      	add	sp, #8
   13a92:	4770      	bx	lr

00013a94 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   13a94:	b500      	push	{lr}
   13a96:	b083      	sub	sp, #12
   13a98:	4603      	mov	r3, r0
   13a9a:	f88d 3007 	strb.w	r3, [sp, #7]
  switch (event)
   13a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13aa2:	2b1a      	cmp	r3, #26
   13aa4:	f200 809e 	bhi.w	13be4 <AppUiAction+0x150>
   13aa8:	a201      	add	r2, pc, #4	; (adr r2, 13ab0 <AppUiAction+0x1c>)
   13aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13aae:	bf00      	nop
   13ab0:	00013be5 	.word	0x00013be5
   13ab4:	00013b1d 	.word	0x00013b1d
   13ab8:	00013be5 	.word	0x00013be5
   13abc:	00013b25 	.word	0x00013b25
   13ac0:	00013b2d 	.word	0x00013b2d
   13ac4:	00013b35 	.word	0x00013b35
   13ac8:	00013b3d 	.word	0x00013b3d
   13acc:	00013b45 	.word	0x00013b45
   13ad0:	00013b4d 	.word	0x00013b4d
   13ad4:	00013b55 	.word	0x00013b55
   13ad8:	00013b5d 	.word	0x00013b5d
   13adc:	00013b65 	.word	0x00013b65
   13ae0:	00013b6d 	.word	0x00013b6d
   13ae4:	00013b75 	.word	0x00013b75
   13ae8:	00013b7d 	.word	0x00013b7d
   13aec:	00013b85 	.word	0x00013b85
   13af0:	00013b8d 	.word	0x00013b8d
   13af4:	00013b95 	.word	0x00013b95
   13af8:	00013b9d 	.word	0x00013b9d
   13afc:	00013ba5 	.word	0x00013ba5
   13b00:	00013bad 	.word	0x00013bad
   13b04:	00013bb5 	.word	0x00013bb5
   13b08:	00013bbd 	.word	0x00013bbd
   13b0c:	00013bc5 	.word	0x00013bc5
   13b10:	00013bcd 	.word	0x00013bcd
   13b14:	00013bd5 	.word	0x00013bd5
   13b18:	00013bdd 	.word	0x00013bdd
    case APP_UI_NONE:
      /* no action */
      break;

    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   13b1c:	4839      	ldr	r0, [pc, #228]	; (13c04 <AppUiAction+0x170>)
   13b1e:	f7f9 ff93 	bl	da48 <WsfTrace>
      break;
   13b22:	e060      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   13b24:	4838      	ldr	r0, [pc, #224]	; (13c08 <AppUiAction+0x174>)
   13b26:	f7f9 ff8f 	bl	da48 <WsfTrace>
      break;
   13b2a:	e05c      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   13b2c:	4837      	ldr	r0, [pc, #220]	; (13c0c <AppUiAction+0x178>)
   13b2e:	f7f9 ff8b 	bl	da48 <WsfTrace>
      break;
   13b32:	e058      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   13b34:	4836      	ldr	r0, [pc, #216]	; (13c10 <AppUiAction+0x17c>)
   13b36:	f7f9 ff87 	bl	da48 <WsfTrace>
      break;
   13b3a:	e054      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   13b3c:	4835      	ldr	r0, [pc, #212]	; (13c14 <AppUiAction+0x180>)
   13b3e:	f7f9 ff83 	bl	da48 <WsfTrace>
      break;
   13b42:	e050      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   13b44:	4834      	ldr	r0, [pc, #208]	; (13c18 <AppUiAction+0x184>)
   13b46:	f7f9 ff7f 	bl	da48 <WsfTrace>
      break;
   13b4a:	e04c      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   13b4c:	4833      	ldr	r0, [pc, #204]	; (13c1c <AppUiAction+0x188>)
   13b4e:	f7f9 ff7b 	bl	da48 <WsfTrace>
      break;
   13b52:	e048      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   13b54:	4832      	ldr	r0, [pc, #200]	; (13c20 <AppUiAction+0x18c>)
   13b56:	f7f9 ff77 	bl	da48 <WsfTrace>
      break;
   13b5a:	e044      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   13b5c:	4831      	ldr	r0, [pc, #196]	; (13c24 <AppUiAction+0x190>)
   13b5e:	f7f9 ff73 	bl	da48 <WsfTrace>
      break;
   13b62:	e040      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   13b64:	4830      	ldr	r0, [pc, #192]	; (13c28 <AppUiAction+0x194>)
   13b66:	f7f9 ff6f 	bl	da48 <WsfTrace>
      break;
   13b6a:	e03c      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   13b6c:	482f      	ldr	r0, [pc, #188]	; (13c2c <AppUiAction+0x198>)
   13b6e:	f7f9 ff6b 	bl	da48 <WsfTrace>
      break;
   13b72:	e038      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   13b74:	482e      	ldr	r0, [pc, #184]	; (13c30 <AppUiAction+0x19c>)
   13b76:	f7f9 ff67 	bl	da48 <WsfTrace>
      break;
   13b7a:	e034      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   13b7c:	482d      	ldr	r0, [pc, #180]	; (13c34 <AppUiAction+0x1a0>)
   13b7e:	f7f9 ff63 	bl	da48 <WsfTrace>
      break;
   13b82:	e030      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   13b84:	482c      	ldr	r0, [pc, #176]	; (13c38 <AppUiAction+0x1a4>)
   13b86:	f7f9 ff5f 	bl	da48 <WsfTrace>
      break;
   13b8a:	e02c      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   13b8c:	482b      	ldr	r0, [pc, #172]	; (13c3c <AppUiAction+0x1a8>)
   13b8e:	f7f9 ff5b 	bl	da48 <WsfTrace>
      break;
   13b92:	e028      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   13b94:	482a      	ldr	r0, [pc, #168]	; (13c40 <AppUiAction+0x1ac>)
   13b96:	f7f9 ff57 	bl	da48 <WsfTrace>
      break;
   13b9a:	e024      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ADV_SET_START_IND:
      APP_TRACE_INFO0(">>> Advertising sets started <<<");
   13b9c:	4829      	ldr	r0, [pc, #164]	; (13c44 <AppUiAction+0x1b0>)
   13b9e:	f7f9 ff53 	bl	da48 <WsfTrace>
      break;
   13ba2:	e020      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_ADV_SET_STOP_IND:
      APP_TRACE_INFO0(">>> Advertising sets stopped <<<");
   13ba4:	4828      	ldr	r0, [pc, #160]	; (13c48 <AppUiAction+0x1b4>)
   13ba6:	f7f9 ff4f 	bl	da48 <WsfTrace>
      break;
   13baa:	e01c      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_SCAN_REQ_RCVD_IND:
      APP_TRACE_INFO0(">>> Scan request received <<<");
   13bac:	4827      	ldr	r0, [pc, #156]	; (13c4c <AppUiAction+0x1b8>)
   13bae:	f7f9 ff4b 	bl	da48 <WsfTrace>
      break;
   13bb2:	e018      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_EXT_SCAN_START_IND:
      APP_TRACE_INFO0(">>> Extended scanning started <<<");
   13bb4:	4826      	ldr	r0, [pc, #152]	; (13c50 <AppUiAction+0x1bc>)
   13bb6:	f7f9 ff47 	bl	da48 <WsfTrace>
      break;
   13bba:	e014      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_EXT_SCAN_STOP_IND:
      APP_TRACE_INFO0(">>> Extended scanning stopped <<<");
   13bbc:	4825      	ldr	r0, [pc, #148]	; (13c54 <AppUiAction+0x1c0>)
   13bbe:	f7f9 ff43 	bl	da48 <WsfTrace>
      break;
   13bc2:	e010      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_PER_ADV_SET_START_IND:
      APP_TRACE_INFO0(">>> Periodic advertising set started <<<");
   13bc4:	4824      	ldr	r0, [pc, #144]	; (13c58 <AppUiAction+0x1c4>)
   13bc6:	f7f9 ff3f 	bl	da48 <WsfTrace>
      break;
   13bca:	e00c      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_PER_ADV_SET_STOP_IND:
      APP_TRACE_INFO0(">>> Periodic advertising set stopped <<<");
   13bcc:	4823      	ldr	r0, [pc, #140]	; (13c5c <AppUiAction+0x1c8>)
   13bce:	f7f9 ff3b 	bl	da48 <WsfTrace>
      break;
   13bd2:	e008      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_PER_ADV_SYNC_EST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
   13bd4:	4822      	ldr	r0, [pc, #136]	; (13c60 <AppUiAction+0x1cc>)
   13bd6:	f7f9 ff37 	bl	da48 <WsfTrace>
      break;
   13bda:	e004      	b.n	13be6 <AppUiAction+0x152>

    case APP_UI_PER_ADV_SYNC_LOST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync lost <<<");
   13bdc:	4821      	ldr	r0, [pc, #132]	; (13c64 <AppUiAction+0x1d0>)
   13bde:	f7f9 ff33 	bl	da48 <WsfTrace>
      break;
   13be2:	e000      	b.n	13be6 <AppUiAction+0x152>

    default:
      break;
   13be4:	bf00      	nop
  }

  if (appUiCbackTbl.actionCback)
   13be6:	4b20      	ldr	r3, [pc, #128]	; (13c68 <AppUiAction+0x1d4>)
   13be8:	685b      	ldr	r3, [r3, #4]
   13bea:	2b00      	cmp	r3, #0
   13bec:	d005      	beq.n	13bfa <AppUiAction+0x166>
  {
    (*appUiCbackTbl.actionCback)(event);
   13bee:	4b1e      	ldr	r3, [pc, #120]	; (13c68 <AppUiAction+0x1d4>)
   13bf0:	685b      	ldr	r3, [r3, #4]
   13bf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13bf6:	4610      	mov	r0, r2
   13bf8:	4798      	blx	r3
  }
}
   13bfa:	bf00      	nop
   13bfc:	b003      	add	sp, #12
   13bfe:	f85d fb04 	ldr.w	pc, [sp], #4
   13c02:	bf00      	nop
   13c04:	0002b280 	.word	0x0002b280
   13c08:	0002b298 	.word	0x0002b298
   13c0c:	0002b2b4 	.word	0x0002b2b4
   13c10:	0002b2d0 	.word	0x0002b2d0
   13c14:	0002b2ec 	.word	0x0002b2ec
   13c18:	0002b308 	.word	0x0002b308
   13c1c:	0002b330 	.word	0x0002b330
   13c20:	0002b34c 	.word	0x0002b34c
   13c24:	0002b368 	.word	0x0002b368
   13c28:	0002b390 	.word	0x0002b390
   13c2c:	0002b3a8 	.word	0x0002b3a8
   13c30:	0002b3c8 	.word	0x0002b3c8
   13c34:	0002b3e4 	.word	0x0002b3e4
   13c38:	0002b40c 	.word	0x0002b40c
   13c3c:	0002b430 	.word	0x0002b430
   13c40:	0002b444 	.word	0x0002b444
   13c44:	0002b458 	.word	0x0002b458
   13c48:	0002b47c 	.word	0x0002b47c
   13c4c:	0002b4a0 	.word	0x0002b4a0
   13c50:	0002b4c0 	.word	0x0002b4c0
   13c54:	0002b4e4 	.word	0x0002b4e4
   13c58:	0002b508 	.word	0x0002b508
   13c5c:	0002b534 	.word	0x0002b534
   13c60:	0002b560 	.word	0x0002b560
   13c64:	0002b590 	.word	0x0002b590
   13c68:	10008b18 	.word	0x10008b18

00013c6c <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   13c6c:	b500      	push	{lr}
   13c6e:	b083      	sub	sp, #12
   13c70:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   13c72:	9901      	ldr	r1, [sp, #4]
   13c74:	4803      	ldr	r0, [pc, #12]	; (13c84 <AppUiDisplayPasskey+0x18>)
   13c76:	f7f9 fee7 	bl	da48 <WsfTrace>
}
   13c7a:	bf00      	nop
   13c7c:	b003      	add	sp, #12
   13c7e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c82:	bf00      	nop
   13c84:	0002b5b8 	.word	0x0002b5b8

00013c88 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   13c88:	b500      	push	{lr}
   13c8a:	b083      	sub	sp, #12
   13c8c:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   13c8e:	9901      	ldr	r1, [sp, #4]
   13c90:	4803      	ldr	r0, [pc, #12]	; (13ca0 <AppUiDisplayConfirmValue+0x18>)
   13c92:	f7f9 fed9 	bl	da48 <WsfTrace>
}
   13c96:	bf00      	nop
   13c98:	b003      	add	sp, #12
   13c9a:	f85d fb04 	ldr.w	pc, [sp], #4
   13c9e:	bf00      	nop
   13ca0:	0002b5cc 	.word	0x0002b5cc

00013ca4 <AppUiDisplayRssi>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayRssi(int8_t rssi)
{
   13ca4:	b500      	push	{lr}
   13ca6:	b083      	sub	sp, #12
   13ca8:	4603      	mov	r3, r0
   13caa:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_TRACE_INFO1(">>> RSSI: %d dBm <<<", rssi);
   13cae:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   13cb2:	4619      	mov	r1, r3
   13cb4:	4803      	ldr	r0, [pc, #12]	; (13cc4 <AppUiDisplayRssi+0x20>)
   13cb6:	f7f9 fec7 	bl	da48 <WsfTrace>
}
   13cba:	bf00      	nop
   13cbc:	b003      	add	sp, #12
   13cbe:	f85d fb04 	ldr.w	pc, [sp], #4
   13cc2:	bf00      	nop
   13cc4:	0002b5e8 	.word	0x0002b5e8

00013cc8 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   13cc8:	b082      	sub	sp, #8
   13cca:	9001      	str	r0, [sp, #4]

}
   13ccc:	bf00      	nop
   13cce:	b002      	add	sp, #8
   13cd0:	4770      	bx	lr
	...

00013cd4 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   13cd4:	b508      	push	{r3, lr}
  if (appUiCbackTbl.btnPollCback)
   13cd6:	4b04      	ldr	r3, [pc, #16]	; (13ce8 <appUiBtnPoll+0x14>)
   13cd8:	689b      	ldr	r3, [r3, #8]
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d002      	beq.n	13ce4 <appUiBtnPoll+0x10>
  {
    (*appUiCbackTbl.btnPollCback)();
   13cde:	4b02      	ldr	r3, [pc, #8]	; (13ce8 <appUiBtnPoll+0x14>)
   13ce0:	689b      	ldr	r3, [r3, #8]
   13ce2:	4798      	blx	r3
  }
}
   13ce4:	bf00      	nop
   13ce6:	bd08      	pop	{r3, pc}
   13ce8:	10008b18 	.word	0x10008b18

00013cec <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
   13cec:	bf00      	nop
   13cee:	4770      	bx	lr

00013cf0 <AppUiBtnRegister>:
 *
 *  \note   Registered by application to receive button events
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t btnCback)
{
   13cf0:	b082      	sub	sp, #8
   13cf2:	9001      	str	r0, [sp, #4]
  appUiCbackTbl.btnCback = btnCback;
   13cf4:	4a02      	ldr	r2, [pc, #8]	; (13d00 <AppUiBtnRegister+0x10>)
   13cf6:	9b01      	ldr	r3, [sp, #4]
   13cf8:	6013      	str	r3, [r2, #0]
}
   13cfa:	bf00      	nop
   13cfc:	b002      	add	sp, #8
   13cfe:	4770      	bx	lr
   13d00:	10008b18 	.word	0x10008b18

00013d04 <AppUiBtnTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
   13d04:	b500      	push	{lr}
   13d06:	b083      	sub	sp, #12
   13d08:	4603      	mov	r3, r0
   13d0a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (appUiCbackTbl.btnCback)
   13d0e:	4b07      	ldr	r3, [pc, #28]	; (13d2c <AppUiBtnTest+0x28>)
   13d10:	681b      	ldr	r3, [r3, #0]
   13d12:	2b00      	cmp	r3, #0
   13d14:	d005      	beq.n	13d22 <AppUiBtnTest+0x1e>
  {
    (*appUiCbackTbl.btnCback)(btn);
   13d16:	4b05      	ldr	r3, [pc, #20]	; (13d2c <AppUiBtnTest+0x28>)
   13d18:	681b      	ldr	r3, [r3, #0]
   13d1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13d1e:	4610      	mov	r0, r2
   13d20:	4798      	blx	r3
  }
}
   13d22:	bf00      	nop
   13d24:	b003      	add	sp, #12
   13d26:	f85d fb04 	ldr.w	pc, [sp], #4
   13d2a:	bf00      	nop
   13d2c:	10008b18 	.word	0x10008b18

00013d30 <__NVIC_EnableIRQ>:
{
   13d30:	b082      	sub	sp, #8
   13d32:	4603      	mov	r3, r0
   13d34:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   13d38:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   13d3c:	2b00      	cmp	r3, #0
   13d3e:	db0c      	blt.n	13d5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13d44:	f003 021f 	and.w	r2, r3, #31
   13d48:	4905      	ldr	r1, [pc, #20]	; (13d60 <__NVIC_EnableIRQ+0x30>)
   13d4a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   13d4e:	095b      	lsrs	r3, r3, #5
   13d50:	2001      	movs	r0, #1
   13d52:	fa00 f202 	lsl.w	r2, r0, r2
   13d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d5a:	bf00      	nop
   13d5c:	b002      	add	sp, #8
   13d5e:	4770      	bx	lr
   13d60:	e000e100 	.word	0xe000e100

00013d64 <__NVIC_DisableIRQ>:
{
   13d64:	b082      	sub	sp, #8
   13d66:	4603      	mov	r3, r0
   13d68:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   13d6c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   13d70:	2b00      	cmp	r3, #0
   13d72:	db13      	blt.n	13d9c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d74:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13d78:	f003 021f 	and.w	r2, r3, #31
   13d7c:	4909      	ldr	r1, [pc, #36]	; (13da4 <__NVIC_DisableIRQ+0x40>)
   13d7e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   13d82:	095b      	lsrs	r3, r3, #5
   13d84:	2001      	movs	r0, #1
   13d86:	fa00 f202 	lsl.w	r2, r0, r2
   13d8a:	3320      	adds	r3, #32
   13d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13d90:	f3bf 8f4f 	dsb	sy
}
   13d94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
   13d96:	f3bf 8f6f 	isb	sy
}
   13d9a:	bf00      	nop
}
   13d9c:	bf00      	nop
   13d9e:	b002      	add	sp, #8
   13da0:	4770      	bx	lr
   13da2:	bf00      	nop
   13da4:	e000e100 	.word	0xe000e100

00013da8 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   13da8:	b500      	push	{lr}
   13daa:	b083      	sub	sp, #12
   13dac:	9001      	str	r0, [sp, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   13dae:	9b01      	ldr	r3, [sp, #4]
   13db0:	2b00      	cmp	r3, #0
   13db2:	d00c      	beq.n	13dce <error_check+0x26>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   13db4:	4a08      	ldr	r2, [pc, #32]	; (13dd8 <error_check+0x30>)
   13db6:	9b01      	ldr	r3, [sp, #4]
   13db8:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   13dba:	4b08      	ldr	r3, [pc, #32]	; (13ddc <error_check+0x34>)
   13dbc:	681b      	ldr	r3, [r3, #0]
   13dbe:	2b00      	cmp	r3, #0
   13dc0:	d005      	beq.n	13dce <error_check+0x26>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   13dc2:	4b06      	ldr	r3, [pc, #24]	; (13ddc <error_check+0x34>)
   13dc4:	681b      	ldr	r3, [r3, #0]
   13dc6:	4a04      	ldr	r2, [pc, #16]	; (13dd8 <error_check+0x30>)
   13dc8:	6812      	ldr	r2, [r2, #0]
   13dca:	4610      	mov	r0, r2
   13dcc:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   13dce:	bf00      	nop
   13dd0:	b003      	add	sp, #12
   13dd2:	f85d fb04 	ldr.w	pc, [sp], #4
   13dd6:	bf00      	nop
   13dd8:	1000446c 	.word	0x1000446c
   13ddc:	10004468 	.word	0x10004468

00013de0 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   13de0:	b530      	push	{r4, r5, lr}
   13de2:	b093      	sub	sp, #76	; 0x4c
   13de4:	4603      	mov	r3, r0
   13de6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32_t ui32NumXtalRetries = 0;
   13dea:	2300      	movs	r3, #0
   13dec:	9311      	str	r3, [sp, #68]	; 0x44


    g_ui32NumBytes     = 0;
   13dee:	4b6a      	ldr	r3, [pc, #424]	; (13f98 <HciDrvRadioBoot+0x1b8>)
   13df0:	2200      	movs	r2, #0
   13df2:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   13df4:	4b69      	ldr	r3, [pc, #420]	; (13f9c <HciDrvRadioBoot+0x1bc>)
   13df6:	2200      	movs	r2, #0
   13df8:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   13dfa:	2301      	movs	r3, #1
   13dfc:	9310      	str	r3, [sp, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   13dfe:	e09f      	b.n	13f40 <HciDrvRadioBoot+0x160>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   13e00:	4967      	ldr	r1, [pc, #412]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13e02:	2000      	movs	r0, #0
   13e04:	f014 fe2c 	bl	28a60 <am_hal_ble_initialize>
   13e08:	900f      	str	r0, [sp, #60]	; 0x3c
   13e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	d006      	beq.n	13e1e <HciDrvRadioBoot+0x3e>
   13e10:	4864      	ldr	r0, [pc, #400]	; (13fa4 <HciDrvRadioBoot+0x1c4>)
   13e12:	f00e fd45 	bl	228a0 <am_util_stdio_printf>
   13e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13e18:	f7ff ffc6 	bl	13da8 <error_check>
   13e1c:	e0ba      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   13e1e:	4b60      	ldr	r3, [pc, #384]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13e20:	681b      	ldr	r3, [r3, #0]
   13e22:	2100      	movs	r1, #0
   13e24:	4618      	mov	r0, r3
   13e26:	f014 ff0b 	bl	28c40 <am_hal_ble_power_control>
   13e2a:	900e      	str	r0, [sp, #56]	; 0x38
   13e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d006      	beq.n	13e40 <HciDrvRadioBoot+0x60>
   13e32:	485d      	ldr	r0, [pc, #372]	; (13fa8 <HciDrvRadioBoot+0x1c8>)
   13e34:	f00e fd34 	bl	228a0 <am_util_stdio_printf>
   13e38:	980e      	ldr	r0, [sp, #56]	; 0x38
   13e3a:	f7ff ffb5 	bl	13da8 <error_check>
   13e3e:	e0a9      	b.n	13f94 <HciDrvRadioBoot+0x1b4>

        am_hal_ble_config_t sBleConfig =
   13e40:	4b5a      	ldr	r3, [pc, #360]	; (13fac <HciDrvRadioBoot+0x1cc>)
   13e42:	ac02      	add	r4, sp, #8
   13e44:	461d      	mov	r5, r3
   13e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   13e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#endif
            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   13e52:	4b53      	ldr	r3, [pc, #332]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13e54:	681b      	ldr	r3, [r3, #0]
   13e56:	aa02      	add	r2, sp, #8
   13e58:	4611      	mov	r1, r2
   13e5a:	4618      	mov	r0, r3
   13e5c:	f014 fe68 	bl	28b30 <am_hal_ble_config>
   13e60:	900d      	str	r0, [sp, #52]	; 0x34
   13e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e64:	2b00      	cmp	r3, #0
   13e66:	d006      	beq.n	13e76 <HciDrvRadioBoot+0x96>
   13e68:	4851      	ldr	r0, [pc, #324]	; (13fb0 <HciDrvRadioBoot+0x1d0>)
   13e6a:	f00e fd19 	bl	228a0 <am_util_stdio_printf>
   13e6e:	980d      	ldr	r0, [sp, #52]	; 0x34
   13e70:	f7ff ff9a 	bl	13da8 <error_check>
   13e74:	e08e      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   13e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13e7a:	2b00      	cmp	r3, #0
   13e7c:	d003      	beq.n	13e86 <HciDrvRadioBoot+0xa6>
        {
            am_util_delay_ms(1000);
   13e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13e82:	f00d fdcd 	bl	21a20 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   13e86:	4b46      	ldr	r3, [pc, #280]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13e88:	681b      	ldr	r3, [r3, #0]
   13e8a:	4618      	mov	r0, r3
   13e8c:	f015 fdc8 	bl	29a20 <am_hal_ble_boot>
   13e90:	9010      	str	r0, [sp, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   13e92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e94:	2b00      	cmp	r3, #0
   13e96:	d058      	beq.n	13f4a <HciDrvRadioBoot+0x16a>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   13e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e9a:	4a46      	ldr	r2, [pc, #280]	; (13fb4 <HciDrvRadioBoot+0x1d4>)
   13e9c:	4293      	cmp	r3, r2
   13e9e:	d12a      	bne.n	13ef6 <HciDrvRadioBoot+0x116>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   13ea0:	4b3f      	ldr	r3, [pc, #252]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13ea2:	681b      	ldr	r3, [r3, #0]
   13ea4:	2101      	movs	r1, #1
   13ea6:	4618      	mov	r0, r3
   13ea8:	f014 feca 	bl	28c40 <am_hal_ble_power_control>
   13eac:	900a      	str	r0, [sp, #40]	; 0x28
   13eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	d006      	beq.n	13ec2 <HciDrvRadioBoot+0xe2>
   13eb4:	4840      	ldr	r0, [pc, #256]	; (13fb8 <HciDrvRadioBoot+0x1d8>)
   13eb6:	f00e fcf3 	bl	228a0 <am_util_stdio_printf>
   13eba:	980a      	ldr	r0, [sp, #40]	; 0x28
   13ebc:	f7ff ff74 	bl	13da8 <error_check>
   13ec0:	e068      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   13ec2:	4b37      	ldr	r3, [pc, #220]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13ec4:	681b      	ldr	r3, [r3, #0]
   13ec6:	4618      	mov	r0, r3
   13ec8:	f014 fe06 	bl	28ad8 <am_hal_ble_deinitialize>
   13ecc:	9009      	str	r0, [sp, #36]	; 0x24
   13ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ed0:	2b00      	cmp	r3, #0
   13ed2:	d006      	beq.n	13ee2 <HciDrvRadioBoot+0x102>
   13ed4:	4839      	ldr	r0, [pc, #228]	; (13fbc <HciDrvRadioBoot+0x1dc>)
   13ed6:	f00e fce3 	bl	228a0 <am_util_stdio_printf>
   13eda:	9809      	ldr	r0, [sp, #36]	; 0x24
   13edc:	f7ff ff64 	bl	13da8 <error_check>
   13ee0:	e058      	b.n	13f94 <HciDrvRadioBoot+0x1b4>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   13ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13ee4:	1c5a      	adds	r2, r3, #1
   13ee6:	9211      	str	r2, [sp, #68]	; 0x44
   13ee8:	2b09      	cmp	r3, #9
   13eea:	d852      	bhi.n	13f92 <HciDrvRadioBoot+0x1b2>
            {
                am_util_delay_ms(1000);
   13eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13ef0:	f00d fd96 	bl	21a20 <am_util_delay_ms>
   13ef4:	e024      	b.n	13f40 <HciDrvRadioBoot+0x160>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   13ef6:	4b2a      	ldr	r3, [pc, #168]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13ef8:	681b      	ldr	r3, [r3, #0]
   13efa:	2101      	movs	r1, #1
   13efc:	4618      	mov	r0, r3
   13efe:	f014 fe9f 	bl	28c40 <am_hal_ble_power_control>
   13f02:	900c      	str	r0, [sp, #48]	; 0x30
   13f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f06:	2b00      	cmp	r3, #0
   13f08:	d006      	beq.n	13f18 <HciDrvRadioBoot+0x138>
   13f0a:	482b      	ldr	r0, [pc, #172]	; (13fb8 <HciDrvRadioBoot+0x1d8>)
   13f0c:	f00e fcc8 	bl	228a0 <am_util_stdio_printf>
   13f10:	980c      	ldr	r0, [sp, #48]	; 0x30
   13f12:	f7ff ff49 	bl	13da8 <error_check>
   13f16:	e03d      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   13f18:	4b21      	ldr	r3, [pc, #132]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13f1a:	681b      	ldr	r3, [r3, #0]
   13f1c:	4618      	mov	r0, r3
   13f1e:	f014 fddb 	bl	28ad8 <am_hal_ble_deinitialize>
   13f22:	900b      	str	r0, [sp, #44]	; 0x2c
   13f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f26:	2b00      	cmp	r3, #0
   13f28:	d006      	beq.n	13f38 <HciDrvRadioBoot+0x158>
   13f2a:	4824      	ldr	r0, [pc, #144]	; (13fbc <HciDrvRadioBoot+0x1dc>)
   13f2c:	f00e fcb8 	bl	228a0 <am_util_stdio_printf>
   13f30:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13f32:	f7ff ff39 	bl	13da8 <error_check>
   13f36:	e02d      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   13f38:	9810      	ldr	r0, [sp, #64]	; 0x40
   13f3a:	f7ff ff35 	bl	13da8 <error_check>
            return;
   13f3e:	e029      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   13f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13f42:	2b00      	cmp	r3, #0
   13f44:	f47f af5c 	bne.w	13e00 <HciDrvRadioBoot+0x20>
   13f48:	e000      	b.n	13f4c <HciDrvRadioBoot+0x16c>
            break;
   13f4a:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   13f4c:	4b14      	ldr	r3, [pc, #80]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13f4e:	681b      	ldr	r3, [r3, #0]
   13f50:	2108      	movs	r1, #8
   13f52:	4618      	mov	r0, r3
   13f54:	f015 fe38 	bl	29bc8 <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   13f58:	4b11      	ldr	r3, [pc, #68]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13f5a:	681b      	ldr	r3, [r3, #0]
   13f5c:	f240 2181 	movw	r1, #641	; 0x281
   13f60:	4618      	mov	r0, r3
   13f62:	f015 fa41 	bl	293e8 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   13f66:	4b0e      	ldr	r3, [pc, #56]	; (13fa0 <HciDrvRadioBoot+0x1c0>)
   13f68:	681b      	ldr	r3, [r3, #0]
   13f6a:	f240 2181 	movw	r1, #641	; 0x281
   13f6e:	4618      	mov	r0, r3
   13f70:	f015 fa0c 	bl	2938c <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   13f74:	200c      	movs	r0, #12
   13f76:	f7ff fedb 	bl	13d30 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   13f7a:	f44f 6302 	mov.w	r3, #2080	; 0x820
   13f7e:	f44f 7282 	mov.w	r2, #260	; 0x104
   13f82:	490f      	ldr	r1, [pc, #60]	; (13fc0 <HciDrvRadioBoot+0x1e0>)
   13f84:	480f      	ldr	r0, [pc, #60]	; (13fc4 <HciDrvRadioBoot+0x1e4>)
   13f86:	f016 fcc9 	bl	2a91c <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   13f8a:	4b0f      	ldr	r3, [pc, #60]	; (13fc8 <HciDrvRadioBoot+0x1e8>)
   13f8c:	2200      	movs	r2, #0
   13f8e:	601a      	str	r2, [r3, #0]

    return;
   13f90:	e000      	b.n	13f94 <HciDrvRadioBoot+0x1b4>
                return;
   13f92:	bf00      	nop
}
   13f94:	b013      	add	sp, #76	; 0x4c
   13f96:	bd30      	pop	{r4, r5, pc}
   13f98:	1000445c 	.word	0x1000445c
   13f9c:	10004460 	.word	0x10004460
   13fa0:	1000946c 	.word	0x1000946c
   13fa4:	0002b600 	.word	0x0002b600
   13fa8:	0002b634 	.word	0x0002b634
   13fac:	0002b730 	.word	0x0002b730
   13fb0:	0002b680 	.word	0x0002b680
   13fb4:	0800000b 	.word	0x0800000b
   13fb8:	0002b6b8 	.word	0x0002b6b8
   13fbc:	0002b700 	.word	0x0002b700
   13fc0:	10008c4c 	.word	0x10008c4c
   13fc4:	10008b24 	.word	0x10008b24
   13fc8:	10004464 	.word	0x10004464

00013fcc <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   13fcc:	b500      	push	{lr}
   13fce:	b083      	sub	sp, #12
    BLE_HEARTBEAT_STOP();
   13fd0:	481b      	ldr	r0, [pc, #108]	; (14040 <HciDrvRadioShutdown+0x74>)
   13fd2:	f7f9 fc75 	bl	d8c0 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   13fd6:	200c      	movs	r0, #12
   13fd8:	f7ff fec4 	bl	13d64 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   13fdc:	4b19      	ldr	r3, [pc, #100]	; (14044 <HciDrvRadioShutdown+0x78>)
   13fde:	681b      	ldr	r3, [r3, #0]
   13fe0:	2101      	movs	r1, #1
   13fe2:	4618      	mov	r0, r3
   13fe4:	f014 fe2c 	bl	28c40 <am_hal_ble_power_control>
   13fe8:	9001      	str	r0, [sp, #4]
   13fea:	9b01      	ldr	r3, [sp, #4]
   13fec:	2b00      	cmp	r3, #0
   13fee:	d006      	beq.n	13ffe <HciDrvRadioShutdown+0x32>
   13ff0:	4815      	ldr	r0, [pc, #84]	; (14048 <HciDrvRadioShutdown+0x7c>)
   13ff2:	f00e fc55 	bl	228a0 <am_util_stdio_printf>
   13ff6:	9801      	ldr	r0, [sp, #4]
   13ff8:	f7ff fed6 	bl	13da8 <error_check>
   13ffc:	e01d      	b.n	1403a <HciDrvRadioShutdown+0x6e>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   13ffe:	bf00      	nop
   14000:	4b12      	ldr	r3, [pc, #72]	; (1404c <HciDrvRadioShutdown+0x80>)
   14002:	689b      	ldr	r3, [r3, #8]
   14004:	f3c3 3340 	ubfx	r3, r3, #13, #1
   14008:	b2db      	uxtb	r3, r3
   1400a:	2b00      	cmp	r3, #0
   1400c:	d1f8      	bne.n	14000 <HciDrvRadioShutdown+0x34>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   1400e:	4b0d      	ldr	r3, [pc, #52]	; (14044 <HciDrvRadioShutdown+0x78>)
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	4618      	mov	r0, r3
   14014:	f014 fd60 	bl	28ad8 <am_hal_ble_deinitialize>
   14018:	9000      	str	r0, [sp, #0]
   1401a:	9b00      	ldr	r3, [sp, #0]
   1401c:	2b00      	cmp	r3, #0
   1401e:	d006      	beq.n	1402e <HciDrvRadioShutdown+0x62>
   14020:	480b      	ldr	r0, [pc, #44]	; (14050 <HciDrvRadioShutdown+0x84>)
   14022:	f00e fc3d 	bl	228a0 <am_util_stdio_printf>
   14026:	9800      	ldr	r0, [sp, #0]
   14028:	f7ff febe 	bl	13da8 <error_check>
   1402c:	e005      	b.n	1403a <HciDrvRadioShutdown+0x6e>

    g_ui32NumBytes   = 0;
   1402e:	4b09      	ldr	r3, [pc, #36]	; (14054 <HciDrvRadioShutdown+0x88>)
   14030:	2200      	movs	r2, #0
   14032:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   14034:	4b08      	ldr	r3, [pc, #32]	; (14058 <HciDrvRadioShutdown+0x8c>)
   14036:	2200      	movs	r2, #0
   14038:	601a      	str	r2, [r3, #0]
}
   1403a:	b003      	add	sp, #12
   1403c:	f85d fb04 	ldr.w	pc, [sp], #4
   14040:	10008b3c 	.word	0x10008b3c
   14044:	1000946c 	.word	0x1000946c
   14048:	0002b6b8 	.word	0x0002b6b8
   1404c:	40021000 	.word	0x40021000
   14050:	0002b700 	.word	0x0002b700
   14054:	1000445c 	.word	0x1000445c
   14058:	10004460 	.word	0x10004460

0001405c <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   1405c:	b500      	push	{lr}
   1405e:	b095      	sub	sp, #84	; 0x54
   14060:	4603      	mov	r3, r0
   14062:	9200      	str	r2, [sp, #0]
   14064:	f88d 3007 	strb.w	r3, [sp, #7]
   14068:	460b      	mov	r3, r1
   1406a:	f8ad 3004 	strh.w	r3, [sp, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   1406e:	4b3f      	ldr	r3, [pc, #252]	; (1416c <hciDrvWrite+0x110>)
   14070:	689a      	ldr	r2, [r3, #8]
   14072:	4b3e      	ldr	r3, [pc, #248]	; (1416c <hciDrvWrite+0x110>)
   14074:	68db      	ldr	r3, [r3, #12]
   14076:	429a      	cmp	r2, r3
   14078:	d106      	bne.n	14088 <hciDrvWrite+0x2c>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   1407a:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   1407e:	f7ff fe93 	bl	13da8 <error_check>
   14082:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14086:	e06d      	b.n	14164 <hciDrvWrite+0x108>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   14088:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1408c:	2bff      	cmp	r3, #255	; 0xff
   1408e:	d905      	bls.n	1409c <hciDrvWrite+0x40>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   14090:	4837      	ldr	r0, [pc, #220]	; (14170 <hciDrvWrite+0x114>)
   14092:	f7ff fe89 	bl	13da8 <error_check>
   14096:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1409a:	e063      	b.n	14164 <hciDrvWrite+0x108>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   1409c:	4b33      	ldr	r3, [pc, #204]	; (1416c <hciDrvWrite+0x110>)
   1409e:	695a      	ldr	r2, [r3, #20]
   140a0:	4b32      	ldr	r3, [pc, #200]	; (1416c <hciDrvWrite+0x110>)
   140a2:	681b      	ldr	r3, [r3, #0]
   140a4:	4413      	add	r3, r2
   140a6:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   140a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   140ac:	3301      	adds	r3, #1
   140ae:	461a      	mov	r2, r3
   140b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   140b2:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   140b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   140b6:	3304      	adds	r3, #4
   140b8:	9311      	str	r3, [sp, #68]	; 0x44

    *pui8Wptr++ = type;
   140ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   140bc:	1c5a      	adds	r2, r3, #1
   140be:	9211      	str	r2, [sp, #68]	; 0x44
   140c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   140c4:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   140c6:	2300      	movs	r3, #0
   140c8:	9313      	str	r3, [sp, #76]	; 0x4c
   140ca:	e00a      	b.n	140e2 <hciDrvWrite+0x86>
    {
        pui8Wptr[i] = pData[i];
   140cc:	9a00      	ldr	r2, [sp, #0]
   140ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   140d0:	441a      	add	r2, r3
   140d2:	9911      	ldr	r1, [sp, #68]	; 0x44
   140d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   140d6:	440b      	add	r3, r1
   140d8:	7812      	ldrb	r2, [r2, #0]
   140da:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   140dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   140de:	3301      	adds	r3, #1
   140e0:	9313      	str	r3, [sp, #76]	; 0x4c
   140e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   140e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   140e8:	429a      	cmp	r2, r3
   140ea:	d3ef      	bcc.n	140cc <hciDrvWrite+0x70>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   140ec:	2201      	movs	r2, #1
   140ee:	2100      	movs	r1, #0
   140f0:	481e      	ldr	r0, [pc, #120]	; (1416c <hciDrvWrite+0x110>)
   140f2:	f016 fc1f 	bl	2a934 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   140f6:	4b1f      	ldr	r3, [pc, #124]	; (14174 <hciDrvWrite+0x118>)
   140f8:	781b      	ldrb	r3, [r3, #0]
   140fa:	2101      	movs	r1, #1
   140fc:	4618      	mov	r0, r3
   140fe:	f7f9 f919 	bl	d334 <WsfSetEvent>
#endif

#ifdef AM_CUSTOM_BDADDR
    if (type == HCI_CMD_TYPE)
   14102:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14106:	2b01      	cmp	r3, #1
   14108:	d12a      	bne.n	14160 <hciDrvWrite+0x104>
    {
        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   1410a:	9b00      	ldr	r3, [sp, #0]
   1410c:	781b      	ldrb	r3, [r3, #0]
   1410e:	b29a      	uxth	r2, r3
   14110:	9b00      	ldr	r3, [sp, #0]
   14112:	3301      	adds	r3, #1
   14114:	781b      	ldrb	r3, [r3, #0]
   14116:	b29b      	uxth	r3, r3
   14118:	021b      	lsls	r3, r3, #8
   1411a:	b29b      	uxth	r3, r3
   1411c:	4413      	add	r3, r2
   1411e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   14122:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   14126:	f640 4203 	movw	r2, #3075	; 0xc03
   1412a:	4293      	cmp	r3, r2
   1412c:	d118      	bne.n	14160 <hciDrvWrite+0x104>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   1412e:	ab03      	add	r3, sp, #12
   14130:	4619      	mov	r1, r3
   14132:	2001      	movs	r0, #1
   14134:	f016 fa28 	bl	2a588 <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   14138:	9b04      	ldr	r3, [sp, #16]
   1413a:	b2da      	uxtb	r2, r3
   1413c:	4b0e      	ldr	r3, [pc, #56]	; (14178 <hciDrvWrite+0x11c>)
   1413e:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   14140:	9b04      	ldr	r3, [sp, #16]
   14142:	0a1b      	lsrs	r3, r3, #8
   14144:	b2da      	uxtb	r2, r3
   14146:	4b0c      	ldr	r3, [pc, #48]	; (14178 <hciDrvWrite+0x11c>)
   14148:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   1414a:	9b04      	ldr	r3, [sp, #16]
   1414c:	0c1b      	lsrs	r3, r3, #16
   1414e:	b2da      	uxtb	r2, r3
   14150:	4b09      	ldr	r3, [pc, #36]	; (14178 <hciDrvWrite+0x11c>)
   14152:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   14154:	4a08      	ldr	r2, [pc, #32]	; (14178 <hciDrvWrite+0x11c>)
   14156:	2106      	movs	r1, #6
   14158:	f64f 4032 	movw	r0, #64562	; 0xfc32
   1415c:	f00a fc90 	bl	1ea80 <HciVendorSpecificCmd>
        }
    }
#endif

    return len;
   14160:	f8bd 3004 	ldrh.w	r3, [sp, #4]
}
   14164:	4618      	mov	r0, r3
   14166:	b015      	add	sp, #84	; 0x54
   14168:	f85d fb04 	ldr.w	pc, [sp], #4
   1416c:	10008b24 	.word	0x10008b24
   14170:	09000001 	.word	0x09000001
   14174:	10004458 	.word	0x10004458
   14178:	10002b6c 	.word	0x10002b6c

0001417c <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   1417c:	b082      	sub	sp, #8
   1417e:	4603      	mov	r3, r0
   14180:	f88d 3007 	strb.w	r3, [sp, #7]
    g_HciDrvHandleID = handlerId;
   14184:	4a0a      	ldr	r2, [pc, #40]	; (141b0 <HciDrvHandlerInit+0x34>)
   14186:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1418a:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   1418c:	4a09      	ldr	r2, [pc, #36]	; (141b4 <HciDrvHandlerInit+0x38>)
   1418e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14192:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   14194:	4b07      	ldr	r3, [pc, #28]	; (141b4 <HciDrvHandlerInit+0x38>)
   14196:	2202      	movs	r2, #2
   14198:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   1419a:	4a07      	ldr	r2, [pc, #28]	; (141b8 <HciDrvHandlerInit+0x3c>)
   1419c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   141a0:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   141a2:	4b05      	ldr	r3, [pc, #20]	; (141b8 <HciDrvHandlerInit+0x3c>)
   141a4:	2203      	movs	r2, #3
   141a6:	731a      	strb	r2, [r3, #12]
}
   141a8:	bf00      	nop
   141aa:	b002      	add	sp, #8
   141ac:	4770      	bx	lr
   141ae:	bf00      	nop
   141b0:	10004458 	.word	0x10004458
   141b4:	10008b3c 	.word	0x10008b3c
   141b8:	10009470 	.word	0x10009470

000141bc <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   141bc:	b500      	push	{lr}
   141be:	b083      	sub	sp, #12
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   141c0:	4b0d      	ldr	r3, [pc, #52]	; (141f8 <HciDrvIntService+0x3c>)
   141c2:	681b      	ldr	r3, [r3, #0]
   141c4:	2101      	movs	r1, #1
   141c6:	4618      	mov	r0, r3
   141c8:	f015 f900 	bl	293cc <am_hal_ble_int_status>
   141cc:	9001      	str	r0, [sp, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   141ce:	4b0a      	ldr	r3, [pc, #40]	; (141f8 <HciDrvIntService+0x3c>)
   141d0:	681b      	ldr	r3, [r3, #0]
   141d2:	9901      	ldr	r1, [sp, #4]
   141d4:	4618      	mov	r0, r3
   141d6:	f015 f907 	bl	293e8 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   141da:	4b08      	ldr	r3, [pc, #32]	; (141fc <HciDrvIntService+0x40>)
   141dc:	681b      	ldr	r3, [r3, #0]
   141de:	3301      	adds	r3, #1
   141e0:	4a06      	ldr	r2, [pc, #24]	; (141fc <HciDrvIntService+0x40>)
   141e2:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   141e4:	4b06      	ldr	r3, [pc, #24]	; (14200 <HciDrvIntService+0x44>)
   141e6:	781b      	ldrb	r3, [r3, #0]
   141e8:	2101      	movs	r1, #1
   141ea:	4618      	mov	r0, r3
   141ec:	f7f9 f8a2 	bl	d334 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   141f0:	bf00      	nop
   141f2:	b003      	add	sp, #12
   141f4:	f85d fb04 	ldr.w	pc, [sp], #4
   141f8:	1000946c 	.word	0x1000946c
   141fc:	10004464 	.word	0x10004464
   14200:	10004458 	.word	0x10004458

00014204 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   14204:	b500      	push	{lr}
   14206:	b08b      	sub	sp, #44	; 0x2c
   14208:	4603      	mov	r3, r0
   1420a:	9100      	str	r1, [sp, #0]
   1420c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   14210:	2300      	movs	r3, #0
   14212:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   14214:	2300      	movs	r3, #0
   14216:	9308      	str	r3, [sp, #32]
    uint32_t read_hci_packet_count = 0;
   14218:	2300      	movs	r3, #0
   1421a:	9307      	str	r3, [sp, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   1421c:	9b00      	ldr	r3, [sp, #0]
   1421e:	789b      	ldrb	r3, [r3, #2]
   14220:	2b02      	cmp	r3, #2
   14222:	d107      	bne.n	14234 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   14224:	f00a fa81 	bl	1e72a <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   14228:	f242 7110 	movw	r1, #10000	; 0x2710
   1422c:	4889      	ldr	r0, [pc, #548]	; (14454 <HciDrvHandler+0x250>)
   1422e:	f7f9 fb33 	bl	d898 <WsfTimerStartMs>
        return;
   14232:	e10c      	b.n	1444e <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   14234:	4b88      	ldr	r3, [pc, #544]	; (14458 <HciDrvHandler+0x254>)
   14236:	681a      	ldr	r2, [r3, #0]
   14238:	4b88      	ldr	r3, [pc, #544]	; (1445c <HciDrvHandler+0x258>)
   1423a:	681b      	ldr	r3, [r3, #0]
   1423c:	429a      	cmp	r2, r3
   1423e:	f240 80ea 	bls.w	14416 <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   14242:	4b87      	ldr	r3, [pc, #540]	; (14460 <HciDrvHandler+0x25c>)
   14244:	681a      	ldr	r2, [r3, #0]
   14246:	4b85      	ldr	r3, [pc, #532]	; (1445c <HciDrvHandler+0x258>)
   14248:	681b      	ldr	r3, [r3, #0]
   1424a:	18d0      	adds	r0, r2, r3
   1424c:	4b82      	ldr	r3, [pc, #520]	; (14458 <HciDrvHandler+0x254>)
   1424e:	681b      	ldr	r3, [r3, #0]
   14250:	b29a      	uxth	r2, r3
   14252:	4b82      	ldr	r3, [pc, #520]	; (1445c <HciDrvHandler+0x258>)
   14254:	681b      	ldr	r3, [r3, #0]
   14256:	b29b      	uxth	r3, r3
   14258:	1ad3      	subs	r3, r2, r3
   1425a:	b29b      	uxth	r3, r3
   1425c:	4619      	mov	r1, r3
   1425e:	f00d f875 	bl	2134c <hciTrSerialRxIncoming>
   14262:	4603      	mov	r3, r0
   14264:	461a      	mov	r2, r3
   14266:	4b7d      	ldr	r3, [pc, #500]	; (1445c <HciDrvHandler+0x258>)
   14268:	681b      	ldr	r3, [r3, #0]
   1426a:	4413      	add	r3, r2
   1426c:	4a7b      	ldr	r2, [pc, #492]	; (1445c <HciDrvHandler+0x258>)
   1426e:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   14270:	4b7a      	ldr	r3, [pc, #488]	; (1445c <HciDrvHandler+0x258>)
   14272:	681a      	ldr	r2, [r3, #0]
   14274:	4b78      	ldr	r3, [pc, #480]	; (14458 <HciDrvHandler+0x254>)
   14276:	681b      	ldr	r3, [r3, #0]
   14278:	429a      	cmp	r2, r3
   1427a:	d006      	beq.n	1428a <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1427c:	4b79      	ldr	r3, [pc, #484]	; (14464 <HciDrvHandler+0x260>)
   1427e:	781b      	ldrb	r3, [r3, #0]
   14280:	2101      	movs	r1, #1
   14282:	4618      	mov	r0, r3
   14284:	f7f9 f856 	bl	d334 <WsfSetEvent>
            return;
   14288:	e0e1      	b.n	1444e <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   1428a:	4b73      	ldr	r3, [pc, #460]	; (14458 <HciDrvHandler+0x254>)
   1428c:	2200      	movs	r2, #0
   1428e:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   14290:	4b72      	ldr	r3, [pc, #456]	; (1445c <HciDrvHandler+0x258>)
   14292:	2200      	movs	r2, #0
   14294:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   14296:	e0be      	b.n	14416 <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   14298:	4b73      	ldr	r3, [pc, #460]	; (14468 <HciDrvHandler+0x264>)
   1429a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1429e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   142a2:	b2db      	uxtb	r3, r3
   142a4:	2b00      	cmp	r3, #0
   142a6:	d07e      	beq.n	143a6 <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   142a8:	4b70      	ldr	r3, [pc, #448]	; (1446c <HciDrvHandler+0x268>)
   142aa:	681b      	ldr	r3, [r3, #0]
   142ac:	9303      	str	r3, [sp, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   142ae:	4869      	ldr	r0, [pc, #420]	; (14454 <HciDrvHandler+0x250>)
   142b0:	f7f9 fb06 	bl	d8c0 <WsfTimerStop>
   142b4:	f242 7110 	movw	r1, #10000	; 0x2710
   142b8:	4866      	ldr	r0, [pc, #408]	; (14454 <HciDrvHandler+0x250>)
   142ba:	f7f9 faed 	bl	d898 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   142be:	4b66      	ldr	r3, [pc, #408]	; (14458 <HciDrvHandler+0x254>)
   142c0:	2200      	movs	r2, #0
   142c2:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   142c4:	4b6a      	ldr	r3, [pc, #424]	; (14470 <HciDrvHandler+0x26c>)
   142c6:	681b      	ldr	r3, [r3, #0]
   142c8:	4a63      	ldr	r2, [pc, #396]	; (14458 <HciDrvHandler+0x254>)
   142ca:	496a      	ldr	r1, [pc, #424]	; (14474 <HciDrvHandler+0x270>)
   142cc:	4618      	mov	r0, r3
   142ce:	f014 fe39 	bl	28f44 <am_hal_ble_blocking_hci_read>
   142d2:	9004      	str	r0, [sp, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   142d4:	4b60      	ldr	r3, [pc, #384]	; (14458 <HciDrvHandler+0x254>)
   142d6:	681b      	ldr	r3, [r3, #0]
   142d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   142dc:	d908      	bls.n	142f0 <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   142de:	4b66      	ldr	r3, [pc, #408]	; (14478 <HciDrvHandler+0x274>)
   142e0:	9302      	str	r3, [sp, #8]
   142e2:	4866      	ldr	r0, [pc, #408]	; (1447c <HciDrvHandler+0x278>)
   142e4:	f00e fadc 	bl	228a0 <am_util_stdio_printf>
   142e8:	9802      	ldr	r0, [sp, #8]
   142ea:	f7ff fd5d 	bl	13da8 <error_check>
   142ee:	e0ae      	b.n	1444e <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   142f0:	9b04      	ldr	r3, [sp, #16]
   142f2:	2b00      	cmp	r3, #0
   142f4:	d13d      	bne.n	14372 <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   142f6:	2300      	movs	r3, #0
   142f8:	9306      	str	r3, [sp, #24]
   142fa:	e012      	b.n	14322 <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   142fc:	4b5a      	ldr	r3, [pc, #360]	; (14468 <HciDrvHandler+0x264>)
   142fe:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   14302:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   14306:	b2db      	uxtb	r3, r3
   14308:	2b00      	cmp	r3, #0
   1430a:	d00e      	beq.n	1432a <HciDrvHandler+0x126>
   1430c:	4b57      	ldr	r3, [pc, #348]	; (1446c <HciDrvHandler+0x268>)
   1430e:	681b      	ldr	r3, [r3, #0]
   14310:	9a03      	ldr	r2, [sp, #12]
   14312:	429a      	cmp	r2, r3
   14314:	d109      	bne.n	1432a <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   14316:	2001      	movs	r0, #1
   14318:	f00d fb9e 	bl	21a58 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   1431c:	9b06      	ldr	r3, [sp, #24]
   1431e:	3301      	adds	r3, #1
   14320:	9306      	str	r3, [sp, #24]
   14322:	9b06      	ldr	r3, [sp, #24]
   14324:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   14328:	d3e8      	bcc.n	142fc <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   1432a:	4b4d      	ldr	r3, [pc, #308]	; (14460 <HciDrvHandler+0x25c>)
   1432c:	681b      	ldr	r3, [r3, #0]
   1432e:	4a4a      	ldr	r2, [pc, #296]	; (14458 <HciDrvHandler+0x254>)
   14330:	6812      	ldr	r2, [r2, #0]
   14332:	b292      	uxth	r2, r2
   14334:	4611      	mov	r1, r2
   14336:	4618      	mov	r0, r3
   14338:	f00d f808 	bl	2134c <hciTrSerialRxIncoming>
   1433c:	4603      	mov	r3, r0
   1433e:	461a      	mov	r2, r3
   14340:	4b46      	ldr	r3, [pc, #280]	; (1445c <HciDrvHandler+0x258>)
   14342:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   14344:	4b45      	ldr	r3, [pc, #276]	; (1445c <HciDrvHandler+0x258>)
   14346:	681a      	ldr	r2, [r3, #0]
   14348:	4b43      	ldr	r3, [pc, #268]	; (14458 <HciDrvHandler+0x254>)
   1434a:	681b      	ldr	r3, [r3, #0]
   1434c:	429a      	cmp	r2, r3
   1434e:	d006      	beq.n	1435e <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14350:	4b44      	ldr	r3, [pc, #272]	; (14464 <HciDrvHandler+0x260>)
   14352:	781b      	ldrb	r3, [r3, #0]
   14354:	2101      	movs	r1, #1
   14356:	4618      	mov	r0, r3
   14358:	f7f8 ffec 	bl	d334 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   1435c:	e065      	b.n	1442a <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   1435e:	4b3e      	ldr	r3, [pc, #248]	; (14458 <HciDrvHandler+0x254>)
   14360:	2200      	movs	r2, #0
   14362:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   14364:	4b3d      	ldr	r3, [pc, #244]	; (1445c <HciDrvHandler+0x258>)
   14366:	2200      	movs	r2, #0
   14368:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   1436a:	9b07      	ldr	r3, [sp, #28]
   1436c:	3301      	adds	r3, #1
   1436e:	9307      	str	r3, [sp, #28]
   14370:	e00f      	b.n	14392 <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   14372:	9b04      	ldr	r3, [sp, #16]
   14374:	2b00      	cmp	r3, #0
   14376:	d00c      	beq.n	14392 <HciDrvHandler+0x18e>
   14378:	9804      	ldr	r0, [sp, #16]
   1437a:	f7ff fd15 	bl	13da8 <error_check>
   1437e:	f7ff fe25 	bl	13fcc <HciDrvRadioShutdown>
   14382:	2000      	movs	r0, #0
   14384:	f7ff fd2c 	bl	13de0 <HciDrvRadioBoot>
   14388:	f000 f87e 	bl	14488 <HciDrvEmptyWriteQueue>
   1438c:	f002 f8c2 	bl	16514 <DmDevReset>
   14390:	e05d      	b.n	1444e <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   14392:	9b07      	ldr	r3, [sp, #28]
   14394:	2b03      	cmp	r3, #3
   14396:	d93e      	bls.n	14416 <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14398:	4b32      	ldr	r3, [pc, #200]	; (14464 <HciDrvHandler+0x260>)
   1439a:	781b      	ldrb	r3, [r3, #0]
   1439c:	2101      	movs	r1, #1
   1439e:	4618      	mov	r0, r3
   143a0:	f7f8 ffc8 	bl	d334 <WsfSetEvent>

                break;
   143a4:	e041      	b.n	1442a <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   143a6:	4b36      	ldr	r3, [pc, #216]	; (14480 <HciDrvHandler+0x27c>)
   143a8:	689b      	ldr	r3, [r3, #8]
   143aa:	2b00      	cmp	r3, #0
   143ac:	d03c      	beq.n	14428 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   143ae:	4b34      	ldr	r3, [pc, #208]	; (14480 <HciDrvHandler+0x27c>)
   143b0:	695a      	ldr	r2, [r3, #20]
   143b2:	4b33      	ldr	r3, [pc, #204]	; (14480 <HciDrvHandler+0x27c>)
   143b4:	685b      	ldr	r3, [r3, #4]
   143b6:	4413      	add	r3, r2
   143b8:	9305      	str	r3, [sp, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   143ba:	4b2d      	ldr	r3, [pc, #180]	; (14470 <HciDrvHandler+0x26c>)
   143bc:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   143be:	9b05      	ldr	r3, [sp, #20]
   143c0:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   143c2:	9b05      	ldr	r3, [sp, #20]
   143c4:	681b      	ldr	r3, [r3, #0]
   143c6:	2100      	movs	r1, #0
   143c8:	f014 fd8c 	bl	28ee4 <am_hal_ble_blocking_hci_write>
   143cc:	9004      	str	r0, [sp, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   143ce:	9b04      	ldr	r3, [sp, #16]
   143d0:	2b00      	cmp	r3, #0
   143d2:	d111      	bne.n	143f8 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   143d4:	481f      	ldr	r0, [pc, #124]	; (14454 <HciDrvHandler+0x250>)
   143d6:	f7f9 fa73 	bl	d8c0 <WsfTimerStop>
   143da:	f242 7110 	movw	r1, #10000	; 0x2710
   143de:	481d      	ldr	r0, [pc, #116]	; (14454 <HciDrvHandler+0x250>)
   143e0:	f7f9 fa5a 	bl	d898 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   143e4:	2201      	movs	r2, #1
   143e6:	2100      	movs	r1, #0
   143e8:	4825      	ldr	r0, [pc, #148]	; (14480 <HciDrvHandler+0x27c>)
   143ea:	f016 fadb 	bl	2a9a4 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   143ee:	2300      	movs	r3, #0
   143f0:	9309      	str	r3, [sp, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   143f2:	2300      	movs	r3, #0
   143f4:	9308      	str	r3, [sp, #32]
   143f6:	e00e      	b.n	14416 <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   143f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143fa:	3301      	adds	r3, #1
   143fc:	9309      	str	r3, [sp, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   143fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14400:	f242 7210 	movw	r2, #10000	; 0x2710
   14404:	4293      	cmp	r3, r2
   14406:	d906      	bls.n	14416 <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14408:	4b16      	ldr	r3, [pc, #88]	; (14464 <HciDrvHandler+0x260>)
   1440a:	781b      	ldrb	r3, [r3, #0]
   1440c:	2101      	movs	r1, #1
   1440e:	4618      	mov	r0, r3
   14410:	f7f8 ff90 	bl	d334 <WsfSetEvent>
                        break;
   14414:	e009      	b.n	1442a <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   14416:	9b08      	ldr	r3, [sp, #32]
   14418:	1c5a      	adds	r2, r3, #1
   1441a:	9208      	str	r2, [sp, #32]
   1441c:	f242 720f 	movw	r2, #9999	; 0x270f
   14420:	4293      	cmp	r3, r2
   14422:	f67f af39 	bls.w	14298 <HciDrvHandler+0x94>
   14426:	e000      	b.n	1442a <HciDrvHandler+0x226>
                break;
   14428:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   1442a:	9b08      	ldr	r3, [sp, #32]
   1442c:	f242 7210 	movw	r2, #10000	; 0x2710
   14430:	4293      	cmp	r3, r2
   14432:	d10c      	bne.n	1444e <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   14434:	4813      	ldr	r0, [pc, #76]	; (14484 <HciDrvHandler+0x280>)
   14436:	f7ff fcb7 	bl	13da8 <error_check>
   1443a:	f7ff fdc7 	bl	13fcc <HciDrvRadioShutdown>
   1443e:	2000      	movs	r0, #0
   14440:	f7ff fcce 	bl	13de0 <HciDrvRadioBoot>
   14444:	f000 f820 	bl	14488 <HciDrvEmptyWriteQueue>
   14448:	f002 f864 	bl	16514 <DmDevReset>
   1444c:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   1444e:	b00b      	add	sp, #44	; 0x2c
   14450:	f85d fb04 	ldr.w	pc, [sp], #4
   14454:	10008b3c 	.word	0x10008b3c
   14458:	1000445c 	.word	0x1000445c
   1445c:	10004460 	.word	0x10004460
   14460:	10002b74 	.word	0x10002b74
   14464:	10004458 	.word	0x10004458
   14468:	5000c000 	.word	0x5000c000
   1446c:	10004464 	.word	0x10004464
   14470:	1000946c 	.word	0x1000946c
   14474:	10008b4c 	.word	0x10008b4c
   14478:	09000002 	.word	0x09000002
   1447c:	0002b74c 	.word	0x0002b74c
   14480:	10008b24 	.word	0x10008b24
   14484:	09000006 	.word	0x09000006

00014488 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   14488:	b508      	push	{r3, lr}
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   1448a:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1448e:	f44f 7282 	mov.w	r2, #260	; 0x104
   14492:	4903      	ldr	r1, [pc, #12]	; (144a0 <HciDrvEmptyWriteQueue+0x18>)
   14494:	4803      	ldr	r0, [pc, #12]	; (144a4 <HciDrvEmptyWriteQueue+0x1c>)
   14496:	f016 fa41 	bl	2a91c <am_hal_queue_init>
}
   1449a:	bf00      	nop
   1449c:	bd08      	pop	{r3, pc}
   1449e:	bf00      	nop
   144a0:	10008c4c 	.word	0x10008c4c
   144a4:	10008b24 	.word	0x10008b24

000144a8 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   144a8:	b500      	push	{lr}
   144aa:	b083      	sub	sp, #12
   144ac:	9001      	str	r0, [sp, #4]
   144ae:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   144b0:	2206      	movs	r2, #6
   144b2:	9900      	ldr	r1, [sp, #0]
   144b4:	9801      	ldr	r0, [sp, #4]
   144b6:	f7f7 fe23 	bl	c100 <memcpy>
}
   144ba:	bf00      	nop
   144bc:	b003      	add	sp, #12
   144be:	f85d fb04 	ldr.w	pc, [sp], #4

000144c2 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   144c2:	b500      	push	{lr}
   144c4:	b083      	sub	sp, #12
   144c6:	9001      	str	r0, [sp, #4]
   144c8:	9100      	str	r1, [sp, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   144ca:	2206      	movs	r2, #6
   144cc:	9900      	ldr	r1, [sp, #0]
   144ce:	9801      	ldr	r0, [sp, #4]
   144d0:	f013 ff84 	bl	283dc <memcmp>
   144d4:	4603      	mov	r3, r0
   144d6:	2b00      	cmp	r3, #0
   144d8:	bf0c      	ite	eq
   144da:	2301      	moveq	r3, #1
   144dc:	2300      	movne	r3, #0
   144de:	b2db      	uxtb	r3, r3
}
   144e0:	4618      	mov	r0, r3
   144e2:	b003      	add	sp, #12
   144e4:	f85d fb04 	ldr.w	pc, [sp], #4

000144e8 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   144e8:	b500      	push	{lr}
   144ea:	b083      	sub	sp, #12
   144ec:	9001      	str	r0, [sp, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   144ee:	2206      	movs	r2, #6
   144f0:	2100      	movs	r1, #0
   144f2:	9801      	ldr	r0, [sp, #4]
   144f4:	f013 ffa2 	bl	2843c <memset>

  return (pDst + BDA_ADDR_LEN);
   144f8:	9b01      	ldr	r3, [sp, #4]
   144fa:	3306      	adds	r3, #6
}
   144fc:	4618      	mov	r0, r3
   144fe:	b003      	add	sp, #12
   14500:	f85d fb04 	ldr.w	pc, [sp], #4

00014504 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   14504:	b500      	push	{lr}
   14506:	b085      	sub	sp, #20
   14508:	9001      	str	r0, [sp, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1450a:	2300      	movs	r3, #0
   1450c:	9302      	str	r3, [sp, #8]
   1450e:	2300      	movs	r3, #0
   14510:	f8ad 300c 	strh.w	r3, [sp, #12]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   14514:	ab02      	add	r3, sp, #8
   14516:	2206      	movs	r2, #6
   14518:	4619      	mov	r1, r3
   1451a:	9801      	ldr	r0, [sp, #4]
   1451c:	f013 ff5e 	bl	283dc <memcmp>
   14520:	4603      	mov	r3, r0
   14522:	2b00      	cmp	r3, #0
   14524:	bf0c      	ite	eq
   14526:	2301      	moveq	r3, #1
   14528:	2300      	movne	r3, #0
   1452a:	b2db      	uxtb	r3, r3
}
   1452c:	4618      	mov	r0, r3
   1452e:	b005      	add	sp, #20
   14530:	f85d fb04 	ldr.w	pc, [sp], #4

00014534 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   14534:	b500      	push	{lr}
   14536:	b083      	sub	sp, #12
   14538:	9001      	str	r0, [sp, #4]
   1453a:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   1453c:	2210      	movs	r2, #16
   1453e:	9900      	ldr	r1, [sp, #0]
   14540:	9801      	ldr	r0, [sp, #4]
   14542:	f7f7 fddd 	bl	c100 <memcpy>
}
   14546:	bf00      	nop
   14548:	b003      	add	sp, #12
   1454a:	f85d fb04 	ldr.w	pc, [sp], #4

0001454e <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   1454e:	b500      	push	{lr}
   14550:	b083      	sub	sp, #12
   14552:	9001      	str	r0, [sp, #4]
   14554:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   14556:	2208      	movs	r2, #8
   14558:	9900      	ldr	r1, [sp, #0]
   1455a:	9801      	ldr	r0, [sp, #4]
   1455c:	f7f7 fdd0 	bl	c100 <memcpy>
}
   14560:	bf00      	nop
   14562:	b003      	add	sp, #12
   14564:	f85d fb04 	ldr.w	pc, [sp], #4

00014568 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   14568:	b084      	sub	sp, #16
   1456a:	9001      	str	r0, [sp, #4]
   1456c:	9100      	str	r1, [sp, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   1456e:	2310      	movs	r3, #16
   14570:	f88d 300f 	strb.w	r3, [sp, #15]
   14574:	e00f      	b.n	14596 <Calc128Xor+0x2e>
  {
    *pDst++ ^= *pSrc++;
   14576:	9b00      	ldr	r3, [sp, #0]
   14578:	1c5a      	adds	r2, r3, #1
   1457a:	9200      	str	r2, [sp, #0]
   1457c:	7819      	ldrb	r1, [r3, #0]
   1457e:	9b01      	ldr	r3, [sp, #4]
   14580:	1c5a      	adds	r2, r3, #1
   14582:	9201      	str	r2, [sp, #4]
   14584:	781a      	ldrb	r2, [r3, #0]
   14586:	404a      	eors	r2, r1
   14588:	b2d2      	uxtb	r2, r2
   1458a:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   1458c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14590:	3b01      	subs	r3, #1
   14592:	f88d 300f 	strb.w	r3, [sp, #15]
   14596:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1459a:	2b00      	cmp	r3, #0
   1459c:	d1eb      	bne.n	14576 <Calc128Xor+0xe>
  }
}
   1459e:	bf00      	nop
   145a0:	bf00      	nop
   145a2:	b004      	add	sp, #16
   145a4:	4770      	bx	lr

000145a6 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   145a6:	b086      	sub	sp, #24
   145a8:	9003      	str	r0, [sp, #12]
   145aa:	9102      	str	r1, [sp, #8]
   145ac:	4613      	mov	r3, r2
   145ae:	f8ad 3006 	strh.w	r3, [sp, #6]
  int16_t i;

  for (i=0; i<len; i++)
   145b2:	2300      	movs	r3, #0
   145b4:	f8ad 3016 	strh.w	r3, [sp, #22]
   145b8:	e015      	b.n	145e6 <WStrReverseCpy+0x40>
  {
    pBuf1[len-1-i] = pBuf2[i];
   145ba:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   145be:	9a02      	ldr	r2, [sp, #8]
   145c0:	441a      	add	r2, r3
   145c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   145c6:	1e59      	subs	r1, r3, #1
   145c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   145cc:	1acb      	subs	r3, r1, r3
   145ce:	4619      	mov	r1, r3
   145d0:	9b03      	ldr	r3, [sp, #12]
   145d2:	440b      	add	r3, r1
   145d4:	7812      	ldrb	r2, [r2, #0]
   145d6:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   145d8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   145dc:	b29b      	uxth	r3, r3
   145de:	3301      	adds	r3, #1
   145e0:	b29b      	uxth	r3, r3
   145e2:	f8ad 3016 	strh.w	r3, [sp, #22]
   145e6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   145ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   145ee:	429a      	cmp	r2, r3
   145f0:	dbe3      	blt.n	145ba <WStrReverseCpy+0x14>
  }
}
   145f2:	bf00      	nop
   145f4:	bf00      	nop
   145f6:	b006      	add	sp, #24
   145f8:	4770      	bx	lr

000145fa <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   145fa:	b084      	sub	sp, #16
   145fc:	9001      	str	r0, [sp, #4]
   145fe:	460b      	mov	r3, r1
   14600:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   14604:	2300      	movs	r3, #0
   14606:	f88d 300f 	strb.w	r3, [sp, #15]
   1460a:	e024      	b.n	14656 <WStrReverse+0x5c>
  {
    temp = pBuf[len-i-1];
   1460c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14610:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14614:	1ad3      	subs	r3, r2, r3
   14616:	3b01      	subs	r3, #1
   14618:	9a01      	ldr	r2, [sp, #4]
   1461a:	4413      	add	r3, r2
   1461c:	781b      	ldrb	r3, [r3, #0]
   1461e:	f88d 300e 	strb.w	r3, [sp, #14]
    pBuf[len-i-1] = pBuf[i];
   14622:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14626:	9a01      	ldr	r2, [sp, #4]
   14628:	441a      	add	r2, r3
   1462a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1462e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14632:	1acb      	subs	r3, r1, r3
   14634:	3b01      	subs	r3, #1
   14636:	9901      	ldr	r1, [sp, #4]
   14638:	440b      	add	r3, r1
   1463a:	7812      	ldrb	r2, [r2, #0]
   1463c:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   1463e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14642:	9a01      	ldr	r2, [sp, #4]
   14644:	4413      	add	r3, r2
   14646:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1464a:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   1464c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14650:	3301      	adds	r3, #1
   14652:	f88d 300f 	strb.w	r3, [sp, #15]
   14656:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1465a:	085b      	lsrs	r3, r3, #1
   1465c:	b2db      	uxtb	r3, r3
   1465e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14662:	429a      	cmp	r2, r3
   14664:	d3d2      	bcc.n	1460c <WStrReverse+0x12>
  }
}
   14666:	bf00      	nop
   14668:	bf00      	nop
   1466a:	b004      	add	sp, #16
   1466c:	4770      	bx	lr
	...

00014670 <dmAdvCbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvCbInit(uint8_t advHandle)
{
   14670:	b082      	sub	sp, #8
   14672:	4603      	mov	r3, r0
   14674:	f88d 3007 	strb.w	r3, [sp, #7]
  /* initialize control block */
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   14678:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1467c:	4a14      	ldr	r2, [pc, #80]	; (146d0 <dmAdvCbInit+0x60>)
   1467e:	4413      	add	r3, r2
   14680:	22ff      	movs	r2, #255	; 0xff
   14682:	751a      	strb	r2, [r3, #20]
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   14684:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14688:	4a11      	ldr	r2, [pc, #68]	; (146d0 <dmAdvCbInit+0x60>)
   1468a:	3308      	adds	r3, #8
   1468c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   14690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  dmAdvCb.intervalMax[advHandle] = DM_GAP_ADV_SLOW_INT_MAX;
   14694:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14698:	4a0d      	ldr	r2, [pc, #52]	; (146d0 <dmAdvCbInit+0x60>)
   1469a:	3308      	adds	r3, #8
   1469c:	005b      	lsls	r3, r3, #1
   1469e:	4413      	add	r3, r2
   146a0:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   146a4:	805a      	strh	r2, [r3, #2]
  dmAdvCb.channelMap[advHandle] = DM_ADV_CHAN_ALL;
   146a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146aa:	4a09      	ldr	r2, [pc, #36]	; (146d0 <dmAdvCbInit+0x60>)
   146ac:	4413      	add	r3, r2
   146ae:	2207      	movs	r2, #7
   146b0:	755a      	strb	r2, [r3, #21]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   146b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146b6:	4a07      	ldr	r2, [pc, #28]	; (146d4 <dmAdvCbInit+0x64>)
   146b8:	4413      	add	r3, r2
   146ba:	2200      	movs	r2, #0
   146bc:	745a      	strb	r2, [r3, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
   146be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146c2:	4a03      	ldr	r2, [pc, #12]	; (146d0 <dmAdvCbInit+0x60>)
   146c4:	4413      	add	r3, r2
   146c6:	2200      	movs	r2, #0
   146c8:	75da      	strb	r2, [r3, #23]
}
   146ca:	bf00      	nop
   146cc:	b002      	add	sp, #8
   146ce:	4770      	bx	lr
   146d0:	10009480 	.word	0x10009480
   146d4:	10009568 	.word	0x10009568

000146d8 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
   146d8:	b500      	push	{lr}
   146da:	b083      	sub	sp, #12
  uint8_t i;

  /* initialize control block */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   146dc:	2300      	movs	r3, #0
   146de:	f88d 3007 	strb.w	r3, [sp, #7]
   146e2:	e009      	b.n	146f8 <dmAdvInit+0x20>
  {
    dmAdvCbInit(i);
   146e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146e8:	4618      	mov	r0, r3
   146ea:	f7ff ffc1 	bl	14670 <dmAdvCbInit>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   146ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146f2:	3301      	adds	r3, #1
   146f4:	f88d 3007 	strb.w	r3, [sp, #7]
   146f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d0f1      	beq.n	146e4 <dmAdvInit+0xc>
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   14700:	4b05      	ldr	r3, [pc, #20]	; (14718 <dmAdvInit+0x40>)
   14702:	7b1a      	ldrb	r2, [r3, #12]
   14704:	4b05      	ldr	r3, [pc, #20]	; (1471c <dmAdvInit+0x44>)
   14706:	721a      	strb	r2, [r3, #8]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
   14708:	4b03      	ldr	r3, [pc, #12]	; (14718 <dmAdvInit+0x40>)
   1470a:	2200      	movs	r2, #0
   1470c:	739a      	strb	r2, [r3, #14]
}
   1470e:	bf00      	nop
   14710:	b003      	add	sp, #12
   14712:	f85d fb04 	ldr.w	pc, [sp], #4
   14716:	bf00      	nop
   14718:	10009568 	.word	0x10009568
   1471c:	10009480 	.word	0x10009480

00014720 <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
   14720:	b500      	push	{lr}
   14722:	b08d      	sub	sp, #52	; 0x34
   14724:	4603      	mov	r3, r0
   14726:	460a      	mov	r2, r1
   14728:	f88d 3007 	strb.w	r3, [sp, #7]
   1472c:	4613      	mov	r3, r2
   1472e:	f88d 3006 	strb.w	r3, [sp, #6]
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
   14732:	ab03      	add	r3, sp, #12
   14734:	2224      	movs	r2, #36	; 0x24
   14736:	2100      	movs	r1, #0
   14738:	4618      	mov	r0, r3
   1473a:	f013 fe7f 	bl	2843c <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   1473e:	2302      	movs	r3, #2
   14740:	f88d 300e 	strb.w	r3, [sp, #14]
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   14744:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14748:	f88d 3010 	strb.w	r3, [sp, #16]
   1474c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14750:	f88d 300f 	strb.w	r3, [sp, #15]
  leConnCmpl.role = DM_ROLE_SLAVE;
   14754:	2301      	movs	r3, #1
   14756:	f88d 3014 	strb.w	r3, [sp, #20]
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   1475a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1475e:	4a0f      	ldr	r2, [pc, #60]	; (1479c <dmAdvGenConnCmpl+0x7c>)
   14760:	4413      	add	r3, r2
   14762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   14766:	f88d 3015 	strb.w	r3, [sp, #21]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   1476a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1476e:	4613      	mov	r3, r2
   14770:	005b      	lsls	r3, r3, #1
   14772:	4413      	add	r3, r2
   14774:	005b      	lsls	r3, r3, #1
   14776:	3318      	adds	r3, #24
   14778:	4a08      	ldr	r2, [pc, #32]	; (1479c <dmAdvGenConnCmpl+0x7c>)
   1477a:	4413      	add	r3, r2
   1477c:	1cda      	adds	r2, r3, #3
   1477e:	ab03      	add	r3, sp, #12
   14780:	330a      	adds	r3, #10
   14782:	4611      	mov	r1, r2
   14784:	4618      	mov	r0, r3
   14786:	f7ff fe8f 	bl	144a8 <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
   1478a:	ab03      	add	r3, sp, #12
   1478c:	4618      	mov	r0, r3
   1478e:	f001 ffc7 	bl	16720 <dmDevPassHciEvtToConn>
}
   14792:	bf00      	nop
   14794:	b00d      	add	sp, #52	; 0x34
   14796:	f85d fb04 	ldr.w	pc, [sp], #4
   1479a:	bf00      	nop
   1479c:	10009480 	.word	0x10009480

000147a0 <DmAdvConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvConfig(uint8_t advHandle, uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   147a0:	b500      	push	{lr}
   147a2:	b085      	sub	sp, #20
   147a4:	9300      	str	r3, [sp, #0]
   147a6:	4603      	mov	r3, r0
   147a8:	f88d 3007 	strb.w	r3, [sp, #7]
   147ac:	460b      	mov	r3, r1
   147ae:	f88d 3006 	strb.w	r3, [sp, #6]
   147b2:	4613      	mov	r3, r2
   147b4:	f88d 3005 	strb.w	r3, [sp, #5]
  dmAdvApiConfig_t *pMsg;

  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
   147b8:	200e      	movs	r0, #14
   147ba:	f7f8 fcdb 	bl	d174 <WsfMsgAlloc>
   147be:	9003      	str	r0, [sp, #12]
   147c0:	9b03      	ldr	r3, [sp, #12]
   147c2:	2b00      	cmp	r3, #0
   147c4:	d01a      	beq.n	147fc <DmAdvConfig+0x5c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
   147c6:	9b03      	ldr	r3, [sp, #12]
   147c8:	2200      	movs	r2, #0
   147ca:	709a      	strb	r2, [r3, #2]
    pMsg->advType = advType;
   147cc:	9b03      	ldr	r3, [sp, #12]
   147ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
   147d2:	715a      	strb	r2, [r3, #5]
    pMsg->advHandle = advHandle;
   147d4:	9b03      	ldr	r3, [sp, #12]
   147d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   147da:	711a      	strb	r2, [r3, #4]
    pMsg->peerAddrType = peerAddrType;
   147dc:	9b03      	ldr	r3, [sp, #12]
   147de:	f89d 2005 	ldrb.w	r2, [sp, #5]
   147e2:	719a      	strb	r2, [r3, #6]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
   147e4:	9b03      	ldr	r3, [sp, #12]
   147e6:	3307      	adds	r3, #7
   147e8:	9900      	ldr	r1, [sp, #0]
   147ea:	4618      	mov	r0, r3
   147ec:	f7ff fe5c 	bl	144a8 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   147f0:	4b04      	ldr	r3, [pc, #16]	; (14804 <DmAdvConfig+0x64>)
   147f2:	7b1b      	ldrb	r3, [r3, #12]
   147f4:	9903      	ldr	r1, [sp, #12]
   147f6:	4618      	mov	r0, r3
   147f8:	f7f8 fce0 	bl	d1bc <WsfMsgSend>
  }
}
   147fc:	bf00      	nop
   147fe:	b005      	add	sp, #20
   14800:	f85d fb04 	ldr.w	pc, [sp], #4
   14804:	10009568 	.word	0x10009568

00014808 <DmAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetData(uint8_t advHandle, uint8_t op, uint8_t location, uint8_t len, uint8_t *pData)
{
   14808:	b510      	push	{r4, lr}
   1480a:	b084      	sub	sp, #16
   1480c:	4604      	mov	r4, r0
   1480e:	4608      	mov	r0, r1
   14810:	4611      	mov	r1, r2
   14812:	461a      	mov	r2, r3
   14814:	4623      	mov	r3, r4
   14816:	f88d 3007 	strb.w	r3, [sp, #7]
   1481a:	4603      	mov	r3, r0
   1481c:	f88d 3006 	strb.w	r3, [sp, #6]
   14820:	460b      	mov	r3, r1
   14822:	f88d 3005 	strb.w	r3, [sp, #5]
   14826:	4613      	mov	r3, r2
   14828:	f88d 3004 	strb.w	r3, [sp, #4]
  dmAdvApiSetData_t *pMsg;

  WSF_ASSERT((location == DM_DATA_LOC_SCAN) || (location == DM_DATA_LOC_ADV));
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
   1482c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14830:	b29b      	uxth	r3, r3
   14832:	3308      	adds	r3, #8
   14834:	b29b      	uxth	r3, r3
   14836:	4618      	mov	r0, r3
   14838:	f7f8 fc9c 	bl	d174 <WsfMsgAlloc>
   1483c:	9003      	str	r0, [sp, #12]
   1483e:	9b03      	ldr	r3, [sp, #12]
   14840:	2b00      	cmp	r3, #0
   14842:	d020      	beq.n	14886 <DmAdvSetData+0x7e>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
   14844:	9b03      	ldr	r3, [sp, #12]
   14846:	2201      	movs	r2, #1
   14848:	709a      	strb	r2, [r3, #2]
    pMsg->advHandle = advHandle;
   1484a:	9b03      	ldr	r3, [sp, #12]
   1484c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14850:	711a      	strb	r2, [r3, #4]
    pMsg->op = op;
   14852:	9b03      	ldr	r3, [sp, #12]
   14854:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14858:	715a      	strb	r2, [r3, #5]
    pMsg->location = location;
   1485a:	9b03      	ldr	r3, [sp, #12]
   1485c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14860:	719a      	strb	r2, [r3, #6]
    pMsg->len = len;
   14862:	9b03      	ldr	r3, [sp, #12]
   14864:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14868:	71da      	strb	r2, [r3, #7]
    memcpy(pMsg->pData, pData, len);
   1486a:	9b03      	ldr	r3, [sp, #12]
   1486c:	3308      	adds	r3, #8
   1486e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14872:	9906      	ldr	r1, [sp, #24]
   14874:	4618      	mov	r0, r3
   14876:	f7f7 fc43 	bl	c100 <memcpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   1487a:	4b04      	ldr	r3, [pc, #16]	; (1488c <DmAdvSetData+0x84>)
   1487c:	7b1b      	ldrb	r3, [r3, #12]
   1487e:	9903      	ldr	r1, [sp, #12]
   14880:	4618      	mov	r0, r3
   14882:	f7f8 fc9b 	bl	d1bc <WsfMsgSend>
  }
}
   14886:	bf00      	nop
   14888:	b004      	add	sp, #16
   1488a:	bd10      	pop	{r4, pc}
   1488c:	10009568 	.word	0x10009568

00014890 <DmAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pDuration, uint8_t *pMaxEaEvents)
{
   14890:	b500      	push	{lr}
   14892:	b087      	sub	sp, #28
   14894:	9102      	str	r1, [sp, #8]
   14896:	9201      	str	r2, [sp, #4]
   14898:	9300      	str	r3, [sp, #0]
   1489a:	4603      	mov	r3, r0
   1489c:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t i;
  dmAdvApiStart_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
   148a0:	200a      	movs	r0, #10
   148a2:	f7f8 fc67 	bl	d174 <WsfMsgAlloc>
   148a6:	9004      	str	r0, [sp, #16]
   148a8:	9b04      	ldr	r3, [sp, #16]
   148aa:	2b00      	cmp	r3, #0
   148ac:	d03e      	beq.n	1492c <DmAdvStart+0x9c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_START;
   148ae:	9b04      	ldr	r3, [sp, #16]
   148b0:	2202      	movs	r2, #2
   148b2:	709a      	strb	r2, [r3, #2]
    pMsg->numSets = numSets;
   148b4:	9b04      	ldr	r3, [sp, #16]
   148b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   148ba:	711a      	strb	r2, [r3, #4]

    for (i = 0; i < numSets; i++)
   148bc:	2300      	movs	r3, #0
   148be:	f88d 3017 	strb.w	r3, [sp, #23]
   148c2:	e027      	b.n	14914 <DmAdvStart+0x84>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
   148c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   148c8:	9a02      	ldr	r2, [sp, #8]
   148ca:	441a      	add	r2, r3
   148cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   148d0:	7811      	ldrb	r1, [r2, #0]
   148d2:	9a04      	ldr	r2, [sp, #16]
   148d4:	4413      	add	r3, r2
   148d6:	460a      	mov	r2, r1
   148d8:	715a      	strb	r2, [r3, #5]
      pMsg->duration[i] = pDuration[i];
   148da:	f89d 3017 	ldrb.w	r3, [sp, #23]
   148de:	005b      	lsls	r3, r3, #1
   148e0:	9a01      	ldr	r2, [sp, #4]
   148e2:	441a      	add	r2, r3
   148e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   148e8:	8811      	ldrh	r1, [r2, #0]
   148ea:	9a04      	ldr	r2, [sp, #16]
   148ec:	005b      	lsls	r3, r3, #1
   148ee:	4413      	add	r3, r2
   148f0:	460a      	mov	r2, r1
   148f2:	80da      	strh	r2, [r3, #6]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
   148f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   148f8:	9a00      	ldr	r2, [sp, #0]
   148fa:	441a      	add	r2, r3
   148fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14900:	7811      	ldrb	r1, [r2, #0]
   14902:	9a04      	ldr	r2, [sp, #16]
   14904:	4413      	add	r3, r2
   14906:	460a      	mov	r2, r1
   14908:	721a      	strb	r2, [r3, #8]
    for (i = 0; i < numSets; i++)
   1490a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1490e:	3301      	adds	r3, #1
   14910:	f88d 3017 	strb.w	r3, [sp, #23]
   14914:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14918:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1491c:	429a      	cmp	r2, r3
   1491e:	d3d1      	bcc.n	148c4 <DmAdvStart+0x34>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   14920:	4b04      	ldr	r3, [pc, #16]	; (14934 <DmAdvStart+0xa4>)
   14922:	7b1b      	ldrb	r3, [r3, #12]
   14924:	9904      	ldr	r1, [sp, #16]
   14926:	4618      	mov	r0, r3
   14928:	f7f8 fc48 	bl	d1bc <WsfMsgSend>
  }
}
   1492c:	bf00      	nop
   1492e:	b007      	add	sp, #28
   14930:	f85d fb04 	ldr.w	pc, [sp], #4
   14934:	10009568 	.word	0x10009568

00014938 <DmAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   14938:	b500      	push	{lr}
   1493a:	b085      	sub	sp, #20
   1493c:	4603      	mov	r3, r0
   1493e:	9100      	str	r1, [sp, #0]
   14940:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t i;
  dmAdvApiStop_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStop_t))) != NULL)
   14944:	2006      	movs	r0, #6
   14946:	f7f8 fc15 	bl	d174 <WsfMsgAlloc>
   1494a:	9002      	str	r0, [sp, #8]
   1494c:	9b02      	ldr	r3, [sp, #8]
   1494e:	2b00      	cmp	r3, #0
   14950:	d026      	beq.n	149a0 <DmAdvStop+0x68>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_STOP;
   14952:	9b02      	ldr	r3, [sp, #8]
   14954:	2203      	movs	r2, #3
   14956:	709a      	strb	r2, [r3, #2]
    pMsg->numSets = numSets;
   14958:	9b02      	ldr	r3, [sp, #8]
   1495a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1495e:	711a      	strb	r2, [r3, #4]

    for (i = 0; i < numSets; i++)
   14960:	2300      	movs	r3, #0
   14962:	f88d 300f 	strb.w	r3, [sp, #15]
   14966:	e00f      	b.n	14988 <DmAdvStop+0x50>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
   14968:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1496c:	9a00      	ldr	r2, [sp, #0]
   1496e:	441a      	add	r2, r3
   14970:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14974:	7811      	ldrb	r1, [r2, #0]
   14976:	9a02      	ldr	r2, [sp, #8]
   14978:	4413      	add	r3, r2
   1497a:	460a      	mov	r2, r1
   1497c:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < numSets; i++)
   1497e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14982:	3301      	adds	r3, #1
   14984:	f88d 300f 	strb.w	r3, [sp, #15]
   14988:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1498c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14990:	429a      	cmp	r2, r3
   14992:	d3e9      	bcc.n	14968 <DmAdvStop+0x30>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   14994:	4b04      	ldr	r3, [pc, #16]	; (149a8 <DmAdvStop+0x70>)
   14996:	7b1b      	ldrb	r3, [r3, #12]
   14998:	9902      	ldr	r1, [sp, #8]
   1499a:	4618      	mov	r0, r3
   1499c:	f7f8 fc0e 	bl	d1bc <WsfMsgSend>
  }
}
   149a0:	bf00      	nop
   149a2:	b005      	add	sp, #20
   149a4:	f85d fb04 	ldr.w	pc, [sp], #4
   149a8:	10009568 	.word	0x10009568

000149ac <DmAdvSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetInterval(uint8_t advHandle, uint16_t intervalMin, uint16_t intervalMax)
{
   149ac:	b500      	push	{lr}
   149ae:	b083      	sub	sp, #12
   149b0:	4603      	mov	r3, r0
   149b2:	f88d 3007 	strb.w	r3, [sp, #7]
   149b6:	460b      	mov	r3, r1
   149b8:	f8ad 3004 	strh.w	r3, [sp, #4]
   149bc:	4613      	mov	r3, r2
   149be:	f8ad 3002 	strh.w	r3, [sp, #2]
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  WsfTaskLock();
   149c2:	f7f8 fc63 	bl	d28c <WsfTaskLock>
  dmAdvCb.intervalMin[advHandle] = intervalMin;
   149c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149ca:	490a      	ldr	r1, [pc, #40]	; (149f4 <DmAdvSetInterval+0x48>)
   149cc:	3308      	adds	r3, #8
   149ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   149d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  dmAdvCb.intervalMax[advHandle] = intervalMax;
   149d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149da:	4a06      	ldr	r2, [pc, #24]	; (149f4 <DmAdvSetInterval+0x48>)
   149dc:	3308      	adds	r3, #8
   149de:	005b      	lsls	r3, r3, #1
   149e0:	4413      	add	r3, r2
   149e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   149e6:	805a      	strh	r2, [r3, #2]
  WsfTaskUnlock();
   149e8:	f7f8 fc55 	bl	d296 <WsfTaskUnlock>
}
   149ec:	bf00      	nop
   149ee:	b003      	add	sp, #12
   149f0:	f85d fb04 	ldr.w	pc, [sp], #4
   149f4:	10009480 	.word	0x10009480

000149f8 <dmAdvConfig>:
 *
 *  \return None.
*/
/*************************************************************************************************/
static void dmAdvConfig(uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   149f8:	b530      	push	{r4, r5, lr}
   149fa:	b087      	sub	sp, #28
   149fc:	4603      	mov	r3, r0
   149fe:	9204      	str	r2, [sp, #16]
   14a00:	f88d 3017 	strb.w	r3, [sp, #23]
   14a04:	460b      	mov	r3, r1
   14a06:	f88d 3016 	strb.w	r3, [sp, #22]
  /* set advertising parameters */
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   14a0a:	4b12      	ldr	r3, [pc, #72]	; (14a54 <dmAdvConfig+0x5c>)
   14a0c:	8a1c      	ldrh	r4, [r3, #16]
   14a0e:	4b11      	ldr	r3, [pc, #68]	; (14a54 <dmAdvConfig+0x5c>)
   14a10:	8a5d      	ldrh	r5, [r3, #18]
   14a12:	4b11      	ldr	r3, [pc, #68]	; (14a58 <dmAdvConfig+0x60>)
   14a14:	7b9b      	ldrb	r3, [r3, #14]
   14a16:	4618      	mov	r0, r3
   14a18:	f001 fef8 	bl	1680c <DmLlAddrType>
   14a1c:	4603      	mov	r3, r0
   14a1e:	4618      	mov	r0, r3
   14a20:	4b0c      	ldr	r3, [pc, #48]	; (14a54 <dmAdvConfig+0x5c>)
   14a22:	7d5b      	ldrb	r3, [r3, #21]
   14a24:	4a0c      	ldr	r2, [pc, #48]	; (14a58 <dmAdvConfig+0x60>)
   14a26:	7c52      	ldrb	r2, [r2, #17]
   14a28:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14a2c:	9203      	str	r2, [sp, #12]
   14a2e:	9302      	str	r3, [sp, #8]
   14a30:	9b04      	ldr	r3, [sp, #16]
   14a32:	9301      	str	r3, [sp, #4]
   14a34:	f89d 3016 	ldrb.w	r3, [sp, #22]
   14a38:	9300      	str	r3, [sp, #0]
   14a3a:	4603      	mov	r3, r0
   14a3c:	460a      	mov	r2, r1
   14a3e:	4629      	mov	r1, r5
   14a40:	4620      	mov	r0, r4
   14a42:	f009 fd56 	bl	1e4f2 <HciLeSetAdvParamCmd>
                      pPeerAddr,                                  /* pPeerAddr */
                      dmAdvCb.channelMap[DM_ADV_HANDLE_DEFAULT],  /* advChanMap */
                      dmCb.advFiltPolicy[DM_ADV_HANDLE_DEFAULT]); /* advFiltPolicy */

  /* store advertising type */
  dmLegAdvCb.advType = advType;
   14a46:	4a05      	ldr	r2, [pc, #20]	; (14a5c <dmAdvConfig+0x64>)
   14a48:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14a4c:	7013      	strb	r3, [r2, #0]
}
   14a4e:	bf00      	nop
   14a50:	b007      	add	sp, #28
   14a52:	bd30      	pop	{r4, r5, pc}
   14a54:	10009480 	.word	0x10009480
   14a58:	10009568 	.word	0x10009568
   14a5c:	10004470 	.word	0x10004470

00014a60 <dmAdvActConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActConfig(dmAdvMsg_t *pMsg)
{
   14a60:	b500      	push	{lr}
   14a62:	b083      	sub	sp, #12
   14a64:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14a66:	4b11      	ldr	r3, [pc, #68]	; (14aac <dmAdvActConfig+0x4c>)
   14a68:	7ddb      	ldrb	r3, [r3, #23]
   14a6a:	4619      	mov	r1, r3
   14a6c:	4810      	ldr	r0, [pc, #64]	; (14ab0 <dmAdvActConfig+0x50>)
   14a6e:	f7f8 ffeb 	bl	da48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   14a72:	4b0e      	ldr	r3, [pc, #56]	; (14aac <dmAdvActConfig+0x4c>)
   14a74:	7ddb      	ldrb	r3, [r3, #23]
   14a76:	2b00      	cmp	r3, #0
   14a78:	d114      	bne.n	14aa4 <dmAdvActConfig+0x44>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14a7a:	4b0c      	ldr	r3, [pc, #48]	; (14aac <dmAdvActConfig+0x4c>)
   14a7c:	7d1b      	ldrb	r3, [r3, #20]
   14a7e:	2b01      	cmp	r3, #1
   14a80:	d003      	beq.n	14a8a <dmAdvActConfig+0x2a>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   14a82:	4b0a      	ldr	r3, [pc, #40]	; (14aac <dmAdvActConfig+0x4c>)
   14a84:	7d1b      	ldrb	r3, [r3, #20]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14a86:	2b04      	cmp	r3, #4
   14a88:	d103      	bne.n	14a92 <dmAdvActConfig+0x32>
    {
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   14a8a:	480a      	ldr	r0, [pc, #40]	; (14ab4 <dmAdvActConfig+0x54>)
   14a8c:	f7f8 ffdc 	bl	da48 <WsfTrace>
      return;
   14a90:	e008      	b.n	14aa4 <dmAdvActConfig+0x44>
    }

    /* set advertising parameters */
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   14a92:	9b01      	ldr	r3, [sp, #4]
   14a94:	7958      	ldrb	r0, [r3, #5]
   14a96:	9b01      	ldr	r3, [sp, #4]
   14a98:	7999      	ldrb	r1, [r3, #6]
   14a9a:	9b01      	ldr	r3, [sp, #4]
   14a9c:	3307      	adds	r3, #7
   14a9e:	461a      	mov	r2, r3
   14aa0:	f7ff ffaa 	bl	149f8 <dmAdvConfig>
  }
}
   14aa4:	b003      	add	sp, #12
   14aa6:	f85d fb04 	ldr.w	pc, [sp], #4
   14aaa:	bf00      	nop
   14aac:	10009480 	.word	0x10009480
   14ab0:	0002b77c 	.word	0x0002b77c
   14ab4:	0002b798 	.word	0x0002b798

00014ab8 <dmAdvActSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActSetData(dmAdvMsg_t *pMsg)
{
   14ab8:	b500      	push	{lr}
   14aba:	b083      	sub	sp, #12
   14abc:	9001      	str	r0, [sp, #4]
  WSF_ASSERT(pMsg->apiSetData.len <= HCI_ADV_DATA_LEN);

  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14abe:	4b11      	ldr	r3, [pc, #68]	; (14b04 <dmAdvActSetData+0x4c>)
   14ac0:	7ddb      	ldrb	r3, [r3, #23]
   14ac2:	4619      	mov	r1, r3
   14ac4:	4810      	ldr	r0, [pc, #64]	; (14b08 <dmAdvActSetData+0x50>)
   14ac6:	f7f8 ffbf 	bl	da48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   14aca:	4b0e      	ldr	r3, [pc, #56]	; (14b04 <dmAdvActSetData+0x4c>)
   14acc:	7ddb      	ldrb	r3, [r3, #23]
   14ace:	2b00      	cmp	r3, #0
   14ad0:	d114      	bne.n	14afc <dmAdvActSetData+0x44>
  {
    /* set new data in HCI */
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   14ad2:	9b01      	ldr	r3, [sp, #4]
   14ad4:	799b      	ldrb	r3, [r3, #6]
   14ad6:	2b00      	cmp	r3, #0
   14ad8:	d108      	bne.n	14aec <dmAdvActSetData+0x34>
    {
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   14ada:	9b01      	ldr	r3, [sp, #4]
   14adc:	79da      	ldrb	r2, [r3, #7]
   14ade:	9b01      	ldr	r3, [sp, #4]
   14ae0:	3308      	adds	r3, #8
   14ae2:	4619      	mov	r1, r3
   14ae4:	4610      	mov	r0, r2
   14ae6:	f009 fcd0 	bl	1e48a <HciLeSetAdvDataCmd>
    else
    {
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
    }
  }
}
   14aea:	e007      	b.n	14afc <dmAdvActSetData+0x44>
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   14aec:	9b01      	ldr	r3, [sp, #4]
   14aee:	79da      	ldrb	r2, [r3, #7]
   14af0:	9b01      	ldr	r3, [sp, #4]
   14af2:	3308      	adds	r3, #8
   14af4:	4619      	mov	r1, r3
   14af6:	4610      	mov	r0, r2
   14af8:	f009 fd87 	bl	1e60a <HciLeSetScanRespDataCmd>
}
   14afc:	bf00      	nop
   14afe:	b003      	add	sp, #12
   14b00:	f85d fb04 	ldr.w	pc, [sp], #4
   14b04:	10009480 	.word	0x10009480
   14b08:	0002b7c4 	.word	0x0002b7c4

00014b0c <dmAdvActStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActStart(dmAdvMsg_t *pMsg)
{
   14b0c:	b500      	push	{lr}
   14b0e:	b083      	sub	sp, #12
   14b10:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14b12:	4b11      	ldr	r3, [pc, #68]	; (14b58 <dmAdvActStart+0x4c>)
   14b14:	7ddb      	ldrb	r3, [r3, #23]
   14b16:	4619      	mov	r1, r3
   14b18:	4810      	ldr	r0, [pc, #64]	; (14b5c <dmAdvActStart+0x50>)
   14b1a:	f7f8 ff95 	bl	da48 <WsfTrace>

   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   14b1e:	4b0e      	ldr	r3, [pc, #56]	; (14b58 <dmAdvActStart+0x4c>)
   14b20:	7ddb      	ldrb	r3, [r3, #23]
   14b22:	2b00      	cmp	r3, #0
   14b24:	d115      	bne.n	14b52 <dmAdvActStart+0x46>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14b26:	4b0c      	ldr	r3, [pc, #48]	; (14b58 <dmAdvActStart+0x4c>)
   14b28:	7d1b      	ldrb	r3, [r3, #20]
   14b2a:	2b01      	cmp	r3, #1
   14b2c:	d003      	beq.n	14b36 <dmAdvActStart+0x2a>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   14b2e:	4b0a      	ldr	r3, [pc, #40]	; (14b58 <dmAdvActStart+0x4c>)
   14b30:	7d1b      	ldrb	r3, [r3, #20]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14b32:	2b04      	cmp	r3, #4
   14b34:	d103      	bne.n	14b3e <dmAdvActStart+0x32>
    {
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
   14b36:	480a      	ldr	r0, [pc, #40]	; (14b60 <dmAdvActStart+0x54>)
   14b38:	f7f8 ff86 	bl	da48 <WsfTrace>
      return;
   14b3c:	e009      	b.n	14b52 <dmAdvActStart+0x46>
    }

    /* start advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
   14b3e:	4b06      	ldr	r3, [pc, #24]	; (14b58 <dmAdvActStart+0x4c>)
   14b40:	2203      	movs	r2, #3
   14b42:	75da      	strb	r2, [r3, #23]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
   14b44:	9b01      	ldr	r3, [sp, #4]
   14b46:	88da      	ldrh	r2, [r3, #6]
   14b48:	4b03      	ldr	r3, [pc, #12]	; (14b58 <dmAdvActStart+0x4c>)
   14b4a:	831a      	strh	r2, [r3, #24]
    HciLeSetAdvEnableCmd(TRUE);
   14b4c:	2001      	movs	r0, #1
   14b4e:	f009 fc7e 	bl	1e44e <HciLeSetAdvEnableCmd>
  }
}
   14b52:	b003      	add	sp, #12
   14b54:	f85d fb04 	ldr.w	pc, [sp], #4
   14b58:	10009480 	.word	0x10009480
   14b5c:	0002b7e0 	.word	0x0002b7e0
   14b60:	0002b7fc 	.word	0x0002b7fc

00014b64 <dmAdvActStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActStop(dmAdvMsg_t *pMsg)
{
   14b64:	b500      	push	{lr}
   14b66:	b083      	sub	sp, #12
   14b68:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14b6a:	4b0f      	ldr	r3, [pc, #60]	; (14ba8 <dmAdvActStop+0x44>)
   14b6c:	7ddb      	ldrb	r3, [r3, #23]
   14b6e:	4619      	mov	r1, r3
   14b70:	480e      	ldr	r0, [pc, #56]	; (14bac <dmAdvActStop+0x48>)
   14b72:	f7f8 ff69 	bl	da48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   14b76:	4b0c      	ldr	r3, [pc, #48]	; (14ba8 <dmAdvActStop+0x44>)
   14b78:	7ddb      	ldrb	r3, [r3, #23]
   14b7a:	2b01      	cmp	r3, #1
   14b7c:	d111      	bne.n	14ba2 <dmAdvActStop+0x3e>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14b7e:	4b0a      	ldr	r3, [pc, #40]	; (14ba8 <dmAdvActStop+0x44>)
   14b80:	7d1b      	ldrb	r3, [r3, #20]
   14b82:	2b01      	cmp	r3, #1
   14b84:	d003      	beq.n	14b8e <dmAdvActStop+0x2a>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   14b86:	4b08      	ldr	r3, [pc, #32]	; (14ba8 <dmAdvActStop+0x44>)
   14b88:	7d1b      	ldrb	r3, [r3, #20]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14b8a:	2b04      	cmp	r3, #4
   14b8c:	d103      	bne.n	14b96 <dmAdvActStop+0x32>
    {
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
   14b8e:	4808      	ldr	r0, [pc, #32]	; (14bb0 <dmAdvActStop+0x4c>)
   14b90:	f7f8 ff5a 	bl	da48 <WsfTrace>
      return;
   14b94:	e005      	b.n	14ba2 <dmAdvActStop+0x3e>
    }

    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   14b96:	4b04      	ldr	r3, [pc, #16]	; (14ba8 <dmAdvActStop+0x44>)
   14b98:	2205      	movs	r2, #5
   14b9a:	75da      	strb	r2, [r3, #23]
    HciLeSetAdvEnableCmd(FALSE);
   14b9c:	2000      	movs	r0, #0
   14b9e:	f009 fc56 	bl	1e44e <HciLeSetAdvEnableCmd>
  }
}
   14ba2:	b003      	add	sp, #12
   14ba4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ba8:	10009480 	.word	0x10009480
   14bac:	0002b828 	.word	0x0002b828
   14bb0:	0002b840 	.word	0x0002b840

00014bb4 <dmAdvActRemoveSet>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
   14bb4:	b082      	sub	sp, #8
   14bb6:	9001      	str	r0, [sp, #4]
  /* empty */
}
   14bb8:	bf00      	nop
   14bba:	b002      	add	sp, #8
   14bbc:	4770      	bx	lr

00014bbe <dmAdvActClearSets>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActClearSets(dmAdvMsg_t *pMsg)
{
   14bbe:	b082      	sub	sp, #8
   14bc0:	9001      	str	r0, [sp, #4]
  /* empty */
}
   14bc2:	bf00      	nop
   14bc4:	b002      	add	sp, #8
   14bc6:	4770      	bx	lr

00014bc8 <dmAdvActSetRandAddr>:
*
*  \return None.
*/
/*************************************************************************************************/
void dmAdvActSetRandAddr(dmAdvMsg_t *pMsg)
{
   14bc8:	b082      	sub	sp, #8
   14bca:	9001      	str	r0, [sp, #4]
  /* empty */
}
   14bcc:	bf00      	nop
   14bce:	b002      	add	sp, #8
   14bd0:	4770      	bx	lr
	...

00014bd4 <dmAdvActTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActTimeout(dmAdvMsg_t *pMsg)
{
   14bd4:	b500      	push	{lr}
   14bd6:	b083      	sub	sp, #12
   14bd8:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO0("dmAdvActTimeout!");
   14bda:	4808      	ldr	r0, [pc, #32]	; (14bfc <dmAdvActTimeout+0x28>)
   14bdc:	f7f8 ff34 	bl	da48 <WsfTrace>

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   14be0:	4b07      	ldr	r3, [pc, #28]	; (14c00 <dmAdvActTimeout+0x2c>)
   14be2:	7ddb      	ldrb	r3, [r3, #23]
   14be4:	2b01      	cmp	r3, #1
   14be6:	d105      	bne.n	14bf4 <dmAdvActTimeout+0x20>
  {
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   14be8:	4b05      	ldr	r3, [pc, #20]	; (14c00 <dmAdvActTimeout+0x2c>)
   14bea:	2205      	movs	r2, #5
   14bec:	75da      	strb	r2, [r3, #23]
    HciLeSetAdvEnableCmd(FALSE);
   14bee:	2000      	movs	r0, #0
   14bf0:	f009 fc2d 	bl	1e44e <HciLeSetAdvEnableCmd>
  }
}
   14bf4:	bf00      	nop
   14bf6:	b003      	add	sp, #12
   14bf8:	f85d fb04 	ldr.w	pc, [sp], #4
   14bfc:	0002b868 	.word	0x0002b868
   14c00:	10009480 	.word	0x10009480

00014c04 <dmAdvReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvReset(void)
{
   14c04:	b500      	push	{lr}
   14c06:	b083      	sub	sp, #12
  wsfMsgHdr_t advStop;

  /* if stopping undirected advertisement or advertising but not high duty cycle directed adv */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   14c08:	4b0f      	ldr	r3, [pc, #60]	; (14c48 <dmAdvReset+0x44>)
   14c0a:	7ddb      	ldrb	r3, [r3, #23]
   14c0c:	2b05      	cmp	r3, #5
   14c0e:	d007      	beq.n	14c20 <dmAdvReset+0x1c>
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   14c10:	4b0d      	ldr	r3, [pc, #52]	; (14c48 <dmAdvReset+0x44>)
   14c12:	7ddb      	ldrb	r3, [r3, #23]
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   14c14:	2b01      	cmp	r3, #1
   14c16:	d111      	bne.n	14c3c <dmAdvReset+0x38>
       (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] != DM_ADV_CONN_DIRECT)))
   14c18:	4b0b      	ldr	r3, [pc, #44]	; (14c48 <dmAdvReset+0x44>)
   14c1a:	7d1b      	ldrb	r3, [r3, #20]
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   14c1c:	2b01      	cmp	r3, #1
   14c1e:	d00d      	beq.n	14c3c <dmAdvReset+0x38>
  {
    /* stop advertising timer */
    WsfTimerStop(&dmAdvCb.advTimer);
   14c20:	4809      	ldr	r0, [pc, #36]	; (14c48 <dmAdvReset+0x44>)
   14c22:	f7f8 fe4d 	bl	d8c0 <WsfTimerStop>

    /* generate advertising stop event */
    advStop.status = HCI_SUCCESS;
   14c26:	2300      	movs	r3, #0
   14c28:	f88d 3007 	strb.w	r3, [sp, #7]
    advStop.event = DM_ADV_STOP_IND;
   14c2c:	2322      	movs	r3, #34	; 0x22
   14c2e:	f88d 3006 	strb.w	r3, [sp, #6]

    /* call callback */
    (*dmCb.cback)((dmEvt_t *) &advStop);
   14c32:	4b06      	ldr	r3, [pc, #24]	; (14c4c <dmAdvReset+0x48>)
   14c34:	689b      	ldr	r3, [r3, #8]
   14c36:	aa01      	add	r2, sp, #4
   14c38:	4610      	mov	r0, r2
   14c3a:	4798      	blx	r3
  }

  /* reset legacy adv module */
  dmAdvInit();
   14c3c:	f7ff fd4c 	bl	146d8 <dmAdvInit>
}
   14c40:	bf00      	nop
   14c42:	b003      	add	sp, #12
   14c44:	f85d fb04 	ldr.w	pc, [sp], #4
   14c48:	10009480 	.word	0x10009480
   14c4c:	10009568 	.word	0x10009568

00014c50 <dmAdvHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvHciHandler(hciEvt_t *pEvent)
{
   14c50:	b500      	push	{lr}
   14c52:	b085      	sub	sp, #20
   14c54:	9001      	str	r0, [sp, #4]
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
   14c56:	9b01      	ldr	r3, [sp, #4]
   14c58:	789b      	ldrb	r3, [r3, #2]
   14c5a:	2b35      	cmp	r3, #53	; 0x35
   14c5c:	d17e      	bne.n	14d5c <dmAdvHciHandler+0x10c>
  {
    uint8_t cbackEvent = 0;
   14c5e:	2300      	movs	r3, #0
   14c60:	f88d 300f 	strb.w	r3, [sp, #15]

    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14c64:	4b3f      	ldr	r3, [pc, #252]	; (14d64 <dmAdvHciHandler+0x114>)
   14c66:	7ddb      	ldrb	r3, [r3, #23]
   14c68:	4619      	mov	r1, r3
   14c6a:	483f      	ldr	r0, [pc, #252]	; (14d68 <dmAdvHciHandler+0x118>)
   14c6c:	f7f8 feec 	bl	da48 <WsfTrace>

    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   14c70:	4b3c      	ldr	r3, [pc, #240]	; (14d64 <dmAdvHciHandler+0x114>)
   14c72:	7ddb      	ldrb	r3, [r3, #23]
   14c74:	2b03      	cmp	r3, #3
   14c76:	dc02      	bgt.n	14c7e <dmAdvHciHandler+0x2e>
   14c78:	2b02      	cmp	r3, #2
   14c7a:	da04      	bge.n	14c86 <dmAdvHciHandler+0x36>
      }
      break;

    default:
      /* ignore the event */
      break;
   14c7c:	e058      	b.n	14d30 <dmAdvHciHandler+0xe0>
   14c7e:	3b04      	subs	r3, #4
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   14c80:	2b01      	cmp	r3, #1
   14c82:	d855      	bhi.n	14d30 <dmAdvHciHandler+0xe0>
   14c84:	e02d      	b.n	14ce2 <dmAdvHciHandler+0x92>
      if (pEvent->hdr.status == HCI_SUCCESS)
   14c86:	9b01      	ldr	r3, [sp, #4]
   14c88:	78db      	ldrb	r3, [r3, #3]
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d125      	bne.n	14cda <dmAdvHciHandler+0x8a>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
   14c8e:	4b35      	ldr	r3, [pc, #212]	; (14d64 <dmAdvHciHandler+0x114>)
   14c90:	7ddb      	ldrb	r3, [r3, #23]
   14c92:	2b03      	cmp	r3, #3
   14c94:	d113      	bne.n	14cbe <dmAdvHciHandler+0x6e>
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
   14c96:	4b33      	ldr	r3, [pc, #204]	; (14d64 <dmAdvHciHandler+0x114>)
   14c98:	8b1b      	ldrh	r3, [r3, #24]
   14c9a:	2b00      	cmp	r3, #0
   14c9c:	d008      	beq.n	14cb0 <dmAdvHciHandler+0x60>
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   14c9e:	4b31      	ldr	r3, [pc, #196]	; (14d64 <dmAdvHciHandler+0x114>)
   14ca0:	2207      	movs	r2, #7
   14ca2:	731a      	strb	r2, [r3, #12]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   14ca4:	4b2f      	ldr	r3, [pc, #188]	; (14d64 <dmAdvHciHandler+0x114>)
   14ca6:	8b1b      	ldrh	r3, [r3, #24]
   14ca8:	4619      	mov	r1, r3
   14caa:	482e      	ldr	r0, [pc, #184]	; (14d64 <dmAdvHciHandler+0x114>)
   14cac:	f7f8 fdf4 	bl	d898 <WsfTimerStartMs>
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
   14cb0:	4b2e      	ldr	r3, [pc, #184]	; (14d6c <dmAdvHciHandler+0x11c>)
   14cb2:	781b      	ldrb	r3, [r3, #0]
   14cb4:	2b04      	cmp	r3, #4
   14cb6:	d002      	beq.n	14cbe <dmAdvHciHandler+0x6e>
            cbackEvent = DM_ADV_START_IND;
   14cb8:	2321      	movs	r3, #33	; 0x21
   14cba:	f88d 300f 	strb.w	r3, [sp, #15]
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   14cbe:	2300      	movs	r3, #0
   14cc0:	2200      	movs	r2, #0
   14cc2:	2121      	movs	r1, #33	; 0x21
   14cc4:	2014      	movs	r0, #20
   14cc6:	f001 fbc9 	bl	1645c <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   14cca:	4b28      	ldr	r3, [pc, #160]	; (14d6c <dmAdvHciHandler+0x11c>)
   14ccc:	781a      	ldrb	r2, [r3, #0]
   14cce:	4b25      	ldr	r3, [pc, #148]	; (14d64 <dmAdvHciHandler+0x114>)
   14cd0:	751a      	strb	r2, [r3, #20]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   14cd2:	4b24      	ldr	r3, [pc, #144]	; (14d64 <dmAdvHciHandler+0x114>)
   14cd4:	2201      	movs	r2, #1
   14cd6:	75da      	strb	r2, [r3, #23]
      break;
   14cd8:	e02b      	b.n	14d32 <dmAdvHciHandler+0xe2>
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14cda:	4b22      	ldr	r3, [pc, #136]	; (14d64 <dmAdvHciHandler+0x114>)
   14cdc:	2200      	movs	r2, #0
   14cde:	75da      	strb	r2, [r3, #23]
      break;
   14ce0:	e027      	b.n	14d32 <dmAdvHciHandler+0xe2>
      if (pEvent->hdr.status == HCI_SUCCESS)
   14ce2:	9b01      	ldr	r3, [sp, #4]
   14ce4:	78db      	ldrb	r3, [r3, #3]
   14ce6:	2b00      	cmp	r3, #0
   14ce8:	d11e      	bne.n	14d28 <dmAdvHciHandler+0xd8>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
   14cea:	4b1e      	ldr	r3, [pc, #120]	; (14d64 <dmAdvHciHandler+0x114>)
   14cec:	7ddb      	ldrb	r3, [r3, #23]
   14cee:	2b05      	cmp	r3, #5
   14cf0:	d10d      	bne.n	14d0e <dmAdvHciHandler+0xbe>
          WsfTimerStop(&dmAdvCb.advTimer);
   14cf2:	481c      	ldr	r0, [pc, #112]	; (14d64 <dmAdvHciHandler+0x114>)
   14cf4:	f7f8 fde4 	bl	d8c0 <WsfTimerStop>
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
   14cf8:	4b1c      	ldr	r3, [pc, #112]	; (14d6c <dmAdvHciHandler+0x11c>)
   14cfa:	781b      	ldrb	r3, [r3, #0]
   14cfc:	2b04      	cmp	r3, #4
   14cfe:	d103      	bne.n	14d08 <dmAdvHciHandler+0xb8>
            cbackEvent = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   14d00:	2302      	movs	r3, #2
   14d02:	f88d 300f 	strb.w	r3, [sp, #15]
   14d06:	e002      	b.n	14d0e <dmAdvHciHandler+0xbe>
            cbackEvent = DM_ADV_STOP_IND;
   14d08:	2322      	movs	r3, #34	; 0x22
   14d0a:	f88d 300f 	strb.w	r3, [sp, #15]
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   14d0e:	2300      	movs	r3, #0
   14d10:	2200      	movs	r2, #0
   14d12:	2122      	movs	r1, #34	; 0x22
   14d14:	2015      	movs	r0, #21
   14d16:	f001 fba1 	bl	1645c <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   14d1a:	4b12      	ldr	r3, [pc, #72]	; (14d64 <dmAdvHciHandler+0x114>)
   14d1c:	22ff      	movs	r2, #255	; 0xff
   14d1e:	751a      	strb	r2, [r3, #20]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14d20:	4b10      	ldr	r3, [pc, #64]	; (14d64 <dmAdvHciHandler+0x114>)
   14d22:	2200      	movs	r2, #0
   14d24:	75da      	strb	r2, [r3, #23]
      break;
   14d26:	e004      	b.n	14d32 <dmAdvHciHandler+0xe2>
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   14d28:	4b0e      	ldr	r3, [pc, #56]	; (14d64 <dmAdvHciHandler+0x114>)
   14d2a:	2201      	movs	r2, #1
   14d2c:	75da      	strb	r2, [r3, #23]
      break;
   14d2e:	e000      	b.n	14d32 <dmAdvHciHandler+0xe2>
      break;
   14d30:	bf00      	nop
    }

    /* if DM conn notify needed */
    if (cbackEvent == HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT)
   14d32:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d36:	2b02      	cmp	r3, #2
   14d38:	d104      	bne.n	14d44 <dmAdvHciHandler+0xf4>
    {
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   14d3a:	213c      	movs	r1, #60	; 0x3c
   14d3c:	2000      	movs	r0, #0
   14d3e:	f7ff fcef 	bl	14720 <dmAdvGenConnCmpl>
    {
      pEvent->hdr.event = cbackEvent;
      (*dmCb.cback)((dmEvt_t *) pEvent);
    }
  }
}
   14d42:	e00b      	b.n	14d5c <dmAdvHciHandler+0x10c>
    else if (cbackEvent)
   14d44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d48:	2b00      	cmp	r3, #0
   14d4a:	d007      	beq.n	14d5c <dmAdvHciHandler+0x10c>
      pEvent->hdr.event = cbackEvent;
   14d4c:	9b01      	ldr	r3, [sp, #4]
   14d4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14d52:	709a      	strb	r2, [r3, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   14d54:	4b06      	ldr	r3, [pc, #24]	; (14d70 <dmAdvHciHandler+0x120>)
   14d56:	689b      	ldr	r3, [r3, #8]
   14d58:	9801      	ldr	r0, [sp, #4]
   14d5a:	4798      	blx	r3
}
   14d5c:	bf00      	nop
   14d5e:	b005      	add	sp, #20
   14d60:	f85d fb04 	ldr.w	pc, [sp], #4
   14d64:	10009480 	.word	0x10009480
   14d68:	0002b87c 	.word	0x0002b87c
   14d6c:	10004470 	.word	0x10004470
   14d70:	10009568 	.word	0x10009568

00014d74 <dmAdvMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
   14d74:	b500      	push	{lr}
   14d76:	b083      	sub	sp, #12
   14d78:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
   14d7a:	9b01      	ldr	r3, [sp, #4]
   14d7c:	789b      	ldrb	r3, [r3, #2]
   14d7e:	f003 030f 	and.w	r3, r3, #15
   14d82:	4a04      	ldr	r2, [pc, #16]	; (14d94 <dmAdvMsgHandler+0x20>)
   14d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d88:	9801      	ldr	r0, [sp, #4]
   14d8a:	4798      	blx	r3
}
   14d8c:	bf00      	nop
   14d8e:	b003      	add	sp, #12
   14d90:	f85d fb04 	ldr.w	pc, [sp], #4
   14d94:	0002c250 	.word	0x0002c250

00014d98 <dmAdvStartDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStartDirected(uint8_t advType, uint16_t duration, uint8_t addrType, uint8_t *pAddr)
{
   14d98:	b500      	push	{lr}
   14d9a:	b083      	sub	sp, #12
   14d9c:	9300      	str	r3, [sp, #0]
   14d9e:	4603      	mov	r3, r0
   14da0:	f88d 3007 	strb.w	r3, [sp, #7]
   14da4:	460b      	mov	r3, r1
   14da6:	f8ad 3004 	strh.w	r3, [sp, #4]
   14daa:	4613      	mov	r3, r2
   14dac:	f88d 3006 	strb.w	r3, [sp, #6]
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14db0:	4b13      	ldr	r3, [pc, #76]	; (14e00 <dmAdvStartDirected+0x68>)
   14db2:	7ddb      	ldrb	r3, [r3, #23]
   14db4:	4619      	mov	r1, r3
   14db6:	4813      	ldr	r0, [pc, #76]	; (14e04 <dmAdvStartDirected+0x6c>)
   14db8:	f7f8 fe46 	bl	da48 <WsfTrace>

  /* if not advertising */
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   14dbc:	4b10      	ldr	r3, [pc, #64]	; (14e00 <dmAdvStartDirected+0x68>)
   14dbe:	7ddb      	ldrb	r3, [r3, #23]
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	d118      	bne.n	14df6 <dmAdvStartDirected+0x5e>
  {
    /* start advertising */
    HciLeSetAdvEnableCmd(TRUE);
   14dc4:	2001      	movs	r0, #1
   14dc6:	f009 fb42 	bl	1e44e <HciLeSetAdvEnableCmd>

    /* store advertising info */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   14dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14dce:	2b01      	cmp	r3, #1
   14dd0:	d101      	bne.n	14dd6 <dmAdvStartDirected+0x3e>
   14dd2:	2202      	movs	r2, #2
   14dd4:	e000      	b.n	14dd8 <dmAdvStartDirected+0x40>
   14dd6:	2203      	movs	r2, #3
   14dd8:	4b09      	ldr	r3, [pc, #36]	; (14e00 <dmAdvStartDirected+0x68>)
   14dda:	75da      	strb	r2, [r3, #23]
                                              DM_ADV_STATE_STARTING_DIRECTED : DM_ADV_STATE_STARTING;

    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
   14ddc:	4a08      	ldr	r2, [pc, #32]	; (14e00 <dmAdvStartDirected+0x68>)
   14dde:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14de2:	8313      	strh	r3, [r2, #24]
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   14de4:	9900      	ldr	r1, [sp, #0]
   14de6:	4808      	ldr	r0, [pc, #32]	; (14e08 <dmAdvStartDirected+0x70>)
   14de8:	f7ff fb5e 	bl	144a8 <BdaCpy>
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
   14dec:	4a04      	ldr	r2, [pc, #16]	; (14e00 <dmAdvStartDirected+0x68>)
   14dee:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14df2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  }
}
   14df6:	bf00      	nop
   14df8:	b003      	add	sp, #12
   14dfa:	f85d fb04 	ldr.w	pc, [sp], #4
   14dfe:	bf00      	nop
   14e00:	10009480 	.word	0x10009480
   14e04:	0002b8ac 	.word	0x0002b8ac
   14e08:	1000949b 	.word	0x1000949b

00014e0c <dmAdvStopDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStopDirected(void)
{
   14e0c:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvStopDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14e0e:	4b10      	ldr	r3, [pc, #64]	; (14e50 <dmAdvStopDirected+0x44>)
   14e10:	7ddb      	ldrb	r3, [r3, #23]
   14e12:	4619      	mov	r1, r3
   14e14:	480f      	ldr	r0, [pc, #60]	; (14e54 <dmAdvStopDirected+0x48>)
   14e16:	f7f8 fe17 	bl	da48 <WsfTrace>

  /* if advertising or starting advertising */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   14e1a:	4b0d      	ldr	r3, [pc, #52]	; (14e50 <dmAdvStopDirected+0x44>)
   14e1c:	7ddb      	ldrb	r3, [r3, #23]
   14e1e:	2b01      	cmp	r3, #1
   14e20:	d007      	beq.n	14e32 <dmAdvStopDirected+0x26>
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)    ||
   14e22:	4b0b      	ldr	r3, [pc, #44]	; (14e50 <dmAdvStopDirected+0x44>)
   14e24:	7ddb      	ldrb	r3, [r3, #23]
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   14e26:	2b03      	cmp	r3, #3
   14e28:	d003      	beq.n	14e32 <dmAdvStopDirected+0x26>
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING_DIRECTED))
   14e2a:	4b09      	ldr	r3, [pc, #36]	; (14e50 <dmAdvStopDirected+0x44>)
   14e2c:	7ddb      	ldrb	r3, [r3, #23]
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)    ||
   14e2e:	2b02      	cmp	r3, #2
   14e30:	d10b      	bne.n	14e4a <dmAdvStopDirected+0x3e>
  {
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
   14e32:	4b09      	ldr	r3, [pc, #36]	; (14e58 <dmAdvStopDirected+0x4c>)
   14e34:	781b      	ldrb	r3, [r3, #0]
   14e36:	2b01      	cmp	r3, #1
   14e38:	d101      	bne.n	14e3e <dmAdvStopDirected+0x32>
   14e3a:	2204      	movs	r2, #4
   14e3c:	e000      	b.n	14e40 <dmAdvStopDirected+0x34>
   14e3e:	2205      	movs	r2, #5
   14e40:	4b03      	ldr	r3, [pc, #12]	; (14e50 <dmAdvStopDirected+0x44>)
   14e42:	75da      	strb	r2, [r3, #23]
                                              DM_ADV_STATE_STOPPING_DIRECTED : DM_ADV_STATE_STOPPING;
    HciLeSetAdvEnableCmd(FALSE);
   14e44:	2000      	movs	r0, #0
   14e46:	f009 fb02 	bl	1e44e <HciLeSetAdvEnableCmd>
  }
}
   14e4a:	bf00      	nop
   14e4c:	bd08      	pop	{r3, pc}
   14e4e:	bf00      	nop
   14e50:	10009480 	.word	0x10009480
   14e54:	0002b8cc 	.word	0x0002b8cc
   14e58:	10004470 	.word	0x10004470

00014e5c <dmAdvConnected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnected(void)
{
   14e5c:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvConnected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14e5e:	4b0b      	ldr	r3, [pc, #44]	; (14e8c <dmAdvConnected+0x30>)
   14e60:	7ddb      	ldrb	r3, [r3, #23]
   14e62:	4619      	mov	r1, r3
   14e64:	480a      	ldr	r0, [pc, #40]	; (14e90 <dmAdvConnected+0x34>)
   14e66:	f7f8 fdef 	bl	da48 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   14e6a:	4808      	ldr	r0, [pc, #32]	; (14e8c <dmAdvConnected+0x30>)
   14e6c:	f7f8 fd28 	bl	d8c0 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   14e70:	2300      	movs	r3, #0
   14e72:	2200      	movs	r2, #0
   14e74:	2122      	movs	r1, #34	; 0x22
   14e76:	2015      	movs	r0, #21
   14e78:	f001 faf0 	bl	1645c <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   14e7c:	4b03      	ldr	r3, [pc, #12]	; (14e8c <dmAdvConnected+0x30>)
   14e7e:	22ff      	movs	r2, #255	; 0xff
   14e80:	751a      	strb	r2, [r3, #20]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14e82:	4b02      	ldr	r3, [pc, #8]	; (14e8c <dmAdvConnected+0x30>)
   14e84:	2200      	movs	r2, #0
   14e86:	75da      	strb	r2, [r3, #23]
}
   14e88:	bf00      	nop
   14e8a:	bd08      	pop	{r3, pc}
   14e8c:	10009480 	.word	0x10009480
   14e90:	0002b8ec 	.word	0x0002b8ec

00014e94 <dmAdvConnectFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnectFailed(void)
{
   14e94:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvConnectFailed: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   14e96:	4b0b      	ldr	r3, [pc, #44]	; (14ec4 <dmAdvConnectFailed+0x30>)
   14e98:	7ddb      	ldrb	r3, [r3, #23]
   14e9a:	4619      	mov	r1, r3
   14e9c:	480a      	ldr	r0, [pc, #40]	; (14ec8 <dmAdvConnectFailed+0x34>)
   14e9e:	f7f8 fdd3 	bl	da48 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   14ea2:	4808      	ldr	r0, [pc, #32]	; (14ec4 <dmAdvConnectFailed+0x30>)
   14ea4:	f7f8 fd0c 	bl	d8c0 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   14ea8:	2300      	movs	r3, #0
   14eaa:	2200      	movs	r2, #0
   14eac:	2122      	movs	r1, #34	; 0x22
   14eae:	2015      	movs	r0, #21
   14eb0:	f001 fad4 	bl	1645c <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   14eb4:	4b03      	ldr	r3, [pc, #12]	; (14ec4 <dmAdvConnectFailed+0x30>)
   14eb6:	22ff      	movs	r2, #255	; 0xff
   14eb8:	751a      	strb	r2, [r3, #20]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14eba:	4b02      	ldr	r3, [pc, #8]	; (14ec4 <dmAdvConnectFailed+0x30>)
   14ebc:	2200      	movs	r2, #0
   14ebe:	75da      	strb	r2, [r3, #23]
}
   14ec0:	bf00      	nop
   14ec2:	bd08      	pop	{r3, pc}
   14ec4:	10009480 	.word	0x10009480
   14ec8:	0002b908 	.word	0x0002b908

00014ecc <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
   14ecc:	b508      	push	{r3, lr}
  WsfTaskLock();
   14ece:	f7f8 f9dd 	bl	d28c <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
   14ed2:	4b07      	ldr	r3, [pc, #28]	; (14ef0 <DmAdvInit+0x24>)
   14ed4:	4a07      	ldr	r2, [pc, #28]	; (14ef4 <DmAdvInit+0x28>)
   14ed6:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
   14ed8:	f7ff fbfe 	bl	146d8 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
   14edc:	4b06      	ldr	r3, [pc, #24]	; (14ef8 <DmAdvInit+0x2c>)
   14ede:	2200      	movs	r2, #0
   14ee0:	601a      	str	r2, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
   14ee2:	2000      	movs	r0, #0
   14ee4:	f00c fd94 	bl	21a10 <HciVsInit>

  WsfTaskUnlock();
   14ee8:	f7f8 f9d5 	bl	d296 <WsfTaskUnlock>
}
   14eec:	bf00      	nop
   14eee:	bd08      	pop	{r3, pc}
   14ef0:	10002b78 	.word	0x10002b78
   14ef4:	0002c270 	.word	0x0002c270
   14ef8:	10009564 	.word	0x10009564

00014efc <dmConnCmplStates>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
static dmConnCcb_t *dmConnCmplStates(void)
{
   14efc:	b500      	push	{lr}
   14efe:	b083      	sub	sp, #12
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14f00:	4b18      	ldr	r3, [pc, #96]	; (14f64 <dmConnCmplStates+0x68>)
   14f02:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  /* if there's a ccb in accepting state */
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14f04:	2303      	movs	r3, #3
   14f06:	f88d 3003 	strb.w	r3, [sp, #3]
   14f0a:	e021      	b.n	14f50 <dmConnCmplStates+0x54>
  {
    /* look for connection in accepting state or disconnecting state, cancelled connection */
    if (pCcb->inUse &&
   14f0c:	9b01      	ldr	r3, [sp, #4]
   14f0e:	7d9b      	ldrb	r3, [r3, #22]
   14f10:	2b00      	cmp	r3, #0
   14f12:	d015      	beq.n	14f40 <dmConnCmplStates+0x44>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   14f14:	9b01      	ldr	r3, [sp, #4]
   14f16:	7d5b      	ldrb	r3, [r3, #21]
    if (pCcb->inUse &&
   14f18:	2b02      	cmp	r3, #2
   14f1a:	d009      	beq.n	14f30 <dmConnCmplStates+0x34>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   14f1c:	9b01      	ldr	r3, [sp, #4]
   14f1e:	7d5b      	ldrb	r3, [r3, #21]
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   14f20:	2b04      	cmp	r3, #4
   14f22:	d10d      	bne.n	14f40 <dmConnCmplStates+0x44>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   14f24:	9b01      	ldr	r3, [sp, #4]
   14f26:	899b      	ldrh	r3, [r3, #12]
   14f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14f2c:	4293      	cmp	r3, r2
   14f2e:	d107      	bne.n	14f40 <dmConnCmplStates+0x44>
    {
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	7c1b      	ldrb	r3, [r3, #16]
   14f34:	4619      	mov	r1, r3
   14f36:	480c      	ldr	r0, [pc, #48]	; (14f68 <dmConnCmplStates+0x6c>)
   14f38:	f7f8 fd86 	bl	da48 <WsfTrace>
      return pCcb;
   14f3c:	9b01      	ldr	r3, [sp, #4]
   14f3e:	e00c      	b.n	14f5a <dmConnCmplStates+0x5e>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14f40:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14f44:	3b01      	subs	r3, #1
   14f46:	f88d 3003 	strb.w	r3, [sp, #3]
   14f4a:	9b01      	ldr	r3, [sp, #4]
   14f4c:	3330      	adds	r3, #48	; 0x30
   14f4e:	9301      	str	r3, [sp, #4]
   14f50:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14f54:	2b00      	cmp	r3, #0
   14f56:	d1d9      	bne.n	14f0c <dmConnCmplStates+0x10>
    }
  }

  return NULL;
   14f58:	2300      	movs	r3, #0
}
   14f5a:	4618      	mov	r0, r3
   14f5c:	b003      	add	sp, #12
   14f5e:	f85d fb04 	ldr.w	pc, [sp], #4
   14f62:	bf00      	nop
   14f64:	100094a4 	.word	0x100094a4
   14f68:	0002b928 	.word	0x0002b928

00014f6c <dmConnCcbAlloc>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbAlloc(uint8_t *pAddr)
{
   14f6c:	b500      	push	{lr}
   14f6e:	b085      	sub	sp, #20
   14f70:	9001      	str	r0, [sp, #4]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14f72:	4b22      	ldr	r3, [pc, #136]	; (14ffc <dmConnCcbAlloc+0x90>)
   14f74:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   14f76:	2300      	movs	r3, #0
   14f78:	f88d 300b 	strb.w	r3, [sp, #11]
   14f7c:	e031      	b.n	14fe2 <dmConnCcbAlloc+0x76>
  {
    if (pCcb->inUse == FALSE)
   14f7e:	9b03      	ldr	r3, [sp, #12]
   14f80:	7d9b      	ldrb	r3, [r3, #22]
   14f82:	2b00      	cmp	r3, #0
   14f84:	d125      	bne.n	14fd2 <dmConnCcbAlloc+0x66>
    {
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   14f86:	2230      	movs	r2, #48	; 0x30
   14f88:	2100      	movs	r1, #0
   14f8a:	9803      	ldr	r0, [sp, #12]
   14f8c:	f013 fa56 	bl	2843c <memset>

      BdaCpy(pCcb->peerAddr, pAddr);
   14f90:	9b03      	ldr	r3, [sp, #12]
   14f92:	9901      	ldr	r1, [sp, #4]
   14f94:	4618      	mov	r0, r3
   14f96:	f7ff fa87 	bl	144a8 <BdaCpy>
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   14f9a:	9b03      	ldr	r3, [sp, #12]
   14f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14fa0:	819a      	strh	r2, [r3, #12]
      pCcb->connId = i + 1;
   14fa2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14fa6:	3301      	adds	r3, #1
   14fa8:	b2da      	uxtb	r2, r3
   14faa:	9b03      	ldr	r3, [sp, #12]
   14fac:	741a      	strb	r2, [r3, #16]
      pCcb->updating = FALSE;
   14fae:	9b03      	ldr	r3, [sp, #12]
   14fb0:	2200      	movs	r2, #0
   14fb2:	745a      	strb	r2, [r3, #17]
      pCcb->inUse = TRUE;
   14fb4:	9b03      	ldr	r3, [sp, #12]
   14fb6:	2201      	movs	r2, #1
   14fb8:	759a      	strb	r2, [r3, #22]
      pCcb->featuresPresent = FALSE;
   14fba:	9b03      	ldr	r3, [sp, #12]
   14fbc:	2200      	movs	r2, #0
   14fbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   14fc2:	9b03      	ldr	r3, [sp, #12]
   14fc4:	7c1b      	ldrb	r3, [r3, #16]
   14fc6:	4619      	mov	r1, r3
   14fc8:	480d      	ldr	r0, [pc, #52]	; (15000 <dmConnCcbAlloc+0x94>)
   14fca:	f7f8 fd3d 	bl	da48 <WsfTrace>

      return pCcb;
   14fce:	9b03      	ldr	r3, [sp, #12]
   14fd0:	e00f      	b.n	14ff2 <dmConnCcbAlloc+0x86>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   14fd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14fd6:	3301      	adds	r3, #1
   14fd8:	f88d 300b 	strb.w	r3, [sp, #11]
   14fdc:	9b03      	ldr	r3, [sp, #12]
   14fde:	3330      	adds	r3, #48	; 0x30
   14fe0:	9303      	str	r3, [sp, #12]
   14fe2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14fe6:	2b02      	cmp	r3, #2
   14fe8:	d9c9      	bls.n	14f7e <dmConnCcbAlloc+0x12>
    }
  }

  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   14fea:	4806      	ldr	r0, [pc, #24]	; (15004 <dmConnCcbAlloc+0x98>)
   14fec:	f7f8 fd2c 	bl	da48 <WsfTrace>

  return NULL;
   14ff0:	2300      	movs	r3, #0
}
   14ff2:	4618      	mov	r0, r3
   14ff4:	b005      	add	sp, #20
   14ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   14ffa:	bf00      	nop
   14ffc:	100094a4 	.word	0x100094a4
   15000:	0002b93c 	.word	0x0002b93c
   15004:	0002b950 	.word	0x0002b950

00015008 <dmConnCcbDealloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnCcbDealloc(dmConnCcb_t *pCcb)
{
   15008:	b500      	push	{lr}
   1500a:	b083      	sub	sp, #12
   1500c:	9001      	str	r0, [sp, #4]
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   1500e:	9b01      	ldr	r3, [sp, #4]
   15010:	7c1b      	ldrb	r3, [r3, #16]
   15012:	4619      	mov	r1, r3
   15014:	4804      	ldr	r0, [pc, #16]	; (15028 <dmConnCcbDealloc+0x20>)
   15016:	f7f8 fd17 	bl	da48 <WsfTrace>

  pCcb->inUse = FALSE;
   1501a:	9b01      	ldr	r3, [sp, #4]
   1501c:	2200      	movs	r2, #0
   1501e:	759a      	strb	r2, [r3, #22]
}
   15020:	bf00      	nop
   15022:	b003      	add	sp, #12
   15024:	f85d fb04 	ldr.w	pc, [sp], #4
   15028:	0002b968 	.word	0x0002b968

0001502c <dmConnCcbByHandle>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbByHandle(uint16_t handle)
{
   1502c:	b500      	push	{lr}
   1502e:	b085      	sub	sp, #20
   15030:	4603      	mov	r3, r0
   15032:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   15036:	4b14      	ldr	r3, [pc, #80]	; (15088 <dmConnCcbByHandle+0x5c>)
   15038:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1503a:	2303      	movs	r3, #3
   1503c:	f88d 300b 	strb.w	r3, [sp, #11]
   15040:	e013      	b.n	1506a <dmConnCcbByHandle+0x3e>
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   15042:	9b03      	ldr	r3, [sp, #12]
   15044:	7d9b      	ldrb	r3, [r3, #22]
   15046:	2b00      	cmp	r3, #0
   15048:	d007      	beq.n	1505a <dmConnCcbByHandle+0x2e>
   1504a:	9b03      	ldr	r3, [sp, #12]
   1504c:	899b      	ldrh	r3, [r3, #12]
   1504e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15052:	429a      	cmp	r2, r3
   15054:	d101      	bne.n	1505a <dmConnCcbByHandle+0x2e>
    {
      return pCcb;
   15056:	9b03      	ldr	r3, [sp, #12]
   15058:	e012      	b.n	15080 <dmConnCcbByHandle+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1505a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1505e:	3b01      	subs	r3, #1
   15060:	f88d 300b 	strb.w	r3, [sp, #11]
   15064:	9b03      	ldr	r3, [sp, #12]
   15066:	3330      	adds	r3, #48	; 0x30
   15068:	9303      	str	r3, [sp, #12]
   1506a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1506e:	2b00      	cmp	r3, #0
   15070:	d1e7      	bne.n	15042 <dmConnCcbByHandle+0x16>
    }
  }

  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   15072:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15076:	4619      	mov	r1, r3
   15078:	4804      	ldr	r0, [pc, #16]	; (1508c <dmConnCcbByHandle+0x60>)
   1507a:	f7f8 fce5 	bl	da48 <WsfTrace>

  return NULL;
   1507e:	2300      	movs	r3, #0
}
   15080:	4618      	mov	r0, r3
   15082:	b005      	add	sp, #20
   15084:	f85d fb04 	ldr.w	pc, [sp], #4
   15088:	100094a4 	.word	0x100094a4
   1508c:	0002b97c 	.word	0x0002b97c

00015090 <dmConnCcbByBdAddr>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbByBdAddr(uint8_t *pAddr)
{
   15090:	b500      	push	{lr}
   15092:	b085      	sub	sp, #20
   15094:	9001      	str	r0, [sp, #4]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   15096:	4b14      	ldr	r3, [pc, #80]	; (150e8 <dmConnCcbByBdAddr+0x58>)
   15098:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1509a:	2303      	movs	r3, #3
   1509c:	f88d 300b 	strb.w	r3, [sp, #11]
   150a0:	e015      	b.n	150ce <dmConnCcbByBdAddr+0x3e>
  {
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   150a2:	9b03      	ldr	r3, [sp, #12]
   150a4:	7d9b      	ldrb	r3, [r3, #22]
   150a6:	2b00      	cmp	r3, #0
   150a8:	d009      	beq.n	150be <dmConnCcbByBdAddr+0x2e>
   150aa:	9b03      	ldr	r3, [sp, #12]
   150ac:	9901      	ldr	r1, [sp, #4]
   150ae:	4618      	mov	r0, r3
   150b0:	f7ff fa07 	bl	144c2 <BdaCmp>
   150b4:	4603      	mov	r3, r0
   150b6:	2b00      	cmp	r3, #0
   150b8:	d001      	beq.n	150be <dmConnCcbByBdAddr+0x2e>
    {
      return pCcb;
   150ba:	9b03      	ldr	r3, [sp, #12]
   150bc:	e00f      	b.n	150de <dmConnCcbByBdAddr+0x4e>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   150be:	f89d 300b 	ldrb.w	r3, [sp, #11]
   150c2:	3b01      	subs	r3, #1
   150c4:	f88d 300b 	strb.w	r3, [sp, #11]
   150c8:	9b03      	ldr	r3, [sp, #12]
   150ca:	3330      	adds	r3, #48	; 0x30
   150cc:	9303      	str	r3, [sp, #12]
   150ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
   150d2:	2b00      	cmp	r3, #0
   150d4:	d1e5      	bne.n	150a2 <dmConnCcbByBdAddr+0x12>
    }
  }

  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   150d6:	4805      	ldr	r0, [pc, #20]	; (150ec <dmConnCcbByBdAddr+0x5c>)
   150d8:	f7f8 fcb6 	bl	da48 <WsfTrace>

  return NULL;
   150dc:	2300      	movs	r3, #0
}
   150de:	4618      	mov	r0, r3
   150e0:	b005      	add	sp, #20
   150e2:	f85d fb04 	ldr.w	pc, [sp], #4
   150e6:	bf00      	nop
   150e8:	100094a4 	.word	0x100094a4
   150ec:	0002b9a0 	.word	0x0002b9a0

000150f0 <dmConnCcbById>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbById(dmConnId_t connId)
{
   150f0:	b082      	sub	sp, #8
   150f2:	4603      	mov	r3, r0
   150f4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  connId--;
   150f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   150fc:	3b01      	subs	r3, #1
   150fe:	f88d 3007 	strb.w	r3, [sp, #7]
  if (dmConnCb.ccb[connId].inUse)
   15102:	f89d 2007 	ldrb.w	r2, [sp, #7]
   15106:	490b      	ldr	r1, [pc, #44]	; (15134 <dmConnCcbById+0x44>)
   15108:	4613      	mov	r3, r2
   1510a:	005b      	lsls	r3, r3, #1
   1510c:	4413      	add	r3, r2
   1510e:	011b      	lsls	r3, r3, #4
   15110:	440b      	add	r3, r1
   15112:	3316      	adds	r3, #22
   15114:	781b      	ldrb	r3, [r3, #0]
   15116:	2b00      	cmp	r3, #0
   15118:	d008      	beq.n	1512c <dmConnCcbById+0x3c>
  {
    return &dmConnCb.ccb[connId];
   1511a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1511e:	4613      	mov	r3, r2
   15120:	005b      	lsls	r3, r3, #1
   15122:	4413      	add	r3, r2
   15124:	011b      	lsls	r3, r3, #4
   15126:	4a03      	ldr	r2, [pc, #12]	; (15134 <dmConnCcbById+0x44>)
   15128:	4413      	add	r3, r2
   1512a:	e000      	b.n	1512e <dmConnCcbById+0x3e>
  }

  return NULL;
   1512c:	2300      	movs	r3, #0
}
   1512e:	4618      	mov	r0, r3
   15130:	b002      	add	sp, #8
   15132:	4770      	bx	lr
   15134:	100094a4 	.word	0x100094a4

00015138 <dmConnNum>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t dmConnNum(void)
{
   15138:	b082      	sub	sp, #8
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1513a:	4b11      	ldr	r3, [pc, #68]	; (15180 <dmConnNum+0x48>)
   1513c:	9301      	str	r3, [sp, #4]
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1513e:	2303      	movs	r3, #3
   15140:	f88d 3003 	strb.w	r3, [sp, #3]
   15144:	2300      	movs	r3, #0
   15146:	f88d 3002 	strb.w	r3, [sp, #2]
   1514a:	e010      	b.n	1516e <dmConnNum+0x36>
  {
    if (pCcb->inUse)
   1514c:	9b01      	ldr	r3, [sp, #4]
   1514e:	7d9b      	ldrb	r3, [r3, #22]
   15150:	2b00      	cmp	r3, #0
   15152:	d004      	beq.n	1515e <dmConnNum+0x26>
    {
      j++;
   15154:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15158:	3301      	adds	r3, #1
   1515a:	f88d 3002 	strb.w	r3, [sp, #2]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1515e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15162:	3b01      	subs	r3, #1
   15164:	f88d 3003 	strb.w	r3, [sp, #3]
   15168:	9b01      	ldr	r3, [sp, #4]
   1516a:	3330      	adds	r3, #48	; 0x30
   1516c:	9301      	str	r3, [sp, #4]
   1516e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15172:	2b00      	cmp	r3, #0
   15174:	d1ea      	bne.n	1514c <dmConnNum+0x14>
    }
  }

  return j;
   15176:	f89d 3002 	ldrb.w	r3, [sp, #2]
}
   1517a:	4618      	mov	r0, r3
   1517c:	b002      	add	sp, #8
   1517e:	4770      	bx	lr
   15180:	100094a4 	.word	0x100094a4

00015184 <dmConnExecCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnExecCback(dmConnMsg_t *pMsg)
{
   15184:	b500      	push	{lr}
   15186:	b085      	sub	sp, #20
   15188:	9001      	str	r0, [sp, #4]
  uint8_t i;

  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1518a:	2300      	movs	r3, #0
   1518c:	f88d 300f 	strb.w	r3, [sp, #15]
   15190:	e014      	b.n	151bc <dmConnExecCback+0x38>
  {
    if (dmConnCb.connCback[i] != NULL)
   15192:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15196:	4a0e      	ldr	r2, [pc, #56]	; (151d0 <dmConnExecCback+0x4c>)
   15198:	3324      	adds	r3, #36	; 0x24
   1519a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1519e:	2b00      	cmp	r3, #0
   151a0:	d007      	beq.n	151b2 <dmConnExecCback+0x2e>
    {
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   151a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   151a6:	4a0a      	ldr	r2, [pc, #40]	; (151d0 <dmConnExecCback+0x4c>)
   151a8:	3324      	adds	r3, #36	; 0x24
   151aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ae:	9801      	ldr	r0, [sp, #4]
   151b0:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   151b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   151b6:	3301      	adds	r3, #1
   151b8:	f88d 300f 	strb.w	r3, [sp, #15]
   151bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   151c0:	2b04      	cmp	r3, #4
   151c2:	d9e6      	bls.n	15192 <dmConnExecCback+0xe>
    }
  }
}
   151c4:	bf00      	nop
   151c6:	bf00      	nop
   151c8:	b005      	add	sp, #20
   151ca:	f85d fb04 	ldr.w	pc, [sp], #4
   151ce:	bf00      	nop
   151d0:	100094a4 	.word	0x100094a4

000151d4 <dmConnOpenAccept>:
 */
/*************************************************************************************************/
dmConnId_t dmConnOpenAccept(uint8_t clientId, uint8_t initPhys, uint8_t advHandle, uint8_t advType,
                            uint16_t duration, uint8_t maxEaEvents, uint8_t addrType, uint8_t *pAddr,
                            uint8_t role)
{
   151d4:	b510      	push	{r4, lr}
   151d6:	b084      	sub	sp, #16
   151d8:	4604      	mov	r4, r0
   151da:	4608      	mov	r0, r1
   151dc:	4611      	mov	r1, r2
   151de:	461a      	mov	r2, r3
   151e0:	4623      	mov	r3, r4
   151e2:	f88d 3007 	strb.w	r3, [sp, #7]
   151e6:	4603      	mov	r3, r0
   151e8:	f88d 3006 	strb.w	r3, [sp, #6]
   151ec:	460b      	mov	r3, r1
   151ee:	f88d 3005 	strb.w	r3, [sp, #5]
   151f2:	4613      	mov	r3, r2
   151f4:	f88d 3004 	strb.w	r3, [sp, #4]
  dmConnCcb_t           *pCcb = NULL;
   151f8:	2300      	movs	r3, #0
   151fa:	9303      	str	r3, [sp, #12]
  dmConnApiOpen_t       *pMsg;

  /* make sure ccb not already allocated */
  WsfTaskLock();
   151fc:	f7f8 f846 	bl	d28c <WsfTaskLock>
  if ((pCcb = dmConnCcbByBdAddr(pAddr)) == NULL)
   15200:	9809      	ldr	r0, [sp, #36]	; 0x24
   15202:	f7ff ff45 	bl	15090 <dmConnCcbByBdAddr>
   15206:	9003      	str	r0, [sp, #12]
   15208:	9b03      	ldr	r3, [sp, #12]
   1520a:	2b00      	cmp	r3, #0
   1520c:	d103      	bne.n	15216 <dmConnOpenAccept+0x42>
  {
    /* allocate ccb */
    pCcb = dmConnCcbAlloc(pAddr);
   1520e:	9809      	ldr	r0, [sp, #36]	; 0x24
   15210:	f7ff feac 	bl	14f6c <dmConnCcbAlloc>
   15214:	9003      	str	r0, [sp, #12]
  }
  WsfTaskUnlock();
   15216:	f7f8 f83e 	bl	d296 <WsfTaskUnlock>

  if (pCcb != NULL)
   1521a:	9b03      	ldr	r3, [sp, #12]
   1521c:	2b00      	cmp	r3, #0
   1521e:	d04e      	beq.n	152be <dmConnOpenAccept+0xea>
  {
    if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiOpen_t))) != NULL)
   15220:	2014      	movs	r0, #20
   15222:	f7f7 ffa7 	bl	d174 <WsfMsgAlloc>
   15226:	9002      	str	r0, [sp, #8]
   15228:	9b02      	ldr	r3, [sp, #8]
   1522a:	2b00      	cmp	r3, #0
   1522c:	d040      	beq.n	152b0 <dmConnOpenAccept+0xdc>
    {
      pMsg->hdr.param = pCcb->connId;
   1522e:	9b03      	ldr	r3, [sp, #12]
   15230:	7c1b      	ldrb	r3, [r3, #16]
   15232:	b29a      	uxth	r2, r3
   15234:	9b02      	ldr	r3, [sp, #8]
   15236:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
   15238:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1523c:	2b00      	cmp	r3, #0
   1523e:	d101      	bne.n	15244 <dmConnOpenAccept+0x70>
   15240:	2230      	movs	r2, #48	; 0x30
   15242:	e000      	b.n	15246 <dmConnOpenAccept+0x72>
   15244:	2232      	movs	r2, #50	; 0x32
   15246:	9b02      	ldr	r3, [sp, #8]
   15248:	709a      	strb	r2, [r3, #2]
                        DM_CONN_MSG_API_OPEN : DM_CONN_MSG_API_ACCEPT;
      pMsg->initPhys = initPhys;
   1524a:	9b02      	ldr	r3, [sp, #8]
   1524c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   15250:	711a      	strb	r2, [r3, #4]
      pMsg->advHandle = advHandle;
   15252:	9b02      	ldr	r3, [sp, #8]
   15254:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15258:	715a      	strb	r2, [r3, #5]
      pMsg->advType = advType;
   1525a:	9b02      	ldr	r3, [sp, #8]
   1525c:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15260:	719a      	strb	r2, [r3, #6]
      pMsg->duration = duration;
   15262:	9b02      	ldr	r3, [sp, #8]
   15264:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   15268:	811a      	strh	r2, [r3, #8]
      pMsg->maxEaEvents = maxEaEvents;
   1526a:	9b02      	ldr	r3, [sp, #8]
   1526c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15270:	729a      	strb	r2, [r3, #10]
      BdaCpy(pMsg->peerAddr, pAddr);
   15272:	9b02      	ldr	r3, [sp, #8]
   15274:	330b      	adds	r3, #11
   15276:	9909      	ldr	r1, [sp, #36]	; 0x24
   15278:	4618      	mov	r0, r3
   1527a:	f7ff f915 	bl	144a8 <BdaCpy>
      pMsg->addrType = addrType;
   1527e:	9b02      	ldr	r3, [sp, #8]
   15280:	f89d 2020 	ldrb.w	r2, [sp, #32]
   15284:	745a      	strb	r2, [r3, #17]
      pMsg->clientId = clientId;
   15286:	9b02      	ldr	r3, [sp, #8]
   15288:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1528c:	749a      	strb	r2, [r3, #18]
      WsfMsgSend(dmCb.handlerId, pMsg);
   1528e:	4b0e      	ldr	r3, [pc, #56]	; (152c8 <dmConnOpenAccept+0xf4>)
   15290:	7b1b      	ldrb	r3, [r3, #12]
   15292:	9902      	ldr	r1, [sp, #8]
   15294:	4618      	mov	r0, r3
   15296:	f7f7 ff91 	bl	d1bc <WsfMsgSend>

      /* set role */
      WsfTaskLock();
   1529a:	f7f7 fff7 	bl	d28c <WsfTaskLock>
      pCcb->role = role;
   1529e:	9b03      	ldr	r3, [sp, #12]
   152a0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   152a4:	765a      	strb	r2, [r3, #25]
      WsfTaskUnlock();
   152a6:	f7f7 fff6 	bl	d296 <WsfTaskUnlock>

      /* return connection id */
      return pCcb->connId;
   152aa:	9b03      	ldr	r3, [sp, #12]
   152ac:	7c1b      	ldrb	r3, [r3, #16]
   152ae:	e007      	b.n	152c0 <dmConnOpenAccept+0xec>
    }
    else
    {
      WsfTaskLock();
   152b0:	f7f7 ffec 	bl	d28c <WsfTaskLock>
      dmConnCcbDealloc(pCcb);
   152b4:	9803      	ldr	r0, [sp, #12]
   152b6:	f7ff fea7 	bl	15008 <dmConnCcbDealloc>
      WsfTaskUnlock();
   152ba:	f7f7 ffec 	bl	d296 <WsfTaskUnlock>
    }
  }

  /* open failed */
  return DM_CONN_ID_NONE;
   152be:	2300      	movs	r3, #0
}
   152c0:	4618      	mov	r0, r3
   152c2:	b004      	add	sp, #16
   152c4:	bd10      	pop	{r4, pc}
   152c6:	bf00      	nop
   152c8:	10009568 	.word	0x10009568

000152cc <dmConnSmActNone>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   152cc:	b082      	sub	sp, #8
   152ce:	9001      	str	r0, [sp, #4]
   152d0:	9100      	str	r1, [sp, #0]
  return;
   152d2:	bf00      	nop
}
   152d4:	b002      	add	sp, #8
   152d6:	4770      	bx	lr

000152d8 <dmConnSmActClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActClose(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   152d8:	b500      	push	{lr}
   152da:	b083      	sub	sp, #12
   152dc:	9001      	str	r0, [sp, #4]
   152de:	9100      	str	r1, [sp, #0]
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
   152e0:	9b01      	ldr	r3, [sp, #4]
   152e2:	899a      	ldrh	r2, [r3, #12]
   152e4:	9b00      	ldr	r3, [sp, #0]
   152e6:	791b      	ldrb	r3, [r3, #4]
   152e8:	4619      	mov	r1, r3
   152ea:	4610      	mov	r0, r2
   152ec:	f008 fd5e 	bl	1ddac <HciDisconnectCmd>
}
   152f0:	bf00      	nop
   152f2:	b003      	add	sp, #12
   152f4:	f85d fb04 	ldr.w	pc, [sp], #4

000152f8 <dmConnSmActConnOpened>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnOpened(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   152f8:	b510      	push	{r4, lr}
   152fa:	b082      	sub	sp, #8
   152fc:	9001      	str	r0, [sp, #4]
   152fe:	9100      	str	r1, [sp, #0]
  /* store peer address, handle, and role */
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
   15300:	9a01      	ldr	r2, [sp, #4]
   15302:	9b00      	ldr	r3, [sp, #0]
   15304:	330a      	adds	r3, #10
   15306:	4619      	mov	r1, r3
   15308:	4610      	mov	r0, r2
   1530a:	f7ff f8cd 	bl	144a8 <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   1530e:	9b00      	ldr	r3, [sp, #0]
   15310:	88da      	ldrh	r2, [r3, #6]
   15312:	9b01      	ldr	r3, [sp, #4]
   15314:	819a      	strh	r2, [r3, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   15316:	9b00      	ldr	r3, [sp, #0]
   15318:	7a5b      	ldrb	r3, [r3, #9]
   1531a:	4618      	mov	r0, r3
   1531c:	f001 fa98 	bl	16850 <DmHostAddrType>
   15320:	4603      	mov	r3, r0
   15322:	461a      	mov	r2, r3
   15324:	9b01      	ldr	r3, [sp, #4]
   15326:	74da      	strb	r2, [r3, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
   15328:	9b00      	ldr	r3, [sp, #0]
   1532a:	7a1a      	ldrb	r2, [r3, #8]
   1532c:	9b01      	ldr	r3, [sp, #4]
   1532e:	765a      	strb	r2, [r3, #25]

  /* set local address type of connection */
  if (pCcb->role == DM_ROLE_MASTER)
   15330:	9b01      	ldr	r3, [sp, #4]
   15332:	7e5b      	ldrb	r3, [r3, #25]
   15334:	2b00      	cmp	r3, #0
   15336:	d104      	bne.n	15342 <dmConnSmActConnOpened+0x4a>
  {
    pCcb->localAddrType = dmCb.connAddrType;
   15338:	4b2a      	ldr	r3, [pc, #168]	; (153e4 <dmConnSmActConnOpened+0xec>)
   1533a:	7b5a      	ldrb	r2, [r3, #13]
   1533c:	9b01      	ldr	r3, [sp, #4]
   1533e:	751a      	strb	r2, [r3, #20]
   15340:	e003      	b.n	1534a <dmConnSmActConnOpened+0x52>
  }
  else
  {
    pCcb->localAddrType = dmCb.advAddrType;
   15342:	4b28      	ldr	r3, [pc, #160]	; (153e4 <dmConnSmActConnOpened+0xec>)
   15344:	7b9a      	ldrb	r2, [r3, #14]
   15346:	9b01      	ldr	r3, [sp, #4]
   15348:	751a      	strb	r2, [r3, #20]
  }

  /* set local address of connection */
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
   1534a:	9b01      	ldr	r3, [sp, #4]
   1534c:	7d1b      	ldrb	r3, [r3, #20]
   1534e:	2b00      	cmp	r3, #0
   15350:	d109      	bne.n	15366 <dmConnSmActConnOpened+0x6e>
  {
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
   15352:	9b01      	ldr	r3, [sp, #4]
   15354:	1d9c      	adds	r4, r3, #6
   15356:	f00a f901 	bl	1f55c <HciGetBdAddr>
   1535a:	4603      	mov	r3, r0
   1535c:	4619      	mov	r1, r3
   1535e:	4620      	mov	r0, r4
   15360:	f7ff f8a2 	bl	144a8 <BdaCpy>
   15364:	e005      	b.n	15372 <dmConnSmActConnOpened+0x7a>
  }
  else
  {
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
   15366:	9b01      	ldr	r3, [sp, #4]
   15368:	3306      	adds	r3, #6
   1536a:	491e      	ldr	r1, [pc, #120]	; (153e4 <dmConnSmActConnOpened+0xec>)
   1536c:	4618      	mov	r0, r3
   1536e:	f7ff f89b 	bl	144a8 <BdaCpy>
  }

  /* store enhanced fields */
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
   15372:	9b01      	ldr	r3, [sp, #4]
   15374:	f103 021a 	add.w	r2, r3, #26
   15378:	9b00      	ldr	r3, [sp, #0]
   1537a:	3317      	adds	r3, #23
   1537c:	4619      	mov	r1, r3
   1537e:	4610      	mov	r0, r2
   15380:	f7ff f892 	bl	144a8 <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
   15384:	9b01      	ldr	r3, [sp, #4]
   15386:	f103 0220 	add.w	r2, r3, #32
   1538a:	9b00      	ldr	r3, [sp, #0]
   1538c:	331d      	adds	r3, #29
   1538e:	4619      	mov	r1, r3
   15390:	4610      	mov	r0, r2
   15392:	f7ff f889 	bl	144a8 <BdaCpy>

  /* initialize idle state */
  pCcb->idleMask = 0;
   15396:	9b01      	ldr	r3, [sp, #4]
   15398:	2200      	movs	r2, #0
   1539a:	81da      	strh	r2, [r3, #14]

  /* if central */
  if (pCcb->role == DM_ROLE_MASTER)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	7e5b      	ldrb	r3, [r3, #25]
   153a0:	2b00      	cmp	r3, #0
   153a2:	d110      	bne.n	153c6 <dmConnSmActConnOpened+0xce>
  {
    /* pass connection initiation completed to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
   153a4:	2300      	movs	r3, #0
   153a6:	2200      	movs	r2, #0
   153a8:	2101      	movs	r1, #1
   153aa:	2016      	movs	r0, #22
   153ac:	f001 f856 	bl	1645c <dmDevPassEvtToDevPriv>

    /* if first connection opened */
    if (dmConnNum() == 1)
   153b0:	f7ff fec2 	bl	15138 <dmConnNum>
   153b4:	4603      	mov	r3, r0
   153b6:	2b01      	cmp	r3, #1
   153b8:	d105      	bne.n	153c6 <dmConnSmActConnOpened+0xce>
    {
      /* pass conn open event to dev priv */
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
   153ba:	2300      	movs	r3, #0
   153bc:	2200      	movs	r2, #0
   153be:	2127      	movs	r1, #39	; 0x27
   153c0:	2014      	movs	r0, #20
   153c2:	f001 f84b 	bl	1645c <dmDevPassEvtToDevPriv>
    }
  }

  /* pass conn open event to Connection CTE */
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
   153c6:	9b01      	ldr	r3, [sp, #4]
   153c8:	7c1b      	ldrb	r3, [r3, #16]
   153ca:	4619      	mov	r1, r3
   153cc:	2027      	movs	r0, #39	; 0x27
   153ce:	f001 f87f 	bl	164d0 <dmDevPassEvtToConnCte>

  pMsg->hdr.event = DM_CONN_OPEN_IND;
   153d2:	9b00      	ldr	r3, [sp, #0]
   153d4:	2227      	movs	r2, #39	; 0x27
   153d6:	709a      	strb	r2, [r3, #2]
  dmConnExecCback(pMsg);
   153d8:	9800      	ldr	r0, [sp, #0]
   153da:	f7ff fed3 	bl	15184 <dmConnExecCback>
}
   153de:	bf00      	nop
   153e0:	b002      	add	sp, #8
   153e2:	bd10      	pop	{r4, pc}
   153e4:	10009568 	.word	0x10009568

000153e8 <dmConnSmActConnFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   153e8:	b500      	push	{lr}
   153ea:	b083      	sub	sp, #12
   153ec:	9001      	str	r0, [sp, #4]
   153ee:	9100      	str	r1, [sp, #0]
  /* deallocate ccb */
  dmConnCcbDealloc(pCcb);
   153f0:	9801      	ldr	r0, [sp, #4]
   153f2:	f7ff fe09 	bl	15008 <dmConnCcbDealloc>

  /* if central */
  if (pCcb->role == DM_ROLE_MASTER)
   153f6:	9b01      	ldr	r3, [sp, #4]
   153f8:	7e5b      	ldrb	r3, [r3, #25]
   153fa:	2b00      	cmp	r3, #0
   153fc:	d110      	bne.n	15420 <dmConnSmActConnFailed+0x38>
  {
    /* pass connection initiation completed to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   153fe:	2300      	movs	r3, #0
   15400:	2200      	movs	r2, #0
   15402:	2101      	movs	r1, #1
   15404:	2016      	movs	r0, #22
   15406:	f001 f829 	bl	1645c <dmDevPassEvtToDevPriv>

    /* if last connection closed */
    if (dmConnNum() == 0)
   1540a:	f7ff fe95 	bl	15138 <dmConnNum>
   1540e:	4603      	mov	r3, r0
   15410:	2b00      	cmp	r3, #0
   15412:	d105      	bne.n	15420 <dmConnSmActConnFailed+0x38>
    {
      /* pass conn close event to dev priv */
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
   15414:	2300      	movs	r3, #0
   15416:	2200      	movs	r2, #0
   15418:	2128      	movs	r1, #40	; 0x28
   1541a:	2015      	movs	r0, #21
   1541c:	f001 f81e 	bl	1645c <dmDevPassEvtToDevPriv>
    }
  }

  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   15420:	9b00      	ldr	r3, [sp, #0]
   15422:	2228      	movs	r2, #40	; 0x28
   15424:	709a      	strb	r2, [r3, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   15426:	9b00      	ldr	r3, [sp, #0]
   15428:	2200      	movs	r2, #0
   1542a:	721a      	strb	r2, [r3, #8]
   1542c:	9b00      	ldr	r3, [sp, #0]
   1542e:	2200      	movs	r2, #0
   15430:	80da      	strh	r2, [r3, #6]
  dmConnExecCback(pMsg);
   15432:	9800      	ldr	r0, [sp, #0]
   15434:	f7ff fea6 	bl	15184 <dmConnExecCback>
}
   15438:	bf00      	nop
   1543a:	b003      	add	sp, #12
   1543c:	f85d fb04 	ldr.w	pc, [sp], #4

00015440 <dmConnSmActConnClosed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnClosed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15440:	b500      	push	{lr}
   15442:	b083      	sub	sp, #12
   15444:	9001      	str	r0, [sp, #4]
   15446:	9100      	str	r1, [sp, #0]
  /* pass conn close event to Connection CTE */
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
   15448:	9b01      	ldr	r3, [sp, #4]
   1544a:	7c1b      	ldrb	r3, [r3, #16]
   1544c:	4619      	mov	r1, r3
   1544e:	2028      	movs	r0, #40	; 0x28
   15450:	f001 f83e 	bl	164d0 <dmDevPassEvtToConnCte>

  /* deallocate ccb */
  dmConnCcbDealloc(pCcb);
   15454:	9801      	ldr	r0, [sp, #4]
   15456:	f7ff fdd7 	bl	15008 <dmConnCcbDealloc>

  /* if central and last connection closed */
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   1545a:	9b01      	ldr	r3, [sp, #4]
   1545c:	7e5b      	ldrb	r3, [r3, #25]
   1545e:	2b00      	cmp	r3, #0
   15460:	d10a      	bne.n	15478 <dmConnSmActConnClosed+0x38>
   15462:	f7ff fe69 	bl	15138 <dmConnNum>
   15466:	4603      	mov	r3, r0
   15468:	2b00      	cmp	r3, #0
   1546a:	d105      	bne.n	15478 <dmConnSmActConnClosed+0x38>
  {
    /* pass conn close event to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
   1546c:	2300      	movs	r3, #0
   1546e:	2200      	movs	r2, #0
   15470:	2128      	movs	r1, #40	; 0x28
   15472:	2015      	movs	r0, #21
   15474:	f000 fff2 	bl	1645c <dmDevPassEvtToDevPriv>
  }

  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   15478:	9b00      	ldr	r3, [sp, #0]
   1547a:	2228      	movs	r2, #40	; 0x28
   1547c:	709a      	strb	r2, [r3, #2]
  dmConnExecCback(pMsg);
   1547e:	9800      	ldr	r0, [sp, #0]
   15480:	f7ff fe80 	bl	15184 <dmConnExecCback>
}
   15484:	bf00      	nop
   15486:	b003      	add	sp, #12
   15488:	f85d fb04 	ldr.w	pc, [sp], #4

0001548c <dmConnSmActHciUpdated>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1548c:	b500      	push	{lr}
   1548e:	b083      	sub	sp, #12
   15490:	9001      	str	r0, [sp, #4]
   15492:	9100      	str	r1, [sp, #0]
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   15494:	9b00      	ldr	r3, [sp, #0]
   15496:	2229      	movs	r2, #41	; 0x29
   15498:	709a      	strb	r2, [r3, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   1549a:	4b04      	ldr	r3, [pc, #16]	; (154ac <dmConnSmActHciUpdated+0x20>)
   1549c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   154a0:	9800      	ldr	r0, [sp, #0]
   154a2:	4798      	blx	r3
}
   154a4:	bf00      	nop
   154a6:	b003      	add	sp, #12
   154a8:	f85d fb04 	ldr.w	pc, [sp], #4
   154ac:	100094a4 	.word	0x100094a4

000154b0 <dmConnReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnReset(void)
{
   154b0:	b500      	push	{lr}
   154b2:	b085      	sub	sp, #20
  dmConnCcb_t             *pCcb = dmConnCb.ccb;
   154b4:	4b31      	ldr	r3, [pc, #196]	; (1557c <dmConnReset+0xcc>)
   154b6:	9303      	str	r3, [sp, #12]
  hciDisconnectCmplEvt_t  disconnectCmpl;
  uint8_t                 i;

  /* generate HCI disconnect complete event */
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   154b8:	2303      	movs	r3, #3
   154ba:	f88d 3002 	strb.w	r3, [sp, #2]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   154be:	2300      	movs	r3, #0
   154c0:	f88d 3004 	strb.w	r3, [sp, #4]
   154c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   154c8:	f88d 3003 	strb.w	r3, [sp, #3]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   154cc:	2316      	movs	r3, #22
   154ce:	f88d 3008 	strb.w	r3, [sp, #8]

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   154d2:	2303      	movs	r3, #3
   154d4:	f88d 300b 	strb.w	r3, [sp, #11]
   154d8:	e017      	b.n	1550a <dmConnReset+0x5a>
  {
    if (pCcb->inUse)
   154da:	9b03      	ldr	r3, [sp, #12]
   154dc:	7d9b      	ldrb	r3, [r3, #22]
   154de:	2b00      	cmp	r3, #0
   154e0:	d00b      	beq.n	154fa <dmConnReset+0x4a>
    {
      /* set connection id */
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   154e2:	9b03      	ldr	r3, [sp, #12]
   154e4:	899b      	ldrh	r3, [r3, #12]
   154e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   154ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   154ee:	f8ad 3000 	strh.w	r3, [sp]

      /* handle the event */
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   154f2:	466b      	mov	r3, sp
   154f4:	4618      	mov	r0, r3
   154f6:	f000 f85c 	bl	155b2 <dmConnHciHandler>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   154fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   154fe:	3b01      	subs	r3, #1
   15500:	f88d 300b 	strb.w	r3, [sp, #11]
   15504:	9b03      	ldr	r3, [sp, #12]
   15506:	3330      	adds	r3, #48	; 0x30
   15508:	9303      	str	r3, [sp, #12]
   1550a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1550e:	2b00      	cmp	r3, #0
   15510:	d1e3      	bne.n	154da <dmConnReset+0x2a>
    }
  }

  /* initialize control block */
  for (i = 0; i < DM_NUM_PHYS; i++)
   15512:	2300      	movs	r3, #0
   15514:	f88d 300b 	strb.w	r3, [sp, #11]
   15518:	e021      	b.n	1555e <dmConnReset+0xae>
  {
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   1551a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1551e:	4a17      	ldr	r2, [pc, #92]	; (1557c <dmConnReset+0xcc>)
   15520:	3358      	adds	r3, #88	; 0x58
   15522:	2130      	movs	r1, #48	; 0x30
   15524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
   15528:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1552c:	4a13      	ldr	r2, [pc, #76]	; (1557c <dmConnReset+0xcc>)
   1552e:	3358      	adds	r3, #88	; 0x58
   15530:	005b      	lsls	r3, r3, #1
   15532:	4413      	add	r3, r2
   15534:	2230      	movs	r2, #48	; 0x30
   15536:	805a      	strh	r2, [r3, #2]
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   15538:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1553c:	490f      	ldr	r1, [pc, #60]	; (1557c <dmConnReset+0xcc>)
   1553e:	4613      	mov	r3, r2
   15540:	005b      	lsls	r3, r3, #1
   15542:	4413      	add	r3, r2
   15544:	009b      	lsls	r3, r3, #2
   15546:	440b      	add	r3, r1
   15548:	33a0      	adds	r3, #160	; 0xa0
   1554a:	4a0d      	ldr	r2, [pc, #52]	; (15580 <dmConnReset+0xd0>)
   1554c:	3304      	adds	r3, #4
   1554e:	ca07      	ldmia	r2, {r0, r1, r2}
   15550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (i = 0; i < DM_NUM_PHYS; i++)
   15554:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15558:	3301      	adds	r3, #1
   1555a:	f88d 300b 	strb.w	r3, [sp, #11]
   1555e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15562:	2b00      	cmp	r3, #0
   15564:	d0d9      	beq.n	1551a <dmConnReset+0x6a>
  }

  dmCb.initFiltPolicy = HCI_FILT_NONE;
   15566:	4b07      	ldr	r3, [pc, #28]	; (15584 <dmConnReset+0xd4>)
   15568:	2200      	movs	r2, #0
   1556a:	74da      	strb	r2, [r3, #19]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
   1556c:	4b05      	ldr	r3, [pc, #20]	; (15584 <dmConnReset+0xd4>)
   1556e:	2200      	movs	r2, #0
   15570:	735a      	strb	r2, [r3, #13]
}
   15572:	bf00      	nop
   15574:	b005      	add	sp, #20
   15576:	f85d fb04 	ldr.w	pc, [sp], #4
   1557a:	bf00      	nop
   1557c:	100094a4 	.word	0x100094a4
   15580:	0002c27c 	.word	0x0002c27c
   15584:	10009568 	.word	0x10009568

00015588 <dmConnMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
   15588:	b500      	push	{lr}
   1558a:	b085      	sub	sp, #20
   1558c:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   1558e:	9b01      	ldr	r3, [sp, #4]
   15590:	881b      	ldrh	r3, [r3, #0]
   15592:	b2db      	uxtb	r3, r3
   15594:	4618      	mov	r0, r3
   15596:	f7ff fdab 	bl	150f0 <dmConnCcbById>
   1559a:	9003      	str	r0, [sp, #12]
   1559c:	9b03      	ldr	r3, [sp, #12]
   1559e:	2b00      	cmp	r3, #0
   155a0:	d003      	beq.n	155aa <dmConnMsgHandler+0x22>
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   155a2:	9901      	ldr	r1, [sp, #4]
   155a4:	9803      	ldr	r0, [sp, #12]
   155a6:	f000 fe77 	bl	16298 <dmConnSmExecute>
  }
}
   155aa:	bf00      	nop
   155ac:	b005      	add	sp, #20
   155ae:	f85d fb04 	ldr.w	pc, [sp], #4

000155b2 <dmConnHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnHciHandler(hciEvt_t *pEvent)
{
   155b2:	b500      	push	{lr}
   155b4:	b085      	sub	sp, #20
   155b6:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* handle special cases for connection complete event */
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   155b8:	9b01      	ldr	r3, [sp, #4]
   155ba:	789b      	ldrb	r3, [r3, #2]
   155bc:	2b01      	cmp	r3, #1
   155be:	d003      	beq.n	155c8 <dmConnHciHandler+0x16>
      (pEvent->hdr.event == HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT))
   155c0:	9b01      	ldr	r3, [sp, #4]
   155c2:	789b      	ldrb	r3, [r3, #2]
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   155c4:	2b02      	cmp	r3, #2
   155c6:	d128      	bne.n	1561a <dmConnHciHandler+0x68>
  {
    /* first check if ccb exists for this bd addr */
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
   155c8:	9b01      	ldr	r3, [sp, #4]
   155ca:	330a      	adds	r3, #10
   155cc:	4618      	mov	r0, r3
   155ce:	f7ff fd5f 	bl	15090 <dmConnCcbByBdAddr>
   155d2:	9003      	str	r0, [sp, #12]
   155d4:	9b03      	ldr	r3, [sp, #12]
   155d6:	2b00      	cmp	r3, #0
   155d8:	d113      	bne.n	15602 <dmConnHciHandler+0x50>
    {
      /* check for special case states */
      if ((pCcb = dmConnCmplStates()) == NULL)
   155da:	f7ff fc8f 	bl	14efc <dmConnCmplStates>
   155de:	9003      	str	r0, [sp, #12]
   155e0:	9b03      	ldr	r3, [sp, #12]
   155e2:	2b00      	cmp	r3, #0
   155e4:	d10d      	bne.n	15602 <dmConnHciHandler+0x50>
      {
        /* else default case for slave, allocate new ccb */
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
   155e6:	9b01      	ldr	r3, [sp, #4]
   155e8:	78db      	ldrb	r3, [r3, #3]
   155ea:	2b00      	cmp	r3, #0
   155ec:	d109      	bne.n	15602 <dmConnHciHandler+0x50>
   155ee:	9b01      	ldr	r3, [sp, #4]
   155f0:	7a1b      	ldrb	r3, [r3, #8]
   155f2:	2b01      	cmp	r3, #1
   155f4:	d105      	bne.n	15602 <dmConnHciHandler+0x50>
        {
          pCcb = dmConnCcbAlloc(pEvent->leConnCmpl.peerAddr);
   155f6:	9b01      	ldr	r3, [sp, #4]
   155f8:	330a      	adds	r3, #10
   155fa:	4618      	mov	r0, r3
   155fc:	f7ff fcb6 	bl	14f6c <dmConnCcbAlloc>
   15600:	9003      	str	r0, [sp, #12]
        }
      }
    }

    /* translate HCI event to state machine event */
    if (pEvent->hdr.status == HCI_SUCCESS)
   15602:	9b01      	ldr	r3, [sp, #4]
   15604:	78db      	ldrb	r3, [r3, #3]
   15606:	2b00      	cmp	r3, #0
   15608:	d103      	bne.n	15612 <dmConnHciHandler+0x60>
    {
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   1560a:	9b01      	ldr	r3, [sp, #4]
   1560c:	2238      	movs	r2, #56	; 0x38
   1560e:	709a      	strb	r2, [r3, #2]
    if (pEvent->hdr.status == HCI_SUCCESS)
   15610:	e00f      	b.n	15632 <dmConnHciHandler+0x80>
    }
    else
    {
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   15612:	9b01      	ldr	r3, [sp, #4]
   15614:	2237      	movs	r2, #55	; 0x37
   15616:	709a      	strb	r2, [r3, #2]
    if (pEvent->hdr.status == HCI_SUCCESS)
   15618:	e00b      	b.n	15632 <dmConnHciHandler+0x80>
    }
  }
  else
  {
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
   1561a:	9b01      	ldr	r3, [sp, #4]
   1561c:	881b      	ldrh	r3, [r3, #0]
   1561e:	4618      	mov	r0, r3
   15620:	f7ff fd04 	bl	1502c <dmConnCcbByHandle>
   15624:	9003      	str	r0, [sp, #12]

    /* translate HCI event to state machine message */
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   15626:	9b01      	ldr	r3, [sp, #4]
   15628:	789b      	ldrb	r3, [r3, #2]
   1562a:	3336      	adds	r3, #54	; 0x36
   1562c:	b2da      	uxtb	r2, r3
   1562e:	9b01      	ldr	r3, [sp, #4]
   15630:	709a      	strb	r2, [r3, #2]
  }

  /* if ccb found */
  if (pCcb != NULL)
   15632:	9b03      	ldr	r3, [sp, #12]
   15634:	2b00      	cmp	r3, #0
   15636:	d008      	beq.n	1564a <dmConnHciHandler+0x98>
  {
    /* set conn id */
    pEvent->hdr.param = pCcb->connId;
   15638:	9b03      	ldr	r3, [sp, #12]
   1563a:	7c1b      	ldrb	r3, [r3, #16]
   1563c:	b29a      	uxth	r2, r3
   1563e:	9b01      	ldr	r3, [sp, #4]
   15640:	801a      	strh	r2, [r3, #0]

    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   15642:	9901      	ldr	r1, [sp, #4]
   15644:	9803      	ldr	r0, [sp, #12]
   15646:	f000 fe27 	bl	16298 <dmConnSmExecute>
  }
}
   1564a:	bf00      	nop
   1564c:	b005      	add	sp, #20
   1564e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00015654 <dmConn2MsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
   15654:	b570      	push	{r4, r5, r6, lr}
   15656:	b08a      	sub	sp, #40	; 0x28
   15658:	9005      	str	r0, [sp, #20]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   1565a:	9b05      	ldr	r3, [sp, #20]
   1565c:	881b      	ldrh	r3, [r3, #0]
   1565e:	b2db      	uxtb	r3, r3
   15660:	4618      	mov	r0, r3
   15662:	f7ff fd45 	bl	150f0 <dmConnCcbById>
   15666:	9009      	str	r0, [sp, #36]	; 0x24
   15668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1566a:	2b00      	cmp	r3, #0
   1566c:	d052      	beq.n	15714 <dmConn2MsgHandler+0xc0>
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;
   1566e:	9b05      	ldr	r3, [sp, #20]
   15670:	9308      	str	r3, [sp, #32]

    /* handle incoming message */
    switch (pMsg->event)
   15672:	9b05      	ldr	r3, [sp, #20]
   15674:	789b      	ldrb	r3, [r3, #2]
   15676:	3b41      	subs	r3, #65	; 0x41
   15678:	2b04      	cmp	r3, #4
   1567a:	d84d      	bhi.n	15718 <dmConn2MsgHandler+0xc4>
   1567c:	a201      	add	r2, pc, #4	; (adr r2, 15684 <dmConn2MsgHandler+0x30>)
   1567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15682:	bf00      	nop
   15684:	00015699 	.word	0x00015699
   15688:	000156a5 	.word	0x000156a5
   1568c:	000156d9 	.word	0x000156d9
   15690:	000156eb 	.word	0x000156eb
   15694:	00015703 	.word	0x00015703
    {
      case DM_CONN_MSG_API_READ_RSSI:
        HciReadRssiCmd(pCcb->handle);
   15698:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1569a:	899b      	ldrh	r3, [r3, #12]
   1569c:	4618      	mov	r0, r3
   1569e:	f009 f856 	bl	1e74e <HciReadRssiCmd>
        break;
   156a2:	e03a      	b.n	1571a <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;
   156a4:	9b08      	ldr	r3, [sp, #32]
   156a6:	3304      	adds	r3, #4
   156a8:	9306      	str	r3, [sp, #24]

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
   156aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   156ac:	8998      	ldrh	r0, [r3, #12]
   156ae:	9b06      	ldr	r3, [sp, #24]
   156b0:	881c      	ldrh	r4, [r3, #0]
   156b2:	9b06      	ldr	r3, [sp, #24]
   156b4:	885d      	ldrh	r5, [r3, #2]
   156b6:	9b06      	ldr	r3, [sp, #24]
   156b8:	889e      	ldrh	r6, [r3, #4]
   156ba:	9b06      	ldr	r3, [sp, #24]
   156bc:	88db      	ldrh	r3, [r3, #6]
   156be:	9a06      	ldr	r2, [sp, #24]
   156c0:	8912      	ldrh	r2, [r2, #8]
   156c2:	9906      	ldr	r1, [sp, #24]
   156c4:	8949      	ldrh	r1, [r1, #10]
   156c6:	9102      	str	r1, [sp, #8]
   156c8:	9201      	str	r2, [sp, #4]
   156ca:	9300      	str	r3, [sp, #0]
   156cc:	4633      	mov	r3, r6
   156ce:	462a      	mov	r2, r5
   156d0:	4621      	mov	r1, r4
   156d2:	f008 fc5e 	bl	1df92 <HciLeRemoteConnParamReqReply>
                                       pConnSpec->connIntervalMax, pConnSpec->connLatency,
                                       pConnSpec->supTimeout, pConnSpec->minCeLen,
                                       pConnSpec->maxCeLen);
        }
        break;
   156d6:	e020      	b.n	1571a <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY:
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   156d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   156da:	899a      	ldrh	r2, [r3, #12]
   156dc:	9b08      	ldr	r3, [sp, #32]
   156de:	791b      	ldrb	r3, [r3, #4]
   156e0:	4619      	mov	r1, r3
   156e2:	4610      	mov	r0, r2
   156e4:	f008 fce9 	bl	1e0ba <HciLeRemoteConnParamReqNegReply>
        break;
   156e8:	e017      	b.n	1571a <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_SET_DATA_LEN:
        {
          dmConnApiSetDataLen_t *pDataLen = &pConn2Msg->apiSetDataLen;
   156ea:	9b08      	ldr	r3, [sp, #32]
   156ec:	9307      	str	r3, [sp, #28]

          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   156ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   156f0:	8998      	ldrh	r0, [r3, #12]
   156f2:	9b07      	ldr	r3, [sp, #28]
   156f4:	8899      	ldrh	r1, [r3, #4]
   156f6:	9b07      	ldr	r3, [sp, #28]
   156f8:	88db      	ldrh	r3, [r3, #6]
   156fa:	461a      	mov	r2, r3
   156fc:	f008 fd0f 	bl	1e11e <HciLeSetDataLen>
        }
        break;
   15700:	e00b      	b.n	1571a <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_WRITE_AUTH_TO:
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   15702:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15704:	899a      	ldrh	r2, [r3, #12]
   15706:	9b08      	ldr	r3, [sp, #32]
   15708:	889b      	ldrh	r3, [r3, #4]
   1570a:	4619      	mov	r1, r3
   1570c:	4610      	mov	r0, r2
   1570e:	f009 f8af 	bl	1e870 <HciWriteAuthPayloadTimeout>
        break;
   15712:	e002      	b.n	1571a <dmConn2MsgHandler+0xc6>

      default:
        /* should never get here */
        break;
    }
  }
   15714:	bf00      	nop
   15716:	e000      	b.n	1571a <dmConn2MsgHandler+0xc6>
        break;
   15718:	bf00      	nop
}
   1571a:	bf00      	nop
   1571c:	b00a      	add	sp, #40	; 0x28
   1571e:	bd70      	pop	{r4, r5, r6, pc}

00015720 <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
   15720:	b500      	push	{lr}
   15722:	b085      	sub	sp, #20
   15724:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   15726:	9b01      	ldr	r3, [sp, #4]
   15728:	881b      	ldrh	r3, [r3, #0]
   1572a:	4618      	mov	r0, r3
   1572c:	f7ff fc7e 	bl	1502c <dmConnCcbByHandle>
   15730:	9003      	str	r0, [sp, #12]
   15732:	9b03      	ldr	r3, [sp, #12]
   15734:	2b00      	cmp	r3, #0
   15736:	d06e      	beq.n	15816 <dmConn2HciHandler+0xf6>
  {
    /* handle incoming event */
    switch (pEvent->hdr.event)
   15738:	9b01      	ldr	r3, [sp, #4]
   1573a:	789b      	ldrb	r3, [r3, #2]
   1573c:	3b07      	subs	r3, #7
   1573e:	2b21      	cmp	r3, #33	; 0x21
   15740:	d86b      	bhi.n	1581a <dmConn2HciHandler+0xfa>
   15742:	a201      	add	r2, pc, #4	; (adr r2, 15748 <dmConn2HciHandler+0x28>)
   15744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15748:	000157d1 	.word	0x000157d1
   1574c:	0001581b 	.word	0x0001581b
   15750:	0001581b 	.word	0x0001581b
   15754:	0001580d 	.word	0x0001580d
   15758:	00015803 	.word	0x00015803
   1575c:	0001581b 	.word	0x0001581b
   15760:	0001581b 	.word	0x0001581b
   15764:	0001581b 	.word	0x0001581b
   15768:	0001581b 	.word	0x0001581b
   1576c:	0001581b 	.word	0x0001581b
   15770:	0001581b 	.word	0x0001581b
   15774:	0001581b 	.word	0x0001581b
   15778:	0001581b 	.word	0x0001581b
   1577c:	0001581b 	.word	0x0001581b
   15780:	0001581b 	.word	0x0001581b
   15784:	0001581b 	.word	0x0001581b
   15788:	0001581b 	.word	0x0001581b
   1578c:	0001581b 	.word	0x0001581b
   15790:	0001581b 	.word	0x0001581b
   15794:	0001581b 	.word	0x0001581b
   15798:	0001581b 	.word	0x0001581b
   1579c:	0001581b 	.word	0x0001581b
   157a0:	0001581b 	.word	0x0001581b
   157a4:	0001581b 	.word	0x0001581b
   157a8:	0001581b 	.word	0x0001581b
   157ac:	0001581b 	.word	0x0001581b
   157b0:	0001581b 	.word	0x0001581b
   157b4:	0001581b 	.word	0x0001581b
   157b8:	000157db 	.word	0x000157db
   157bc:	000157e5 	.word	0x000157e5
   157c0:	0001581b 	.word	0x0001581b
   157c4:	0001581b 	.word	0x0001581b
   157c8:	000157ef 	.word	0x000157ef
   157cc:	000157f9 	.word	0x000157f9
    {
      case HCI_READ_RSSI_CMD_CMPL_CBACK_EVT:
        dmConn2ActRssiRead(pCcb, pEvent);
   157d0:	9901      	ldr	r1, [sp, #4]
   157d2:	9803      	ldr	r0, [sp, #12]
   157d4:	f000 f826 	bl	15824 <dmConn2ActRssiRead>
        break;
   157d8:	e020      	b.n	1581c <dmConn2HciHandler+0xfc>

      case HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT:
        dmConn2ActRemoteConnParamReq(pCcb, pEvent);
   157da:	9901      	ldr	r1, [sp, #4]
   157dc:	9803      	ldr	r0, [sp, #12]
   157de:	f000 f84b 	bl	15878 <dmConn2ActRemoteConnParamReq>
        break;
   157e2:	e01b      	b.n	1581c <dmConn2HciHandler+0xfc>

      case HCI_LE_DATA_LEN_CHANGE_CBACK_EVT:
        dmConn2ActDataLenChange(pCcb, pEvent);
   157e4:	9901      	ldr	r1, [sp, #4]
   157e6:	9803      	ldr	r0, [sp, #12]
   157e8:	f000 f876 	bl	158d8 <dmConn2ActDataLenChange>
        break;
   157ec:	e016      	b.n	1581c <dmConn2HciHandler+0xfc>

      case HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT:
        dmConn2ActWriteAuthToCmpl(pCcb, pEvent);
   157ee:	9901      	ldr	r1, [sp, #4]
   157f0:	9803      	ldr	r0, [sp, #12]
   157f2:	f000 f8a1 	bl	15938 <dmConn2ActWriteAuthToCmpl>
        break;
   157f6:	e011      	b.n	1581c <dmConn2HciHandler+0xfc>

      case HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT:
        dmConn2ActAuthToExpired(pCcb, pEvent);
   157f8:	9901      	ldr	r1, [sp, #4]
   157fa:	9803      	ldr	r0, [sp, #12]
   157fc:	f000 f8c0 	bl	15980 <dmConn2ActAuthToExpired>
        break;
   15800:	e00c      	b.n	1581c <dmConn2HciHandler+0xfc>

      case HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT:
        dmConn2ActReadRemoteFeaturesCmpl(pCcb, pEvent);
   15802:	9901      	ldr	r1, [sp, #4]
   15804:	9803      	ldr	r0, [sp, #12]
   15806:	f000 f8db 	bl	159c0 <dmConn2ActReadRemoteFeaturesCmpl>
        break;
   1580a:	e007      	b.n	1581c <dmConn2HciHandler+0xfc>

      case HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT:
        dmConn2ActReadRemoteVerInfoCmpl(pCcb, pEvent);
   1580c:	9901      	ldr	r1, [sp, #4]
   1580e:	9803      	ldr	r0, [sp, #12]
   15810:	f000 f916 	bl	15a40 <dmConn2ActReadRemoteVerInfoCmpl>
        break;
   15814:	e002      	b.n	1581c <dmConn2HciHandler+0xfc>

      default:
        /* should never get here */
        break;
    }
  }
   15816:	bf00      	nop
   15818:	e000      	b.n	1581c <dmConn2HciHandler+0xfc>
        break;
   1581a:	bf00      	nop
}
   1581c:	bf00      	nop
   1581e:	b005      	add	sp, #20
   15820:	f85d fb04 	ldr.w	pc, [sp], #4

00015824 <dmConn2ActRssiRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActRssiRead(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15824:	b500      	push	{lr}
   15826:	b087      	sub	sp, #28
   15828:	9001      	str	r0, [sp, #4]
   1582a:	9100      	str	r1, [sp, #0]
  hciReadRssiCmdCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   1582c:	2339      	movs	r3, #57	; 0x39
   1582e:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.hdr.param = pCcb->connId;
   15832:	9b01      	ldr	r3, [sp, #4]
   15834:	7c1b      	ldrb	r3, [r3, #16]
   15836:	b29b      	uxth	r3, r3
   15838:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   1583c:	9b00      	ldr	r3, [sp, #0]
   1583e:	791b      	ldrb	r3, [r3, #4]
   15840:	f88d 300f 	strb.w	r3, [sp, #15]
   15844:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15848:	f88d 3010 	strb.w	r3, [sp, #16]
  evt.handle = pCcb->handle;
   1584c:	9b01      	ldr	r3, [sp, #4]
   1584e:	899b      	ldrh	r3, [r3, #12]
   15850:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   15854:	9b00      	ldr	r3, [sp, #0]
   15856:	f993 3008 	ldrsb.w	r3, [r3, #8]
   1585a:	f88d 3014 	strb.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1585e:	4b05      	ldr	r3, [pc, #20]	; (15874 <dmConn2ActRssiRead+0x50>)
   15860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15864:	aa03      	add	r2, sp, #12
   15866:	4610      	mov	r0, r2
   15868:	4798      	blx	r3
}
   1586a:	bf00      	nop
   1586c:	b007      	add	sp, #28
   1586e:	f85d fb04 	ldr.w	pc, [sp], #4
   15872:	bf00      	nop
   15874:	100094a4 	.word	0x100094a4

00015878 <dmConn2ActRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActRemoteConnParamReq(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15878:	b500      	push	{lr}
   1587a:	b087      	sub	sp, #28
   1587c:	9001      	str	r0, [sp, #4]
   1587e:	9100      	str	r1, [sp, #0]
  hciLeRemConnParamReqEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
   15880:	2340      	movs	r3, #64	; 0x40
   15882:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   15886:	9b01      	ldr	r3, [sp, #4]
   15888:	7c1b      	ldrb	r3, [r3, #16]
   1588a:	b29b      	uxth	r3, r3
   1588c:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15890:	2300      	movs	r3, #0
   15892:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pCcb->handle;
   15896:	9b01      	ldr	r3, [sp, #4]
   15898:	899b      	ldrh	r3, [r3, #12]
   1589a:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
   1589e:	9b00      	ldr	r3, [sp, #0]
   158a0:	88db      	ldrh	r3, [r3, #6]
   158a2:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.intervalMax = pEvent->leRemConnParamReq.intervalMax;
   158a6:	9b00      	ldr	r3, [sp, #0]
   158a8:	891b      	ldrh	r3, [r3, #8]
   158aa:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.latency = pEvent->leRemConnParamReq.latency;
   158ae:	9b00      	ldr	r3, [sp, #0]
   158b0:	895b      	ldrh	r3, [r3, #10]
   158b2:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.timeout = pEvent->leRemConnParamReq.timeout;
   158b6:	9b00      	ldr	r3, [sp, #0]
   158b8:	899b      	ldrh	r3, [r3, #12]
   158ba:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   158be:	4b05      	ldr	r3, [pc, #20]	; (158d4 <dmConn2ActRemoteConnParamReq+0x5c>)
   158c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   158c4:	aa02      	add	r2, sp, #8
   158c6:	4610      	mov	r0, r2
   158c8:	4798      	blx	r3
}
   158ca:	bf00      	nop
   158cc:	b007      	add	sp, #28
   158ce:	f85d fb04 	ldr.w	pc, [sp], #4
   158d2:	bf00      	nop
   158d4:	100094a4 	.word	0x100094a4

000158d8 <dmConn2ActDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActDataLenChange(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   158d8:	b500      	push	{lr}
   158da:	b087      	sub	sp, #28
   158dc:	9001      	str	r0, [sp, #4]
   158de:	9100      	str	r1, [sp, #0]
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
   158e0:	2341      	movs	r3, #65	; 0x41
   158e2:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   158e6:	9b01      	ldr	r3, [sp, #4]
   158e8:	7c1b      	ldrb	r3, [r3, #16]
   158ea:	b29b      	uxth	r3, r3
   158ec:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   158f0:	2300      	movs	r3, #0
   158f2:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pCcb->handle;
   158f6:	9b01      	ldr	r3, [sp, #4]
   158f8:	899b      	ldrh	r3, [r3, #12]
   158fa:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   158fe:	9b00      	ldr	r3, [sp, #0]
   15900:	88db      	ldrh	r3, [r3, #6]
   15902:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   15906:	9b00      	ldr	r3, [sp, #0]
   15908:	891b      	ldrh	r3, [r3, #8]
   1590a:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   1590e:	9b00      	ldr	r3, [sp, #0]
   15910:	895b      	ldrh	r3, [r3, #10]
   15912:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   15916:	9b00      	ldr	r3, [sp, #0]
   15918:	899b      	ldrh	r3, [r3, #12]
   1591a:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1591e:	4b05      	ldr	r3, [pc, #20]	; (15934 <dmConn2ActDataLenChange+0x5c>)
   15920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15924:	aa02      	add	r2, sp, #8
   15926:	4610      	mov	r0, r2
   15928:	4798      	blx	r3
}
   1592a:	bf00      	nop
   1592c:	b007      	add	sp, #28
   1592e:	f85d fb04 	ldr.w	pc, [sp], #4
   15932:	bf00      	nop
   15934:	100094a4 	.word	0x100094a4

00015938 <dmConn2ActWriteAuthToCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActWriteAuthToCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15938:	b500      	push	{lr}
   1593a:	b085      	sub	sp, #20
   1593c:	9001      	str	r0, [sp, #4]
   1593e:	9100      	str	r1, [sp, #0]
  hciWriteAuthPayloadToCmdCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
   15940:	2342      	movs	r3, #66	; 0x42
   15942:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   15946:	9b01      	ldr	r3, [sp, #4]
   15948:	7c1b      	ldrb	r3, [r3, #16]
   1594a:	b29b      	uxth	r3, r3
   1594c:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15950:	2300      	movs	r3, #0
   15952:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   15956:	9b00      	ldr	r3, [sp, #0]
   15958:	88db      	ldrh	r3, [r3, #6]
   1595a:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   1595e:	9b00      	ldr	r3, [sp, #0]
   15960:	791b      	ldrb	r3, [r3, #4]
   15962:	f88d 300c 	strb.w	r3, [sp, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15966:	4b05      	ldr	r3, [pc, #20]	; (1597c <dmConn2ActWriteAuthToCmpl+0x44>)
   15968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1596c:	aa02      	add	r2, sp, #8
   1596e:	4610      	mov	r0, r2
   15970:	4798      	blx	r3
}
   15972:	bf00      	nop
   15974:	b005      	add	sp, #20
   15976:	f85d fb04 	ldr.w	pc, [sp], #4
   1597a:	bf00      	nop
   1597c:	100094a4 	.word	0x100094a4

00015980 <dmConn2ActAuthToExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActAuthToExpired(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15980:	b500      	push	{lr}
   15982:	b085      	sub	sp, #20
   15984:	9001      	str	r0, [sp, #4]
   15986:	9100      	str	r1, [sp, #0]
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   15988:	2343      	movs	r3, #67	; 0x43
   1598a:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   1598e:	9b01      	ldr	r3, [sp, #4]
   15990:	7c1b      	ldrb	r3, [r3, #16]
   15992:	b29b      	uxth	r3, r3
   15994:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15998:	2300      	movs	r3, #0
   1599a:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pEvent->authPayloadToExpired.handle;
   1599e:	9b00      	ldr	r3, [sp, #0]
   159a0:	889b      	ldrh	r3, [r3, #4]
   159a2:	f8ad 300c 	strh.w	r3, [sp, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   159a6:	4b05      	ldr	r3, [pc, #20]	; (159bc <dmConn2ActAuthToExpired+0x3c>)
   159a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   159ac:	aa02      	add	r2, sp, #8
   159ae:	4610      	mov	r0, r2
   159b0:	4798      	blx	r3
}
   159b2:	bf00      	nop
   159b4:	b005      	add	sp, #20
   159b6:	f85d fb04 	ldr.w	pc, [sp], #4
   159ba:	bf00      	nop
   159bc:	100094a4 	.word	0x100094a4

000159c0 <dmConn2ActReadRemoteFeaturesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   159c0:	b500      	push	{lr}
   159c2:	b087      	sub	sp, #28
   159c4:	9001      	str	r0, [sp, #4]
   159c6:	9100      	str	r1, [sp, #0]
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   159c8:	9b00      	ldr	r3, [sp, #0]
   159ca:	7a1b      	ldrb	r3, [r3, #8]
   159cc:	461a      	mov	r2, r3
   159ce:	9b00      	ldr	r3, [sp, #0]
   159d0:	7a5b      	ldrb	r3, [r3, #9]
   159d2:	021b      	lsls	r3, r3, #8
   159d4:	441a      	add	r2, r3
   159d6:	9b00      	ldr	r3, [sp, #0]
   159d8:	7a9b      	ldrb	r3, [r3, #10]
   159da:	041b      	lsls	r3, r3, #16
   159dc:	441a      	add	r2, r3
   159de:	9b00      	ldr	r3, [sp, #0]
   159e0:	7adb      	ldrb	r3, [r3, #11]
   159e2:	061b      	lsls	r3, r3, #24
   159e4:	441a      	add	r2, r3
   159e6:	9b01      	ldr	r3, [sp, #4]
   159e8:	629a      	str	r2, [r3, #40]	; 0x28
  pCcb->featuresPresent = TRUE;
   159ea:	9b01      	ldr	r3, [sp, #4]
   159ec:	2201      	movs	r2, #1
   159ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
   159f2:	2357      	movs	r3, #87	; 0x57
   159f4:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   159f8:	9b01      	ldr	r3, [sp, #4]
   159fa:	7c1b      	ldrb	r3, [r3, #16]
   159fc:	b29b      	uxth	r3, r3
   159fe:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15a02:	2300      	movs	r3, #0
   15a04:	f88d 300b 	strb.w	r3, [sp, #11]

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   15a08:	9b00      	ldr	r3, [sp, #0]
   15a0a:	791b      	ldrb	r3, [r3, #4]
   15a0c:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
   15a10:	9b00      	ldr	r3, [sp, #0]
   15a12:	88db      	ldrh	r3, [r3, #6]
   15a14:	f8ad 300e 	strh.w	r3, [sp, #14]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   15a18:	9b00      	ldr	r3, [sp, #0]
   15a1a:	f103 0208 	add.w	r2, r3, #8
   15a1e:	ab04      	add	r3, sp, #16
   15a20:	6810      	ldr	r0, [r2, #0]
   15a22:	6851      	ldr	r1, [r2, #4]
   15a24:	c303      	stmia	r3!, {r0, r1}

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15a26:	4b05      	ldr	r3, [pc, #20]	; (15a3c <dmConn2ActReadRemoteFeaturesCmpl+0x7c>)
   15a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15a2c:	aa02      	add	r2, sp, #8
   15a2e:	4610      	mov	r0, r2
   15a30:	4798      	blx	r3
}
   15a32:	bf00      	nop
   15a34:	b007      	add	sp, #28
   15a36:	f85d fb04 	ldr.w	pc, [sp], #4
   15a3a:	bf00      	nop
   15a3c:	100094a4 	.word	0x100094a4

00015a40 <dmConn2ActReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActReadRemoteVerInfoCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15a40:	b500      	push	{lr}
   15a42:	b087      	sub	sp, #28
   15a44:	9001      	str	r0, [sp, #4]
   15a46:	9100      	str	r1, [sp, #0]
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   15a48:	2358      	movs	r3, #88	; 0x58
   15a4a:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   15a4e:	9b01      	ldr	r3, [sp, #4]
   15a50:	7c1b      	ldrb	r3, [r3, #16]
   15a52:	b29b      	uxth	r3, r3
   15a54:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15a58:	2300      	movs	r3, #0
   15a5a:	f88d 300b 	strb.w	r3, [sp, #11]

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   15a5e:	9b00      	ldr	r3, [sp, #0]
   15a60:	791b      	ldrb	r3, [r3, #4]
   15a62:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   15a66:	9b00      	ldr	r3, [sp, #0]
   15a68:	88db      	ldrh	r3, [r3, #6]
   15a6a:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   15a6e:	9b00      	ldr	r3, [sp, #0]
   15a70:	7a1b      	ldrb	r3, [r3, #8]
   15a72:	f88d 3010 	strb.w	r3, [sp, #16]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   15a76:	9b00      	ldr	r3, [sp, #0]
   15a78:	895b      	ldrh	r3, [r3, #10]
   15a7a:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;
   15a7e:	9b00      	ldr	r3, [sp, #0]
   15a80:	899b      	ldrh	r3, [r3, #12]
   15a82:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15a86:	4b05      	ldr	r3, [pc, #20]	; (15a9c <dmConn2ActReadRemoteVerInfoCmpl+0x5c>)
   15a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15a8c:	aa02      	add	r2, sp, #8
   15a8e:	4610      	mov	r0, r2
   15a90:	4798      	blx	r3
}
   15a92:	bf00      	nop
   15a94:	b007      	add	sp, #28
   15a96:	f85d fb04 	ldr.w	pc, [sp], #4
   15a9a:	bf00      	nop
   15a9c:	100094a4 	.word	0x100094a4

00015aa0 <DmConnInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
   15aa0:	4b05      	ldr	r3, [pc, #20]	; (15ab8 <DmConnInit+0x18>)
   15aa2:	4a06      	ldr	r2, [pc, #24]	; (15abc <DmConnInit+0x1c>)
   15aa4:	60da      	str	r2, [r3, #12]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   15aa6:	4b04      	ldr	r3, [pc, #16]	; (15ab8 <DmConnInit+0x18>)
   15aa8:	4a05      	ldr	r2, [pc, #20]	; (15ac0 <DmConnInit+0x20>)
   15aaa:	611a      	str	r2, [r3, #16]
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   15aac:	4b05      	ldr	r3, [pc, #20]	; (15ac4 <DmConnInit+0x24>)
   15aae:	4a06      	ldr	r2, [pc, #24]	; (15ac8 <DmConnInit+0x28>)
   15ab0:	601a      	str	r2, [r3, #0]
}
   15ab2:	bf00      	nop
   15ab4:	4770      	bx	lr
   15ab6:	bf00      	nop
   15ab8:	10002b78 	.word	0x10002b78
   15abc:	0002c2a0 	.word	0x0002c2a0
   15ac0:	0002c2ac 	.word	0x0002c2ac
   15ac4:	10009558 	.word	0x10009558
   15ac8:	0002c288 	.word	0x0002c288

00015acc <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
   15acc:	b500      	push	{lr}
   15ace:	b083      	sub	sp, #12
   15ad0:	4603      	mov	r3, r0
   15ad2:	9100      	str	r1, [sp, #0]
   15ad4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
   15ad8:	f7f7 fbd8 	bl	d28c <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
   15adc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ae0:	4905      	ldr	r1, [pc, #20]	; (15af8 <DmConnRegister+0x2c>)
   15ae2:	3324      	adds	r3, #36	; 0x24
   15ae4:	9a00      	ldr	r2, [sp, #0]
   15ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WsfTaskUnlock();
   15aea:	f7f7 fbd4 	bl	d296 <WsfTaskUnlock>
}
   15aee:	bf00      	nop
   15af0:	b003      	add	sp, #12
   15af2:	f85d fb04 	ldr.w	pc, [sp], #4
   15af6:	bf00      	nop
   15af8:	100094a4 	.word	0x100094a4

00015afc <DmConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnClose(uint8_t clientId, dmConnId_t connId, uint8_t reason)
{
   15afc:	b500      	push	{lr}
   15afe:	b085      	sub	sp, #20
   15b00:	4603      	mov	r3, r0
   15b02:	f88d 3007 	strb.w	r3, [sp, #7]
   15b06:	460b      	mov	r3, r1
   15b08:	f88d 3006 	strb.w	r3, [sp, #6]
   15b0c:	4613      	mov	r3, r2
   15b0e:	f88d 3005 	strb.w	r3, [sp, #5]
  dmConnApiClose_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
   15b12:	2006      	movs	r0, #6
   15b14:	f7f7 fb2e 	bl	d174 <WsfMsgAlloc>
   15b18:	9003      	str	r0, [sp, #12]
   15b1a:	9b03      	ldr	r3, [sp, #12]
   15b1c:	2b00      	cmp	r3, #0
   15b1e:	d019      	beq.n	15b54 <DmConnClose+0x58>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_CLOSE;
   15b20:	9b03      	ldr	r3, [sp, #12]
   15b22:	2231      	movs	r2, #49	; 0x31
   15b24:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   15b26:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15b2a:	b29a      	uxth	r2, r3
   15b2c:	9b03      	ldr	r3, [sp, #12]
   15b2e:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = pMsg->reason = reason;
   15b30:	9b03      	ldr	r3, [sp, #12]
   15b32:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15b36:	711a      	strb	r2, [r3, #4]
   15b38:	9b03      	ldr	r3, [sp, #12]
   15b3a:	791a      	ldrb	r2, [r3, #4]
   15b3c:	9b03      	ldr	r3, [sp, #12]
   15b3e:	70da      	strb	r2, [r3, #3]
    pMsg->clientId = clientId;
   15b40:	9b03      	ldr	r3, [sp, #12]
   15b42:	f89d 2007 	ldrb.w	r2, [sp, #7]
   15b46:	715a      	strb	r2, [r3, #5]

    WsfMsgSend(dmCb.handlerId, pMsg);
   15b48:	4b04      	ldr	r3, [pc, #16]	; (15b5c <DmConnClose+0x60>)
   15b4a:	7b1b      	ldrb	r3, [r3, #12]
   15b4c:	9903      	ldr	r1, [sp, #12]
   15b4e:	4618      	mov	r0, r3
   15b50:	f7f7 fb34 	bl	d1bc <WsfMsgSend>
  }
}
   15b54:	bf00      	nop
   15b56:	b005      	add	sp, #20
   15b58:	f85d fb04 	ldr.w	pc, [sp], #4
   15b5c:	10009568 	.word	0x10009568

00015b60 <DmReadRemoteFeatures>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmReadRemoteFeatures(dmConnId_t connId)
{
   15b60:	b500      	push	{lr}
   15b62:	b089      	sub	sp, #36	; 0x24
   15b64:	4603      	mov	r3, r0
   15b66:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbById(connId)) != NULL)
   15b6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15b6e:	4618      	mov	r0, r3
   15b70:	f7ff fabe 	bl	150f0 <dmConnCcbById>
   15b74:	9007      	str	r0, [sp, #28]
   15b76:	9b07      	ldr	r3, [sp, #28]
   15b78:	2b00      	cmp	r3, #0
   15b7a:	d044      	beq.n	15c06 <DmReadRemoteFeatures+0xa6>
  {
    if (pCcb->featuresPresent)
   15b7c:	9b07      	ldr	r3, [sp, #28]
   15b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   15b82:	2b00      	cmp	r3, #0
   15b84:	d03a      	beq.n	15bfc <DmReadRemoteFeatures+0x9c>
    {
      hciLeReadRemoteFeatCmplEvt_t evt;
      uint8_t *p = evt.features;
   15b86:	ab02      	add	r3, sp, #8
   15b88:	3308      	adds	r3, #8
   15b8a:	9306      	str	r3, [sp, #24]

      /* call callback */
      evt.hdr.event = DM_REMOTE_FEATURES_IND;
   15b8c:	2357      	movs	r3, #87	; 0x57
   15b8e:	f88d 300a 	strb.w	r3, [sp, #10]
      evt.hdr.param = pCcb->connId;
   15b92:	9b07      	ldr	r3, [sp, #28]
   15b94:	7c1b      	ldrb	r3, [r3, #16]
   15b96:	b29b      	uxth	r3, r3
   15b98:	f8ad 3008 	strh.w	r3, [sp, #8]
      evt.hdr.status = HCI_SUCCESS;
   15b9c:	2300      	movs	r3, #0
   15b9e:	f88d 300b 	strb.w	r3, [sp, #11]

      evt.status = HCI_SUCCESS;
   15ba2:	2300      	movs	r3, #0
   15ba4:	f88d 300c 	strb.w	r3, [sp, #12]
      evt.handle = pCcb->handle;
   15ba8:	9b07      	ldr	r3, [sp, #28]
   15baa:	899b      	ldrh	r3, [r3, #12]
   15bac:	f8ad 300e 	strh.w	r3, [sp, #14]
      UINT32_TO_BSTREAM(p, pCcb->features);
   15bb0:	9b07      	ldr	r3, [sp, #28]
   15bb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   15bb4:	9b06      	ldr	r3, [sp, #24]
   15bb6:	1c5a      	adds	r2, r3, #1
   15bb8:	9206      	str	r2, [sp, #24]
   15bba:	b2ca      	uxtb	r2, r1
   15bbc:	701a      	strb	r2, [r3, #0]
   15bbe:	9b07      	ldr	r3, [sp, #28]
   15bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bc2:	0a19      	lsrs	r1, r3, #8
   15bc4:	9b06      	ldr	r3, [sp, #24]
   15bc6:	1c5a      	adds	r2, r3, #1
   15bc8:	9206      	str	r2, [sp, #24]
   15bca:	b2ca      	uxtb	r2, r1
   15bcc:	701a      	strb	r2, [r3, #0]
   15bce:	9b07      	ldr	r3, [sp, #28]
   15bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bd2:	0c19      	lsrs	r1, r3, #16
   15bd4:	9b06      	ldr	r3, [sp, #24]
   15bd6:	1c5a      	adds	r2, r3, #1
   15bd8:	9206      	str	r2, [sp, #24]
   15bda:	b2ca      	uxtb	r2, r1
   15bdc:	701a      	strb	r2, [r3, #0]
   15bde:	9b07      	ldr	r3, [sp, #28]
   15be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15be2:	0e19      	lsrs	r1, r3, #24
   15be4:	9b06      	ldr	r3, [sp, #24]
   15be6:	1c5a      	adds	r2, r3, #1
   15be8:	9206      	str	r2, [sp, #24]
   15bea:	b2ca      	uxtb	r2, r1
   15bec:	701a      	strb	r2, [r3, #0]

      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15bee:	4b08      	ldr	r3, [pc, #32]	; (15c10 <DmReadRemoteFeatures+0xb0>)
   15bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15bf4:	aa02      	add	r2, sp, #8
   15bf6:	4610      	mov	r0, r2
   15bf8:	4798      	blx	r3
    {
      /* Request the remote features from the peer */
      HciLeReadRemoteFeatCmd(pCcb->handle);
    }
  }
}
   15bfa:	e004      	b.n	15c06 <DmReadRemoteFeatures+0xa6>
      HciLeReadRemoteFeatCmd(pCcb->handle);
   15bfc:	9b07      	ldr	r3, [sp, #28]
   15bfe:	899b      	ldrh	r3, [r3, #12]
   15c00:	4618      	mov	r0, r3
   15c02:	f008 fbd8 	bl	1e3b6 <HciLeReadRemoteFeatCmd>
}
   15c06:	bf00      	nop
   15c08:	b009      	add	sp, #36	; 0x24
   15c0a:	f85d fb04 	ldr.w	pc, [sp], #4
   15c0e:	bf00      	nop
   15c10:	100094a4 	.word	0x100094a4

00015c14 <DmConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnUpdate(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   15c14:	b500      	push	{lr}
   15c16:	b085      	sub	sp, #20
   15c18:	4603      	mov	r3, r0
   15c1a:	9100      	str	r1, [sp, #0]
   15c1c:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiUpdate_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
   15c20:	2010      	movs	r0, #16
   15c22:	f7f7 faa7 	bl	d174 <WsfMsgAlloc>
   15c26:	9003      	str	r0, [sp, #12]
   15c28:	9b03      	ldr	r3, [sp, #12]
   15c2a:	2b00      	cmp	r3, #0
   15c2c:	d01e      	beq.n	15c6c <DmConnUpdate+0x58>
  {
    pMsg->hdr.event = (DmConnRole(connId) == DM_ROLE_MASTER) ?
   15c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c32:	4618      	mov	r0, r3
   15c34:	f000 f9f0 	bl	16018 <DmConnRole>
   15c38:	4603      	mov	r3, r0
   15c3a:	2b00      	cmp	r3, #0
   15c3c:	d101      	bne.n	15c42 <DmConnUpdate+0x2e>
   15c3e:	2233      	movs	r2, #51	; 0x33
   15c40:	e000      	b.n	15c44 <DmConnUpdate+0x30>
   15c42:	2234      	movs	r2, #52	; 0x34
   15c44:	9b03      	ldr	r3, [sp, #12]
   15c46:	709a      	strb	r2, [r3, #2]
                      DM_CONN_MSG_API_UPDATE_MASTER : DM_CONN_MSG_API_UPDATE_SLAVE;
    pMsg->hdr.param = connId;
   15c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c4c:	b29a      	uxth	r2, r3
   15c4e:	9b03      	ldr	r3, [sp, #12]
   15c50:	801a      	strh	r2, [r3, #0]
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   15c52:	9b03      	ldr	r3, [sp, #12]
   15c54:	3304      	adds	r3, #4
   15c56:	220c      	movs	r2, #12
   15c58:	9900      	ldr	r1, [sp, #0]
   15c5a:	4618      	mov	r0, r3
   15c5c:	f7f6 fa50 	bl	c100 <memcpy>

    WsfMsgSend(dmCb.handlerId, pMsg);
   15c60:	4b04      	ldr	r3, [pc, #16]	; (15c74 <DmConnUpdate+0x60>)
   15c62:	7b1b      	ldrb	r3, [r3, #12]
   15c64:	9903      	ldr	r1, [sp, #12]
   15c66:	4618      	mov	r0, r3
   15c68:	f7f7 faa8 	bl	d1bc <WsfMsgSend>
  }
}
   15c6c:	bf00      	nop
   15c6e:	b005      	add	sp, #20
   15c70:	f85d fb04 	ldr.w	pc, [sp], #4
   15c74:	10009568 	.word	0x10009568

00015c78 <DmConnReadRssi>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnReadRssi(dmConnId_t connId)
{
   15c78:	b500      	push	{lr}
   15c7a:	b085      	sub	sp, #20
   15c7c:	4603      	mov	r3, r0
   15c7e:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiReadRssi_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiReadRssi_t))) != NULL)
   15c82:	2004      	movs	r0, #4
   15c84:	f7f7 fa76 	bl	d174 <WsfMsgAlloc>
   15c88:	9003      	str	r0, [sp, #12]
   15c8a:	9b03      	ldr	r3, [sp, #12]
   15c8c:	2b00      	cmp	r3, #0
   15c8e:	d00d      	beq.n	15cac <DmConnReadRssi+0x34>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_READ_RSSI;
   15c90:	9b03      	ldr	r3, [sp, #12]
   15c92:	2241      	movs	r2, #65	; 0x41
   15c94:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   15c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15c9a:	b29a      	uxth	r2, r3
   15c9c:	9b03      	ldr	r3, [sp, #12]
   15c9e:	801a      	strh	r2, [r3, #0]

    WsfMsgSend(dmCb.handlerId, pMsg);
   15ca0:	4b04      	ldr	r3, [pc, #16]	; (15cb4 <DmConnReadRssi+0x3c>)
   15ca2:	7b1b      	ldrb	r3, [r3, #12]
   15ca4:	9903      	ldr	r1, [sp, #12]
   15ca6:	4618      	mov	r0, r3
   15ca8:	f7f7 fa88 	bl	d1bc <WsfMsgSend>
  }
}
   15cac:	bf00      	nop
   15cae:	b005      	add	sp, #20
   15cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   15cb4:	10009568 	.word	0x10009568

00015cb8 <DmRemoteConnParamReqReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqReply(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   15cb8:	b500      	push	{lr}
   15cba:	b085      	sub	sp, #20
   15cbc:	4603      	mov	r3, r0
   15cbe:	9100      	str	r1, [sp, #0]
   15cc0:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiRemConnParamReqReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   15cc4:	2010      	movs	r0, #16
   15cc6:	f7f7 fa55 	bl	d174 <WsfMsgAlloc>
   15cca:	9003      	str	r0, [sp, #12]
   15ccc:	9b03      	ldr	r3, [sp, #12]
   15cce:	2b00      	cmp	r3, #0
   15cd0:	d014      	beq.n	15cfc <DmRemoteConnParamReqReply+0x44>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
   15cd2:	9b03      	ldr	r3, [sp, #12]
   15cd4:	2242      	movs	r2, #66	; 0x42
   15cd6:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   15cd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15cdc:	b29a      	uxth	r2, r3
   15cde:	9b03      	ldr	r3, [sp, #12]
   15ce0:	801a      	strh	r2, [r3, #0]
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   15ce2:	9b03      	ldr	r3, [sp, #12]
   15ce4:	3304      	adds	r3, #4
   15ce6:	220c      	movs	r2, #12
   15ce8:	9900      	ldr	r1, [sp, #0]
   15cea:	4618      	mov	r0, r3
   15cec:	f7f6 fa08 	bl	c100 <memcpy>

    WsfMsgSend(dmCb.handlerId, pMsg);
   15cf0:	4b04      	ldr	r3, [pc, #16]	; (15d04 <DmRemoteConnParamReqReply+0x4c>)
   15cf2:	7b1b      	ldrb	r3, [r3, #12]
   15cf4:	9903      	ldr	r1, [sp, #12]
   15cf6:	4618      	mov	r0, r3
   15cf8:	f7f7 fa60 	bl	d1bc <WsfMsgSend>
  }
}
   15cfc:	bf00      	nop
   15cfe:	b005      	add	sp, #20
   15d00:	f85d fb04 	ldr.w	pc, [sp], #4
   15d04:	10009568 	.word	0x10009568

00015d08 <DmRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqNegReply(dmConnId_t connId, uint8_t reason)
{
   15d08:	b500      	push	{lr}
   15d0a:	b085      	sub	sp, #20
   15d0c:	4603      	mov	r3, r0
   15d0e:	460a      	mov	r2, r1
   15d10:	f88d 3007 	strb.w	r3, [sp, #7]
   15d14:	4613      	mov	r3, r2
   15d16:	f88d 3006 	strb.w	r3, [sp, #6]
  dmConnApiRemConnParamReqNegReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   15d1a:	2006      	movs	r0, #6
   15d1c:	f7f7 fa2a 	bl	d174 <WsfMsgAlloc>
   15d20:	9003      	str	r0, [sp, #12]
   15d22:	9b03      	ldr	r3, [sp, #12]
   15d24:	2b00      	cmp	r3, #0
   15d26:	d011      	beq.n	15d4c <DmRemoteConnParamReqNegReply+0x44>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   15d28:	9b03      	ldr	r3, [sp, #12]
   15d2a:	2243      	movs	r2, #67	; 0x43
   15d2c:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   15d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d32:	b29a      	uxth	r2, r3
   15d34:	9b03      	ldr	r3, [sp, #12]
   15d36:	801a      	strh	r2, [r3, #0]
    pMsg->reason = reason;
   15d38:	9b03      	ldr	r3, [sp, #12]
   15d3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   15d3e:	711a      	strb	r2, [r3, #4]

    WsfMsgSend(dmCb.handlerId, pMsg);
   15d40:	4b04      	ldr	r3, [pc, #16]	; (15d54 <DmRemoteConnParamReqNegReply+0x4c>)
   15d42:	7b1b      	ldrb	r3, [r3, #12]
   15d44:	9903      	ldr	r1, [sp, #12]
   15d46:	4618      	mov	r0, r3
   15d48:	f7f7 fa38 	bl	d1bc <WsfMsgSend>
  }
}
   15d4c:	bf00      	nop
   15d4e:	b005      	add	sp, #20
   15d50:	f85d fb04 	ldr.w	pc, [sp], #4
   15d54:	10009568 	.word	0x10009568

00015d58 <DmConnIdByHandle>:
 *
 *  \return Connection ID or DM_CONN_ID_NONE if error.
 */
/*************************************************************************************************/
dmConnId_t DmConnIdByHandle(uint16_t handle)
{
   15d58:	b500      	push	{lr}
   15d5a:	b085      	sub	sp, #20
   15d5c:	4603      	mov	r3, r0
   15d5e:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   15d62:	4b15      	ldr	r3, [pc, #84]	; (15db8 <DmConnIdByHandle+0x60>)
   15d64:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   15d66:	2303      	movs	r3, #3
   15d68:	f88d 300b 	strb.w	r3, [sp, #11]
   15d6c:	e014      	b.n	15d98 <DmConnIdByHandle+0x40>
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   15d6e:	9b03      	ldr	r3, [sp, #12]
   15d70:	7d9b      	ldrb	r3, [r3, #22]
   15d72:	2b00      	cmp	r3, #0
   15d74:	d008      	beq.n	15d88 <DmConnIdByHandle+0x30>
   15d76:	9b03      	ldr	r3, [sp, #12]
   15d78:	899b      	ldrh	r3, [r3, #12]
   15d7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15d7e:	429a      	cmp	r2, r3
   15d80:	d102      	bne.n	15d88 <DmConnIdByHandle+0x30>
    {
      return pCcb->connId;
   15d82:	9b03      	ldr	r3, [sp, #12]
   15d84:	7c1b      	ldrb	r3, [r3, #16]
   15d86:	e012      	b.n	15dae <DmConnIdByHandle+0x56>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   15d88:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15d8c:	3b01      	subs	r3, #1
   15d8e:	f88d 300b 	strb.w	r3, [sp, #11]
   15d92:	9b03      	ldr	r3, [sp, #12]
   15d94:	3330      	adds	r3, #48	; 0x30
   15d96:	9303      	str	r3, [sp, #12]
   15d98:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15d9c:	2b00      	cmp	r3, #0
   15d9e:	d1e6      	bne.n	15d6e <DmConnIdByHandle+0x16>
    }
  }

  DM_TRACE_WARN1("DmConnIdByHandle not found 0x%04x", handle);
   15da0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15da4:	4619      	mov	r1, r3
   15da6:	4805      	ldr	r0, [pc, #20]	; (15dbc <DmConnIdByHandle+0x64>)
   15da8:	f7f7 fe4e 	bl	da48 <WsfTrace>

  return DM_CONN_ID_NONE;
   15dac:	2300      	movs	r3, #0
}
   15dae:	4618      	mov	r0, r3
   15db0:	b005      	add	sp, #20
   15db2:	f85d fb04 	ldr.w	pc, [sp], #4
   15db6:	bf00      	nop
   15db8:	100094a4 	.word	0x100094a4
   15dbc:	0002b9bc 	.word	0x0002b9bc

00015dc0 <DmConnInUse>:
 *
 *  \return TRUE if the connection is in use, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t DmConnInUse(dmConnId_t connId)
{
   15dc0:	b082      	sub	sp, #8
   15dc2:	4603      	mov	r3, r0
   15dc4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].inUse;
   15dc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15dcc:	1e5a      	subs	r2, r3, #1
   15dce:	4905      	ldr	r1, [pc, #20]	; (15de4 <DmConnInUse+0x24>)
   15dd0:	4613      	mov	r3, r2
   15dd2:	005b      	lsls	r3, r3, #1
   15dd4:	4413      	add	r3, r2
   15dd6:	011b      	lsls	r3, r3, #4
   15dd8:	440b      	add	r3, r1
   15dda:	3316      	adds	r3, #22
   15ddc:	781b      	ldrb	r3, [r3, #0]
}
   15dde:	4618      	mov	r0, r3
   15de0:	b002      	add	sp, #8
   15de2:	4770      	bx	lr
   15de4:	100094a4 	.word	0x100094a4

00015de8 <DmConnPeerAddrType>:
 *
 *  \return Peer address type.
 */
/*************************************************************************************************/
uint8_t DmConnPeerAddrType(dmConnId_t connId)
{
   15de8:	b082      	sub	sp, #8
   15dea:	4603      	mov	r3, r0
   15dec:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddrType;
   15df0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15df4:	1e5a      	subs	r2, r3, #1
   15df6:	4905      	ldr	r1, [pc, #20]	; (15e0c <DmConnPeerAddrType+0x24>)
   15df8:	4613      	mov	r3, r2
   15dfa:	005b      	lsls	r3, r3, #1
   15dfc:	4413      	add	r3, r2
   15dfe:	011b      	lsls	r3, r3, #4
   15e00:	440b      	add	r3, r1
   15e02:	3313      	adds	r3, #19
   15e04:	781b      	ldrb	r3, [r3, #0]
}
   15e06:	4618      	mov	r0, r3
   15e08:	b002      	add	sp, #8
   15e0a:	4770      	bx	lr
   15e0c:	100094a4 	.word	0x100094a4

00015e10 <DmConnPeerAddr>:
 *
 *  \return Pointer to peer device address.
 */
/*************************************************************************************************/
uint8_t *DmConnPeerAddr(dmConnId_t connId)
{
   15e10:	b082      	sub	sp, #8
   15e12:	4603      	mov	r3, r0
   15e14:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddr;
   15e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e1c:	1e5a      	subs	r2, r3, #1
   15e1e:	4613      	mov	r3, r2
   15e20:	005b      	lsls	r3, r3, #1
   15e22:	4413      	add	r3, r2
   15e24:	011b      	lsls	r3, r3, #4
   15e26:	4a02      	ldr	r2, [pc, #8]	; (15e30 <DmConnPeerAddr+0x20>)
   15e28:	4413      	add	r3, r2
}
   15e2a:	4618      	mov	r0, r3
   15e2c:	b002      	add	sp, #8
   15e2e:	4770      	bx	lr
   15e30:	100094a4 	.word	0x100094a4

00015e34 <DmConnLocalAddrType>:
 *
 *  \return Local address type.
 */
/*************************************************************************************************/
uint8_t DmConnLocalAddrType(dmConnId_t connId)
{
   15e34:	b082      	sub	sp, #8
   15e36:	4603      	mov	r3, r0
   15e38:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddrType;
   15e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e40:	1e5a      	subs	r2, r3, #1
   15e42:	4905      	ldr	r1, [pc, #20]	; (15e58 <DmConnLocalAddrType+0x24>)
   15e44:	4613      	mov	r3, r2
   15e46:	005b      	lsls	r3, r3, #1
   15e48:	4413      	add	r3, r2
   15e4a:	011b      	lsls	r3, r3, #4
   15e4c:	440b      	add	r3, r1
   15e4e:	3314      	adds	r3, #20
   15e50:	781b      	ldrb	r3, [r3, #0]
}
   15e52:	4618      	mov	r0, r3
   15e54:	b002      	add	sp, #8
   15e56:	4770      	bx	lr
   15e58:	100094a4 	.word	0x100094a4

00015e5c <DmConnLocalAddr>:
 *
 *  \return Pointer to local address.
 */
/*************************************************************************************************/
uint8_t *DmConnLocalAddr(dmConnId_t connId)
{
   15e5c:	b082      	sub	sp, #8
   15e5e:	4603      	mov	r3, r0
   15e60:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddr;
   15e64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e68:	1e5a      	subs	r2, r3, #1
   15e6a:	4613      	mov	r3, r2
   15e6c:	005b      	lsls	r3, r3, #1
   15e6e:	4413      	add	r3, r2
   15e70:	011b      	lsls	r3, r3, #4
   15e72:	4a03      	ldr	r2, [pc, #12]	; (15e80 <DmConnLocalAddr+0x24>)
   15e74:	4413      	add	r3, r2
   15e76:	3306      	adds	r3, #6
}
   15e78:	4618      	mov	r0, r3
   15e7a:	b002      	add	sp, #8
   15e7c:	4770      	bx	lr
   15e7e:	bf00      	nop
   15e80:	100094a4 	.word	0x100094a4

00015e84 <DmConnPeerRpa>:
*
*  \return Pointer to peer RPA.
*/
/*************************************************************************************************/
uint8_t *DmConnPeerRpa(dmConnId_t connId)
{
   15e84:	b082      	sub	sp, #8
   15e86:	4603      	mov	r3, r0
   15e88:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].peerRpa;
   15e8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15e90:	1e5a      	subs	r2, r3, #1
   15e92:	4613      	mov	r3, r2
   15e94:	005b      	lsls	r3, r3, #1
   15e96:	4413      	add	r3, r2
   15e98:	011b      	lsls	r3, r3, #4
   15e9a:	3320      	adds	r3, #32
   15e9c:	4a02      	ldr	r2, [pc, #8]	; (15ea8 <DmConnPeerRpa+0x24>)
   15e9e:	4413      	add	r3, r2
}
   15ea0:	4618      	mov	r0, r3
   15ea2:	b002      	add	sp, #8
   15ea4:	4770      	bx	lr
   15ea6:	bf00      	nop
   15ea8:	100094a4 	.word	0x100094a4

00015eac <DmConnLocalRpa>:
*
*  \return Pointer to local RPA.
*/
/*************************************************************************************************/
uint8_t *DmConnLocalRpa(dmConnId_t connId)
{
   15eac:	b082      	sub	sp, #8
   15eae:	4603      	mov	r3, r0
   15eb0:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].localRpa;
   15eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15eb8:	1e5a      	subs	r2, r3, #1
   15eba:	4613      	mov	r3, r2
   15ebc:	005b      	lsls	r3, r3, #1
   15ebe:	4413      	add	r3, r2
   15ec0:	011b      	lsls	r3, r3, #4
   15ec2:	3318      	adds	r3, #24
   15ec4:	4a02      	ldr	r2, [pc, #8]	; (15ed0 <DmConnLocalRpa+0x24>)
   15ec6:	4413      	add	r3, r2
   15ec8:	3302      	adds	r3, #2
}
   15eca:	4618      	mov	r0, r3
   15ecc:	b002      	add	sp, #8
   15ece:	4770      	bx	lr
   15ed0:	100094a4 	.word	0x100094a4

00015ed4 <DmConnSecLevel>:
 *
 *  \return Security level of the connection.
 */
/*************************************************************************************************/
uint8_t DmConnSecLevel(dmConnId_t connId)
{
   15ed4:	b082      	sub	sp, #8
   15ed6:	4603      	mov	r3, r0
   15ed8:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].secLevel;
   15edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ee0:	1e5a      	subs	r2, r3, #1
   15ee2:	4905      	ldr	r1, [pc, #20]	; (15ef8 <DmConnSecLevel+0x24>)
   15ee4:	4613      	mov	r3, r2
   15ee6:	005b      	lsls	r3, r3, #1
   15ee8:	4413      	add	r3, r2
   15eea:	011b      	lsls	r3, r3, #4
   15eec:	440b      	add	r3, r1
   15eee:	3317      	adds	r3, #23
   15ef0:	781b      	ldrb	r3, [r3, #0]
}
   15ef2:	4618      	mov	r0, r3
   15ef4:	b002      	add	sp, #8
   15ef6:	4770      	bx	lr
   15ef8:	100094a4 	.word	0x100094a4

00015efc <DmConnSetIdle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSetIdle(dmConnId_t connId, uint16_t idleMask, uint8_t idle)
{
   15efc:	b500      	push	{lr}
   15efe:	b083      	sub	sp, #12
   15f00:	4603      	mov	r3, r0
   15f02:	f88d 3007 	strb.w	r3, [sp, #7]
   15f06:	460b      	mov	r3, r1
   15f08:	f8ad 3004 	strh.w	r3, [sp, #4]
   15f0c:	4613      	mov	r3, r2
   15f0e:	f88d 3006 	strb.w	r3, [sp, #6]
  WsfTaskLock();
   15f12:	f7f7 f9bb 	bl	d28c <WsfTaskLock>

  if (DmConnInUse(connId))
   15f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f1a:	4618      	mov	r0, r3
   15f1c:	f7ff ff50 	bl	15dc0 <DmConnInUse>
   15f20:	4603      	mov	r3, r0
   15f22:	2b00      	cmp	r3, #0
   15f24:	d03e      	beq.n	15fa4 <DmConnSetIdle+0xa8>
  {
    if (idle == DM_CONN_IDLE)
   15f26:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15f2a:	2b00      	cmp	r3, #0
   15f2c:	d11f      	bne.n	15f6e <DmConnSetIdle+0x72>
    {
      /* clear bit if idle */
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   15f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f32:	1e5a      	subs	r2, r3, #1
   15f34:	4927      	ldr	r1, [pc, #156]	; (15fd4 <DmConnSetIdle+0xd8>)
   15f36:	4613      	mov	r3, r2
   15f38:	005b      	lsls	r3, r3, #1
   15f3a:	4413      	add	r3, r2
   15f3c:	011b      	lsls	r3, r3, #4
   15f3e:	440b      	add	r3, r1
   15f40:	330e      	adds	r3, #14
   15f42:	881b      	ldrh	r3, [r3, #0]
   15f44:	b21a      	sxth	r2, r3
   15f46:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   15f4a:	43db      	mvns	r3, r3
   15f4c:	b21b      	sxth	r3, r3
   15f4e:	4013      	ands	r3, r2
   15f50:	b219      	sxth	r1, r3
   15f52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f56:	1e5a      	subs	r2, r3, #1
   15f58:	b288      	uxth	r0, r1
   15f5a:	491e      	ldr	r1, [pc, #120]	; (15fd4 <DmConnSetIdle+0xd8>)
   15f5c:	4613      	mov	r3, r2
   15f5e:	005b      	lsls	r3, r3, #1
   15f60:	4413      	add	r3, r2
   15f62:	011b      	lsls	r3, r3, #4
   15f64:	440b      	add	r3, r1
   15f66:	330e      	adds	r3, #14
   15f68:	4602      	mov	r2, r0
   15f6a:	801a      	strh	r2, [r3, #0]
   15f6c:	e01a      	b.n	15fa4 <DmConnSetIdle+0xa8>
    }
    else
    {
      /* set bit if busy */
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
   15f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f72:	1e5a      	subs	r2, r3, #1
   15f74:	4917      	ldr	r1, [pc, #92]	; (15fd4 <DmConnSetIdle+0xd8>)
   15f76:	4613      	mov	r3, r2
   15f78:	005b      	lsls	r3, r3, #1
   15f7a:	4413      	add	r3, r2
   15f7c:	011b      	lsls	r3, r3, #4
   15f7e:	440b      	add	r3, r1
   15f80:	330e      	adds	r3, #14
   15f82:	8819      	ldrh	r1, [r3, #0]
   15f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f88:	1e5a      	subs	r2, r3, #1
   15f8a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15f8e:	430b      	orrs	r3, r1
   15f90:	b298      	uxth	r0, r3
   15f92:	4910      	ldr	r1, [pc, #64]	; (15fd4 <DmConnSetIdle+0xd8>)
   15f94:	4613      	mov	r3, r2
   15f96:	005b      	lsls	r3, r3, #1
   15f98:	4413      	add	r3, r2
   15f9a:	011b      	lsls	r3, r3, #4
   15f9c:	440b      	add	r3, r1
   15f9e:	330e      	adds	r3, #14
   15fa0:	4602      	mov	r2, r0
   15fa2:	801a      	strh	r2, [r3, #0]
    }
  }

  WsfTaskUnlock();
   15fa4:	f7f7 f977 	bl	d296 <WsfTaskUnlock>

  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   15fa8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15fac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15fb0:	1e5a      	subs	r2, r3, #1
   15fb2:	4808      	ldr	r0, [pc, #32]	; (15fd4 <DmConnSetIdle+0xd8>)
   15fb4:	4613      	mov	r3, r2
   15fb6:	005b      	lsls	r3, r3, #1
   15fb8:	4413      	add	r3, r2
   15fba:	011b      	lsls	r3, r3, #4
   15fbc:	4403      	add	r3, r0
   15fbe:	330e      	adds	r3, #14
   15fc0:	881b      	ldrh	r3, [r3, #0]
   15fc2:	461a      	mov	r2, r3
   15fc4:	4804      	ldr	r0, [pc, #16]	; (15fd8 <DmConnSetIdle+0xdc>)
   15fc6:	f7f7 fd3f 	bl	da48 <WsfTrace>
}
   15fca:	bf00      	nop
   15fcc:	b003      	add	sp, #12
   15fce:	f85d fb04 	ldr.w	pc, [sp], #4
   15fd2:	bf00      	nop
   15fd4:	100094a4 	.word	0x100094a4
   15fd8:	0002b9e0 	.word	0x0002b9e0

00015fdc <DmConnCheckIdle>:
 *
 *  \return Zero if connection is idle, nonzero if busy.
 */
/*************************************************************************************************/
uint16_t DmConnCheckIdle(dmConnId_t connId)
{
   15fdc:	b500      	push	{lr}
   15fde:	b085      	sub	sp, #20
   15fe0:	4603      	mov	r3, r0
   15fe2:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t idleMask;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  WsfTaskLock();
   15fe6:	f7f7 f951 	bl	d28c <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
   15fea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15fee:	1e5a      	subs	r2, r3, #1
   15ff0:	4908      	ldr	r1, [pc, #32]	; (16014 <DmConnCheckIdle+0x38>)
   15ff2:	4613      	mov	r3, r2
   15ff4:	005b      	lsls	r3, r3, #1
   15ff6:	4413      	add	r3, r2
   15ff8:	011b      	lsls	r3, r3, #4
   15ffa:	440b      	add	r3, r1
   15ffc:	330e      	adds	r3, #14
   15ffe:	881b      	ldrh	r3, [r3, #0]
   16000:	f8ad 300e 	strh.w	r3, [sp, #14]
  WsfTaskUnlock();
   16004:	f7f7 f947 	bl	d296 <WsfTaskUnlock>

  return idleMask;
   16008:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   1600c:	4618      	mov	r0, r3
   1600e:	b005      	add	sp, #20
   16010:	f85d fb04 	ldr.w	pc, [sp], #4
   16014:	100094a4 	.word	0x100094a4

00016018 <DmConnRole>:
 *
 *  \return Connection role.
 */
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
   16018:	b082      	sub	sp, #8
   1601a:	4603      	mov	r3, r0
   1601c:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
   16020:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16024:	1e5a      	subs	r2, r3, #1
   16026:	4905      	ldr	r1, [pc, #20]	; (1603c <DmConnRole+0x24>)
   16028:	4613      	mov	r3, r2
   1602a:	005b      	lsls	r3, r3, #1
   1602c:	4413      	add	r3, r2
   1602e:	011b      	lsls	r3, r3, #4
   16030:	440b      	add	r3, r1
   16032:	3319      	adds	r3, #25
   16034:	781b      	ldrb	r3, [r3, #0]
}
   16036:	4618      	mov	r0, r3
   16038:	b002      	add	sp, #8
   1603a:	4770      	bx	lr
   1603c:	100094a4 	.word	0x100094a4

00016040 <dmConnUpdateCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConnUpdateCback(dmConnCcb_t *pCcb, uint8_t status)
{
   16040:	b500      	push	{lr}
   16042:	b087      	sub	sp, #28
   16044:	9001      	str	r0, [sp, #4]
   16046:	460b      	mov	r3, r1
   16048:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeConnUpdateCmplEvt_t  evt;

  /* call callback */
  evt.hdr.event = DM_CONN_UPDATE_IND;
   1604c:	2329      	movs	r3, #41	; 0x29
   1604e:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   16052:	9b01      	ldr	r3, [sp, #4]
   16054:	7c1b      	ldrb	r3, [r3, #16]
   16056:	b29b      	uxth	r3, r3
   16058:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.status = evt.hdr.status = status;
   1605c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16060:	f88d 300b 	strb.w	r3, [sp, #11]
   16064:	f89d 300b 	ldrb.w	r3, [sp, #11]
   16068:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pCcb->handle;
   1606c:	9b01      	ldr	r3, [sp, #4]
   1606e:	899b      	ldrh	r3, [r3, #12]
   16070:	f8ad 300e 	strh.w	r3, [sp, #14]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   16074:	4b04      	ldr	r3, [pc, #16]	; (16088 <dmConnUpdateCback+0x48>)
   16076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1607a:	aa02      	add	r2, sp, #8
   1607c:	4610      	mov	r0, r2
   1607e:	4798      	blx	r3
}
   16080:	bf00      	nop
   16082:	b007      	add	sp, #28
   16084:	f85d fb04 	ldr.w	pc, [sp], #4
   16088:	100094a4 	.word	0x100094a4

0001608c <dmConnSmActUpdateSlave>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActUpdateSlave(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1608c:	b500      	push	{lr}
   1608e:	b083      	sub	sp, #12
   16090:	9001      	str	r0, [sp, #4]
   16092:	9100      	str	r1, [sp, #0]
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   16094:	9b01      	ldr	r3, [sp, #4]
   16096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16098:	f003 0302 	and.w	r3, r3, #2
   1609c:	2b00      	cmp	r3, #0
   1609e:	d00f      	beq.n	160c0 <dmConnSmActUpdateSlave+0x34>
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
   160a0:	f009 fa6a 	bl	1f578 <HciGetLeSupFeat>
   160a4:	4603      	mov	r3, r0
   160a6:	f003 0302 	and.w	r3, r3, #2
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   160aa:	2b00      	cmp	r3, #0
   160ac:	d008      	beq.n	160c0 <dmConnSmActUpdateSlave+0x34>
  {
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   160ae:	9b01      	ldr	r3, [sp, #4]
   160b0:	899a      	ldrh	r2, [r3, #12]
   160b2:	9b00      	ldr	r3, [sp, #0]
   160b4:	3304      	adds	r3, #4
   160b6:	4619      	mov	r1, r3
   160b8:	4610      	mov	r0, r2
   160ba:	f007 fee1 	bl	1de80 <HciLeConnUpdateCmd>
  else
  {
    /* call callback */
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
  }
}
   160be:	e013      	b.n	160e8 <dmConnSmActUpdateSlave+0x5c>
  else if (!pCcb->updating)
   160c0:	9b01      	ldr	r3, [sp, #4]
   160c2:	7c5b      	ldrb	r3, [r3, #17]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d10b      	bne.n	160e0 <dmConnSmActUpdateSlave+0x54>
    pCcb->updating = TRUE;
   160c8:	9b01      	ldr	r3, [sp, #4]
   160ca:	2201      	movs	r2, #1
   160cc:	745a      	strb	r2, [r3, #17]
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   160ce:	9b01      	ldr	r3, [sp, #4]
   160d0:	899a      	ldrh	r2, [r3, #12]
   160d2:	9b00      	ldr	r3, [sp, #0]
   160d4:	3304      	adds	r3, #4
   160d6:	4619      	mov	r1, r3
   160d8:	4610      	mov	r0, r2
   160da:	f7f6 fc19 	bl	c910 <L2cDmConnUpdateReq>
}
   160de:	e003      	b.n	160e8 <dmConnSmActUpdateSlave+0x5c>
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
   160e0:	210c      	movs	r1, #12
   160e2:	9801      	ldr	r0, [sp, #4]
   160e4:	f7ff ffac 	bl	16040 <dmConnUpdateCback>
}
   160e8:	bf00      	nop
   160ea:	b003      	add	sp, #12
   160ec:	f85d fb04 	ldr.w	pc, [sp], #4

000160f0 <dmConnSmActL2cUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateCnf(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   160f0:	b500      	push	{lr}
   160f2:	b083      	sub	sp, #12
   160f4:	9001      	str	r0, [sp, #4]
   160f6:	9100      	str	r1, [sp, #0]
  /* if connection update in progress */
  if (pCcb->updating)
   160f8:	9b01      	ldr	r3, [sp, #4]
   160fa:	7c5b      	ldrb	r3, [r3, #17]
   160fc:	2b00      	cmp	r3, #0
   160fe:	d00d      	beq.n	1611c <dmConnSmActL2cUpdateCnf+0x2c>
  {
    pCcb->updating = FALSE;
   16100:	9b01      	ldr	r3, [sp, #4]
   16102:	2200      	movs	r2, #0
   16104:	745a      	strb	r2, [r3, #17]

    /* if reason indicates failure */
    if (pMsg->l2cUpdateCnf.result != L2C_CONN_PARAM_ACCEPTED)
   16106:	9b00      	ldr	r3, [sp, #0]
   16108:	889b      	ldrh	r3, [r3, #4]
   1610a:	2b00      	cmp	r3, #0
   1610c:	d006      	beq.n	1611c <dmConnSmActL2cUpdateCnf+0x2c>
    {
      /* call callback */
      dmConnUpdateCback(pCcb, (uint8_t) pMsg->l2cUpdateCnf.result);
   1610e:	9b00      	ldr	r3, [sp, #0]
   16110:	889b      	ldrh	r3, [r3, #4]
   16112:	b2db      	uxtb	r3, r3
   16114:	4619      	mov	r1, r3
   16116:	9801      	ldr	r0, [sp, #4]
   16118:	f7ff ff92 	bl	16040 <dmConnUpdateCback>
    }
  }
}
   1611c:	bf00      	nop
   1611e:	b003      	add	sp, #12
   16120:	f85d fb04 	ldr.w	pc, [sp], #4

00016124 <DmL2cConnUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateCnf(uint16_t handle, uint16_t result)
{
   16124:	b500      	push	{lr}
   16126:	b087      	sub	sp, #28
   16128:	4603      	mov	r3, r0
   1612a:	460a      	mov	r2, r1
   1612c:	f8ad 3006 	strh.w	r3, [sp, #6]
   16130:	4613      	mov	r3, r2
   16132:	f8ad 3004 	strh.w	r3, [sp, #4]
  dmConnL2cUpdateCnf_t  updateCnf;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   16136:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1613a:	4618      	mov	r0, r3
   1613c:	f7fe ff76 	bl	1502c <dmConnCcbByHandle>
   16140:	9005      	str	r0, [sp, #20]
   16142:	9b05      	ldr	r3, [sp, #20]
   16144:	2b00      	cmp	r3, #0
   16146:	d00b      	beq.n	16160 <DmL2cConnUpdateCnf+0x3c>
  {
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   16148:	2336      	movs	r3, #54	; 0x36
   1614a:	f88d 300e 	strb.w	r3, [sp, #14]
    updateCnf.result = result;
   1614e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16152:	f8ad 3010 	strh.w	r3, [sp, #16]

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   16156:	ab03      	add	r3, sp, #12
   16158:	4619      	mov	r1, r3
   1615a:	9805      	ldr	r0, [sp, #20]
   1615c:	f000 f89c 	bl	16298 <dmConnSmExecute>
  }
}
   16160:	bf00      	nop
   16162:	b007      	add	sp, #28
   16164:	f85d fb04 	ldr.w	pc, [sp], #4

00016168 <DmL2cCmdRejInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cCmdRejInd(uint16_t handle, uint16_t result)
{
   16168:	b500      	push	{lr}
   1616a:	b085      	sub	sp, #20
   1616c:	4603      	mov	r3, r0
   1616e:	460a      	mov	r2, r1
   16170:	f8ad 3006 	strh.w	r3, [sp, #6]
   16174:	4613      	mov	r3, r2
   16176:	f8ad 3004 	strh.w	r3, [sp, #4]
  dmL2cCmdRejEvt_t  evt;

  /* call callback */
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   1617a:	2363      	movs	r3, #99	; 0x63
   1617c:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.status = HCI_SUCCESS;
   16180:	2300      	movs	r3, #0
   16182:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.reason = result;
   16186:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1618a:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.handle = handle;
   1618e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16192:	f8ad 300e 	strh.w	r3, [sp, #14]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   16196:	4b05      	ldr	r3, [pc, #20]	; (161ac <DmL2cCmdRejInd+0x44>)
   16198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1619c:	aa02      	add	r2, sp, #8
   1619e:	4610      	mov	r0, r2
   161a0:	4798      	blx	r3
}
   161a2:	bf00      	nop
   161a4:	b005      	add	sp, #20
   161a6:	f85d fb04 	ldr.w	pc, [sp], #4
   161aa:	bf00      	nop
   161ac:	100094a4 	.word	0x100094a4

000161b0 <DmConnAccept>:
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t DmConnAccept(uint8_t clientId, uint8_t advHandle, uint8_t advType, uint16_t duration,
                        uint8_t maxEaEvents, uint8_t addrType, uint8_t *pAddr)
{
   161b0:	b510      	push	{r4, lr}
   161b2:	b088      	sub	sp, #32
   161b4:	4604      	mov	r4, r0
   161b6:	4608      	mov	r0, r1
   161b8:	4611      	mov	r1, r2
   161ba:	461a      	mov	r2, r3
   161bc:	4623      	mov	r3, r4
   161be:	f88d 301f 	strb.w	r3, [sp, #31]
   161c2:	4603      	mov	r3, r0
   161c4:	f88d 301e 	strb.w	r3, [sp, #30]
   161c8:	460b      	mov	r3, r1
   161ca:	f88d 301d 	strb.w	r3, [sp, #29]
   161ce:	4613      	mov	r3, r2
   161d0:	f8ad 301a 	strh.w	r3, [sp, #26]
  return dmConnOpenAccept(clientId, 0, advHandle, advType, duration, maxEaEvents, addrType, pAddr,
   161d4:	f89d 101d 	ldrb.w	r1, [sp, #29]
   161d8:	f89d 201e 	ldrb.w	r2, [sp, #30]
   161dc:	f89d 001f 	ldrb.w	r0, [sp, #31]
   161e0:	2301      	movs	r3, #1
   161e2:	9304      	str	r3, [sp, #16]
   161e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   161e6:	9303      	str	r3, [sp, #12]
   161e8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   161ec:	9302      	str	r3, [sp, #8]
   161ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   161f2:	9301      	str	r3, [sp, #4]
   161f4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   161f8:	9300      	str	r3, [sp, #0]
   161fa:	460b      	mov	r3, r1
   161fc:	2100      	movs	r1, #0
   161fe:	f7fe ffe9 	bl	151d4 <dmConnOpenAccept>
   16202:	4603      	mov	r3, r0
                          DM_ROLE_SLAVE);
}
   16204:	4618      	mov	r0, r3
   16206:	b008      	add	sp, #32
   16208:	bd10      	pop	{r4, pc}

0001620a <dmConnSmActAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1620a:	b500      	push	{lr}
   1620c:	b083      	sub	sp, #12
   1620e:	9001      	str	r0, [sp, #4]
   16210:	9100      	str	r1, [sp, #0]
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   16212:	9b00      	ldr	r3, [sp, #0]
   16214:	7998      	ldrb	r0, [r3, #6]
   16216:	9b00      	ldr	r3, [sp, #0]
   16218:	8919      	ldrh	r1, [r3, #8]
   1621a:	9b00      	ldr	r3, [sp, #0]
   1621c:	7c5a      	ldrb	r2, [r3, #17]
                     pMsg->apiOpen.peerAddr);
   1621e:	9b00      	ldr	r3, [sp, #0]
   16220:	330b      	adds	r3, #11
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   16222:	f7fe fdb9 	bl	14d98 <dmAdvStartDirected>
}
   16226:	bf00      	nop
   16228:	b003      	add	sp, #12
   1622a:	f85d fb04 	ldr.w	pc, [sp], #4

0001622e <dmConnSmActCancelAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1622e:	b500      	push	{lr}
   16230:	b083      	sub	sp, #12
   16232:	9001      	str	r0, [sp, #4]
   16234:	9100      	str	r1, [sp, #0]
  dmAdvStopDirected();
   16236:	f7fe fde9 	bl	14e0c <dmAdvStopDirected>

  dmConnSmActConnFailed(pCcb, pMsg);
   1623a:	9900      	ldr	r1, [sp, #0]
   1623c:	9801      	ldr	r0, [sp, #4]
   1623e:	f7ff f8d3 	bl	153e8 <dmConnSmActConnFailed>
}
   16242:	bf00      	nop
   16244:	b003      	add	sp, #12
   16246:	f85d fb04 	ldr.w	pc, [sp], #4

0001624a <dmConnSmActConnAccepted>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnAccepted(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1624a:	b500      	push	{lr}
   1624c:	b083      	sub	sp, #12
   1624e:	9001      	str	r0, [sp, #4]
   16250:	9100      	str	r1, [sp, #0]
  dmAdvConnected();
   16252:	f7fe fe03 	bl	14e5c <dmAdvConnected>

  dmConnSmActConnOpened(pCcb, pMsg);
   16256:	9900      	ldr	r1, [sp, #0]
   16258:	9801      	ldr	r0, [sp, #4]
   1625a:	f7ff f84d 	bl	152f8 <dmConnSmActConnOpened>
}
   1625e:	bf00      	nop
   16260:	b003      	add	sp, #12
   16262:	f85d fb04 	ldr.w	pc, [sp], #4

00016266 <dmConnSmActAcceptFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAcceptFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   16266:	b500      	push	{lr}
   16268:	b083      	sub	sp, #12
   1626a:	9001      	str	r0, [sp, #4]
   1626c:	9100      	str	r1, [sp, #0]
  dmAdvConnectFailed();
   1626e:	f7fe fe11 	bl	14e94 <dmAdvConnectFailed>

  dmConnSmActConnFailed(pCcb, pMsg);
   16272:	9900      	ldr	r1, [sp, #0]
   16274:	9801      	ldr	r0, [sp, #4]
   16276:	f7ff f8b7 	bl	153e8 <dmConnSmActConnFailed>
}
   1627a:	bf00      	nop
   1627c:	b003      	add	sp, #12
   1627e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00016284 <DmConnSlaveInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSlaveInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_SLAVE] = (dmConnAct_t *) dmConnActSetSlave;
   16284:	4b02      	ldr	r3, [pc, #8]	; (16290 <DmConnSlaveInit+0xc>)
   16286:	4a03      	ldr	r2, [pc, #12]	; (16294 <DmConnSlaveInit+0x10>)
   16288:	609a      	str	r2, [r3, #8]
}
   1628a:	bf00      	nop
   1628c:	4770      	bx	lr
   1628e:	bf00      	nop
   16290:	10009558 	.word	0x10009558
   16294:	0002c2b8 	.word	0x0002c2b8

00016298 <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   16298:	b500      	push	{lr}
   1629a:	b085      	sub	sp, #20
   1629c:	9001      	str	r0, [sp, #4]
   1629e:	9100      	str	r1, [sp, #0]
  dmConnAct_t       *actSet;
  uint8_t           action;
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   162a0:	9b00      	ldr	r3, [sp, #0]
   162a2:	789b      	ldrb	r3, [r3, #2]
   162a4:	4619      	mov	r1, r3
   162a6:	9b01      	ldr	r3, [sp, #4]
   162a8:	7d5b      	ldrb	r3, [r3, #21]
   162aa:	461a      	mov	r2, r3
   162ac:	4824      	ldr	r0, [pc, #144]	; (16340 <dmConnSmExecute+0xa8>)
   162ae:	f7f7 fbcb 	bl	da48 <WsfTrace>

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);
   162b2:	9b00      	ldr	r3, [sp, #0]
   162b4:	789b      	ldrb	r3, [r3, #2]
   162b6:	f003 030f 	and.w	r3, r3, #15
   162ba:	f88d 300f 	strb.w	r3, [sp, #15]

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   162be:	9b01      	ldr	r3, [sp, #4]
   162c0:	7d5b      	ldrb	r3, [r3, #21]
   162c2:	461a      	mov	r2, r3
   162c4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   162c8:	481e      	ldr	r0, [pc, #120]	; (16344 <dmConnSmExecute+0xac>)
   162ca:	4613      	mov	r3, r2
   162cc:	005b      	lsls	r3, r3, #1
   162ce:	4413      	add	r3, r2
   162d0:	009b      	lsls	r3, r3, #2
   162d2:	4413      	add	r3, r2
   162d4:	440b      	add	r3, r1
   162d6:	005b      	lsls	r3, r3, #1
   162d8:	4403      	add	r3, r0
   162da:	785b      	ldrb	r3, [r3, #1]
   162dc:	f88d 300e 	strb.w	r3, [sp, #14]

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   162e0:	9b01      	ldr	r3, [sp, #4]
   162e2:	7d5b      	ldrb	r3, [r3, #21]
   162e4:	461a      	mov	r2, r3
   162e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   162ea:	4816      	ldr	r0, [pc, #88]	; (16344 <dmConnSmExecute+0xac>)
   162ec:	4613      	mov	r3, r2
   162ee:	005b      	lsls	r3, r3, #1
   162f0:	4413      	add	r3, r2
   162f2:	009b      	lsls	r3, r3, #2
   162f4:	4413      	add	r3, r2
   162f6:	440b      	add	r3, r1
   162f8:	f810 2013 	ldrb.w	r2, [r0, r3, lsl #1]
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	755a      	strb	r2, [r3, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
   16300:	f89d 300e 	ldrb.w	r3, [sp, #14]
   16304:	091b      	lsrs	r3, r3, #4
   16306:	b2db      	uxtb	r3, r3
   16308:	461a      	mov	r2, r3
   1630a:	4b0f      	ldr	r3, [pc, #60]	; (16348 <dmConnSmExecute+0xb0>)
   1630c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16310:	9302      	str	r3, [sp, #8]

  /* if action set present */
  if (actSet != NULL)
   16312:	9b02      	ldr	r3, [sp, #8]
   16314:	2b00      	cmp	r3, #0
   16316:	d00b      	beq.n	16330 <dmConnSmExecute+0x98>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   16318:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1631c:	f003 030f 	and.w	r3, r3, #15
   16320:	009b      	lsls	r3, r3, #2
   16322:	9a02      	ldr	r2, [sp, #8]
   16324:	4413      	add	r3, r2
   16326:	681b      	ldr	r3, [r3, #0]
   16328:	9900      	ldr	r1, [sp, #0]
   1632a:	9801      	ldr	r0, [sp, #4]
   1632c:	4798      	blx	r3
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
   1632e:	e003      	b.n	16338 <dmConnSmExecute+0xa0>
     dmConnSmActNone(pCcb, pMsg);
   16330:	9900      	ldr	r1, [sp, #0]
   16332:	9801      	ldr	r0, [sp, #4]
   16334:	f7fe ffca 	bl	152cc <dmConnSmActNone>
}
   16338:	bf00      	nop
   1633a:	b005      	add	sp, #20
   1633c:	f85d fb04 	ldr.w	pc, [sp], #4
   16340:	0002b9fc 	.word	0x0002b9fc
   16344:	0002c2d0 	.word	0x0002c2d0
   16348:	10009558 	.word	0x10009558

0001634c <dmDevActReset>:
 *
 *  \return None.
*/
/*************************************************************************************************/
void dmDevActReset(wsfMsgHdr_t *pMsg)
{
   1634c:	b500      	push	{lr}
   1634e:	b085      	sub	sp, #20
   16350:	9001      	str	r0, [sp, #4]
  uint8_t i;

  /* if DM not resetting */
  if (!dmCb.resetting)
   16352:	4b10      	ldr	r3, [pc, #64]	; (16394 <dmDevActReset+0x48>)
   16354:	7c1b      	ldrb	r3, [r3, #16]
   16356:	2b00      	cmp	r3, #0
   16358:	d118      	bne.n	1638c <dmDevActReset+0x40>
  {
    /* set resetting state */
    dmCb.resetting = TRUE;
   1635a:	4b0e      	ldr	r3, [pc, #56]	; (16394 <dmDevActReset+0x48>)
   1635c:	2201      	movs	r2, #1
   1635e:	741a      	strb	r2, [r3, #16]

    /* for each DM component */
    for (i = 0; i < DM_NUM_IDS; i++)
   16360:	2300      	movs	r3, #0
   16362:	f88d 300f 	strb.w	r3, [sp, #15]
   16366:	e00b      	b.n	16380 <dmDevActReset+0x34>
    {
      /* call component's reset function */
      (*(dmFcnIfTbl[i]->reset))();
   16368:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1636c:	4a0a      	ldr	r2, [pc, #40]	; (16398 <dmDevActReset+0x4c>)
   1636e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16372:	681b      	ldr	r3, [r3, #0]
   16374:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
   16376:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1637a:	3301      	adds	r3, #1
   1637c:	f88d 300f 	strb.w	r3, [sp, #15]
   16380:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16384:	2b0d      	cmp	r3, #13
   16386:	d9ef      	bls.n	16368 <dmDevActReset+0x1c>
    }

    /* start HCI reset sequence */
    HciResetSequence();
   16388:	f008 ff38 	bl	1f1fc <HciResetSequence>
  }
}
   1638c:	bf00      	nop
   1638e:	b005      	add	sp, #20
   16390:	f85d fb04 	ldr.w	pc, [sp], #4
   16394:	10009568 	.word	0x10009568
   16398:	10002b78 	.word	0x10002b78

0001639c <dmDevHciEvtReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtReset(hciEvt_t *pEvent)
{
   1639c:	b500      	push	{lr}
   1639e:	b083      	sub	sp, #12
   163a0:	9001      	str	r0, [sp, #4]
  /* reset resetting state */
  dmCb.resetting = FALSE;
   163a2:	4b07      	ldr	r3, [pc, #28]	; (163c0 <dmDevHciEvtReset+0x24>)
   163a4:	2200      	movs	r2, #0
   163a6:	741a      	strb	r2, [r3, #16]

  pEvent->hdr.event = DM_RESET_CMPL_IND;
   163a8:	9b01      	ldr	r3, [sp, #4]
   163aa:	2220      	movs	r2, #32
   163ac:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   163ae:	4b04      	ldr	r3, [pc, #16]	; (163c0 <dmDevHciEvtReset+0x24>)
   163b0:	689b      	ldr	r3, [r3, #8]
   163b2:	9801      	ldr	r0, [sp, #4]
   163b4:	4798      	blx	r3
}
   163b6:	bf00      	nop
   163b8:	b003      	add	sp, #12
   163ba:	f85d fb04 	ldr.w	pc, [sp], #4
   163be:	bf00      	nop
   163c0:	10009568 	.word	0x10009568

000163c4 <dmDevHciEvtVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtVendorSpec(hciEvt_t *pEvent)
{
   163c4:	b500      	push	{lr}
   163c6:	b083      	sub	sp, #12
   163c8:	9001      	str	r0, [sp, #4]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   163ca:	9b01      	ldr	r3, [sp, #4]
   163cc:	2266      	movs	r2, #102	; 0x66
   163ce:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   163d0:	4b03      	ldr	r3, [pc, #12]	; (163e0 <dmDevHciEvtVendorSpec+0x1c>)
   163d2:	689b      	ldr	r3, [r3, #8]
   163d4:	9801      	ldr	r0, [sp, #4]
   163d6:	4798      	blx	r3
}
   163d8:	bf00      	nop
   163da:	b003      	add	sp, #12
   163dc:	f85d fb04 	ldr.w	pc, [sp], #4
   163e0:	10009568 	.word	0x10009568

000163e4 <dmDevHciEvtHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtHwError(hciEvt_t *pEvent)
{
   163e4:	b500      	push	{lr}
   163e6:	b083      	sub	sp, #12
   163e8:	9001      	str	r0, [sp, #4]
  pEvent->hdr.event = DM_HW_ERROR_IND;
   163ea:	9b01      	ldr	r3, [sp, #4]
   163ec:	2265      	movs	r2, #101	; 0x65
   163ee:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   163f0:	4b03      	ldr	r3, [pc, #12]	; (16400 <dmDevHciEvtHwError+0x1c>)
   163f2:	689b      	ldr	r3, [r3, #8]
   163f4:	9801      	ldr	r0, [sp, #4]
   163f6:	4798      	blx	r3
}
   163f8:	bf00      	nop
   163fa:	b003      	add	sp, #12
   163fc:	f85d fb04 	ldr.w	pc, [sp], #4
   16400:	10009568 	.word	0x10009568

00016404 <dmDevHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
   16404:	b500      	push	{lr}
   16406:	b083      	sub	sp, #12
   16408:	9001      	str	r0, [sp, #4]
  switch (pEvent->hdr.event)
   1640a:	9b01      	ldr	r3, [sp, #4]
   1640c:	789b      	ldrb	r3, [r3, #2]
   1640e:	2b14      	cmp	r3, #20
   16410:	d00e      	beq.n	16430 <dmDevHciHandler+0x2c>
   16412:	2b14      	cmp	r3, #20
   16414:	dc10      	bgt.n	16438 <dmDevHciHandler+0x34>
   16416:	2b00      	cmp	r3, #0
   16418:	d002      	beq.n	16420 <dmDevHciHandler+0x1c>
   1641a:	2b13      	cmp	r3, #19
   1641c:	d004      	beq.n	16428 <dmDevHciHandler+0x24>
      dmDevHciEvtHwError(pEvent);
      break;

    default:
      /* ignore event */
      break;
   1641e:	e00b      	b.n	16438 <dmDevHciHandler+0x34>
      dmDevHciEvtReset(pEvent);
   16420:	9801      	ldr	r0, [sp, #4]
   16422:	f7ff ffbb 	bl	1639c <dmDevHciEvtReset>
      break;
   16426:	e008      	b.n	1643a <dmDevHciHandler+0x36>
      dmDevHciEvtVendorSpec(pEvent);
   16428:	9801      	ldr	r0, [sp, #4]
   1642a:	f7ff ffcb 	bl	163c4 <dmDevHciEvtVendorSpec>
      break;
   1642e:	e004      	b.n	1643a <dmDevHciHandler+0x36>
      dmDevHciEvtHwError(pEvent);
   16430:	9801      	ldr	r0, [sp, #4]
   16432:	f7ff ffd7 	bl	163e4 <dmDevHciEvtHwError>
      break;
   16436:	e000      	b.n	1643a <dmDevHciHandler+0x36>
      break;
   16438:	bf00      	nop
  }
}
   1643a:	bf00      	nop
   1643c:	b003      	add	sp, #12
   1643e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00016444 <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
   16444:	b500      	push	{lr}
   16446:	b083      	sub	sp, #12
   16448:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
   1644a:	4b03      	ldr	r3, [pc, #12]	; (16458 <dmDevMsgHandler+0x14>)
   1644c:	9801      	ldr	r0, [sp, #4]
   1644e:	4798      	blx	r3
}
   16450:	bf00      	nop
   16452:	b003      	add	sp, #12
   16454:	f85d fb04 	ldr.w	pc, [sp], #4
   16458:	0001634d 	.word	0x0001634d

0001645c <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
   1645c:	b510      	push	{r4, lr}
   1645e:	b084      	sub	sp, #16
   16460:	4604      	mov	r4, r0
   16462:	4608      	mov	r0, r1
   16464:	4611      	mov	r1, r2
   16466:	461a      	mov	r2, r3
   16468:	4623      	mov	r3, r4
   1646a:	f88d 3007 	strb.w	r3, [sp, #7]
   1646e:	4603      	mov	r3, r0
   16470:	f88d 3006 	strb.w	r3, [sp, #6]
   16474:	460b      	mov	r3, r1
   16476:	f88d 3005 	strb.w	r3, [sp, #5]
   1647a:	4613      	mov	r3, r2
   1647c:	f88d 3004 	strb.w	r3, [sp, #4]
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);
   16480:	f89d 1007 	ldrb.w	r1, [sp, #7]
   16484:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16488:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1648c:	480e      	ldr	r0, [pc, #56]	; (164c8 <dmDevPassEvtToDevPriv+0x6c>)
   1648e:	f7f7 fadb 	bl	da48 <WsfTrace>

  /* build event */
  evt.hdr.event = event;
   16492:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16496:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = param;
   1649a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1649e:	b29b      	uxth	r3, r3
   164a0:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.privCtrl.advHandle = advHandle;
   164a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   164a8:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.privCtrl.connectable = connectable;
   164ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   164b0:	f88d 300d 	strb.w	r3, [sp, #13]

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   164b4:	4b05      	ldr	r3, [pc, #20]	; (164cc <dmDevPassEvtToDevPriv+0x70>)
   164b6:	685b      	ldr	r3, [r3, #4]
   164b8:	689b      	ldr	r3, [r3, #8]
   164ba:	aa02      	add	r2, sp, #8
   164bc:	4610      	mov	r0, r2
   164be:	4798      	blx	r3
}
   164c0:	bf00      	nop
   164c2:	b004      	add	sp, #16
   164c4:	bd10      	pop	{r4, pc}
   164c6:	bf00      	nop
   164c8:	0002ba20 	.word	0x0002ba20
   164cc:	10002b78 	.word	0x10002b78

000164d0 <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
   164d0:	b500      	push	{lr}
   164d2:	b085      	sub	sp, #20
   164d4:	4603      	mov	r3, r0
   164d6:	460a      	mov	r2, r1
   164d8:	f88d 3007 	strb.w	r3, [sp, #7]
   164dc:	4613      	mov	r3, r2
   164de:	f88d 3006 	strb.w	r3, [sp, #6]
  wsfMsgHdr_t evt;

  /* build event */
  evt.event = DM_CONN_CTE_MSG_STATE;
   164e2:	23d7      	movs	r3, #215	; 0xd7
   164e4:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.status = state;
   164e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   164ec:	f88d 300f 	strb.w	r3, [sp, #15]
  evt.param = connId;
   164f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   164f4:	b29b      	uxth	r3, r3
   164f6:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   164fa:	4b05      	ldr	r3, [pc, #20]	; (16510 <dmDevPassEvtToConnCte+0x40>)
   164fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   164fe:	689b      	ldr	r3, [r3, #8]
   16500:	aa03      	add	r2, sp, #12
   16502:	4610      	mov	r0, r2
   16504:	4798      	blx	r3
}
   16506:	bf00      	nop
   16508:	b005      	add	sp, #20
   1650a:	f85d fb04 	ldr.w	pc, [sp], #4
   1650e:	bf00      	nop
   16510:	10002b78 	.word	0x10002b78

00016514 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
   16514:	b500      	push	{lr}
   16516:	b083      	sub	sp, #12
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   16518:	2004      	movs	r0, #4
   1651a:	f7f6 fe2b 	bl	d174 <WsfMsgAlloc>
   1651e:	9001      	str	r0, [sp, #4]
   16520:	9b01      	ldr	r3, [sp, #4]
   16522:	2b00      	cmp	r3, #0
   16524:	d008      	beq.n	16538 <DmDevReset+0x24>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;
   16526:	9b01      	ldr	r3, [sp, #4]
   16528:	2270      	movs	r2, #112	; 0x70
   1652a:	709a      	strb	r2, [r3, #2]

    WsfMsgSend(dmCb.handlerId, pMsg);
   1652c:	4b04      	ldr	r3, [pc, #16]	; (16540 <DmDevReset+0x2c>)
   1652e:	7b1b      	ldrb	r3, [r3, #12]
   16530:	9901      	ldr	r1, [sp, #4]
   16532:	4618      	mov	r0, r3
   16534:	f7f6 fe42 	bl	d1bc <WsfMsgSend>
  }
}
   16538:	bf00      	nop
   1653a:	b003      	add	sp, #12
   1653c:	f85d fb04 	ldr.w	pc, [sp], #4
   16540:	10009568 	.word	0x10009568

00016544 <DmDevWhiteListAdd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevWhiteListAdd(uint8_t addrType, uint8_t *pAddr)
{
   16544:	b500      	push	{lr}
   16546:	b083      	sub	sp, #12
   16548:	4603      	mov	r3, r0
   1654a:	9100      	str	r1, [sp, #0]
   1654c:	f88d 3007 	strb.w	r3, [sp, #7]
  HciLeAddDevWhiteListCmd(addrType, pAddr);
   16550:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16554:	9900      	ldr	r1, [sp, #0]
   16556:	4618      	mov	r0, r3
   16558:	f007 fc5a 	bl	1de10 <HciLeAddDevWhiteListCmd>
}
   1655c:	bf00      	nop
   1655e:	b003      	add	sp, #12
   16560:	f85d fb04 	ldr.w	pc, [sp], #4

00016564 <DmDevWhiteListClear>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevWhiteListClear(void)
{
   16564:	b508      	push	{r3, lr}
  HciLeClearWhiteListCmd();
   16566:	f007 fc79 	bl	1de5c <HciLeClearWhiteListCmd>
}
   1656a:	bf00      	nop
   1656c:	bd08      	pop	{r3, pc}
	...

00016570 <dmDevSetFilterPolicy>:
 *
 *  \return TRUE if the filter policy was successfully set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t dmDevSetFilterPolicy(uint8_t advHandle, uint8_t mode, uint8_t policy)
{
   16570:	b084      	sub	sp, #16
   16572:	4603      	mov	r3, r0
   16574:	f88d 3007 	strb.w	r3, [sp, #7]
   16578:	460b      	mov	r3, r1
   1657a:	f88d 3006 	strb.w	r3, [sp, #6]
   1657e:	4613      	mov	r3, r2
   16580:	f88d 3005 	strb.w	r3, [sp, #5]
  bool_t policySet = FALSE;
   16584:	2300      	movs	r3, #0
   16586:	f88d 300f 	strb.w	r3, [sp, #15]

  switch (mode)
   1658a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1658e:	2b03      	cmp	r3, #3
   16590:	d848      	bhi.n	16624 <dmDevSetFilterPolicy+0xb4>
   16592:	a201      	add	r2, pc, #4	; (adr r2, 16598 <dmDevSetFilterPolicy+0x28>)
   16594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16598:	000165a9 	.word	0x000165a9
   1659c:	000165c7 	.word	0x000165c7
   165a0:	000165df 	.word	0x000165df
   165a4:	000165f7 	.word	0x000165f7
  {
    case DM_FILT_POLICY_MODE_ADV:
      /* if Advertising filter policy is valid */
      if (policy <= HCI_ADV_FILT_ALL)
   165a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   165ac:	2b03      	cmp	r3, #3
   165ae:	d83b      	bhi.n	16628 <dmDevSetFilterPolicy+0xb8>
      {
        WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

        /* update the filter policy */
        dmCb.advFiltPolicy[advHandle] = policy;
   165b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   165b4:	4a22      	ldr	r2, [pc, #136]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   165b6:	4413      	add	r3, r2
   165b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   165bc:	745a      	strb	r2, [r3, #17]
        policySet = TRUE;
   165be:	2301      	movs	r3, #1
   165c0:	f88d 300f 	strb.w	r3, [sp, #15]
      }
      break;
   165c4:	e030      	b.n	16628 <dmDevSetFilterPolicy+0xb8>

    case DM_FILT_POLICY_MODE_SCAN:
      /* if Scanning filter policy is valid */
      if (policy <= HCI_FILT_WHITE_LIST_RES_INIT)
   165c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   165ca:	2b03      	cmp	r3, #3
   165cc:	d82e      	bhi.n	1662c <dmDevSetFilterPolicy+0xbc>
      {
        /* update the filter policy */
        dmCb.scanFiltPolicy = policy;
   165ce:	4a1c      	ldr	r2, [pc, #112]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   165d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   165d4:	7493      	strb	r3, [r2, #18]
        policySet = TRUE;
   165d6:	2301      	movs	r3, #1
   165d8:	f88d 300f 	strb.w	r3, [sp, #15]
      }
      break;
   165dc:	e026      	b.n	1662c <dmDevSetFilterPolicy+0xbc>

    case DM_FILT_POLICY_MODE_INIT:
      /* if Initiator filter policy is valid */
      if (policy <= HCI_FILT_WHITE_LIST)
   165de:	f89d 3005 	ldrb.w	r3, [sp, #5]
   165e2:	2b01      	cmp	r3, #1
   165e4:	d824      	bhi.n	16630 <dmDevSetFilterPolicy+0xc0>
      {
        /* update the filter policy */
        dmCb.initFiltPolicy = policy;
   165e6:	4a16      	ldr	r2, [pc, #88]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   165e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   165ec:	74d3      	strb	r3, [r2, #19]
        policySet = TRUE;
   165ee:	2301      	movs	r3, #1
   165f0:	f88d 300f 	strb.w	r3, [sp, #15]
      }
      break;
   165f4:	e01c      	b.n	16630 <dmDevSetFilterPolicy+0xc0>

    case DM_FILT_POLICY_MODE_SYNC:
      /* if Synchronization filter policy is valid */
      if (policy <= HCI_FILT_PER_ADV_LIST)
   165f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   165fa:	2b01      	cmp	r3, #1
   165fc:	d81a      	bhi.n	16634 <dmDevSetFilterPolicy+0xc4>
      {
        /* clear the filter policy bit */
        dmCb.syncOptions &= ~HCI_OPTIONS_FILT_POLICY_BIT;
   165fe:	4b10      	ldr	r3, [pc, #64]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   16600:	7d1b      	ldrb	r3, [r3, #20]
   16602:	f023 0301 	bic.w	r3, r3, #1
   16606:	b2da      	uxtb	r2, r3
   16608:	4b0d      	ldr	r3, [pc, #52]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   1660a:	751a      	strb	r2, [r3, #20]

        /* set the filter policy bit */
        dmCb.syncOptions |= policy;
   1660c:	4b0c      	ldr	r3, [pc, #48]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   1660e:	7d1a      	ldrb	r2, [r3, #20]
   16610:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16614:	4313      	orrs	r3, r2
   16616:	b2da      	uxtb	r2, r3
   16618:	4b09      	ldr	r3, [pc, #36]	; (16640 <dmDevSetFilterPolicy+0xd0>)
   1661a:	751a      	strb	r2, [r3, #20]
        policySet = TRUE;
   1661c:	2301      	movs	r3, #1
   1661e:	f88d 300f 	strb.w	r3, [sp, #15]
      }
      break;
   16622:	e007      	b.n	16634 <dmDevSetFilterPolicy+0xc4>

    default:
      /* invalid filter policy mode */
      break;
   16624:	bf00      	nop
   16626:	e006      	b.n	16636 <dmDevSetFilterPolicy+0xc6>
      break;
   16628:	bf00      	nop
   1662a:	e004      	b.n	16636 <dmDevSetFilterPolicy+0xc6>
      break;
   1662c:	bf00      	nop
   1662e:	e002      	b.n	16636 <dmDevSetFilterPolicy+0xc6>
      break;
   16630:	bf00      	nop
   16632:	e000      	b.n	16636 <dmDevSetFilterPolicy+0xc6>
      break;
   16634:	bf00      	nop
  }

  return policySet;
   16636:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1663a:	4618      	mov	r0, r3
   1663c:	b004      	add	sp, #16
   1663e:	4770      	bx	lr
   16640:	10009568 	.word	0x10009568

00016644 <DmDevSetFilterPolicy>:
 *
 *  \return TRUE if the filter policy was successfully set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t DmDevSetFilterPolicy(uint8_t mode, uint8_t policy)
{
   16644:	b500      	push	{lr}
   16646:	b083      	sub	sp, #12
   16648:	4603      	mov	r3, r0
   1664a:	460a      	mov	r2, r1
   1664c:	f88d 3007 	strb.w	r3, [sp, #7]
   16650:	4613      	mov	r3, r2
   16652:	f88d 3006 	strb.w	r3, [sp, #6]
  return dmDevSetFilterPolicy(DM_ADV_HANDLE_DEFAULT, mode, policy);
   16656:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1665a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1665e:	4619      	mov	r1, r3
   16660:	2000      	movs	r0, #0
   16662:	f7ff ff85 	bl	16570 <dmDevSetFilterPolicy>
   16666:	4603      	mov	r3, r0
}
   16668:	4618      	mov	r0, r3
   1666a:	b003      	add	sp, #12
   1666c:	f85d fb04 	ldr.w	pc, [sp], #4

00016670 <DmDevVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
   16670:	b500      	push	{lr}
   16672:	b083      	sub	sp, #12
   16674:	4603      	mov	r3, r0
   16676:	f88d 3007 	strb.w	r3, [sp, #7]
  HciVsInit(param);
   1667a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1667e:	4618      	mov	r0, r3
   16680:	f00b f9c6 	bl	21a10 <HciVsInit>
}
   16684:	bf00      	nop
   16686:	b003      	add	sp, #12
   16688:	f85d fb04 	ldr.w	pc, [sp], #4

0001668c <DmDevPrivStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevPrivStart(uint16_t changeInterval)
{
   1668c:	b500      	push	{lr}
   1668e:	b085      	sub	sp, #20
   16690:	4603      	mov	r3, r0
   16692:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmDevPrivApiStart_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmDevPrivApiStart_t))) != NULL)
   16696:	2006      	movs	r0, #6
   16698:	f7f6 fd6c 	bl	d174 <WsfMsgAlloc>
   1669c:	9003      	str	r0, [sp, #12]
   1669e:	9b03      	ldr	r3, [sp, #12]
   166a0:	2b00      	cmp	r3, #0
   166a2:	d00c      	beq.n	166be <DmDevPrivStart+0x32>
  {
    pMsg->hdr.event = DM_DEV_PRIV_MSG_API_START;
   166a4:	9b03      	ldr	r3, [sp, #12]
   166a6:	2210      	movs	r2, #16
   166a8:	709a      	strb	r2, [r3, #2]
    pMsg->changeInterval = changeInterval;
   166aa:	9b03      	ldr	r3, [sp, #12]
   166ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   166b0:	809a      	strh	r2, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   166b2:	4b05      	ldr	r3, [pc, #20]	; (166c8 <DmDevPrivStart+0x3c>)
   166b4:	7b1b      	ldrb	r3, [r3, #12]
   166b6:	9903      	ldr	r1, [sp, #12]
   166b8:	4618      	mov	r0, r3
   166ba:	f7f6 fd7f 	bl	d1bc <WsfMsgSend>
  }
}
   166be:	bf00      	nop
   166c0:	b005      	add	sp, #20
   166c2:	f85d fb04 	ldr.w	pc, [sp], #4
   166c6:	bf00      	nop
   166c8:	10009568 	.word	0x10009568

000166cc <dmHciEvtCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmHciEvtCback(hciEvt_t *pEvent)
{
   166cc:	b500      	push	{lr}
   166ce:	b083      	sub	sp, #12
   166d0:	9001      	str	r0, [sp, #4]
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_READ_ANTENNA_INFO_CMD_CMPL_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   166d2:	4b0c      	ldr	r3, [pc, #48]	; (16704 <dmHciEvtCback+0x38>)
   166d4:	7c1b      	ldrb	r3, [r3, #16]
   166d6:	2b00      	cmp	r3, #0
   166d8:	d003      	beq.n	166e2 <dmHciEvtCback+0x16>
   166da:	9b01      	ldr	r3, [sp, #4]
   166dc:	789b      	ldrb	r3, [r3, #2]
   166de:	2b00      	cmp	r3, #0
   166e0:	d10b      	bne.n	166fa <dmHciEvtCback+0x2e>
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
   166e2:	9b01      	ldr	r3, [sp, #4]
   166e4:	789b      	ldrb	r3, [r3, #2]
   166e6:	461a      	mov	r2, r3
   166e8:	4b07      	ldr	r3, [pc, #28]	; (16708 <dmHciEvtCback+0x3c>)
   166ea:	5c9b      	ldrb	r3, [r3, r2]
   166ec:	461a      	mov	r2, r3
   166ee:	4b07      	ldr	r3, [pc, #28]	; (1670c <dmHciEvtCback+0x40>)
   166f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   166f4:	685b      	ldr	r3, [r3, #4]
   166f6:	9801      	ldr	r0, [sp, #4]
   166f8:	4798      	blx	r3
  }
}
   166fa:	bf00      	nop
   166fc:	b003      	add	sp, #12
   166fe:	f85d fb04 	ldr.w	pc, [sp], #4
   16702:	bf00      	nop
   16704:	10009568 	.word	0x10009568
   16708:	0002c360 	.word	0x0002c360
   1670c:	10002b78 	.word	0x10002b78

00016710 <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
   16710:	bf00      	nop
   16712:	4770      	bx	lr

00016714 <dmEmptyHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
   16714:	b082      	sub	sp, #8
   16716:	9001      	str	r0, [sp, #4]
  return;
   16718:	bf00      	nop
}
   1671a:	b002      	add	sp, #8
   1671c:	4770      	bx	lr
	...

00016720 <dmDevPassHciEvtToConn>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
   16720:	b500      	push	{lr}
   16722:	b083      	sub	sp, #12
   16724:	9001      	str	r0, [sp, #4]
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
   16726:	4b04      	ldr	r3, [pc, #16]	; (16738 <dmDevPassHciEvtToConn+0x18>)
   16728:	68db      	ldr	r3, [r3, #12]
   1672a:	685b      	ldr	r3, [r3, #4]
   1672c:	9801      	ldr	r0, [sp, #4]
   1672e:	4798      	blx	r3
}
   16730:	bf00      	nop
   16732:	b003      	add	sp, #12
   16734:	f85d fb04 	ldr.w	pc, [sp], #4
   16738:	10002b78 	.word	0x10002b78

0001673c <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
   1673c:	b500      	push	{lr}
   1673e:	b09d      	sub	sp, #116	; 0x74
   16740:	9001      	str	r0, [sp, #4]
  dmCb.cback = cback;
   16742:	4a0f      	ldr	r2, [pc, #60]	; (16780 <DmRegister+0x44>)
   16744:	9b01      	ldr	r3, [sp, #4]
   16746:	6093      	str	r3, [r2, #8]

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   16748:	4b0e      	ldr	r3, [pc, #56]	; (16784 <DmRegister+0x48>)
   1674a:	6a1b      	ldr	r3, [r3, #32]
   1674c:	4a0e      	ldr	r2, [pc, #56]	; (16788 <DmRegister+0x4c>)
   1674e:	4293      	cmp	r3, r2
   16750:	d012      	beq.n	16778 <DmRegister+0x3c>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   16752:	f008 ff19 	bl	1f588 <HciGetMaxRxAclLen>
   16756:	4603      	mov	r3, r0
   16758:	2b44      	cmp	r3, #68	; 0x44
   1675a:	d80d      	bhi.n	16778 <DmRegister+0x3c>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
   1675c:	2300      	movs	r3, #0
   1675e:	f8ad 300c 	strh.w	r3, [sp, #12]
      evt.hdr.event = DM_ERROR_IND;
   16762:	2364      	movs	r3, #100	; 0x64
   16764:	f88d 300e 	strb.w	r3, [sp, #14]
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;
   16768:	2301      	movs	r3, #1
   1676a:	f88d 300f 	strb.w	r3, [sp, #15]

      (*dmCb.cback)(&evt);
   1676e:	4b04      	ldr	r3, [pc, #16]	; (16780 <DmRegister+0x44>)
   16770:	689b      	ldr	r3, [r3, #8]
   16772:	aa03      	add	r2, sp, #12
   16774:	4610      	mov	r0, r2
   16776:	4798      	blx	r3
    }
  }
}
   16778:	bf00      	nop
   1677a:	b01d      	add	sp, #116	; 0x74
   1677c:	f85d fb04 	ldr.w	pc, [sp], #4
   16780:	10009568 	.word	0x10009568
   16784:	10002b78 	.word	0x10002b78
   16788:	0002c434 	.word	0x0002c434

0001678c <DmHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
   1678c:	b500      	push	{lr}
   1678e:	b083      	sub	sp, #12
   16790:	4603      	mov	r3, r0
   16792:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  dmCb.handlerId = handlerId;
   16796:	4a08      	ldr	r2, [pc, #32]	; (167b8 <DmHandlerInit+0x2c>)
   16798:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1679c:	7313      	strb	r3, [r2, #12]

  dmCb.llPrivEnabled = FALSE;
   1679e:	4b06      	ldr	r3, [pc, #24]	; (167b8 <DmHandlerInit+0x2c>)
   167a0:	2200      	movs	r2, #0
   167a2:	755a      	strb	r2, [r3, #21]
  dmCb.resetting = FALSE;
   167a4:	4b04      	ldr	r3, [pc, #16]	; (167b8 <DmHandlerInit+0x2c>)
   167a6:	2200      	movs	r2, #0
   167a8:	741a      	strb	r2, [r3, #16]

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
   167aa:	4804      	ldr	r0, [pc, #16]	; (167bc <DmHandlerInit+0x30>)
   167ac:	f007 fa0c 	bl	1dbc8 <HciEvtRegister>
}
   167b0:	bf00      	nop
   167b2:	b003      	add	sp, #12
   167b4:	f85d fb04 	ldr.w	pc, [sp], #4
   167b8:	10009568 	.word	0x10009568
   167bc:	000166cd 	.word	0x000166cd

000167c0 <DmHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   167c0:	b500      	push	{lr}
   167c2:	b083      	sub	sp, #12
   167c4:	4603      	mov	r3, r0
   167c6:	9100      	str	r1, [sp, #0]
   167c8:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   167cc:	9b00      	ldr	r3, [sp, #0]
   167ce:	2b00      	cmp	r3, #0
   167d0:	d00e      	beq.n	167f0 <DmHandler+0x30>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
   167d2:	4b09      	ldr	r3, [pc, #36]	; (167f8 <DmHandler+0x38>)
   167d4:	7c1b      	ldrb	r3, [r3, #16]
   167d6:	2b00      	cmp	r3, #0
   167d8:	d10a      	bne.n	167f0 <DmHandler+0x30>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
   167da:	9b00      	ldr	r3, [sp, #0]
   167dc:	789b      	ldrb	r3, [r3, #2]
   167de:	091b      	lsrs	r3, r3, #4
   167e0:	b2db      	uxtb	r3, r3
   167e2:	461a      	mov	r2, r3
   167e4:	4b05      	ldr	r3, [pc, #20]	; (167fc <DmHandler+0x3c>)
   167e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   167ea:	689b      	ldr	r3, [r3, #8]
   167ec:	9800      	ldr	r0, [sp, #0]
   167ee:	4798      	blx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   167f0:	bf00      	nop
   167f2:	b003      	add	sp, #12
   167f4:	f85d fb04 	ldr.w	pc, [sp], #4
   167f8:	10009568 	.word	0x10009568
   167fc:	10002b78 	.word	0x10002b78

00016800 <DmLlPrivEnabled>:
 *  \return TRUE if LL Privacy is enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmLlPrivEnabled(void)
{
  return dmCb.llPrivEnabled;
   16800:	4b01      	ldr	r3, [pc, #4]	; (16808 <DmLlPrivEnabled+0x8>)
   16802:	7d5b      	ldrb	r3, [r3, #21]
}
   16804:	4618      	mov	r0, r3
   16806:	4770      	bx	lr
   16808:	10009568 	.word	0x10009568

0001680c <DmLlAddrType>:
 *
 *  \return Address type used by LL.
 */
/*************************************************************************************************/
uint8_t DmLlAddrType(uint8_t addrType)
{
   1680c:	b084      	sub	sp, #16
   1680e:	4603      	mov	r3, r0
   16810:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t llAddrType = addrType;
   16814:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16818:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   1681c:	4b0b      	ldr	r3, [pc, #44]	; (1684c <DmLlAddrType+0x40>)
   1681e:	7d5b      	ldrb	r3, [r3, #21]
   16820:	2b00      	cmp	r3, #0
   16822:	d00e      	beq.n	16842 <DmLlAddrType+0x36>
  {
    if (addrType == DM_ADDR_PUBLIC)
   16824:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16828:	2b00      	cmp	r3, #0
   1682a:	d103      	bne.n	16834 <DmLlAddrType+0x28>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
   1682c:	2302      	movs	r3, #2
   1682e:	f88d 300f 	strb.w	r3, [sp, #15]
   16832:	e006      	b.n	16842 <DmLlAddrType+0x36>
    }
    else if (addrType == DM_ADDR_RANDOM)
   16834:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16838:	2b01      	cmp	r3, #1
   1683a:	d102      	bne.n	16842 <DmLlAddrType+0x36>
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
   1683c:	2303      	movs	r3, #3
   1683e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
  }

  return llAddrType;
   16842:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   16846:	4618      	mov	r0, r3
   16848:	b004      	add	sp, #16
   1684a:	4770      	bx	lr
   1684c:	10009568 	.word	0x10009568

00016850 <DmHostAddrType>:
 *
 *  \return Address type used by Host.
 */
/*************************************************************************************************/
uint8_t DmHostAddrType(uint8_t addrType)
{
   16850:	b084      	sub	sp, #16
   16852:	4603      	mov	r3, r0
   16854:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t hostAddrType = addrType;
   16858:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1685c:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   16860:	4b0b      	ldr	r3, [pc, #44]	; (16890 <DmHostAddrType+0x40>)
   16862:	7d5b      	ldrb	r3, [r3, #21]
   16864:	2b00      	cmp	r3, #0
   16866:	d00e      	beq.n	16886 <DmHostAddrType+0x36>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
   16868:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1686c:	2b02      	cmp	r3, #2
   1686e:	d103      	bne.n	16878 <DmHostAddrType+0x28>
    {
      hostAddrType = DM_ADDR_PUBLIC;
   16870:	2300      	movs	r3, #0
   16872:	f88d 300f 	strb.w	r3, [sp, #15]
   16876:	e006      	b.n	16886 <DmHostAddrType+0x36>
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
   16878:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1687c:	2b03      	cmp	r3, #3
   1687e:	d102      	bne.n	16886 <DmHostAddrType+0x36>
    {
      hostAddrType = DM_ADDR_RANDOM;
   16880:	2301      	movs	r3, #1
   16882:	f88d 300f 	strb.w	r3, [sp, #15]
    }
  }

  return hostAddrType;
   16886:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1688a:	4618      	mov	r0, r3
   1688c:	b004      	add	sp, #16
   1688e:	4770      	bx	lr
   16890:	10009568 	.word	0x10009568

00016894 <DmSizeOfEvt>:
 *
 *  \return Size of DM callback event.
 */
/*************************************************************************************************/
uint16_t DmSizeOfEvt(dmEvt_t *pDmEvt)
{
   16894:	b084      	sub	sp, #16
   16896:	9001      	str	r0, [sp, #4]
  uint16_t len;

  /* if a valid DM event ID */
  if ((pDmEvt->hdr.event >= DM_CBACK_START) && (pDmEvt->hdr.event <= DM_CBACK_END))
   16898:	9b01      	ldr	r3, [sp, #4]
   1689a:	789b      	ldrb	r3, [r3, #2]
   1689c:	2b1f      	cmp	r3, #31
   1689e:	d90c      	bls.n	168ba <DmSizeOfEvt+0x26>
   168a0:	9b01      	ldr	r3, [sp, #4]
   168a2:	789b      	ldrb	r3, [r3, #2]
   168a4:	2b67      	cmp	r3, #103	; 0x67
   168a6:	d808      	bhi.n	168ba <DmSizeOfEvt+0x26>
  {
    len = dmEvtCbackLen[pDmEvt->hdr.event - DM_CBACK_START];
   168a8:	9b01      	ldr	r3, [sp, #4]
   168aa:	789b      	ldrb	r3, [r3, #2]
   168ac:	3b20      	subs	r3, #32
   168ae:	4a07      	ldr	r2, [pc, #28]	; (168cc <DmSizeOfEvt+0x38>)
   168b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   168b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   168b8:	e002      	b.n	168c0 <DmSizeOfEvt+0x2c>
  }
  else
  {
    len = sizeof(wsfMsgHdr_t);
   168ba:	2304      	movs	r3, #4
   168bc:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  return len;
   168c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   168c4:	4618      	mov	r0, r3
   168c6:	b004      	add	sp, #16
   168c8:	4770      	bx	lr
   168ca:	bf00      	nop
   168cc:	0002c3a4 	.word	0x0002c3a4

000168d0 <dmPrivActResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActResolveAddr(dmPrivMsg_t *pMsg)
{
   168d0:	b510      	push	{r4, lr}
   168d2:	b088      	sub	sp, #32
   168d4:	9003      	str	r0, [sp, #12]
  uint8_t buf[DM_PRIV_PLAINTEXT_LEN];

  /* verify no resolution procedure currently in progress */
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   168d6:	4b1e      	ldr	r3, [pc, #120]	; (16950 <dmPrivActResolveAddr+0x80>)
   168d8:	78db      	ldrb	r3, [r3, #3]
   168da:	f003 0301 	and.w	r3, r3, #1
   168de:	2b00      	cmp	r3, #0
   168e0:	d129      	bne.n	16936 <dmPrivActResolveAddr+0x66>
  {
    /* store hash */
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   168e2:	9b03      	ldr	r3, [sp, #12]
   168e4:	f103 0214 	add.w	r2, r3, #20
   168e8:	4b19      	ldr	r3, [pc, #100]	; (16950 <dmPrivActResolveAddr+0x80>)
   168ea:	8811      	ldrh	r1, [r2, #0]
   168ec:	7892      	ldrb	r2, [r2, #2]
   168ee:	8019      	strh	r1, [r3, #0]
   168f0:	709a      	strb	r2, [r3, #2]

    /* copy random part of address with padding for address resolution calculation */
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   168f2:	9b03      	ldr	r3, [sp, #12]
   168f4:	f103 0117 	add.w	r1, r3, #23
   168f8:	ab04      	add	r3, sp, #16
   168fa:	2203      	movs	r2, #3
   168fc:	4618      	mov	r0, r3
   168fe:	f7f5 fbff 	bl	c100 <memcpy>
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   16902:	ab04      	add	r3, sp, #16
   16904:	3303      	adds	r3, #3
   16906:	220d      	movs	r2, #13
   16908:	2100      	movs	r1, #0
   1690a:	4618      	mov	r0, r3
   1690c:	f011 fd96 	bl	2843c <memset>

    /* set in progress */
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
   16910:	4b0f      	ldr	r3, [pc, #60]	; (16950 <dmPrivActResolveAddr+0x80>)
   16912:	78db      	ldrb	r3, [r3, #3]
   16914:	f043 0301 	orr.w	r3, r3, #1
   16918:	b2da      	uxtb	r2, r3
   1691a:	4b0d      	ldr	r3, [pc, #52]	; (16950 <dmPrivActResolveAddr+0x80>)
   1691c:	70da      	strb	r2, [r3, #3]

    /* run calculation */
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   1691e:	9b03      	ldr	r3, [sp, #12]
   16920:	1d18      	adds	r0, r3, #4
   16922:	4b0c      	ldr	r3, [pc, #48]	; (16954 <dmPrivActResolveAddr+0x84>)
   16924:	7b1a      	ldrb	r2, [r3, #12]
   16926:	9b03      	ldr	r3, [sp, #12]
   16928:	881b      	ldrh	r3, [r3, #0]
   1692a:	a904      	add	r1, sp, #16
   1692c:	2461      	movs	r4, #97	; 0x61
   1692e:	9400      	str	r4, [sp, #0]
   16930:	f002 ff90 	bl	19854 <SecAes>
    /* call callback with error (note hdr.param is already set) */
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
}
   16934:	e009      	b.n	1694a <dmPrivActResolveAddr+0x7a>
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   16936:	9b03      	ldr	r3, [sp, #12]
   16938:	2207      	movs	r2, #7
   1693a:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   1693c:	9b03      	ldr	r3, [sp, #12]
   1693e:	2237      	movs	r2, #55	; 0x37
   16940:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   16942:	4b04      	ldr	r3, [pc, #16]	; (16954 <dmPrivActResolveAddr+0x84>)
   16944:	689b      	ldr	r3, [r3, #8]
   16946:	9803      	ldr	r0, [sp, #12]
   16948:	4798      	blx	r3
}
   1694a:	bf00      	nop
   1694c:	b008      	add	sp, #32
   1694e:	bd10      	pop	{r4, pc}
   16950:	10009580 	.word	0x10009580
   16954:	10009568 	.word	0x10009568

00016958 <dmPrivActResAddrAesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActResAddrAesCmpl(dmPrivMsg_t *pMsg)
{
   16958:	b500      	push	{lr}
   1695a:	b083      	sub	sp, #12
   1695c:	9001      	str	r0, [sp, #4]
  /* compare calculated value with hash */
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   1695e:	9b01      	ldr	r3, [sp, #4]
   16960:	685b      	ldr	r3, [r3, #4]
   16962:	2203      	movs	r2, #3
   16964:	4619      	mov	r1, r3
   16966:	480f      	ldr	r0, [pc, #60]	; (169a4 <dmPrivActResAddrAesCmpl+0x4c>)
   16968:	f011 fd38 	bl	283dc <memcmp>
   1696c:	4603      	mov	r3, r0
   1696e:	2b00      	cmp	r3, #0
   16970:	d103      	bne.n	1697a <dmPrivActResAddrAesCmpl+0x22>
  {
    pMsg->hdr.status = HCI_SUCCESS;
   16972:	9b01      	ldr	r3, [sp, #4]
   16974:	2200      	movs	r2, #0
   16976:	70da      	strb	r2, [r3, #3]
   16978:	e002      	b.n	16980 <dmPrivActResAddrAesCmpl+0x28>
  }
  else
  {
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
   1697a:	9b01      	ldr	r3, [sp, #4]
   1697c:	2205      	movs	r2, #5
   1697e:	70da      	strb	r2, [r3, #3]
  }

  /* clear in progress */
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   16980:	4b08      	ldr	r3, [pc, #32]	; (169a4 <dmPrivActResAddrAesCmpl+0x4c>)
   16982:	78db      	ldrb	r3, [r3, #3]
   16984:	f023 0301 	bic.w	r3, r3, #1
   16988:	b2da      	uxtb	r2, r3
   1698a:	4b06      	ldr	r3, [pc, #24]	; (169a4 <dmPrivActResAddrAesCmpl+0x4c>)
   1698c:	70da      	strb	r2, [r3, #3]

  /* call client callback (note hdr.param is already set) */
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   1698e:	9b01      	ldr	r3, [sp, #4]
   16990:	2237      	movs	r2, #55	; 0x37
   16992:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   16994:	4b04      	ldr	r3, [pc, #16]	; (169a8 <dmPrivActResAddrAesCmpl+0x50>)
   16996:	689b      	ldr	r3, [r3, #8]
   16998:	9801      	ldr	r0, [sp, #4]
   1699a:	4798      	blx	r3
}
   1699c:	bf00      	nop
   1699e:	b003      	add	sp, #12
   169a0:	f85d fb04 	ldr.w	pc, [sp], #4
   169a4:	10009580 	.word	0x10009580
   169a8:	10009568 	.word	0x10009568

000169ac <dmPrivActAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActAddDevToResList(dmPrivMsg_t *pMsg)
{
   169ac:	b500      	push	{lr}
   169ae:	b085      	sub	sp, #20
   169b0:	9001      	str	r0, [sp, #4]
  dmPrivApiAddDevToResList_t *pDev = &pMsg->apiAddDevToResList;
   169b2:	9b01      	ldr	r3, [sp, #4]
   169b4:	9303      	str	r3, [sp, #12]

  /* save whether asked to enable address resolution */
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   169b6:	9b03      	ldr	r3, [sp, #12]
   169b8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   169bc:	4b0a      	ldr	r3, [pc, #40]	; (169e8 <dmPrivActAddDevToResList+0x3c>)
   169be:	721a      	strb	r2, [r3, #8]

  /* save client-defined parameter for callback event */
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   169c0:	9b01      	ldr	r3, [sp, #4]
   169c2:	881a      	ldrh	r2, [r3, #0]
   169c4:	4b08      	ldr	r3, [pc, #32]	; (169e8 <dmPrivActAddDevToResList+0x3c>)
   169c6:	809a      	strh	r2, [r3, #4]

  /* add device to resolving list */
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
   169c8:	9b03      	ldr	r3, [sp, #12]
   169ca:	7918      	ldrb	r0, [r3, #4]
   169cc:	9b03      	ldr	r3, [sp, #12]
   169ce:	1d59      	adds	r1, r3, #5
   169d0:	9b03      	ldr	r3, [sp, #12]
   169d2:	f103 020b 	add.w	r2, r3, #11
   169d6:	9b03      	ldr	r3, [sp, #12]
   169d8:	331b      	adds	r3, #27
   169da:	f007 ff85 	bl	1e8e8 <HciLeAddDeviceToResolvingListCmd>
}
   169de:	bf00      	nop
   169e0:	b005      	add	sp, #20
   169e2:	f85d fb04 	ldr.w	pc, [sp], #4
   169e6:	bf00      	nop
   169e8:	10009580 	.word	0x10009580

000169ec <dmPrivActRemDevFromResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActRemDevFromResList(dmPrivMsg_t *pMsg)
{
   169ec:	b500      	push	{lr}
   169ee:	b085      	sub	sp, #20
   169f0:	9001      	str	r0, [sp, #4]
  dmPrivApiRemDevFromResList_t *pDev = &pMsg->apiRemDevFromResList;
   169f2:	9b01      	ldr	r3, [sp, #4]
   169f4:	9303      	str	r3, [sp, #12]

  /* save client-defined parameter for callback event */
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
   169f6:	9b01      	ldr	r3, [sp, #4]
   169f8:	881a      	ldrh	r2, [r3, #0]
   169fa:	4b07      	ldr	r3, [pc, #28]	; (16a18 <dmPrivActRemDevFromResList+0x2c>)
   169fc:	80da      	strh	r2, [r3, #6]

  /* remove device from resolving list */
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
   169fe:	9b03      	ldr	r3, [sp, #12]
   16a00:	791a      	ldrb	r2, [r3, #4]
   16a02:	9b03      	ldr	r3, [sp, #12]
   16a04:	3305      	adds	r3, #5
   16a06:	4619      	mov	r1, r3
   16a08:	4610      	mov	r0, r2
   16a0a:	f007 ffa2 	bl	1e952 <HciLeRemoveDeviceFromResolvingList>
}
   16a0e:	bf00      	nop
   16a10:	b005      	add	sp, #20
   16a12:	f85d fb04 	ldr.w	pc, [sp], #4
   16a16:	bf00      	nop
   16a18:	10009580 	.word	0x10009580

00016a1c <dmPrivActClearResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActClearResList(dmPrivMsg_t *pMsg)
{
   16a1c:	b500      	push	{lr}
   16a1e:	b083      	sub	sp, #12
   16a20:	9001      	str	r0, [sp, #4]
  /* clear resolving list */
  HciLeClearResolvingList();
   16a22:	f007 ffbc 	bl	1e99e <HciLeClearResolvingList>
}
   16a26:	bf00      	nop
   16a28:	b003      	add	sp, #12
   16a2a:	f85d fb04 	ldr.w	pc, [sp], #4

00016a2e <dmPrivActSetAddrResEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActSetAddrResEnable(dmPrivMsg_t *pMsg)
{
   16a2e:	b500      	push	{lr}
   16a30:	b085      	sub	sp, #20
   16a32:	9001      	str	r0, [sp, #4]
  dmPrivApiSetAddrResEnable_t *pAddrRes = &pMsg->apiSetAddrResEnable;
   16a34:	9b01      	ldr	r3, [sp, #4]
   16a36:	9303      	str	r3, [sp, #12]

  /* enable or disable address resolution in LL */
  dmPrivSetAddrResEnable(pAddrRes->enable);
   16a38:	9b03      	ldr	r3, [sp, #12]
   16a3a:	791b      	ldrb	r3, [r3, #4]
   16a3c:	4618      	mov	r0, r3
   16a3e:	f000 f90f 	bl	16c60 <dmPrivSetAddrResEnable>
}
   16a42:	bf00      	nop
   16a44:	b005      	add	sp, #20
   16a46:	f85d fb04 	ldr.w	pc, [sp], #4

00016a4a <dmPrivActSetPrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActSetPrivacyMode(dmPrivMsg_t *pMsg)
{
   16a4a:	b500      	push	{lr}
   16a4c:	b085      	sub	sp, #20
   16a4e:	9001      	str	r0, [sp, #4]
  dmPrivApiSetPrivacyMode_t *pPrivacyMode = &pMsg->apiSetPrivacyMode;
   16a50:	9b01      	ldr	r3, [sp, #4]
   16a52:	9303      	str	r3, [sp, #12]

  /* set privacy mode */
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
   16a54:	9b03      	ldr	r3, [sp, #12]
   16a56:	7918      	ldrb	r0, [r3, #4]
   16a58:	9b03      	ldr	r3, [sp, #12]
   16a5a:	1d59      	adds	r1, r3, #5
   16a5c:	9b03      	ldr	r3, [sp, #12]
   16a5e:	7adb      	ldrb	r3, [r3, #11]
   16a60:	461a      	mov	r2, r3
   16a62:	f007 ffde 	bl	1ea22 <HciLeSetPrivacyModeCmd>
}
   16a66:	bf00      	nop
   16a68:	b005      	add	sp, #20
   16a6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00016a70 <dmPrivActGenAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActGenAddr(dmPrivMsg_t *pMsg)
{
   16a70:	b500      	push	{lr}
   16a72:	b085      	sub	sp, #20
   16a74:	9003      	str	r0, [sp, #12]
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   16a76:	4b1e      	ldr	r3, [pc, #120]	; (16af0 <dmPrivActGenAddr+0x80>)
   16a78:	78db      	ldrb	r3, [r3, #3]
   16a7a:	f003 0302 	and.w	r3, r3, #2
   16a7e:	2b00      	cmp	r3, #0
   16a80:	d128      	bne.n	16ad4 <dmPrivActGenAddr+0x64>
  {
    /* get random number */
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   16a82:	2103      	movs	r1, #3
   16a84:	481b      	ldr	r0, [pc, #108]	; (16af4 <dmPrivActGenAddr+0x84>)
   16a86:	f003 f9c9 	bl	19e1c <SecRand>

    /* set address type in random number */
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   16a8a:	4b19      	ldr	r3, [pc, #100]	; (16af0 <dmPrivActGenAddr+0x80>)
   16a8c:	7b1b      	ldrb	r3, [r3, #12]
   16a8e:	b25b      	sxtb	r3, r3
   16a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16a94:	b25b      	sxtb	r3, r3
   16a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16a9a:	b25b      	sxtb	r3, r3
   16a9c:	b2da      	uxtb	r2, r3
   16a9e:	4b14      	ldr	r3, [pc, #80]	; (16af0 <dmPrivActGenAddr+0x80>)
   16aa0:	731a      	strb	r2, [r3, #12]

    /* pad buffer */
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   16aa2:	4b15      	ldr	r3, [pc, #84]	; (16af8 <dmPrivActGenAddr+0x88>)
   16aa4:	220d      	movs	r2, #13
   16aa6:	2100      	movs	r1, #0
   16aa8:	4618      	mov	r0, r3
   16aaa:	f011 fcc7 	bl	2843c <memset>

    /* set in progress */
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   16aae:	4b10      	ldr	r3, [pc, #64]	; (16af0 <dmPrivActGenAddr+0x80>)
   16ab0:	78db      	ldrb	r3, [r3, #3]
   16ab2:	f043 0302 	orr.w	r3, r3, #2
   16ab6:	b2da      	uxtb	r2, r3
   16ab8:	4b0d      	ldr	r3, [pc, #52]	; (16af0 <dmPrivActGenAddr+0x80>)
   16aba:	70da      	strb	r2, [r3, #3]

    /* run calculation */
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   16abc:	9b03      	ldr	r3, [sp, #12]
   16abe:	1d18      	adds	r0, r3, #4
   16ac0:	4b0e      	ldr	r3, [pc, #56]	; (16afc <dmPrivActGenAddr+0x8c>)
   16ac2:	7b1a      	ldrb	r2, [r3, #12]
   16ac4:	9b03      	ldr	r3, [sp, #12]
   16ac6:	881b      	ldrh	r3, [r3, #0]
   16ac8:	2168      	movs	r1, #104	; 0x68
   16aca:	9100      	str	r1, [sp, #0]
   16acc:	4909      	ldr	r1, [pc, #36]	; (16af4 <dmPrivActGenAddr+0x84>)
   16ace:	f002 fec1 	bl	19854 <SecAes>
    /* call callback with error (note hdr.param is already set) */
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
}
   16ad2:	e009      	b.n	16ae8 <dmPrivActGenAddr+0x78>
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   16ad4:	9b03      	ldr	r3, [sp, #12]
   16ad6:	2207      	movs	r2, #7
   16ad8:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   16ada:	9b03      	ldr	r3, [sp, #12]
   16adc:	2238      	movs	r2, #56	; 0x38
   16ade:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   16ae0:	4b06      	ldr	r3, [pc, #24]	; (16afc <dmPrivActGenAddr+0x8c>)
   16ae2:	689b      	ldr	r3, [r3, #8]
   16ae4:	9803      	ldr	r0, [sp, #12]
   16ae6:	4798      	blx	r3
}
   16ae8:	bf00      	nop
   16aea:	b005      	add	sp, #20
   16aec:	f85d fb04 	ldr.w	pc, [sp], #4
   16af0:	10009580 	.word	0x10009580
   16af4:	1000958a 	.word	0x1000958a
   16af8:	1000958d 	.word	0x1000958d
   16afc:	10009568 	.word	0x10009568

00016b00 <dmPrivActGenAddrAesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActGenAddrAesCmpl(dmPrivMsg_t *pMsg)
{
   16b00:	b500      	push	{lr}
   16b02:	b085      	sub	sp, #20
   16b04:	9001      	str	r0, [sp, #4]
  dmPrivGenAddrIndEvt_t *pAddrEvt = (dmPrivGenAddrIndEvt_t*) pMsg;
   16b06:	9b01      	ldr	r3, [sp, #4]
   16b08:	9303      	str	r3, [sp, #12]

  /* copy the hash and address to buffer */
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   16b0a:	9b03      	ldr	r3, [sp, #12]
   16b0c:	1d18      	adds	r0, r3, #4
   16b0e:	9b01      	ldr	r3, [sp, #4]
   16b10:	685b      	ldr	r3, [r3, #4]
   16b12:	2203      	movs	r2, #3
   16b14:	4619      	mov	r1, r3
   16b16:	f7f5 faf3 	bl	c100 <memcpy>
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   16b1a:	9b03      	ldr	r3, [sp, #12]
   16b1c:	3304      	adds	r3, #4
   16b1e:	3303      	adds	r3, #3
   16b20:	2203      	movs	r2, #3
   16b22:	490c      	ldr	r1, [pc, #48]	; (16b54 <dmPrivActGenAddrAesCmpl+0x54>)
   16b24:	4618      	mov	r0, r3
   16b26:	f7f5 faeb 	bl	c100 <memcpy>

  /* clear in progress */
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   16b2a:	4b0b      	ldr	r3, [pc, #44]	; (16b58 <dmPrivActGenAddrAesCmpl+0x58>)
   16b2c:	78db      	ldrb	r3, [r3, #3]
   16b2e:	f023 0302 	bic.w	r3, r3, #2
   16b32:	b2da      	uxtb	r2, r3
   16b34:	4b08      	ldr	r3, [pc, #32]	; (16b58 <dmPrivActGenAddrAesCmpl+0x58>)
   16b36:	70da      	strb	r2, [r3, #3]

  /* call client callback */
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   16b38:	9b03      	ldr	r3, [sp, #12]
   16b3a:	2238      	movs	r2, #56	; 0x38
   16b3c:	709a      	strb	r2, [r3, #2]
  pMsg->hdr.status = HCI_SUCCESS;
   16b3e:	9b01      	ldr	r3, [sp, #4]
   16b40:	2200      	movs	r2, #0
   16b42:	70da      	strb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   16b44:	4b05      	ldr	r3, [pc, #20]	; (16b5c <dmPrivActGenAddrAesCmpl+0x5c>)
   16b46:	689b      	ldr	r3, [r3, #8]
   16b48:	9803      	ldr	r0, [sp, #12]
   16b4a:	4798      	blx	r3
}
   16b4c:	bf00      	nop
   16b4e:	b005      	add	sp, #20
   16b50:	f85d fb04 	ldr.w	pc, [sp], #4
   16b54:	1000958a 	.word	0x1000958a
   16b58:	10009580 	.word	0x10009580
   16b5c:	10009568 	.word	0x10009568

00016b60 <dmPrivHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivHciHandler(hciEvt_t *pEvent)
{
   16b60:	b500      	push	{lr}
   16b62:	b083      	sub	sp, #12
   16b64:	9001      	str	r0, [sp, #4]
  /* handle incoming event */
  switch (pEvent->hdr.event)
   16b66:	9b01      	ldr	r3, [sp, #4]
   16b68:	789b      	ldrb	r3, [r3, #2]
   16b6a:	3b15      	subs	r3, #21
   16b6c:	2b05      	cmp	r3, #5
   16b6e:	d86e      	bhi.n	16c4e <dmPrivHciHandler+0xee>
   16b70:	a201      	add	r2, pc, #4	; (adr r2, 16b78 <dmPrivHciHandler+0x18>)
   16b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16b76:	bf00      	nop
   16b78:	00016b91 	.word	0x00016b91
   16b7c:	00016bbf 	.word	0x00016bbf
   16b80:	00016bcf 	.word	0x00016bcf
   16b84:	00016bed 	.word	0x00016bed
   16b88:	00016bf5 	.word	0x00016bf5
   16b8c:	00016bfd 	.word	0x00016bfd
  {
    case HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
   16b90:	9b01      	ldr	r3, [sp, #4]
   16b92:	223a      	movs	r2, #58	; 0x3a
   16b94:	709a      	strb	r2, [r3, #2]
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   16b96:	4b30      	ldr	r3, [pc, #192]	; (16c58 <dmPrivHciHandler+0xf8>)
   16b98:	889a      	ldrh	r2, [r3, #4]
   16b9a:	9b01      	ldr	r3, [sp, #4]
   16b9c:	801a      	strh	r2, [r3, #0]

      /* if LE add device to resolving list command succeeded and been asked to enable address
       * resolution in LL and it's not enabled yet
       */
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   16b9e:	9b01      	ldr	r3, [sp, #4]
   16ba0:	78db      	ldrb	r3, [r3, #3]
   16ba2:	2b00      	cmp	r3, #0
   16ba4:	d149      	bne.n	16c3a <dmPrivHciHandler+0xda>
   16ba6:	4b2c      	ldr	r3, [pc, #176]	; (16c58 <dmPrivHciHandler+0xf8>)
   16ba8:	7a1b      	ldrb	r3, [r3, #8]
   16baa:	2b00      	cmp	r3, #0
   16bac:	d045      	beq.n	16c3a <dmPrivHciHandler+0xda>
   16bae:	4b2b      	ldr	r3, [pc, #172]	; (16c5c <dmPrivHciHandler+0xfc>)
   16bb0:	7d5b      	ldrb	r3, [r3, #21]
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d141      	bne.n	16c3a <dmPrivHciHandler+0xda>
      {
        /* enable address resolution in LL */
        dmPrivSetAddrResEnable(TRUE);
   16bb6:	2001      	movs	r0, #1
   16bb8:	f000 f852 	bl	16c60 <dmPrivSetAddrResEnable>
      }
      break;
   16bbc:	e03d      	b.n	16c3a <dmPrivHciHandler+0xda>

    case HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   16bbe:	9b01      	ldr	r3, [sp, #4]
   16bc0:	223b      	movs	r2, #59	; 0x3b
   16bc2:	709a      	strb	r2, [r3, #2]
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
   16bc4:	4b24      	ldr	r3, [pc, #144]	; (16c58 <dmPrivHciHandler+0xf8>)
   16bc6:	88da      	ldrh	r2, [r3, #6]
   16bc8:	9b01      	ldr	r3, [sp, #4]
   16bca:	801a      	strh	r2, [r3, #0]
      break;
   16bcc:	e03a      	b.n	16c44 <dmPrivHciHandler+0xe4>

    case HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
   16bce:	9b01      	ldr	r3, [sp, #4]
   16bd0:	223c      	movs	r2, #60	; 0x3c
   16bd2:	709a      	strb	r2, [r3, #2]

      /* if LE clear resolving list command succeeded and address resolution's enabled in LL */
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   16bd4:	9b01      	ldr	r3, [sp, #4]
   16bd6:	78db      	ldrb	r3, [r3, #3]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d130      	bne.n	16c3e <dmPrivHciHandler+0xde>
   16bdc:	4b1f      	ldr	r3, [pc, #124]	; (16c5c <dmPrivHciHandler+0xfc>)
   16bde:	7d5b      	ldrb	r3, [r3, #21]
   16be0:	2b00      	cmp	r3, #0
   16be2:	d02c      	beq.n	16c3e <dmPrivHciHandler+0xde>
      {
        /* disable address resolution in LL */
        dmPrivSetAddrResEnable(FALSE);
   16be4:	2000      	movs	r0, #0
   16be6:	f000 f83b 	bl	16c60 <dmPrivSetAddrResEnable>
      }
      break;
   16bea:	e028      	b.n	16c3e <dmPrivHciHandler+0xde>

    case HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
   16bec:	9b01      	ldr	r3, [sp, #4]
   16bee:	223d      	movs	r2, #61	; 0x3d
   16bf0:	709a      	strb	r2, [r3, #2]
      break;
   16bf2:	e027      	b.n	16c44 <dmPrivHciHandler+0xe4>

    case HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
   16bf4:	9b01      	ldr	r3, [sp, #4]
   16bf6:	223e      	movs	r2, #62	; 0x3e
   16bf8:	709a      	strb	r2, [r3, #2]
      break;
   16bfa:	e023      	b.n	16c44 <dmPrivHciHandler+0xe4>

    case HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
   16bfc:	9b01      	ldr	r3, [sp, #4]
   16bfe:	223f      	movs	r2, #63	; 0x3f
   16c00:	709a      	strb	r2, [r3, #2]

      /* if LE set address resoultion enable command succeeded */
      if (pEvent->hdr.status == HCI_SUCCESS)
   16c02:	9b01      	ldr	r3, [sp, #4]
   16c04:	78db      	ldrb	r3, [r3, #3]
   16c06:	2b00      	cmp	r3, #0
   16c08:	d11b      	bne.n	16c42 <dmPrivHciHandler+0xe2>
      {
        /* update LL Privacy Enabled flag */
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
   16c0a:	4b13      	ldr	r3, [pc, #76]	; (16c58 <dmPrivHciHandler+0xf8>)
   16c0c:	7a5a      	ldrb	r2, [r3, #9]
   16c0e:	4b13      	ldr	r3, [pc, #76]	; (16c5c <dmPrivHciHandler+0xfc>)
   16c10:	755a      	strb	r2, [r3, #21]

        /* pass LL Privacy enable/disable event to dev priv */
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   16c12:	4b12      	ldr	r3, [pc, #72]	; (16c5c <dmPrivHciHandler+0xfc>)
   16c14:	7d5b      	ldrb	r3, [r3, #21]
   16c16:	2b00      	cmp	r3, #0
   16c18:	d001      	beq.n	16c1e <dmPrivHciHandler+0xbe>
   16c1a:	2015      	movs	r0, #21
   16c1c:	e000      	b.n	16c20 <dmPrivHciHandler+0xc0>
   16c1e:	2014      	movs	r0, #20
                              dmCb.llPrivEnabled ? TRUE : FALSE, 0, 0);
   16c20:	4b0e      	ldr	r3, [pc, #56]	; (16c5c <dmPrivHciHandler+0xfc>)
   16c22:	7d5b      	ldrb	r3, [r3, #21]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   16c24:	2b00      	cmp	r3, #0
   16c26:	bf14      	ite	ne
   16c28:	2301      	movne	r3, #1
   16c2a:	2300      	moveq	r3, #0
   16c2c:	b2db      	uxtb	r3, r3
   16c2e:	4619      	mov	r1, r3
   16c30:	2300      	movs	r3, #0
   16c32:	2200      	movs	r2, #0
   16c34:	f7ff fc12 	bl	1645c <dmDevPassEvtToDevPriv>
      }
      break;
   16c38:	e003      	b.n	16c42 <dmPrivHciHandler+0xe2>
      break;
   16c3a:	bf00      	nop
   16c3c:	e002      	b.n	16c44 <dmPrivHciHandler+0xe4>
      break;
   16c3e:	bf00      	nop
   16c40:	e000      	b.n	16c44 <dmPrivHciHandler+0xe4>
      break;
   16c42:	bf00      	nop
      /* should never get here */
      return;
  }

  /* call callback (note hdr.status is already set) */
  (*dmCb.cback)((dmEvt_t *)pEvent);
   16c44:	4b05      	ldr	r3, [pc, #20]	; (16c5c <dmPrivHciHandler+0xfc>)
   16c46:	689b      	ldr	r3, [r3, #8]
   16c48:	9801      	ldr	r0, [sp, #4]
   16c4a:	4798      	blx	r3
   16c4c:	e000      	b.n	16c50 <dmPrivHciHandler+0xf0>
      return;
   16c4e:	bf00      	nop
}
   16c50:	b003      	add	sp, #12
   16c52:	f85d fb04 	ldr.w	pc, [sp], #4
   16c56:	bf00      	nop
   16c58:	10009580 	.word	0x10009580
   16c5c:	10009568 	.word	0x10009568

00016c60 <dmPrivSetAddrResEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmPrivSetAddrResEnable(bool_t enable)
{
   16c60:	b500      	push	{lr}
   16c62:	b083      	sub	sp, #12
   16c64:	4603      	mov	r3, r0
   16c66:	f88d 3007 	strb.w	r3, [sp, #7]
  /* save input parameter */
  dmPrivCb.addrResEnable = enable;
   16c6a:	4a06      	ldr	r2, [pc, #24]	; (16c84 <dmPrivSetAddrResEnable+0x24>)
   16c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16c70:	7253      	strb	r3, [r2, #9]

  /* enable or disable address resolution in LL */
  HciLeSetAddrResolutionEnable(enable);
   16c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16c76:	4618      	mov	r0, r3
   16c78:	f007 feb5 	bl	1e9e6 <HciLeSetAddrResolutionEnable>
}
   16c7c:	bf00      	nop
   16c7e:	b003      	add	sp, #12
   16c80:	f85d fb04 	ldr.w	pc, [sp], #4
   16c84:	10009580 	.word	0x10009580

00016c88 <dmPrivMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
   16c88:	b500      	push	{lr}
   16c8a:	b083      	sub	sp, #12
   16c8c:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
   16c8e:	9b01      	ldr	r3, [sp, #4]
   16c90:	789b      	ldrb	r3, [r3, #2]
   16c92:	f003 030f 	and.w	r3, r3, #15
   16c96:	4a04      	ldr	r2, [pc, #16]	; (16ca8 <dmPrivMsgHandler+0x20>)
   16c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c9c:	9801      	ldr	r0, [sp, #4]
   16c9e:	4798      	blx	r3
}
   16ca0:	bf00      	nop
   16ca2:	b003      	add	sp, #12
   16ca4:	f85d fb04 	ldr.w	pc, [sp], #4
   16ca8:	0002c440 	.word	0x0002c440

00016cac <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
   16cac:	4b03      	ldr	r3, [pc, #12]	; (16cbc <dmPrivReset+0x10>)
   16cae:	2200      	movs	r2, #0
   16cb0:	70da      	strb	r2, [r3, #3]
  dmCb.llPrivEnabled = FALSE;
   16cb2:	4b03      	ldr	r3, [pc, #12]	; (16cc0 <dmPrivReset+0x14>)
   16cb4:	2200      	movs	r2, #0
   16cb6:	755a      	strb	r2, [r3, #21]
}
   16cb8:	bf00      	nop
   16cba:	4770      	bx	lr
   16cbc:	10009580 	.word	0x10009580
   16cc0:	10009568 	.word	0x10009568

00016cc4 <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
   16cc4:	4b02      	ldr	r3, [pc, #8]	; (16cd0 <DmPrivInit+0xc>)
   16cc6:	4a03      	ldr	r2, [pc, #12]	; (16cd4 <DmPrivInit+0x10>)
   16cc8:	619a      	str	r2, [r3, #24]
}
   16cca:	bf00      	nop
   16ccc:	4770      	bx	lr
   16cce:	bf00      	nop
   16cd0:	10002b78 	.word	0x10002b78
   16cd4:	0002c464 	.word	0x0002c464

00016cd8 <DmPrivResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivResolveAddr(uint8_t *pAddr, uint8_t *pIrk, uint16_t param)
{
   16cd8:	b500      	push	{lr}
   16cda:	b087      	sub	sp, #28
   16cdc:	9003      	str	r0, [sp, #12]
   16cde:	9102      	str	r1, [sp, #8]
   16ce0:	4613      	mov	r3, r2
   16ce2:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmPrivApiResolveAddr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   16ce6:	201a      	movs	r0, #26
   16ce8:	f7f6 fa44 	bl	d174 <WsfMsgAlloc>
   16cec:	9005      	str	r0, [sp, #20]
   16cee:	9b05      	ldr	r3, [sp, #20]
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d018      	beq.n	16d26 <DmPrivResolveAddr+0x4e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_RESOLVE_ADDR;
   16cf4:	9b05      	ldr	r3, [sp, #20]
   16cf6:	2260      	movs	r2, #96	; 0x60
   16cf8:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   16cfa:	9b05      	ldr	r3, [sp, #20]
   16cfc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16d00:	801a      	strh	r2, [r3, #0]
    Calc128Cpy(pMsg->irk, pIrk);
   16d02:	9b05      	ldr	r3, [sp, #20]
   16d04:	3304      	adds	r3, #4
   16d06:	9902      	ldr	r1, [sp, #8]
   16d08:	4618      	mov	r0, r3
   16d0a:	f7fd fc13 	bl	14534 <Calc128Cpy>
    BdaCpy(pMsg->addr, pAddr);
   16d0e:	9b05      	ldr	r3, [sp, #20]
   16d10:	3314      	adds	r3, #20
   16d12:	9903      	ldr	r1, [sp, #12]
   16d14:	4618      	mov	r0, r3
   16d16:	f7fd fbc7 	bl	144a8 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   16d1a:	4b05      	ldr	r3, [pc, #20]	; (16d30 <DmPrivResolveAddr+0x58>)
   16d1c:	7b1b      	ldrb	r3, [r3, #12]
   16d1e:	9905      	ldr	r1, [sp, #20]
   16d20:	4618      	mov	r0, r3
   16d22:	f7f6 fa4b 	bl	d1bc <WsfMsgSend>
  }
}
   16d26:	bf00      	nop
   16d28:	b007      	add	sp, #28
   16d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   16d2e:	bf00      	nop
   16d30:	10009568 	.word	0x10009568

00016d34 <DmPrivAddDevToResList>:
 *          to resolving list to enable address resolution in the Controller.
 */
/*************************************************************************************************/
void DmPrivAddDevToResList(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t *pPeerIrk,
                           uint8_t *pLocalIrk, bool_t enableLlPriv, uint16_t param)
{
   16d34:	b500      	push	{lr}
   16d36:	b087      	sub	sp, #28
   16d38:	9102      	str	r1, [sp, #8]
   16d3a:	9201      	str	r2, [sp, #4]
   16d3c:	9300      	str	r3, [sp, #0]
   16d3e:	4603      	mov	r3, r0
   16d40:	f88d 300f 	strb.w	r3, [sp, #15]
  dmPrivApiAddDevToResList_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   16d44:	202c      	movs	r0, #44	; 0x2c
   16d46:	f7f6 fa15 	bl	d174 <WsfMsgAlloc>
   16d4a:	9005      	str	r0, [sp, #20]
   16d4c:	9b05      	ldr	r3, [sp, #20]
   16d4e:	2b00      	cmp	r3, #0
   16d50:	d027      	beq.n	16da2 <DmPrivAddDevToResList+0x6e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_ADD_DEV_TO_RES_LIST;
   16d52:	9b05      	ldr	r3, [sp, #20]
   16d54:	2262      	movs	r2, #98	; 0x62
   16d56:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   16d58:	9b05      	ldr	r3, [sp, #20]
   16d5a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16d5e:	801a      	strh	r2, [r3, #0]
    pMsg->addrType = addrType;
   16d60:	9b05      	ldr	r3, [sp, #20]
   16d62:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16d66:	711a      	strb	r2, [r3, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   16d68:	9b05      	ldr	r3, [sp, #20]
   16d6a:	3305      	adds	r3, #5
   16d6c:	9902      	ldr	r1, [sp, #8]
   16d6e:	4618      	mov	r0, r3
   16d70:	f7fd fb9a 	bl	144a8 <BdaCpy>
    Calc128Cpy(pMsg->peerIrk, pPeerIrk);
   16d74:	9b05      	ldr	r3, [sp, #20]
   16d76:	330b      	adds	r3, #11
   16d78:	9901      	ldr	r1, [sp, #4]
   16d7a:	4618      	mov	r0, r3
   16d7c:	f7fd fbda 	bl	14534 <Calc128Cpy>
    Calc128Cpy(pMsg->localIrk, pLocalIrk);
   16d80:	9b05      	ldr	r3, [sp, #20]
   16d82:	331b      	adds	r3, #27
   16d84:	9900      	ldr	r1, [sp, #0]
   16d86:	4618      	mov	r0, r3
   16d88:	f7fd fbd4 	bl	14534 <Calc128Cpy>
    pMsg->enableLlPriv = enableLlPriv;
   16d8c:	9b05      	ldr	r3, [sp, #20]
   16d8e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   16d92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    WsfMsgSend(dmCb.handlerId, pMsg);
   16d96:	4b05      	ldr	r3, [pc, #20]	; (16dac <DmPrivAddDevToResList+0x78>)
   16d98:	7b1b      	ldrb	r3, [r3, #12]
   16d9a:	9905      	ldr	r1, [sp, #20]
   16d9c:	4618      	mov	r0, r3
   16d9e:	f7f6 fa0d 	bl	d1bc <WsfMsgSend>
  }
}
   16da2:	bf00      	nop
   16da4:	b007      	add	sp, #28
   16da6:	f85d fb04 	ldr.w	pc, [sp], #4
   16daa:	bf00      	nop
   16dac:	10009568 	.word	0x10009568

00016db0 <DmPrivClearResList>:
 *  \Note   Address resolution in the Controller will be disabled when resolving list's cleared
 *          successfully.
 */
/*************************************************************************************************/
void DmPrivClearResList(void)
{
   16db0:	b500      	push	{lr}
   16db2:	b083      	sub	sp, #12
  dmPrivMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
   16db4:	202c      	movs	r0, #44	; 0x2c
   16db6:	f7f6 f9dd 	bl	d174 <WsfMsgAlloc>
   16dba:	9001      	str	r0, [sp, #4]
   16dbc:	9b01      	ldr	r3, [sp, #4]
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d008      	beq.n	16dd4 <DmPrivClearResList+0x24>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_CLEAR_RES_LIST;
   16dc2:	9b01      	ldr	r3, [sp, #4]
   16dc4:	2264      	movs	r2, #100	; 0x64
   16dc6:	709a      	strb	r2, [r3, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   16dc8:	4b04      	ldr	r3, [pc, #16]	; (16ddc <DmPrivClearResList+0x2c>)
   16dca:	7b1b      	ldrb	r3, [r3, #12]
   16dcc:	9901      	ldr	r1, [sp, #4]
   16dce:	4618      	mov	r0, r3
   16dd0:	f7f6 f9f4 	bl	d1bc <WsfMsgSend>
  }
}
   16dd4:	bf00      	nop
   16dd6:	b003      	add	sp, #12
   16dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   16ddc:	10009568 	.word	0x10009568

00016de0 <DmPrivSetAddrResEnable>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetAddrResEnable(bool_t enable)
{
   16de0:	b500      	push	{lr}
   16de2:	b085      	sub	sp, #20
   16de4:	4603      	mov	r3, r0
   16de6:	f88d 3007 	strb.w	r3, [sp, #7]
  dmPrivApiSetAddrResEnable_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
   16dea:	202c      	movs	r0, #44	; 0x2c
   16dec:	f7f6 f9c2 	bl	d174 <WsfMsgAlloc>
   16df0:	9003      	str	r0, [sp, #12]
   16df2:	9b03      	ldr	r3, [sp, #12]
   16df4:	2b00      	cmp	r3, #0
   16df6:	d00f      	beq.n	16e18 <DmPrivSetAddrResEnable+0x38>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
   16df8:	9b03      	ldr	r3, [sp, #12]
   16dfa:	2265      	movs	r2, #101	; 0x65
   16dfc:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = 0;
   16dfe:	9b03      	ldr	r3, [sp, #12]
   16e00:	2200      	movs	r2, #0
   16e02:	801a      	strh	r2, [r3, #0]
    pMsg->enable = enable;
   16e04:	9b03      	ldr	r3, [sp, #12]
   16e06:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16e0a:	711a      	strb	r2, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   16e0c:	4b04      	ldr	r3, [pc, #16]	; (16e20 <DmPrivSetAddrResEnable+0x40>)
   16e0e:	7b1b      	ldrb	r3, [r3, #12]
   16e10:	9903      	ldr	r1, [sp, #12]
   16e12:	4618      	mov	r0, r3
   16e14:	f7f6 f9d2 	bl	d1bc <WsfMsgSend>
  }
}
   16e18:	bf00      	nop
   16e1a:	b005      	add	sp, #20
   16e1c:	f85d fb04 	ldr.w	pc, [sp], #4
   16e20:	10009568 	.word	0x10009568

00016e24 <DmPrivSetPrivacyMode>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetPrivacyMode(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t mode)
{
   16e24:	b500      	push	{lr}
   16e26:	b085      	sub	sp, #20
   16e28:	4603      	mov	r3, r0
   16e2a:	9100      	str	r1, [sp, #0]
   16e2c:	f88d 3007 	strb.w	r3, [sp, #7]
   16e30:	4613      	mov	r3, r2
   16e32:	f88d 3006 	strb.w	r3, [sp, #6]
  dmPrivApiSetPrivacyMode_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   16e36:	200c      	movs	r0, #12
   16e38:	f7f6 f99c 	bl	d174 <WsfMsgAlloc>
   16e3c:	9003      	str	r0, [sp, #12]
   16e3e:	9b03      	ldr	r3, [sp, #12]
   16e40:	2b00      	cmp	r3, #0
   16e42:	d016      	beq.n	16e72 <DmPrivSetPrivacyMode+0x4e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_PRIVACY_MODE;
   16e44:	9b03      	ldr	r3, [sp, #12]
   16e46:	2266      	movs	r2, #102	; 0x66
   16e48:	709a      	strb	r2, [r3, #2]
    pMsg->addrType = addrType;
   16e4a:	9b03      	ldr	r3, [sp, #12]
   16e4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16e50:	711a      	strb	r2, [r3, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   16e52:	9b03      	ldr	r3, [sp, #12]
   16e54:	3305      	adds	r3, #5
   16e56:	9900      	ldr	r1, [sp, #0]
   16e58:	4618      	mov	r0, r3
   16e5a:	f7fd fb25 	bl	144a8 <BdaCpy>
    pMsg->mode = mode;
   16e5e:	9b03      	ldr	r3, [sp, #12]
   16e60:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16e64:	72da      	strb	r2, [r3, #11]
    WsfMsgSend(dmCb.handlerId, pMsg);
   16e66:	4b05      	ldr	r3, [pc, #20]	; (16e7c <DmPrivSetPrivacyMode+0x58>)
   16e68:	7b1b      	ldrb	r3, [r3, #12]
   16e6a:	9903      	ldr	r1, [sp, #12]
   16e6c:	4618      	mov	r0, r3
   16e6e:	f7f6 f9a5 	bl	d1bc <WsfMsgSend>
  }
}
   16e72:	bf00      	nop
   16e74:	b005      	add	sp, #20
   16e76:	f85d fb04 	ldr.w	pc, [sp], #4
   16e7a:	bf00      	nop
   16e7c:	10009568 	.word	0x10009568

00016e80 <dmSecHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecHciHandler(hciEvt_t *pEvent)
{
   16e80:	b500      	push	{lr}
   16e82:	b089      	sub	sp, #36	; 0x24
   16e84:	9001      	str	r0, [sp, #4]
  dmConnCcb_t           *pCcb;
  uint8_t               *pKey;
  dmSecEncryptIndEvt_t  encryptInd;
  uint8_t               secLevel;

  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   16e86:	9b01      	ldr	r3, [sp, #4]
   16e88:	881b      	ldrh	r3, [r3, #0]
   16e8a:	4618      	mov	r0, r3
   16e8c:	f7fe f8ce 	bl	1502c <dmConnCcbByHandle>
   16e90:	9007      	str	r0, [sp, #28]
   16e92:	9b07      	ldr	r3, [sp, #28]
   16e94:	2b00      	cmp	r3, #0
   16e96:	d07e      	beq.n	16f96 <dmSecHciHandler+0x116>
  {
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
   16e98:	9b01      	ldr	r3, [sp, #4]
   16e9a:	789b      	ldrb	r3, [r3, #2]
   16e9c:	2b10      	cmp	r3, #16
   16e9e:	d13e      	bne.n	16f1e <dmSecHciHandler+0x9e>
    {
      /* if ediv and rand are zero then check if STK is available from SMP */
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   16ea0:	9b01      	ldr	r3, [sp, #4]
   16ea2:	89db      	ldrh	r3, [r3, #14]
   16ea4:	2b00      	cmp	r3, #0
   16ea6:	d123      	bne.n	16ef0 <dmSecHciHandler+0x70>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
   16ea8:	9b01      	ldr	r3, [sp, #4]
   16eaa:	3306      	adds	r3, #6
   16eac:	2208      	movs	r2, #8
   16eae:	493b      	ldr	r1, [pc, #236]	; (16f9c <dmSecHciHandler+0x11c>)
   16eb0:	4618      	mov	r0, r3
   16eb2:	f011 fa93 	bl	283dc <memcmp>
   16eb6:	4603      	mov	r3, r0
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   16eb8:	2b00      	cmp	r3, #0
   16eba:	d119      	bne.n	16ef0 <dmSecHciHandler+0x70>
      {
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
   16ebc:	9b07      	ldr	r3, [sp, #28]
   16ebe:	7c1b      	ldrb	r3, [r3, #16]
   16ec0:	f10d 020f 	add.w	r2, sp, #15
   16ec4:	4611      	mov	r1, r2
   16ec6:	4618      	mov	r0, r3
   16ec8:	f005 fa86 	bl	1c3d8 <SmpDmGetStk>
   16ecc:	9006      	str	r0, [sp, #24]
   16ece:	9b06      	ldr	r3, [sp, #24]
   16ed0:	2b00      	cmp	r3, #0
   16ed2:	d00d      	beq.n	16ef0 <dmSecHciHandler+0x70>
        {
          /* store security level */
          pCcb->tmpSecLevel = secLevel;
   16ed4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16ed8:	9b07      	ldr	r3, [sp, #28]
   16eda:	761a      	strb	r2, [r3, #24]

          /* not using LTK */
          pCcb->usingLtk = FALSE;
   16edc:	9b07      	ldr	r3, [sp, #28]
   16ede:	2200      	movs	r2, #0
   16ee0:	749a      	strb	r2, [r3, #18]

          /* provide key to HCI */
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
   16ee2:	9b01      	ldr	r3, [sp, #4]
   16ee4:	881b      	ldrh	r3, [r3, #0]
   16ee6:	9906      	ldr	r1, [sp, #24]
   16ee8:	4618      	mov	r0, r3
   16eea:	f007 fa00 	bl	1e2ee <HciLeLtkReqReplCmd>
   16eee:	e052      	b.n	16f96 <dmSecHciHandler+0x116>
      }

      /* call callback to get key from app */

      /* set connection busy */
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   16ef0:	9b07      	ldr	r3, [sp, #28]
   16ef2:	7c1b      	ldrb	r3, [r3, #16]
   16ef4:	2201      	movs	r2, #1
   16ef6:	2102      	movs	r1, #2
   16ef8:	4618      	mov	r0, r3
   16efa:	f7fe ffff 	bl	15efc <DmConnSetIdle>

      /* using LTK */
      pCcb->usingLtk = TRUE;
   16efe:	9b07      	ldr	r3, [sp, #28]
   16f00:	2201      	movs	r2, #1
   16f02:	749a      	strb	r2, [r3, #18]

      /* use the header from the encryptInd struct for efficiency */
      pEvent->hdr.param = pCcb->connId;
   16f04:	9b07      	ldr	r3, [sp, #28]
   16f06:	7c1b      	ldrb	r3, [r3, #16]
   16f08:	b29a      	uxth	r2, r3
   16f0a:	9b01      	ldr	r3, [sp, #4]
   16f0c:	801a      	strh	r2, [r3, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
   16f0e:	9b01      	ldr	r3, [sp, #4]
   16f10:	2230      	movs	r2, #48	; 0x30
   16f12:	709a      	strb	r2, [r3, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   16f14:	4b22      	ldr	r3, [pc, #136]	; (16fa0 <dmSecHciHandler+0x120>)
   16f16:	689b      	ldr	r3, [r3, #8]
   16f18:	9801      	ldr	r0, [sp, #4]
   16f1a:	4798      	blx	r3
   16f1c:	e03b      	b.n	16f96 <dmSecHciHandler+0x116>
    }
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   16f1e:	9b01      	ldr	r3, [sp, #4]
   16f20:	789b      	ldrb	r3, [r3, #2]
   16f22:	2b0e      	cmp	r3, #14
   16f24:	d003      	beq.n	16f2e <dmSecHciHandler+0xae>
             pEvent->hdr.event == HCI_ENC_CHANGE_CBACK_EVT)
   16f26:	9b01      	ldr	r3, [sp, #4]
   16f28:	789b      	ldrb	r3, [r3, #2]
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   16f2a:	2b0f      	cmp	r3, #15
   16f2c:	d133      	bne.n	16f96 <dmSecHciHandler+0x116>
    {
      /* set connection idle */
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   16f2e:	9b07      	ldr	r3, [sp, #28]
   16f30:	7c1b      	ldrb	r3, [r3, #16]
   16f32:	2200      	movs	r2, #0
   16f34:	2102      	movs	r1, #2
   16f36:	4618      	mov	r0, r3
   16f38:	f7fe ffe0 	bl	15efc <DmConnSetIdle>

      encryptInd.hdr.param = pCcb->connId;
   16f3c:	9b07      	ldr	r3, [sp, #28]
   16f3e:	7c1b      	ldrb	r3, [r3, #16]
   16f40:	b29b      	uxth	r3, r3
   16f42:	f8ad 3010 	strh.w	r3, [sp, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   16f46:	9b01      	ldr	r3, [sp, #4]
   16f48:	78db      	ldrb	r3, [r3, #3]
   16f4a:	f88d 3013 	strb.w	r3, [sp, #19]
      if (encryptInd.hdr.status == HCI_SUCCESS)
   16f4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   16f52:	2b00      	cmp	r3, #0
   16f54:	d10b      	bne.n	16f6e <dmSecHciHandler+0xee>
      {
        encryptInd.hdr.event = DM_SEC_ENCRYPT_IND;
   16f56:	232c      	movs	r3, #44	; 0x2c
   16f58:	f88d 3012 	strb.w	r3, [sp, #18]

        /* update security level of connection */
        pCcb->secLevel = pCcb->tmpSecLevel;
   16f5c:	9b07      	ldr	r3, [sp, #28]
   16f5e:	7e1a      	ldrb	r2, [r3, #24]
   16f60:	9b07      	ldr	r3, [sp, #28]
   16f62:	75da      	strb	r2, [r3, #23]

        /* set LTK flag */
        encryptInd.usingLtk = pCcb->usingLtk;
   16f64:	9b07      	ldr	r3, [sp, #28]
   16f66:	7c9b      	ldrb	r3, [r3, #18]
   16f68:	f88d 3014 	strb.w	r3, [sp, #20]
   16f6c:	e002      	b.n	16f74 <dmSecHciHandler+0xf4>
      }
      else
      {
        encryptInd.hdr.event = DM_SEC_ENCRYPT_FAIL_IND;
   16f6e:	232d      	movs	r3, #45	; 0x2d
   16f70:	f88d 3012 	strb.w	r3, [sp, #18]
      }

      /* call callback before passing to SMP */
      DmSmpCbackExec((dmEvt_t *) &encryptInd);
   16f74:	ab04      	add	r3, sp, #16
   16f76:	4618      	mov	r0, r3
   16f78:	f000 f866 	bl	17048 <DmSmpCbackExec>

      /* pass to SMP */
      encryptInd.hdr.param = pCcb->connId;
   16f7c:	9b07      	ldr	r3, [sp, #28]
   16f7e:	7c1b      	ldrb	r3, [r3, #16]
   16f80:	b29b      	uxth	r3, r3
   16f82:	f8ad 3010 	strh.w	r3, [sp, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   16f86:	9b01      	ldr	r3, [sp, #4]
   16f88:	78db      	ldrb	r3, [r3, #3]
   16f8a:	f88d 3013 	strb.w	r3, [sp, #19]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   16f8e:	ab04      	add	r3, sp, #16
   16f90:	4618      	mov	r0, r3
   16f92:	f005 f9e7 	bl	1c364 <SmpDmEncryptInd>
    }
  }
}
   16f96:	b009      	add	sp, #36	; 0x24
   16f98:	f85d fb04 	ldr.w	pc, [sp], #4
   16f9c:	0002c240 	.word	0x0002c240
   16fa0:	10009568 	.word	0x10009568

00016fa4 <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
   16fa4:	b500      	push	{lr}
   16fa6:	b085      	sub	sp, #20
   16fa8:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
   16faa:	9b01      	ldr	r3, [sp, #4]
   16fac:	881b      	ldrh	r3, [r3, #0]
   16fae:	b2db      	uxtb	r3, r3
   16fb0:	4618      	mov	r0, r3
   16fb2:	f7fe f89d 	bl	150f0 <dmConnCcbById>
   16fb6:	9003      	str	r0, [sp, #12]
   16fb8:	9b03      	ldr	r3, [sp, #12]
   16fba:	2b00      	cmp	r3, #0
   16fbc:	d03e      	beq.n	1703c <dmSecMsgHandler+0x98>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
   16fbe:	9b01      	ldr	r3, [sp, #4]
   16fc0:	789b      	ldrb	r3, [r3, #2]
   16fc2:	2b50      	cmp	r3, #80	; 0x50
   16fc4:	d002      	beq.n	16fcc <dmSecMsgHandler+0x28>
   16fc6:	2b51      	cmp	r3, #81	; 0x51
   16fc8:	d01a      	beq.n	17000 <dmSecMsgHandler+0x5c>
        HciLeLtkReqNegReplCmd(pCcb->handle);
      }
      break;

    default:
      break;
   16fca:	e038      	b.n	1703e <dmSecMsgHandler+0x9a>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   16fcc:	9b03      	ldr	r3, [sp, #12]
   16fce:	7c1b      	ldrb	r3, [r3, #16]
   16fd0:	2201      	movs	r2, #1
   16fd2:	2102      	movs	r1, #2
   16fd4:	4618      	mov	r0, r3
   16fd6:	f7fe ff91 	bl	15efc <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
   16fda:	9b01      	ldr	r3, [sp, #4]
   16fdc:	7f9a      	ldrb	r2, [r3, #30]
   16fde:	9b03      	ldr	r3, [sp, #12]
   16fe0:	761a      	strb	r2, [r3, #24]
      pCcb->usingLtk = TRUE;
   16fe2:	9b03      	ldr	r3, [sp, #12]
   16fe4:	2201      	movs	r2, #1
   16fe6:	749a      	strb	r2, [r3, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   16fe8:	9b03      	ldr	r3, [sp, #12]
   16fea:	8998      	ldrh	r0, [r3, #12]
   16fec:	9b01      	ldr	r3, [sp, #4]
   16fee:	f103 0114 	add.w	r1, r3, #20
   16ff2:	9b01      	ldr	r3, [sp, #4]
   16ff4:	8b9a      	ldrh	r2, [r3, #28]
                              pMsg->encryptReq.ltk.ediv, pMsg->encryptReq.ltk.key);
   16ff6:	9b01      	ldr	r3, [sp, #4]
   16ff8:	3304      	adds	r3, #4
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   16ffa:	f007 fb3a 	bl	1e672 <HciLeStartEncryptionCmd>
      break;
   16ffe:	e01e      	b.n	1703e <dmSecMsgHandler+0x9a>
      if (pMsg->ltkRsp.keyFound)
   17000:	9b01      	ldr	r3, [sp, #4]
   17002:	7d1b      	ldrb	r3, [r3, #20]
   17004:	2b00      	cmp	r3, #0
   17006:	d00c      	beq.n	17022 <dmSecMsgHandler+0x7e>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   17008:	9b01      	ldr	r3, [sp, #4]
   1700a:	7d5a      	ldrb	r2, [r3, #21]
   1700c:	9b03      	ldr	r3, [sp, #12]
   1700e:	761a      	strb	r2, [r3, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   17010:	9b03      	ldr	r3, [sp, #12]
   17012:	899a      	ldrh	r2, [r3, #12]
   17014:	9b01      	ldr	r3, [sp, #4]
   17016:	3304      	adds	r3, #4
   17018:	4619      	mov	r1, r3
   1701a:	4610      	mov	r0, r2
   1701c:	f007 f967 	bl	1e2ee <HciLeLtkReqReplCmd>
      break;
   17020:	e00d      	b.n	1703e <dmSecMsgHandler+0x9a>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   17022:	9b03      	ldr	r3, [sp, #12]
   17024:	7c1b      	ldrb	r3, [r3, #16]
   17026:	2200      	movs	r2, #0
   17028:	2102      	movs	r1, #2
   1702a:	4618      	mov	r0, r3
   1702c:	f7fe ff66 	bl	15efc <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
   17030:	9b03      	ldr	r3, [sp, #12]
   17032:	899b      	ldrh	r3, [r3, #12]
   17034:	4618      	mov	r0, r3
   17036:	f007 f932 	bl	1e29e <HciLeLtkReqNegReplCmd>
      break;
   1703a:	e000      	b.n	1703e <dmSecMsgHandler+0x9a>
    }
  }
   1703c:	bf00      	nop
}
   1703e:	bf00      	nop
   17040:	b005      	add	sp, #20
   17042:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00017048 <DmSmpCbackExec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSmpCbackExec(dmEvt_t *pDmEvt)
{
   17048:	b500      	push	{lr}
   1704a:	b083      	sub	sp, #12
   1704c:	9001      	str	r0, [sp, #4]
  /* certain messages need to get to ATT */
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1704e:	9b01      	ldr	r3, [sp, #4]
   17050:	789b      	ldrb	r3, [r3, #2]
   17052:	2b2a      	cmp	r3, #42	; 0x2a
   17054:	d003      	beq.n	1705e <DmSmpCbackExec+0x16>
      pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   17056:	9b01      	ldr	r3, [sp, #4]
   17058:	789b      	ldrb	r3, [r3, #2]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1705a:	2b2c      	cmp	r3, #44	; 0x2c
   1705c:	d109      	bne.n	17072 <DmSmpCbackExec+0x2a>
  {
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   1705e:	4b09      	ldr	r3, [pc, #36]	; (17084 <DmSmpCbackExec+0x3c>)
   17060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   17064:	2b00      	cmp	r3, #0
   17066:	d004      	beq.n	17072 <DmSmpCbackExec+0x2a>
    {
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   17068:	4b06      	ldr	r3, [pc, #24]	; (17084 <DmSmpCbackExec+0x3c>)
   1706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1706e:	9801      	ldr	r0, [sp, #4]
   17070:	4798      	blx	r3
    }
  }

  /* execute DM client callback */
  (*dmCb.cback)(pDmEvt);
   17072:	4b05      	ldr	r3, [pc, #20]	; (17088 <DmSmpCbackExec+0x40>)
   17074:	689b      	ldr	r3, [r3, #8]
   17076:	9801      	ldr	r0, [sp, #4]
   17078:	4798      	blx	r3
}
   1707a:	bf00      	nop
   1707c:	b003      	add	sp, #12
   1707e:	f85d fb04 	ldr.w	pc, [sp], #4
   17082:	bf00      	nop
   17084:	100094a4 	.word	0x100094a4
   17088:	10009568 	.word	0x10009568

0001708c <DmSecCancelReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCancelReq(dmConnId_t connId, uint8_t reason)
{
   1708c:	b500      	push	{lr}
   1708e:	b085      	sub	sp, #20
   17090:	4603      	mov	r3, r0
   17092:	460a      	mov	r2, r1
   17094:	f88d 3007 	strb.w	r3, [sp, #7]
   17098:	4613      	mov	r3, r2
   1709a:	f88d 3006 	strb.w	r3, [sp, #6]
  wsfMsgHdr_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   1709e:	2004      	movs	r0, #4
   170a0:	f7f6 f868 	bl	d174 <WsfMsgAlloc>
   170a4:	9003      	str	r0, [sp, #12]
   170a6:	9b03      	ldr	r3, [sp, #12]
   170a8:	2b00      	cmp	r3, #0
   170aa:	d00e      	beq.n	170ca <DmSecCancelReq+0x3e>
  {
    pMsg->event = SMP_MSG_API_CANCEL_REQ;
   170ac:	9b03      	ldr	r3, [sp, #12]
   170ae:	2203      	movs	r2, #3
   170b0:	709a      	strb	r2, [r3, #2]
    pMsg->param = connId;
   170b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170b6:	b29a      	uxth	r2, r3
   170b8:	9b03      	ldr	r3, [sp, #12]
   170ba:	801a      	strh	r2, [r3, #0]
    pMsg->status = reason;
   170bc:	9b03      	ldr	r3, [sp, #12]
   170be:	f89d 2006 	ldrb.w	r2, [sp, #6]
   170c2:	70da      	strb	r2, [r3, #3]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   170c4:	9803      	ldr	r0, [sp, #12]
   170c6:	f005 f93d 	bl	1c344 <SmpDmMsgSend>
  }
}
   170ca:	bf00      	nop
   170cc:	b005      	add	sp, #20
   170ce:	f85d fb04 	ldr.w	pc, [sp], #4

000170d2 <DmSecAuthRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecAuthRsp(dmConnId_t connId, uint8_t authDataLen, uint8_t *pAuthData)
{
   170d2:	b500      	push	{lr}
   170d4:	b085      	sub	sp, #20
   170d6:	4603      	mov	r3, r0
   170d8:	9200      	str	r2, [sp, #0]
   170da:	f88d 3007 	strb.w	r3, [sp, #7]
   170de:	460b      	mov	r3, r1
   170e0:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmAuthRsp_t   *pMsg;

  WSF_ASSERT(authDataLen <= SMP_OOB_LEN);

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   170e4:	2016      	movs	r0, #22
   170e6:	f7f6 f845 	bl	d174 <WsfMsgAlloc>
   170ea:	9003      	str	r0, [sp, #12]
   170ec:	9b03      	ldr	r3, [sp, #12]
   170ee:	2b00      	cmp	r3, #0
   170f0:	d019      	beq.n	17126 <DmSecAuthRsp+0x54>
  {
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
   170f2:	9b03      	ldr	r3, [sp, #12]
   170f4:	2204      	movs	r2, #4
   170f6:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   170f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170fc:	b29a      	uxth	r2, r3
   170fe:	9b03      	ldr	r3, [sp, #12]
   17100:	801a      	strh	r2, [r3, #0]
    pMsg->authDataLen = authDataLen;
   17102:	9b03      	ldr	r3, [sp, #12]
   17104:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17108:	751a      	strb	r2, [r3, #20]

    if (pAuthData != NULL)
   1710a:	9b00      	ldr	r3, [sp, #0]
   1710c:	2b00      	cmp	r3, #0
   1710e:	d007      	beq.n	17120 <DmSecAuthRsp+0x4e>
    {
      memcpy(pMsg->authData, pAuthData, authDataLen);
   17110:	9b03      	ldr	r3, [sp, #12]
   17112:	3304      	adds	r3, #4
   17114:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17118:	9900      	ldr	r1, [sp, #0]
   1711a:	4618      	mov	r0, r3
   1711c:	f7f4 fff0 	bl	c100 <memcpy>
    }

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   17120:	9803      	ldr	r0, [sp, #12]
   17122:	f005 f90f 	bl	1c344 <SmpDmMsgSend>
  }
}
   17126:	bf00      	nop
   17128:	b005      	add	sp, #20
   1712a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00017130 <DmSecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecInit(void)
{
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   17130:	4b05      	ldr	r3, [pc, #20]	; (17148 <DmSecInit+0x18>)
   17132:	4a06      	ldr	r2, [pc, #24]	; (1714c <DmSecInit+0x1c>)
   17134:	615a      	str	r2, [r3, #20]

  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   17136:	4b06      	ldr	r3, [pc, #24]	; (17150 <DmSecInit+0x20>)
   17138:	4a06      	ldr	r2, [pc, #24]	; (17154 <DmSecInit+0x24>)
   1713a:	601a      	str	r2, [r3, #0]
   1713c:	4b04      	ldr	r3, [pc, #16]	; (17150 <DmSecInit+0x20>)
   1713e:	681b      	ldr	r3, [r3, #0]
   17140:	4a03      	ldr	r2, [pc, #12]	; (17150 <DmSecInit+0x20>)
   17142:	6053      	str	r3, [r2, #4]
}
   17144:	bf00      	nop
   17146:	4770      	bx	lr
   17148:	10002b78 	.word	0x10002b78
   1714c:	0002c470 	.word	0x0002c470
   17150:	1000959c 	.word	0x1000959c
   17154:	0002c240 	.word	0x0002c240

00017158 <DmSecSetLocalIrk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetLocalIrk(uint8_t *pIrk)
{
   17158:	b500      	push	{lr}
   1715a:	b083      	sub	sp, #12
   1715c:	9001      	str	r0, [sp, #4]
  WsfTaskLock();
   1715e:	f7f6 f895 	bl	d28c <WsfTaskLock>
  dmSecCb.pIrk = pIrk;
   17162:	4a04      	ldr	r2, [pc, #16]	; (17174 <DmSecSetLocalIrk+0x1c>)
   17164:	9b01      	ldr	r3, [sp, #4]
   17166:	6013      	str	r3, [r2, #0]
  WsfTaskUnlock();
   17168:	f7f6 f895 	bl	d296 <WsfTaskUnlock>
}
   1716c:	bf00      	nop
   1716e:	b003      	add	sp, #12
   17170:	f85d fb04 	ldr.w	pc, [sp], #4
   17174:	1000959c 	.word	0x1000959c

00017178 <DmSecGetLocalCsrk>:
 *  \return Pointer to CSRK.
 */
/*************************************************************************************************/
uint8_t *DmSecGetLocalCsrk(void)
{
  return dmSecCb.pCsrk;
   17178:	4b01      	ldr	r3, [pc, #4]	; (17180 <DmSecGetLocalCsrk+0x8>)
   1717a:	685b      	ldr	r3, [r3, #4]
}
   1717c:	4618      	mov	r0, r3
   1717e:	4770      	bx	lr
   17180:	1000959c 	.word	0x1000959c

00017184 <DmSecGetLocalIrk>:
 *  \return Pointer to IRK.
 */
/*************************************************************************************************/
uint8_t *DmSecGetLocalIrk(void)
{
  return dmSecCb.pIrk;
   17184:	4b01      	ldr	r3, [pc, #4]	; (1718c <DmSecGetLocalIrk+0x8>)
   17186:	681b      	ldr	r3, [r3, #0]
}
   17188:	4618      	mov	r0, r3
   1718a:	4770      	bx	lr
   1718c:	1000959c 	.word	0x1000959c

00017190 <dmSecReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecReset(void)
{
   17190:	b508      	push	{r3, lr}
  /* initialize smp database */
  SmpDbInit();
   17192:	f004 fb27 	bl	1b7e4 <SmpDbInit>
}
   17196:	bf00      	nop
   17198:	bd08      	pop	{r3, pc}
	...

0001719c <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
   1719c:	b500      	push	{lr}
   1719e:	b08d      	sub	sp, #52	; 0x34
   171a0:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   171a2:	9b01      	ldr	r3, [sp, #4]
   171a4:	789b      	ldrb	r3, [r3, #2]
   171a6:	2b81      	cmp	r3, #129	; 0x81
   171a8:	d107      	bne.n	171ba <dmSecLescMsgHandler+0x1e>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
   171aa:	9b01      	ldr	r3, [sp, #4]
   171ac:	2234      	movs	r2, #52	; 0x34
   171ae:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   171b0:	4b19      	ldr	r3, [pc, #100]	; (17218 <dmSecLescMsgHandler+0x7c>)
   171b2:	689b      	ldr	r3, [r3, #8]
   171b4:	9801      	ldr	r0, [sp, #4]
   171b6:	4798      	blx	r3

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
   171b8:	e02a      	b.n	17210 <dmSecLescMsgHandler+0x74>
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
   171ba:	9b01      	ldr	r3, [sp, #4]
   171bc:	789b      	ldrb	r3, [r3, #2]
   171be:	2b80      	cmp	r3, #128	; 0x80
   171c0:	d126      	bne.n	17210 <dmSecLescMsgHandler+0x74>
    secCmacMsg_t *pCmacMsg = (secCmacMsg_t *) pMsg;
   171c2:	9b01      	ldr	r3, [sp, #4]
   171c4:	930b      	str	r3, [sp, #44]	; 0x2c
    WsfBufFree(pCmacMsg->pPlainText);
   171c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171c8:	689b      	ldr	r3, [r3, #8]
   171ca:	4618      	mov	r0, r3
   171cc:	f7f5 ff82 	bl	d0d4 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   171d0:	2333      	movs	r3, #51	; 0x33
   171d2:	f88d 300a 	strb.w	r3, [sp, #10]
    oobEvt.hdr.status = HCI_SUCCESS;
   171d6:	2300      	movs	r3, #0
   171d8:	f88d 300b 	strb.w	r3, [sp, #11]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   171dc:	9b01      	ldr	r3, [sp, #4]
   171de:	685a      	ldr	r2, [r3, #4]
   171e0:	ab02      	add	r3, sp, #8
   171e2:	3304      	adds	r3, #4
   171e4:	4611      	mov	r1, r2
   171e6:	4618      	mov	r0, r3
   171e8:	f7fd f9a4 	bl	14534 <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   171ec:	4b0b      	ldr	r3, [pc, #44]	; (1721c <dmSecLescMsgHandler+0x80>)
   171ee:	681a      	ldr	r2, [r3, #0]
   171f0:	ab02      	add	r3, sp, #8
   171f2:	3314      	adds	r3, #20
   171f4:	4611      	mov	r1, r2
   171f6:	4618      	mov	r0, r3
   171f8:	f7fd f99c 	bl	14534 <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
   171fc:	4b07      	ldr	r3, [pc, #28]	; (1721c <dmSecLescMsgHandler+0x80>)
   171fe:	681b      	ldr	r3, [r3, #0]
   17200:	4618      	mov	r0, r3
   17202:	f7f5 ff67 	bl	d0d4 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
   17206:	4b04      	ldr	r3, [pc, #16]	; (17218 <dmSecLescMsgHandler+0x7c>)
   17208:	689b      	ldr	r3, [r3, #8]
   1720a:	aa02      	add	r2, sp, #8
   1720c:	4610      	mov	r0, r2
   1720e:	4798      	blx	r3
}
   17210:	bf00      	nop
   17212:	b00d      	add	sp, #52	; 0x34
   17214:	f85d fb04 	ldr.w	pc, [sp], #4
   17218:	10009568 	.word	0x10009568
   1721c:	10004474 	.word	0x10004474

00017220 <DmSecGenerateEccKeyReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecGenerateEccKeyReq()
{
   17220:	b508      	push	{r3, lr}
  SecEccGenKey(dmCb.handlerId, 0, DM_SEC_MSG_ECC_KEY_CNF);
   17222:	4b04      	ldr	r3, [pc, #16]	; (17234 <DmSecGenerateEccKeyReq+0x14>)
   17224:	7b1b      	ldrb	r3, [r3, #12]
   17226:	2281      	movs	r2, #129	; 0x81
   17228:	2100      	movs	r1, #0
   1722a:	4618      	mov	r0, r3
   1722c:	f7fc f809 	bl	13242 <SecEccGenKey>
}
   17230:	bf00      	nop
   17232:	bd08      	pop	{r3, pc}
   17234:	10009568 	.word	0x10009568

00017238 <DmSecSetEccKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetEccKey(secEccKey_t *pKey)
{
   17238:	b500      	push	{lr}
   1723a:	b083      	sub	sp, #12
   1723c:	9001      	str	r0, [sp, #4]
  memcpy(&localEccKey, pKey, sizeof(secEccKey_t));
   1723e:	4a06      	ldr	r2, [pc, #24]	; (17258 <DmSecSetEccKey+0x20>)
   17240:	9b01      	ldr	r3, [sp, #4]
   17242:	4610      	mov	r0, r2
   17244:	4619      	mov	r1, r3
   17246:	2360      	movs	r3, #96	; 0x60
   17248:	461a      	mov	r2, r3
   1724a:	f7f4 ff59 	bl	c100 <memcpy>
}
   1724e:	bf00      	nop
   17250:	b003      	add	sp, #12
   17252:	f85d fb04 	ldr.w	pc, [sp], #4
   17256:	bf00      	nop
   17258:	10004478 	.word	0x10004478

0001725c <DmSecGetEccKey>:
 *  \return Pointer to local ECC key.
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
   1725c:	4b01      	ldr	r3, [pc, #4]	; (17264 <DmSecGetEccKey+0x8>)
}
   1725e:	4618      	mov	r0, r3
   17260:	4770      	bx	lr
   17262:	bf00      	nop
   17264:	10004478 	.word	0x10004478

00017268 <DmSecCompareRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCompareRsp(dmConnId_t connId, bool_t valid)
{
   17268:	b500      	push	{lr}
   1726a:	b085      	sub	sp, #20
   1726c:	4603      	mov	r3, r0
   1726e:	460a      	mov	r2, r1
   17270:	f88d 3007 	strb.w	r3, [sp, #7]
   17274:	4613      	mov	r3, r2
   17276:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   1727a:	2016      	movs	r0, #22
   1727c:	f7f5 ff7a 	bl	d174 <WsfMsgAlloc>
   17280:	9003      	str	r0, [sp, #12]
   17282:	9b03      	ldr	r3, [sp, #12]
   17284:	2b00      	cmp	r3, #0
   17286:	d016      	beq.n	172b6 <DmSecCompareRsp+0x4e>
  {
    /* Execution an an SMP state machine event to send the compare response */
    pMsg->hdr.param = connId;
   17288:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1728c:	b29a      	uxth	r2, r3
   1728e:	9b03      	ldr	r3, [sp, #12]
   17290:	801a      	strh	r2, [r3, #0]

    if (valid)
   17292:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17296:	2b00      	cmp	r3, #0
   17298:	d003      	beq.n	172a2 <DmSecCompareRsp+0x3a>
    {
      pMsg->hdr.event = SMP_MSG_API_USER_CONFIRM;
   1729a:	9b03      	ldr	r3, [sp, #12]
   1729c:	2216      	movs	r2, #22
   1729e:	709a      	strb	r2, [r3, #2]
   172a0:	e006      	b.n	172b0 <DmSecCompareRsp+0x48>
    }
    else
    {
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
   172a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   172a6:	220c      	movs	r2, #12
   172a8:	9903      	ldr	r1, [sp, #12]
   172aa:	4618      	mov	r0, r3
   172ac:	f006 fb84 	bl	1d9b8 <SmpScGetCancelMsgWithReattempt>
    }

    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   172b0:	9803      	ldr	r0, [sp, #12]
   172b2:	f005 f847 	bl	1c344 <SmpDmMsgSend>
  }
}
   172b6:	bf00      	nop
   172b8:	b005      	add	sp, #20
   172ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000172c0 <DmSecGetCompareValue>:
 *
 *  \return Six-digit compare value.
 */
/*************************************************************************************************/
uint32_t DmSecGetCompareValue(uint8_t *pConfirm)
{
   172c0:	b084      	sub	sp, #16
   172c2:	9001      	str	r0, [sp, #4]
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   172c4:	9b01      	ldr	r3, [sp, #4]
   172c6:	330f      	adds	r3, #15
   172c8:	781b      	ldrb	r3, [r3, #0]
   172ca:	461a      	mov	r2, r3
                     ((uint32_t) pConfirm[14] << 8)  +
   172cc:	9b01      	ldr	r3, [sp, #4]
   172ce:	330e      	adds	r3, #14
   172d0:	781b      	ldrb	r3, [r3, #0]
   172d2:	021b      	lsls	r3, r3, #8
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   172d4:	441a      	add	r2, r3
                     ((uint32_t) pConfirm[13] << 16) +
   172d6:	9b01      	ldr	r3, [sp, #4]
   172d8:	330d      	adds	r3, #13
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	041b      	lsls	r3, r3, #16
                     ((uint32_t) pConfirm[14] << 8)  +
   172de:	441a      	add	r2, r3
                     ((uint32_t) pConfirm[12] << 24));
   172e0:	9b01      	ldr	r3, [sp, #4]
   172e2:	330c      	adds	r3, #12
   172e4:	781b      	ldrb	r3, [r3, #0]
   172e6:	061b      	lsls	r3, r3, #24
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   172e8:	4413      	add	r3, r2
   172ea:	9303      	str	r3, [sp, #12]

  /* return the least significant six digits */
  return compare % 1000000;
   172ec:	9a03      	ldr	r2, [sp, #12]
   172ee:	4b05      	ldr	r3, [pc, #20]	; (17304 <DmSecGetCompareValue+0x44>)
   172f0:	fba3 1302 	umull	r1, r3, r3, r2
   172f4:	0c9b      	lsrs	r3, r3, #18
   172f6:	4904      	ldr	r1, [pc, #16]	; (17308 <DmSecGetCompareValue+0x48>)
   172f8:	fb01 f303 	mul.w	r3, r1, r3
   172fc:	1ad3      	subs	r3, r2, r3
}
   172fe:	4618      	mov	r0, r3
   17300:	b004      	add	sp, #16
   17302:	4770      	bx	lr
   17304:	431bde83 	.word	0x431bde83
   17308:	000f4240 	.word	0x000f4240

0001730c <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
   1730c:	4b02      	ldr	r3, [pc, #8]	; (17318 <DmSecLescInit+0xc>)
   1730e:	4a03      	ldr	r2, [pc, #12]	; (1731c <DmSecLescInit+0x10>)
   17310:	621a      	str	r2, [r3, #32]
}
   17312:	bf00      	nop
   17314:	4770      	bx	lr
   17316:	bf00      	nop
   17318:	10002b78 	.word	0x10002b78
   1731c:	0002c47c 	.word	0x0002c47c

00017320 <DmSecPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairRsp(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
   17320:	b510      	push	{r4, lr}
   17322:	b084      	sub	sp, #16
   17324:	4604      	mov	r4, r0
   17326:	4608      	mov	r0, r1
   17328:	4611      	mov	r1, r2
   1732a:	461a      	mov	r2, r3
   1732c:	4623      	mov	r3, r4
   1732e:	f88d 3007 	strb.w	r3, [sp, #7]
   17332:	4603      	mov	r3, r0
   17334:	f88d 3006 	strb.w	r3, [sp, #6]
   17338:	460b      	mov	r3, r1
   1733a:	f88d 3005 	strb.w	r3, [sp, #5]
   1733e:	4613      	mov	r3, r2
   17340:	f88d 3004 	strb.w	r3, [sp, #4]
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   17344:	2008      	movs	r0, #8
   17346:	f7f5 ff15 	bl	d174 <WsfMsgAlloc>
   1734a:	9003      	str	r0, [sp, #12]
   1734c:	9b03      	ldr	r3, [sp, #12]
   1734e:	2b00      	cmp	r3, #0
   17350:	d020      	beq.n	17394 <DmSecPairRsp+0x74>
  {
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
   17352:	9b03      	ldr	r3, [sp, #12]
   17354:	2202      	movs	r2, #2
   17356:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   17358:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1735c:	b29a      	uxth	r2, r3
   1735e:	9b03      	ldr	r3, [sp, #12]
   17360:	801a      	strh	r2, [r3, #0]
    pMsg->oob = oob;
   17362:	9b03      	ldr	r3, [sp, #12]
   17364:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17368:	711a      	strb	r2, [r3, #4]
    pMsg->auth = auth;
   1736a:	9b03      	ldr	r3, [sp, #12]
   1736c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   17370:	715a      	strb	r2, [r3, #5]

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   17372:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17376:	f003 0307 	and.w	r3, r3, #7
   1737a:	b2da      	uxtb	r2, r3
   1737c:	9b03      	ldr	r3, [sp, #12]
   1737e:	719a      	strb	r2, [r3, #6]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   17380:	f89d 3018 	ldrb.w	r3, [sp, #24]
   17384:	f003 0307 	and.w	r3, r3, #7
   17388:	b2da      	uxtb	r2, r3
   1738a:	9b03      	ldr	r3, [sp, #12]
   1738c:	71da      	strb	r2, [r3, #7]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1738e:	9803      	ldr	r0, [sp, #12]
   17390:	f004 ffd8 	bl	1c344 <SmpDmMsgSend>
  }
}
   17394:	bf00      	nop
   17396:	b004      	add	sp, #16
   17398:	bd10      	pop	{r4, pc}

0001739a <DmSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSlaveReq(dmConnId_t connId, uint8_t auth)
{
   1739a:	b500      	push	{lr}
   1739c:	b085      	sub	sp, #20
   1739e:	4603      	mov	r3, r0
   173a0:	460a      	mov	r2, r1
   173a2:	f88d 3007 	strb.w	r3, [sp, #7]
   173a6:	4613      	mov	r3, r2
   173a8:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmSecurityReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
   173ac:	2006      	movs	r0, #6
   173ae:	f7f5 fee1 	bl	d174 <WsfMsgAlloc>
   173b2:	9003      	str	r0, [sp, #12]
   173b4:	9b03      	ldr	r3, [sp, #12]
   173b6:	2b00      	cmp	r3, #0
   173b8:	d00e      	beq.n	173d8 <DmSecSlaveReq+0x3e>
  {
    pMsg->hdr.event = SMP_MSG_API_SECURITY_REQ;
   173ba:	9b03      	ldr	r3, [sp, #12]
   173bc:	2205      	movs	r2, #5
   173be:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   173c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   173c4:	b29a      	uxth	r2, r3
   173c6:	9b03      	ldr	r3, [sp, #12]
   173c8:	801a      	strh	r2, [r3, #0]
    pMsg->auth = auth;
   173ca:	9b03      	ldr	r3, [sp, #12]
   173cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   173d0:	711a      	strb	r2, [r3, #4]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   173d2:	9803      	ldr	r0, [sp, #12]
   173d4:	f004 ffb6 	bl	1c344 <SmpDmMsgSend>
  }
}
   173d8:	bf00      	nop
   173da:	b005      	add	sp, #20
   173dc:	f85d fb04 	ldr.w	pc, [sp], #4

000173e0 <DmSecLtkRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLtkRsp(dmConnId_t connId, bool_t keyFound, uint8_t secLevel, uint8_t *pKey)
{
   173e0:	b500      	push	{lr}
   173e2:	b085      	sub	sp, #20
   173e4:	9300      	str	r3, [sp, #0]
   173e6:	4603      	mov	r3, r0
   173e8:	f88d 3007 	strb.w	r3, [sp, #7]
   173ec:	460b      	mov	r3, r1
   173ee:	f88d 3006 	strb.w	r3, [sp, #6]
   173f2:	4613      	mov	r3, r2
   173f4:	f88d 3005 	strb.w	r3, [sp, #5]
  dmSecApiLtkRsp_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
   173f8:	2016      	movs	r0, #22
   173fa:	f7f5 febb 	bl	d174 <WsfMsgAlloc>
   173fe:	9003      	str	r0, [sp, #12]
   17400:	9b03      	ldr	r3, [sp, #12]
   17402:	2b00      	cmp	r3, #0
   17404:	d01f      	beq.n	17446 <DmSecLtkRsp+0x66>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
   17406:	9b03      	ldr	r3, [sp, #12]
   17408:	2251      	movs	r2, #81	; 0x51
   1740a:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   1740c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17410:	b29a      	uxth	r2, r3
   17412:	9b03      	ldr	r3, [sp, #12]
   17414:	801a      	strh	r2, [r3, #0]
    pMsg->keyFound = keyFound;
   17416:	9b03      	ldr	r3, [sp, #12]
   17418:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1741c:	751a      	strb	r2, [r3, #20]
    pMsg->secLevel = secLevel;
   1741e:	9b03      	ldr	r3, [sp, #12]
   17420:	f89d 2005 	ldrb.w	r2, [sp, #5]
   17424:	755a      	strb	r2, [r3, #21]
    if (keyFound)
   17426:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1742a:	2b00      	cmp	r3, #0
   1742c:	d005      	beq.n	1743a <DmSecLtkRsp+0x5a>
    {
      Calc128Cpy(pMsg->key, pKey);
   1742e:	9b03      	ldr	r3, [sp, #12]
   17430:	3304      	adds	r3, #4
   17432:	9900      	ldr	r1, [sp, #0]
   17434:	4618      	mov	r0, r3
   17436:	f7fd f87d 	bl	14534 <Calc128Cpy>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   1743a:	4b05      	ldr	r3, [pc, #20]	; (17450 <DmSecLtkRsp+0x70>)
   1743c:	7b1b      	ldrb	r3, [r3, #12]
   1743e:	9903      	ldr	r1, [sp, #12]
   17440:	4618      	mov	r0, r3
   17442:	f7f5 febb 	bl	d1bc <WsfMsgSend>
  }
}
   17446:	bf00      	nop
   17448:	b005      	add	sp, #20
   1744a:	f85d fb04 	ldr.w	pc, [sp], #4
   1744e:	bf00      	nop
   17450:	10009568 	.word	0x10009568

00017454 <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   17454:	b500      	push	{lr}
   17456:	b085      	sub	sp, #20
   17458:	4603      	mov	r3, r0
   1745a:	9102      	str	r1, [sp, #8]
   1745c:	f88d 300f 	strb.w	r3, [sp, #15]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   17460:	f89d 000f 	ldrb.w	r0, [sp, #15]
   17464:	9b02      	ldr	r3, [sp, #8]
   17466:	9301      	str	r3, [sp, #4]
   17468:	4b05      	ldr	r3, [pc, #20]	; (17480 <GattDiscover+0x2c>)
   1746a:	9300      	str	r3, [sp, #0]
   1746c:	2303      	movs	r3, #3
   1746e:	4a05      	ldr	r2, [pc, #20]	; (17484 <GattDiscover+0x30>)
   17470:	2102      	movs	r1, #2
   17472:	f00e fea3 	bl	261bc <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   17476:	bf00      	nop
   17478:	b005      	add	sp, #20
   1747a:	f85d fb04 	ldr.w	pc, [sp], #4
   1747e:	bf00      	nop
   17480:	10002bb0 	.word	0x10002bb0
   17484:	0002c210 	.word	0x0002c210

00017488 <GattValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GattValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   17488:	b500      	push	{lr}
   1748a:	b085      	sub	sp, #20
   1748c:	9001      	str	r0, [sp, #4]
   1748e:	9100      	str	r1, [sp, #0]
  uint8_t status = ATT_SUCCESS;
   17490:	2300      	movs	r3, #0
   17492:	f88d 300f 	strb.w	r3, [sp, #15]

  /* service changed */
  if (pMsg->handle == pHdlList[GATT_SC_HDL_IDX])
   17496:	9b00      	ldr	r3, [sp, #0]
   17498:	895a      	ldrh	r2, [r3, #10]
   1749a:	9b01      	ldr	r3, [sp, #4]
   1749c:	881b      	ldrh	r3, [r3, #0]
   1749e:	429a      	cmp	r2, r3
   174a0:	d103      	bne.n	174aa <GattValueUpdate+0x22>
  {
    /* perform service changed */
    AppDiscServiceChanged(pMsg);
   174a2:	9800      	ldr	r0, [sp, #0]
   174a4:	f00e ff34 	bl	26310 <AppDiscServiceChanged>
   174a8:	e002      	b.n	174b0 <GattValueUpdate+0x28>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   174aa:	230a      	movs	r3, #10
   174ac:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return status;
   174b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   174b4:	4618      	mov	r0, r3
   174b6:	b005      	add	sp, #20
   174b8:	f85d fb04 	ldr.w	pc, [sp], #4

000174bc <GattSetSvcChangedIdx>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSetSvcChangedIdx(uint8_t idx)
{
   174bc:	b082      	sub	sp, #8
   174be:	4603      	mov	r3, r0
   174c0:	f88d 3007 	strb.w	r3, [sp, #7]
  gattServCb.svcChangedCccdIdxSet = TRUE;
   174c4:	4b04      	ldr	r3, [pc, #16]	; (174d8 <GattSetSvcChangedIdx+0x1c>)
   174c6:	2201      	movs	r2, #1
   174c8:	701a      	strb	r2, [r3, #0]
  gattServCb.svcChangedCccdIdx = idx;
   174ca:	4a03      	ldr	r2, [pc, #12]	; (174d8 <GattSetSvcChangedIdx+0x1c>)
   174cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   174d0:	7053      	strb	r3, [r2, #1]
}
   174d2:	bf00      	nop
   174d4:	b002      	add	sp, #8
   174d6:	4770      	bx	lr
   174d8:	100095a4 	.word	0x100095a4

000174dc <GattSendServiceChangedInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSendServiceChangedInd(dmConnId_t connId, uint16_t start, uint16_t end)
{
   174dc:	b500      	push	{lr}
   174de:	b085      	sub	sp, #20
   174e0:	4603      	mov	r3, r0
   174e2:	f88d 3007 	strb.w	r3, [sp, #7]
   174e6:	460b      	mov	r3, r1
   174e8:	f8ad 3004 	strh.w	r3, [sp, #4]
   174ec:	4613      	mov	r3, r2
   174ee:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t svcChangedValues[4];
  uint8_t *p;

  if (!gattServCb.svcChangedCccdIdxSet)
   174f2:	4b30      	ldr	r3, [pc, #192]	; (175b4 <GattSendServiceChangedInd+0xd8>)
   174f4:	781b      	ldrb	r3, [r3, #0]
   174f6:	2b00      	cmp	r3, #0
   174f8:	d058      	beq.n	175ac <GattSendServiceChangedInd+0xd0>
  {
    return;
  }

  p = svcChangedValues;
   174fa:	ab02      	add	r3, sp, #8
   174fc:	9303      	str	r3, [sp, #12]
  UINT16_TO_BSTREAM(p, start);
   174fe:	9b03      	ldr	r3, [sp, #12]
   17500:	1c5a      	adds	r2, r3, #1
   17502:	9203      	str	r2, [sp, #12]
   17504:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   17508:	b2d2      	uxtb	r2, r2
   1750a:	701a      	strb	r2, [r3, #0]
   1750c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17510:	0a1b      	lsrs	r3, r3, #8
   17512:	b299      	uxth	r1, r3
   17514:	9b03      	ldr	r3, [sp, #12]
   17516:	1c5a      	adds	r2, r3, #1
   17518:	9203      	str	r2, [sp, #12]
   1751a:	b2ca      	uxtb	r2, r1
   1751c:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, end);
   1751e:	9b03      	ldr	r3, [sp, #12]
   17520:	1c5a      	adds	r2, r3, #1
   17522:	9203      	str	r2, [sp, #12]
   17524:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17528:	b2d2      	uxtb	r2, r2
   1752a:	701a      	strb	r2, [r3, #0]
   1752c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   17530:	0a1b      	lsrs	r3, r3, #8
   17532:	b299      	uxth	r1, r3
   17534:	9b03      	ldr	r3, [sp, #12]
   17536:	1c5a      	adds	r2, r3, #1
   17538:	9203      	str	r2, [sp, #12]
   1753a:	b2ca      	uxtb	r2, r1
   1753c:	701a      	strb	r2, [r3, #0]

  /* If connection is not specified */
  if (connId == DM_CONN_ID_NONE)
   1753e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17542:	2b00      	cmp	r3, #0
   17544:	d11f      	bne.n	17586 <GattSendServiceChangedInd+0xaa>
  {
    /* Send to all. */
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   17546:	2301      	movs	r3, #1
   17548:	f88d 3007 	strb.w	r3, [sp, #7]
   1754c:	e016      	b.n	1757c <GattSendServiceChangedInd+0xa0>
    {
      if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   1754e:	4b19      	ldr	r3, [pc, #100]	; (175b4 <GattSendServiceChangedInd+0xd8>)
   17550:	785a      	ldrb	r2, [r3, #1]
   17552:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17556:	4611      	mov	r1, r2
   17558:	4618      	mov	r0, r3
   1755a:	f7f8 fbd9 	bl	fd10 <AttsCccEnabled>
   1755e:	4603      	mov	r3, r0
   17560:	2b00      	cmp	r3, #0
   17562:	d006      	beq.n	17572 <GattSendServiceChangedInd+0x96>
      {
        AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   17564:	ab02      	add	r3, sp, #8
   17566:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1756a:	2204      	movs	r2, #4
   1756c:	2112      	movs	r1, #18
   1756e:	f7f9 f961 	bl	10834 <AttsHandleValueInd>
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   17572:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17576:	3301      	adds	r3, #1
   17578:	f88d 3007 	strb.w	r3, [sp, #7]
   1757c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17580:	2b03      	cmp	r3, #3
   17582:	d9e4      	bls.n	1754e <GattSendServiceChangedInd+0x72>
   17584:	e013      	b.n	175ae <GattSendServiceChangedInd+0xd2>
    }
  }
  else
  {
    /* Send to only this one. */
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   17586:	4b0b      	ldr	r3, [pc, #44]	; (175b4 <GattSendServiceChangedInd+0xd8>)
   17588:	785a      	ldrb	r2, [r3, #1]
   1758a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1758e:	4611      	mov	r1, r2
   17590:	4618      	mov	r0, r3
   17592:	f7f8 fbbd 	bl	fd10 <AttsCccEnabled>
   17596:	4603      	mov	r3, r0
   17598:	2b00      	cmp	r3, #0
   1759a:	d008      	beq.n	175ae <GattSendServiceChangedInd+0xd2>
    {
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   1759c:	ab02      	add	r3, sp, #8
   1759e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   175a2:	2204      	movs	r2, #4
   175a4:	2112      	movs	r1, #18
   175a6:	f7f9 f945 	bl	10834 <AttsHandleValueInd>
   175aa:	e000      	b.n	175ae <GattSendServiceChangedInd+0xd2>
    return;
   175ac:	bf00      	nop
    }
  }
}
   175ae:	b005      	add	sp, #20
   175b0:	f85d fb04 	ldr.w	pc, [sp], #4
   175b4:	100095a4 	.word	0x100095a4

000175b8 <GattReadCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t GattReadCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                      uint16_t offset, attsAttr_t *pAttr)
{
   175b8:	b510      	push	{r4, lr}
   175ba:	b084      	sub	sp, #16
   175bc:	4604      	mov	r4, r0
   175be:	4608      	mov	r0, r1
   175c0:	4611      	mov	r1, r2
   175c2:	461a      	mov	r2, r3
   175c4:	4623      	mov	r3, r4
   175c6:	f88d 3007 	strb.w	r3, [sp, #7]
   175ca:	4603      	mov	r3, r0
   175cc:	f8ad 3004 	strh.w	r3, [sp, #4]
   175d0:	460b      	mov	r3, r1
   175d2:	f88d 3006 	strb.w	r3, [sp, #6]
   175d6:	4613      	mov	r3, r2
   175d8:	f8ad 3002 	strh.w	r3, [sp, #2]
  switch (handle)
   175dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   175e0:	2b15      	cmp	r3, #21
   175e2:	d10c      	bne.n	175fe <GattReadCback+0x46>
  {
    case GATT_CSF_HDL:
    {
      uint8_t csf[ATT_CSF_LEN];

      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   175e4:	a903      	add	r1, sp, #12
   175e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   175ea:	2201      	movs	r2, #1
   175ec:	4618      	mov	r0, r3
   175ee:	f7f8 fdb1 	bl	10154 <AttsCsfGetFeatures>
      memcpy(pAttr->pValue, csf, ATT_CSF_LEN);
   175f2:	9b06      	ldr	r3, [sp, #24]
   175f4:	685b      	ldr	r3, [r3, #4]
   175f6:	f89d 200c 	ldrb.w	r2, [sp, #12]
   175fa:	701a      	strb	r2, [r3, #0]
    }
    break;
   175fc:	e000      	b.n	17600 <GattReadCback+0x48>

    default:
      break;
   175fe:	bf00      	nop
  }

  return ATT_SUCCESS;
   17600:	2300      	movs	r3, #0
}
   17602:	4618      	mov	r0, r3
   17604:	b004      	add	sp, #16
   17606:	bd10      	pop	{r4, pc}

00017608 <GattWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t GattWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{
   17608:	b510      	push	{r4, lr}
   1760a:	b084      	sub	sp, #16
   1760c:	4604      	mov	r4, r0
   1760e:	4608      	mov	r0, r1
   17610:	4611      	mov	r1, r2
   17612:	461a      	mov	r2, r3
   17614:	4623      	mov	r3, r4
   17616:	f88d 3007 	strb.w	r3, [sp, #7]
   1761a:	4603      	mov	r3, r0
   1761c:	f8ad 3004 	strh.w	r3, [sp, #4]
   17620:	460b      	mov	r3, r1
   17622:	f88d 3006 	strb.w	r3, [sp, #6]
   17626:	4613      	mov	r3, r2
   17628:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t status;

  switch (handle)
   1762c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17630:	2b15      	cmp	r3, #21
   17632:	d10c      	bne.n	1764e <GattWriteCback+0x46>
  {
    case GATT_CSF_HDL:
      status = AttsCsfWriteFeatures(connId, offset, len, pValue);
   17634:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   17638:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1763c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17640:	9b07      	ldr	r3, [sp, #28]
   17642:	f7f8 fd3d 	bl	100c0 <AttsCsfWriteFeatures>
   17646:	4603      	mov	r3, r0
   17648:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1764c:	e003      	b.n	17656 <GattWriteCback+0x4e>

    default:
      status = ATT_SUCCESS;
   1764e:	2300      	movs	r3, #0
   17650:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   17654:	bf00      	nop
  }

  return status;
   17656:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1765a:	4618      	mov	r0, r3
   1765c:	b004      	add	sp, #16
   1765e:	bd10      	pop	{r4, pc}

00017660 <GapDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GapDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   17660:	b500      	push	{lr}
   17662:	b085      	sub	sp, #20
   17664:	4603      	mov	r3, r0
   17666:	9102      	str	r1, [sp, #8]
   17668:	f88d 300f 	strb.w	r3, [sp, #15]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   1766c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   17670:	9b02      	ldr	r3, [sp, #8]
   17672:	9301      	str	r3, [sp, #4]
   17674:	4b05      	ldr	r3, [pc, #20]	; (1768c <GapDiscover+0x2c>)
   17676:	9300      	str	r3, [sp, #0]
   17678:	2302      	movs	r3, #2
   1767a:	4a05      	ldr	r2, [pc, #20]	; (17690 <GapDiscover+0x30>)
   1767c:	2102      	movs	r1, #2
   1767e:	f00e fd9d 	bl	261bc <AppDiscFindService>
                     GAP_HDL_LIST_LEN, (attcDiscChar_t **) gapDiscCharList, pHdlList);
}
   17682:	bf00      	nop
   17684:	b005      	add	sp, #20
   17686:	f85d fb04 	ldr.w	pc, [sp], #4
   1768a:	bf00      	nop
   1768c:	10002bbc 	.word	0x10002bbc
   17690:	0002c20c 	.word	0x0002c20c

00017694 <GapValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GapValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   17694:	b500      	push	{lr}
   17696:	b085      	sub	sp, #20
   17698:	9001      	str	r0, [sp, #4]
   1769a:	9100      	str	r1, [sp, #0]
  uint8_t status = ATT_SUCCESS;
   1769c:	2300      	movs	r3, #0
   1769e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Central Address Resolution */
  if (pMsg->handle == pHdlList[GAP_CAR_HDL_IDX])
   176a2:	9b00      	ldr	r3, [sp, #0]
   176a4:	895a      	ldrh	r2, [r3, #10]
   176a6:	9b01      	ldr	r3, [sp, #4]
   176a8:	881b      	ldrh	r3, [r3, #0]
   176aa:	429a      	cmp	r2, r3
   176ac:	d126      	bne.n	176fc <GapValueUpdate+0x68>
  {
    appDbHdl_t dbHdl;

    /* if there's a device record */
    if ((dbHdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE)
   176ae:	9b00      	ldr	r3, [sp, #0]
   176b0:	881b      	ldrh	r3, [r3, #0]
   176b2:	b2db      	uxtb	r3, r3
   176b4:	4618      	mov	r0, r3
   176b6:	f00e fff9 	bl	266ac <AppDbGetHdl>
   176ba:	9002      	str	r0, [sp, #8]
   176bc:	9b02      	ldr	r3, [sp, #8]
   176be:	2b00      	cmp	r3, #0
   176c0:	d01f      	beq.n	17702 <GapValueUpdate+0x6e>
    {
      if ((pMsg->pValue[0] == FALSE) || (pMsg->pValue[0] == TRUE))
   176c2:	9b00      	ldr	r3, [sp, #0]
   176c4:	685b      	ldr	r3, [r3, #4]
   176c6:	781b      	ldrb	r3, [r3, #0]
   176c8:	2b00      	cmp	r3, #0
   176ca:	d004      	beq.n	176d6 <GapValueUpdate+0x42>
   176cc:	9b00      	ldr	r3, [sp, #0]
   176ce:	685b      	ldr	r3, [r3, #4]
   176d0:	781b      	ldrb	r3, [r3, #0]
   176d2:	2b01      	cmp	r3, #1
   176d4:	d107      	bne.n	176e6 <GapValueUpdate+0x52>
      {
        /* store value in device database */
        AppDbSetPeerAddrRes(dbHdl, pMsg->pValue[0]);
   176d6:	9b00      	ldr	r3, [sp, #0]
   176d8:	685b      	ldr	r3, [r3, #4]
   176da:	781b      	ldrb	r3, [r3, #0]
   176dc:	4619      	mov	r1, r3
   176de:	9802      	ldr	r0, [sp, #8]
   176e0:	f7fc f98f 	bl	13a02 <AppDbSetPeerAddrRes>
   176e4:	e002      	b.n	176ec <GapValueUpdate+0x58>
      }
      else
      {
        /* invalid value */
        status = ATT_ERR_RANGE;
   176e6:	23ff      	movs	r3, #255	; 0xff
   176e8:	f88d 300f 	strb.w	r3, [sp, #15]
      }

      APP_TRACE_INFO1("Central address resolution: %d", pMsg->pValue[0]);
   176ec:	9b00      	ldr	r3, [sp, #0]
   176ee:	685b      	ldr	r3, [r3, #4]
   176f0:	781b      	ldrb	r3, [r3, #0]
   176f2:	4619      	mov	r1, r3
   176f4:	4806      	ldr	r0, [pc, #24]	; (17710 <GapValueUpdate+0x7c>)
   176f6:	f7f6 f9a7 	bl	da48 <WsfTrace>
   176fa:	e002      	b.n	17702 <GapValueUpdate+0x6e>
    }
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   176fc:	230a      	movs	r3, #10
   176fe:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return status;
   17702:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   17706:	4618      	mov	r0, r3
   17708:	b005      	add	sp, #20
   1770a:	f85d fb04 	ldr.w	pc, [sp], #4
   1770e:	bf00      	nop
   17710:	0002ba5c 	.word	0x0002ba5c

00017714 <default_RNG>:
    return 1;
}

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
   17714:	b082      	sub	sp, #8
   17716:	9001      	str	r0, [sp, #4]
   17718:	9100      	str	r1, [sp, #0]
    return 0;
   1771a:	2300      	movs	r3, #0
}
   1771c:	4618      	mov	r0, r3
   1771e:	b002      	add	sp, #8
   17720:	4770      	bx	lr
	...

00017724 <uECC_set_rng>:

#endif

static uECC_RNG_Function g_rng_function = &default_RNG;

void uECC_set_rng(uECC_RNG_Function rng_function) {
   17724:	b082      	sub	sp, #8
   17726:	9001      	str	r0, [sp, #4]
    g_rng_function = rng_function;
   17728:	4a02      	ldr	r2, [pc, #8]	; (17734 <uECC_set_rng+0x10>)
   1772a:	9b01      	ldr	r3, [sp, #4]
   1772c:	6013      	str	r3, [r2, #0]
}
   1772e:	bf00      	nop
   17730:	b002      	add	sp, #8
   17732:	4770      	bx	lr
   17734:	10002bc4 	.word	0x10002bc4

00017738 <vli_add>:
#define STR2(thing) #thing
#define STR(thing) STR2(thing)

#if (uECC_ASM == uECC_asm_fast)

static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   17738:	b430      	push	{r4, r5}
   1773a:	b088      	sub	sp, #32
   1773c:	9003      	str	r0, [sp, #12]
   1773e:	9102      	str	r1, [sp, #8]
   17740:	9201      	str	r2, [sp, #4]
    uint32_t carry = 0;
   17742:	2300      	movs	r3, #0
   17744:	9307      	str	r3, [sp, #28]
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   17746:	9803      	ldr	r0, [sp, #12]
   17748:	9902      	ldr	r1, [sp, #8]
   1774a:	9a01      	ldr	r2, [sp, #4]
   1774c:	9b07      	ldr	r3, [sp, #28]
   1774e:	c920      	ldmia	r1!, {r5}
   17750:	ca10      	ldmia	r2!, {r4}
   17752:	192d      	adds	r5, r5, r4
   17754:	c020      	stmia	r0!, {r5}
   17756:	c920      	ldmia	r1!, {r5}
   17758:	ca10      	ldmia	r2!, {r4}
   1775a:	4165      	adcs	r5, r4
   1775c:	c020      	stmia	r0!, {r5}
   1775e:	c920      	ldmia	r1!, {r5}
   17760:	ca10      	ldmia	r2!, {r4}
   17762:	4165      	adcs	r5, r4
   17764:	c020      	stmia	r0!, {r5}
   17766:	c920      	ldmia	r1!, {r5}
   17768:	ca10      	ldmia	r2!, {r4}
   1776a:	4165      	adcs	r5, r4
   1776c:	c020      	stmia	r0!, {r5}
   1776e:	c920      	ldmia	r1!, {r5}
   17770:	ca10      	ldmia	r2!, {r4}
   17772:	4165      	adcs	r5, r4
   17774:	c020      	stmia	r0!, {r5}
   17776:	c920      	ldmia	r1!, {r5}
   17778:	ca10      	ldmia	r2!, {r4}
   1777a:	4165      	adcs	r5, r4
   1777c:	c020      	stmia	r0!, {r5}
   1777e:	c920      	ldmia	r1!, {r5}
   17780:	ca10      	ldmia	r2!, {r4}
   17782:	4165      	adcs	r5, r4
   17784:	c020      	stmia	r0!, {r5}
   17786:	c920      	ldmia	r1!, {r5}
   17788:	ca10      	ldmia	r2!, {r4}
   1778a:	4165      	adcs	r5, r4
   1778c:	c020      	stmia	r0!, {r5}
   1778e:	415b      	adcs	r3, r3
   17790:	9003      	str	r0, [sp, #12]
   17792:	9102      	str	r1, [sp, #8]
   17794:	9201      	str	r2, [sp, #4]
   17796:	9307      	str	r3, [sp, #28]
   17798:	9506      	str	r5, [sp, #24]
   1779a:	9405      	str	r4, [sp, #20]
          [carry] "+r" (carry), [left] "=r" (left_word), [right] "=r" (right_word)
    #endif
        :
        : "cc", "memory"
    );
    return carry;
   1779c:	9b07      	ldr	r3, [sp, #28]
}
   1779e:	4618      	mov	r0, r3
   177a0:	b008      	add	sp, #32
   177a2:	bc30      	pop	{r4, r5}
   177a4:	4770      	bx	lr

000177a6 <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   177a6:	b430      	push	{r4, r5}
   177a8:	b088      	sub	sp, #32
   177aa:	9003      	str	r0, [sp, #12]
   177ac:	9102      	str	r1, [sp, #8]
   177ae:	9201      	str	r2, [sp, #4]
    uint32_t carry = 0;
   177b0:	2300      	movs	r3, #0
   177b2:	9307      	str	r3, [sp, #28]
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   177b4:	9803      	ldr	r0, [sp, #12]
   177b6:	9902      	ldr	r1, [sp, #8]
   177b8:	9a01      	ldr	r2, [sp, #4]
   177ba:	9b07      	ldr	r3, [sp, #28]
   177bc:	c920      	ldmia	r1!, {r5}
   177be:	ca10      	ldmia	r2!, {r4}
   177c0:	1b2d      	subs	r5, r5, r4
   177c2:	c020      	stmia	r0!, {r5}
   177c4:	c920      	ldmia	r1!, {r5}
   177c6:	ca10      	ldmia	r2!, {r4}
   177c8:	41a5      	sbcs	r5, r4
   177ca:	c020      	stmia	r0!, {r5}
   177cc:	c920      	ldmia	r1!, {r5}
   177ce:	ca10      	ldmia	r2!, {r4}
   177d0:	41a5      	sbcs	r5, r4
   177d2:	c020      	stmia	r0!, {r5}
   177d4:	c920      	ldmia	r1!, {r5}
   177d6:	ca10      	ldmia	r2!, {r4}
   177d8:	41a5      	sbcs	r5, r4
   177da:	c020      	stmia	r0!, {r5}
   177dc:	c920      	ldmia	r1!, {r5}
   177de:	ca10      	ldmia	r2!, {r4}
   177e0:	41a5      	sbcs	r5, r4
   177e2:	c020      	stmia	r0!, {r5}
   177e4:	c920      	ldmia	r1!, {r5}
   177e6:	ca10      	ldmia	r2!, {r4}
   177e8:	41a5      	sbcs	r5, r4
   177ea:	c020      	stmia	r0!, {r5}
   177ec:	c920      	ldmia	r1!, {r5}
   177ee:	ca10      	ldmia	r2!, {r4}
   177f0:	41a5      	sbcs	r5, r4
   177f2:	c020      	stmia	r0!, {r5}
   177f4:	c920      	ldmia	r1!, {r5}
   177f6:	ca10      	ldmia	r2!, {r4}
   177f8:	41a5      	sbcs	r5, r4
   177fa:	c020      	stmia	r0!, {r5}
   177fc:	415b      	adcs	r3, r3
   177fe:	9003      	str	r0, [sp, #12]
   17800:	9102      	str	r1, [sp, #8]
   17802:	9201      	str	r2, [sp, #4]
   17804:	9307      	str	r3, [sp, #28]
   17806:	9506      	str	r5, [sp, #24]
   17808:	9405      	str	r4, [sp, #20]
          [carry] "+r" (carry), [left] "=r" (left_word), [right] "=r" (right_word)
    #endif
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
   1780a:	9b07      	ldr	r3, [sp, #28]
   1780c:	2b00      	cmp	r3, #0
   1780e:	bf0c      	ite	eq
   17810:	2301      	moveq	r3, #1
   17812:	2300      	movne	r3, #0
   17814:	b2db      	uxtb	r3, r3
                   // (for some reason...)
}
   17816:	4618      	mov	r0, r3
   17818:	b008      	add	sp, #32
   1781a:	bc30      	pop	{r4, r5}
   1781c:	4770      	bx	lr

0001781e <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   1781e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17822:	b085      	sub	sp, #20
   17824:	9003      	str	r0, [sp, #12]
   17826:	9102      	str	r1, [sp, #8]
   17828:	9201      	str	r2, [sp, #4]
    register uint32_t *r0 __asm__("r0") = result;
   1782a:	9803      	ldr	r0, [sp, #12]
    register const uint32_t *r1 __asm__("r1") = left;
   1782c:	9902      	ldr	r1, [sp, #8]
    register const uint32_t *r2 __asm__("r2") = right;
   1782e:	9a01      	ldr	r2, [sp, #4]

    __asm__ volatile (
   17830:	f100 0018 	add.w	r0, r0, #24
   17834:	f102 0218 	add.w	r2, r2, #24
   17838:	c918      	ldmia	r1!, {r3, r4}
   1783a:	cac0      	ldmia	r2!, {r6, r7}
   1783c:	fba3 bc06 	umull	fp, ip, r3, r6
   17840:	f840 bb04 	str.w	fp, [r0], #4
   17844:	f04f 0a00 	mov.w	sl, #0
   17848:	fba3 b907 	umull	fp, r9, r3, r7
   1784c:	eb1c 0c0b 	adds.w	ip, ip, fp
   17850:	f149 0900 	adc.w	r9, r9, #0
   17854:	fba4 be06 	umull	fp, lr, r4, r6
   17858:	eb1c 0c0b 	adds.w	ip, ip, fp
   1785c:	eb59 090e 	adcs.w	r9, r9, lr
   17860:	f14a 0a00 	adc.w	sl, sl, #0
   17864:	f840 cb04 	str.w	ip, [r0], #4
   17868:	fba4 ce07 	umull	ip, lr, r4, r7
   1786c:	eb19 090c 	adds.w	r9, r9, ip
   17870:	eb4a 0a0e 	adc.w	sl, sl, lr
   17874:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   17878:	f1a0 001c 	sub.w	r0, r0, #28
   1787c:	f1a2 0214 	sub.w	r2, r2, #20
   17880:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   17884:	c920      	ldmia	r1!, {r5}
   17886:	fba3 bc06 	umull	fp, ip, r3, r6
   1788a:	f840 bb04 	str.w	fp, [r0], #4
   1788e:	f04f 0a00 	mov.w	sl, #0
   17892:	fba3 b907 	umull	fp, r9, r3, r7
   17896:	eb1c 0c0b 	adds.w	ip, ip, fp
   1789a:	f149 0900 	adc.w	r9, r9, #0
   1789e:	fba4 be06 	umull	fp, lr, r4, r6
   178a2:	eb1c 0c0b 	adds.w	ip, ip, fp
   178a6:	eb59 090e 	adcs.w	r9, r9, lr
   178aa:	f14a 0a00 	adc.w	sl, sl, #0
   178ae:	f840 cb04 	str.w	ip, [r0], #4
   178b2:	f04f 0b00 	mov.w	fp, #0
   178b6:	fba3 ce08 	umull	ip, lr, r3, r8
   178ba:	eb19 090c 	adds.w	r9, r9, ip
   178be:	eb5a 0a0e 	adcs.w	sl, sl, lr
   178c2:	f14b 0b00 	adc.w	fp, fp, #0
   178c6:	fba4 ce07 	umull	ip, lr, r4, r7
   178ca:	eb19 090c 	adds.w	r9, r9, ip
   178ce:	eb5a 0a0e 	adcs.w	sl, sl, lr
   178d2:	f14b 0b00 	adc.w	fp, fp, #0
   178d6:	fba5 ce06 	umull	ip, lr, r5, r6
   178da:	eb19 090c 	adds.w	r9, r9, ip
   178de:	eb5a 0a0e 	adcs.w	sl, sl, lr
   178e2:	f14b 0b00 	adc.w	fp, fp, #0
   178e6:	f840 9b04 	str.w	r9, [r0], #4
   178ea:	c908      	ldmia	r1!, {r3}
   178ec:	f04f 0c00 	mov.w	ip, #0
   178f0:	fba4 e908 	umull	lr, r9, r4, r8
   178f4:	eb1a 0a0e 	adds.w	sl, sl, lr
   178f8:	eb5b 0b09 	adcs.w	fp, fp, r9
   178fc:	f14c 0c00 	adc.w	ip, ip, #0
   17900:	fba5 e907 	umull	lr, r9, r5, r7
   17904:	eb1a 0a0e 	adds.w	sl, sl, lr
   17908:	eb5b 0b09 	adcs.w	fp, fp, r9
   1790c:	f14c 0c00 	adc.w	ip, ip, #0
   17910:	fba3 e906 	umull	lr, r9, r3, r6
   17914:	eb1a 0a0e 	adds.w	sl, sl, lr
   17918:	eb5b 0b09 	adcs.w	fp, fp, r9
   1791c:	f14c 0c00 	adc.w	ip, ip, #0
   17920:	f8d0 e000 	ldr.w	lr, [r0]
   17924:	eb1a 0a0e 	adds.w	sl, sl, lr
   17928:	f15b 0b00 	adcs.w	fp, fp, #0
   1792c:	f14c 0c00 	adc.w	ip, ip, #0
   17930:	f840 ab04 	str.w	sl, [r0], #4
   17934:	c910      	ldmia	r1!, {r4}
   17936:	f04f 0e00 	mov.w	lr, #0
   1793a:	fba5 9a08 	umull	r9, sl, r5, r8
   1793e:	eb1b 0b09 	adds.w	fp, fp, r9
   17942:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17946:	f14e 0e00 	adc.w	lr, lr, #0
   1794a:	fba3 9a07 	umull	r9, sl, r3, r7
   1794e:	eb1b 0b09 	adds.w	fp, fp, r9
   17952:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17956:	f14e 0e00 	adc.w	lr, lr, #0
   1795a:	fba4 9a06 	umull	r9, sl, r4, r6
   1795e:	eb1b 0b09 	adds.w	fp, fp, r9
   17962:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17966:	f14e 0e00 	adc.w	lr, lr, #0
   1796a:	f8d0 9000 	ldr.w	r9, [r0]
   1796e:	eb1b 0b09 	adds.w	fp, fp, r9
   17972:	f15c 0c00 	adcs.w	ip, ip, #0
   17976:	f14e 0e00 	adc.w	lr, lr, #0
   1797a:	f840 bb04 	str.w	fp, [r0], #4
   1797e:	ca40      	ldmia	r2!, {r6}
   17980:	f04f 0900 	mov.w	r9, #0
   17984:	fba5 ab06 	umull	sl, fp, r5, r6
   17988:	eb1c 0c0a 	adds.w	ip, ip, sl
   1798c:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17990:	f149 0900 	adc.w	r9, r9, #0
   17994:	fba3 ab08 	umull	sl, fp, r3, r8
   17998:	eb1c 0c0a 	adds.w	ip, ip, sl
   1799c:	eb5e 0e0b 	adcs.w	lr, lr, fp
   179a0:	f149 0900 	adc.w	r9, r9, #0
   179a4:	fba4 ab07 	umull	sl, fp, r4, r7
   179a8:	eb1c 0c0a 	adds.w	ip, ip, sl
   179ac:	eb5e 0e0b 	adcs.w	lr, lr, fp
   179b0:	f149 0900 	adc.w	r9, r9, #0
   179b4:	f8d0 a000 	ldr.w	sl, [r0]
   179b8:	eb1c 0c0a 	adds.w	ip, ip, sl
   179bc:	f15e 0e00 	adcs.w	lr, lr, #0
   179c0:	f149 0900 	adc.w	r9, r9, #0
   179c4:	f840 cb04 	str.w	ip, [r0], #4
   179c8:	ca80      	ldmia	r2!, {r7}
   179ca:	f04f 0a00 	mov.w	sl, #0
   179ce:	fba5 bc07 	umull	fp, ip, r5, r7
   179d2:	eb1e 0e0b 	adds.w	lr, lr, fp
   179d6:	eb59 090c 	adcs.w	r9, r9, ip
   179da:	f14a 0a00 	adc.w	sl, sl, #0
   179de:	fba3 bc06 	umull	fp, ip, r3, r6
   179e2:	eb1e 0e0b 	adds.w	lr, lr, fp
   179e6:	eb59 090c 	adcs.w	r9, r9, ip
   179ea:	f14a 0a00 	adc.w	sl, sl, #0
   179ee:	fba4 bc08 	umull	fp, ip, r4, r8
   179f2:	eb1e 0e0b 	adds.w	lr, lr, fp
   179f6:	eb59 090c 	adcs.w	r9, r9, ip
   179fa:	f14a 0a00 	adc.w	sl, sl, #0
   179fe:	f8d0 b000 	ldr.w	fp, [r0]
   17a02:	eb1e 0e0b 	adds.w	lr, lr, fp
   17a06:	f159 0900 	adcs.w	r9, r9, #0
   17a0a:	f14a 0a00 	adc.w	sl, sl, #0
   17a0e:	f840 eb04 	str.w	lr, [r0], #4
   17a12:	f04f 0b00 	mov.w	fp, #0
   17a16:	fba3 ce07 	umull	ip, lr, r3, r7
   17a1a:	eb19 090c 	adds.w	r9, r9, ip
   17a1e:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17a22:	f14b 0b00 	adc.w	fp, fp, #0
   17a26:	fba4 ce06 	umull	ip, lr, r4, r6
   17a2a:	eb19 090c 	adds.w	r9, r9, ip
   17a2e:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17a32:	f14b 0b00 	adc.w	fp, fp, #0
   17a36:	f840 9b04 	str.w	r9, [r0], #4
   17a3a:	fba4 e907 	umull	lr, r9, r4, r7
   17a3e:	eb1a 0a0e 	adds.w	sl, sl, lr
   17a42:	eb4b 0b09 	adc.w	fp, fp, r9
   17a46:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   17a4a:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
   17a4e:	f1a1 0114 	sub.w	r1, r1, #20
   17a52:	f1a2 0220 	sub.w	r2, r2, #32
   17a56:	c938      	ldmia	r1!, {r3, r4, r5}
   17a58:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   17a5c:	fba3 bc06 	umull	fp, ip, r3, r6
   17a60:	f840 bb04 	str.w	fp, [r0], #4
   17a64:	f04f 0a00 	mov.w	sl, #0
   17a68:	fba3 b907 	umull	fp, r9, r3, r7
   17a6c:	eb1c 0c0b 	adds.w	ip, ip, fp
   17a70:	f149 0900 	adc.w	r9, r9, #0
   17a74:	fba4 be06 	umull	fp, lr, r4, r6
   17a78:	eb1c 0c0b 	adds.w	ip, ip, fp
   17a7c:	eb59 090e 	adcs.w	r9, r9, lr
   17a80:	f14a 0a00 	adc.w	sl, sl, #0
   17a84:	f840 cb04 	str.w	ip, [r0], #4
   17a88:	f04f 0b00 	mov.w	fp, #0
   17a8c:	fba3 ce08 	umull	ip, lr, r3, r8
   17a90:	eb19 090c 	adds.w	r9, r9, ip
   17a94:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17a98:	f14b 0b00 	adc.w	fp, fp, #0
   17a9c:	fba4 ce07 	umull	ip, lr, r4, r7
   17aa0:	eb19 090c 	adds.w	r9, r9, ip
   17aa4:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17aa8:	f14b 0b00 	adc.w	fp, fp, #0
   17aac:	fba5 ce06 	umull	ip, lr, r5, r6
   17ab0:	eb19 090c 	adds.w	r9, r9, ip
   17ab4:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17ab8:	f14b 0b00 	adc.w	fp, fp, #0
   17abc:	f840 9b04 	str.w	r9, [r0], #4
   17ac0:	c908      	ldmia	r1!, {r3}
   17ac2:	f04f 0c00 	mov.w	ip, #0
   17ac6:	fba4 e908 	umull	lr, r9, r4, r8
   17aca:	eb1a 0a0e 	adds.w	sl, sl, lr
   17ace:	eb5b 0b09 	adcs.w	fp, fp, r9
   17ad2:	f14c 0c00 	adc.w	ip, ip, #0
   17ad6:	fba5 e907 	umull	lr, r9, r5, r7
   17ada:	eb1a 0a0e 	adds.w	sl, sl, lr
   17ade:	eb5b 0b09 	adcs.w	fp, fp, r9
   17ae2:	f14c 0c00 	adc.w	ip, ip, #0
   17ae6:	fba3 e906 	umull	lr, r9, r3, r6
   17aea:	eb1a 0a0e 	adds.w	sl, sl, lr
   17aee:	eb5b 0b09 	adcs.w	fp, fp, r9
   17af2:	f14c 0c00 	adc.w	ip, ip, #0
   17af6:	f8d0 e000 	ldr.w	lr, [r0]
   17afa:	eb1a 0a0e 	adds.w	sl, sl, lr
   17afe:	f15b 0b00 	adcs.w	fp, fp, #0
   17b02:	f14c 0c00 	adc.w	ip, ip, #0
   17b06:	f840 ab04 	str.w	sl, [r0], #4
   17b0a:	c910      	ldmia	r1!, {r4}
   17b0c:	f04f 0e00 	mov.w	lr, #0
   17b10:	fba5 9a08 	umull	r9, sl, r5, r8
   17b14:	eb1b 0b09 	adds.w	fp, fp, r9
   17b18:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17b1c:	f14e 0e00 	adc.w	lr, lr, #0
   17b20:	fba3 9a07 	umull	r9, sl, r3, r7
   17b24:	eb1b 0b09 	adds.w	fp, fp, r9
   17b28:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17b2c:	f14e 0e00 	adc.w	lr, lr, #0
   17b30:	fba4 9a06 	umull	r9, sl, r4, r6
   17b34:	eb1b 0b09 	adds.w	fp, fp, r9
   17b38:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17b3c:	f14e 0e00 	adc.w	lr, lr, #0
   17b40:	f8d0 9000 	ldr.w	r9, [r0]
   17b44:	eb1b 0b09 	adds.w	fp, fp, r9
   17b48:	f15c 0c00 	adcs.w	ip, ip, #0
   17b4c:	f14e 0e00 	adc.w	lr, lr, #0
   17b50:	f840 bb04 	str.w	fp, [r0], #4
   17b54:	c920      	ldmia	r1!, {r5}
   17b56:	f04f 0900 	mov.w	r9, #0
   17b5a:	fba3 ab08 	umull	sl, fp, r3, r8
   17b5e:	eb1c 0c0a 	adds.w	ip, ip, sl
   17b62:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17b66:	f149 0900 	adc.w	r9, r9, #0
   17b6a:	fba4 ab07 	umull	sl, fp, r4, r7
   17b6e:	eb1c 0c0a 	adds.w	ip, ip, sl
   17b72:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17b76:	f149 0900 	adc.w	r9, r9, #0
   17b7a:	fba5 ab06 	umull	sl, fp, r5, r6
   17b7e:	eb1c 0c0a 	adds.w	ip, ip, sl
   17b82:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17b86:	f149 0900 	adc.w	r9, r9, #0
   17b8a:	f8d0 a000 	ldr.w	sl, [r0]
   17b8e:	eb1c 0c0a 	adds.w	ip, ip, sl
   17b92:	f15e 0e00 	adcs.w	lr, lr, #0
   17b96:	f149 0900 	adc.w	r9, r9, #0
   17b9a:	f840 cb04 	str.w	ip, [r0], #4
   17b9e:	c908      	ldmia	r1!, {r3}
   17ba0:	f04f 0a00 	mov.w	sl, #0
   17ba4:	fba4 bc08 	umull	fp, ip, r4, r8
   17ba8:	eb1e 0e0b 	adds.w	lr, lr, fp
   17bac:	eb59 090c 	adcs.w	r9, r9, ip
   17bb0:	f14a 0a00 	adc.w	sl, sl, #0
   17bb4:	fba5 bc07 	umull	fp, ip, r5, r7
   17bb8:	eb1e 0e0b 	adds.w	lr, lr, fp
   17bbc:	eb59 090c 	adcs.w	r9, r9, ip
   17bc0:	f14a 0a00 	adc.w	sl, sl, #0
   17bc4:	fba3 bc06 	umull	fp, ip, r3, r6
   17bc8:	eb1e 0e0b 	adds.w	lr, lr, fp
   17bcc:	eb59 090c 	adcs.w	r9, r9, ip
   17bd0:	f14a 0a00 	adc.w	sl, sl, #0
   17bd4:	f8d0 b000 	ldr.w	fp, [r0]
   17bd8:	eb1e 0e0b 	adds.w	lr, lr, fp
   17bdc:	f159 0900 	adcs.w	r9, r9, #0
   17be0:	f14a 0a00 	adc.w	sl, sl, #0
   17be4:	f840 eb04 	str.w	lr, [r0], #4
   17be8:	c910      	ldmia	r1!, {r4}
   17bea:	f04f 0b00 	mov.w	fp, #0
   17bee:	fba5 ce08 	umull	ip, lr, r5, r8
   17bf2:	eb19 090c 	adds.w	r9, r9, ip
   17bf6:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17bfa:	f14b 0b00 	adc.w	fp, fp, #0
   17bfe:	fba3 ce07 	umull	ip, lr, r3, r7
   17c02:	eb19 090c 	adds.w	r9, r9, ip
   17c06:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17c0a:	f14b 0b00 	adc.w	fp, fp, #0
   17c0e:	fba4 ce06 	umull	ip, lr, r4, r6
   17c12:	eb19 090c 	adds.w	r9, r9, ip
   17c16:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17c1a:	f14b 0b00 	adc.w	fp, fp, #0
   17c1e:	f8d0 c000 	ldr.w	ip, [r0]
   17c22:	eb19 090c 	adds.w	r9, r9, ip
   17c26:	f15a 0a00 	adcs.w	sl, sl, #0
   17c2a:	f14b 0b00 	adc.w	fp, fp, #0
   17c2e:	f840 9b04 	str.w	r9, [r0], #4
   17c32:	ca40      	ldmia	r2!, {r6}
   17c34:	f04f 0c00 	mov.w	ip, #0
   17c38:	fba5 e906 	umull	lr, r9, r5, r6
   17c3c:	eb1a 0a0e 	adds.w	sl, sl, lr
   17c40:	eb5b 0b09 	adcs.w	fp, fp, r9
   17c44:	f14c 0c00 	adc.w	ip, ip, #0
   17c48:	fba3 e908 	umull	lr, r9, r3, r8
   17c4c:	eb1a 0a0e 	adds.w	sl, sl, lr
   17c50:	eb5b 0b09 	adcs.w	fp, fp, r9
   17c54:	f14c 0c00 	adc.w	ip, ip, #0
   17c58:	fba4 e907 	umull	lr, r9, r4, r7
   17c5c:	eb1a 0a0e 	adds.w	sl, sl, lr
   17c60:	eb5b 0b09 	adcs.w	fp, fp, r9
   17c64:	f14c 0c00 	adc.w	ip, ip, #0
   17c68:	f8d0 e000 	ldr.w	lr, [r0]
   17c6c:	eb1a 0a0e 	adds.w	sl, sl, lr
   17c70:	f15b 0b00 	adcs.w	fp, fp, #0
   17c74:	f14c 0c00 	adc.w	ip, ip, #0
   17c78:	f840 ab04 	str.w	sl, [r0], #4
   17c7c:	ca80      	ldmia	r2!, {r7}
   17c7e:	f04f 0e00 	mov.w	lr, #0
   17c82:	fba5 9a07 	umull	r9, sl, r5, r7
   17c86:	eb1b 0b09 	adds.w	fp, fp, r9
   17c8a:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17c8e:	f14e 0e00 	adc.w	lr, lr, #0
   17c92:	fba3 9a06 	umull	r9, sl, r3, r6
   17c96:	eb1b 0b09 	adds.w	fp, fp, r9
   17c9a:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17c9e:	f14e 0e00 	adc.w	lr, lr, #0
   17ca2:	fba4 9a08 	umull	r9, sl, r4, r8
   17ca6:	eb1b 0b09 	adds.w	fp, fp, r9
   17caa:	eb5c 0c0a 	adcs.w	ip, ip, sl
   17cae:	f14e 0e00 	adc.w	lr, lr, #0
   17cb2:	f8d0 9000 	ldr.w	r9, [r0]
   17cb6:	eb1b 0b09 	adds.w	fp, fp, r9
   17cba:	f15c 0c00 	adcs.w	ip, ip, #0
   17cbe:	f14e 0e00 	adc.w	lr, lr, #0
   17cc2:	f840 bb04 	str.w	fp, [r0], #4
   17cc6:	f852 8b04 	ldr.w	r8, [r2], #4
   17cca:	f04f 0900 	mov.w	r9, #0
   17cce:	fba5 ab08 	umull	sl, fp, r5, r8
   17cd2:	eb1c 0c0a 	adds.w	ip, ip, sl
   17cd6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17cda:	f149 0900 	adc.w	r9, r9, #0
   17cde:	fba3 ab07 	umull	sl, fp, r3, r7
   17ce2:	eb1c 0c0a 	adds.w	ip, ip, sl
   17ce6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17cea:	f149 0900 	adc.w	r9, r9, #0
   17cee:	fba4 ab06 	umull	sl, fp, r4, r6
   17cf2:	eb1c 0c0a 	adds.w	ip, ip, sl
   17cf6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   17cfa:	f149 0900 	adc.w	r9, r9, #0
   17cfe:	f8d0 a000 	ldr.w	sl, [r0]
   17d02:	eb1c 0c0a 	adds.w	ip, ip, sl
   17d06:	f15e 0e00 	adcs.w	lr, lr, #0
   17d0a:	f149 0900 	adc.w	r9, r9, #0
   17d0e:	f840 cb04 	str.w	ip, [r0], #4
   17d12:	ca40      	ldmia	r2!, {r6}
   17d14:	f04f 0a00 	mov.w	sl, #0
   17d18:	fba5 bc06 	umull	fp, ip, r5, r6
   17d1c:	eb1e 0e0b 	adds.w	lr, lr, fp
   17d20:	eb59 090c 	adcs.w	r9, r9, ip
   17d24:	f14a 0a00 	adc.w	sl, sl, #0
   17d28:	fba3 bc08 	umull	fp, ip, r3, r8
   17d2c:	eb1e 0e0b 	adds.w	lr, lr, fp
   17d30:	eb59 090c 	adcs.w	r9, r9, ip
   17d34:	f14a 0a00 	adc.w	sl, sl, #0
   17d38:	fba4 bc07 	umull	fp, ip, r4, r7
   17d3c:	eb1e 0e0b 	adds.w	lr, lr, fp
   17d40:	eb59 090c 	adcs.w	r9, r9, ip
   17d44:	f14a 0a00 	adc.w	sl, sl, #0
   17d48:	f8d0 b000 	ldr.w	fp, [r0]
   17d4c:	eb1e 0e0b 	adds.w	lr, lr, fp
   17d50:	f159 0900 	adcs.w	r9, r9, #0
   17d54:	f14a 0a00 	adc.w	sl, sl, #0
   17d58:	f840 eb04 	str.w	lr, [r0], #4
   17d5c:	ca80      	ldmia	r2!, {r7}
   17d5e:	f04f 0b00 	mov.w	fp, #0
   17d62:	fba5 ce07 	umull	ip, lr, r5, r7
   17d66:	eb19 090c 	adds.w	r9, r9, ip
   17d6a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17d6e:	f14b 0b00 	adc.w	fp, fp, #0
   17d72:	fba3 ce06 	umull	ip, lr, r3, r6
   17d76:	eb19 090c 	adds.w	r9, r9, ip
   17d7a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17d7e:	f14b 0b00 	adc.w	fp, fp, #0
   17d82:	fba4 ce08 	umull	ip, lr, r4, r8
   17d86:	eb19 090c 	adds.w	r9, r9, ip
   17d8a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   17d8e:	f14b 0b00 	adc.w	fp, fp, #0
   17d92:	f8d0 c000 	ldr.w	ip, [r0]
   17d96:	eb19 090c 	adds.w	r9, r9, ip
   17d9a:	f15a 0a00 	adcs.w	sl, sl, #0
   17d9e:	f14b 0b00 	adc.w	fp, fp, #0
   17da2:	f840 9b04 	str.w	r9, [r0], #4
   17da6:	f04f 0c00 	mov.w	ip, #0
   17daa:	fba3 e907 	umull	lr, r9, r3, r7
   17dae:	eb1a 0a0e 	adds.w	sl, sl, lr
   17db2:	eb5b 0b09 	adcs.w	fp, fp, r9
   17db6:	f14c 0c00 	adc.w	ip, ip, #0
   17dba:	fba4 e906 	umull	lr, r9, r4, r6
   17dbe:	eb1a 0a0e 	adds.w	sl, sl, lr
   17dc2:	eb5b 0b09 	adcs.w	fp, fp, r9
   17dc6:	f14c 0c00 	adc.w	ip, ip, #0
   17dca:	f840 ab04 	str.w	sl, [r0], #4
   17dce:	fba4 9a07 	umull	r9, sl, r4, r7
   17dd2:	eb1b 0b09 	adds.w	fp, fp, r9
   17dd6:	eb4c 0c0a 	adc.w	ip, ip, sl
   17dda:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   17dde:	bf00      	nop
   17de0:	b005      	add	sp, #20
   17de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017de6 <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
   17de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dea:	b083      	sub	sp, #12
   17dec:	9001      	str	r0, [sp, #4]
   17dee:	9100      	str	r1, [sp, #0]
    register uint32_t *r0 __asm__("r0") = result;
   17df0:	9801      	ldr	r0, [sp, #4]
    register const uint32_t *r1 __asm__("r1") = left;
   17df2:	9900      	ldr	r1, [sp, #0]

    __asm__ volatile (
   17df4:	c90c      	ldmia	r1!, {r2, r3}
   17df6:	f101 0110 	add.w	r1, r1, #16
   17dfa:	c960      	ldmia	r1!, {r5, r6}
   17dfc:	f100 0018 	add.w	r0, r0, #24
   17e00:	fba2 8905 	umull	r8, r9, r2, r5
   17e04:	f840 8b04 	str.w	r8, [r0], #4
   17e08:	fba2 ca06 	umull	ip, sl, r2, r6
   17e0c:	eb19 090c 	adds.w	r9, r9, ip
   17e10:	f14a 0a00 	adc.w	sl, sl, #0
   17e14:	f840 9b04 	str.w	r9, [r0], #4
   17e18:	fba3 8906 	umull	r8, r9, r3, r6
   17e1c:	eb1a 0a08 	adds.w	sl, sl, r8
   17e20:	f149 0b00 	adc.w	fp, r9, #0
   17e24:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   17e28:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
   17e2c:	f1a1 0120 	sub.w	r1, r1, #32
   17e30:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
   17e32:	fba2 bc02 	umull	fp, ip, r2, r2
   17e36:	f840 bb04 	str.w	fp, [r0], #4
   17e3a:	f04f 0900 	mov.w	r9, #0
   17e3e:	fba2 ab03 	umull	sl, fp, r2, r3
   17e42:	eb1c 0c0a 	adds.w	ip, ip, sl
   17e46:	f15b 0800 	adcs.w	r8, fp, #0
   17e4a:	f149 0900 	adc.w	r9, r9, #0
   17e4e:	eb1c 0c0a 	adds.w	ip, ip, sl
   17e52:	eb58 080b 	adcs.w	r8, r8, fp
   17e56:	f149 0900 	adc.w	r9, r9, #0
   17e5a:	f840 cb04 	str.w	ip, [r0], #4
   17e5e:	f04f 0a00 	mov.w	sl, #0
   17e62:	fba2 bc04 	umull	fp, ip, r2, r4
   17e66:	eb1b 0b0b 	adds.w	fp, fp, fp
   17e6a:	eb5c 0c0c 	adcs.w	ip, ip, ip
   17e6e:	f14a 0a00 	adc.w	sl, sl, #0
   17e72:	eb18 080b 	adds.w	r8, r8, fp
   17e76:	eb59 090c 	adcs.w	r9, r9, ip
   17e7a:	f14a 0a00 	adc.w	sl, sl, #0
   17e7e:	fba3 bc03 	umull	fp, ip, r3, r3
   17e82:	eb18 080b 	adds.w	r8, r8, fp
   17e86:	eb59 090c 	adcs.w	r9, r9, ip
   17e8a:	f14a 0a00 	adc.w	sl, sl, #0
   17e8e:	f840 8b04 	str.w	r8, [r0], #4
   17e92:	f04f 0c00 	mov.w	ip, #0
   17e96:	fba2 8b05 	umull	r8, fp, r2, r5
   17e9a:	46de      	mov	lr, fp
   17e9c:	fbe3 8b04 	umlal	r8, fp, r3, r4
   17ea0:	45de      	cmp	lr, fp
   17ea2:	bf88      	it	hi
   17ea4:	f14c 0c00 	adchi.w	ip, ip, #0
   17ea8:	eb18 0808 	adds.w	r8, r8, r8
   17eac:	eb5b 0b0b 	adcs.w	fp, fp, fp
   17eb0:	eb4c 0c0c 	adc.w	ip, ip, ip
   17eb4:	eb18 0809 	adds.w	r8, r8, r9
   17eb8:	eb5b 0b0a 	adcs.w	fp, fp, sl
   17ebc:	f14c 0c00 	adc.w	ip, ip, #0
   17ec0:	f840 8b04 	str.w	r8, [r0], #4
   17ec4:	f04f 0a00 	mov.w	sl, #0
   17ec8:	fba2 8906 	umull	r8, r9, r2, r6
   17ecc:	46ce      	mov	lr, r9
   17ece:	fbe3 8905 	umlal	r8, r9, r3, r5
   17ed2:	45ce      	cmp	lr, r9
   17ed4:	bf88      	it	hi
   17ed6:	f14a 0a00 	adchi.w	sl, sl, #0
   17eda:	eb18 0808 	adds.w	r8, r8, r8
   17ede:	eb59 0909 	adcs.w	r9, r9, r9
   17ee2:	eb4a 0a0a 	adc.w	sl, sl, sl
   17ee6:	46ce      	mov	lr, r9
   17ee8:	fbe4 8904 	umlal	r8, r9, r4, r4
   17eec:	45ce      	cmp	lr, r9
   17eee:	bf88      	it	hi
   17ef0:	f14a 0a00 	adchi.w	sl, sl, #0
   17ef4:	eb18 080b 	adds.w	r8, r8, fp
   17ef8:	eb59 090c 	adcs.w	r9, r9, ip
   17efc:	f14a 0a00 	adc.w	sl, sl, #0
   17f00:	f840 8b04 	str.w	r8, [r0], #4
   17f04:	f04f 0c00 	mov.w	ip, #0
   17f08:	fba2 8b07 	umull	r8, fp, r2, r7
   17f0c:	46de      	mov	lr, fp
   17f0e:	fbe3 8b06 	umlal	r8, fp, r3, r6
   17f12:	45de      	cmp	lr, fp
   17f14:	bf88      	it	hi
   17f16:	f14c 0c00 	adchi.w	ip, ip, #0
   17f1a:	46de      	mov	lr, fp
   17f1c:	fbe4 8b05 	umlal	r8, fp, r4, r5
   17f20:	45de      	cmp	lr, fp
   17f22:	bf88      	it	hi
   17f24:	f14c 0c00 	adchi.w	ip, ip, #0
   17f28:	eb18 0808 	adds.w	r8, r8, r8
   17f2c:	eb5b 0b0b 	adcs.w	fp, fp, fp
   17f30:	eb4c 0c0c 	adc.w	ip, ip, ip
   17f34:	eb18 0809 	adds.w	r8, r8, r9
   17f38:	eb5b 0b0a 	adcs.w	fp, fp, sl
   17f3c:	f14c 0c00 	adc.w	ip, ip, #0
   17f40:	f840 8b04 	str.w	r8, [r0], #4
   17f44:	c904      	ldmia	r1!, {r2}
   17f46:	f04f 0a00 	mov.w	sl, #0
   17f4a:	fba3 8907 	umull	r8, r9, r3, r7
   17f4e:	46ce      	mov	lr, r9
   17f50:	fbe4 8906 	umlal	r8, r9, r4, r6
   17f54:	45ce      	cmp	lr, r9
   17f56:	bf88      	it	hi
   17f58:	f14a 0a00 	adchi.w	sl, sl, #0
   17f5c:	f8d0 e000 	ldr.w	lr, [r0]
   17f60:	eb18 080e 	adds.w	r8, r8, lr
   17f64:	f159 0900 	adcs.w	r9, r9, #0
   17f68:	f14a 0a00 	adc.w	sl, sl, #0
   17f6c:	eb18 0808 	adds.w	r8, r8, r8
   17f70:	eb59 0909 	adcs.w	r9, r9, r9
   17f74:	eb4a 0a0a 	adc.w	sl, sl, sl
   17f78:	46ce      	mov	lr, r9
   17f7a:	fbe5 8905 	umlal	r8, r9, r5, r5
   17f7e:	45ce      	cmp	lr, r9
   17f80:	bf88      	it	hi
   17f82:	f14a 0a00 	adchi.w	sl, sl, #0
   17f86:	eb18 080b 	adds.w	r8, r8, fp
   17f8a:	eb59 090c 	adcs.w	r9, r9, ip
   17f8e:	f14a 0a00 	adc.w	sl, sl, #0
   17f92:	f840 8b04 	str.w	r8, [r0], #4
   17f96:	f04f 0c00 	mov.w	ip, #0
   17f9a:	fba3 8b02 	umull	r8, fp, r3, r2
   17f9e:	46de      	mov	lr, fp
   17fa0:	fbe4 8b07 	umlal	r8, fp, r4, r7
   17fa4:	45de      	cmp	lr, fp
   17fa6:	bf88      	it	hi
   17fa8:	f14c 0c00 	adchi.w	ip, ip, #0
   17fac:	46de      	mov	lr, fp
   17fae:	fbe5 8b06 	umlal	r8, fp, r5, r6
   17fb2:	45de      	cmp	lr, fp
   17fb4:	bf88      	it	hi
   17fb6:	f14c 0c00 	adchi.w	ip, ip, #0
   17fba:	f8d0 e000 	ldr.w	lr, [r0]
   17fbe:	eb18 080e 	adds.w	r8, r8, lr
   17fc2:	f15b 0b00 	adcs.w	fp, fp, #0
   17fc6:	f14c 0c00 	adc.w	ip, ip, #0
   17fca:	eb18 0808 	adds.w	r8, r8, r8
   17fce:	eb5b 0b0b 	adcs.w	fp, fp, fp
   17fd2:	eb4c 0c0c 	adc.w	ip, ip, ip
   17fd6:	eb18 0809 	adds.w	r8, r8, r9
   17fda:	eb5b 0b0a 	adcs.w	fp, fp, sl
   17fde:	f14c 0c00 	adc.w	ip, ip, #0
   17fe2:	f840 8b04 	str.w	r8, [r0], #4
   17fe6:	c908      	ldmia	r1!, {r3}
   17fe8:	f04f 0a00 	mov.w	sl, #0
   17fec:	fba4 8902 	umull	r8, r9, r4, r2
   17ff0:	46ce      	mov	lr, r9
   17ff2:	fbe5 8907 	umlal	r8, r9, r5, r7
   17ff6:	45ce      	cmp	lr, r9
   17ff8:	bf88      	it	hi
   17ffa:	f14a 0a00 	adchi.w	sl, sl, #0
   17ffe:	f8d0 e000 	ldr.w	lr, [r0]
   18002:	eb18 080e 	adds.w	r8, r8, lr
   18006:	f159 0900 	adcs.w	r9, r9, #0
   1800a:	f14a 0a00 	adc.w	sl, sl, #0
   1800e:	eb18 0808 	adds.w	r8, r8, r8
   18012:	eb59 0909 	adcs.w	r9, r9, r9
   18016:	eb4a 0a0a 	adc.w	sl, sl, sl
   1801a:	46ce      	mov	lr, r9
   1801c:	fbe6 8906 	umlal	r8, r9, r6, r6
   18020:	45ce      	cmp	lr, r9
   18022:	bf88      	it	hi
   18024:	f14a 0a00 	adchi.w	sl, sl, #0
   18028:	eb18 080b 	adds.w	r8, r8, fp
   1802c:	eb59 090c 	adcs.w	r9, r9, ip
   18030:	f14a 0a00 	adc.w	sl, sl, #0
   18034:	f840 8b04 	str.w	r8, [r0], #4
   18038:	f04f 0c00 	mov.w	ip, #0
   1803c:	fba4 8b03 	umull	r8, fp, r4, r3
   18040:	46de      	mov	lr, fp
   18042:	fbe5 8b02 	umlal	r8, fp, r5, r2
   18046:	45de      	cmp	lr, fp
   18048:	bf88      	it	hi
   1804a:	f14c 0c00 	adchi.w	ip, ip, #0
   1804e:	46de      	mov	lr, fp
   18050:	fbe6 8b07 	umlal	r8, fp, r6, r7
   18054:	45de      	cmp	lr, fp
   18056:	bf88      	it	hi
   18058:	f14c 0c00 	adchi.w	ip, ip, #0
   1805c:	f8d0 e000 	ldr.w	lr, [r0]
   18060:	eb18 080e 	adds.w	r8, r8, lr
   18064:	f15b 0b00 	adcs.w	fp, fp, #0
   18068:	f14c 0c00 	adc.w	ip, ip, #0
   1806c:	eb18 0808 	adds.w	r8, r8, r8
   18070:	eb5b 0b0b 	adcs.w	fp, fp, fp
   18074:	eb4c 0c0c 	adc.w	ip, ip, ip
   18078:	eb18 0809 	adds.w	r8, r8, r9
   1807c:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18080:	f14c 0c00 	adc.w	ip, ip, #0
   18084:	f840 8b04 	str.w	r8, [r0], #4
   18088:	f04f 0a00 	mov.w	sl, #0
   1808c:	fba5 8903 	umull	r8, r9, r5, r3
   18090:	46ce      	mov	lr, r9
   18092:	fbe6 8902 	umlal	r8, r9, r6, r2
   18096:	45ce      	cmp	lr, r9
   18098:	bf88      	it	hi
   1809a:	f14a 0a00 	adchi.w	sl, sl, #0
   1809e:	eb18 0808 	adds.w	r8, r8, r8
   180a2:	eb59 0909 	adcs.w	r9, r9, r9
   180a6:	eb4a 0a0a 	adc.w	sl, sl, sl
   180aa:	46ce      	mov	lr, r9
   180ac:	fbe7 8907 	umlal	r8, r9, r7, r7
   180b0:	45ce      	cmp	lr, r9
   180b2:	bf88      	it	hi
   180b4:	f14a 0a00 	adchi.w	sl, sl, #0
   180b8:	eb18 080b 	adds.w	r8, r8, fp
   180bc:	eb59 090c 	adcs.w	r9, r9, ip
   180c0:	f14a 0a00 	adc.w	sl, sl, #0
   180c4:	f840 8b04 	str.w	r8, [r0], #4
   180c8:	f04f 0c00 	mov.w	ip, #0
   180cc:	fba6 8b03 	umull	r8, fp, r6, r3
   180d0:	46de      	mov	lr, fp
   180d2:	fbe7 8b02 	umlal	r8, fp, r7, r2
   180d6:	45de      	cmp	lr, fp
   180d8:	bf88      	it	hi
   180da:	f14c 0c00 	adchi.w	ip, ip, #0
   180de:	eb18 0808 	adds.w	r8, r8, r8
   180e2:	eb5b 0b0b 	adcs.w	fp, fp, fp
   180e6:	eb4c 0c0c 	adc.w	ip, ip, ip
   180ea:	eb18 0809 	adds.w	r8, r8, r9
   180ee:	eb5b 0b0a 	adcs.w	fp, fp, sl
   180f2:	f14c 0c00 	adc.w	ip, ip, #0
   180f6:	f840 8b04 	str.w	r8, [r0], #4
   180fa:	f04f 0800 	mov.w	r8, #0
   180fe:	fba7 1a03 	umull	r1, sl, r7, r3
   18102:	1849      	adds	r1, r1, r1
   18104:	eb5a 0a0a 	adcs.w	sl, sl, sl
   18108:	f148 0800 	adc.w	r8, r8, #0
   1810c:	eb1b 0b01 	adds.w	fp, fp, r1
   18110:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18114:	f148 0800 	adc.w	r8, r8, #0
   18118:	fba2 1a02 	umull	r1, sl, r2, r2
   1811c:	eb1b 0b01 	adds.w	fp, fp, r1
   18120:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18124:	f148 0800 	adc.w	r8, r8, #0
   18128:	f840 bb04 	str.w	fp, [r0], #4
   1812c:	f04f 0b00 	mov.w	fp, #0
   18130:	fba2 1a03 	umull	r1, sl, r2, r3
   18134:	1849      	adds	r1, r1, r1
   18136:	eb5a 0a0a 	adcs.w	sl, sl, sl
   1813a:	f14b 0b00 	adc.w	fp, fp, #0
   1813e:	eb1c 0c01 	adds.w	ip, ip, r1
   18142:	eb58 080a 	adcs.w	r8, r8, sl
   18146:	f14b 0b00 	adc.w	fp, fp, #0
   1814a:	f840 cb04 	str.w	ip, [r0], #4
   1814e:	fba3 1a03 	umull	r1, sl, r3, r3
   18152:	eb18 0801 	adds.w	r8, r8, r1
   18156:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1815a:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   1815e:	bf00      	nop
   18160:	b003      	add	sp, #12
   18162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018166 <vli_clear>:
        #include "asm_arm.inc"
    #endif
#endif

#if !defined(asm_clear) || !asm_clear
static void vli_clear(uECC_word_t *vli) {
   18166:	b084      	sub	sp, #16
   18168:	9001      	str	r0, [sp, #4]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1816a:	2300      	movs	r3, #0
   1816c:	9303      	str	r3, [sp, #12]
   1816e:	e008      	b.n	18182 <vli_clear+0x1c>
        vli[i] = 0;
   18170:	9b03      	ldr	r3, [sp, #12]
   18172:	009b      	lsls	r3, r3, #2
   18174:	9a01      	ldr	r2, [sp, #4]
   18176:	4413      	add	r3, r2
   18178:	2200      	movs	r2, #0
   1817a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1817c:	9b03      	ldr	r3, [sp, #12]
   1817e:	3301      	adds	r3, #1
   18180:	9303      	str	r3, [sp, #12]
   18182:	9b03      	ldr	r3, [sp, #12]
   18184:	2b07      	cmp	r3, #7
   18186:	d9f3      	bls.n	18170 <vli_clear+0xa>
    }
}
   18188:	bf00      	nop
   1818a:	bf00      	nop
   1818c:	b004      	add	sp, #16
   1818e:	4770      	bx	lr

00018190 <vli_isZero>:
#endif

/* Returns 1 if vli == 0, 0 otherwise. */
#if !defined(asm_isZero) || !asm_isZero
static uECC_word_t vli_isZero(const uECC_word_t *vli) {
   18190:	b084      	sub	sp, #16
   18192:	9001      	str	r0, [sp, #4]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   18194:	2300      	movs	r3, #0
   18196:	9303      	str	r3, [sp, #12]
   18198:	e00b      	b.n	181b2 <vli_isZero+0x22>
        if (vli[i]) {
   1819a:	9b03      	ldr	r3, [sp, #12]
   1819c:	009b      	lsls	r3, r3, #2
   1819e:	9a01      	ldr	r2, [sp, #4]
   181a0:	4413      	add	r3, r2
   181a2:	681b      	ldr	r3, [r3, #0]
   181a4:	2b00      	cmp	r3, #0
   181a6:	d001      	beq.n	181ac <vli_isZero+0x1c>
            return 0;
   181a8:	2300      	movs	r3, #0
   181aa:	e006      	b.n	181ba <vli_isZero+0x2a>
    for (i = 0; i < uECC_WORDS; ++i) {
   181ac:	9b03      	ldr	r3, [sp, #12]
   181ae:	3301      	adds	r3, #1
   181b0:	9303      	str	r3, [sp, #12]
   181b2:	9b03      	ldr	r3, [sp, #12]
   181b4:	2b07      	cmp	r3, #7
   181b6:	d9f0      	bls.n	1819a <vli_isZero+0xa>
        }
    }
    return 1;
   181b8:	2301      	movs	r3, #1
}
   181ba:	4618      	mov	r0, r3
   181bc:	b004      	add	sp, #16
   181be:	4770      	bx	lr

000181c0 <vli_testBit>:
#endif

/* Returns nonzero if bit 'bit' of vli is set. */
#if !defined(asm_testBit) || !asm_testBit
static uECC_word_t vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
   181c0:	b082      	sub	sp, #8
   181c2:	9001      	str	r0, [sp, #4]
   181c4:	9100      	str	r1, [sp, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   181c6:	9b00      	ldr	r3, [sp, #0]
   181c8:	115b      	asrs	r3, r3, #5
   181ca:	009b      	lsls	r3, r3, #2
   181cc:	9a01      	ldr	r2, [sp, #4]
   181ce:	4413      	add	r3, r2
   181d0:	681a      	ldr	r2, [r3, #0]
   181d2:	9b00      	ldr	r3, [sp, #0]
   181d4:	f003 031f 	and.w	r3, r3, #31
   181d8:	2101      	movs	r1, #1
   181da:	fa01 f303 	lsl.w	r3, r1, r3
   181de:	4013      	ands	r3, r2
}
   181e0:	4618      	mov	r0, r3
   181e2:	b002      	add	sp, #8
   181e4:	4770      	bx	lr

000181e6 <vli_set>:
}
#endif /* !asm_numBits */

/* Sets dest = src. */
#if !defined(asm_set) || !asm_set
static void vli_set(uECC_word_t *dest, const uECC_word_t *src) {
   181e6:	b084      	sub	sp, #16
   181e8:	9001      	str	r0, [sp, #4]
   181ea:	9100      	str	r1, [sp, #0]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   181ec:	2300      	movs	r3, #0
   181ee:	9303      	str	r3, [sp, #12]
   181f0:	e00c      	b.n	1820c <vli_set+0x26>
        dest[i] = src[i];
   181f2:	9b03      	ldr	r3, [sp, #12]
   181f4:	009b      	lsls	r3, r3, #2
   181f6:	9a00      	ldr	r2, [sp, #0]
   181f8:	441a      	add	r2, r3
   181fa:	9b03      	ldr	r3, [sp, #12]
   181fc:	009b      	lsls	r3, r3, #2
   181fe:	9901      	ldr	r1, [sp, #4]
   18200:	440b      	add	r3, r1
   18202:	6812      	ldr	r2, [r2, #0]
   18204:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   18206:	9b03      	ldr	r3, [sp, #12]
   18208:	3301      	adds	r3, #1
   1820a:	9303      	str	r3, [sp, #12]
   1820c:	9b03      	ldr	r3, [sp, #12]
   1820e:	2b07      	cmp	r3, #7
   18210:	d9ef      	bls.n	181f2 <vli_set+0xc>
    }
}
   18212:	bf00      	nop
   18214:	bf00      	nop
   18216:	b004      	add	sp, #16
   18218:	4770      	bx	lr

0001821a <vli_cmp>:
#endif

/* Returns sign of left - right. */
#if !defined(asm_cmp) || !asm_cmp
static cmpresult_t vli_cmp(const uECC_word_t *left, const uECC_word_t *right) {
   1821a:	b084      	sub	sp, #16
   1821c:	9001      	str	r0, [sp, #4]
   1821e:	9100      	str	r1, [sp, #0]
    swordcount_t i;
    for (i = uECC_WORDS - 1; i >= 0; --i) {
   18220:	2307      	movs	r3, #7
   18222:	9303      	str	r3, [sp, #12]
   18224:	e01f      	b.n	18266 <vli_cmp+0x4c>
        if (left[i] > right[i]) {
   18226:	9b03      	ldr	r3, [sp, #12]
   18228:	009b      	lsls	r3, r3, #2
   1822a:	9a01      	ldr	r2, [sp, #4]
   1822c:	4413      	add	r3, r2
   1822e:	681a      	ldr	r2, [r3, #0]
   18230:	9b03      	ldr	r3, [sp, #12]
   18232:	009b      	lsls	r3, r3, #2
   18234:	9900      	ldr	r1, [sp, #0]
   18236:	440b      	add	r3, r1
   18238:	681b      	ldr	r3, [r3, #0]
   1823a:	429a      	cmp	r2, r3
   1823c:	d901      	bls.n	18242 <vli_cmp+0x28>
            return 1;
   1823e:	2301      	movs	r3, #1
   18240:	e015      	b.n	1826e <vli_cmp+0x54>
        } else if (left[i] < right[i]) {
   18242:	9b03      	ldr	r3, [sp, #12]
   18244:	009b      	lsls	r3, r3, #2
   18246:	9a01      	ldr	r2, [sp, #4]
   18248:	4413      	add	r3, r2
   1824a:	681a      	ldr	r2, [r3, #0]
   1824c:	9b03      	ldr	r3, [sp, #12]
   1824e:	009b      	lsls	r3, r3, #2
   18250:	9900      	ldr	r1, [sp, #0]
   18252:	440b      	add	r3, r1
   18254:	681b      	ldr	r3, [r3, #0]
   18256:	429a      	cmp	r2, r3
   18258:	d202      	bcs.n	18260 <vli_cmp+0x46>
            return -1;
   1825a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1825e:	e006      	b.n	1826e <vli_cmp+0x54>
    for (i = uECC_WORDS - 1; i >= 0; --i) {
   18260:	9b03      	ldr	r3, [sp, #12]
   18262:	3b01      	subs	r3, #1
   18264:	9303      	str	r3, [sp, #12]
   18266:	9b03      	ldr	r3, [sp, #12]
   18268:	2b00      	cmp	r3, #0
   1826a:	dadc      	bge.n	18226 <vli_cmp+0xc>
        }
    }
    return 0;
   1826c:	2300      	movs	r3, #0
}
   1826e:	4618      	mov	r0, r3
   18270:	b004      	add	sp, #16
   18272:	4770      	bx	lr

00018274 <vli_rshift1>:
    return (result == 0);
}

/* Computes vli = vli >> 1. */
#if !defined(asm_rshift1) || !asm_rshift1
static void vli_rshift1(uECC_word_t *vli) {
   18274:	b086      	sub	sp, #24
   18276:	9001      	str	r0, [sp, #4]
    uECC_word_t *end = vli;
   18278:	9b01      	ldr	r3, [sp, #4]
   1827a:	9304      	str	r3, [sp, #16]
    uECC_word_t carry = 0;
   1827c:	2300      	movs	r3, #0
   1827e:	9305      	str	r3, [sp, #20]

    vli += uECC_WORDS;
   18280:	9b01      	ldr	r3, [sp, #4]
   18282:	3320      	adds	r3, #32
   18284:	9301      	str	r3, [sp, #4]
    while (vli-- > end) {
   18286:	e00b      	b.n	182a0 <vli_rshift1+0x2c>
        uECC_word_t temp = *vli;
   18288:	9b01      	ldr	r3, [sp, #4]
   1828a:	681b      	ldr	r3, [r3, #0]
   1828c:	9303      	str	r3, [sp, #12]
        *vli = (temp >> 1) | carry;
   1828e:	9b03      	ldr	r3, [sp, #12]
   18290:	085a      	lsrs	r2, r3, #1
   18292:	9b05      	ldr	r3, [sp, #20]
   18294:	431a      	orrs	r2, r3
   18296:	9b01      	ldr	r3, [sp, #4]
   18298:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
   1829a:	9b03      	ldr	r3, [sp, #12]
   1829c:	07db      	lsls	r3, r3, #31
   1829e:	9305      	str	r3, [sp, #20]
    while (vli-- > end) {
   182a0:	9b01      	ldr	r3, [sp, #4]
   182a2:	1f1a      	subs	r2, r3, #4
   182a4:	9201      	str	r2, [sp, #4]
   182a6:	9a04      	ldr	r2, [sp, #16]
   182a8:	429a      	cmp	r2, r3
   182aa:	d3ed      	bcc.n	18288 <vli_rshift1+0x14>
    }
}
   182ac:	bf00      	nop
   182ae:	bf00      	nop
   182b0:	b006      	add	sp, #24
   182b2:	4770      	bx	lr

000182b4 <vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
#if !defined(asm_modAdd) || !asm_modAdd
static void vli_modAdd(uECC_word_t *result,
                       const uECC_word_t *left,
                       const uECC_word_t *right,
                       const uECC_word_t *mod) {
   182b4:	b500      	push	{lr}
   182b6:	b087      	sub	sp, #28
   182b8:	9003      	str	r0, [sp, #12]
   182ba:	9102      	str	r1, [sp, #8]
   182bc:	9201      	str	r2, [sp, #4]
   182be:	9300      	str	r3, [sp, #0]
    uECC_word_t carry = vli_add(result, left, right);
   182c0:	9a01      	ldr	r2, [sp, #4]
   182c2:	9902      	ldr	r1, [sp, #8]
   182c4:	9803      	ldr	r0, [sp, #12]
   182c6:	f7ff fa37 	bl	17738 <vli_add>
   182ca:	9005      	str	r0, [sp, #20]
    if (carry || vli_cmp(result, mod) >= 0) {
   182cc:	9b05      	ldr	r3, [sp, #20]
   182ce:	2b00      	cmp	r3, #0
   182d0:	d106      	bne.n	182e0 <vli_modAdd+0x2c>
   182d2:	9900      	ldr	r1, [sp, #0]
   182d4:	9803      	ldr	r0, [sp, #12]
   182d6:	f7ff ffa0 	bl	1821a <vli_cmp>
   182da:	4603      	mov	r3, r0
   182dc:	2b00      	cmp	r3, #0
   182de:	db04      	blt.n	182ea <vli_modAdd+0x36>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        vli_sub(result, result, mod);
   182e0:	9a00      	ldr	r2, [sp, #0]
   182e2:	9903      	ldr	r1, [sp, #12]
   182e4:	9803      	ldr	r0, [sp, #12]
   182e6:	f7ff fa5e 	bl	177a6 <vli_sub>
    }
}
   182ea:	bf00      	nop
   182ec:	b007      	add	sp, #28
   182ee:	f85d fb04 	ldr.w	pc, [sp], #4

000182f2 <vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
#if !defined(asm_modSub) || !asm_modSub
static void vli_modSub(uECC_word_t *result,
                       const uECC_word_t *left,
                       const uECC_word_t *right,
                       const uECC_word_t *mod) {
   182f2:	b500      	push	{lr}
   182f4:	b087      	sub	sp, #28
   182f6:	9003      	str	r0, [sp, #12]
   182f8:	9102      	str	r1, [sp, #8]
   182fa:	9201      	str	r2, [sp, #4]
   182fc:	9300      	str	r3, [sp, #0]
    uECC_word_t l_borrow = vli_sub(result, left, right);
   182fe:	9a01      	ldr	r2, [sp, #4]
   18300:	9902      	ldr	r1, [sp, #8]
   18302:	9803      	ldr	r0, [sp, #12]
   18304:	f7ff fa4f 	bl	177a6 <vli_sub>
   18308:	9005      	str	r0, [sp, #20]
    if (l_borrow) {
   1830a:	9b05      	ldr	r3, [sp, #20]
   1830c:	2b00      	cmp	r3, #0
   1830e:	d004      	beq.n	1831a <vli_modSub+0x28>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        vli_add(result, result, mod);
   18310:	9a00      	ldr	r2, [sp, #0]
   18312:	9903      	ldr	r1, [sp, #12]
   18314:	9803      	ldr	r0, [sp, #12]
   18316:	f7ff fa0f 	bl	17738 <vli_add>
    }
}
   1831a:	bf00      	nop
   1831c:	b007      	add	sp, #28
   1831e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00018324 <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   18324:	b500      	push	{lr}
   18326:	b08d      	sub	sp, #52	; 0x34
   18328:	9001      	str	r0, [sp, #4]
   1832a:	9100      	str	r1, [sp, #0]
    uint32_t tmp[uECC_WORDS];
    int carry;

    /* t */
    vli_set(result, product);
   1832c:	9900      	ldr	r1, [sp, #0]
   1832e:	9801      	ldr	r0, [sp, #4]
   18330:	f7ff ff59 	bl	181e6 <vli_set>

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
   18334:	2300      	movs	r3, #0
   18336:	9305      	str	r3, [sp, #20]
   18338:	9b05      	ldr	r3, [sp, #20]
   1833a:	9304      	str	r3, [sp, #16]
   1833c:	9b04      	ldr	r3, [sp, #16]
   1833e:	9303      	str	r3, [sp, #12]
    tmp[3] = product[11];
   18340:	9b00      	ldr	r3, [sp, #0]
   18342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18344:	9306      	str	r3, [sp, #24]
    tmp[4] = product[12];
   18346:	9b00      	ldr	r3, [sp, #0]
   18348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1834a:	9307      	str	r3, [sp, #28]
    tmp[5] = product[13];
   1834c:	9b00      	ldr	r3, [sp, #0]
   1834e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18350:	9308      	str	r3, [sp, #32]
    tmp[6] = product[14];
   18352:	9b00      	ldr	r3, [sp, #0]
   18354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18356:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[15];
   18358:	9b00      	ldr	r3, [sp, #0]
   1835a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1835c:	930a      	str	r3, [sp, #40]	; 0x28
    carry = vli_add(tmp, tmp, tmp);
   1835e:	aa03      	add	r2, sp, #12
   18360:	a903      	add	r1, sp, #12
   18362:	ab03      	add	r3, sp, #12
   18364:	4618      	mov	r0, r3
   18366:	f7ff f9e7 	bl	17738 <vli_add>
   1836a:	4603      	mov	r3, r0
   1836c:	930b      	str	r3, [sp, #44]	; 0x2c
    carry += vli_add(result, result, tmp);
   1836e:	ab03      	add	r3, sp, #12
   18370:	461a      	mov	r2, r3
   18372:	9901      	ldr	r1, [sp, #4]
   18374:	9801      	ldr	r0, [sp, #4]
   18376:	f7ff f9df 	bl	17738 <vli_add>
   1837a:	4602      	mov	r2, r0
   1837c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1837e:	4413      	add	r3, r2
   18380:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s2 */
    tmp[3] = product[12];
   18382:	9b00      	ldr	r3, [sp, #0]
   18384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18386:	9306      	str	r3, [sp, #24]
    tmp[4] = product[13];
   18388:	9b00      	ldr	r3, [sp, #0]
   1838a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1838c:	9307      	str	r3, [sp, #28]
    tmp[5] = product[14];
   1838e:	9b00      	ldr	r3, [sp, #0]
   18390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18392:	9308      	str	r3, [sp, #32]
    tmp[6] = product[15];
   18394:	9b00      	ldr	r3, [sp, #0]
   18396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18398:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = 0;
   1839a:	2300      	movs	r3, #0
   1839c:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(tmp, tmp, tmp);
   1839e:	aa03      	add	r2, sp, #12
   183a0:	a903      	add	r1, sp, #12
   183a2:	ab03      	add	r3, sp, #12
   183a4:	4618      	mov	r0, r3
   183a6:	f7ff f9c7 	bl	17738 <vli_add>
   183aa:	4602      	mov	r2, r0
   183ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   183ae:	4413      	add	r3, r2
   183b0:	930b      	str	r3, [sp, #44]	; 0x2c
    carry += vli_add(result, result, tmp);
   183b2:	ab03      	add	r3, sp, #12
   183b4:	461a      	mov	r2, r3
   183b6:	9901      	ldr	r1, [sp, #4]
   183b8:	9801      	ldr	r0, [sp, #4]
   183ba:	f7ff f9bd 	bl	17738 <vli_add>
   183be:	4602      	mov	r2, r0
   183c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   183c2:	4413      	add	r3, r2
   183c4:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s3 */
    tmp[0] = product[8];
   183c6:	9b00      	ldr	r3, [sp, #0]
   183c8:	6a1b      	ldr	r3, [r3, #32]
   183ca:	9303      	str	r3, [sp, #12]
    tmp[1] = product[9];
   183cc:	9b00      	ldr	r3, [sp, #0]
   183ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   183d0:	9304      	str	r3, [sp, #16]
    tmp[2] = product[10];
   183d2:	9b00      	ldr	r3, [sp, #0]
   183d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   183d6:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
   183d8:	2300      	movs	r3, #0
   183da:	9308      	str	r3, [sp, #32]
   183dc:	9b08      	ldr	r3, [sp, #32]
   183de:	9307      	str	r3, [sp, #28]
   183e0:	9b07      	ldr	r3, [sp, #28]
   183e2:	9306      	str	r3, [sp, #24]
    tmp[6] = product[14];
   183e4:	9b00      	ldr	r3, [sp, #0]
   183e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   183e8:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[15];
   183ea:	9b00      	ldr	r3, [sp, #0]
   183ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   183ee:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(result, result, tmp);
   183f0:	ab03      	add	r3, sp, #12
   183f2:	461a      	mov	r2, r3
   183f4:	9901      	ldr	r1, [sp, #4]
   183f6:	9801      	ldr	r0, [sp, #4]
   183f8:	f7ff f99e 	bl	17738 <vli_add>
   183fc:	4602      	mov	r2, r0
   183fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18400:	4413      	add	r3, r2
   18402:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s4 */
    tmp[0] = product[9];
   18404:	9b00      	ldr	r3, [sp, #0]
   18406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18408:	9303      	str	r3, [sp, #12]
    tmp[1] = product[10];
   1840a:	9b00      	ldr	r3, [sp, #0]
   1840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1840e:	9304      	str	r3, [sp, #16]
    tmp[2] = product[11];
   18410:	9b00      	ldr	r3, [sp, #0]
   18412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18414:	9305      	str	r3, [sp, #20]
    tmp[3] = product[13];
   18416:	9b00      	ldr	r3, [sp, #0]
   18418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1841a:	9306      	str	r3, [sp, #24]
    tmp[4] = product[14];
   1841c:	9b00      	ldr	r3, [sp, #0]
   1841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18420:	9307      	str	r3, [sp, #28]
    tmp[5] = product[15];
   18422:	9b00      	ldr	r3, [sp, #0]
   18424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18426:	9308      	str	r3, [sp, #32]
    tmp[6] = product[13];
   18428:	9b00      	ldr	r3, [sp, #0]
   1842a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1842c:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[8];
   1842e:	9b00      	ldr	r3, [sp, #0]
   18430:	6a1b      	ldr	r3, [r3, #32]
   18432:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(result, result, tmp);
   18434:	ab03      	add	r3, sp, #12
   18436:	461a      	mov	r2, r3
   18438:	9901      	ldr	r1, [sp, #4]
   1843a:	9801      	ldr	r0, [sp, #4]
   1843c:	f7ff f97c 	bl	17738 <vli_add>
   18440:	4602      	mov	r2, r0
   18442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18444:	4413      	add	r3, r2
   18446:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d1 */
    tmp[0] = product[11];
   18448:	9b00      	ldr	r3, [sp, #0]
   1844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1844c:	9303      	str	r3, [sp, #12]
    tmp[1] = product[12];
   1844e:	9b00      	ldr	r3, [sp, #0]
   18450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18452:	9304      	str	r3, [sp, #16]
    tmp[2] = product[13];
   18454:	9b00      	ldr	r3, [sp, #0]
   18456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18458:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
   1845a:	2300      	movs	r3, #0
   1845c:	9308      	str	r3, [sp, #32]
   1845e:	9b08      	ldr	r3, [sp, #32]
   18460:	9307      	str	r3, [sp, #28]
   18462:	9b07      	ldr	r3, [sp, #28]
   18464:	9306      	str	r3, [sp, #24]
    tmp[6] = product[8];
   18466:	9b00      	ldr	r3, [sp, #0]
   18468:	6a1b      	ldr	r3, [r3, #32]
   1846a:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[10];
   1846c:	9b00      	ldr	r3, [sp, #0]
   1846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18470:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   18472:	ab03      	add	r3, sp, #12
   18474:	461a      	mov	r2, r3
   18476:	9901      	ldr	r1, [sp, #4]
   18478:	9801      	ldr	r0, [sp, #4]
   1847a:	f7ff f994 	bl	177a6 <vli_sub>
   1847e:	4602      	mov	r2, r0
   18480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18482:	1a9b      	subs	r3, r3, r2
   18484:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d2 */
    tmp[0] = product[12];
   18486:	9b00      	ldr	r3, [sp, #0]
   18488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1848a:	9303      	str	r3, [sp, #12]
    tmp[1] = product[13];
   1848c:	9b00      	ldr	r3, [sp, #0]
   1848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18490:	9304      	str	r3, [sp, #16]
    tmp[2] = product[14];
   18492:	9b00      	ldr	r3, [sp, #0]
   18494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18496:	9305      	str	r3, [sp, #20]
    tmp[3] = product[15];
   18498:	9b00      	ldr	r3, [sp, #0]
   1849a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1849c:	9306      	str	r3, [sp, #24]
    tmp[4] = tmp[5] = 0;
   1849e:	2300      	movs	r3, #0
   184a0:	9308      	str	r3, [sp, #32]
   184a2:	9b08      	ldr	r3, [sp, #32]
   184a4:	9307      	str	r3, [sp, #28]
    tmp[6] = product[9];
   184a6:	9b00      	ldr	r3, [sp, #0]
   184a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   184aa:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[11];
   184ac:	9b00      	ldr	r3, [sp, #0]
   184ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   184b0:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   184b2:	ab03      	add	r3, sp, #12
   184b4:	461a      	mov	r2, r3
   184b6:	9901      	ldr	r1, [sp, #4]
   184b8:	9801      	ldr	r0, [sp, #4]
   184ba:	f7ff f974 	bl	177a6 <vli_sub>
   184be:	4602      	mov	r2, r0
   184c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   184c2:	1a9b      	subs	r3, r3, r2
   184c4:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d3 */
    tmp[0] = product[13];
   184c6:	9b00      	ldr	r3, [sp, #0]
   184c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   184ca:	9303      	str	r3, [sp, #12]
    tmp[1] = product[14];
   184cc:	9b00      	ldr	r3, [sp, #0]
   184ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   184d0:	9304      	str	r3, [sp, #16]
    tmp[2] = product[15];
   184d2:	9b00      	ldr	r3, [sp, #0]
   184d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   184d6:	9305      	str	r3, [sp, #20]
    tmp[3] = product[8];
   184d8:	9b00      	ldr	r3, [sp, #0]
   184da:	6a1b      	ldr	r3, [r3, #32]
   184dc:	9306      	str	r3, [sp, #24]
    tmp[4] = product[9];
   184de:	9b00      	ldr	r3, [sp, #0]
   184e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   184e2:	9307      	str	r3, [sp, #28]
    tmp[5] = product[10];
   184e4:	9b00      	ldr	r3, [sp, #0]
   184e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   184e8:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
   184ea:	2300      	movs	r3, #0
   184ec:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[12];
   184ee:	9b00      	ldr	r3, [sp, #0]
   184f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   184f2:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   184f4:	ab03      	add	r3, sp, #12
   184f6:	461a      	mov	r2, r3
   184f8:	9901      	ldr	r1, [sp, #4]
   184fa:	9801      	ldr	r0, [sp, #4]
   184fc:	f7ff f953 	bl	177a6 <vli_sub>
   18500:	4602      	mov	r2, r0
   18502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18504:	1a9b      	subs	r3, r3, r2
   18506:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d4 */
    tmp[0] = product[14];
   18508:	9b00      	ldr	r3, [sp, #0]
   1850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1850c:	9303      	str	r3, [sp, #12]
    tmp[1] = product[15];
   1850e:	9b00      	ldr	r3, [sp, #0]
   18510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18512:	9304      	str	r3, [sp, #16]
    tmp[2] = 0;
   18514:	2300      	movs	r3, #0
   18516:	9305      	str	r3, [sp, #20]
    tmp[3] = product[9];
   18518:	9b00      	ldr	r3, [sp, #0]
   1851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1851c:	9306      	str	r3, [sp, #24]
    tmp[4] = product[10];
   1851e:	9b00      	ldr	r3, [sp, #0]
   18520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18522:	9307      	str	r3, [sp, #28]
    tmp[5] = product[11];
   18524:	9b00      	ldr	r3, [sp, #0]
   18526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18528:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
   1852a:	2300      	movs	r3, #0
   1852c:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[13];
   1852e:	9b00      	ldr	r3, [sp, #0]
   18530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18532:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   18534:	ab03      	add	r3, sp, #12
   18536:	461a      	mov	r2, r3
   18538:	9901      	ldr	r1, [sp, #4]
   1853a:	9801      	ldr	r0, [sp, #4]
   1853c:	f7ff f933 	bl	177a6 <vli_sub>
   18540:	4602      	mov	r2, r0
   18542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18544:	1a9b      	subs	r3, r3, r2
   18546:	930b      	str	r3, [sp, #44]	; 0x2c

    if (carry < 0) {
   18548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1854a:	2b00      	cmp	r3, #0
   1854c:	da15      	bge.n	1857a <vli_mmod_fast+0x256>
        do {
            carry += vli_add(result, result, curve_p);
   1854e:	4a12      	ldr	r2, [pc, #72]	; (18598 <vli_mmod_fast+0x274>)
   18550:	9901      	ldr	r1, [sp, #4]
   18552:	9801      	ldr	r0, [sp, #4]
   18554:	f7ff f8f0 	bl	17738 <vli_add>
   18558:	4602      	mov	r2, r0
   1855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1855c:	4413      	add	r3, r2
   1855e:	930b      	str	r3, [sp, #44]	; 0x2c
        } while (carry < 0);
   18560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18562:	2b00      	cmp	r3, #0
   18564:	dbf3      	blt.n	1854e <vli_mmod_fast+0x22a>
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
   18566:	e012      	b.n	1858e <vli_mmod_fast+0x26a>
            carry -= vli_sub(result, result, curve_p);
   18568:	4a0b      	ldr	r2, [pc, #44]	; (18598 <vli_mmod_fast+0x274>)
   1856a:	9901      	ldr	r1, [sp, #4]
   1856c:	9801      	ldr	r0, [sp, #4]
   1856e:	f7ff f91a 	bl	177a6 <vli_sub>
   18572:	4602      	mov	r2, r0
   18574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18576:	1a9b      	subs	r3, r3, r2
   18578:	930b      	str	r3, [sp, #44]	; 0x2c
        while (carry || vli_cmp(curve_p, result) != 1) {
   1857a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1857c:	2b00      	cmp	r3, #0
   1857e:	d1f3      	bne.n	18568 <vli_mmod_fast+0x244>
   18580:	9901      	ldr	r1, [sp, #4]
   18582:	4805      	ldr	r0, [pc, #20]	; (18598 <vli_mmod_fast+0x274>)
   18584:	f7ff fe49 	bl	1821a <vli_cmp>
   18588:	4603      	mov	r3, r0
   1858a:	2b01      	cmp	r3, #1
   1858c:	d1ec      	bne.n	18568 <vli_mmod_fast+0x244>
}
   1858e:	bf00      	nop
   18590:	b00d      	add	sp, #52	; 0x34
   18592:	f85d fb04 	ldr.w	pc, [sp], #4
   18596:	bf00      	nop
   18598:	0002c4b0 	.word	0x0002c4b0

0001859c <vli_modMult_fast>:
#endif /* !asm_mmod_fast */

/* Computes result = (left * right) % curve_p. */
static void vli_modMult_fast(uECC_word_t *result,
                             const uECC_word_t *left,
                             const uECC_word_t *right) {
   1859c:	b500      	push	{lr}
   1859e:	b095      	sub	sp, #84	; 0x54
   185a0:	9003      	str	r0, [sp, #12]
   185a2:	9102      	str	r1, [sp, #8]
   185a4:	9201      	str	r2, [sp, #4]
    uECC_word_t product[2 * uECC_WORDS];
    vli_mult(product, left, right);
   185a6:	ab04      	add	r3, sp, #16
   185a8:	9a01      	ldr	r2, [sp, #4]
   185aa:	9902      	ldr	r1, [sp, #8]
   185ac:	4618      	mov	r0, r3
   185ae:	f7ff f936 	bl	1781e <vli_mult>
    vli_mmod_fast(result, product);
   185b2:	ab04      	add	r3, sp, #16
   185b4:	4619      	mov	r1, r3
   185b6:	9803      	ldr	r0, [sp, #12]
   185b8:	f7ff feb4 	bl	18324 <vli_mmod_fast>
}
   185bc:	bf00      	nop
   185be:	b015      	add	sp, #84	; 0x54
   185c0:	f85d fb04 	ldr.w	pc, [sp], #4

000185c4 <vli_modSquare_fast>:

#if uECC_SQUARE_FUNC

/* Computes result = left^2 % curve_p. */
static void vli_modSquare_fast(uECC_word_t *result, const uECC_word_t *left) {
   185c4:	b500      	push	{lr}
   185c6:	b093      	sub	sp, #76	; 0x4c
   185c8:	9001      	str	r0, [sp, #4]
   185ca:	9100      	str	r1, [sp, #0]
    uECC_word_t product[2 * uECC_WORDS];
    vli_square(product, left);
   185cc:	ab02      	add	r3, sp, #8
   185ce:	9900      	ldr	r1, [sp, #0]
   185d0:	4618      	mov	r0, r3
   185d2:	f7ff fc08 	bl	17de6 <vli_square>
    vli_mmod_fast(result, product);
   185d6:	ab02      	add	r3, sp, #8
   185d8:	4619      	mov	r1, r3
   185da:	9801      	ldr	r0, [sp, #4]
   185dc:	f7ff fea2 	bl	18324 <vli_mmod_fast>
}
   185e0:	bf00      	nop
   185e2:	b013      	add	sp, #76	; 0x4c
   185e4:	f85d fb04 	ldr.w	pc, [sp], #4

000185e8 <vli_modInv>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   185e8:	b500      	push	{lr}
   185ea:	b0a7      	sub	sp, #156	; 0x9c
   185ec:	9003      	str	r0, [sp, #12]
   185ee:	9102      	str	r1, [sp, #8]
   185f0:	9201      	str	r2, [sp, #4]
    uECC_word_t a[uECC_WORDS], b[uECC_WORDS], u[uECC_WORDS], v[uECC_WORDS];
    uECC_word_t carry;
    cmpresult_t cmpResult;

    if (vli_isZero(input)) {
   185f2:	9802      	ldr	r0, [sp, #8]
   185f4:	f7ff fdcc 	bl	18190 <vli_isZero>
   185f8:	4603      	mov	r3, r0
   185fa:	2b00      	cmp	r3, #0
   185fc:	d003      	beq.n	18606 <vli_modInv+0x1e>
        vli_clear(result);
   185fe:	9803      	ldr	r0, [sp, #12]
   18600:	f7ff fdb1 	bl	18166 <vli_clear>
   18604:	e0d9      	b.n	187ba <vli_modInv+0x1d2>
        return;
    }

    vli_set(a, input);
   18606:	ab1c      	add	r3, sp, #112	; 0x70
   18608:	9902      	ldr	r1, [sp, #8]
   1860a:	4618      	mov	r0, r3
   1860c:	f7ff fdeb 	bl	181e6 <vli_set>
    vli_set(b, mod);
   18610:	ab14      	add	r3, sp, #80	; 0x50
   18612:	9901      	ldr	r1, [sp, #4]
   18614:	4618      	mov	r0, r3
   18616:	f7ff fde6 	bl	181e6 <vli_set>
    vli_clear(u);
   1861a:	ab0c      	add	r3, sp, #48	; 0x30
   1861c:	4618      	mov	r0, r3
   1861e:	f7ff fda2 	bl	18166 <vli_clear>
    u[0] = 1;
   18622:	2301      	movs	r3, #1
   18624:	930c      	str	r3, [sp, #48]	; 0x30
    vli_clear(v);
   18626:	ab04      	add	r3, sp, #16
   18628:	4618      	mov	r0, r3
   1862a:	f7ff fd9c 	bl	18166 <vli_clear>
    while ((cmpResult = vli_cmp(a, b)) != 0) {
   1862e:	e0b4      	b.n	1879a <vli_modInv+0x1b2>
        carry = 0;
   18630:	2300      	movs	r3, #0
   18632:	9325      	str	r3, [sp, #148]	; 0x94
        if (EVEN(a)) {
   18634:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18636:	f003 0301 	and.w	r3, r3, #1
   1863a:	2b00      	cmp	r3, #0
   1863c:	d11c      	bne.n	18678 <vli_modInv+0x90>
            vli_rshift1(a);
   1863e:	ab1c      	add	r3, sp, #112	; 0x70
   18640:	4618      	mov	r0, r3
   18642:	f7ff fe17 	bl	18274 <vli_rshift1>
            if (!EVEN(u)) {
   18646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18648:	f003 0301 	and.w	r3, r3, #1
   1864c:	2b00      	cmp	r3, #0
   1864e:	d006      	beq.n	1865e <vli_modInv+0x76>
                carry = vli_add(u, u, mod);
   18650:	a90c      	add	r1, sp, #48	; 0x30
   18652:	ab0c      	add	r3, sp, #48	; 0x30
   18654:	9a01      	ldr	r2, [sp, #4]
   18656:	4618      	mov	r0, r3
   18658:	f7ff f86e 	bl	17738 <vli_add>
   1865c:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(u);
   1865e:	ab0c      	add	r3, sp, #48	; 0x30
   18660:	4618      	mov	r0, r3
   18662:	f7ff fe07 	bl	18274 <vli_rshift1>
            if (carry) {
   18666:	9b25      	ldr	r3, [sp, #148]	; 0x94
   18668:	2b00      	cmp	r3, #0
   1866a:	f000 8096 	beq.w	1879a <vli_modInv+0x1b2>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1866e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18674:	9313      	str	r3, [sp, #76]	; 0x4c
   18676:	e090      	b.n	1879a <vli_modInv+0x1b2>
            }
        } else if (EVEN(b)) {
   18678:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1867a:	f003 0301 	and.w	r3, r3, #1
   1867e:	2b00      	cmp	r3, #0
   18680:	d11b      	bne.n	186ba <vli_modInv+0xd2>
            vli_rshift1(b);
   18682:	ab14      	add	r3, sp, #80	; 0x50
   18684:	4618      	mov	r0, r3
   18686:	f7ff fdf5 	bl	18274 <vli_rshift1>
            if (!EVEN(v)) {
   1868a:	9b04      	ldr	r3, [sp, #16]
   1868c:	f003 0301 	and.w	r3, r3, #1
   18690:	2b00      	cmp	r3, #0
   18692:	d006      	beq.n	186a2 <vli_modInv+0xba>
                carry = vli_add(v, v, mod);
   18694:	a904      	add	r1, sp, #16
   18696:	ab04      	add	r3, sp, #16
   18698:	9a01      	ldr	r2, [sp, #4]
   1869a:	4618      	mov	r0, r3
   1869c:	f7ff f84c 	bl	17738 <vli_add>
   186a0:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(v);
   186a2:	ab04      	add	r3, sp, #16
   186a4:	4618      	mov	r0, r3
   186a6:	f7ff fde5 	bl	18274 <vli_rshift1>
            if (carry) {
   186aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   186ac:	2b00      	cmp	r3, #0
   186ae:	d074      	beq.n	1879a <vli_modInv+0x1b2>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   186b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   186b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   186b6:	930b      	str	r3, [sp, #44]	; 0x2c
   186b8:	e06f      	b.n	1879a <vli_modInv+0x1b2>
            }
        } else if (cmpResult > 0) {
   186ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   186bc:	2b00      	cmp	r3, #0
   186be:	dd36      	ble.n	1872e <vli_modInv+0x146>
            vli_sub(a, a, b);
   186c0:	aa14      	add	r2, sp, #80	; 0x50
   186c2:	a91c      	add	r1, sp, #112	; 0x70
   186c4:	ab1c      	add	r3, sp, #112	; 0x70
   186c6:	4618      	mov	r0, r3
   186c8:	f7ff f86d 	bl	177a6 <vli_sub>
            vli_rshift1(a);
   186cc:	ab1c      	add	r3, sp, #112	; 0x70
   186ce:	4618      	mov	r0, r3
   186d0:	f7ff fdd0 	bl	18274 <vli_rshift1>
            if (vli_cmp(u, v) < 0) {
   186d4:	aa04      	add	r2, sp, #16
   186d6:	ab0c      	add	r3, sp, #48	; 0x30
   186d8:	4611      	mov	r1, r2
   186da:	4618      	mov	r0, r3
   186dc:	f7ff fd9d 	bl	1821a <vli_cmp>
   186e0:	4603      	mov	r3, r0
   186e2:	2b00      	cmp	r3, #0
   186e4:	da05      	bge.n	186f2 <vli_modInv+0x10a>
                vli_add(u, u, mod);
   186e6:	a90c      	add	r1, sp, #48	; 0x30
   186e8:	ab0c      	add	r3, sp, #48	; 0x30
   186ea:	9a01      	ldr	r2, [sp, #4]
   186ec:	4618      	mov	r0, r3
   186ee:	f7ff f823 	bl	17738 <vli_add>
            }
            vli_sub(u, u, v);
   186f2:	aa04      	add	r2, sp, #16
   186f4:	a90c      	add	r1, sp, #48	; 0x30
   186f6:	ab0c      	add	r3, sp, #48	; 0x30
   186f8:	4618      	mov	r0, r3
   186fa:	f7ff f854 	bl	177a6 <vli_sub>
            if (!EVEN(u)) {
   186fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18700:	f003 0301 	and.w	r3, r3, #1
   18704:	2b00      	cmp	r3, #0
   18706:	d006      	beq.n	18716 <vli_modInv+0x12e>
                carry = vli_add(u, u, mod);
   18708:	a90c      	add	r1, sp, #48	; 0x30
   1870a:	ab0c      	add	r3, sp, #48	; 0x30
   1870c:	9a01      	ldr	r2, [sp, #4]
   1870e:	4618      	mov	r0, r3
   18710:	f7ff f812 	bl	17738 <vli_add>
   18714:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(u);
   18716:	ab0c      	add	r3, sp, #48	; 0x30
   18718:	4618      	mov	r0, r3
   1871a:	f7ff fdab 	bl	18274 <vli_rshift1>
            if (carry) {
   1871e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   18720:	2b00      	cmp	r3, #0
   18722:	d03a      	beq.n	1879a <vli_modInv+0x1b2>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   18724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1872a:	9313      	str	r3, [sp, #76]	; 0x4c
   1872c:	e035      	b.n	1879a <vli_modInv+0x1b2>
            }
        } else {
            vli_sub(b, b, a);
   1872e:	aa1c      	add	r2, sp, #112	; 0x70
   18730:	a914      	add	r1, sp, #80	; 0x50
   18732:	ab14      	add	r3, sp, #80	; 0x50
   18734:	4618      	mov	r0, r3
   18736:	f7ff f836 	bl	177a6 <vli_sub>
            vli_rshift1(b);
   1873a:	ab14      	add	r3, sp, #80	; 0x50
   1873c:	4618      	mov	r0, r3
   1873e:	f7ff fd99 	bl	18274 <vli_rshift1>
            if (vli_cmp(v, u) < 0) {
   18742:	aa0c      	add	r2, sp, #48	; 0x30
   18744:	ab04      	add	r3, sp, #16
   18746:	4611      	mov	r1, r2
   18748:	4618      	mov	r0, r3
   1874a:	f7ff fd66 	bl	1821a <vli_cmp>
   1874e:	4603      	mov	r3, r0
   18750:	2b00      	cmp	r3, #0
   18752:	da05      	bge.n	18760 <vli_modInv+0x178>
                vli_add(v, v, mod);
   18754:	a904      	add	r1, sp, #16
   18756:	ab04      	add	r3, sp, #16
   18758:	9a01      	ldr	r2, [sp, #4]
   1875a:	4618      	mov	r0, r3
   1875c:	f7fe ffec 	bl	17738 <vli_add>
            }
            vli_sub(v, v, u);
   18760:	aa0c      	add	r2, sp, #48	; 0x30
   18762:	a904      	add	r1, sp, #16
   18764:	ab04      	add	r3, sp, #16
   18766:	4618      	mov	r0, r3
   18768:	f7ff f81d 	bl	177a6 <vli_sub>
            if (!EVEN(v)) {
   1876c:	9b04      	ldr	r3, [sp, #16]
   1876e:	f003 0301 	and.w	r3, r3, #1
   18772:	2b00      	cmp	r3, #0
   18774:	d006      	beq.n	18784 <vli_modInv+0x19c>
                carry = vli_add(v, v, mod);
   18776:	a904      	add	r1, sp, #16
   18778:	ab04      	add	r3, sp, #16
   1877a:	9a01      	ldr	r2, [sp, #4]
   1877c:	4618      	mov	r0, r3
   1877e:	f7fe ffdb 	bl	17738 <vli_add>
   18782:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(v);
   18784:	ab04      	add	r3, sp, #16
   18786:	4618      	mov	r0, r3
   18788:	f7ff fd74 	bl	18274 <vli_rshift1>
            if (carry) {
   1878c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1878e:	2b00      	cmp	r3, #0
   18790:	d003      	beq.n	1879a <vli_modInv+0x1b2>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   18792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18798:	930b      	str	r3, [sp, #44]	; 0x2c
    while ((cmpResult = vli_cmp(a, b)) != 0) {
   1879a:	aa14      	add	r2, sp, #80	; 0x50
   1879c:	ab1c      	add	r3, sp, #112	; 0x70
   1879e:	4611      	mov	r1, r2
   187a0:	4618      	mov	r0, r3
   187a2:	f7ff fd3a 	bl	1821a <vli_cmp>
   187a6:	9024      	str	r0, [sp, #144]	; 0x90
   187a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   187aa:	2b00      	cmp	r3, #0
   187ac:	f47f af40 	bne.w	18630 <vli_modInv+0x48>
            }
        }
    }
    vli_set(result, u);
   187b0:	ab0c      	add	r3, sp, #48	; 0x30
   187b2:	4619      	mov	r1, r3
   187b4:	9803      	ldr	r0, [sp, #12]
   187b6:	f7ff fd16 	bl	181e6 <vli_set>
}
   187ba:	b027      	add	sp, #156	; 0x9c
   187bc:	f85d fb04 	ldr.w	pc, [sp], #4

000187c0 <EccPoint_isZero>:
#endif /* !asm_modInv */

/* ------ Point operations ------ */

/* Returns 1 if 'point' is the point at infinity, 0 otherwise. */
static cmpresult_t EccPoint_isZero(const EccPoint *point) {
   187c0:	b500      	push	{lr}
   187c2:	b083      	sub	sp, #12
   187c4:	9001      	str	r0, [sp, #4]
    return (vli_isZero(point->x) && vli_isZero(point->y));
   187c6:	9b01      	ldr	r3, [sp, #4]
   187c8:	4618      	mov	r0, r3
   187ca:	f7ff fce1 	bl	18190 <vli_isZero>
   187ce:	4603      	mov	r3, r0
   187d0:	2b00      	cmp	r3, #0
   187d2:	d009      	beq.n	187e8 <EccPoint_isZero+0x28>
   187d4:	9b01      	ldr	r3, [sp, #4]
   187d6:	3320      	adds	r3, #32
   187d8:	4618      	mov	r0, r3
   187da:	f7ff fcd9 	bl	18190 <vli_isZero>
   187de:	4603      	mov	r3, r0
   187e0:	2b00      	cmp	r3, #0
   187e2:	d001      	beq.n	187e8 <EccPoint_isZero+0x28>
   187e4:	2301      	movs	r3, #1
   187e6:	e000      	b.n	187ea <EccPoint_isZero+0x2a>
   187e8:	2300      	movs	r3, #0
}
   187ea:	4618      	mov	r0, r3
   187ec:	b003      	add	sp, #12
   187ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000187f4 <EccPoint_double_jacobian>:
    vli_modSub(Y1, Y1, t5, curve_p); /* t2 = B * (A - x3) - y1^4 = y3 */
}
#else
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
                                     uECC_word_t * RESTRICT Y1,
                                     uECC_word_t * RESTRICT Z1) {
   187f4:	b500      	push	{lr}
   187f6:	b097      	sub	sp, #92	; 0x5c
   187f8:	9003      	str	r0, [sp, #12]
   187fa:	9102      	str	r1, [sp, #8]
   187fc:	9201      	str	r2, [sp, #4]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_WORDS];
    uECC_word_t t5[uECC_WORDS];

    if (vli_isZero(Z1)) {
   187fe:	9801      	ldr	r0, [sp, #4]
   18800:	f7ff fcc6 	bl	18190 <vli_isZero>
   18804:	4603      	mov	r3, r0
   18806:	2b00      	cmp	r3, #0
   18808:	f040 808a 	bne.w	18920 <EccPoint_double_jacobian+0x12c>
        return;
    }

    vli_modSquare_fast(t4, Y1);   /* t4 = y1^2 */
   1880c:	ab0d      	add	r3, sp, #52	; 0x34
   1880e:	9902      	ldr	r1, [sp, #8]
   18810:	4618      	mov	r0, r3
   18812:	f7ff fed7 	bl	185c4 <vli_modSquare_fast>
    vli_modMult_fast(t5, X1, t4); /* t5 = x1*y1^2 = A */
   18816:	aa0d      	add	r2, sp, #52	; 0x34
   18818:	ab05      	add	r3, sp, #20
   1881a:	9903      	ldr	r1, [sp, #12]
   1881c:	4618      	mov	r0, r3
   1881e:	f7ff febd 	bl	1859c <vli_modMult_fast>
    vli_modSquare_fast(t4, t4);   /* t4 = y1^4 */
   18822:	aa0d      	add	r2, sp, #52	; 0x34
   18824:	ab0d      	add	r3, sp, #52	; 0x34
   18826:	4611      	mov	r1, r2
   18828:	4618      	mov	r0, r3
   1882a:	f7ff fecb 	bl	185c4 <vli_modSquare_fast>
    vli_modMult_fast(Y1, Y1, Z1); /* t2 = y1*z1 = z3 */
   1882e:	9a01      	ldr	r2, [sp, #4]
   18830:	9902      	ldr	r1, [sp, #8]
   18832:	9802      	ldr	r0, [sp, #8]
   18834:	f7ff feb2 	bl	1859c <vli_modMult_fast>
    vli_modSquare_fast(Z1, Z1);   /* t3 = z1^2 */
   18838:	9901      	ldr	r1, [sp, #4]
   1883a:	9801      	ldr	r0, [sp, #4]
   1883c:	f7ff fec2 	bl	185c4 <vli_modSquare_fast>

    vli_modAdd(X1, X1, Z1, curve_p); /* t1 = x1 + z1^2 */
   18840:	4b39      	ldr	r3, [pc, #228]	; (18928 <EccPoint_double_jacobian+0x134>)
   18842:	9a01      	ldr	r2, [sp, #4]
   18844:	9903      	ldr	r1, [sp, #12]
   18846:	9803      	ldr	r0, [sp, #12]
   18848:	f7ff fd34 	bl	182b4 <vli_modAdd>
    vli_modAdd(Z1, Z1, Z1, curve_p); /* t3 = 2*z1^2 */
   1884c:	4b36      	ldr	r3, [pc, #216]	; (18928 <EccPoint_double_jacobian+0x134>)
   1884e:	9a01      	ldr	r2, [sp, #4]
   18850:	9901      	ldr	r1, [sp, #4]
   18852:	9801      	ldr	r0, [sp, #4]
   18854:	f7ff fd2e 	bl	182b4 <vli_modAdd>
    vli_modSub_fast(Z1, X1, Z1);     /* t3 = x1 - z1^2 */
   18858:	4b33      	ldr	r3, [pc, #204]	; (18928 <EccPoint_double_jacobian+0x134>)
   1885a:	9a01      	ldr	r2, [sp, #4]
   1885c:	9903      	ldr	r1, [sp, #12]
   1885e:	9801      	ldr	r0, [sp, #4]
   18860:	f7ff fd47 	bl	182f2 <vli_modSub>
    vli_modMult_fast(X1, X1, Z1);    /* t1 = x1^2 - z1^4 */
   18864:	9a01      	ldr	r2, [sp, #4]
   18866:	9903      	ldr	r1, [sp, #12]
   18868:	9803      	ldr	r0, [sp, #12]
   1886a:	f7ff fe97 	bl	1859c <vli_modMult_fast>

    vli_modAdd(Z1, X1, X1, curve_p); /* t3 = 2*(x1^2 - z1^4) */
   1886e:	4b2e      	ldr	r3, [pc, #184]	; (18928 <EccPoint_double_jacobian+0x134>)
   18870:	9a03      	ldr	r2, [sp, #12]
   18872:	9903      	ldr	r1, [sp, #12]
   18874:	9801      	ldr	r0, [sp, #4]
   18876:	f7ff fd1d 	bl	182b4 <vli_modAdd>
    vli_modAdd(X1, X1, Z1, curve_p); /* t1 = 3*(x1^2 - z1^4) */
   1887a:	4b2b      	ldr	r3, [pc, #172]	; (18928 <EccPoint_double_jacobian+0x134>)
   1887c:	9a01      	ldr	r2, [sp, #4]
   1887e:	9903      	ldr	r1, [sp, #12]
   18880:	9803      	ldr	r0, [sp, #12]
   18882:	f7ff fd17 	bl	182b4 <vli_modAdd>
    if (vli_testBit(X1, 0)) {
   18886:	2100      	movs	r1, #0
   18888:	9803      	ldr	r0, [sp, #12]
   1888a:	f7ff fc99 	bl	181c0 <vli_testBit>
   1888e:	4603      	mov	r3, r0
   18890:	2b00      	cmp	r3, #0
   18892:	d012      	beq.n	188ba <EccPoint_double_jacobian+0xc6>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   18894:	4a24      	ldr	r2, [pc, #144]	; (18928 <EccPoint_double_jacobian+0x134>)
   18896:	9903      	ldr	r1, [sp, #12]
   18898:	9803      	ldr	r0, [sp, #12]
   1889a:	f7fe ff4d 	bl	17738 <vli_add>
   1889e:	9015      	str	r0, [sp, #84]	; 0x54
        vli_rshift1(X1);
   188a0:	9803      	ldr	r0, [sp, #12]
   188a2:	f7ff fce7 	bl	18274 <vli_rshift1>
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   188a6:	9b03      	ldr	r3, [sp, #12]
   188a8:	331c      	adds	r3, #28
   188aa:	6819      	ldr	r1, [r3, #0]
   188ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   188ae:	07da      	lsls	r2, r3, #31
   188b0:	9b03      	ldr	r3, [sp, #12]
   188b2:	331c      	adds	r3, #28
   188b4:	430a      	orrs	r2, r1
   188b6:	601a      	str	r2, [r3, #0]
   188b8:	e002      	b.n	188c0 <EccPoint_double_jacobian+0xcc>
    } else {
        vli_rshift1(X1);
   188ba:	9803      	ldr	r0, [sp, #12]
   188bc:	f7ff fcda 	bl	18274 <vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    vli_modSquare_fast(Z1, X1);   /* t3 = B^2 */
   188c0:	9903      	ldr	r1, [sp, #12]
   188c2:	9801      	ldr	r0, [sp, #4]
   188c4:	f7ff fe7e 	bl	185c4 <vli_modSquare_fast>
    vli_modSub_fast(Z1, Z1, t5);  /* t3 = B^2 - A */
   188c8:	aa05      	add	r2, sp, #20
   188ca:	4b17      	ldr	r3, [pc, #92]	; (18928 <EccPoint_double_jacobian+0x134>)
   188cc:	9901      	ldr	r1, [sp, #4]
   188ce:	9801      	ldr	r0, [sp, #4]
   188d0:	f7ff fd0f 	bl	182f2 <vli_modSub>
    vli_modSub_fast(Z1, Z1, t5);  /* t3 = B^2 - 2A = x3 */
   188d4:	aa05      	add	r2, sp, #20
   188d6:	4b14      	ldr	r3, [pc, #80]	; (18928 <EccPoint_double_jacobian+0x134>)
   188d8:	9901      	ldr	r1, [sp, #4]
   188da:	9801      	ldr	r0, [sp, #4]
   188dc:	f7ff fd09 	bl	182f2 <vli_modSub>
    vli_modSub_fast(t5, t5, Z1);  /* t5 = A - x3 */
   188e0:	a905      	add	r1, sp, #20
   188e2:	a805      	add	r0, sp, #20
   188e4:	4b10      	ldr	r3, [pc, #64]	; (18928 <EccPoint_double_jacobian+0x134>)
   188e6:	9a01      	ldr	r2, [sp, #4]
   188e8:	f7ff fd03 	bl	182f2 <vli_modSub>
    vli_modMult_fast(X1, X1, t5); /* t1 = B * (A - x3) */
   188ec:	ab05      	add	r3, sp, #20
   188ee:	461a      	mov	r2, r3
   188f0:	9903      	ldr	r1, [sp, #12]
   188f2:	9803      	ldr	r0, [sp, #12]
   188f4:	f7ff fe52 	bl	1859c <vli_modMult_fast>
    vli_modSub_fast(t4, X1, t4);  /* t4 = B * (A - x3) - y1^4 = y3 */
   188f8:	aa0d      	add	r2, sp, #52	; 0x34
   188fa:	a80d      	add	r0, sp, #52	; 0x34
   188fc:	4b0a      	ldr	r3, [pc, #40]	; (18928 <EccPoint_double_jacobian+0x134>)
   188fe:	9903      	ldr	r1, [sp, #12]
   18900:	f7ff fcf7 	bl	182f2 <vli_modSub>

    vli_set(X1, Z1);
   18904:	9901      	ldr	r1, [sp, #4]
   18906:	9803      	ldr	r0, [sp, #12]
   18908:	f7ff fc6d 	bl	181e6 <vli_set>
    vli_set(Z1, Y1);
   1890c:	9902      	ldr	r1, [sp, #8]
   1890e:	9801      	ldr	r0, [sp, #4]
   18910:	f7ff fc69 	bl	181e6 <vli_set>
    vli_set(Y1, t4);
   18914:	ab0d      	add	r3, sp, #52	; 0x34
   18916:	4619      	mov	r1, r3
   18918:	9802      	ldr	r0, [sp, #8]
   1891a:	f7ff fc64 	bl	181e6 <vli_set>
   1891e:	e000      	b.n	18922 <EccPoint_double_jacobian+0x12e>
        return;
   18920:	bf00      	nop
}
   18922:	b017      	add	sp, #92	; 0x5c
   18924:	f85d fb04 	ldr.w	pc, [sp], #4
   18928:	0002c4b0 	.word	0x0002c4b0

0001892c <apply_z>:
#endif

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * RESTRICT X1,
                    uECC_word_t * RESTRICT Y1,
                    const uECC_word_t * RESTRICT Z) {
   1892c:	b500      	push	{lr}
   1892e:	b08d      	sub	sp, #52	; 0x34
   18930:	9003      	str	r0, [sp, #12]
   18932:	9102      	str	r1, [sp, #8]
   18934:	9201      	str	r2, [sp, #4]
    uECC_word_t t1[uECC_WORDS];

    vli_modSquare_fast(t1, Z);    /* z^2 */
   18936:	ab04      	add	r3, sp, #16
   18938:	9901      	ldr	r1, [sp, #4]
   1893a:	4618      	mov	r0, r3
   1893c:	f7ff fe42 	bl	185c4 <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t1); /* x1 * z^2 */
   18940:	ab04      	add	r3, sp, #16
   18942:	461a      	mov	r2, r3
   18944:	9903      	ldr	r1, [sp, #12]
   18946:	9803      	ldr	r0, [sp, #12]
   18948:	f7ff fe28 	bl	1859c <vli_modMult_fast>
    vli_modMult_fast(t1, t1, Z);  /* z^3 */
   1894c:	a904      	add	r1, sp, #16
   1894e:	ab04      	add	r3, sp, #16
   18950:	9a01      	ldr	r2, [sp, #4]
   18952:	4618      	mov	r0, r3
   18954:	f7ff fe22 	bl	1859c <vli_modMult_fast>
    vli_modMult_fast(Y1, Y1, t1); /* y1 * z^3 */
   18958:	ab04      	add	r3, sp, #16
   1895a:	461a      	mov	r2, r3
   1895c:	9902      	ldr	r1, [sp, #8]
   1895e:	9802      	ldr	r0, [sp, #8]
   18960:	f7ff fe1c 	bl	1859c <vli_modMult_fast>
}
   18964:	bf00      	nop
   18966:	b00d      	add	sp, #52	; 0x34
   18968:	f85d fb04 	ldr.w	pc, [sp], #4

0001896c <XYcZ_initial_double>:
/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(uECC_word_t * RESTRICT X1,
                                uECC_word_t * RESTRICT Y1,
                                uECC_word_t * RESTRICT X2,
                                uECC_word_t * RESTRICT Y2,
                                const uECC_word_t * RESTRICT initial_Z) {
   1896c:	b500      	push	{lr}
   1896e:	b08d      	sub	sp, #52	; 0x34
   18970:	9003      	str	r0, [sp, #12]
   18972:	9102      	str	r1, [sp, #8]
   18974:	9201      	str	r2, [sp, #4]
   18976:	9300      	str	r3, [sp, #0]
    uECC_word_t z[uECC_WORDS];
    if (initial_Z) {
   18978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1897a:	2b00      	cmp	r3, #0
   1897c:	d005      	beq.n	1898a <XYcZ_initial_double+0x1e>
        vli_set(z, initial_Z);
   1897e:	ab04      	add	r3, sp, #16
   18980:	990e      	ldr	r1, [sp, #56]	; 0x38
   18982:	4618      	mov	r0, r3
   18984:	f7ff fc2f 	bl	181e6 <vli_set>
   18988:	e005      	b.n	18996 <XYcZ_initial_double+0x2a>
    } else {
        vli_clear(z);
   1898a:	ab04      	add	r3, sp, #16
   1898c:	4618      	mov	r0, r3
   1898e:	f7ff fbea 	bl	18166 <vli_clear>
        z[0] = 1;
   18992:	2301      	movs	r3, #1
   18994:	9304      	str	r3, [sp, #16]
    }

    vli_set(X2, X1);
   18996:	9903      	ldr	r1, [sp, #12]
   18998:	9801      	ldr	r0, [sp, #4]
   1899a:	f7ff fc24 	bl	181e6 <vli_set>
    vli_set(Y2, Y1);
   1899e:	9902      	ldr	r1, [sp, #8]
   189a0:	9800      	ldr	r0, [sp, #0]
   189a2:	f7ff fc20 	bl	181e6 <vli_set>

    apply_z(X1, Y1, z);
   189a6:	ab04      	add	r3, sp, #16
   189a8:	461a      	mov	r2, r3
   189aa:	9902      	ldr	r1, [sp, #8]
   189ac:	9803      	ldr	r0, [sp, #12]
   189ae:	f7ff ffbd 	bl	1892c <apply_z>
    EccPoint_double_jacobian(X1, Y1, z);
   189b2:	ab04      	add	r3, sp, #16
   189b4:	461a      	mov	r2, r3
   189b6:	9902      	ldr	r1, [sp, #8]
   189b8:	9803      	ldr	r0, [sp, #12]
   189ba:	f7ff ff1b 	bl	187f4 <EccPoint_double_jacobian>
    apply_z(X2, Y2, z);
   189be:	ab04      	add	r3, sp, #16
   189c0:	461a      	mov	r2, r3
   189c2:	9900      	ldr	r1, [sp, #0]
   189c4:	9801      	ldr	r0, [sp, #4]
   189c6:	f7ff ffb1 	bl	1892c <apply_z>
}
   189ca:	bf00      	nop
   189cc:	b00d      	add	sp, #52	; 0x34
   189ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000189d4 <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   189d4:	b500      	push	{lr}
   189d6:	b08d      	sub	sp, #52	; 0x34
   189d8:	9003      	str	r0, [sp, #12]
   189da:	9102      	str	r1, [sp, #8]
   189dc:	9201      	str	r2, [sp, #4]
   189de:	9300      	str	r3, [sp, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_WORDS];

    vli_modSub_fast(t5, X2, X1);  /* t5 = x2 - x1 */
   189e0:	a804      	add	r0, sp, #16
   189e2:	4b29      	ldr	r3, [pc, #164]	; (18a88 <XYcZ_add+0xb4>)
   189e4:	9a03      	ldr	r2, [sp, #12]
   189e6:	9901      	ldr	r1, [sp, #4]
   189e8:	f7ff fc83 	bl	182f2 <vli_modSub>
    vli_modSquare_fast(t5, t5);   /* t5 = (x2 - x1)^2 = A */
   189ec:	aa04      	add	r2, sp, #16
   189ee:	ab04      	add	r3, sp, #16
   189f0:	4611      	mov	r1, r2
   189f2:	4618      	mov	r0, r3
   189f4:	f7ff fde6 	bl	185c4 <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t5); /* t1 = x1*A = B */
   189f8:	ab04      	add	r3, sp, #16
   189fa:	461a      	mov	r2, r3
   189fc:	9903      	ldr	r1, [sp, #12]
   189fe:	9803      	ldr	r0, [sp, #12]
   18a00:	f7ff fdcc 	bl	1859c <vli_modMult_fast>
    vli_modMult_fast(X2, X2, t5); /* t3 = x2*A = C */
   18a04:	ab04      	add	r3, sp, #16
   18a06:	461a      	mov	r2, r3
   18a08:	9901      	ldr	r1, [sp, #4]
   18a0a:	9801      	ldr	r0, [sp, #4]
   18a0c:	f7ff fdc6 	bl	1859c <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y2 - y1 */
   18a10:	4b1d      	ldr	r3, [pc, #116]	; (18a88 <XYcZ_add+0xb4>)
   18a12:	9a02      	ldr	r2, [sp, #8]
   18a14:	9900      	ldr	r1, [sp, #0]
   18a16:	9800      	ldr	r0, [sp, #0]
   18a18:	f7ff fc6b 	bl	182f2 <vli_modSub>
    vli_modSquare_fast(t5, Y2);   /* t5 = (y2 - y1)^2 = D */
   18a1c:	ab04      	add	r3, sp, #16
   18a1e:	9900      	ldr	r1, [sp, #0]
   18a20:	4618      	mov	r0, r3
   18a22:	f7ff fdcf 	bl	185c4 <vli_modSquare_fast>

    vli_modSub_fast(t5, t5, X1);  /* t5 = D - B */
   18a26:	a904      	add	r1, sp, #16
   18a28:	a804      	add	r0, sp, #16
   18a2a:	4b17      	ldr	r3, [pc, #92]	; (18a88 <XYcZ_add+0xb4>)
   18a2c:	9a03      	ldr	r2, [sp, #12]
   18a2e:	f7ff fc60 	bl	182f2 <vli_modSub>
    vli_modSub_fast(t5, t5, X2);  /* t5 = D - B - C = x3 */
   18a32:	a904      	add	r1, sp, #16
   18a34:	a804      	add	r0, sp, #16
   18a36:	4b14      	ldr	r3, [pc, #80]	; (18a88 <XYcZ_add+0xb4>)
   18a38:	9a01      	ldr	r2, [sp, #4]
   18a3a:	f7ff fc5a 	bl	182f2 <vli_modSub>
    vli_modSub_fast(X2, X2, X1);  /* t3 = C - B */
   18a3e:	4b12      	ldr	r3, [pc, #72]	; (18a88 <XYcZ_add+0xb4>)
   18a40:	9a03      	ldr	r2, [sp, #12]
   18a42:	9901      	ldr	r1, [sp, #4]
   18a44:	9801      	ldr	r0, [sp, #4]
   18a46:	f7ff fc54 	bl	182f2 <vli_modSub>
    vli_modMult_fast(Y1, Y1, X2); /* t2 = y1*(C - B) */
   18a4a:	9a01      	ldr	r2, [sp, #4]
   18a4c:	9902      	ldr	r1, [sp, #8]
   18a4e:	9802      	ldr	r0, [sp, #8]
   18a50:	f7ff fda4 	bl	1859c <vli_modMult_fast>
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
   18a54:	aa04      	add	r2, sp, #16
   18a56:	4b0c      	ldr	r3, [pc, #48]	; (18a88 <XYcZ_add+0xb4>)
   18a58:	9903      	ldr	r1, [sp, #12]
   18a5a:	9801      	ldr	r0, [sp, #4]
   18a5c:	f7ff fc49 	bl	182f2 <vli_modSub>
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
   18a60:	9a01      	ldr	r2, [sp, #4]
   18a62:	9900      	ldr	r1, [sp, #0]
   18a64:	9800      	ldr	r0, [sp, #0]
   18a66:	f7ff fd99 	bl	1859c <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */
   18a6a:	4b07      	ldr	r3, [pc, #28]	; (18a88 <XYcZ_add+0xb4>)
   18a6c:	9a02      	ldr	r2, [sp, #8]
   18a6e:	9900      	ldr	r1, [sp, #0]
   18a70:	9800      	ldr	r0, [sp, #0]
   18a72:	f7ff fc3e 	bl	182f2 <vli_modSub>

    vli_set(X2, t5);
   18a76:	ab04      	add	r3, sp, #16
   18a78:	4619      	mov	r1, r3
   18a7a:	9801      	ldr	r0, [sp, #4]
   18a7c:	f7ff fbb3 	bl	181e6 <vli_set>
}
   18a80:	bf00      	nop
   18a82:	b00d      	add	sp, #52	; 0x34
   18a84:	f85d fb04 	ldr.w	pc, [sp], #4
   18a88:	0002c4b0 	.word	0x0002c4b0

00018a8c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   18a8c:	b500      	push	{lr}
   18a8e:	b09d      	sub	sp, #116	; 0x74
   18a90:	9003      	str	r0, [sp, #12]
   18a92:	9102      	str	r1, [sp, #8]
   18a94:	9201      	str	r2, [sp, #4]
   18a96:	9300      	str	r3, [sp, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_WORDS];
    uECC_word_t t6[uECC_WORDS];
    uECC_word_t t7[uECC_WORDS];

    vli_modSub_fast(t5, X2, X1);     /* t5 = x2 - x1 */
   18a98:	a814      	add	r0, sp, #80	; 0x50
   18a9a:	4b3c      	ldr	r3, [pc, #240]	; (18b8c <XYcZ_addC+0x100>)
   18a9c:	9a03      	ldr	r2, [sp, #12]
   18a9e:	9901      	ldr	r1, [sp, #4]
   18aa0:	f7ff fc27 	bl	182f2 <vli_modSub>
    vli_modSquare_fast(t5, t5);      /* t5 = (x2 - x1)^2 = A */
   18aa4:	aa14      	add	r2, sp, #80	; 0x50
   18aa6:	ab14      	add	r3, sp, #80	; 0x50
   18aa8:	4611      	mov	r1, r2
   18aaa:	4618      	mov	r0, r3
   18aac:	f7ff fd8a 	bl	185c4 <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t5);    /* t1 = x1*A = B */
   18ab0:	ab14      	add	r3, sp, #80	; 0x50
   18ab2:	461a      	mov	r2, r3
   18ab4:	9903      	ldr	r1, [sp, #12]
   18ab6:	9803      	ldr	r0, [sp, #12]
   18ab8:	f7ff fd70 	bl	1859c <vli_modMult_fast>
    vli_modMult_fast(X2, X2, t5);    /* t3 = x2*A = C */
   18abc:	ab14      	add	r3, sp, #80	; 0x50
   18abe:	461a      	mov	r2, r3
   18ac0:	9901      	ldr	r1, [sp, #4]
   18ac2:	9801      	ldr	r0, [sp, #4]
   18ac4:	f7ff fd6a 	bl	1859c <vli_modMult_fast>
    vli_modAdd(t5, Y2, Y1, curve_p); /* t5 = y2 + y1 */
   18ac8:	a814      	add	r0, sp, #80	; 0x50
   18aca:	4b30      	ldr	r3, [pc, #192]	; (18b8c <XYcZ_addC+0x100>)
   18acc:	9a02      	ldr	r2, [sp, #8]
   18ace:	9900      	ldr	r1, [sp, #0]
   18ad0:	f7ff fbf0 	bl	182b4 <vli_modAdd>
    vli_modSub_fast(Y2, Y2, Y1);     /* t4 = y2 - y1 */
   18ad4:	4b2d      	ldr	r3, [pc, #180]	; (18b8c <XYcZ_addC+0x100>)
   18ad6:	9a02      	ldr	r2, [sp, #8]
   18ad8:	9900      	ldr	r1, [sp, #0]
   18ada:	9800      	ldr	r0, [sp, #0]
   18adc:	f7ff fc09 	bl	182f2 <vli_modSub>

    vli_modSub_fast(t6, X2, X1);     /* t6 = C - B */
   18ae0:	a80c      	add	r0, sp, #48	; 0x30
   18ae2:	4b2a      	ldr	r3, [pc, #168]	; (18b8c <XYcZ_addC+0x100>)
   18ae4:	9a03      	ldr	r2, [sp, #12]
   18ae6:	9901      	ldr	r1, [sp, #4]
   18ae8:	f7ff fc03 	bl	182f2 <vli_modSub>
    vli_modMult_fast(Y1, Y1, t6);    /* t2 = y1 * (C - B) = E */
   18aec:	ab0c      	add	r3, sp, #48	; 0x30
   18aee:	461a      	mov	r2, r3
   18af0:	9902      	ldr	r1, [sp, #8]
   18af2:	9802      	ldr	r0, [sp, #8]
   18af4:	f7ff fd52 	bl	1859c <vli_modMult_fast>
    vli_modAdd(t6, X1, X2, curve_p); /* t6 = B + C */
   18af8:	a80c      	add	r0, sp, #48	; 0x30
   18afa:	4b24      	ldr	r3, [pc, #144]	; (18b8c <XYcZ_addC+0x100>)
   18afc:	9a01      	ldr	r2, [sp, #4]
   18afe:	9903      	ldr	r1, [sp, #12]
   18b00:	f7ff fbd8 	bl	182b4 <vli_modAdd>
    vli_modSquare_fast(X2, Y2);      /* t3 = (y2 - y1)^2 = D */
   18b04:	9900      	ldr	r1, [sp, #0]
   18b06:	9801      	ldr	r0, [sp, #4]
   18b08:	f7ff fd5c 	bl	185c4 <vli_modSquare_fast>
    vli_modSub_fast(X2, X2, t6);     /* t3 = D - (B + C) = x3 */
   18b0c:	aa0c      	add	r2, sp, #48	; 0x30
   18b0e:	4b1f      	ldr	r3, [pc, #124]	; (18b8c <XYcZ_addC+0x100>)
   18b10:	9901      	ldr	r1, [sp, #4]
   18b12:	9801      	ldr	r0, [sp, #4]
   18b14:	f7ff fbed 	bl	182f2 <vli_modSub>

    vli_modSub_fast(t7, X1, X2);  /* t7 = B - x3 */
   18b18:	a804      	add	r0, sp, #16
   18b1a:	4b1c      	ldr	r3, [pc, #112]	; (18b8c <XYcZ_addC+0x100>)
   18b1c:	9a01      	ldr	r2, [sp, #4]
   18b1e:	9903      	ldr	r1, [sp, #12]
   18b20:	f7ff fbe7 	bl	182f2 <vli_modSub>
    vli_modMult_fast(Y2, Y2, t7); /* t4 = (y2 - y1)*(B - x3) */
   18b24:	ab04      	add	r3, sp, #16
   18b26:	461a      	mov	r2, r3
   18b28:	9900      	ldr	r1, [sp, #0]
   18b2a:	9800      	ldr	r0, [sp, #0]
   18b2c:	f7ff fd36 	bl	1859c <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = (y2 - y1)*(B - x3) - E = y3 */
   18b30:	4b16      	ldr	r3, [pc, #88]	; (18b8c <XYcZ_addC+0x100>)
   18b32:	9a02      	ldr	r2, [sp, #8]
   18b34:	9900      	ldr	r1, [sp, #0]
   18b36:	9800      	ldr	r0, [sp, #0]
   18b38:	f7ff fbdb 	bl	182f2 <vli_modSub>

    vli_modSquare_fast(t7, t5);   /* t7 = (y2 + y1)^2 = F */
   18b3c:	aa14      	add	r2, sp, #80	; 0x50
   18b3e:	ab04      	add	r3, sp, #16
   18b40:	4611      	mov	r1, r2
   18b42:	4618      	mov	r0, r3
   18b44:	f7ff fd3e 	bl	185c4 <vli_modSquare_fast>
    vli_modSub_fast(t7, t7, t6);  /* t7 = F - (B + C) = x3' */
   18b48:	aa0c      	add	r2, sp, #48	; 0x30
   18b4a:	a904      	add	r1, sp, #16
   18b4c:	a804      	add	r0, sp, #16
   18b4e:	4b0f      	ldr	r3, [pc, #60]	; (18b8c <XYcZ_addC+0x100>)
   18b50:	f7ff fbcf 	bl	182f2 <vli_modSub>
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
   18b54:	a904      	add	r1, sp, #16
   18b56:	a80c      	add	r0, sp, #48	; 0x30
   18b58:	4b0c      	ldr	r3, [pc, #48]	; (18b8c <XYcZ_addC+0x100>)
   18b5a:	9a03      	ldr	r2, [sp, #12]
   18b5c:	f7ff fbc9 	bl	182f2 <vli_modSub>
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
   18b60:	aa14      	add	r2, sp, #80	; 0x50
   18b62:	a90c      	add	r1, sp, #48	; 0x30
   18b64:	ab0c      	add	r3, sp, #48	; 0x30
   18b66:	4618      	mov	r0, r3
   18b68:	f7ff fd18 	bl	1859c <vli_modMult_fast>
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */
   18b6c:	a90c      	add	r1, sp, #48	; 0x30
   18b6e:	4b07      	ldr	r3, [pc, #28]	; (18b8c <XYcZ_addC+0x100>)
   18b70:	9a02      	ldr	r2, [sp, #8]
   18b72:	9802      	ldr	r0, [sp, #8]
   18b74:	f7ff fbbd 	bl	182f2 <vli_modSub>

    vli_set(X1, t7);
   18b78:	ab04      	add	r3, sp, #16
   18b7a:	4619      	mov	r1, r3
   18b7c:	9803      	ldr	r0, [sp, #12]
   18b7e:	f7ff fb32 	bl	181e6 <vli_set>
}
   18b82:	bf00      	nop
   18b84:	b01d      	add	sp, #116	; 0x74
   18b86:	f85d fb04 	ldr.w	pc, [sp], #4
   18b8a:	bf00      	nop
   18b8c:	0002c4b0 	.word	0x0002c4b0

00018b90 <EccPoint_mult>:

static void EccPoint_mult(EccPoint * RESTRICT result,
                          const EccPoint * RESTRICT point,
                          const uECC_word_t * RESTRICT scalar,
                          const uECC_word_t * RESTRICT initialZ,
                          bitcount_t numBits) {
   18b90:	b510      	push	{r4, lr}
   18b92:	b0b0      	sub	sp, #192	; 0xc0
   18b94:	9005      	str	r0, [sp, #20]
   18b96:	9104      	str	r1, [sp, #16]
   18b98:	9203      	str	r2, [sp, #12]
   18b9a:	9302      	str	r3, [sp, #8]
    uECC_word_t Ry[2][uECC_WORDS];
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
   18b9c:	9a04      	ldr	r2, [sp, #16]
   18b9e:	ab1e      	add	r3, sp, #120	; 0x78
   18ba0:	3320      	adds	r3, #32
   18ba2:	4611      	mov	r1, r2
   18ba4:	4618      	mov	r0, r3
   18ba6:	f7ff fb1e 	bl	181e6 <vli_set>
    vli_set(Ry[1], point->y);
   18baa:	9b04      	ldr	r3, [sp, #16]
   18bac:	f103 0220 	add.w	r2, r3, #32
   18bb0:	ab0e      	add	r3, sp, #56	; 0x38
   18bb2:	3320      	adds	r3, #32
   18bb4:	4611      	mov	r1, r2
   18bb6:	4618      	mov	r0, r3
   18bb8:	f7ff fb15 	bl	181e6 <vli_set>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);
   18bbc:	ac0e      	add	r4, sp, #56	; 0x38
   18bbe:	aa1e      	add	r2, sp, #120	; 0x78
   18bc0:	ab0e      	add	r3, sp, #56	; 0x38
   18bc2:	f103 0120 	add.w	r1, r3, #32
   18bc6:	ab1e      	add	r3, sp, #120	; 0x78
   18bc8:	f103 0020 	add.w	r0, r3, #32
   18bcc:	9b02      	ldr	r3, [sp, #8]
   18bce:	9300      	str	r3, [sp, #0]
   18bd0:	4623      	mov	r3, r4
   18bd2:	f7ff fecb 	bl	1896c <XYcZ_initial_double>

    for (i = numBits - 2; i > 0; --i) {
   18bd6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   18bd8:	3b02      	subs	r3, #2
   18bda:	932f      	str	r3, [sp, #188]	; 0xbc
   18bdc:	e03b      	b.n	18c56 <EccPoint_mult+0xc6>
        nb = !vli_testBit(scalar, i);
   18bde:	992f      	ldr	r1, [sp, #188]	; 0xbc
   18be0:	9803      	ldr	r0, [sp, #12]
   18be2:	f7ff faed 	bl	181c0 <vli_testBit>
   18be6:	4603      	mov	r3, r0
   18be8:	2b00      	cmp	r3, #0
   18bea:	bf0c      	ite	eq
   18bec:	2301      	moveq	r3, #1
   18bee:	2300      	movne	r3, #0
   18bf0:	b2db      	uxtb	r3, r3
   18bf2:	932e      	str	r3, [sp, #184]	; 0xb8
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   18bf4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18bf6:	f1c3 0301 	rsb	r3, r3, #1
   18bfa:	aa1e      	add	r2, sp, #120	; 0x78
   18bfc:	015b      	lsls	r3, r3, #5
   18bfe:	18d0      	adds	r0, r2, r3
   18c00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c02:	f1c3 0301 	rsb	r3, r3, #1
   18c06:	aa0e      	add	r2, sp, #56	; 0x38
   18c08:	015b      	lsls	r3, r3, #5
   18c0a:	18d1      	adds	r1, r2, r3
   18c0c:	aa1e      	add	r2, sp, #120	; 0x78
   18c0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c10:	015b      	lsls	r3, r3, #5
   18c12:	18d4      	adds	r4, r2, r3
   18c14:	aa0e      	add	r2, sp, #56	; 0x38
   18c16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c18:	015b      	lsls	r3, r3, #5
   18c1a:	4413      	add	r3, r2
   18c1c:	4622      	mov	r2, r4
   18c1e:	f7ff ff35 	bl	18a8c <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   18c22:	aa1e      	add	r2, sp, #120	; 0x78
   18c24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c26:	015b      	lsls	r3, r3, #5
   18c28:	18d0      	adds	r0, r2, r3
   18c2a:	aa0e      	add	r2, sp, #56	; 0x38
   18c2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c2e:	015b      	lsls	r3, r3, #5
   18c30:	18d1      	adds	r1, r2, r3
   18c32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c34:	f1c3 0301 	rsb	r3, r3, #1
   18c38:	aa1e      	add	r2, sp, #120	; 0x78
   18c3a:	015b      	lsls	r3, r3, #5
   18c3c:	18d4      	adds	r4, r2, r3
   18c3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c40:	f1c3 0301 	rsb	r3, r3, #1
   18c44:	aa0e      	add	r2, sp, #56	; 0x38
   18c46:	015b      	lsls	r3, r3, #5
   18c48:	4413      	add	r3, r2
   18c4a:	4622      	mov	r2, r4
   18c4c:	f7ff fec2 	bl	189d4 <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   18c50:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18c52:	3b01      	subs	r3, #1
   18c54:	932f      	str	r3, [sp, #188]	; 0xbc
   18c56:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   18c58:	2b00      	cmp	r3, #0
   18c5a:	dcc0      	bgt.n	18bde <EccPoint_mult+0x4e>
    }

    nb = !vli_testBit(scalar, 0);
   18c5c:	2100      	movs	r1, #0
   18c5e:	9803      	ldr	r0, [sp, #12]
   18c60:	f7ff faae 	bl	181c0 <vli_testBit>
   18c64:	4603      	mov	r3, r0
   18c66:	2b00      	cmp	r3, #0
   18c68:	bf0c      	ite	eq
   18c6a:	2301      	moveq	r3, #1
   18c6c:	2300      	movne	r3, #0
   18c6e:	b2db      	uxtb	r3, r3
   18c70:	932e      	str	r3, [sp, #184]	; 0xb8
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   18c72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c74:	f1c3 0301 	rsb	r3, r3, #1
   18c78:	aa1e      	add	r2, sp, #120	; 0x78
   18c7a:	015b      	lsls	r3, r3, #5
   18c7c:	18d0      	adds	r0, r2, r3
   18c7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c80:	f1c3 0301 	rsb	r3, r3, #1
   18c84:	aa0e      	add	r2, sp, #56	; 0x38
   18c86:	015b      	lsls	r3, r3, #5
   18c88:	18d1      	adds	r1, r2, r3
   18c8a:	aa1e      	add	r2, sp, #120	; 0x78
   18c8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c8e:	015b      	lsls	r3, r3, #5
   18c90:	18d4      	adds	r4, r2, r3
   18c92:	aa0e      	add	r2, sp, #56	; 0x38
   18c94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18c96:	015b      	lsls	r3, r3, #5
   18c98:	4413      	add	r3, r2
   18c9a:	4622      	mov	r2, r4
   18c9c:	f7ff fef6 	bl	18a8c <XYcZ_addC>

    /* Find final 1/Z value. */
    vli_modSub_fast(z, Rx[1], Rx[0]);   /* X1 - X0 */
   18ca0:	aa1e      	add	r2, sp, #120	; 0x78
   18ca2:	ab1e      	add	r3, sp, #120	; 0x78
   18ca4:	f103 0120 	add.w	r1, r3, #32
   18ca8:	a806      	add	r0, sp, #24
   18caa:	4b2d      	ldr	r3, [pc, #180]	; (18d60 <EccPoint_mult+0x1d0>)
   18cac:	f7ff fb21 	bl	182f2 <vli_modSub>
    vli_modMult_fast(z, z, Ry[1 - nb]); /* Yb * (X1 - X0) */
   18cb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18cb2:	f1c3 0301 	rsb	r3, r3, #1
   18cb6:	aa0e      	add	r2, sp, #56	; 0x38
   18cb8:	015b      	lsls	r3, r3, #5
   18cba:	441a      	add	r2, r3
   18cbc:	a906      	add	r1, sp, #24
   18cbe:	ab06      	add	r3, sp, #24
   18cc0:	4618      	mov	r0, r3
   18cc2:	f7ff fc6b 	bl	1859c <vli_modMult_fast>
    vli_modMult_fast(z, z, point->x); /* xP * Yb * (X1 - X0) */
   18cc6:	9a04      	ldr	r2, [sp, #16]
   18cc8:	a906      	add	r1, sp, #24
   18cca:	ab06      	add	r3, sp, #24
   18ccc:	4618      	mov	r0, r3
   18cce:	f7ff fc65 	bl	1859c <vli_modMult_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
   18cd2:	a906      	add	r1, sp, #24
   18cd4:	ab06      	add	r3, sp, #24
   18cd6:	4a22      	ldr	r2, [pc, #136]	; (18d60 <EccPoint_mult+0x1d0>)
   18cd8:	4618      	mov	r0, r3
   18cda:	f7ff fc85 	bl	185e8 <vli_modInv>
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
   18cde:	9b04      	ldr	r3, [sp, #16]
   18ce0:	f103 0220 	add.w	r2, r3, #32
   18ce4:	a906      	add	r1, sp, #24
   18ce6:	ab06      	add	r3, sp, #24
   18ce8:	4618      	mov	r0, r3
   18cea:	f7ff fc57 	bl	1859c <vli_modMult_fast>
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
   18cee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18cf0:	f1c3 0301 	rsb	r3, r3, #1
   18cf4:	aa1e      	add	r2, sp, #120	; 0x78
   18cf6:	015b      	lsls	r3, r3, #5
   18cf8:	441a      	add	r2, r3
   18cfa:	a906      	add	r1, sp, #24
   18cfc:	ab06      	add	r3, sp, #24
   18cfe:	4618      	mov	r0, r3
   18d00:	f7ff fc4c 	bl	1859c <vli_modMult_fast>
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   18d04:	aa1e      	add	r2, sp, #120	; 0x78
   18d06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18d08:	015b      	lsls	r3, r3, #5
   18d0a:	18d0      	adds	r0, r2, r3
   18d0c:	aa0e      	add	r2, sp, #56	; 0x38
   18d0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18d10:	015b      	lsls	r3, r3, #5
   18d12:	18d1      	adds	r1, r2, r3
   18d14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18d16:	f1c3 0301 	rsb	r3, r3, #1
   18d1a:	aa1e      	add	r2, sp, #120	; 0x78
   18d1c:	015b      	lsls	r3, r3, #5
   18d1e:	18d4      	adds	r4, r2, r3
   18d20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   18d22:	f1c3 0301 	rsb	r3, r3, #1
   18d26:	aa0e      	add	r2, sp, #56	; 0x38
   18d28:	015b      	lsls	r3, r3, #5
   18d2a:	4413      	add	r3, r2
   18d2c:	4622      	mov	r2, r4
   18d2e:	f7ff fe51 	bl	189d4 <XYcZ_add>
    apply_z(Rx[0], Ry[0], z);
   18d32:	aa06      	add	r2, sp, #24
   18d34:	a90e      	add	r1, sp, #56	; 0x38
   18d36:	ab1e      	add	r3, sp, #120	; 0x78
   18d38:	4618      	mov	r0, r3
   18d3a:	f7ff fdf7 	bl	1892c <apply_z>

    vli_set(result->x, Rx[0]);
   18d3e:	9b05      	ldr	r3, [sp, #20]
   18d40:	aa1e      	add	r2, sp, #120	; 0x78
   18d42:	4611      	mov	r1, r2
   18d44:	4618      	mov	r0, r3
   18d46:	f7ff fa4e 	bl	181e6 <vli_set>
    vli_set(result->y, Ry[0]);
   18d4a:	9b05      	ldr	r3, [sp, #20]
   18d4c:	3320      	adds	r3, #32
   18d4e:	aa0e      	add	r2, sp, #56	; 0x38
   18d50:	4611      	mov	r1, r2
   18d52:	4618      	mov	r0, r3
   18d54:	f7ff fa47 	bl	181e6 <vli_set>
}
   18d58:	bf00      	nop
   18d5a:	b030      	add	sp, #192	; 0xc0
   18d5c:	bd10      	pop	{r4, pc}
   18d5e:	bf00      	nop
   18d60:	0002c4b0 	.word	0x0002c4b0

00018d64 <EccPoint_compute_public_key>:

static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   18d64:	b500      	push	{lr}
   18d66:	b099      	sub	sp, #100	; 0x64
   18d68:	9003      	str	r0, [sp, #12]
   18d6a:	9102      	str	r1, [sp, #8]
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
   18d6c:	ab0f      	add	r3, sp, #60	; 0x3c
   18d6e:	9305      	str	r3, [sp, #20]
   18d70:	ab07      	add	r3, sp, #28
   18d72:	9306      	str	r3, [sp, #24]
    uECC_word_t carry;
#endif

    /* Make sure the private key is in the range [1, n-1]. */
    if (vli_isZero(private)) {
   18d74:	9802      	ldr	r0, [sp, #8]
   18d76:	f7ff fa0b 	bl	18190 <vli_isZero>
   18d7a:	4603      	mov	r3, r0
   18d7c:	2b00      	cmp	r3, #0
   18d7e:	d001      	beq.n	18d84 <EccPoint_compute_public_key+0x20>
        return 0;
   18d80:	2300      	movs	r3, #0
   18d82:	e031      	b.n	18de8 <EccPoint_compute_public_key+0x84>
    // impact (about 2% slower on average) and requires the vli_xxx_n functions, leading to
    // a significant increase in code size.

    EccPoint_mult(result, &curve_G, private, 0, vli_numBits(private, uECC_WORDS));
#else
    if (vli_cmp(curve_n, private) != 1) {
   18d84:	9902      	ldr	r1, [sp, #8]
   18d86:	481a      	ldr	r0, [pc, #104]	; (18df0 <EccPoint_compute_public_key+0x8c>)
   18d88:	f7ff fa47 	bl	1821a <vli_cmp>
   18d8c:	4603      	mov	r3, r0
   18d8e:	2b01      	cmp	r3, #1
   18d90:	d001      	beq.n	18d96 <EccPoint_compute_public_key+0x32>
        return 0;
   18d92:	2300      	movs	r3, #0
   18d94:	e028      	b.n	18de8 <EccPoint_compute_public_key+0x84>
    }

    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(tmp1, private, curve_n);
   18d96:	ab0f      	add	r3, sp, #60	; 0x3c
   18d98:	4a15      	ldr	r2, [pc, #84]	; (18df0 <EccPoint_compute_public_key+0x8c>)
   18d9a:	9902      	ldr	r1, [sp, #8]
   18d9c:	4618      	mov	r0, r3
   18d9e:	f7fe fccb 	bl	17738 <vli_add>
   18da2:	9017      	str	r0, [sp, #92]	; 0x5c
    vli_add(tmp2, tmp1, curve_n);
   18da4:	a90f      	add	r1, sp, #60	; 0x3c
   18da6:	ab07      	add	r3, sp, #28
   18da8:	4a11      	ldr	r2, [pc, #68]	; (18df0 <EccPoint_compute_public_key+0x8c>)
   18daa:	4618      	mov	r0, r3
   18dac:	f7fe fcc4 	bl	17738 <vli_add>
    EccPoint_mult(result, &curve_G, p2[!carry], 0, (uECC_BYTES * 8) + 1);
   18db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   18db2:	2b00      	cmp	r3, #0
   18db4:	bf0c      	ite	eq
   18db6:	2301      	moveq	r3, #1
   18db8:	2300      	movne	r3, #0
   18dba:	b2db      	uxtb	r3, r3
   18dbc:	009b      	lsls	r3, r3, #2
   18dbe:	aa18      	add	r2, sp, #96	; 0x60
   18dc0:	4413      	add	r3, r2
   18dc2:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   18dc6:	f240 1301 	movw	r3, #257	; 0x101
   18dca:	9300      	str	r3, [sp, #0]
   18dcc:	2300      	movs	r3, #0
   18dce:	4909      	ldr	r1, [pc, #36]	; (18df4 <EccPoint_compute_public_key+0x90>)
   18dd0:	9803      	ldr	r0, [sp, #12]
   18dd2:	f7ff fedd 	bl	18b90 <EccPoint_mult>
#endif

    if (EccPoint_isZero(result)) {
   18dd6:	9803      	ldr	r0, [sp, #12]
   18dd8:	f7ff fcf2 	bl	187c0 <EccPoint_isZero>
   18ddc:	4603      	mov	r3, r0
   18dde:	2b00      	cmp	r3, #0
   18de0:	d001      	beq.n	18de6 <EccPoint_compute_public_key+0x82>
        return 0;
   18de2:	2300      	movs	r3, #0
   18de4:	e000      	b.n	18de8 <EccPoint_compute_public_key+0x84>
    }
    return 1;
   18de6:	2301      	movs	r3, #1
}
   18de8:	4618      	mov	r0, r3
   18dea:	b019      	add	sp, #100	; 0x64
   18dec:	f85d fb04 	ldr.w	pc, [sp], #4
   18df0:	0002c530 	.word	0x0002c530
   18df4:	0002c4f0 	.word	0x0002c4f0

00018df8 <vli_nativeToBytes>:

#define vli_bytesToNative(dest, src) vli_nativeToBytes((dest), (src))

#elif uECC_WORD_SIZE == 4

static void vli_nativeToBytes(uint8_t *bytes, const uint32_t *native) {
   18df8:	b084      	sub	sp, #16
   18dfa:	9001      	str	r0, [sp, #4]
   18dfc:	9100      	str	r1, [sp, #0]
    unsigned i;
    for (i = 0; i < uECC_WORDS; ++i) {
   18dfe:	2300      	movs	r3, #0
   18e00:	9303      	str	r3, [sp, #12]
   18e02:	e02f      	b.n	18e64 <vli_nativeToBytes+0x6c>
        uint8_t *digit = bytes + 4 * (uECC_WORDS - 1 - i);
   18e04:	9b03      	ldr	r3, [sp, #12]
   18e06:	f1c3 0307 	rsb	r3, r3, #7
   18e0a:	009b      	lsls	r3, r3, #2
   18e0c:	9a01      	ldr	r2, [sp, #4]
   18e0e:	4413      	add	r3, r2
   18e10:	9302      	str	r3, [sp, #8]
        digit[0] = (uint8_t)(native[i] >> 24);
   18e12:	9b03      	ldr	r3, [sp, #12]
   18e14:	009b      	lsls	r3, r3, #2
   18e16:	9a00      	ldr	r2, [sp, #0]
   18e18:	4413      	add	r3, r2
   18e1a:	681b      	ldr	r3, [r3, #0]
   18e1c:	0e1b      	lsrs	r3, r3, #24
   18e1e:	b2da      	uxtb	r2, r3
   18e20:	9b02      	ldr	r3, [sp, #8]
   18e22:	701a      	strb	r2, [r3, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   18e24:	9b03      	ldr	r3, [sp, #12]
   18e26:	009b      	lsls	r3, r3, #2
   18e28:	9a00      	ldr	r2, [sp, #0]
   18e2a:	4413      	add	r3, r2
   18e2c:	681b      	ldr	r3, [r3, #0]
   18e2e:	0c1a      	lsrs	r2, r3, #16
   18e30:	9b02      	ldr	r3, [sp, #8]
   18e32:	3301      	adds	r3, #1
   18e34:	b2d2      	uxtb	r2, r2
   18e36:	701a      	strb	r2, [r3, #0]
        digit[2] = (uint8_t)(native[i] >> 8);
   18e38:	9b03      	ldr	r3, [sp, #12]
   18e3a:	009b      	lsls	r3, r3, #2
   18e3c:	9a00      	ldr	r2, [sp, #0]
   18e3e:	4413      	add	r3, r2
   18e40:	681b      	ldr	r3, [r3, #0]
   18e42:	0a1a      	lsrs	r2, r3, #8
   18e44:	9b02      	ldr	r3, [sp, #8]
   18e46:	3302      	adds	r3, #2
   18e48:	b2d2      	uxtb	r2, r2
   18e4a:	701a      	strb	r2, [r3, #0]
        digit[3] = (uint8_t)(native[i]);
   18e4c:	9b03      	ldr	r3, [sp, #12]
   18e4e:	009b      	lsls	r3, r3, #2
   18e50:	9a00      	ldr	r2, [sp, #0]
   18e52:	4413      	add	r3, r2
   18e54:	681a      	ldr	r2, [r3, #0]
   18e56:	9b02      	ldr	r3, [sp, #8]
   18e58:	3303      	adds	r3, #3
   18e5a:	b2d2      	uxtb	r2, r2
   18e5c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   18e5e:	9b03      	ldr	r3, [sp, #12]
   18e60:	3301      	adds	r3, #1
   18e62:	9303      	str	r3, [sp, #12]
   18e64:	9b03      	ldr	r3, [sp, #12]
   18e66:	2b07      	cmp	r3, #7
   18e68:	d9cc      	bls.n	18e04 <vli_nativeToBytes+0xc>
    }
}
   18e6a:	bf00      	nop
   18e6c:	bf00      	nop
   18e6e:	b004      	add	sp, #16
   18e70:	4770      	bx	lr

00018e72 <vli_bytesToNative>:

static void vli_bytesToNative(uint32_t *native, const uint8_t *bytes) {
   18e72:	b084      	sub	sp, #16
   18e74:	9001      	str	r0, [sp, #4]
   18e76:	9100      	str	r1, [sp, #0]
    unsigned i;
    for (i = 0; i < uECC_WORDS; ++i) {
   18e78:	2300      	movs	r3, #0
   18e7a:	9303      	str	r3, [sp, #12]
   18e7c:	e020      	b.n	18ec0 <vli_bytesToNative+0x4e>
        const uint8_t *digit = bytes + 4 * (uECC_WORDS - 1 - i);
   18e7e:	9b03      	ldr	r3, [sp, #12]
   18e80:	f1c3 0307 	rsb	r3, r3, #7
   18e84:	009b      	lsls	r3, r3, #2
   18e86:	9a00      	ldr	r2, [sp, #0]
   18e88:	4413      	add	r3, r2
   18e8a:	9302      	str	r3, [sp, #8]
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   18e8c:	9b02      	ldr	r3, [sp, #8]
   18e8e:	781b      	ldrb	r3, [r3, #0]
   18e90:	061a      	lsls	r2, r3, #24
   18e92:	9b02      	ldr	r3, [sp, #8]
   18e94:	3301      	adds	r3, #1
   18e96:	781b      	ldrb	r3, [r3, #0]
   18e98:	041b      	lsls	r3, r3, #16
   18e9a:	431a      	orrs	r2, r3
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   18e9c:	9b02      	ldr	r3, [sp, #8]
   18e9e:	3302      	adds	r3, #2
   18ea0:	781b      	ldrb	r3, [r3, #0]
   18ea2:	021b      	lsls	r3, r3, #8
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   18ea4:	431a      	orrs	r2, r3
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   18ea6:	9b02      	ldr	r3, [sp, #8]
   18ea8:	3303      	adds	r3, #3
   18eaa:	781b      	ldrb	r3, [r3, #0]
   18eac:	4618      	mov	r0, r3
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   18eae:	9b03      	ldr	r3, [sp, #12]
   18eb0:	009b      	lsls	r3, r3, #2
   18eb2:	9901      	ldr	r1, [sp, #4]
   18eb4:	440b      	add	r3, r1
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   18eb6:	4302      	orrs	r2, r0
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   18eb8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   18eba:	9b03      	ldr	r3, [sp, #12]
   18ebc:	3301      	adds	r3, #1
   18ebe:	9303      	str	r3, [sp, #12]
   18ec0:	9b03      	ldr	r3, [sp, #12]
   18ec2:	2b07      	cmp	r3, #7
   18ec4:	d9db      	bls.n	18e7e <vli_bytesToNative+0xc>
    }
}
   18ec6:	bf00      	nop
   18ec8:	bf00      	nop
   18eca:	b004      	add	sp, #16
   18ecc:	4770      	bx	lr
	...

00018ed0 <uECC_make_key>:
    }
}

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t public_key[uECC_BYTES*2], uint8_t private_key[uECC_BYTES]) {
   18ed0:	b500      	push	{lr}
   18ed2:	b09d      	sub	sp, #116	; 0x74
   18ed4:	9001      	str	r0, [sp, #4]
   18ed6:	9100      	str	r1, [sp, #0]
    uECC_word_t private[uECC_WORDS];
    EccPoint public;
    uECC_word_t tries;
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   18ed8:	2300      	movs	r3, #0
   18eda:	931b      	str	r3, [sp, #108]	; 0x6c
   18edc:	e029      	b.n	18f32 <uECC_make_key+0x62>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   18ede:	4b19      	ldr	r3, [pc, #100]	; (18f44 <uECC_make_key+0x74>)
   18ee0:	681b      	ldr	r3, [r3, #0]
   18ee2:	aa13      	add	r2, sp, #76	; 0x4c
   18ee4:	2120      	movs	r1, #32
   18ee6:	4610      	mov	r0, r2
   18ee8:	4798      	blx	r3
   18eea:	4603      	mov	r3, r0
   18eec:	2b00      	cmp	r3, #0
   18eee:	d01d      	beq.n	18f2c <uECC_make_key+0x5c>
                EccPoint_compute_public_key(&public, private)) {
   18ef0:	aa13      	add	r2, sp, #76	; 0x4c
   18ef2:	ab03      	add	r3, sp, #12
   18ef4:	4611      	mov	r1, r2
   18ef6:	4618      	mov	r0, r3
   18ef8:	f7ff ff34 	bl	18d64 <EccPoint_compute_public_key>
   18efc:	4603      	mov	r3, r0
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   18efe:	2b00      	cmp	r3, #0
   18f00:	d014      	beq.n	18f2c <uECC_make_key+0x5c>
            vli_nativeToBytes(private_key, private);
   18f02:	ab13      	add	r3, sp, #76	; 0x4c
   18f04:	4619      	mov	r1, r3
   18f06:	9800      	ldr	r0, [sp, #0]
   18f08:	f7ff ff76 	bl	18df8 <vli_nativeToBytes>
            vli_nativeToBytes(public_key, public.x);
   18f0c:	ab03      	add	r3, sp, #12
   18f0e:	4619      	mov	r1, r3
   18f10:	9801      	ldr	r0, [sp, #4]
   18f12:	f7ff ff71 	bl	18df8 <vli_nativeToBytes>
            vli_nativeToBytes(public_key + uECC_BYTES, public.y);
   18f16:	9b01      	ldr	r3, [sp, #4]
   18f18:	f103 0220 	add.w	r2, r3, #32
   18f1c:	ab03      	add	r3, sp, #12
   18f1e:	3320      	adds	r3, #32
   18f20:	4619      	mov	r1, r3
   18f22:	4610      	mov	r0, r2
   18f24:	f7ff ff68 	bl	18df8 <vli_nativeToBytes>
            return 1;
   18f28:	2301      	movs	r3, #1
   18f2a:	e006      	b.n	18f3a <uECC_make_key+0x6a>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   18f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18f2e:	3301      	adds	r3, #1
   18f30:	931b      	str	r3, [sp, #108]	; 0x6c
   18f32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18f34:	2b3f      	cmp	r3, #63	; 0x3f
   18f36:	d9d2      	bls.n	18ede <uECC_make_key+0xe>
        }
    }
    return 0;
   18f38:	2300      	movs	r3, #0
}
   18f3a:	4618      	mov	r0, r3
   18f3c:	b01d      	add	sp, #116	; 0x74
   18f3e:	f85d fb04 	ldr.w	pc, [sp], #4
   18f42:	bf00      	nop
   18f44:	10002bc4 	.word	0x10002bc4

00018f48 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   18f48:	b500      	push	{lr}
   18f4a:	b0c5      	sub	sp, #276	; 0x114
   18f4c:	9005      	str	r0, [sp, #20]
   18f4e:	ab04      	add	r3, sp, #16
   18f50:	6019      	str	r1, [r3, #0]
   18f52:	ab03      	add	r3, sp, #12
   18f54:	601a      	str	r2, [r3, #0]
    EccPoint public;
    EccPoint product;
    uECC_word_t private[uECC_WORDS];
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
   18f56:	2300      	movs	r3, #0
   18f58:	9343      	str	r3, [sp, #268]	; 0x10c
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   18f5a:	ab19      	add	r3, sp, #100	; 0x64
   18f5c:	9307      	str	r3, [sp, #28]
   18f5e:	ab09      	add	r3, sp, #36	; 0x24
   18f60:	9308      	str	r3, [sp, #32]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   18f62:	2300      	movs	r3, #0
   18f64:	9342      	str	r3, [sp, #264]	; 0x108
   18f66:	e015      	b.n	18f94 <uECC_shared_secret+0x4c>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   18f68:	4b30      	ldr	r3, [pc, #192]	; (1902c <uECC_shared_secret+0xe4>)
   18f6a:	681b      	ldr	r3, [r3, #0]
   18f6c:	aa11      	add	r2, sp, #68	; 0x44
   18f6e:	2120      	movs	r1, #32
   18f70:	4610      	mov	r0, r2
   18f72:	4798      	blx	r3
   18f74:	4603      	mov	r3, r0
   18f76:	2b00      	cmp	r3, #0
   18f78:	d009      	beq.n	18f8e <uECC_shared_secret+0x46>
   18f7a:	ab11      	add	r3, sp, #68	; 0x44
   18f7c:	4618      	mov	r0, r3
   18f7e:	f7ff f907 	bl	18190 <vli_isZero>
   18f82:	4603      	mov	r3, r0
   18f84:	2b00      	cmp	r3, #0
   18f86:	d102      	bne.n	18f8e <uECC_shared_secret+0x46>
            initial_Z = random;
   18f88:	ab11      	add	r3, sp, #68	; 0x44
   18f8a:	9343      	str	r3, [sp, #268]	; 0x10c
            break;
   18f8c:	e005      	b.n	18f9a <uECC_shared_secret+0x52>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   18f8e:	9b42      	ldr	r3, [sp, #264]	; 0x108
   18f90:	3301      	adds	r3, #1
   18f92:	9342      	str	r3, [sp, #264]	; 0x108
   18f94:	9b42      	ldr	r3, [sp, #264]	; 0x108
   18f96:	2b3f      	cmp	r3, #63	; 0x3f
   18f98:	d9e6      	bls.n	18f68 <uECC_shared_secret+0x20>
        }
    }

    vli_bytesToNative(private, private_key);
   18f9a:	ab04      	add	r3, sp, #16
   18f9c:	aa19      	add	r2, sp, #100	; 0x64
   18f9e:	6819      	ldr	r1, [r3, #0]
   18fa0:	4610      	mov	r0, r2
   18fa2:	f7ff ff66 	bl	18e72 <vli_bytesToNative>
    vli_bytesToNative(public.x, public_key);
   18fa6:	ab31      	add	r3, sp, #196	; 0xc4
   18fa8:	9905      	ldr	r1, [sp, #20]
   18faa:	4618      	mov	r0, r3
   18fac:	f7ff ff61 	bl	18e72 <vli_bytesToNative>
    vli_bytesToNative(public.y, public_key + uECC_BYTES);
   18fb0:	9b05      	ldr	r3, [sp, #20]
   18fb2:	f103 0220 	add.w	r2, r3, #32
   18fb6:	ab31      	add	r3, sp, #196	; 0xc4
   18fb8:	3320      	adds	r3, #32
   18fba:	4611      	mov	r1, r2
   18fbc:	4618      	mov	r0, r3
   18fbe:	f7ff ff58 	bl	18e72 <vli_bytesToNative>
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   18fc2:	a919      	add	r1, sp, #100	; 0x64
   18fc4:	ab19      	add	r3, sp, #100	; 0x64
   18fc6:	4a1a      	ldr	r2, [pc, #104]	; (19030 <uECC_shared_secret+0xe8>)
   18fc8:	4618      	mov	r0, r3
   18fca:	f7fe fbb5 	bl	17738 <vli_add>
   18fce:	9041      	str	r0, [sp, #260]	; 0x104
    vli_add(tmp, private, curve_n);
   18fd0:	a919      	add	r1, sp, #100	; 0x64
   18fd2:	ab09      	add	r3, sp, #36	; 0x24
   18fd4:	4a16      	ldr	r2, [pc, #88]	; (19030 <uECC_shared_secret+0xe8>)
   18fd6:	4618      	mov	r0, r3
   18fd8:	f7fe fbae 	bl	17738 <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   18fdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
   18fde:	2b00      	cmp	r3, #0
   18fe0:	bf0c      	ite	eq
   18fe2:	2301      	moveq	r3, #1
   18fe4:	2300      	movne	r3, #0
   18fe6:	b2db      	uxtb	r3, r3
   18fe8:	009b      	lsls	r3, r3, #2
   18fea:	aa44      	add	r2, sp, #272	; 0x110
   18fec:	4413      	add	r3, r2
   18fee:	f853 2cf4 	ldr.w	r2, [r3, #-244]
   18ff2:	a931      	add	r1, sp, #196	; 0xc4
   18ff4:	a821      	add	r0, sp, #132	; 0x84
   18ff6:	f240 1301 	movw	r3, #257	; 0x101
   18ffa:	9300      	str	r3, [sp, #0]
   18ffc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   18ffe:	f7ff fdc7 	bl	18b90 <EccPoint_mult>
#endif

    vli_nativeToBytes(secret, product.x);
   19002:	aa21      	add	r2, sp, #132	; 0x84
   19004:	ab03      	add	r3, sp, #12
   19006:	4611      	mov	r1, r2
   19008:	6818      	ldr	r0, [r3, #0]
   1900a:	f7ff fef5 	bl	18df8 <vli_nativeToBytes>
    return !EccPoint_isZero(&product);
   1900e:	ab21      	add	r3, sp, #132	; 0x84
   19010:	4618      	mov	r0, r3
   19012:	f7ff fbd5 	bl	187c0 <EccPoint_isZero>
   19016:	4603      	mov	r3, r0
   19018:	2b00      	cmp	r3, #0
   1901a:	bf0c      	ite	eq
   1901c:	2301      	moveq	r3, #1
   1901e:	2300      	movne	r3, #0
   19020:	b2db      	uxtb	r3, r3
}
   19022:	4618      	mov	r0, r3
   19024:	b045      	add	sp, #276	; 0x114
   19026:	f85d fb04 	ldr.w	pc, [sp], #4
   1902a:	bf00      	nop
   1902c:	10002bc4 	.word	0x10002bc4
   19030:	0002c530 	.word	0x0002c530

00019034 <curve_x_side>:
    }
    compressed[0] = 2 + (public_key[uECC_BYTES * 2 - 1] & 0x01);
}

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void curve_x_side(uECC_word_t * RESTRICT result, const uECC_word_t * RESTRICT x) {
   19034:	b500      	push	{lr}
   19036:	b08b      	sub	sp, #44	; 0x2c
   19038:	9001      	str	r0, [sp, #4]
   1903a:	9100      	str	r1, [sp, #0]
#if (uECC_CURVE == uECC_secp256k1)
    vli_modSquare_fast(result, x); /* r = x^2 */
    vli_modMult_fast(result, result, x); /* r = x^3 */
    vli_modAdd(result, result, curve_b, curve_p); /* r = x^3 + b */
#else
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   1903c:	ab02      	add	r3, sp, #8
   1903e:	2220      	movs	r2, #32
   19040:	2100      	movs	r1, #0
   19042:	4618      	mov	r0, r3
   19044:	f00f f9fa 	bl	2843c <memset>
   19048:	2303      	movs	r3, #3
   1904a:	9302      	str	r3, [sp, #8]

    vli_modSquare_fast(result, x); /* r = x^2 */
   1904c:	9900      	ldr	r1, [sp, #0]
   1904e:	9801      	ldr	r0, [sp, #4]
   19050:	f7ff fab8 	bl	185c4 <vli_modSquare_fast>
    vli_modSub_fast(result, result, _3); /* r = x^2 - 3 */
   19054:	aa02      	add	r2, sp, #8
   19056:	4b0a      	ldr	r3, [pc, #40]	; (19080 <curve_x_side+0x4c>)
   19058:	9901      	ldr	r1, [sp, #4]
   1905a:	9801      	ldr	r0, [sp, #4]
   1905c:	f7ff f949 	bl	182f2 <vli_modSub>
    vli_modMult_fast(result, result, x); /* r = x^3 - 3x */
   19060:	9a00      	ldr	r2, [sp, #0]
   19062:	9901      	ldr	r1, [sp, #4]
   19064:	9801      	ldr	r0, [sp, #4]
   19066:	f7ff fa99 	bl	1859c <vli_modMult_fast>
    vli_modAdd(result, result, curve_b, curve_p); /* r = x^3 - 3x + b */
   1906a:	4b05      	ldr	r3, [pc, #20]	; (19080 <curve_x_side+0x4c>)
   1906c:	4a05      	ldr	r2, [pc, #20]	; (19084 <curve_x_side+0x50>)
   1906e:	9901      	ldr	r1, [sp, #4]
   19070:	9801      	ldr	r0, [sp, #4]
   19072:	f7ff f91f 	bl	182b4 <vli_modAdd>
#endif
}
   19076:	bf00      	nop
   19078:	b00b      	add	sp, #44	; 0x2c
   1907a:	f85d fb04 	ldr.w	pc, [sp], #4
   1907e:	bf00      	nop
   19080:	0002c4b0 	.word	0x0002c4b0
   19084:	0002c4d0 	.word	0x0002c4d0

00019088 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   19088:	b500      	push	{lr}
   1908a:	b0a3      	sub	sp, #140	; 0x8c
   1908c:	9001      	str	r0, [sp, #4]
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    EccPoint public;

    vli_bytesToNative(public.x, public_key);
   1908e:	ab02      	add	r3, sp, #8
   19090:	9901      	ldr	r1, [sp, #4]
   19092:	4618      	mov	r0, r3
   19094:	f7ff feed 	bl	18e72 <vli_bytesToNative>
    vli_bytesToNative(public.y, public_key + uECC_BYTES);
   19098:	9b01      	ldr	r3, [sp, #4]
   1909a:	f103 0220 	add.w	r2, r3, #32
   1909e:	ab02      	add	r3, sp, #8
   190a0:	3320      	adds	r3, #32
   190a2:	4611      	mov	r1, r2
   190a4:	4618      	mov	r0, r3
   190a6:	f7ff fee4 	bl	18e72 <vli_bytesToNative>

    // The point at infinity is invalid.
    if (EccPoint_isZero(&public)) {
   190aa:	ab02      	add	r3, sp, #8
   190ac:	4618      	mov	r0, r3
   190ae:	f7ff fb87 	bl	187c0 <EccPoint_isZero>
   190b2:	4603      	mov	r3, r0
   190b4:	2b00      	cmp	r3, #0
   190b6:	d001      	beq.n	190bc <uECC_valid_public_key+0x34>
        return 0;
   190b8:	2300      	movs	r3, #0
   190ba:	e02c      	b.n	19116 <uECC_valid_public_key+0x8e>
    }

    // x and y must be smaller than p.
    if (vli_cmp(curve_p, public.x) != 1 || vli_cmp(curve_p, public.y) != 1) {
   190bc:	ab02      	add	r3, sp, #8
   190be:	4619      	mov	r1, r3
   190c0:	4817      	ldr	r0, [pc, #92]	; (19120 <uECC_valid_public_key+0x98>)
   190c2:	f7ff f8aa 	bl	1821a <vli_cmp>
   190c6:	4603      	mov	r3, r0
   190c8:	2b01      	cmp	r3, #1
   190ca:	d108      	bne.n	190de <uECC_valid_public_key+0x56>
   190cc:	ab02      	add	r3, sp, #8
   190ce:	3320      	adds	r3, #32
   190d0:	4619      	mov	r1, r3
   190d2:	4813      	ldr	r0, [pc, #76]	; (19120 <uECC_valid_public_key+0x98>)
   190d4:	f7ff f8a1 	bl	1821a <vli_cmp>
   190d8:	4603      	mov	r3, r0
   190da:	2b01      	cmp	r3, #1
   190dc:	d001      	beq.n	190e2 <uECC_valid_public_key+0x5a>
        return 0;
   190de:	2300      	movs	r3, #0
   190e0:	e019      	b.n	19116 <uECC_valid_public_key+0x8e>
    }

    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
   190e2:	ab02      	add	r3, sp, #8
   190e4:	f103 0220 	add.w	r2, r3, #32
   190e8:	ab1a      	add	r3, sp, #104	; 0x68
   190ea:	4611      	mov	r1, r2
   190ec:	4618      	mov	r0, r3
   190ee:	f7ff fa69 	bl	185c4 <vli_modSquare_fast>
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */
   190f2:	aa02      	add	r2, sp, #8
   190f4:	ab12      	add	r3, sp, #72	; 0x48
   190f6:	4611      	mov	r1, r2
   190f8:	4618      	mov	r0, r3
   190fa:	f7ff ff9b 	bl	19034 <curve_x_side>

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
   190fe:	aa12      	add	r2, sp, #72	; 0x48
   19100:	ab1a      	add	r3, sp, #104	; 0x68
   19102:	4611      	mov	r1, r2
   19104:	4618      	mov	r0, r3
   19106:	f7ff f888 	bl	1821a <vli_cmp>
   1910a:	4603      	mov	r3, r0
   1910c:	2b00      	cmp	r3, #0
   1910e:	bf0c      	ite	eq
   19110:	2301      	moveq	r3, #1
   19112:	2300      	movne	r3, #0
   19114:	b2db      	uxtb	r3, r3
}
   19116:	4618      	mov	r0, r3
   19118:	b023      	add	sp, #140	; 0x8c
   1911a:	f85d fb04 	ldr.w	pc, [sp], #4
   1911e:	bf00      	nop
   19120:	0002c4b0 	.word	0x0002c4b0

00019124 <__NVIC_EnableIRQ>:
{
   19124:	b082      	sub	sp, #8
   19126:	4603      	mov	r3, r0
   19128:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   1912c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   19130:	2b00      	cmp	r3, #0
   19132:	db0c      	blt.n	1914e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19134:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19138:	f003 021f 	and.w	r2, r3, #31
   1913c:	4905      	ldr	r1, [pc, #20]	; (19154 <__NVIC_EnableIRQ+0x30>)
   1913e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   19142:	095b      	lsrs	r3, r3, #5
   19144:	2001      	movs	r0, #1
   19146:	fa00 f202 	lsl.w	r2, r0, r2
   1914a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1914e:	bf00      	nop
   19150:	b002      	add	sp, #8
   19152:	4770      	bx	lr
   19154:	e000e100 	.word	0xe000e100

00019158 <__NVIC_SetPriority>:
{
   19158:	b082      	sub	sp, #8
   1915a:	4603      	mov	r3, r0
   1915c:	9100      	str	r1, [sp, #0]
   1915e:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   19162:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   19166:	2b00      	cmp	r3, #0
   19168:	db0a      	blt.n	19180 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1916a:	9b00      	ldr	r3, [sp, #0]
   1916c:	b2da      	uxtb	r2, r3
   1916e:	490c      	ldr	r1, [pc, #48]	; (191a0 <__NVIC_SetPriority+0x48>)
   19170:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   19174:	0152      	lsls	r2, r2, #5
   19176:	b2d2      	uxtb	r2, r2
   19178:	440b      	add	r3, r1
   1917a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1917e:	e00b      	b.n	19198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19180:	9b00      	ldr	r3, [sp, #0]
   19182:	b2da      	uxtb	r2, r3
   19184:	4907      	ldr	r1, [pc, #28]	; (191a4 <__NVIC_SetPriority+0x4c>)
   19186:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1918a:	f003 030f 	and.w	r3, r3, #15
   1918e:	3b04      	subs	r3, #4
   19190:	0152      	lsls	r2, r2, #5
   19192:	b2d2      	uxtb	r2, r2
   19194:	440b      	add	r3, r1
   19196:	761a      	strb	r2, [r3, #24]
}
   19198:	bf00      	nop
   1919a:	b002      	add	sp, #8
   1919c:	4770      	bx	lr
   1919e:	bf00      	nop
   191a0:	e000e100 	.word	0xe000e100
   191a4:	e000ed00 	.word	0xe000ed00

000191a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   191a8:	b084      	sub	sp, #16
   191aa:	9003      	str	r0, [sp, #12]
   191ac:	9102      	str	r1, [sp, #8]
   191ae:	9201      	str	r2, [sp, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   191b0:	9b03      	ldr	r3, [sp, #12]
   191b2:	3b04      	subs	r3, #4
   191b4:	9303      	str	r3, [sp, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   191b6:	9b03      	ldr	r3, [sp, #12]
   191b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   191bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   191be:	9b03      	ldr	r3, [sp, #12]
   191c0:	3b04      	subs	r3, #4
   191c2:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   191c4:	9b02      	ldr	r3, [sp, #8]
   191c6:	f023 0201 	bic.w	r2, r3, #1
   191ca:	9b03      	ldr	r3, [sp, #12]
   191cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   191ce:	9b03      	ldr	r3, [sp, #12]
   191d0:	3b04      	subs	r3, #4
   191d2:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   191d4:	4a0b      	ldr	r2, [pc, #44]	; (19204 <pxPortInitialiseStack+0x5c>)
   191d6:	9b03      	ldr	r3, [sp, #12]
   191d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   191da:	9b03      	ldr	r3, [sp, #12]
   191dc:	3b14      	subs	r3, #20
   191de:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   191e0:	9a01      	ldr	r2, [sp, #4]
   191e2:	9b03      	ldr	r3, [sp, #12]
   191e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   191e6:	9b03      	ldr	r3, [sp, #12]
   191e8:	3b04      	subs	r3, #4
   191ea:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   191ec:	9b03      	ldr	r3, [sp, #12]
   191ee:	f06f 0202 	mvn.w	r2, #2
   191f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   191f4:	9b03      	ldr	r3, [sp, #12]
   191f6:	3b20      	subs	r3, #32
   191f8:	9303      	str	r3, [sp, #12]

	return pxTopOfStack;
   191fa:	9b03      	ldr	r3, [sp, #12]
}
   191fc:	4618      	mov	r0, r3
   191fe:	b004      	add	sp, #16
   19200:	4770      	bx	lr
   19202:	bf00      	nop
   19204:	00019209 	.word	0x00019209

00019208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19208:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   1920a:	2300      	movs	r3, #0
   1920c:	9300      	str	r3, [sp, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1920e:	4b0c      	ldr	r3, [pc, #48]	; (19240 <prvTaskExitError+0x38>)
   19210:	681b      	ldr	r3, [r3, #0]
   19212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19216:	d000      	beq.n	1921a <prvTaskExitError+0x12>
   19218:	e7fe      	b.n	19218 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1921a:	f04f 0380 	mov.w	r3, #128	; 0x80
   1921e:	f383 8811 	msr	BASEPRI, r3
   19222:	f3bf 8f6f 	isb	sy
   19226:	f3bf 8f4f 	dsb	sy
   1922a:	9301      	str	r3, [sp, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
   1922c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   1922e:	bf00      	nop
   19230:	9b00      	ldr	r3, [sp, #0]
   19232:	2b00      	cmp	r3, #0
   19234:	d0fc      	beq.n	19230 <prvTaskExitError+0x28>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19236:	bf00      	nop
   19238:	bf00      	nop
   1923a:	b002      	add	sp, #8
   1923c:	4770      	bx	lr
   1923e:	bf00      	nop
   19240:	10002bc8 	.word	0x10002bc8
	...

00019250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   19250:	4b07      	ldr	r3, [pc, #28]	; (19270 <pxCurrentTCBConst2>)
   19252:	6819      	ldr	r1, [r3, #0]
   19254:	6808      	ldr	r0, [r1, #0]
   19256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1925a:	f380 8809 	msr	PSP, r0
   1925e:	f3bf 8f6f 	isb	sy
   19262:	f04f 0000 	mov.w	r0, #0
   19266:	f380 8811 	msr	BASEPRI, r0
   1926a:	4770      	bx	lr
   1926c:	f3af 8000 	nop.w

00019270 <pxCurrentTCBConst2>:
   19270:	1000467c 	.word	0x1000467c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   19274:	bf00      	nop
   19276:	bf00      	nop

00019278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   19278:	4808      	ldr	r0, [pc, #32]	; (1929c <prvPortStartFirstTask+0x24>)
   1927a:	6800      	ldr	r0, [r0, #0]
   1927c:	6800      	ldr	r0, [r0, #0]
   1927e:	f380 8808 	msr	MSP, r0
   19282:	f04f 0000 	mov.w	r0, #0
   19286:	f380 8814 	msr	CONTROL, r0
   1928a:	b662      	cpsie	i
   1928c:	b661      	cpsie	f
   1928e:	f3bf 8f4f 	dsb	sy
   19292:	f3bf 8f6f 	isb	sy
   19296:	df00      	svc	0
   19298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1929a:	bf00      	nop
   1929c:	e000ed08 	.word	0xe000ed08

000192a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   192a0:	b500      	push	{lr}
   192a2:	b085      	sub	sp, #20
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   192a4:	4b39      	ldr	r3, [pc, #228]	; (1938c <xPortStartScheduler+0xec>)
   192a6:	681b      	ldr	r3, [r3, #0]
   192a8:	4a39      	ldr	r2, [pc, #228]	; (19390 <xPortStartScheduler+0xf0>)
   192aa:	4293      	cmp	r3, r2
   192ac:	d100      	bne.n	192b0 <xPortStartScheduler+0x10>
   192ae:	e7fe      	b.n	192ae <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   192b0:	4b36      	ldr	r3, [pc, #216]	; (1938c <xPortStartScheduler+0xec>)
   192b2:	681b      	ldr	r3, [r3, #0]
   192b4:	4a37      	ldr	r2, [pc, #220]	; (19394 <xPortStartScheduler+0xf4>)
   192b6:	4293      	cmp	r3, r2
   192b8:	d100      	bne.n	192bc <xPortStartScheduler+0x1c>
   192ba:	e7fe      	b.n	192ba <xPortStartScheduler+0x1a>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   192bc:	4b36      	ldr	r3, [pc, #216]	; (19398 <xPortStartScheduler+0xf8>)
   192be:	9303      	str	r3, [sp, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   192c0:	9b03      	ldr	r3, [sp, #12]
   192c2:	781b      	ldrb	r3, [r3, #0]
   192c4:	b2db      	uxtb	r3, r3
   192c6:	9302      	str	r3, [sp, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   192c8:	9b03      	ldr	r3, [sp, #12]
   192ca:	22ff      	movs	r2, #255	; 0xff
   192cc:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   192ce:	9b03      	ldr	r3, [sp, #12]
   192d0:	781b      	ldrb	r3, [r3, #0]
   192d2:	b2db      	uxtb	r3, r3
   192d4:	f88d 3007 	strb.w	r3, [sp, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   192d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   192dc:	b2db      	uxtb	r3, r3
   192de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   192e2:	b2da      	uxtb	r2, r3
   192e4:	4b2d      	ldr	r3, [pc, #180]	; (1939c <xPortStartScheduler+0xfc>)
   192e6:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   192e8:	4b2d      	ldr	r3, [pc, #180]	; (193a0 <xPortStartScheduler+0x100>)
   192ea:	2207      	movs	r2, #7
   192ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   192ee:	e00b      	b.n	19308 <xPortStartScheduler+0x68>
		{
			ulMaxPRIGROUPValue--;
   192f0:	4b2b      	ldr	r3, [pc, #172]	; (193a0 <xPortStartScheduler+0x100>)
   192f2:	681b      	ldr	r3, [r3, #0]
   192f4:	3b01      	subs	r3, #1
   192f6:	4a2a      	ldr	r2, [pc, #168]	; (193a0 <xPortStartScheduler+0x100>)
   192f8:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   192fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   192fe:	b2db      	uxtb	r3, r3
   19300:	005b      	lsls	r3, r3, #1
   19302:	b2db      	uxtb	r3, r3
   19304:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   19308:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1930c:	b2db      	uxtb	r3, r3
   1930e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   19312:	2b80      	cmp	r3, #128	; 0x80
   19314:	d0ec      	beq.n	192f0 <xPortStartScheduler+0x50>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   19316:	4b22      	ldr	r3, [pc, #136]	; (193a0 <xPortStartScheduler+0x100>)
   19318:	681b      	ldr	r3, [r3, #0]
   1931a:	f1c3 0307 	rsb	r3, r3, #7
   1931e:	2b03      	cmp	r3, #3
   19320:	d000      	beq.n	19324 <xPortStartScheduler+0x84>
   19322:	e7fe      	b.n	19322 <xPortStartScheduler+0x82>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   19324:	4b1e      	ldr	r3, [pc, #120]	; (193a0 <xPortStartScheduler+0x100>)
   19326:	681b      	ldr	r3, [r3, #0]
   19328:	021b      	lsls	r3, r3, #8
   1932a:	4a1d      	ldr	r2, [pc, #116]	; (193a0 <xPortStartScheduler+0x100>)
   1932c:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1932e:	4b1c      	ldr	r3, [pc, #112]	; (193a0 <xPortStartScheduler+0x100>)
   19330:	681b      	ldr	r3, [r3, #0]
   19332:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   19336:	4a1a      	ldr	r2, [pc, #104]	; (193a0 <xPortStartScheduler+0x100>)
   19338:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1933a:	9b02      	ldr	r3, [sp, #8]
   1933c:	b2da      	uxtb	r2, r3
   1933e:	9b03      	ldr	r3, [sp, #12]
   19340:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   19342:	4b18      	ldr	r3, [pc, #96]	; (193a4 <xPortStartScheduler+0x104>)
   19344:	681b      	ldr	r3, [r3, #0]
   19346:	4a17      	ldr	r2, [pc, #92]	; (193a4 <xPortStartScheduler+0x104>)
   19348:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   1934c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   1934e:	4b15      	ldr	r3, [pc, #84]	; (193a4 <xPortStartScheduler+0x104>)
   19350:	681b      	ldr	r3, [r3, #0]
   19352:	4a14      	ldr	r2, [pc, #80]	; (193a4 <xPortStartScheduler+0x104>)
   19354:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   19358:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   1935a:	f000 fa0f 	bl	1977c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1935e:	4b12      	ldr	r3, [pc, #72]	; (193a8 <xPortStartScheduler+0x108>)
   19360:	2200      	movs	r2, #0
   19362:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   19364:	f000 f8ba 	bl	194dc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   19368:	4b10      	ldr	r3, [pc, #64]	; (193ac <xPortStartScheduler+0x10c>)
   1936a:	681b      	ldr	r3, [r3, #0]
   1936c:	4a0f      	ldr	r2, [pc, #60]	; (193ac <xPortStartScheduler+0x10c>)
   1936e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   19372:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   19374:	f7ff ff80 	bl	19278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19378:	f00a fbfe 	bl	23b78 <vTaskSwitchContext>
	prvTaskExitError();
   1937c:	f7ff ff44 	bl	19208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   19380:	2300      	movs	r3, #0
}
   19382:	4618      	mov	r0, r3
   19384:	b005      	add	sp, #20
   19386:	f85d fb04 	ldr.w	pc, [sp], #4
   1938a:	bf00      	nop
   1938c:	e000ed00 	.word	0xe000ed00
   19390:	410fc271 	.word	0x410fc271
   19394:	410fc270 	.word	0x410fc270
   19398:	e000e400 	.word	0xe000e400
   1939c:	100044dc 	.word	0x100044dc
   193a0:	100044e0 	.word	0x100044e0
   193a4:	e000ed20 	.word	0xe000ed20
   193a8:	10002bc8 	.word	0x10002bc8
   193ac:	e000ef34 	.word	0xe000ef34

000193b0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   193b0:	b082      	sub	sp, #8
	__asm volatile
   193b2:	f04f 0380 	mov.w	r3, #128	; 0x80
   193b6:	f383 8811 	msr	BASEPRI, r3
   193ba:	f3bf 8f6f 	isb	sy
   193be:	f3bf 8f4f 	dsb	sy
   193c2:	9301      	str	r3, [sp, #4]
}
   193c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   193c6:	4b09      	ldr	r3, [pc, #36]	; (193ec <vPortEnterCritical+0x3c>)
   193c8:	681b      	ldr	r3, [r3, #0]
   193ca:	3301      	adds	r3, #1
   193cc:	4a07      	ldr	r2, [pc, #28]	; (193ec <vPortEnterCritical+0x3c>)
   193ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   193d0:	4b06      	ldr	r3, [pc, #24]	; (193ec <vPortEnterCritical+0x3c>)
   193d2:	681b      	ldr	r3, [r3, #0]
   193d4:	2b01      	cmp	r3, #1
   193d6:	d105      	bne.n	193e4 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   193d8:	4b05      	ldr	r3, [pc, #20]	; (193f0 <vPortEnterCritical+0x40>)
   193da:	681b      	ldr	r3, [r3, #0]
   193dc:	b2db      	uxtb	r3, r3
   193de:	2b00      	cmp	r3, #0
   193e0:	d000      	beq.n	193e4 <vPortEnterCritical+0x34>
   193e2:	e7fe      	b.n	193e2 <vPortEnterCritical+0x32>
	}
}
   193e4:	bf00      	nop
   193e6:	b002      	add	sp, #8
   193e8:	4770      	bx	lr
   193ea:	bf00      	nop
   193ec:	10002bc8 	.word	0x10002bc8
   193f0:	e000ed04 	.word	0xe000ed04

000193f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   193f4:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting );
   193f6:	4b0b      	ldr	r3, [pc, #44]	; (19424 <vPortExitCritical+0x30>)
   193f8:	681b      	ldr	r3, [r3, #0]
   193fa:	2b00      	cmp	r3, #0
   193fc:	d100      	bne.n	19400 <vPortExitCritical+0xc>
   193fe:	e7fe      	b.n	193fe <vPortExitCritical+0xa>
	uxCriticalNesting--;
   19400:	4b08      	ldr	r3, [pc, #32]	; (19424 <vPortExitCritical+0x30>)
   19402:	681b      	ldr	r3, [r3, #0]
   19404:	3b01      	subs	r3, #1
   19406:	4a07      	ldr	r2, [pc, #28]	; (19424 <vPortExitCritical+0x30>)
   19408:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   1940a:	4b06      	ldr	r3, [pc, #24]	; (19424 <vPortExitCritical+0x30>)
   1940c:	681b      	ldr	r3, [r3, #0]
   1940e:	2b00      	cmp	r3, #0
   19410:	d105      	bne.n	1941e <vPortExitCritical+0x2a>
   19412:	2300      	movs	r3, #0
   19414:	9301      	str	r3, [sp, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   19416:	9b01      	ldr	r3, [sp, #4]
   19418:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
   1941c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
   1941e:	bf00      	nop
   19420:	b002      	add	sp, #8
   19422:	4770      	bx	lr
   19424:	10002bc8 	.word	0x10002bc8
	...

00019430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19430:	f3ef 8009 	mrs	r0, PSP
   19434:	f3bf 8f6f 	isb	sy
   19438:	4b15      	ldr	r3, [pc, #84]	; (19490 <pxCurrentTCBConst>)
   1943a:	681a      	ldr	r2, [r3, #0]
   1943c:	f01e 0f10 	tst.w	lr, #16
   19440:	bf08      	it	eq
   19442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   19446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1944a:	6010      	str	r0, [r2, #0]
   1944c:	e92d 0009 	stmdb	sp!, {r0, r3}
   19450:	f04f 0080 	mov.w	r0, #128	; 0x80
   19454:	f380 8811 	msr	BASEPRI, r0
   19458:	f3bf 8f4f 	dsb	sy
   1945c:	f3bf 8f6f 	isb	sy
   19460:	f00a fb8a 	bl	23b78 <vTaskSwitchContext>
   19464:	f04f 0000 	mov.w	r0, #0
   19468:	f380 8811 	msr	BASEPRI, r0
   1946c:	bc09      	pop	{r0, r3}
   1946e:	6819      	ldr	r1, [r3, #0]
   19470:	6808      	ldr	r0, [r1, #0]
   19472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19476:	f01e 0f10 	tst.w	lr, #16
   1947a:	bf08      	it	eq
   1947c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   19480:	f380 8809 	msr	PSP, r0
   19484:	f3bf 8f6f 	isb	sy
   19488:	4770      	bx	lr
   1948a:	bf00      	nop
   1948c:	f3af 8000 	nop.w

00019490 <pxCurrentTCBConst>:
   19490:	1000467c 	.word	0x1000467c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   19494:	bf00      	nop
   19496:	bf00      	nop

00019498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19498:	b500      	push	{lr}
   1949a:	b083      	sub	sp, #12
	__asm volatile
   1949c:	f04f 0380 	mov.w	r3, #128	; 0x80
   194a0:	f383 8811 	msr	BASEPRI, r3
   194a4:	f3bf 8f6f 	isb	sy
   194a8:	f3bf 8f4f 	dsb	sy
   194ac:	9301      	str	r3, [sp, #4]
}
   194ae:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   194b0:	f00a fac4 	bl	23a3c <xTaskIncrementTick>
   194b4:	4603      	mov	r3, r0
   194b6:	2b00      	cmp	r3, #0
   194b8:	d003      	beq.n	194c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   194ba:	4b07      	ldr	r3, [pc, #28]	; (194d8 <SysTick_Handler+0x40>)
   194bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   194c0:	601a      	str	r2, [r3, #0]
   194c2:	2300      	movs	r3, #0
   194c4:	9300      	str	r3, [sp, #0]
	__asm volatile
   194c6:	9b00      	ldr	r3, [sp, #0]
   194c8:	f383 8811 	msr	BASEPRI, r3
}
   194cc:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
   194ce:	bf00      	nop
   194d0:	b003      	add	sp, #12
   194d2:	f85d fb04 	ldr.w	pc, [sp], #4
   194d6:	bf00      	nop
   194d8:	e000ed04 	.word	0xe000ed04

000194dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   194dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 194ec <vPortEnableVFP+0x10>
   194e0:	6801      	ldr	r1, [r0, #0]
   194e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   194e6:	6001      	str	r1, [r0, #0]
   194e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   194ea:	bf00      	nop
   194ec:	e000ed88 	.word	0xe000ed88

000194f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   194f0:	b082      	sub	sp, #8
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   194f2:	f3ef 8305 	mrs	r3, IPSR
   194f6:	9301      	str	r3, [sp, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   194f8:	9b01      	ldr	r3, [sp, #4]
   194fa:	2b0f      	cmp	r3, #15
   194fc:	d90c      	bls.n	19518 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   194fe:	4a0c      	ldr	r2, [pc, #48]	; (19530 <vPortValidateInterruptPriority+0x40>)
   19500:	9b01      	ldr	r3, [sp, #4]
   19502:	4413      	add	r3, r2
   19504:	781b      	ldrb	r3, [r3, #0]
   19506:	f88d 3003 	strb.w	r3, [sp, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1950a:	4b0a      	ldr	r3, [pc, #40]	; (19534 <vPortValidateInterruptPriority+0x44>)
   1950c:	781b      	ldrb	r3, [r3, #0]
   1950e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   19512:	429a      	cmp	r2, r3
   19514:	d200      	bcs.n	19518 <vPortValidateInterruptPriority+0x28>
   19516:	e7fe      	b.n	19516 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   19518:	4b07      	ldr	r3, [pc, #28]	; (19538 <vPortValidateInterruptPriority+0x48>)
   1951a:	681b      	ldr	r3, [r3, #0]
   1951c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   19520:	4b06      	ldr	r3, [pc, #24]	; (1953c <vPortValidateInterruptPriority+0x4c>)
   19522:	681b      	ldr	r3, [r3, #0]
   19524:	429a      	cmp	r2, r3
   19526:	d900      	bls.n	1952a <vPortValidateInterruptPriority+0x3a>
   19528:	e7fe      	b.n	19528 <vPortValidateInterruptPriority+0x38>
	}
   1952a:	bf00      	nop
   1952c:	b002      	add	sp, #8
   1952e:	4770      	bx	lr
   19530:	e000e3f0 	.word	0xe000e3f0
   19534:	100044dc 	.word	0x100044dc
   19538:	e000ed0c 	.word	0xe000ed0c
   1953c:	100044e0 	.word	0x100044e0

00019540 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   19540:	b500      	push	{lr}
   19542:	b089      	sub	sp, #36	; 0x24
   19544:	9001      	str	r0, [sp, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   19546:	4b3e      	ldr	r3, [pc, #248]	; (19640 <vPortSuppressTicksAndSleep+0x100>)
   19548:	681b      	ldr	r3, [r3, #0]
   1954a:	9a01      	ldr	r2, [sp, #4]
   1954c:	429a      	cmp	r2, r3
   1954e:	d902      	bls.n	19556 <vPortSuppressTicksAndSleep+0x16>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   19550:	4b3b      	ldr	r3, [pc, #236]	; (19640 <vPortSuppressTicksAndSleep+0x100>)
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	9301      	str	r3, [sp, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   19556:	9b01      	ldr	r3, [sp, #4]
   19558:	3b01      	subs	r3, #1
   1955a:	4a3a      	ldr	r2, [pc, #232]	; (19644 <vPortSuppressTicksAndSleep+0x104>)
   1955c:	6812      	ldr	r2, [r2, #0]
   1955e:	fb02 f303 	mul.w	r3, r2, r3
   19562:	9307      	str	r3, [sp, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   19564:	b672      	cpsid	i
	__asm volatile( "dsb" );
   19566:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1956a:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   1956e:	f011 fa5b 	bl	2aa28 <am_hal_stimer_counter_get>
   19572:	9006      	str	r0, [sp, #24]
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   19574:	4b34      	ldr	r3, [pc, #208]	; (19648 <vPortSuppressTicksAndSleep+0x108>)
   19576:	681b      	ldr	r3, [r3, #0]
   19578:	9a06      	ldr	r2, [sp, #24]
   1957a:	1ad3      	subs	r3, r2, r3
   1957c:	9305      	str	r3, [sp, #20]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1957e:	f00a fd19 	bl	23fb4 <eTaskConfirmSleepModeStatus>
   19582:	4603      	mov	r3, r0
   19584:	2b00      	cmp	r3, #0
   19586:	d006      	beq.n	19596 <vPortSuppressTicksAndSleep+0x56>
   19588:	4b2e      	ldr	r3, [pc, #184]	; (19644 <vPortSuppressTicksAndSleep+0x104>)
   1958a:	681a      	ldr	r2, [r3, #0]
   1958c:	9b05      	ldr	r3, [sp, #20]
   1958e:	4413      	add	r3, r2
   19590:	9a07      	ldr	r2, [sp, #28]
   19592:	429a      	cmp	r2, r3
   19594:	d201      	bcs.n	1959a <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   19596:	b662      	cpsie	i
   19598:	e04d      	b.n	19636 <vPortSuppressTicksAndSleep+0xf6>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   1959a:	9a07      	ldr	r2, [sp, #28]
   1959c:	9b05      	ldr	r3, [sp, #20]
   1959e:	1ad3      	subs	r3, r2, r3
   195a0:	9307      	str	r3, [sp, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   195a2:	9907      	ldr	r1, [sp, #28]
   195a4:	2000      	movs	r0, #0
   195a6:	f011 fa45 	bl	2aa34 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   195aa:	9b07      	ldr	r3, [sp, #28]
   195ac:	3301      	adds	r3, #1
   195ae:	4619      	mov	r1, r3
   195b0:	2001      	movs	r0, #1
   195b2:	f011 fa3f 	bl	2aa34 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   195b6:	9b01      	ldr	r3, [sp, #4]
   195b8:	9304      	str	r3, [sp, #16]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   195ba:	9804      	ldr	r0, [sp, #16]
   195bc:	f7f3 fc2c 	bl	ce18 <am_freertos_sleep>
   195c0:	9004      	str	r0, [sp, #16]

		if( xModifiableIdleTime > 0 )
   195c2:	9b04      	ldr	r3, [sp, #16]
   195c4:	2b00      	cmp	r3, #0
   195c6:	d004      	beq.n	195d2 <vPortSuppressTicksAndSleep+0x92>
		{
			__asm volatile( "dsb" );
   195c8:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   195cc:	bf30      	wfi
			__asm volatile( "isb" );
   195ce:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   195d2:	9801      	ldr	r0, [sp, #4]
   195d4:	f7f3 fc2b 	bl	ce2e <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   195d8:	f011 fa26 	bl	2aa28 <am_hal_stimer_counter_get>
   195dc:	9003      	str	r0, [sp, #12]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   195de:	9b03      	ldr	r3, [sp, #12]
   195e0:	4a19      	ldr	r2, [pc, #100]	; (19648 <vPortSuppressTicksAndSleep+0x108>)
   195e2:	6812      	ldr	r2, [r2, #0]
   195e4:	1a9b      	subs	r3, r3, r2
   195e6:	9302      	str	r3, [sp, #8]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   195e8:	4b16      	ldr	r3, [pc, #88]	; (19644 <vPortSuppressTicksAndSleep+0x104>)
   195ea:	681a      	ldr	r2, [r3, #0]
   195ec:	9b02      	ldr	r3, [sp, #8]
   195ee:	fbb3 f1f2 	udiv	r1, r3, r2
   195f2:	fb02 f201 	mul.w	r2, r2, r1
   195f6:	1a9b      	subs	r3, r3, r2
   195f8:	9a03      	ldr	r2, [sp, #12]
   195fa:	1ad3      	subs	r3, r2, r3
   195fc:	4a12      	ldr	r2, [pc, #72]	; (19648 <vPortSuppressTicksAndSleep+0x108>)
   195fe:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   19600:	4b10      	ldr	r3, [pc, #64]	; (19644 <vPortSuppressTicksAndSleep+0x104>)
   19602:	681b      	ldr	r3, [r3, #0]
   19604:	9a02      	ldr	r2, [sp, #8]
   19606:	fbb2 f3f3 	udiv	r3, r2, r3
   1960a:	9302      	str	r3, [sp, #8]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   1960c:	9802      	ldr	r0, [sp, #8]
   1960e:	f00a f9fd 	bl	23a0c <vTaskStepTick>
		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   19612:	2003      	movs	r0, #3
   19614:	f011 fa6c 	bl	2aaf0 <am_hal_stimer_int_clear>
#else
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
#endif
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   19618:	4b0a      	ldr	r3, [pc, #40]	; (19644 <vPortSuppressTicksAndSleep+0x104>)
   1961a:	681b      	ldr	r3, [r3, #0]
   1961c:	4619      	mov	r1, r3
   1961e:	2000      	movs	r0, #0
   19620:	f011 fa08 	bl	2aa34 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   19624:	4b07      	ldr	r3, [pc, #28]	; (19644 <vPortSuppressTicksAndSleep+0x104>)
   19626:	681b      	ldr	r3, [r3, #0]
   19628:	3301      	adds	r3, #1
   1962a:	4619      	mov	r1, r3
   1962c:	2001      	movs	r0, #1
   1962e:	f011 fa01 	bl	2aa34 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   19632:	b662      	cpsie	i

	}
}
   19634:	bf00      	nop
   19636:	bf00      	nop
   19638:	b009      	add	sp, #36	; 0x24
   1963a:	f85d fb04 	ldr.w	pc, [sp], #4
   1963e:	bf00      	nop
   19640:	100044e8 	.word	0x100044e8
   19644:	100044e4 	.word	0x100044e4
   19648:	100044d8 	.word	0x100044d8

0001964c <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   1964c:	b500      	push	{lr}
   1964e:	b08b      	sub	sp, #44	; 0x2c
   19650:	9001      	str	r0, [sp, #4]
    uint32_t remainder = 0;
   19652:	2300      	movs	r3, #0
   19654:	9307      	str	r3, [sp, #28]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   19656:	2300      	movs	r3, #0
   19658:	9308      	str	r3, [sp, #32]

    curSTimer = am_hal_stimer_counter_get();
   1965a:	f011 f9e5 	bl	2aa28 <am_hal_stimer_counter_get>
   1965e:	9006      	str	r0, [sp, #24]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   19660:	4b2a      	ldr	r3, [pc, #168]	; (1970c <xPortStimerTickHandler+0xc0>)
   19662:	681a      	ldr	r2, [r3, #0]
   19664:	9b01      	ldr	r3, [sp, #4]
   19666:	1ad3      	subs	r3, r2, r3
   19668:	4619      	mov	r1, r3
   1966a:	2000      	movs	r0, #0
   1966c:	f011 f9e2 	bl	2aa34 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   19670:	4b26      	ldr	r3, [pc, #152]	; (1970c <xPortStimerTickHandler+0xc0>)
   19672:	681a      	ldr	r2, [r3, #0]
   19674:	9b01      	ldr	r3, [sp, #4]
   19676:	1ad3      	subs	r3, r2, r3
   19678:	3301      	adds	r3, #1
   1967a:	4619      	mov	r1, r3
   1967c:	2001      	movs	r0, #1
   1967e:	f011 f9d9 	bl	2aa34 <am_hal_stimer_compare_delta_set>
#endif
    
    timerCounts = curSTimer - g_lastSTimerVal;
   19682:	4b23      	ldr	r3, [pc, #140]	; (19710 <xPortStimerTickHandler+0xc4>)
   19684:	681b      	ldr	r3, [r3, #0]
   19686:	9a06      	ldr	r2, [sp, #24]
   19688:	1ad3      	subs	r3, r2, r3
   1968a:	9305      	str	r3, [sp, #20]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1968c:	4b1f      	ldr	r3, [pc, #124]	; (1970c <xPortStimerTickHandler+0xc0>)
   1968e:	681b      	ldr	r3, [r3, #0]
   19690:	9a05      	ldr	r2, [sp, #20]
   19692:	fbb2 f3f3 	udiv	r3, r2, r3
   19696:	9309      	str	r3, [sp, #36]	; 0x24
    remainder = timerCounts % ulTimerCountsForOneTick;
   19698:	4b1c      	ldr	r3, [pc, #112]	; (1970c <xPortStimerTickHandler+0xc0>)
   1969a:	681a      	ldr	r2, [r3, #0]
   1969c:	9b05      	ldr	r3, [sp, #20]
   1969e:	fbb3 f1f2 	udiv	r1, r3, r2
   196a2:	fb02 f201 	mul.w	r2, r2, r1
   196a6:	1a9b      	subs	r3, r3, r2
   196a8:	9307      	str	r3, [sp, #28]
    g_lastSTimerVal = curSTimer - remainder;
   196aa:	9a06      	ldr	r2, [sp, #24]
   196ac:	9b07      	ldr	r3, [sp, #28]
   196ae:	1ad3      	subs	r3, r2, r3
   196b0:	4a17      	ldr	r2, [pc, #92]	; (19710 <xPortStimerTickHandler+0xc4>)
   196b2:	6013      	str	r3, [r2, #0]
	__asm volatile
   196b4:	f3ef 8211 	mrs	r2, BASEPRI
   196b8:	f04f 0380 	mov.w	r3, #128	; 0x80
   196bc:	f383 8811 	msr	BASEPRI, r3
   196c0:	f3bf 8f6f 	isb	sy
   196c4:	f3bf 8f4f 	dsb	sy
   196c8:	9204      	str	r2, [sp, #16]
   196ca:	9303      	str	r3, [sp, #12]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   196cc:	e008      	b.n	196e0 <xPortStimerTickHandler+0x94>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   196ce:	f00a f9b5 	bl	23a3c <xTaskIncrementTick>
   196d2:	4603      	mov	r3, r0
   196d4:	2b00      	cmp	r3, #0
   196d6:	d101      	bne.n	196dc <xPortStimerTickHandler+0x90>
   196d8:	9b08      	ldr	r3, [sp, #32]
   196da:	e000      	b.n	196de <xPortStimerTickHandler+0x92>
   196dc:	2301      	movs	r3, #1
   196de:	9308      	str	r3, [sp, #32]
        while (numTicksElapsed--)
   196e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   196e2:	1e5a      	subs	r2, r3, #1
   196e4:	9209      	str	r2, [sp, #36]	; 0x24
   196e6:	2b00      	cmp	r3, #0
   196e8:	d1f1      	bne.n	196ce <xPortStimerTickHandler+0x82>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   196ea:	9b08      	ldr	r3, [sp, #32]
   196ec:	2b00      	cmp	r3, #0
   196ee:	d003      	beq.n	196f8 <xPortStimerTickHandler+0xac>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   196f0:	4b08      	ldr	r3, [pc, #32]	; (19714 <xPortStimerTickHandler+0xc8>)
   196f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   196f6:	601a      	str	r2, [r3, #0]
   196f8:	2300      	movs	r3, #0
   196fa:	9302      	str	r3, [sp, #8]
	__asm volatile
   196fc:	9b02      	ldr	r3, [sp, #8]
   196fe:	f383 8811 	msr	BASEPRI, r3
}
   19702:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   19704:	bf00      	nop
   19706:	b00b      	add	sp, #44	; 0x2c
   19708:	f85d fb04 	ldr.w	pc, [sp], #4
   1970c:	100044e4 	.word	0x100044e4
   19710:	100044d8 	.word	0x100044d8
   19714:	e000ed04 	.word	0xe000ed04

00019718 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   19718:	b500      	push	{lr}
   1971a:	b083      	sub	sp, #12

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1971c:	2000      	movs	r0, #0
   1971e:	f011 f9ed 	bl	2aafc <am_hal_stimer_int_status_get>
   19722:	9001      	str	r0, [sp, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   19724:	9b01      	ldr	r3, [sp, #4]
   19726:	f003 0301 	and.w	r3, r3, #1
   1972a:	2b00      	cmp	r3, #0
   1972c:	d005      	beq.n	1973a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1972e:	2001      	movs	r0, #1
   19730:	f011 f9de 	bl	2aaf0 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
   19734:	2000      	movs	r0, #0
   19736:	f7ff ff89 	bl	1964c <xPortStimerTickHandler>
    }
}
   1973a:	bf00      	nop
   1973c:	b003      	add	sp, #12
   1973e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00019744 <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   19744:	b500      	push	{lr}
   19746:	b083      	sub	sp, #12

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   19748:	2000      	movs	r0, #0
   1974a:	f011 f9d7 	bl	2aafc <am_hal_stimer_int_status_get>
   1974e:	9001      	str	r0, [sp, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   19750:	9b01      	ldr	r3, [sp, #4]
   19752:	f003 0302 	and.w	r3, r3, #2
   19756:	2b00      	cmp	r3, #0
   19758:	d00a      	beq.n	19770 <am_stimer_cmpr1_isr+0x2c>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   1975a:	2002      	movs	r0, #2
   1975c:	f011 f9c8 	bl	2aaf0 <am_hal_stimer_int_clear>
        gNumCmpB++;
   19760:	4b05      	ldr	r3, [pc, #20]	; (19778 <am_stimer_cmpr1_isr+0x34>)
   19762:	681b      	ldr	r3, [r3, #0]
   19764:	3301      	adds	r3, #1
   19766:	4a04      	ldr	r2, [pc, #16]	; (19778 <am_stimer_cmpr1_isr+0x34>)
   19768:	6013      	str	r3, [r2, #0]
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
   1976a:	2001      	movs	r0, #1
   1976c:	f7ff ff6e 	bl	1964c <xPortStimerTickHandler>
    }
}
   19770:	bf00      	nop
   19772:	b003      	add	sp, #12
   19774:	f85d fb04 	ldr.w	pc, [sp], #4
   19778:	100044ec 	.word	0x100044ec

0001977c <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   1977c:	b500      	push	{lr}
   1977e:	b083      	sub	sp, #12
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   19780:	4b20      	ldr	r3, [pc, #128]	; (19804 <vPortSetupTimerInterrupt+0x88>)
   19782:	2220      	movs	r2, #32
   19784:	601a      	str	r2, [r3, #0]
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   19786:	4b1f      	ldr	r3, [pc, #124]	; (19804 <vPortSetupTimerInterrupt+0x88>)
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1978e:	fbb2 f3f3 	udiv	r3, r2, r3
   19792:	3b01      	subs	r3, #1
   19794:	4a1c      	ldr	r2, [pc, #112]	; (19808 <vPortSetupTimerInterrupt+0x8c>)
   19796:	6013      	str	r3, [r2, #0]
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   19798:	2003      	movs	r0, #3
   1979a:	f011 f99f 	bl	2aadc <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   1979e:	2107      	movs	r1, #7
   197a0:	2017      	movs	r0, #23
   197a2:	f7ff fcd9 	bl	19158 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   197a6:	2017      	movs	r0, #23
   197a8:	f7ff fcbc 	bl	19124 <__NVIC_EnableIRQ>
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_STIMER_CMPR0, configKERNEL_INTERRUPT_PRIORITY);
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_STIMER_CMPR0);
#endif // AM_CMSIS_REGS
#ifdef AM_FREERTOS_STIMER_BACKUP
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR1_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   197ac:	2107      	movs	r1, #7
   197ae:	2018      	movs	r0, #24
   197b0:	f7ff fcd2 	bl	19158 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR1_IRQn);
   197b4:	2018      	movs	r0, #24
   197b6:	f7ff fcb5 	bl	19124 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   197ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   197be:	f011 f929 	bl	2aa14 <am_hal_stimer_config>
   197c2:	9001      	str	r0, [sp, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   197c4:	f011 f930 	bl	2aa28 <am_hal_stimer_counter_get>
   197c8:	4603      	mov	r3, r0
   197ca:	4a10      	ldr	r2, [pc, #64]	; (1980c <vPortSetupTimerInterrupt+0x90>)
   197cc:	6013      	str	r3, [r2, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   197ce:	4b0d      	ldr	r3, [pc, #52]	; (19804 <vPortSetupTimerInterrupt+0x88>)
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	4619      	mov	r1, r3
   197d4:	2000      	movs	r0, #0
   197d6:	f011 f92d 	bl	2aa34 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   197da:	4b0a      	ldr	r3, [pc, #40]	; (19804 <vPortSetupTimerInterrupt+0x88>)
   197dc:	681b      	ldr	r3, [r3, #0]
   197de:	3301      	adds	r3, #1
   197e0:	4619      	mov	r1, r3
   197e2:	2001      	movs	r0, #1
   197e4:	f011 f926 	bl	2aa34 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   197e8:	9a01      	ldr	r2, [sp, #4]
   197ea:	4b09      	ldr	r3, [pc, #36]	; (19810 <vPortSetupTimerInterrupt+0x94>)
   197ec:	4013      	ands	r3, r2
   197ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   197f2:	f043 0303 	orr.w	r3, r3, #3
   197f6:	4618      	mov	r0, r3
   197f8:	f011 f90c 	bl	2aa14 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   197fc:	bf00      	nop
   197fe:	b003      	add	sp, #12
   19800:	f85d fb04 	ldr.w	pc, [sp], #4
   19804:	100044e4 	.word	0x100044e4
   19808:	100044e8 	.word	0x100044e8
   1980c:	100044d8 	.word	0x100044d8
   19810:	7ffffcf0 	.word	0x7ffffcf0

00019814 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   19814:	b082      	sub	sp, #8
  uint8_t token = secCb.token++;
   19816:	4b0e      	ldr	r3, [pc, #56]	; (19850 <getNextToken+0x3c>)
   19818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1981c:	1c5a      	adds	r2, r3, #1
   1981e:	b2d1      	uxtb	r1, r2
   19820:	4a0b      	ldr	r2, [pc, #44]	; (19850 <getNextToken+0x3c>)
   19822:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   19826:	f88d 3007 	strb.w	r3, [sp, #7]

  if (token == SEC_TOKEN_INVALID)
   1982a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1982e:	2bff      	cmp	r3, #255	; 0xff
   19830:	d109      	bne.n	19846 <getNextToken+0x32>
  {
    token = secCb.token++;
   19832:	4b07      	ldr	r3, [pc, #28]	; (19850 <getNextToken+0x3c>)
   19834:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   19838:	1c5a      	adds	r2, r3, #1
   1983a:	b2d1      	uxtb	r1, r2
   1983c:	4a04      	ldr	r2, [pc, #16]	; (19850 <getNextToken+0x3c>)
   1983e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   19842:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return token;
   19846:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
   1984a:	4618      	mov	r0, r3
   1984c:	b002      	add	sp, #8
   1984e:	4770      	bx	lr
   19850:	100095a8 	.word	0x100095a8

00019854 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   19854:	b500      	push	{lr}
   19856:	b087      	sub	sp, #28
   19858:	9003      	str	r0, [sp, #12]
   1985a:	9102      	str	r1, [sp, #8]
   1985c:	4611      	mov	r1, r2
   1985e:	461a      	mov	r2, r3
   19860:	460b      	mov	r3, r1
   19862:	f88d 3007 	strb.w	r3, [sp, #7]
   19866:	4613      	mov	r3, r2
   19868:	f8ad 3004 	strh.w	r3, [sp, #4]
  secQueueBuf_t  *pBuf;

  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   1986c:	2038      	movs	r0, #56	; 0x38
   1986e:	f7f3 fc81 	bl	d174 <WsfMsgAlloc>
   19872:	9005      	str	r0, [sp, #20]
   19874:	9b05      	ldr	r3, [sp, #20]
   19876:	2b00      	cmp	r3, #0
   19878:	d01f      	beq.n	198ba <SecAes+0x66>
  {
    pBuf->msg.hdr.status = getNextToken();
   1987a:	f7ff ffcb 	bl	19814 <getNextToken>
   1987e:	4603      	mov	r3, r0
   19880:	461a      	mov	r2, r3
   19882:	9b05      	ldr	r3, [sp, #20]
   19884:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   19886:	9b05      	ldr	r3, [sp, #20]
   19888:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1988c:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1988e:	9b05      	ldr	r3, [sp, #20]
   19890:	f89d 2020 	ldrb.w	r2, [sp, #32]
   19894:	709a      	strb	r2, [r3, #2]

    pBuf->type = SEC_TYPE_AES;
   19896:	9b05      	ldr	r3, [sp, #20]
   19898:	2200      	movs	r2, #0
   1989a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* queue buffer */
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1989e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   198a2:	9a05      	ldr	r2, [sp, #20]
   198a4:	4619      	mov	r1, r3
   198a6:	4807      	ldr	r0, [pc, #28]	; (198c4 <SecAes+0x70>)
   198a8:	f7f3 fca3 	bl	d1f2 <WsfMsgEnq>

    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   198ac:	9902      	ldr	r1, [sp, #8]
   198ae:	9803      	ldr	r0, [sp, #12]
   198b0:	f004 fcd1 	bl	1e256 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   198b4:	9b05      	ldr	r3, [sp, #20]
   198b6:	78db      	ldrb	r3, [r3, #3]
   198b8:	e000      	b.n	198bc <SecAes+0x68>
  }

  return SEC_TOKEN_INVALID;
   198ba:	23ff      	movs	r3, #255	; 0xff
}
   198bc:	4618      	mov	r0, r3
   198be:	b007      	add	sp, #28
   198c0:	f85d fb04 	ldr.w	pc, [sp], #4
   198c4:	100095c8 	.word	0x100095c8

000198c8 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   198c8:	b500      	push	{lr}
   198ca:	b087      	sub	sp, #28
   198cc:	9003      	str	r0, [sp, #12]
   198ce:	9102      	str	r1, [sp, #8]
   198d0:	4613      	mov	r3, r2
   198d2:	f88d 3007 	strb.w	r3, [sp, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   198d6:	9b03      	ldr	r3, [sp, #12]
   198d8:	9305      	str	r3, [sp, #20]

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   198da:	9b03      	ldr	r3, [sp, #12]
   198dc:	f103 0210 	add.w	r2, r3, #16
   198e0:	9b05      	ldr	r3, [sp, #20]
   198e2:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   198e4:	9b05      	ldr	r3, [sp, #20]
   198e6:	685a      	ldr	r2, [r3, #4]
   198e8:	9b02      	ldr	r3, [sp, #8]
   198ea:	3305      	adds	r3, #5
   198ec:	4619      	mov	r1, r3
   198ee:	4610      	mov	r0, r2
   198f0:	f7fa fe20 	bl	14534 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   198f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   198f8:	9905      	ldr	r1, [sp, #20]
   198fa:	4618      	mov	r0, r3
   198fc:	f7f3 fc5e 	bl	d1bc <WsfMsgSend>
}
   19900:	bf00      	nop
   19902:	b007      	add	sp, #28
   19904:	f85d fb04 	ldr.w	pc, [sp], #4

00019908 <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   19908:	4b02      	ldr	r3, [pc, #8]	; (19914 <SecAesInit+0xc>)
   1990a:	4a03      	ldr	r2, [pc, #12]	; (19918 <SecAesInit+0x10>)
   1990c:	63da      	str	r2, [r3, #60]	; 0x3c
}
   1990e:	bf00      	nop
   19910:	4770      	bx	lr
   19912:	bf00      	nop
   19914:	100095a8 	.word	0x100095a8
   19918:	000198c9 	.word	0x000198c9

0001991c <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   1991c:	b500      	push	{lr}
   1991e:	b08b      	sub	sp, #44	; 0x2c
   19920:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   19922:	9b01      	ldr	r3, [sp, #4]
   19924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19926:	9309      	str	r3, [sp, #36]	; 0x24
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   19928:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1992a:	681b      	ldr	r3, [r3, #0]
   1992c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1992e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   19930:	4413      	add	r3, r2
   19932:	9308      	str	r3, [sp, #32]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   19934:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19936:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   19938:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1993a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1993c:	1ad3      	subs	r3, r2, r3
   1993e:	b29b      	uxth	r3, r3
   19940:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   19944:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   19948:	2b10      	cmp	r3, #16
   1994a:	dc2a      	bgt.n	199a2 <secCmacProcessBlock+0x86>
  {
    memcpy(text, pMn, remaining);
   1994c:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
   19950:	ab03      	add	r3, sp, #12
   19952:	9908      	ldr	r1, [sp, #32]
   19954:	4618      	mov	r0, r3
   19956:	f7f2 fbd3 	bl	c100 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   1995a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   1995e:	2b10      	cmp	r3, #16
   19960:	d012      	beq.n	19988 <secCmacProcessBlock+0x6c>
    {
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
   19962:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   19966:	aa03      	add	r2, sp, #12
   19968:	18d0      	adds	r0, r2, r3
   1996a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   1996e:	f1c3 0310 	rsb	r3, r3, #16
   19972:	461a      	mov	r2, r3
   19974:	2100      	movs	r1, #0
   19976:	f00e fd61 	bl	2843c <memset>
      text[remaining] = 0x80;
   1997a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   1997e:	aa0a      	add	r2, sp, #40	; 0x28
   19980:	4413      	add	r3, r2
   19982:	2280      	movs	r2, #128	; 0x80
   19984:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
   19988:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1998a:	f103 0214 	add.w	r2, r3, #20
   1998e:	ab03      	add	r3, sp, #12
   19990:	4611      	mov	r1, r2
   19992:	4618      	mov	r0, r3
   19994:	f7fa fde8 	bl	14568 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   19998:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1999a:	2202      	movs	r2, #2
   1999c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   199a0:	e004      	b.n	199ac <secCmacProcessBlock+0x90>
  }
  else
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
   199a2:	ab03      	add	r3, sp, #12
   199a4:	9908      	ldr	r1, [sp, #32]
   199a6:	4618      	mov	r0, r3
   199a8:	f7fa fdc4 	bl	14534 <Calc128Cpy>
  }

  if (pCmac->position != 0)
   199ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   199ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   199b0:	2b00      	cmp	r3, #0
   199b2:	d007      	beq.n	199c4 <secCmacProcessBlock+0xa8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
   199b4:	9b01      	ldr	r3, [sp, #4]
   199b6:	f103 0210 	add.w	r2, r3, #16
   199ba:	ab03      	add	r3, sp, #12
   199bc:	4611      	mov	r1, r2
   199be:	4618      	mov	r0, r3
   199c0:	f7fa fdd2 	bl	14568 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   199c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   199c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   199c8:	3310      	adds	r3, #16
   199ca:	b29a      	uxth	r2, r3
   199cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   199ce:	849a      	strh	r2, [r3, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
   199d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   199d2:	1d18      	adds	r0, r3, #4
   199d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   199d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   199da:	a903      	add	r1, sp, #12
   199dc:	9a01      	ldr	r2, [sp, #4]
   199de:	f000 fa71 	bl	19ec4 <SecLeEncryptCmd>
}
   199e2:	bf00      	nop
   199e4:	b00b      	add	sp, #44	; 0x2c
   199e6:	f85d fb04 	ldr.w	pc, [sp], #4

000199ea <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   199ea:	b500      	push	{lr}
   199ec:	b089      	sub	sp, #36	; 0x24
   199ee:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   199f0:	9b01      	ldr	r3, [sp, #4]
   199f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   199f4:	9307      	str	r3, [sp, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   199f6:	ab03      	add	r3, sp, #12
   199f8:	2210      	movs	r2, #16
   199fa:	2100      	movs	r1, #0
   199fc:	4618      	mov	r0, r3
   199fe:	f00e fd1d 	bl	2843c <memset>

  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   19a02:	9b07      	ldr	r3, [sp, #28]
   19a04:	1d18      	adds	r0, r3, #4
   19a06:	9b07      	ldr	r3, [sp, #28]
   19a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19a0c:	a903      	add	r1, sp, #12
   19a0e:	9a01      	ldr	r2, [sp, #4]
   19a10:	f000 fa58 	bl	19ec4 <SecLeEncryptCmd>
}
   19a14:	bf00      	nop
   19a16:	b009      	add	sp, #36	; 0x24
   19a18:	f85d fb04 	ldr.w	pc, [sp], #4

00019a1c <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   19a1c:	b084      	sub	sp, #16
   19a1e:	9001      	str	r0, [sp, #4]
   19a20:	460b      	mov	r3, r1
   19a22:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t overflow, i;
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
   19a26:	9b01      	ldr	r3, [sp, #4]
   19a28:	781b      	ldrb	r3, [r3, #0]
   19a2a:	461a      	mov	r2, r3
   19a2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19a30:	f1c3 0308 	rsb	r3, r3, #8
   19a34:	fa42 f303 	asr.w	r3, r2, r3
   19a38:	f88d 300d 	strb.w	r3, [sp, #13]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   19a3c:	2300      	movs	r3, #0
   19a3e:	f88d 300e 	strb.w	r3, [sp, #14]
   19a42:	e030      	b.n	19aa6 <secCmacKeyShift+0x8a>
  {
    /* store shifted bits for next byte */
    if (i < SEC_CMAC_KEY_LEN-1)
   19a44:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19a48:	2b0e      	cmp	r3, #14
   19a4a:	d80f      	bhi.n	19a6c <secCmacKeyShift+0x50>
    {
      overflow = pBuf[i+1] >> (8 - shift);
   19a4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19a50:	3301      	adds	r3, #1
   19a52:	9a01      	ldr	r2, [sp, #4]
   19a54:	4413      	add	r3, r2
   19a56:	781b      	ldrb	r3, [r3, #0]
   19a58:	461a      	mov	r2, r3
   19a5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19a5e:	f1c3 0308 	rsb	r3, r3, #8
   19a62:	fa42 f303 	asr.w	r3, r2, r3
   19a66:	f88d 300f 	strb.w	r3, [sp, #15]
   19a6a:	e002      	b.n	19a72 <secCmacKeyShift+0x56>
    }
    else
    {
      overflow = 0;
   19a6c:	2300      	movs	r3, #0
   19a6e:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | overflow;
   19a72:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19a76:	9a01      	ldr	r2, [sp, #4]
   19a78:	4413      	add	r3, r2
   19a7a:	781b      	ldrb	r3, [r3, #0]
   19a7c:	461a      	mov	r2, r3
   19a7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19a82:	fa02 f303 	lsl.w	r3, r2, r3
   19a86:	b25a      	sxtb	r2, r3
   19a88:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   19a8c:	4313      	orrs	r3, r2
   19a8e:	b259      	sxtb	r1, r3
   19a90:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19a94:	9a01      	ldr	r2, [sp, #4]
   19a96:	4413      	add	r3, r2
   19a98:	b2ca      	uxtb	r2, r1
   19a9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   19a9c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19aa0:	3301      	adds	r3, #1
   19aa2:	f88d 300e 	strb.w	r3, [sp, #14]
   19aa6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19aaa:	2b0f      	cmp	r3, #15
   19aac:	d9ca      	bls.n	19a44 <secCmacKeyShift+0x28>
  }

  return finalOverflow;
   19aae:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
   19ab2:	4618      	mov	r0, r3
   19ab4:	b004      	add	sp, #16
   19ab6:	4770      	bx	lr

00019ab8 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   19ab8:	b500      	push	{lr}
   19aba:	b085      	sub	sp, #20
   19abc:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   19abe:	9b01      	ldr	r3, [sp, #4]
   19ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19ac2:	9303      	str	r3, [sp, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   19ac4:	9b03      	ldr	r3, [sp, #12]
   19ac6:	f103 0214 	add.w	r2, r3, #20
   19aca:	9b01      	ldr	r3, [sp, #4]
   19acc:	3310      	adds	r3, #16
   19ace:	4619      	mov	r1, r3
   19ad0:	4610      	mov	r0, r2
   19ad2:	f7fa fd2f 	bl	14534 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   19ad6:	9b03      	ldr	r3, [sp, #12]
   19ad8:	3314      	adds	r3, #20
   19ada:	2101      	movs	r1, #1
   19adc:	4618      	mov	r0, r3
   19ade:	f7ff ff9d 	bl	19a1c <secCmacKeyShift>
   19ae2:	4603      	mov	r3, r0
   19ae4:	f88d 300b 	strb.w	r3, [sp, #11]

  if (overflow)
   19ae8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   19aec:	2b00      	cmp	r3, #0
   19aee:	d009      	beq.n	19b04 <secCmacGenSubkey2+0x4c>
  {
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   19af0:	9b03      	ldr	r3, [sp, #12]
   19af2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   19af6:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   19afa:	43db      	mvns	r3, r3
   19afc:	b2da      	uxtb	r2, r3
   19afe:	9b03      	ldr	r3, [sp, #12]
   19b00:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   19b04:	9b03      	ldr	r3, [sp, #12]
   19b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   19b08:	f003 030f 	and.w	r3, r3, #15
   19b0c:	b29b      	uxth	r3, r3
   19b0e:	2b00      	cmp	r3, #0
   19b10:	d016      	beq.n	19b40 <secCmacGenSubkey2+0x88>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   19b12:	9b03      	ldr	r3, [sp, #12]
   19b14:	3314      	adds	r3, #20
   19b16:	2101      	movs	r1, #1
   19b18:	4618      	mov	r0, r3
   19b1a:	f7ff ff7f 	bl	19a1c <secCmacKeyShift>
   19b1e:	4603      	mov	r3, r0
   19b20:	f88d 300b 	strb.w	r3, [sp, #11]

    if (overflow)
   19b24:	f89d 300b 	ldrb.w	r3, [sp, #11]
   19b28:	2b00      	cmp	r3, #0
   19b2a:	d009      	beq.n	19b40 <secCmacGenSubkey2+0x88>
    {
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   19b2c:	9b03      	ldr	r3, [sp, #12]
   19b2e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   19b32:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   19b36:	43db      	mvns	r3, r3
   19b38:	b2da      	uxtb	r2, r3
   19b3a:	9b03      	ldr	r3, [sp, #12]
   19b3c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   19b40:	9b03      	ldr	r3, [sp, #12]
   19b42:	2201      	movs	r2, #1
   19b44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   19b48:	9801      	ldr	r0, [sp, #4]
   19b4a:	f7ff fee7 	bl	1991c <secCmacProcessBlock>
}
   19b4e:	bf00      	nop
   19b50:	b005      	add	sp, #20
   19b52:	f85d fb04 	ldr.w	pc, [sp], #4

00019b56 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   19b56:	b500      	push	{lr}
   19b58:	b085      	sub	sp, #20
   19b5a:	9001      	str	r0, [sp, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   19b5c:	9b01      	ldr	r3, [sp, #4]
   19b5e:	9303      	str	r3, [sp, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   19b60:	9b01      	ldr	r3, [sp, #4]
   19b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b64:	9302      	str	r3, [sp, #8]

  pMsg->pCiphertext = pBuf->ciphertext;
   19b66:	9b01      	ldr	r3, [sp, #4]
   19b68:	f103 0210 	add.w	r2, r3, #16
   19b6c:	9b03      	ldr	r3, [sp, #12]
   19b6e:	605a      	str	r2, [r3, #4]
  pMsg->pPlainText = pCmac->pPlainText;
   19b70:	9b02      	ldr	r3, [sp, #8]
   19b72:	681a      	ldr	r2, [r3, #0]
   19b74:	9b03      	ldr	r3, [sp, #12]
   19b76:	609a      	str	r2, [r3, #8]

  WsfMsgSend(pCmac->handlerId, pMsg);
   19b78:	9b02      	ldr	r3, [sp, #8]
   19b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19b7e:	9903      	ldr	r1, [sp, #12]
   19b80:	4618      	mov	r0, r3
   19b82:	f7f3 fb1b 	bl	d1bc <WsfMsgSend>
}
   19b86:	bf00      	nop
   19b88:	b005      	add	sp, #20
   19b8a:	f85d fb04 	ldr.w	pc, [sp], #4

00019b8e <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   19b8e:	b500      	push	{lr}
   19b90:	b087      	sub	sp, #28
   19b92:	9003      	str	r0, [sp, #12]
   19b94:	9102      	str	r1, [sp, #8]
   19b96:	4613      	mov	r3, r2
   19b98:	f88d 3007 	strb.w	r3, [sp, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   19b9c:	9b03      	ldr	r3, [sp, #12]
   19b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19ba0:	9305      	str	r3, [sp, #20]

  if (pCmac)
   19ba2:	9b05      	ldr	r3, [sp, #20]
   19ba4:	2b00      	cmp	r3, #0
   19ba6:	d020      	beq.n	19bea <SecCmacHciCback+0x5c>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   19ba8:	9b03      	ldr	r3, [sp, #12]
   19baa:	f103 0210 	add.w	r2, r3, #16
   19bae:	9b02      	ldr	r3, [sp, #8]
   19bb0:	3305      	adds	r3, #5
   19bb2:	4619      	mov	r1, r3
   19bb4:	4610      	mov	r0, r2
   19bb6:	f7fa fcbd 	bl	14534 <Calc128Cpy>

    switch (pCmac->state)
   19bba:	9b05      	ldr	r3, [sp, #20]
   19bbc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   19bc0:	2b02      	cmp	r3, #2
   19bc2:	d00e      	beq.n	19be2 <SecCmacHciCback+0x54>
   19bc4:	2b02      	cmp	r3, #2
   19bc6:	dc11      	bgt.n	19bec <SecCmacHciCback+0x5e>
   19bc8:	2b00      	cmp	r3, #0
   19bca:	d002      	beq.n	19bd2 <SecCmacHciCback+0x44>
   19bcc:	2b01      	cmp	r3, #1
   19bce:	d004      	beq.n	19bda <SecCmacHciCback+0x4c>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   19bd0:	e00c      	b.n	19bec <SecCmacHciCback+0x5e>
      secCmacGenSubkey2(pBuf);
   19bd2:	9803      	ldr	r0, [sp, #12]
   19bd4:	f7ff ff70 	bl	19ab8 <secCmacGenSubkey2>
      break;
   19bd8:	e008      	b.n	19bec <SecCmacHciCback+0x5e>
      secCmacProcessBlock(pBuf);
   19bda:	9803      	ldr	r0, [sp, #12]
   19bdc:	f7ff fe9e 	bl	1991c <secCmacProcessBlock>
      break;
   19be0:	e004      	b.n	19bec <SecCmacHciCback+0x5e>
      secCmacComplete(pBuf);
   19be2:	9803      	ldr	r0, [sp, #12]
   19be4:	f7ff ffb7 	bl	19b56 <secCmacComplete>
      break;
   19be8:	e000      	b.n	19bec <SecCmacHciCback+0x5e>
  }
   19bea:	bf00      	nop
}
   19bec:	bf00      	nop
   19bee:	b007      	add	sp, #28
   19bf0:	f85d fb04 	ldr.w	pc, [sp], #4

00019bf4 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   19bf4:	b500      	push	{lr}
   19bf6:	b089      	sub	sp, #36	; 0x24
   19bf8:	9003      	str	r0, [sp, #12]
   19bfa:	9102      	str	r1, [sp, #8]
   19bfc:	4611      	mov	r1, r2
   19bfe:	461a      	mov	r2, r3
   19c00:	460b      	mov	r3, r1
   19c02:	f8ad 3006 	strh.w	r3, [sp, #6]
   19c06:	4613      	mov	r3, r2
   19c08:	f88d 3005 	strb.w	r3, [sp, #5]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   19c0c:	2364      	movs	r3, #100	; 0x64
   19c0e:	f8ad 301e 	strh.w	r3, [sp, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   19c12:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   19c16:	4618      	mov	r0, r3
   19c18:	f7f3 faac 	bl	d174 <WsfMsgAlloc>
   19c1c:	9006      	str	r0, [sp, #24]
   19c1e:	9b06      	ldr	r3, [sp, #24]
   19c20:	2b00      	cmp	r3, #0
   19c22:	d039      	beq.n	19c98 <SecCmac+0xa4>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   19c24:	9b06      	ldr	r3, [sp, #24]
   19c26:	3338      	adds	r3, #56	; 0x38
   19c28:	9305      	str	r3, [sp, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   19c2a:	9b06      	ldr	r3, [sp, #24]
   19c2c:	9a05      	ldr	r2, [sp, #20]
   19c2e:	631a      	str	r2, [r3, #48]	; 0x30
    pBuf->type = SEC_TYPE_CMAC;
   19c30:	9b06      	ldr	r3, [sp, #24]
   19c32:	2201      	movs	r2, #1
   19c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    pBuf->msg.hdr.status = secCb.token++;
   19c38:	4b1a      	ldr	r3, [pc, #104]	; (19ca4 <SecCmac+0xb0>)
   19c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   19c3e:	1c5a      	adds	r2, r3, #1
   19c40:	b2d1      	uxtb	r1, r2
   19c42:	4a18      	ldr	r2, [pc, #96]	; (19ca4 <SecCmac+0xb0>)
   19c44:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   19c48:	9a06      	ldr	r2, [sp, #24]
   19c4a:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   19c4c:	9b06      	ldr	r3, [sp, #24]
   19c4e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   19c52:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   19c54:	9b06      	ldr	r3, [sp, #24]
   19c56:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   19c5a:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   19c5c:	9b05      	ldr	r3, [sp, #20]
   19c5e:	9a02      	ldr	r2, [sp, #8]
   19c60:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   19c62:	9b05      	ldr	r3, [sp, #20]
   19c64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   19c68:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   19c6a:	9b05      	ldr	r3, [sp, #20]
   19c6c:	2200      	movs	r2, #0
   19c6e:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   19c70:	9b05      	ldr	r3, [sp, #20]
   19c72:	f89d 2005 	ldrb.w	r2, [sp, #5]
   19c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   19c7a:	9b05      	ldr	r3, [sp, #20]
   19c7c:	2200      	movs	r2, #0
   19c7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   19c82:	9b05      	ldr	r3, [sp, #20]
   19c84:	3304      	adds	r3, #4
   19c86:	9903      	ldr	r1, [sp, #12]
   19c88:	4618      	mov	r0, r3
   19c8a:	f7fa fc53 	bl	14534 <Calc128Cpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   19c8e:	9806      	ldr	r0, [sp, #24]
   19c90:	f7ff feab 	bl	199ea <secCmacGenSubkey1>

    return TRUE;
   19c94:	2301      	movs	r3, #1
   19c96:	e000      	b.n	19c9a <SecCmac+0xa6>
  }

  return FALSE;
   19c98:	2300      	movs	r3, #0
}
   19c9a:	4618      	mov	r0, r3
   19c9c:	b009      	add	sp, #36	; 0x24
   19c9e:	f85d fb04 	ldr.w	pc, [sp], #4
   19ca2:	bf00      	nop
   19ca4:	100095a8 	.word	0x100095a8

00019ca8 <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   19ca8:	4b02      	ldr	r3, [pc, #8]	; (19cb4 <SecCmacInit+0xc>)
   19caa:	4a03      	ldr	r2, [pc, #12]	; (19cb8 <SecCmacInit+0x10>)
   19cac:	641a      	str	r2, [r3, #64]	; 0x40
}
   19cae:	bf00      	nop
   19cb0:	4770      	bx	lr
   19cb2:	bf00      	nop
   19cb4:	100095a8 	.word	0x100095a8
   19cb8:	00019b8f 	.word	0x00019b8f

00019cbc <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   19cbc:	b500      	push	{lr}
   19cbe:	b085      	sub	sp, #20
   19cc0:	9001      	str	r0, [sp, #4]
  secQueueBuf_t *pBuf = NULL;
   19cc2:	2300      	movs	r3, #0
   19cc4:	9303      	str	r3, [sp, #12]
  wsfHandlerId_t handlerId = 0;
   19cc6:	2300      	movs	r3, #0
   19cc8:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Handle random number event. */
  switch (pEvent->hdr.event)
   19ccc:	9b01      	ldr	r3, [sp, #4]
   19cce:	789b      	ldrb	r3, [r3, #2]
   19cd0:	3b1b      	subs	r3, #27
   19cd2:	2b0b      	cmp	r3, #11
   19cd4:	d863      	bhi.n	19d9e <secHciCback+0xe2>
   19cd6:	a201      	add	r2, pc, #4	; (adr r2, 19cdc <secHciCback+0x20>)
   19cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19cdc:	00019d45 	.word	0x00019d45
   19ce0:	00019d0d 	.word	0x00019d0d
   19ce4:	00019d9f 	.word	0x00019d9f
   19ce8:	00019d9f 	.word	0x00019d9f
   19cec:	00019d9f 	.word	0x00019d9f
   19cf0:	00019d9f 	.word	0x00019d9f
   19cf4:	00019d9f 	.word	0x00019d9f
   19cf8:	00019d9f 	.word	0x00019d9f
   19cfc:	00019d9f 	.word	0x00019d9f
   19d00:	00019d9f 	.word	0x00019d9f
   19d04:	00019d7f 	.word	0x00019d7f
   19d08:	00019d8f 	.word	0x00019d8f
  {
  case HCI_LE_RAND_CMD_CMPL_CBACK_EVT:

    /* Copy new data to circular buffer of random data. */
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   19d0c:	4b2f      	ldr	r3, [pc, #188]	; (19dcc <secHciCback+0x110>)
   19d0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   19d12:	00db      	lsls	r3, r3, #3
   19d14:	4a2d      	ldr	r2, [pc, #180]	; (19dcc <secHciCback+0x110>)
   19d16:	1898      	adds	r0, r3, r2
   19d18:	9b01      	ldr	r3, [sp, #4]
   19d1a:	3305      	adds	r3, #5
   19d1c:	2208      	movs	r2, #8
   19d1e:	4619      	mov	r1, r3
   19d20:	f7f2 f9ee 	bl	c100 <memcpy>
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   19d24:	4b29      	ldr	r3, [pc, #164]	; (19dcc <secHciCback+0x110>)
   19d26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   19d2a:	2b02      	cmp	r3, #2
   19d2c:	d805      	bhi.n	19d3a <secHciCback+0x7e>
   19d2e:	4b27      	ldr	r3, [pc, #156]	; (19dcc <secHciCback+0x110>)
   19d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   19d34:	3301      	adds	r3, #1
   19d36:	b2db      	uxtb	r3, r3
   19d38:	e000      	b.n	19d3c <secHciCback+0x80>
   19d3a:	2300      	movs	r3, #0
   19d3c:	4a23      	ldr	r2, [pc, #140]	; (19dcc <secHciCback+0x110>)
   19d3e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    break;
   19d42:	e02f      	b.n	19da4 <secHciCback+0xe8>

  case HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   19d44:	f10d 030b 	add.w	r3, sp, #11
   19d48:	4619      	mov	r1, r3
   19d4a:	4821      	ldr	r0, [pc, #132]	; (19dd0 <secHciCback+0x114>)
   19d4c:	f7f3 fa67 	bl	d21e <WsfMsgDeq>
   19d50:	9003      	str	r0, [sp, #12]

    WSF_ASSERT(pBuf != NULL);

    /* note: pBuf should never be NULL and is checked by assert above. */
    /* coverity[dereference] */
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   19d52:	9b03      	ldr	r3, [sp, #12]
   19d54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   19d58:	2b03      	cmp	r3, #3
   19d5a:	d009      	beq.n	19d70 <secHciCback+0xb4>
   19d5c:	9b03      	ldr	r3, [sp, #12]
   19d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   19d62:	2b01      	cmp	r3, #1
   19d64:	d004      	beq.n	19d70 <secHciCback+0xb4>
   19d66:	9b03      	ldr	r3, [sp, #12]
   19d68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   19d6c:	2b04      	cmp	r3, #4
   19d6e:	d118      	bne.n	19da2 <secHciCback+0xe6>
    {
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   19d70:	9b01      	ldr	r3, [sp, #4]
   19d72:	3305      	adds	r3, #5
   19d74:	2110      	movs	r1, #16
   19d76:	4618      	mov	r0, r3
   19d78:	f7fa fc3f 	bl	145fa <WStrReverse>
    }
    break;
   19d7c:	e011      	b.n	19da2 <secHciCback+0xe6>

  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
   19d7e:	f10d 030b 	add.w	r3, sp, #11
   19d82:	4619      	mov	r1, r3
   19d84:	4813      	ldr	r0, [pc, #76]	; (19dd4 <secHciCback+0x118>)
   19d86:	f7f3 fa4a 	bl	d21e <WsfMsgDeq>
   19d8a:	9003      	str	r0, [sp, #12]
    break;
   19d8c:	e00a      	b.n	19da4 <secHciCback+0xe8>

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
   19d8e:	f10d 030b 	add.w	r3, sp, #11
   19d92:	4619      	mov	r1, r3
   19d94:	4810      	ldr	r0, [pc, #64]	; (19dd8 <secHciCback+0x11c>)
   19d96:	f7f3 fa42 	bl	d21e <WsfMsgDeq>
   19d9a:	9003      	str	r0, [sp, #12]
    break;
   19d9c:	e002      	b.n	19da4 <secHciCback+0xe8>

  default:
    break;
   19d9e:	bf00      	nop
   19da0:	e000      	b.n	19da4 <secHciCback+0xe8>
    break;
   19da2:	bf00      	nop
  }

  if (pBuf)
   19da4:	9b03      	ldr	r3, [sp, #12]
   19da6:	2b00      	cmp	r3, #0
   19da8:	d00c      	beq.n	19dc4 <secHciCback+0x108>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   19daa:	9b03      	ldr	r3, [sp, #12]
   19dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   19db0:	4a06      	ldr	r2, [pc, #24]	; (19dcc <secHciCback+0x110>)
   19db2:	330e      	adds	r3, #14
   19db4:	009b      	lsls	r3, r3, #2
   19db6:	4413      	add	r3, r2
   19db8:	685b      	ldr	r3, [r3, #4]
   19dba:	f89d 200b 	ldrb.w	r2, [sp, #11]
   19dbe:	9901      	ldr	r1, [sp, #4]
   19dc0:	9803      	ldr	r0, [sp, #12]
   19dc2:	4798      	blx	r3
  }
}
   19dc4:	bf00      	nop
   19dc6:	b005      	add	sp, #20
   19dc8:	f85d fb04 	ldr.w	pc, [sp], #4
   19dcc:	100095a8 	.word	0x100095a8
   19dd0:	100095c8 	.word	0x100095c8
   19dd4:	100095d0 	.word	0x100095d0
   19dd8:	100095d8 	.word	0x100095d8

00019ddc <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   19ddc:	b508      	push	{r3, lr}
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   19dde:	4b0d      	ldr	r3, [pc, #52]	; (19e14 <SecInit+0x38>)
   19de0:	2200      	movs	r2, #0
   19de2:	621a      	str	r2, [r3, #32]
   19de4:	4b0b      	ldr	r3, [pc, #44]	; (19e14 <SecInit+0x38>)
   19de6:	2200      	movs	r2, #0
   19de8:	625a      	str	r2, [r3, #36]	; 0x24
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   19dea:	4b0a      	ldr	r3, [pc, #40]	; (19e14 <SecInit+0x38>)
   19dec:	2200      	movs	r2, #0
   19dee:	629a      	str	r2, [r3, #40]	; 0x28
   19df0:	4b08      	ldr	r3, [pc, #32]	; (19e14 <SecInit+0x38>)
   19df2:	2200      	movs	r2, #0
   19df4:	62da      	str	r2, [r3, #44]	; 0x2c
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   19df6:	4b07      	ldr	r3, [pc, #28]	; (19e14 <SecInit+0x38>)
   19df8:	2200      	movs	r2, #0
   19dfa:	631a      	str	r2, [r3, #48]	; 0x30
   19dfc:	4b05      	ldr	r3, [pc, #20]	; (19e14 <SecInit+0x38>)
   19dfe:	2200      	movs	r2, #0
   19e00:	635a      	str	r2, [r3, #52]	; 0x34

  secCb.token = 0;
   19e02:	4b04      	ldr	r3, [pc, #16]	; (19e14 <SecInit+0x38>)
   19e04:	2200      	movs	r2, #0
   19e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   19e0a:	4803      	ldr	r0, [pc, #12]	; (19e18 <SecInit+0x3c>)
   19e0c:	f003 fee6 	bl	1dbdc <HciSecRegister>
}
   19e10:	bf00      	nop
   19e12:	bd08      	pop	{r3, pc}
   19e14:	100095a8 	.word	0x100095a8
   19e18:	00019cbd 	.word	0x00019cbd

00019e1c <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   19e1c:	b500      	push	{lr}
   19e1e:	b085      	sub	sp, #20
   19e20:	9001      	str	r0, [sp, #4]
   19e22:	460b      	mov	r3, r1
   19e24:	f88d 3003 	strb.w	r3, [sp, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   19e28:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19e2c:	3307      	adds	r3, #7
   19e2e:	2b00      	cmp	r3, #0
   19e30:	da00      	bge.n	19e34 <SecRand+0x18>
   19e32:	3307      	adds	r3, #7
   19e34:	10db      	asrs	r3, r3, #3
   19e36:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   19e3a:	4b21      	ldr	r3, [pc, #132]	; (19ec0 <SecRand+0xa4>)
   19e3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   19e40:	00db      	lsls	r3, r3, #3
   19e42:	f88d 300e 	strb.w	r3, [sp, #14]

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   19e46:	e013      	b.n	19e70 <SecRand+0x54>
  {
    *pRand++ = secCb.rand[index];
   19e48:	f89d 200e 	ldrb.w	r2, [sp, #14]
   19e4c:	9b01      	ldr	r3, [sp, #4]
   19e4e:	1c59      	adds	r1, r3, #1
   19e50:	9101      	str	r1, [sp, #4]
   19e52:	491b      	ldr	r1, [pc, #108]	; (19ec0 <SecRand+0xa4>)
   19e54:	5c8a      	ldrb	r2, [r1, r2]
   19e56:	701a      	strb	r2, [r3, #0]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   19e58:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19e5c:	2b1f      	cmp	r3, #31
   19e5e:	d004      	beq.n	19e6a <SecRand+0x4e>
   19e60:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19e64:	3301      	adds	r3, #1
   19e66:	b2db      	uxtb	r3, r3
   19e68:	e000      	b.n	19e6c <SecRand+0x50>
   19e6a:	2300      	movs	r3, #0
   19e6c:	f88d 300e 	strb.w	r3, [sp, #14]
  while (randLen--)
   19e70:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19e74:	1e5a      	subs	r2, r3, #1
   19e76:	f88d 2003 	strb.w	r2, [sp, #3]
   19e7a:	2b00      	cmp	r3, #0
   19e7c:	d1e4      	bne.n	19e48 <SecRand+0x2c>
  }

  while (count--)
   19e7e:	e010      	b.n	19ea2 <SecRand+0x86>
  {
    /* Request more random data. */
    HciLeRandCmd();
   19e80:	f004 fa63 	bl	1e34a <HciLeRandCmd>

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   19e84:	4b0e      	ldr	r3, [pc, #56]	; (19ec0 <SecRand+0xa4>)
   19e86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   19e8a:	2b02      	cmp	r3, #2
   19e8c:	d805      	bhi.n	19e9a <SecRand+0x7e>
   19e8e:	4b0c      	ldr	r3, [pc, #48]	; (19ec0 <SecRand+0xa4>)
   19e90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   19e94:	3301      	adds	r3, #1
   19e96:	b2db      	uxtb	r3, r3
   19e98:	e000      	b.n	19e9c <SecRand+0x80>
   19e9a:	2300      	movs	r3, #0
   19e9c:	4a08      	ldr	r2, [pc, #32]	; (19ec0 <SecRand+0xa4>)
   19e9e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  while (count--)
   19ea2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   19ea6:	b2da      	uxtb	r2, r3
   19ea8:	3a01      	subs	r2, #1
   19eaa:	b2d2      	uxtb	r2, r2
   19eac:	f88d 200f 	strb.w	r2, [sp, #15]
   19eb0:	2b00      	cmp	r3, #0
   19eb2:	d1e5      	bne.n	19e80 <SecRand+0x64>
  }
}
   19eb4:	bf00      	nop
   19eb6:	bf00      	nop
   19eb8:	b005      	add	sp, #20
   19eba:	f85d fb04 	ldr.w	pc, [sp], #4
   19ebe:	bf00      	nop
   19ec0:	100095a8 	.word	0x100095a8

00019ec4 <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   19ec4:	b500      	push	{lr}
   19ec6:	b08d      	sub	sp, #52	; 0x34
   19ec8:	9003      	str	r0, [sp, #12]
   19eca:	9102      	str	r1, [sp, #8]
   19ecc:	9201      	str	r2, [sp, #4]
   19ece:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   19ed2:	ab08      	add	r3, sp, #32
   19ed4:	2210      	movs	r2, #16
   19ed6:	9903      	ldr	r1, [sp, #12]
   19ed8:	4618      	mov	r0, r3
   19eda:	f7fa fb64 	bl	145a6 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   19ede:	ab04      	add	r3, sp, #16
   19ee0:	2210      	movs	r2, #16
   19ee2:	9902      	ldr	r1, [sp, #8]
   19ee4:	4618      	mov	r0, r3
   19ee6:	f7fa fb5e 	bl	145a6 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   19eea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19eee:	9a01      	ldr	r2, [sp, #4]
   19ef0:	4619      	mov	r1, r3
   19ef2:	4806      	ldr	r0, [pc, #24]	; (19f0c <SecLeEncryptCmd+0x48>)
   19ef4:	f7f3 f97d 	bl	d1f2 <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   19ef8:	aa04      	add	r2, sp, #16
   19efa:	ab08      	add	r3, sp, #32
   19efc:	4611      	mov	r1, r2
   19efe:	4618      	mov	r0, r3
   19f00:	f004 f9a9 	bl	1e256 <HciLeEncryptCmd>
}
   19f04:	bf00      	nop
   19f06:	b00d      	add	sp, #52	; 0x34
   19f08:	f85d fb04 	ldr.w	pc, [sp], #4
   19f0c:	100095c8 	.word	0x100095c8

00019f10 <smprActSendSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19f10:	b500      	push	{lr}
   19f12:	b085      	sub	sp, #20
   19f14:	9001      	str	r0, [sp, #4]
   19f16:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   19f18:	9801      	ldr	r0, [sp, #4]
   19f1a:	f000 fe01 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_SECURITY_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   19f1e:	200a      	movs	r0, #10
   19f20:	f002 f9ff 	bl	1c322 <smpMsgAlloc>
   19f24:	9003      	str	r0, [sp, #12]
   19f26:	9b03      	ldr	r3, [sp, #12]
   19f28:	2b00      	cmp	r3, #0
   19f2a:	d011      	beq.n	19f50 <smprActSendSecurityReq+0x40>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   19f2c:	9b03      	ldr	r3, [sp, #12]
   19f2e:	3308      	adds	r3, #8
   19f30:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_SECURITY_REQ);
   19f32:	9b02      	ldr	r3, [sp, #8]
   19f34:	1c5a      	adds	r2, r3, #1
   19f36:	9202      	str	r2, [sp, #8]
   19f38:	220b      	movs	r2, #11
   19f3a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, pMsg->dm.securityReq.auth);
   19f3c:	9b02      	ldr	r3, [sp, #8]
   19f3e:	1c5a      	adds	r2, r3, #1
   19f40:	9202      	str	r2, [sp, #8]
   19f42:	9a00      	ldr	r2, [sp, #0]
   19f44:	7912      	ldrb	r2, [r2, #4]
   19f46:	701a      	strb	r2, [r3, #0]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   19f48:	9903      	ldr	r1, [sp, #12]
   19f4a:	9801      	ldr	r0, [sp, #4]
   19f4c:	f002 f9a8 	bl	1c2a0 <smpSendPkt>
  }
}
   19f50:	bf00      	nop
   19f52:	b005      	add	sp, #20
   19f54:	f85d fb04 	ldr.w	pc, [sp], #4

00019f58 <smprActProcPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19f58:	b500      	push	{lr}
   19f5a:	b087      	sub	sp, #28
   19f5c:	9001      	str	r0, [sp, #4]
   19f5e:	9100      	str	r1, [sp, #0]
  dmSecPairIndEvt_t   pairInd;
  uint8_t             *p;

  /* allocate scratch buffer */
  if (pCcb->pScr == NULL)
   19f60:	9b01      	ldr	r3, [sp, #4]
   19f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19f64:	2b00      	cmp	r3, #0
   19f66:	d114      	bne.n	19f92 <smprActProcPairReq+0x3a>
  {
    if ((pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t))) == NULL)
   19f68:	2040      	movs	r0, #64	; 0x40
   19f6a:	f7f3 f86d 	bl	d048 <WsfBufAlloc>
   19f6e:	4602      	mov	r2, r0
   19f70:	9b01      	ldr	r3, [sp, #4]
   19f72:	631a      	str	r2, [r3, #48]	; 0x30
   19f74:	9b01      	ldr	r3, [sp, #4]
   19f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19f78:	2b00      	cmp	r3, #0
   19f7a:	d10d      	bne.n	19f98 <smprActProcPairReq+0x40>
    {
      /* alloc failed; cancel pairing */
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   19f7c:	9b00      	ldr	r3, [sp, #0]
   19f7e:	2208      	movs	r2, #8
   19f80:	70da      	strb	r2, [r3, #3]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   19f82:	9b00      	ldr	r3, [sp, #0]
   19f84:	2203      	movs	r2, #3
   19f86:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
   19f88:	9900      	ldr	r1, [sp, #0]
   19f8a:	9801      	ldr	r0, [sp, #4]
   19f8c:	f001 fb0a 	bl	1b5a4 <smpSmExecute>
   19f90:	e043      	b.n	1a01a <smprActProcPairReq+0xc2>
    }
  }
  else
  {
    /* should not happen */
    SMP_TRACE_ERR0("pScr already allocated");
   19f92:	4823      	ldr	r0, [pc, #140]	; (1a020 <smprActProcPairReq+0xc8>)
   19f94:	f7f3 fd58 	bl	da48 <WsfTrace>
  }

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   19f98:	9b01      	ldr	r3, [sp, #4]
   19f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   19f9e:	2201      	movs	r2, #1
   19fa0:	2101      	movs	r1, #1
   19fa2:	4618      	mov	r0, r3
   19fa4:	f7fb ffaa 	bl	15efc <DmConnSetIdle>

  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
   19fa8:	9b00      	ldr	r3, [sp, #0]
   19faa:	685b      	ldr	r3, [r3, #4]
   19fac:	3308      	adds	r3, #8
   19fae:	9305      	str	r3, [sp, #20]

  /* store packet for later */
  memcpy(pCcb->pairReq, p, SMP_PAIR_REQ_LEN);
   19fb0:	9b01      	ldr	r3, [sp, #4]
   19fb2:	3320      	adds	r3, #32
   19fb4:	2207      	movs	r2, #7
   19fb6:	9905      	ldr	r1, [sp, #20]
   19fb8:	4618      	mov	r0, r3
   19fba:	f7f2 f8a1 	bl	c100 <memcpy>

  /* parse packet to callback event structure */
  p++;    /* skip command code */
   19fbe:	9b05      	ldr	r3, [sp, #20]
   19fc0:	3301      	adds	r3, #1
   19fc2:	9305      	str	r3, [sp, #20]
  p++;    /* skip IO capabilities */
   19fc4:	9b05      	ldr	r3, [sp, #20]
   19fc6:	3301      	adds	r3, #1
   19fc8:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(pairInd.oob, p);
   19fca:	9b05      	ldr	r3, [sp, #20]
   19fcc:	1c5a      	adds	r2, r3, #1
   19fce:	9205      	str	r2, [sp, #20]
   19fd0:	781b      	ldrb	r3, [r3, #0]
   19fd2:	f88d 3011 	strb.w	r3, [sp, #17]
  BSTREAM_TO_UINT8(pairInd.auth, p);
   19fd6:	9b05      	ldr	r3, [sp, #20]
   19fd8:	1c5a      	adds	r2, r3, #1
   19fda:	9205      	str	r2, [sp, #20]
   19fdc:	781b      	ldrb	r3, [r3, #0]
   19fde:	f88d 3010 	strb.w	r3, [sp, #16]
  p++;    /* skip max key len */
   19fe2:	9b05      	ldr	r3, [sp, #20]
   19fe4:	3301      	adds	r3, #1
   19fe6:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   19fe8:	9b05      	ldr	r3, [sp, #20]
   19fea:	1c5a      	adds	r2, r3, #1
   19fec:	9205      	str	r2, [sp, #20]
   19fee:	781b      	ldrb	r3, [r3, #0]
   19ff0:	f88d 3012 	strb.w	r3, [sp, #18]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   19ff4:	9b05      	ldr	r3, [sp, #20]
   19ff6:	1c5a      	adds	r2, r3, #1
   19ff8:	9205      	str	r2, [sp, #20]
   19ffa:	781b      	ldrb	r3, [r3, #0]
   19ffc:	f88d 3013 	strb.w	r3, [sp, #19]

  /* call app callback */
  pairInd.hdr.param = pCcb->connId;
   1a000:	9b01      	ldr	r3, [sp, #4]
   1a002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1a006:	b29b      	uxth	r3, r3
   1a008:	f8ad 300c 	strh.w	r3, [sp, #12]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   1a00c:	2331      	movs	r3, #49	; 0x31
   1a00e:	f88d 300e 	strb.w	r3, [sp, #14]
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   1a012:	ab03      	add	r3, sp, #12
   1a014:	4618      	mov	r0, r3
   1a016:	f7fd f817 	bl	17048 <DmSmpCbackExec>
}
   1a01a:	b007      	add	sp, #28
   1a01c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a020:	0002ba7c 	.word	0x0002ba7c

0001a024 <smprActSendPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a024:	b500      	push	{lr}
   1a026:	b087      	sub	sp, #28
   1a028:	9001      	str	r0, [sp, #4]
   1a02a:	9100      	str	r1, [sp, #0]
  uint8_t   *p;
  uint8_t   oob;
  uint8_t   display;

  /* build packet to pairing response buffer in ccb */
  p = pCcb->pairRsp;
   1a02c:	9b01      	ldr	r3, [sp, #4]
   1a02e:	3327      	adds	r3, #39	; 0x27
   1a030:	9305      	str	r3, [sp, #20]
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
   1a032:	9b05      	ldr	r3, [sp, #20]
   1a034:	1c5a      	adds	r2, r3, #1
   1a036:	9205      	str	r2, [sp, #20]
   1a038:	2202      	movs	r2, #2
   1a03a:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1a03c:	4b34      	ldr	r3, [pc, #208]	; (1a110 <smprActSendPairRsp+0xec>)
   1a03e:	681a      	ldr	r2, [r3, #0]
   1a040:	9b05      	ldr	r3, [sp, #20]
   1a042:	1c59      	adds	r1, r3, #1
   1a044:	9105      	str	r1, [sp, #20]
   1a046:	7912      	ldrb	r2, [r2, #4]
   1a048:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
   1a04a:	9b05      	ldr	r3, [sp, #20]
   1a04c:	1c5a      	adds	r2, r3, #1
   1a04e:	9205      	str	r2, [sp, #20]
   1a050:	9a00      	ldr	r2, [sp, #0]
   1a052:	7912      	ldrb	r2, [r2, #4]
   1a054:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
   1a056:	9b05      	ldr	r3, [sp, #20]
   1a058:	1c5a      	adds	r2, r3, #1
   1a05a:	9205      	str	r2, [sp, #20]
   1a05c:	9a00      	ldr	r2, [sp, #0]
   1a05e:	7952      	ldrb	r2, [r2, #5]
   1a060:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
   1a062:	4b2b      	ldr	r3, [pc, #172]	; (1a110 <smprActSendPairRsp+0xec>)
   1a064:	681a      	ldr	r2, [r3, #0]
   1a066:	9b05      	ldr	r3, [sp, #20]
   1a068:	1c59      	adds	r1, r3, #1
   1a06a:	9105      	str	r1, [sp, #20]
   1a06c:	7992      	ldrb	r2, [r2, #6]
   1a06e:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
   1a070:	9b05      	ldr	r3, [sp, #20]
   1a072:	1c5a      	adds	r2, r3, #1
   1a074:	9205      	str	r2, [sp, #20]
   1a076:	9a00      	ldr	r2, [sp, #0]
   1a078:	7992      	ldrb	r2, [r2, #6]
   1a07a:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   1a07c:	9b05      	ldr	r3, [sp, #20]
   1a07e:	1c5a      	adds	r2, r3, #1
   1a080:	9205      	str	r2, [sp, #20]
   1a082:	9a00      	ldr	r2, [sp, #0]
   1a084:	79d2      	ldrb	r2, [r2, #7]
   1a086:	701a      	strb	r2, [r3, #0]

  /* process pairing request and response data */
  if (smpCb.procPairing(pCcb, &oob, &display))
   1a088:	4b22      	ldr	r3, [pc, #136]	; (1a114 <smprActSendPairRsp+0xf0>)
   1a08a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   1a08e:	f10d 020e 	add.w	r2, sp, #14
   1a092:	f10d 010f 	add.w	r1, sp, #15
   1a096:	9801      	ldr	r0, [sp, #4]
   1a098:	4798      	blx	r3
   1a09a:	4603      	mov	r3, r0
   1a09c:	2b00      	cmp	r3, #0
   1a09e:	d033      	beq.n	1a108 <smprActSendPairRsp+0xe4>
  {
    /* set next expected packet */
    if ((pCcb->pairReq[SMP_AUTHREQ_POS] & pMsg->dm.pair.auth & SMP_AUTH_SC_FLAG) == SMP_AUTH_SC_FLAG)
   1a0a0:	9b01      	ldr	r3, [sp, #4]
   1a0a2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1a0a6:	9b00      	ldr	r3, [sp, #0]
   1a0a8:	795b      	ldrb	r3, [r3, #5]
   1a0aa:	4013      	ands	r3, r2
   1a0ac:	b2db      	uxtb	r3, r3
   1a0ae:	f003 0308 	and.w	r3, r3, #8
   1a0b2:	2b00      	cmp	r3, #0
   1a0b4:	d004      	beq.n	1a0c0 <smprActSendPairRsp+0x9c>
    {
      pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
   1a0b6:	9b01      	ldr	r3, [sp, #4]
   1a0b8:	220c      	movs	r2, #12
   1a0ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1a0be:	e003      	b.n	1a0c8 <smprActSendPairRsp+0xa4>
    }
    else
    {
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1a0c0:	9b01      	ldr	r3, [sp, #4]
   1a0c2:	2203      	movs	r2, #3
   1a0c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    /* start smp response timer */
    smpStartRspTimer(pCcb);
   1a0c8:	9801      	ldr	r0, [sp, #4]
   1a0ca:	f000 fd29 	bl	1ab20 <smpStartRspTimer>

    /* send pairing response; allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_PAIR_RSP_LEN + L2C_PAYLOAD_START)) != NULL)
   1a0ce:	200f      	movs	r0, #15
   1a0d0:	f002 f927 	bl	1c322 <smpMsgAlloc>
   1a0d4:	9004      	str	r0, [sp, #16]
   1a0d6:	9b04      	ldr	r3, [sp, #16]
   1a0d8:	2b00      	cmp	r3, #0
   1a0da:	d00c      	beq.n	1a0f6 <smprActSendPairRsp+0xd2>
    {
      /* build packet from pairing response buffer */
      memcpy(pPkt + L2C_PAYLOAD_START, pCcb->pairRsp, SMP_PAIR_RSP_LEN);
   1a0dc:	9b04      	ldr	r3, [sp, #16]
   1a0de:	f103 0008 	add.w	r0, r3, #8
   1a0e2:	9b01      	ldr	r3, [sp, #4]
   1a0e4:	3327      	adds	r3, #39	; 0x27
   1a0e6:	2207      	movs	r2, #7
   1a0e8:	4619      	mov	r1, r3
   1a0ea:	f7f2 f809 	bl	c100 <memcpy>

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   1a0ee:	9904      	ldr	r1, [sp, #16]
   1a0f0:	9801      	ldr	r0, [sp, #4]
   1a0f2:	f002 f8d5 	bl	1c2a0 <smpSendPkt>
    }

    /* request authentication data */
    smpCb.procAuthReq(pCcb, oob, display);
   1a0f6:	4b07      	ldr	r3, [pc, #28]	; (1a114 <smprActSendPairRsp+0xf0>)
   1a0f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   1a0fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1a100:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1a104:	9801      	ldr	r0, [sp, #4]
   1a106:	4798      	blx	r3
  }
}
   1a108:	bf00      	nop
   1a10a:	b007      	add	sp, #28
   1a10c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a110:	10002bd0 	.word	0x10002bd0
   1a114:	100095f8 	.word	0x100095f8

0001a118 <smprActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a118:	b500      	push	{lr}
   1a11a:	b085      	sub	sp, #20
   1a11c:	9001      	str	r0, [sp, #4]
   1a11e:	9100      	str	r1, [sp, #0]
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a120:	9b00      	ldr	r3, [sp, #0]
   1a122:	685b      	ldr	r3, [r3, #4]
   1a124:	3309      	adds	r3, #9
   1a126:	9303      	str	r3, [sp, #12]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   1a128:	9b01      	ldr	r3, [sp, #4]
   1a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a12c:	3320      	adds	r3, #32
   1a12e:	2210      	movs	r2, #16
   1a130:	9903      	ldr	r1, [sp, #12]
   1a132:	4618      	mov	r0, r3
   1a134:	f7f1 ffe4 	bl	c100 <memcpy>

  /* discard any packets received erroneously at this point */
  pCcb->nextCmdCode = 0;
   1a138:	9b01      	ldr	r3, [sp, #4]
   1a13a:	2200      	movs	r2, #0
   1a13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   1a140:	bf00      	nop
   1a142:	b005      	add	sp, #20
   1a144:	f85d fb04 	ldr.w	pc, [sp], #4

0001a148 <smprActProcPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a148:	b500      	push	{lr}
   1a14a:	b083      	sub	sp, #12
   1a14c:	9001      	str	r0, [sp, #4]
   1a14e:	9100      	str	r1, [sp, #0]
  smprActProcPairCnf(pCcb, pMsg);
   1a150:	9900      	ldr	r1, [sp, #0]
   1a152:	9801      	ldr	r0, [sp, #4]
   1a154:	f7ff ffe0 	bl	1a118 <smprActProcPairCnf>

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a158:	9b01      	ldr	r3, [sp, #4]
   1a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a15c:	3330      	adds	r3, #48	; 0x30
   1a15e:	2110      	movs	r1, #16
   1a160:	4618      	mov	r0, r3
   1a162:	f7ff fe5b 	bl	19e1c <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1a166:	9b01      	ldr	r3, [sp, #4]
   1a168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a16a:	4619      	mov	r1, r3
   1a16c:	9b01      	ldr	r3, [sp, #4]
   1a16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a170:	3330      	adds	r3, #48	; 0x30
   1a172:	461a      	mov	r2, r3
   1a174:	9801      	ldr	r0, [sp, #4]
   1a176:	f001 fe3b 	bl	1bdf0 <smpCalcC1Part1>
}
   1a17a:	bf00      	nop
   1a17c:	b003      	add	sp, #12
   1a17e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001a184 <smprActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a184:	b500      	push	{lr}
   1a186:	b083      	sub	sp, #12
   1a188:	9001      	str	r0, [sp, #4]
   1a18a:	9100      	str	r1, [sp, #0]
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   1a18c:	9b00      	ldr	r3, [sp, #0]
   1a18e:	6858      	ldr	r0, [r3, #4]
   1a190:	9b01      	ldr	r3, [sp, #4]
   1a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a194:	3320      	adds	r3, #32
   1a196:	2210      	movs	r2, #16
   1a198:	4619      	mov	r1, r3
   1a19a:	f00e f91f 	bl	283dc <memcmp>
   1a19e:	4603      	mov	r3, r0
   1a1a0:	2b00      	cmp	r3, #0
   1a1a2:	d024      	beq.n	1a1ee <smprActCnfVerify+0x6a>
  {
    /* confirm values don't match; update repeated attempts count */
    pCcb->attempts++;
   1a1a4:	9b01      	ldr	r3, [sp, #4]
   1a1a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1a1aa:	3301      	adds	r3, #1
   1a1ac:	b2da      	uxtb	r2, r3
   1a1ae:	9b01      	ldr	r3, [sp, #4]
   1a1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   1a1b4:	9b01      	ldr	r3, [sp, #4]
   1a1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1a1ba:	4618      	mov	r0, r3
   1a1bc:	f001 fbe8 	bl	1b990 <SmpDbPairingFailed>
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   1a1c0:	9b00      	ldr	r3, [sp, #0]
   1a1c2:	2204      	movs	r2, #4
   1a1c4:	70da      	strb	r2, [r3, #3]

    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1a1c6:	9b01      	ldr	r3, [sp, #4]
   1a1c8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   1a1cc:	4b10      	ldr	r3, [pc, #64]	; (1a210 <smprActCnfVerify+0x8c>)
   1a1ce:	681b      	ldr	r3, [r3, #0]
   1a1d0:	79db      	ldrb	r3, [r3, #7]
   1a1d2:	429a      	cmp	r2, r3
   1a1d4:	d103      	bne.n	1a1de <smprActCnfVerify+0x5a>
    {
      /* max attempts reached */
      pMsg->hdr.event = SMP_MSG_INT_MAX_ATTEMPTS;
   1a1d6:	9b00      	ldr	r3, [sp, #0]
   1a1d8:	220d      	movs	r2, #13
   1a1da:	709a      	strb	r2, [r3, #2]
   1a1dc:	e002      	b.n	1a1e4 <smprActCnfVerify+0x60>
    }
    else
    {
      /* else just fail */
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a1de:	9b00      	ldr	r3, [sp, #0]
   1a1e0:	2203      	movs	r2, #3
   1a1e2:	709a      	strb	r2, [r3, #2]
    }

    smpSmExecute(pCcb, pMsg);
   1a1e4:	9900      	ldr	r1, [sp, #0]
   1a1e6:	9801      	ldr	r0, [sp, #4]
   1a1e8:	f001 f9dc 	bl	1b5a4 <smpSmExecute>
    return;
   1a1ec:	e00c      	b.n	1a208 <smprActCnfVerify+0x84>
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   1a1ee:	9b01      	ldr	r3, [sp, #4]
   1a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a1f2:	4619      	mov	r1, r3
   1a1f4:	9b01      	ldr	r3, [sp, #4]
   1a1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a1f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1a1fc:	9b01      	ldr	r3, [sp, #4]
   1a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a200:	3310      	adds	r3, #16
   1a202:	9801      	ldr	r0, [sp, #4]
   1a204:	f001 ffc0 	bl	1c188 <smpCalcS1>
}
   1a208:	b003      	add	sp, #12
   1a20a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a20e:	bf00      	nop
   1a210:	10002bd0 	.word	0x10002bd0

0001a214 <smprActSendPairRandom>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRandom(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a214:	b500      	push	{lr}
   1a216:	b087      	sub	sp, #28
   1a218:	9001      	str	r0, [sp, #4]
   1a21a:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;
  uint8_t   encKeyLen;

  /* get max STK length */
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a21c:	9b01      	ldr	r3, [sp, #4]
   1a21e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1a222:	9b01      	ldr	r3, [sp, #4]
   1a224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a228:	4293      	cmp	r3, r2
   1a22a:	bf28      	it	cs
   1a22c:	4613      	movcs	r3, r2
   1a22e:	f88d 3017 	strb.w	r3, [sp, #23]
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* store STK and adjust based on max key length */
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   1a232:	9b01      	ldr	r3, [sp, #4]
   1a234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a236:	f103 0020 	add.w	r0, r3, #32
   1a23a:	9b00      	ldr	r3, [sp, #0]
   1a23c:	685b      	ldr	r3, [r3, #4]
   1a23e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1a242:	4619      	mov	r1, r3
   1a244:	f7f1 ff5c 	bl	c100 <memcpy>
  memset((pCcb->pScr->buf.b3 + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1a248:	9b01      	ldr	r3, [sp, #4]
   1a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a24c:	f103 0220 	add.w	r2, r3, #32
   1a250:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a254:	18d0      	adds	r0, r2, r3
   1a256:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a25a:	f1c3 0310 	rsb	r3, r3, #16
   1a25e:	461a      	mov	r2, r3
   1a260:	2100      	movs	r1, #0
   1a262:	f00e f8eb 	bl	2843c <memset>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1a266:	9801      	ldr	r0, [sp, #4]
   1a268:	f000 fc5a 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   1a26c:	2019      	movs	r0, #25
   1a26e:	f002 f858 	bl	1c322 <smpMsgAlloc>
   1a272:	9004      	str	r0, [sp, #16]
   1a274:	9b04      	ldr	r3, [sp, #16]
   1a276:	2b00      	cmp	r3, #0
   1a278:	d013      	beq.n	1a2a2 <smprActSendPairRandom+0x8e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1a27a:	9b04      	ldr	r3, [sp, #16]
   1a27c:	3308      	adds	r3, #8
   1a27e:	9303      	str	r3, [sp, #12]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   1a280:	9b03      	ldr	r3, [sp, #12]
   1a282:	1c5a      	adds	r2, r3, #1
   1a284:	9203      	str	r2, [sp, #12]
   1a286:	2204      	movs	r2, #4
   1a288:	701a      	strb	r2, [r3, #0]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a28a:	9b01      	ldr	r3, [sp, #4]
   1a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a28e:	3330      	adds	r3, #48	; 0x30
   1a290:	2210      	movs	r2, #16
   1a292:	4619      	mov	r1, r3
   1a294:	9803      	ldr	r0, [sp, #12]
   1a296:	f7f1 ff33 	bl	c100 <memcpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1a29a:	9904      	ldr	r1, [sp, #16]
   1a29c:	9801      	ldr	r0, [sp, #4]
   1a29e:	f001 ffff 	bl	1c2a0 <smpSendPkt>
  }
}
   1a2a2:	bf00      	nop
   1a2a4:	b007      	add	sp, #28
   1a2a6:	f85d fb04 	ldr.w	pc, [sp], #4

0001a2aa <smprActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a2aa:	b500      	push	{lr}
   1a2ac:	b083      	sub	sp, #12
   1a2ae:	9001      	str	r0, [sp, #4]
   1a2b0:	9100      	str	r1, [sp, #0]
  /* don't receive anything yet */
  pCcb->nextCmdCode = 0;
   1a2b2:	9b01      	ldr	r3, [sp, #4]
   1a2b4:	2200      	movs	r2, #0
   1a2b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
   1a2ba:	9801      	ldr	r0, [sp, #4]
   1a2bc:	f000 fc30 	bl	1ab20 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
   1a2c0:	9b01      	ldr	r3, [sp, #4]
   1a2c2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   1a2c6:	9b01      	ldr	r3, [sp, #4]
   1a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a2ca:	b292      	uxth	r2, r2
   1a2cc:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
   1a2ce:	9b01      	ldr	r3, [sp, #4]
   1a2d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1a2d4:	f003 0304 	and.w	r3, r3, #4
   1a2d8:	2b00      	cmp	r3, #0
   1a2da:	d001      	beq.n	1a2e0 <smprActSetupKeyDist+0x36>
   1a2dc:	2202      	movs	r2, #2
   1a2de:	e000      	b.n	1a2e2 <smprActSetupKeyDist+0x38>
   1a2e0:	2201      	movs	r2, #1
   1a2e2:	9b01      	ldr	r3, [sp, #4]
   1a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a2e6:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a2e8:	9b01      	ldr	r3, [sp, #4]
   1a2ea:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
   1a2ee:	9b01      	ldr	r3, [sp, #4]
   1a2f0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
  pCcb->pScr->keyInd.encKeyLen =
   1a2f4:	9b01      	ldr	r3, [sp, #4]
   1a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
   1a2f8:	428a      	cmp	r2, r1
   1a2fa:	bf28      	it	cs
   1a2fc:	460a      	movcs	r2, r1
   1a2fe:	b2d2      	uxtb	r2, r2
  pCcb->pScr->keyInd.encKeyLen =
   1a300:	f883 2020 	strb.w	r2, [r3, #32]

  /* start key distribution */
  smprActSendKey(pCcb, pMsg);
   1a304:	9900      	ldr	r1, [sp, #0]
   1a306:	9801      	ldr	r0, [sp, #4]
   1a308:	f000 f804 	bl	1a314 <smprActSendKey>
}
   1a30c:	bf00      	nop
   1a30e:	b003      	add	sp, #12
   1a310:	f85d fb04 	ldr.w	pc, [sp], #4

0001a314 <smprActSendKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a314:	b500      	push	{lr}
   1a316:	b085      	sub	sp, #20
   1a318:	9001      	str	r0, [sp, #4]
   1a31a:	9100      	str	r1, [sp, #0]
  uint8_t     keyDist;

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   1a31c:	9b01      	ldr	r3, [sp, #4]
   1a31e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   1a322:	9b01      	ldr	r3, [sp, #4]
   1a324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1a328:	4013      	ands	r3, r2
   1a32a:	f88d 300f 	strb.w	r3, [sp, #15]

  /* send next key; if done sending keys set up to receive keys */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a32e:	9b01      	ldr	r3, [sp, #4]
   1a330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1a334:	2b00      	cmp	r3, #0
   1a336:	d156      	bne.n	1a3e6 <smprActSendKey+0xd2>
   1a338:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a33c:	4619      	mov	r1, r3
   1a33e:	9801      	ldr	r0, [sp, #4]
   1a340:	f000 fe7e 	bl	1b040 <smpSendKey>
   1a344:	4603      	mov	r3, r0
   1a346:	2b00      	cmp	r3, #0
   1a348:	d04d      	beq.n	1a3e6 <smprActSendKey+0xd2>
  {
    pCcb->nextCmdCode = 0;
   1a34a:	9b01      	ldr	r3, [sp, #4]
   1a34c:	2200      	movs	r2, #0
   1a34e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

    /* get initiator key distribution */
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a352:	9b01      	ldr	r3, [sp, #4]
   1a354:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   1a358:	9b01      	ldr	r3, [sp, #4]
   1a35a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1a35e:	4013      	ands	r3, r2
   1a360:	f88d 300f 	strb.w	r3, [sp, #15]

    /* set up to receive first key distribution packet */
    if (keyDist & SMP_KEY_DIST_ENC)
   1a364:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a368:	f003 0301 	and.w	r3, r3, #1
   1a36c:	2b00      	cmp	r3, #0
   1a36e:	d019      	beq.n	1a3a4 <smprActSendKey+0x90>
    {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   1a370:	4b1f      	ldr	r3, [pc, #124]	; (1a3f0 <smprActSendKey+0xdc>)
   1a372:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   1a376:	2b00      	cmp	r3, #0
   1a378:	d00f      	beq.n	1a39a <smprActSendKey+0x86>
   1a37a:	9b01      	ldr	r3, [sp, #4]
   1a37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a37e:	781b      	ldrb	r3, [r3, #0]
   1a380:	2b00      	cmp	r3, #0
   1a382:	d00a      	beq.n	1a39a <smprActSendKey+0x86>
      {
        if (keyDist & SMP_KEY_DIST_ID)
   1a384:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a388:	f003 0302 	and.w	r3, r3, #2
   1a38c:	2b00      	cmp	r3, #0
   1a38e:	d01e      	beq.n	1a3ce <smprActSendKey+0xba>
        {
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1a390:	9b01      	ldr	r3, [sp, #4]
   1a392:	2208      	movs	r2, #8
   1a394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (keyDist & SMP_KEY_DIST_ID)
   1a398:	e019      	b.n	1a3ce <smprActSendKey+0xba>
        }
      }
      else
      {
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   1a39a:	9b01      	ldr	r3, [sp, #4]
   1a39c:	2206      	movs	r2, #6
   1a39e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1a3a2:	e014      	b.n	1a3ce <smprActSendKey+0xba>
      }
    }
    else if (keyDist & SMP_KEY_DIST_ID)
   1a3a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a3a8:	f003 0302 	and.w	r3, r3, #2
   1a3ac:	2b00      	cmp	r3, #0
   1a3ae:	d004      	beq.n	1a3ba <smprActSendKey+0xa6>
    {
      pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1a3b0:	9b01      	ldr	r3, [sp, #4]
   1a3b2:	2208      	movs	r2, #8
   1a3b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1a3b8:	e009      	b.n	1a3ce <smprActSendKey+0xba>
    }
    else if (keyDist & SMP_KEY_DIST_SIGN)
   1a3ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a3be:	f003 0304 	and.w	r3, r3, #4
   1a3c2:	2b00      	cmp	r3, #0
   1a3c4:	d003      	beq.n	1a3ce <smprActSendKey+0xba>
    {
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1a3c6:	9b01      	ldr	r3, [sp, #4]
   1a3c8:	220a      	movs	r2, #10
   1a3ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    if (pCcb->nextCmdCode == 0)
   1a3ce:	9b01      	ldr	r3, [sp, #4]
   1a3d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1a3d4:	2b00      	cmp	r3, #0
   1a3d6:	d106      	bne.n	1a3e6 <smprActSendKey+0xd2>
    {
      /* no keys to receive; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1a3d8:	9b00      	ldr	r3, [sp, #0]
   1a3da:	220e      	movs	r2, #14
   1a3dc:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
   1a3de:	9900      	ldr	r1, [sp, #0]
   1a3e0:	9801      	ldr	r0, [sp, #4]
   1a3e2:	f001 f8df 	bl	1b5a4 <smpSmExecute>
    }
  }
}
   1a3e6:	bf00      	nop
   1a3e8:	b005      	add	sp, #20
   1a3ea:	f85d fb04 	ldr.w	pc, [sp], #4
   1a3ee:	bf00      	nop
   1a3f0:	100095f8 	.word	0x100095f8

0001a3f4 <smprActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a3f4:	b500      	push	{lr}
   1a3f6:	b085      	sub	sp, #20
   1a3f8:	9001      	str	r0, [sp, #4]
   1a3fa:	9100      	str	r1, [sp, #0]
  uint8_t   keyDist;

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a3fc:	9b01      	ldr	r3, [sp, #4]
   1a3fe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   1a402:	9b01      	ldr	r3, [sp, #4]
   1a404:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1a408:	4013      	ands	r3, r2
   1a40a:	f88d 300f 	strb.w	r3, [sp, #15]

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1a40e:	9b01      	ldr	r3, [sp, #4]
   1a410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a412:	4619      	mov	r1, r3
   1a414:	9b00      	ldr	r3, [sp, #0]
   1a416:	685a      	ldr	r2, [r3, #4]
   1a418:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a41c:	9801      	ldr	r0, [sp, #4]
   1a41e:	f000 ff65 	bl	1b2ec <smpProcRcvKey>
   1a422:	4603      	mov	r3, r0
   1a424:	2b00      	cmp	r3, #0
   1a426:	d006      	beq.n	1a436 <smprActRcvKey+0x42>
  {
    /* no more keys to receive; send ourselves pairing complete msg */
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1a428:	9b00      	ldr	r3, [sp, #0]
   1a42a:	220e      	movs	r2, #14
   1a42c:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1a42e:	9900      	ldr	r1, [sp, #0]
   1a430:	9801      	ldr	r0, [sp, #4]
   1a432:	f001 f8b7 	bl	1b5a4 <smpSmExecute>
  }
}
   1a436:	bf00      	nop
   1a438:	b005      	add	sp, #20
   1a43a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001a440 <smprScActStoreLescPin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActStoreLescPin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a440:	b500      	push	{lr}
   1a442:	b083      	sub	sp, #12
   1a444:	9001      	str	r0, [sp, #4]
   1a446:	9100      	str	r1, [sp, #0]
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1a448:	9b01      	ldr	r3, [sp, #4]
   1a44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a44c:	785b      	ldrb	r3, [r3, #1]
   1a44e:	2b03      	cmp	r3, #3
   1a450:	d12d      	bne.n	1a4ae <smprScActStoreLescPin+0x6e>
  {
    /* Store the pin */
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1a452:	9b01      	ldr	r3, [sp, #4]
   1a454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a456:	695b      	ldr	r3, [r3, #20]
   1a458:	3320      	adds	r3, #32
   1a45a:	4917      	ldr	r1, [pc, #92]	; (1a4b8 <smprScActStoreLescPin+0x78>)
   1a45c:	4618      	mov	r0, r3
   1a45e:	f7fa f869 	bl	14534 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   1a462:	9b01      	ldr	r3, [sp, #4]
   1a464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a466:	695b      	ldr	r3, [r3, #20]
   1a468:	3330      	adds	r3, #48	; 0x30
   1a46a:	4913      	ldr	r1, [pc, #76]	; (1a4b8 <smprScActStoreLescPin+0x78>)
   1a46c:	4618      	mov	r0, r3
   1a46e:	f7fa f861 	bl	14534 <Calc128Cpy>

    if (pMsg->dm.authRsp.authDataLen <= 3)
   1a472:	9b00      	ldr	r3, [sp, #0]
   1a474:	7d1b      	ldrb	r3, [r3, #20]
   1a476:	2b03      	cmp	r3, #3
   1a478:	d819      	bhi.n	1a4ae <smprScActStoreLescPin+0x6e>
    {
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a47a:	9b01      	ldr	r3, [sp, #4]
   1a47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a47e:	695b      	ldr	r3, [r3, #20]
   1a480:	f103 002d 	add.w	r0, r3, #45	; 0x2d
   1a484:	9b00      	ldr	r3, [sp, #0]
   1a486:	1d19      	adds	r1, r3, #4
   1a488:	9b00      	ldr	r3, [sp, #0]
   1a48a:	7d1b      	ldrb	r3, [r3, #20]
   1a48c:	b29b      	uxth	r3, r3
   1a48e:	461a      	mov	r2, r3
   1a490:	f7fa f889 	bl	145a6 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a494:	9b01      	ldr	r3, [sp, #4]
   1a496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a498:	695b      	ldr	r3, [r3, #20]
   1a49a:	f103 003d 	add.w	r0, r3, #61	; 0x3d
   1a49e:	9b00      	ldr	r3, [sp, #0]
   1a4a0:	1d19      	adds	r1, r3, #4
   1a4a2:	9b00      	ldr	r3, [sp, #0]
   1a4a4:	7d1b      	ldrb	r3, [r3, #20]
   1a4a6:	b29b      	uxth	r3, r3
   1a4a8:	461a      	mov	r2, r3
   1a4aa:	f7fa f87c 	bl	145a6 <WStrReverseCpy>
    }
  }
}
   1a4ae:	bf00      	nop
   1a4b0:	b003      	add	sp, #12
   1a4b2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a4b6:	bf00      	nop
   1a4b8:	0002c240 	.word	0x0002c240

0001a4bc <smprScActSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a4bc:	b500      	push	{lr}
   1a4be:	b083      	sub	sp, #12
   1a4c0:	9001      	str	r0, [sp, #4]
   1a4c2:	9100      	str	r1, [sp, #0]
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
   1a4c4:	9900      	ldr	r1, [sp, #0]
   1a4c6:	9801      	ldr	r0, [sp, #4]
   1a4c8:	f002 fbc0 	bl	1cc4c <smpScActAuthSelect>

  /* Send our public key */
  smpScSendPubKey(pCcb, pMsg);
   1a4cc:	9900      	ldr	r1, [sp, #0]
   1a4ce:	9801      	ldr	r0, [sp, #4]
   1a4d0:	f003 f960 	bl	1d794 <smpScSendPubKey>
}
   1a4d4:	bf00      	nop
   1a4d6:	b003      	add	sp, #12
   1a4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0001a4dc <smprScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a4dc:	b500      	push	{lr}
   1a4de:	b083      	sub	sp, #12
   1a4e0:	9001      	str	r0, [sp, #4]
   1a4e2:	9100      	str	r1, [sp, #0]
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1a4e4:	9b01      	ldr	r3, [sp, #4]
   1a4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a4e8:	695b      	ldr	r3, [r3, #20]
   1a4ea:	3310      	adds	r3, #16
   1a4ec:	2110      	movs	r1, #16
   1a4ee:	4618      	mov	r0, r3
   1a4f0:	f7ff fc94 	bl	19e1c <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1a4f4:	9b01      	ldr	r3, [sp, #4]
   1a4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a4f8:	695b      	ldr	r3, [r3, #20]
   1a4fa:	3310      	adds	r3, #16
   1a4fc:	2210      	movs	r2, #16
   1a4fe:	4619      	mov	r1, r3
   1a500:	480f      	ldr	r0, [pc, #60]	; (1a540 <smprScActJwncSetup+0x64>)
   1a502:	f003 fab1 	bl	1da68 <smpLogByteArray>

  /* Set Ra and Rb to zero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   1a506:	9b01      	ldr	r3, [sp, #4]
   1a508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a50a:	695b      	ldr	r3, [r3, #20]
   1a50c:	3320      	adds	r3, #32
   1a50e:	490d      	ldr	r1, [pc, #52]	; (1a544 <smprScActJwncSetup+0x68>)
   1a510:	4618      	mov	r0, r3
   1a512:	f7fa f80f 	bl	14534 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   1a516:	9b01      	ldr	r3, [sp, #4]
   1a518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a51a:	695b      	ldr	r3, [r3, #20]
   1a51c:	3330      	adds	r3, #48	; 0x30
   1a51e:	4909      	ldr	r1, [pc, #36]	; (1a544 <smprScActJwncSetup+0x68>)
   1a520:	4618      	mov	r0, r3
   1a522:	f7fa f807 	bl	14534 <Calc128Cpy>

  /* Next command is a Pair Rand from Initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a526:	9b01      	ldr	r3, [sp, #4]
   1a528:	2204      	movs	r2, #4
   1a52a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Perform F4 Calculation of Cb */
  smpScActJwncCalcF4(pCcb, pMsg);
   1a52e:	9900      	ldr	r1, [sp, #0]
   1a530:	9801      	ldr	r0, [sp, #4]
   1a532:	f002 fc01 	bl	1cd38 <smpScActJwncCalcF4>
}
   1a536:	bf00      	nop
   1a538:	b003      	add	sp, #12
   1a53a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a53e:	bf00      	nop
   1a540:	0002ba94 	.word	0x0002ba94
   1a544:	0002c240 	.word	0x0002c240

0001a548 <smprScActJwncSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a548:	b500      	push	{lr}
   1a54a:	b083      	sub	sp, #12
   1a54c:	9001      	str	r0, [sp, #4]
   1a54e:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("JWNC Confirm", pMsg->aes.pCiphertext);
   1a550:	9b00      	ldr	r3, [sp, #0]
   1a552:	685b      	ldr	r3, [r3, #4]
   1a554:	2210      	movs	r2, #16
   1a556:	4619      	mov	r1, r3
   1a558:	4806      	ldr	r0, [pc, #24]	; (1a574 <smprScActJwncSendCnf+0x2c>)
   1a55a:	f003 fa85 	bl	1da68 <smpLogByteArray>

  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1a55e:	9b00      	ldr	r3, [sp, #0]
   1a560:	685b      	ldr	r3, [r3, #4]
   1a562:	461a      	mov	r2, r3
   1a564:	9900      	ldr	r1, [sp, #0]
   1a566:	9801      	ldr	r0, [sp, #4]
   1a568:	f003 f9c6 	bl	1d8f8 <smpScSendPairCnf>
}
   1a56c:	bf00      	nop
   1a56e:	b003      	add	sp, #12
   1a570:	f85d fb04 	ldr.w	pc, [sp], #4
   1a574:	0002ba9c 	.word	0x0002ba9c

0001a578 <smprScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a578:	b500      	push	{lr}
   1a57a:	b085      	sub	sp, #20
   1a57c:	9001      	str	r0, [sp, #4]
   1a57e:	9100      	str	r1, [sp, #0]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a580:	9b00      	ldr	r3, [sp, #0]
   1a582:	685b      	ldr	r3, [r3, #4]
   1a584:	3309      	adds	r3, #9
   1a586:	9303      	str	r3, [sp, #12]

  /* Na from initiator is in Random Cmd from initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1a588:	9b01      	ldr	r3, [sp, #4]
   1a58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a58c:	695b      	ldr	r3, [r3, #20]
   1a58e:	2210      	movs	r2, #16
   1a590:	9903      	ldr	r1, [sp, #12]
   1a592:	4618      	mov	r0, r3
   1a594:	f7fa f807 	bl	145a6 <WStrReverseCpy>

  /* Calculate Vb using G2 */
  smpScActJwncCalcG2(pCcb, pMsg);
   1a598:	9900      	ldr	r1, [sp, #0]
   1a59a:	9801      	ldr	r0, [sp, #4]
   1a59c:	f002 fc3a 	bl	1ce14 <smpScActJwncCalcG2>
}
   1a5a0:	bf00      	nop
   1a5a2:	b005      	add	sp, #20
   1a5a4:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5a8 <smprScActJwncDisplay>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a5a8:	b500      	push	{lr}
   1a5aa:	b083      	sub	sp, #12
   1a5ac:	9001      	str	r0, [sp, #4]
   1a5ae:	9100      	str	r1, [sp, #0]
  /* Next command is a DH Key Check  */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1a5b0:	9b01      	ldr	r3, [sp, #4]
   1a5b2:	220d      	movs	r2, #13
   1a5b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Send Pair Rand Nb to the Initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1a5b8:	9b01      	ldr	r3, [sp, #4]
   1a5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a5bc:	695b      	ldr	r3, [r3, #20]
   1a5be:	3310      	adds	r3, #16
   1a5c0:	461a      	mov	r2, r3
   1a5c2:	9900      	ldr	r1, [sp, #0]
   1a5c4:	9801      	ldr	r0, [sp, #4]
   1a5c6:	f003 f960 	bl	1d88a <smpScSendRand>

  /* Send Numeric Comparison to application, if applicable */
  smpScActJwncDisplay(pCcb, pMsg);
   1a5ca:	9900      	ldr	r1, [sp, #0]
   1a5cc:	9801      	ldr	r0, [sp, #4]
   1a5ce:	f002 fc73 	bl	1ceb8 <smpScActJwncDisplay>
}
   1a5d2:	bf00      	nop
   1a5d4:	b003      	add	sp, #12
   1a5d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5da <smprScActPkStoreCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a5da:	b500      	push	{lr}
   1a5dc:	b085      	sub	sp, #20
   1a5de:	9001      	str	r0, [sp, #4]
   1a5e0:	9100      	str	r1, [sp, #0]
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a5e2:	9b00      	ldr	r3, [sp, #0]
   1a5e4:	685b      	ldr	r3, [r3, #4]
   1a5e6:	3309      	adds	r3, #9
   1a5e8:	9303      	str	r3, [sp, #12]

  /* Store the Cai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1a5ea:	9b01      	ldr	r3, [sp, #4]
   1a5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a5ee:	695b      	ldr	r3, [r3, #20]
   1a5f0:	3350      	adds	r3, #80	; 0x50
   1a5f2:	2210      	movs	r2, #16
   1a5f4:	9903      	ldr	r1, [sp, #12]
   1a5f6:	4618      	mov	r0, r3
   1a5f8:	f7f9 ffd5 	bl	145a6 <WStrReverseCpy>
}
   1a5fc:	bf00      	nop
   1a5fe:	b005      	add	sp, #20
   1a600:	f85d fb04 	ldr.w	pc, [sp], #4

0001a604 <smprScActPkStoreCnfAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnfAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a604:	b500      	push	{lr}
   1a606:	b083      	sub	sp, #12
   1a608:	9001      	str	r0, [sp, #4]
   1a60a:	9100      	str	r1, [sp, #0]
  smprScActPkStoreCnf(pCcb, pMsg);
   1a60c:	9900      	ldr	r1, [sp, #0]
   1a60e:	9801      	ldr	r0, [sp, #4]
   1a610:	f7ff ffe3 	bl	1a5da <smprScActPkStoreCnf>
  smprScActPkCalcCb(pCcb, pMsg);
   1a614:	9900      	ldr	r1, [sp, #0]
   1a616:	9801      	ldr	r0, [sp, #4]
   1a618:	f000 f814 	bl	1a644 <smprScActPkCalcCb>
}
   1a61c:	bf00      	nop
   1a61e:	b003      	add	sp, #12
   1a620:	f85d fb04 	ldr.w	pc, [sp], #4

0001a624 <smprScActPkStorePinAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStorePinAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a624:	b500      	push	{lr}
   1a626:	b083      	sub	sp, #12
   1a628:	9001      	str	r0, [sp, #4]
   1a62a:	9100      	str	r1, [sp, #0]
  smprScActStoreLescPin(pCcb, pMsg);
   1a62c:	9900      	ldr	r1, [sp, #0]
   1a62e:	9801      	ldr	r0, [sp, #4]
   1a630:	f7ff ff06 	bl	1a440 <smprScActStoreLescPin>
  smprScActPkCalcCb(pCcb, pMsg);
   1a634:	9900      	ldr	r1, [sp, #0]
   1a636:	9801      	ldr	r0, [sp, #4]
   1a638:	f000 f804 	bl	1a644 <smprScActPkCalcCb>
}
   1a63c:	bf00      	nop
   1a63e:	b003      	add	sp, #12
   1a640:	f85d fb04 	ldr.w	pc, [sp], #4

0001a644 <smprScActPkCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a644:	b530      	push	{r4, r5, lr}
   1a646:	b085      	sub	sp, #20
   1a648:	9003      	str	r0, [sp, #12]
   1a64a:	9102      	str	r1, [sp, #8]
  /* Get random Nbi */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1a64c:	9b03      	ldr	r3, [sp, #12]
   1a64e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a650:	695b      	ldr	r3, [r3, #20]
   1a652:	3310      	adds	r3, #16
   1a654:	2110      	movs	r1, #16
   1a656:	4618      	mov	r0, r3
   1a658:	f7ff fbe0 	bl	19e1c <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1a65c:	9b03      	ldr	r3, [sp, #12]
   1a65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a660:	695b      	ldr	r3, [r3, #20]
   1a662:	3310      	adds	r3, #16
   1a664:	2210      	movs	r2, #16
   1a666:	4619      	mov	r1, r3
   1a668:	4811      	ldr	r0, [pc, #68]	; (1a6b0 <smprScActPkCalcCb+0x6c>)
   1a66a:	f003 f9fd 	bl	1da68 <smpLogByteArray>

  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a66e:	9b03      	ldr	r3, [sp, #12]
   1a670:	2204      	movs	r2, #4
   1a672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Cb = f4(PKbx, PKax, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a676:	9b03      	ldr	r3, [sp, #12]
   1a678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a67a:	68db      	ldr	r3, [r3, #12]
   1a67c:	461c      	mov	r4, r3
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a67e:	9b03      	ldr	r3, [sp, #12]
   1a680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a682:	689b      	ldr	r3, [r3, #8]
   1a684:	461d      	mov	r5, r3
  SmpScCalcF4(pCcb, pMsg,
   1a686:	9803      	ldr	r0, [sp, #12]
   1a688:	f003 f96d 	bl	1d966 <smpGetPkBit>
   1a68c:	4603      	mov	r3, r0
   1a68e:	461a      	mov	r2, r3
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1a690:	9b03      	ldr	r3, [sp, #12]
   1a692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a694:	695b      	ldr	r3, [r3, #20]
   1a696:	3310      	adds	r3, #16
  SmpScCalcF4(pCcb, pMsg,
   1a698:	9301      	str	r3, [sp, #4]
   1a69a:	9200      	str	r2, [sp, #0]
   1a69c:	462b      	mov	r3, r5
   1a69e:	4622      	mov	r2, r4
   1a6a0:	9902      	ldr	r1, [sp, #8]
   1a6a2:	9803      	ldr	r0, [sp, #12]
   1a6a4:	f002 ffec 	bl	1d680 <SmpScCalcF4>
}
   1a6a8:	bf00      	nop
   1a6aa:	b005      	add	sp, #20
   1a6ac:	bd30      	pop	{r4, r5, pc}
   1a6ae:	bf00      	nop
   1a6b0:	0002ba94 	.word	0x0002ba94

0001a6b4 <smprScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a6b4:	b500      	push	{lr}
   1a6b6:	b083      	sub	sp, #12
   1a6b8:	9001      	str	r0, [sp, #4]
   1a6ba:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
   1a6bc:	9b00      	ldr	r3, [sp, #0]
   1a6be:	685b      	ldr	r3, [r3, #4]
   1a6c0:	2210      	movs	r2, #16
   1a6c2:	4619      	mov	r1, r3
   1a6c4:	4806      	ldr	r0, [pc, #24]	; (1a6e0 <smprScActPkSendCnf+0x2c>)
   1a6c6:	f003 f9cf 	bl	1da68 <smpLogByteArray>

  /* Send the Cbi to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1a6ca:	9b00      	ldr	r3, [sp, #0]
   1a6cc:	685b      	ldr	r3, [r3, #4]
   1a6ce:	461a      	mov	r2, r3
   1a6d0:	9900      	ldr	r1, [sp, #0]
   1a6d2:	9801      	ldr	r0, [sp, #4]
   1a6d4:	f003 f910 	bl	1d8f8 <smpScSendPairCnf>
}
   1a6d8:	bf00      	nop
   1a6da:	b003      	add	sp, #12
   1a6dc:	f85d fb04 	ldr.w	pc, [sp], #4
   1a6e0:	0002baac 	.word	0x0002baac

0001a6e4 <smprScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a6e4:	b530      	push	{r4, r5, lr}
   1a6e6:	b087      	sub	sp, #28
   1a6e8:	9003      	str	r0, [sp, #12]
   1a6ea:	9102      	str	r1, [sp, #8]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a6ec:	9b02      	ldr	r3, [sp, #8]
   1a6ee:	685b      	ldr	r3, [r3, #4]
   1a6f0:	3309      	adds	r3, #9
   1a6f2:	9305      	str	r3, [sp, #20]

  /* Copy the Nai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1a6f4:	9b03      	ldr	r3, [sp, #12]
   1a6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a6f8:	695b      	ldr	r3, [r3, #20]
   1a6fa:	2210      	movs	r2, #16
   1a6fc:	9905      	ldr	r1, [sp, #20]
   1a6fe:	4618      	mov	r0, r3
   1a700:	f7f9 ff51 	bl	145a6 <WStrReverseCpy>

  /* Cai = f4(PKax, PKbx, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a704:	9b03      	ldr	r3, [sp, #12]
   1a706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a708:	689b      	ldr	r3, [r3, #8]
   1a70a:	461c      	mov	r4, r3
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a70c:	9b03      	ldr	r3, [sp, #12]
   1a70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a710:	68db      	ldr	r3, [r3, #12]
   1a712:	461d      	mov	r5, r3
  SmpScCalcF4(pCcb, pMsg,
   1a714:	9803      	ldr	r0, [sp, #12]
   1a716:	f003 f926 	bl	1d966 <smpGetPkBit>
   1a71a:	4603      	mov	r3, r0
   1a71c:	461a      	mov	r2, r3
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
   1a71e:	9b03      	ldr	r3, [sp, #12]
   1a720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a722:	695b      	ldr	r3, [r3, #20]
  SmpScCalcF4(pCcb, pMsg,
   1a724:	9301      	str	r3, [sp, #4]
   1a726:	9200      	str	r2, [sp, #0]
   1a728:	462b      	mov	r3, r5
   1a72a:	4622      	mov	r2, r4
   1a72c:	9902      	ldr	r1, [sp, #8]
   1a72e:	9803      	ldr	r0, [sp, #12]
   1a730:	f002 ffa6 	bl	1d680 <SmpScCalcF4>
}
   1a734:	bf00      	nop
   1a736:	b007      	add	sp, #28
   1a738:	bd30      	pop	{r4, r5, pc}
	...

0001a73c <smprScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a73c:	b500      	push	{lr}
   1a73e:	b085      	sub	sp, #20
   1a740:	9001      	str	r0, [sp, #4]
   1a742:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   1a744:	9b00      	ldr	r3, [sp, #0]
   1a746:	685b      	ldr	r3, [r3, #4]
   1a748:	2210      	movs	r2, #16
   1a74a:	4619      	mov	r1, r3
   1a74c:	4824      	ldr	r0, [pc, #144]	; (1a7e0 <smprScActPkSendRand+0xa4>)
   1a74e:	f003 f98b 	bl	1da68 <smpLogByteArray>
  SMP_TRACE_128("Ca Peer", pCcb->pScCcb->pScratch->PeerCa_Ea);
   1a752:	9b01      	ldr	r3, [sp, #4]
   1a754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a756:	695b      	ldr	r3, [r3, #20]
   1a758:	3350      	adds	r3, #80	; 0x50
   1a75a:	2210      	movs	r2, #16
   1a75c:	4619      	mov	r1, r3
   1a75e:	4821      	ldr	r0, [pc, #132]	; (1a7e4 <smprScActPkSendRand+0xa8>)
   1a760:	f003 f982 	bl	1da68 <smpLogByteArray>

  /* Verify the Calculated Cai to previously received Cai */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_RAND_LEN))
   1a764:	9b01      	ldr	r3, [sp, #4]
   1a766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a768:	695b      	ldr	r3, [r3, #20]
   1a76a:	f103 0050 	add.w	r0, r3, #80	; 0x50
   1a76e:	9b00      	ldr	r3, [sp, #0]
   1a770:	685b      	ldr	r3, [r3, #4]
   1a772:	2210      	movs	r2, #16
   1a774:	4619      	mov	r1, r3
   1a776:	f00d fe31 	bl	283dc <memcmp>
   1a77a:	4603      	mov	r3, r0
   1a77c:	2b00      	cmp	r3, #0
   1a77e:	d003      	beq.n	1a788 <smprScActPkSendRand+0x4c>
  {
    smpScFailWithReattempt(pCcb);
   1a780:	9801      	ldr	r0, [sp, #4]
   1a782:	f003 f95d 	bl	1da40 <smpScFailWithReattempt>

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   1a786:	e027      	b.n	1a7d8 <smprScActPkSendRand+0x9c>
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
   1a788:	9b01      	ldr	r3, [sp, #4]
   1a78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a78c:	78da      	ldrb	r2, [r3, #3]
   1a78e:	3201      	adds	r2, #1
   1a790:	b2d2      	uxtb	r2, r2
   1a792:	70da      	strb	r2, [r3, #3]
   1a794:	78db      	ldrb	r3, [r3, #3]
   1a796:	2b13      	cmp	r3, #19
   1a798:	d903      	bls.n	1a7a2 <smprScActPkSendRand+0x66>
      hdr.event = SMP_MSG_INT_PK_CMPL;
   1a79a:	231b      	movs	r3, #27
   1a79c:	f88d 300e 	strb.w	r3, [sp, #14]
   1a7a0:	e00f      	b.n	1a7c2 <smprScActPkSendRand+0x86>
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1a7a2:	9b01      	ldr	r3, [sp, #4]
   1a7a4:	2203      	movs	r2, #3
   1a7a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      hdr.event = SMP_MSG_INT_PK_NEXT;
   1a7aa:	231a      	movs	r3, #26
   1a7ac:	f88d 300e 	strb.w	r3, [sp, #14]
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1a7b0:	9b01      	ldr	r3, [sp, #4]
   1a7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a7b4:	695b      	ldr	r3, [r3, #20]
   1a7b6:	3310      	adds	r3, #16
   1a7b8:	461a      	mov	r2, r3
   1a7ba:	9900      	ldr	r1, [sp, #0]
   1a7bc:	9801      	ldr	r0, [sp, #4]
   1a7be:	f003 f864 	bl	1d88a <smpScSendRand>
    hdr.param = pCcb->connId;
   1a7c2:	9b01      	ldr	r3, [sp, #4]
   1a7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1a7c8:	b29b      	uxth	r3, r3
   1a7ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1a7ce:	ab03      	add	r3, sp, #12
   1a7d0:	4619      	mov	r1, r3
   1a7d2:	9801      	ldr	r0, [sp, #4]
   1a7d4:	f000 fee6 	bl	1b5a4 <smpSmExecute>
}
   1a7d8:	bf00      	nop
   1a7da:	b005      	add	sp, #20
   1a7dc:	f85d fb04 	ldr.w	pc, [sp], #4
   1a7e0:	0002bab0 	.word	0x0002bab0
   1a7e4:	0002bab4 	.word	0x0002bab4

0001a7e8 <smprScActOobSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a7e8:	b082      	sub	sp, #8
   1a7ea:	9001      	str	r0, [sp, #4]
   1a7ec:	9100      	str	r1, [sp, #0]
  /* The next command is the Pair Rand from the initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a7ee:	9b01      	ldr	r3, [sp, #4]
   1a7f0:	2204      	movs	r2, #4
   1a7f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   1a7f6:	bf00      	nop
   1a7f8:	b002      	add	sp, #8
   1a7fa:	4770      	bx	lr

0001a7fc <smprScActOobCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a7fc:	b500      	push	{lr}
   1a7fe:	b089      	sub	sp, #36	; 0x24
   1a800:	9003      	str	r0, [sp, #12]
   1a802:	9102      	str	r1, [sp, #8]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a804:	9b02      	ldr	r3, [sp, #8]
   1a806:	685b      	ldr	r3, [r3, #4]
   1a808:	3309      	adds	r3, #9
   1a80a:	9307      	str	r3, [sp, #28]

  /* Copy the Na from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   1a80c:	9b03      	ldr	r3, [sp, #12]
   1a80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a810:	695b      	ldr	r3, [r3, #20]
   1a812:	2210      	movs	r2, #16
   1a814:	9907      	ldr	r1, [sp, #28]
   1a816:	4618      	mov	r0, r3
   1a818:	f7f9 fec5 	bl	145a6 <WStrReverseCpy>

  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Rb. */
  if (pCcb->pairReq[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   1a81c:	9b03      	ldr	r3, [sp, #12]
   1a81e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1a822:	2b01      	cmp	r3, #1
   1a824:	d007      	beq.n	1a836 <smprScActOobCalcCa+0x3a>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   1a826:	9b03      	ldr	r3, [sp, #12]
   1a828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a82a:	695b      	ldr	r3, [r3, #20]
   1a82c:	3330      	adds	r3, #48	; 0x30
   1a82e:	491d      	ldr	r1, [pc, #116]	; (1a8a4 <smprScActOobCalcCa+0xa8>)
   1a830:	4618      	mov	r0, r3
   1a832:	f7f9 fe7f 	bl	14534 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Ca. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1a836:	9b03      	ldr	r3, [sp, #12]
   1a838:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a83c:	2b01      	cmp	r3, #1
   1a83e:	d114      	bne.n	1a86a <smprScActOobCalcCa+0x6e>
  {
    /* Calculate Ca using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a840:	9b03      	ldr	r3, [sp, #12]
   1a842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a844:	689b      	ldr	r3, [r3, #8]
   1a846:	461a      	mov	r2, r3
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a848:	9b03      	ldr	r3, [sp, #12]
   1a84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a84c:	689b      	ldr	r3, [r3, #8]
   1a84e:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Ra);
   1a850:	9b03      	ldr	r3, [sp, #12]
   1a852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a854:	695b      	ldr	r3, [r3, #20]
   1a856:	3320      	adds	r3, #32
    SmpScCalcF4(pCcb, pMsg,
   1a858:	9301      	str	r3, [sp, #4]
   1a85a:	2300      	movs	r3, #0
   1a85c:	9300      	str	r3, [sp, #0]
   1a85e:	460b      	mov	r3, r1
   1a860:	9902      	ldr	r1, [sp, #8]
   1a862:	9803      	ldr	r0, [sp, #12]
   1a864:	f002 ff0c 	bl	1d680 <SmpScCalcF4>
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
    msg.pPlainText = NULL;

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
  }
}
   1a868:	e017      	b.n	1a89a <smprScActOobCalcCa+0x9e>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*)calc128Zeros);
   1a86a:	9b03      	ldr	r3, [sp, #12]
   1a86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a86e:	695b      	ldr	r3, [r3, #20]
   1a870:	3320      	adds	r3, #32
   1a872:	490c      	ldr	r1, [pc, #48]	; (1a8a4 <smprScActOobCalcCa+0xa8>)
   1a874:	4618      	mov	r0, r3
   1a876:	f7f9 fe5d 	bl	14534 <Calc128Cpy>
    msg.hdr.param = pCcb->connId;
   1a87a:	9b03      	ldr	r3, [sp, #12]
   1a87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1a880:	b29b      	uxth	r3, r3
   1a882:	f8ad 3010 	strh.w	r3, [sp, #16]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   1a886:	231c      	movs	r3, #28
   1a888:	f88d 3012 	strb.w	r3, [sp, #18]
    msg.pPlainText = NULL;
   1a88c:	2300      	movs	r3, #0
   1a88e:	9306      	str	r3, [sp, #24]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   1a890:	ab04      	add	r3, sp, #16
   1a892:	4619      	mov	r1, r3
   1a894:	9803      	ldr	r0, [sp, #12]
   1a896:	f000 fe85 	bl	1b5a4 <smpSmExecute>
}
   1a89a:	bf00      	nop
   1a89c:	b009      	add	sp, #36	; 0x24
   1a89e:	f85d fb04 	ldr.w	pc, [sp], #4
   1a8a2:	bf00      	nop
   1a8a4:	0002c240 	.word	0x0002c240

0001a8a8 <smprScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a8a8:	b500      	push	{lr}
   1a8aa:	b083      	sub	sp, #12
   1a8ac:	9001      	str	r0, [sp, #4]
   1a8ae:	9100      	str	r1, [sp, #0]
  /* Only compare Ca if we indicated that we received OOB data. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1a8b0:	9b01      	ldr	r3, [sp, #4]
   1a8b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a8b6:	2b01      	cmp	r3, #1
   1a8b8:	d118      	bne.n	1a8ec <smprScActOobSendRand+0x44>
  {
    SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   1a8ba:	9b00      	ldr	r3, [sp, #0]
   1a8bc:	685b      	ldr	r3, [r3, #4]
   1a8be:	2210      	movs	r2, #16
   1a8c0:	4619      	mov	r1, r3
   1a8c2:	481b      	ldr	r0, [pc, #108]	; (1a930 <smprScActOobSendRand+0x88>)
   1a8c4:	f003 f8d0 	bl	1da68 <smpLogByteArray>

    /* Check that the Ca value passed via OOB methods match expectations */
    if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
   1a8c8:	9b01      	ldr	r3, [sp, #4]
   1a8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a8cc:	695b      	ldr	r3, [r3, #20]
   1a8ce:	f103 0050 	add.w	r0, r3, #80	; 0x50
   1a8d2:	9b00      	ldr	r3, [sp, #0]
   1a8d4:	685b      	ldr	r3, [r3, #4]
   1a8d6:	2210      	movs	r2, #16
   1a8d8:	4619      	mov	r1, r3
   1a8da:	f00d fd7f 	bl	283dc <memcmp>
   1a8de:	4603      	mov	r3, r0
   1a8e0:	2b00      	cmp	r3, #0
   1a8e2:	d003      	beq.n	1a8ec <smprScActOobSendRand+0x44>
    {
      smpScFailWithReattempt(pCcb);
   1a8e4:	9801      	ldr	r0, [sp, #4]
   1a8e6:	f003 f8ab 	bl	1da40 <smpScFailWithReattempt>
      return;
   1a8ea:	e01d      	b.n	1a928 <smprScActOobSendRand+0x80>
    }
  }

  /* Next command is a DK Key Check from initiator */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1a8ec:	9b01      	ldr	r3, [sp, #4]
   1a8ee:	220d      	movs	r2, #13
   1a8f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Get a random Nb */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1a8f4:	9b01      	ldr	r3, [sp, #4]
   1a8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a8f8:	695b      	ldr	r3, [r3, #20]
   1a8fa:	3310      	adds	r3, #16
   1a8fc:	2110      	movs	r1, #16
   1a8fe:	4618      	mov	r0, r3
   1a900:	f7ff fa8c 	bl	19e1c <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1a904:	9b01      	ldr	r3, [sp, #4]
   1a906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a908:	695b      	ldr	r3, [r3, #20]
   1a90a:	3310      	adds	r3, #16
   1a90c:	2210      	movs	r2, #16
   1a90e:	4619      	mov	r1, r3
   1a910:	4808      	ldr	r0, [pc, #32]	; (1a934 <smprScActOobSendRand+0x8c>)
   1a912:	f003 f8a9 	bl	1da68 <smpLogByteArray>

  /* Send the rand Nb to the initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1a916:	9b01      	ldr	r3, [sp, #4]
   1a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a91a:	695b      	ldr	r3, [r3, #20]
   1a91c:	3310      	adds	r3, #16
   1a91e:	461a      	mov	r2, r3
   1a920:	9900      	ldr	r1, [sp, #0]
   1a922:	9801      	ldr	r0, [sp, #4]
   1a924:	f002 ffb1 	bl	1d88a <smpScSendRand>
}
   1a928:	b003      	add	sp, #12
   1a92a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a92e:	bf00      	nop
   1a930:	0002bab0 	.word	0x0002bab0
   1a934:	0002ba94 	.word	0x0002ba94

0001a938 <smprScActStoreDhCheck>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActStoreDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a938:	b500      	push	{lr}
   1a93a:	b085      	sub	sp, #20
   1a93c:	9001      	str	r0, [sp, #4]
   1a93e:	9100      	str	r1, [sp, #0]
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a940:	9b00      	ldr	r3, [sp, #0]
   1a942:	685b      	ldr	r3, [r3, #4]
   1a944:	3309      	adds	r3, #9
   1a946:	9303      	str	r3, [sp, #12]

  /* Signal that not further commands are expected until Key Distribution phase (if applicable) */
  pCcb->nextCmdCode = SMP_CMD_MAX;
   1a948:	9b01      	ldr	r3, [sp, #4]
   1a94a:	220f      	movs	r2, #15
   1a94c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* The Ea from the peer is in the cmd message (copy as MSB First) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   1a950:	9b01      	ldr	r3, [sp, #4]
   1a952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a954:	695b      	ldr	r3, [r3, #20]
   1a956:	3350      	adds	r3, #80	; 0x50
   1a958:	2210      	movs	r2, #16
   1a95a:	9903      	ldr	r1, [sp, #12]
   1a95c:	4618      	mov	r0, r3
   1a95e:	f7f9 fe22 	bl	145a6 <WStrReverseCpy>
}
   1a962:	bf00      	nop
   1a964:	b005      	add	sp, #20
   1a966:	f85d fb04 	ldr.w	pc, [sp], #4

0001a96a <smprScActWaitDhCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActWaitDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a96a:	b500      	push	{lr}
   1a96c:	b083      	sub	sp, #12
   1a96e:	9001      	str	r0, [sp, #4]
   1a970:	9100      	str	r1, [sp, #0]
  /* Next command is a DH Key Check */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1a972:	9b01      	ldr	r3, [sp, #4]
   1a974:	220d      	movs	r2, #13
   1a976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1a97a:	9b01      	ldr	r3, [sp, #4]
   1a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a97e:	785b      	ldrb	r3, [r3, #1]
   1a980:	2b03      	cmp	r3, #3
   1a982:	d108      	bne.n	1a996 <smprScActWaitDhCheck+0x2c>
  {
    /* Send the Pair Rand Nb */
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1a984:	9b01      	ldr	r3, [sp, #4]
   1a986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a988:	695b      	ldr	r3, [r3, #20]
   1a98a:	3310      	adds	r3, #16
   1a98c:	461a      	mov	r2, r3
   1a98e:	9900      	ldr	r1, [sp, #0]
   1a990:	9801      	ldr	r0, [sp, #4]
   1a992:	f002 ff7a 	bl	1d88a <smpScSendRand>
  }
}
   1a996:	bf00      	nop
   1a998:	b003      	add	sp, #12
   1a99a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a99e <smprScActCalcDHKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActCalcDHKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a99e:	b500      	push	{lr}
   1a9a0:	b085      	sub	sp, #20
   1a9a2:	9001      	str	r0, [sp, #4]
   1a9a4:	9100      	str	r1, [sp, #0]
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   1a9a6:	9b01      	ldr	r3, [sp, #4]
   1a9a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1a9ac:	2b0d      	cmp	r3, #13
   1a9ae:	d10c      	bne.n	1a9ca <smprScActCalcDHKey+0x2c>
  {
    uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a9b0:	9b00      	ldr	r3, [sp, #0]
   1a9b2:	685b      	ldr	r3, [r3, #4]
   1a9b4:	3309      	adds	r3, #9
   1a9b6:	9303      	str	r3, [sp, #12]

    /* The Ea from the peer is in the cmd message (copy as MSB First) */
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   1a9b8:	9b01      	ldr	r3, [sp, #4]
   1a9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a9bc:	695b      	ldr	r3, [r3, #20]
   1a9be:	3350      	adds	r3, #80	; 0x50
   1a9c0:	2210      	movs	r2, #16
   1a9c2:	9903      	ldr	r1, [sp, #12]
   1a9c4:	4618      	mov	r0, r3
   1a9c6:	f7f9 fdee 	bl	145a6 <WStrReverseCpy>
  }

  /* Complete the calculation */
  smpScActCalcSharedSecret(pCcb, pMsg);
   1a9ca:	9900      	ldr	r1, [sp, #0]
   1a9cc:	9801      	ldr	r0, [sp, #4]
   1a9ce:	f002 fb1f 	bl	1d010 <smpScActCalcSharedSecret>
}
   1a9d2:	bf00      	nop
   1a9d4:	b005      	add	sp, #20
   1a9d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001a9dc <smprScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a9dc:	b500      	push	{lr}
   1a9de:	b085      	sub	sp, #20
   1a9e0:	9001      	str	r0, [sp, #4]
   1a9e2:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   1a9e4:	9b00      	ldr	r3, [sp, #0]
   1a9e6:	685b      	ldr	r3, [r3, #4]
   1a9e8:	2210      	movs	r2, #16
   1a9ea:	4619      	mov	r1, r3
   1a9ec:	4838      	ldr	r0, [pc, #224]	; (1aad0 <smprScActDHKeyCheckSend+0xf4>)
   1a9ee:	f003 f83b 	bl	1da68 <smpLogByteArray>

  /* The Eb from the CMAC calculation */
  Calc128Cpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext);
   1a9f2:	9b01      	ldr	r3, [sp, #4]
   1a9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a9f6:	695b      	ldr	r3, [r3, #20]
   1a9f8:	f103 0210 	add.w	r2, r3, #16
   1a9fc:	9b00      	ldr	r3, [sp, #0]
   1a9fe:	685b      	ldr	r3, [r3, #4]
   1aa00:	4619      	mov	r1, r3
   1aa02:	4610      	mov	r0, r2
   1aa04:	f7f9 fd96 	bl	14534 <Calc128Cpy>

  /* Verify the DH Key Check Ea with the value received from the initiator */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN) == 0)
   1aa08:	9b01      	ldr	r3, [sp, #4]
   1aa0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1aa0c:	695b      	ldr	r3, [r3, #20]
   1aa0e:	f103 0050 	add.w	r0, r3, #80	; 0x50
   1aa12:	9b01      	ldr	r3, [sp, #4]
   1aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1aa16:	695b      	ldr	r3, [r3, #20]
   1aa18:	2210      	movs	r2, #16
   1aa1a:	4619      	mov	r1, r3
   1aa1c:	f00d fcde 	bl	283dc <memcmp>
   1aa20:	4603      	mov	r3, r0
   1aa22:	2b00      	cmp	r3, #0
   1aa24:	d124      	bne.n	1aa70 <smprScActDHKeyCheckSend+0x94>
  {
    /* Adjust key based on max key length */
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1aa26:	9b01      	ldr	r3, [sp, #4]
   1aa28:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1aa2c:	9b01      	ldr	r3, [sp, #4]
   1aa2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1aa32:	4293      	cmp	r3, r2
   1aa34:	bf28      	it	cs
   1aa36:	4613      	movcs	r3, r2
   1aa38:	f88d 300f 	strb.w	r3, [sp, #15]
                          pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1aa3c:	9b01      	ldr	r3, [sp, #4]
   1aa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1aa40:	699b      	ldr	r3, [r3, #24]
   1aa42:	f103 0210 	add.w	r2, r3, #16
   1aa46:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1aa4a:	18d0      	adds	r0, r2, r3
   1aa4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1aa50:	f1c3 0310 	rsb	r3, r3, #16
   1aa54:	461a      	mov	r2, r3
   1aa56:	2100      	movs	r1, #0
   1aa58:	f00d fcf0 	bl	2843c <memset>

    /* Send the DH Key check Eb to the initiator */
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1aa5c:	9b01      	ldr	r3, [sp, #4]
   1aa5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1aa60:	695b      	ldr	r3, [r3, #20]
   1aa62:	3310      	adds	r3, #16
   1aa64:	461a      	mov	r2, r3
   1aa66:	9900      	ldr	r1, [sp, #0]
   1aa68:	9801      	ldr	r0, [sp, #4]
   1aa6a:	f002 fed7 	bl	1d81c <smpScSendDHKeyCheck>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   1aa6e:	e02a      	b.n	1aac6 <smprScActDHKeyCheckSend+0xea>
    hdr.param = pCcb->connId;
   1aa70:	9b01      	ldr	r3, [sp, #4]
   1aa72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1aa76:	b29b      	uxth	r3, r3
   1aa78:	f8ad 3008 	strh.w	r3, [sp, #8]
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   1aa7c:	230b      	movs	r3, #11
   1aa7e:	f88d 300b 	strb.w	r3, [sp, #11]
    pCcb->attempts++;
   1aa82:	9b01      	ldr	r3, [sp, #4]
   1aa84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1aa88:	3301      	adds	r3, #1
   1aa8a:	b2da      	uxtb	r2, r3
   1aa8c:	9b01      	ldr	r3, [sp, #4]
   1aa8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   1aa92:	9b01      	ldr	r3, [sp, #4]
   1aa94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1aa98:	4618      	mov	r0, r3
   1aa9a:	f000 ff79 	bl	1b990 <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1aa9e:	9b01      	ldr	r3, [sp, #4]
   1aaa0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   1aaa4:	4b0b      	ldr	r3, [pc, #44]	; (1aad4 <smprScActDHKeyCheckSend+0xf8>)
   1aaa6:	681b      	ldr	r3, [r3, #0]
   1aaa8:	79db      	ldrb	r3, [r3, #7]
   1aaaa:	429a      	cmp	r2, r3
   1aaac:	d103      	bne.n	1aab6 <smprScActDHKeyCheckSend+0xda>
      hdr.event = SMP_MSG_INT_MAX_ATTEMPTS;
   1aaae:	230d      	movs	r3, #13
   1aab0:	f88d 300a 	strb.w	r3, [sp, #10]
   1aab4:	e002      	b.n	1aabc <smprScActDHKeyCheckSend+0xe0>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
   1aab6:	231d      	movs	r3, #29
   1aab8:	f88d 300a 	strb.w	r3, [sp, #10]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1aabc:	ab02      	add	r3, sp, #8
   1aabe:	4619      	mov	r1, r3
   1aac0:	9801      	ldr	r0, [sp, #4]
   1aac2:	f000 fd6f 	bl	1b5a4 <smpSmExecute>
}
   1aac6:	bf00      	nop
   1aac8:	b005      	add	sp, #20
   1aaca:	f85d fb04 	ldr.w	pc, [sp], #4
   1aace:	bf00      	nop
   1aad0:	0002babc 	.word	0x0002babc
   1aad4:	10002bd0 	.word	0x10002bd0

0001aad8 <SmprScInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmprScInit(void)
{
   1aad8:	b508      	push	{r3, lr}
  /* set up callback interface */
  smpCb.pSlave = &smprScSmIf;
   1aada:	4b04      	ldr	r3, [pc, #16]	; (1aaec <SmprScInit+0x14>)
   1aadc:	4a04      	ldr	r2, [pc, #16]	; (1aaf0 <SmprScInit+0x18>)
   1aade:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* General SMP LESC Initialization */
  SmpScInit();
   1aae2:	f002 fdfb 	bl	1d6dc <SmpScInit>
}
   1aae6:	bf00      	nop
   1aae8:	bd08      	pop	{r3, pc}
   1aaea:	bf00      	nop
   1aaec:	100095f8 	.word	0x100095f8
   1aaf0:	0002c898 	.word	0x0002c898

0001aaf4 <SmprInit>:
 */
/*************************************************************************************************/
void SmprInit(void)
{
  /* set up state machine interface */
  smpCb.pSlave = &smprSmIf;
   1aaf4:	4b06      	ldr	r3, [pc, #24]	; (1ab10 <SmprInit+0x1c>)
   1aaf6:	4a07      	ldr	r2, [pc, #28]	; (1ab14 <SmprInit+0x20>)
   1aaf8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  smpCb.procPairing = smpProcPairing;
   1aafc:	4b04      	ldr	r3, [pc, #16]	; (1ab10 <SmprInit+0x1c>)
   1aafe:	4a06      	ldr	r2, [pc, #24]	; (1ab18 <SmprInit+0x24>)
   1ab00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  smpCb.procAuthReq = smpAuthReq;
   1ab04:	4b02      	ldr	r3, [pc, #8]	; (1ab10 <SmprInit+0x1c>)
   1ab06:	4a05      	ldr	r2, [pc, #20]	; (1ab1c <SmprInit+0x28>)
   1ab08:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
   1ab0c:	bf00      	nop
   1ab0e:	4770      	bx	lr
   1ab10:	100095f8 	.word	0x100095f8
   1ab14:	0002ca24 	.word	0x0002ca24
   1ab18:	0001ac9d 	.word	0x0001ac9d
   1ab1c:	0001aea5 	.word	0x0001aea5

0001ab20 <smpStartRspTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
   1ab20:	b500      	push	{lr}
   1ab22:	b083      	sub	sp, #12
   1ab24:	9001      	str	r0, [sp, #4]
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   1ab26:	9b01      	ldr	r3, [sp, #4]
   1ab28:	220f      	movs	r2, #15
   1ab2a:	731a      	strb	r2, [r3, #12]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
   1ab2c:	9b01      	ldr	r3, [sp, #4]
   1ab2e:	22e1      	movs	r2, #225	; 0xe1
   1ab30:	735a      	strb	r2, [r3, #13]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   1ab32:	9b01      	ldr	r3, [sp, #4]
   1ab34:	211e      	movs	r1, #30
   1ab36:	4618      	mov	r0, r3
   1ab38:	f7f2 fe9e 	bl	d878 <WsfTimerStartSec>
}
   1ab3c:	bf00      	nop
   1ab3e:	b003      	add	sp, #12
   1ab40:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab44 <smpActNone>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ab44:	b082      	sub	sp, #8
   1ab46:	9001      	str	r0, [sp, #4]
   1ab48:	9100      	str	r1, [sp, #0]
  return;
   1ab4a:	bf00      	nop
}
   1ab4c:	b002      	add	sp, #8
   1ab4e:	4770      	bx	lr

0001ab50 <smpCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCleanup(smpCcb_t *pCcb)
{
   1ab50:	b500      	push	{lr}
   1ab52:	b083      	sub	sp, #12
   1ab54:	9001      	str	r0, [sp, #4]
  /* free scratch buffer */
  if (pCcb->pScr != NULL)
   1ab56:	9b01      	ldr	r3, [sp, #4]
   1ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ab5a:	2b00      	cmp	r3, #0
   1ab5c:	d007      	beq.n	1ab6e <smpCleanup+0x1e>
  {
    WsfBufFree(pCcb->pScr);
   1ab5e:	9b01      	ldr	r3, [sp, #4]
   1ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ab62:	4618      	mov	r0, r3
   1ab64:	f7f2 fab6 	bl	d0d4 <WsfBufFree>
    pCcb->pScr = NULL;
   1ab68:	9b01      	ldr	r3, [sp, #4]
   1ab6a:	2200      	movs	r2, #0
   1ab6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* stop response timer */
  WsfTimerStop(&pCcb->rspTimer);
   1ab6e:	9b01      	ldr	r3, [sp, #4]
   1ab70:	4618      	mov	r0, r3
   1ab72:	f7f2 fea5 	bl	d8c0 <WsfTimerStop>

  /* stop wait interval timer */
  WsfTimerStop(&pCcb->waitTimer);
   1ab76:	9b01      	ldr	r3, [sp, #4]
   1ab78:	3310      	adds	r3, #16
   1ab7a:	4618      	mov	r0, r3
   1ab7c:	f7f2 fea0 	bl	d8c0 <WsfTimerStop>

  pCcb->secReq = FALSE;
   1ab80:	9b01      	ldr	r3, [sp, #4]
   1ab82:	2200      	movs	r2, #0
   1ab84:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1ab88:	9b01      	ldr	r3, [sp, #4]
   1ab8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1ab8e:	2b00      	cmp	r3, #0
   1ab90:	d001      	beq.n	1ab96 <smpCleanup+0x46>
   1ab92:	220b      	movs	r2, #11
   1ab94:	e000      	b.n	1ab98 <smpCleanup+0x48>
   1ab96:	2201      	movs	r2, #1
   1ab98:	9b01      	ldr	r3, [sp, #4]
   1ab9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1ab9e:	9b01      	ldr	r3, [sp, #4]
   1aba0:	2200      	movs	r2, #0
   1aba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
   1aba6:	bf00      	nop
   1aba8:	b003      	add	sp, #12
   1abaa:	f85d fb04 	ldr.w	pc, [sp], #4

0001abae <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1abae:	b500      	push	{lr}
   1abb0:	b083      	sub	sp, #12
   1abb2:	9001      	str	r0, [sp, #4]
   1abb4:	9100      	str	r1, [sp, #0]
  smpCleanup(pCcb);
   1abb6:	9801      	ldr	r0, [sp, #4]
   1abb8:	f7ff ffca 	bl	1ab50 <smpCleanup>
}
   1abbc:	bf00      	nop
   1abbe:	b003      	add	sp, #12
   1abc0:	f85d fb04 	ldr.w	pc, [sp], #4

0001abc4 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
   1abc4:	b500      	push	{lr}
   1abc6:	b085      	sub	sp, #20
   1abc8:	9001      	str	r0, [sp, #4]
   1abca:	460b      	mov	r3, r1
   1abcc:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1abd0:	200a      	movs	r0, #10
   1abd2:	f001 fba6 	bl	1c322 <smpMsgAlloc>
   1abd6:	9003      	str	r0, [sp, #12]
   1abd8:	9b03      	ldr	r3, [sp, #12]
   1abda:	2b00      	cmp	r3, #0
   1abdc:	d011      	beq.n	1ac02 <smpSendPairingFailed+0x3e>
  {
    p = pPacket + L2C_PAYLOAD_START;
   1abde:	9b03      	ldr	r3, [sp, #12]
   1abe0:	3308      	adds	r3, #8
   1abe2:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1abe4:	9b02      	ldr	r3, [sp, #8]
   1abe6:	1c5a      	adds	r2, r3, #1
   1abe8:	9202      	str	r2, [sp, #8]
   1abea:	2205      	movs	r2, #5
   1abec:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   1abee:	9b02      	ldr	r3, [sp, #8]
   1abf0:	1c5a      	adds	r2, r3, #1
   1abf2:	9202      	str	r2, [sp, #8]
   1abf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1abf8:	701a      	strb	r2, [r3, #0]

    smpSendPkt(pCcb, pPacket);
   1abfa:	9903      	ldr	r1, [sp, #12]
   1abfc:	9801      	ldr	r0, [sp, #4]
   1abfe:	f001 fb4f 	bl	1c2a0 <smpSendPkt>
  }
}
   1ac02:	bf00      	nop
   1ac04:	b005      	add	sp, #20
   1ac06:	f85d fb04 	ldr.w	pc, [sp], #4

0001ac0a <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ac0a:	b500      	push	{lr}
   1ac0c:	b083      	sub	sp, #12
   1ac0e:	9001      	str	r0, [sp, #4]
   1ac10:	9100      	str	r1, [sp, #0]
  /* clean up */
  smpCleanup(pCcb);
   1ac12:	9801      	ldr	r0, [sp, #4]
   1ac14:	f7ff ff9c 	bl	1ab50 <smpCleanup>

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1ac18:	9b01      	ldr	r3, [sp, #4]
   1ac1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1ac1e:	2200      	movs	r2, #0
   1ac20:	2101      	movs	r1, #1
   1ac22:	4618      	mov	r0, r3
   1ac24:	f7fb f96a 	bl	15efc <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1ac28:	9b00      	ldr	r3, [sp, #0]
   1ac2a:	222b      	movs	r2, #43	; 0x2b
   1ac2c:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1ac2e:	9800      	ldr	r0, [sp, #0]
   1ac30:	f7fc fa0a 	bl	17048 <DmSmpCbackExec>
}
   1ac34:	bf00      	nop
   1ac36:	b003      	add	sp, #12
   1ac38:	f85d fb04 	ldr.w	pc, [sp], #4

0001ac3c <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ac3c:	b500      	push	{lr}
   1ac3e:	b083      	sub	sp, #12
   1ac40:	9001      	str	r0, [sp, #4]
   1ac42:	9100      	str	r1, [sp, #0]
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1ac44:	9b00      	ldr	r3, [sp, #0]
   1ac46:	78db      	ldrb	r3, [r3, #3]
   1ac48:	4619      	mov	r1, r3
   1ac4a:	9801      	ldr	r0, [sp, #4]
   1ac4c:	f7ff ffba 	bl	1abc4 <smpSendPairingFailed>

  smpActPairingFailed(pCcb, pMsg);
   1ac50:	9900      	ldr	r1, [sp, #0]
   1ac52:	9801      	ldr	r0, [sp, #4]
   1ac54:	f7ff ffd9 	bl	1ac0a <smpActPairingFailed>
}
   1ac58:	bf00      	nop
   1ac5a:	b003      	add	sp, #12
   1ac5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ac60 <smpActStorePin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActStorePin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ac60:	b500      	push	{lr}
   1ac62:	b083      	sub	sp, #12
   1ac64:	9001      	str	r0, [sp, #4]
   1ac66:	9100      	str	r1, [sp, #0]
  /* copy authentication data to scratchpad */
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1ac68:	9b01      	ldr	r3, [sp, #4]
   1ac6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ac6c:	4618      	mov	r0, r3
   1ac6e:	9b00      	ldr	r3, [sp, #0]
   1ac70:	1d19      	adds	r1, r3, #4
   1ac72:	9b00      	ldr	r3, [sp, #0]
   1ac74:	7d1b      	ldrb	r3, [r3, #20]
   1ac76:	461a      	mov	r2, r3
   1ac78:	f7f1 fa42 	bl	c100 <memcpy>

  /* zero out unused pin data */
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   1ac7c:	9b00      	ldr	r3, [sp, #0]
   1ac7e:	7d1b      	ldrb	r3, [r3, #20]
   1ac80:	2b03      	cmp	r3, #3
   1ac82:	d107      	bne.n	1ac94 <smpActStorePin+0x34>
  {
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   1ac84:	9b01      	ldr	r3, [sp, #4]
   1ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ac88:	3303      	adds	r3, #3
   1ac8a:	220d      	movs	r2, #13
   1ac8c:	2100      	movs	r1, #0
   1ac8e:	4618      	mov	r0, r3
   1ac90:	f00d fbd4 	bl	2843c <memset>
  }
}
   1ac94:	bf00      	nop
   1ac96:	b003      	add	sp, #12
   1ac98:	f85d fb04 	ldr.w	pc, [sp], #4

0001ac9c <smpProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   1ac9c:	b500      	push	{lr}
   1ac9e:	b087      	sub	sp, #28
   1aca0:	9003      	str	r0, [sp, #12]
   1aca2:	9102      	str	r1, [sp, #8]
   1aca4:	9201      	str	r2, [sp, #4]
  bool_t          justWorks = TRUE;
   1aca6:	2301      	movs	r3, #1
   1aca8:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   1acac:	9b01      	ldr	r3, [sp, #4]
   1acae:	2200      	movs	r2, #0
   1acb0:	701a      	strb	r2, [r3, #0]
  *pOob = FALSE;
   1acb2:	9b02      	ldr	r3, [sp, #8]
   1acb4:	2200      	movs	r2, #0
   1acb6:	701a      	strb	r2, [r3, #0]

  /* if OOB available use that */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1acb8:	9b03      	ldr	r3, [sp, #12]
   1acba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1acbe:	2b01      	cmp	r3, #1
   1acc0:	d10b      	bne.n	1acda <smpProcPairing+0x3e>
      pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1acc2:	9b03      	ldr	r3, [sp, #12]
   1acc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1acc8:	2b01      	cmp	r3, #1
   1acca:	d106      	bne.n	1acda <smpProcPairing+0x3e>
  {
    *pOob = SMP_OOB_DATA_PRESENT;
   1accc:	9b02      	ldr	r3, [sp, #8]
   1acce:	2201      	movs	r2, #1
   1acd0:	701a      	strb	r2, [r3, #0]
    justWorks = FALSE;
   1acd2:	2300      	movs	r3, #0
   1acd4:	f88d 3017 	strb.w	r3, [sp, #23]
   1acd8:	e068      	b.n	1adac <smpProcPairing+0x110>
  }
  /* if either device set mitm flag */
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1acda:	9b03      	ldr	r3, [sp, #12]
   1acdc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1ace0:	f003 0304 	and.w	r3, r3, #4
   1ace4:	2b00      	cmp	r3, #0
   1ace6:	d106      	bne.n	1acf6 <smpProcPairing+0x5a>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   1ace8:	9b03      	ldr	r3, [sp, #12]
   1acea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1acee:	f003 0304 	and.w	r3, r3, #4
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	d05a      	beq.n	1adac <smpProcPairing+0x110>
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1acf6:	9b03      	ldr	r3, [sp, #12]
   1acf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1acfc:	2b03      	cmp	r3, #3
   1acfe:	d055      	beq.n	1adac <smpProcPairing+0x110>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1ad00:	9b03      	ldr	r3, [sp, #12]
   1ad02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1ad06:	2b03      	cmp	r3, #3
   1ad08:	d050      	beq.n	1adac <smpProcPairing+0x110>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1ad0a:	9b03      	ldr	r3, [sp, #12]
   1ad0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1ad10:	2b00      	cmp	r3, #0
   1ad12:	d004      	beq.n	1ad1e <smpProcPairing+0x82>
           (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO)) &&
   1ad14:	9b03      	ldr	r3, [sp, #12]
   1ad16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1ad1a:	2b01      	cmp	r3, #1
   1ad1c:	d109      	bne.n	1ad32 <smpProcPairing+0x96>
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   1ad1e:	9b03      	ldr	r3, [sp, #12]
   1ad20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1ad24:	2b00      	cmp	r3, #0
   1ad26:	d041      	beq.n	1adac <smpProcPairing+0x110>
           (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO))))
   1ad28:	9b03      	ldr	r3, [sp, #12]
   1ad2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   1ad2e:	2b01      	cmp	r3, #1
   1ad30:	d03c      	beq.n	1adac <smpProcPairing+0x110>
    {
      /* use pin */
      justWorks = FALSE;
   1ad32:	2300      	movs	r3, #0
   1ad34:	f88d 3017 	strb.w	r3, [sp, #23]

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   1ad38:	9b03      	ldr	r3, [sp, #12]
   1ad3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1ad3e:	2b00      	cmp	r3, #0
   1ad40:	d013      	beq.n	1ad6a <smpProcPairing+0xce>
   1ad42:	9b03      	ldr	r3, [sp, #12]
   1ad44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   1ad48:	2b01      	cmp	r3, #1
   1ad4a:	d00e      	beq.n	1ad6a <smpProcPairing+0xce>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1ad4c:	9b03      	ldr	r3, [sp, #12]
   1ad4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1ad52:	2b04      	cmp	r3, #4
   1ad54:	d10b      	bne.n	1ad6e <smpProcPairing+0xd2>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1ad56:	9b03      	ldr	r3, [sp, #12]
   1ad58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1ad5c:	2b02      	cmp	r3, #2
   1ad5e:	d004      	beq.n	1ad6a <smpProcPairing+0xce>
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));
   1ad60:	9b03      	ldr	r3, [sp, #12]
   1ad62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1ad66:	2b04      	cmp	r3, #4
   1ad68:	d101      	bne.n	1ad6e <smpProcPairing+0xd2>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1ad6a:	2301      	movs	r3, #1
   1ad6c:	e000      	b.n	1ad70 <smpProcPairing+0xd4>
   1ad6e:	2300      	movs	r3, #0
      *pDisplay =
   1ad70:	b2da      	uxtb	r2, r3
   1ad72:	9b01      	ldr	r3, [sp, #4]
   1ad74:	701a      	strb	r2, [r3, #0]

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1ad76:	9b03      	ldr	r3, [sp, #12]
   1ad78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1ad7c:	2b02      	cmp	r3, #2
   1ad7e:	d104      	bne.n	1ad8a <smpProcPairing+0xee>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
   1ad80:	9b03      	ldr	r3, [sp, #12]
   1ad82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1ad86:	2b02      	cmp	r3, #2
   1ad88:	d010      	beq.n	1adac <smpProcPairing+0x110>
      {
        *pDisplay ^= !pCcb->initiator;
   1ad8a:	9b01      	ldr	r3, [sp, #4]
   1ad8c:	781b      	ldrb	r3, [r3, #0]
   1ad8e:	b25a      	sxtb	r2, r3
   1ad90:	9b03      	ldr	r3, [sp, #12]
   1ad92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	bf0c      	ite	eq
   1ad9a:	2301      	moveq	r3, #1
   1ad9c:	2300      	movne	r3, #0
   1ad9e:	b2db      	uxtb	r3, r3
   1ada0:	b25b      	sxtb	r3, r3
   1ada2:	4053      	eors	r3, r2
   1ada4:	b25b      	sxtb	r3, r3
   1ada6:	b2da      	uxtb	r2, r3
   1ada8:	9b01      	ldr	r3, [sp, #4]
   1adaa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (!justWorks)
   1adac:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1adb0:	2b00      	cmp	r3, #0
   1adb2:	d10e      	bne.n	1add2 <smpProcPairing+0x136>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1adb4:	9b03      	ldr	r3, [sp, #12]
   1adb6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1adba:	9b03      	ldr	r3, [sp, #12]
   1adbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1adc0:	4013      	ands	r3, r2
   1adc2:	b2db      	uxtb	r3, r3
   1adc4:	f043 0304 	orr.w	r3, r3, #4
   1adc8:	b2da      	uxtb	r2, r3
   1adca:	9b03      	ldr	r3, [sp, #12]
   1adcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1add0:	e00d      	b.n	1adee <smpProcPairing+0x152>
  }
  else
  {
    /* set auth flags with mitm bit cleared */
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1add2:	9b03      	ldr	r3, [sp, #12]
   1add4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1add8:	9b03      	ldr	r3, [sp, #12]
   1adda:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1adde:	4013      	ands	r3, r2
   1ade0:	b2db      	uxtb	r3, r3
   1ade2:	f023 0304 	bic.w	r3, r3, #4
   1ade6:	b2da      	uxtb	r2, r3
   1ade8:	9b03      	ldr	r3, [sp, #12]
   1adea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   1adee:	9b03      	ldr	r3, [sp, #12]
   1adf0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1adf4:	2b00      	cmp	r3, #0
   1adf6:	d003      	beq.n	1ae00 <smpProcPairing+0x164>
   1adf8:	9b03      	ldr	r3, [sp, #12]
   1adfa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1adfe:	e002      	b.n	1ae06 <smpProcPairing+0x16a>
   1ae00:	9b03      	ldr	r3, [sp, #12]
   1ae02:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1ae06:	f88d 3016 	strb.w	r3, [sp, #22]
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1ae0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1ae0e:	2b00      	cmp	r3, #0
   1ae10:	d01d      	beq.n	1ae4e <smpProcPairing+0x1b2>
   1ae12:	4b23      	ldr	r3, [pc, #140]	; (1aea0 <smpProcPairing+0x204>)
   1ae14:	681b      	ldr	r3, [r3, #0]
   1ae16:	7a1a      	ldrb	r2, [r3, #8]
   1ae18:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1ae1c:	4013      	ands	r3, r2
   1ae1e:	b2db      	uxtb	r3, r3
   1ae20:	f003 0304 	and.w	r3, r3, #4
   1ae24:	2b00      	cmp	r3, #0
   1ae26:	d012      	beq.n	1ae4e <smpProcPairing+0x1b2>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   1ae28:	9b03      	ldr	r3, [sp, #12]
   1ae2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1ae2e:	b29b      	uxth	r3, r3
   1ae30:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
   1ae34:	2303      	movs	r3, #3
   1ae36:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ae3a:	2303      	movs	r3, #3
   1ae3c:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ae40:	ab04      	add	r3, sp, #16
   1ae42:	4619      	mov	r1, r3
   1ae44:	9803      	ldr	r0, [sp, #12]
   1ae46:	f000 fbad 	bl	1b5a4 <smpSmExecute>
    return FALSE;
   1ae4a:	2300      	movs	r3, #0
   1ae4c:	e023      	b.n	1ae96 <smpProcPairing+0x1fa>
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1ae4e:	9b03      	ldr	r3, [sp, #12]
   1ae50:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1ae54:	4b12      	ldr	r3, [pc, #72]	; (1aea0 <smpProcPairing+0x204>)
   1ae56:	681b      	ldr	r3, [r3, #0]
   1ae58:	795b      	ldrb	r3, [r3, #5]
   1ae5a:	429a      	cmp	r2, r3
   1ae5c:	d307      	bcc.n	1ae6e <smpProcPairing+0x1d2>
      pCcb->pairRsp[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen)
   1ae5e:	9b03      	ldr	r3, [sp, #12]
   1ae60:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1ae64:	4b0e      	ldr	r3, [pc, #56]	; (1aea0 <smpProcPairing+0x204>)
   1ae66:	681b      	ldr	r3, [r3, #0]
   1ae68:	795b      	ldrb	r3, [r3, #5]
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1ae6a:	429a      	cmp	r2, r3
   1ae6c:	d212      	bcs.n	1ae94 <smpProcPairing+0x1f8>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   1ae6e:	9b03      	ldr	r3, [sp, #12]
   1ae70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1ae74:	b29b      	uxth	r3, r3
   1ae76:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_ENC_KEY_SIZE;
   1ae7a:	2306      	movs	r3, #6
   1ae7c:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ae80:	2303      	movs	r3, #3
   1ae82:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ae86:	ab04      	add	r3, sp, #16
   1ae88:	4619      	mov	r1, r3
   1ae8a:	9803      	ldr	r0, [sp, #12]
   1ae8c:	f000 fb8a 	bl	1b5a4 <smpSmExecute>
    return FALSE;
   1ae90:	2300      	movs	r3, #0
   1ae92:	e000      	b.n	1ae96 <smpProcPairing+0x1fa>
  }

  return TRUE;
   1ae94:	2301      	movs	r3, #1
}
   1ae96:	4618      	mov	r0, r3
   1ae98:	b007      	add	sp, #28
   1ae9a:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae9e:	bf00      	nop
   1aea0:	10002bd0 	.word	0x10002bd0

0001aea4 <smpAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   1aea4:	b500      	push	{lr}
   1aea6:	b089      	sub	sp, #36	; 0x24
   1aea8:	9001      	str	r0, [sp, #4]
   1aeaa:	460b      	mov	r3, r1
   1aeac:	f88d 3003 	strb.w	r3, [sp, #3]
   1aeb0:	4613      	mov	r3, r2
   1aeb2:	f88d 3002 	strb.w	r3, [sp, #2]
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1aeb6:	9b01      	ldr	r3, [sp, #4]
   1aeb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1aebc:	f003 0304 	and.w	r3, r3, #4
   1aec0:	2b00      	cmp	r3, #0
   1aec2:	d015      	beq.n	1aef0 <smpAuthReq+0x4c>
  {
    /* request pin or oob from user */
    buf.authReq.hdr.param = pCcb->connId;
   1aec4:	9b01      	ldr	r3, [sp, #4]
   1aec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1aeca:	b29b      	uxth	r3, r3
   1aecc:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1aed0:	232e      	movs	r3, #46	; 0x2e
   1aed2:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authReq.oob = oob;
   1aed6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1aeda:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authReq.display = display;
   1aede:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1aee2:	f88d 300d 	strb.w	r3, [sp, #13]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1aee6:	ab02      	add	r3, sp, #8
   1aee8:	4618      	mov	r0, r3
   1aeea:	f7fc f8ad 	bl	17048 <DmSmpCbackExec>
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
  }
}
   1aeee:	e019      	b.n	1af24 <smpAuthReq+0x80>
    buf.authRsp.hdr.param = pCcb->connId;
   1aef0:	9b01      	ldr	r3, [sp, #4]
   1aef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1aef6:	b29b      	uxth	r3, r3
   1aef8:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1aefc:	2304      	movs	r3, #4
   1aefe:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authRsp.authData[0] = 0;
   1af02:	2300      	movs	r3, #0
   1af04:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authRsp.authData[1] = 0;
   1af08:	2300      	movs	r3, #0
   1af0a:	f88d 300d 	strb.w	r3, [sp, #13]
    buf.authRsp.authData[2] = 0;
   1af0e:	2300      	movs	r3, #0
   1af10:	f88d 300e 	strb.w	r3, [sp, #14]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1af14:	2303      	movs	r3, #3
   1af16:	f88d 301c 	strb.w	r3, [sp, #28]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1af1a:	ab02      	add	r3, sp, #8
   1af1c:	4619      	mov	r1, r3
   1af1e:	9801      	ldr	r0, [sp, #4]
   1af20:	f000 fb40 	bl	1b5a4 <smpSmExecute>
}
   1af24:	bf00      	nop
   1af26:	b009      	add	sp, #36	; 0x24
   1af28:	f85d fb04 	ldr.w	pc, [sp], #4

0001af2c <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1af2c:	b500      	push	{lr}
   1af2e:	b083      	sub	sp, #12
   1af30:	9001      	str	r0, [sp, #4]
   1af32:	9100      	str	r1, [sp, #0]
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);
   1af34:	9900      	ldr	r1, [sp, #0]
   1af36:	9801      	ldr	r0, [sp, #4]
   1af38:	f7ff fe92 	bl	1ac60 <smpActStorePin>

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1af3c:	9b01      	ldr	r3, [sp, #4]
   1af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1af40:	3330      	adds	r3, #48	; 0x30
   1af42:	2110      	movs	r1, #16
   1af44:	4618      	mov	r0, r3
   1af46:	f7fe ff69 	bl	19e1c <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1af4a:	9b01      	ldr	r3, [sp, #4]
   1af4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1af4e:	4619      	mov	r1, r3
   1af50:	9b01      	ldr	r3, [sp, #4]
   1af52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1af54:	3330      	adds	r3, #48	; 0x30
   1af56:	461a      	mov	r2, r3
   1af58:	9801      	ldr	r0, [sp, #4]
   1af5a:	f000 ff49 	bl	1bdf0 <smpCalcC1Part1>
}
   1af5e:	bf00      	nop
   1af60:	b003      	add	sp, #12
   1af62:	f85d fb04 	ldr.w	pc, [sp], #4

0001af66 <smpActPairCnfCalc2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1af66:	b500      	push	{lr}
   1af68:	b083      	sub	sp, #12
   1af6a:	9001      	str	r0, [sp, #4]
   1af6c:	9100      	str	r1, [sp, #0]
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   1af6e:	9b01      	ldr	r3, [sp, #4]
   1af70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1af72:	4619      	mov	r1, r3
   1af74:	9b00      	ldr	r3, [sp, #0]
   1af76:	685b      	ldr	r3, [r3, #4]
   1af78:	461a      	mov	r2, r3
   1af7a:	9801      	ldr	r0, [sp, #4]
   1af7c:	f001 f828 	bl	1bfd0 <smpCalcC1Part2>
}
   1af80:	bf00      	nop
   1af82:	b003      	add	sp, #12
   1af84:	f85d fb04 	ldr.w	pc, [sp], #4

0001af88 <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1af88:	b500      	push	{lr}
   1af8a:	b085      	sub	sp, #20
   1af8c:	9001      	str	r0, [sp, #4]
   1af8e:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   1af90:	9b01      	ldr	r3, [sp, #4]
   1af92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1af96:	2b00      	cmp	r3, #0
   1af98:	d001      	beq.n	1af9e <smpActSendPairCnf+0x16>
   1af9a:	2203      	movs	r2, #3
   1af9c:	e000      	b.n	1afa0 <smpActSendPairCnf+0x18>
   1af9e:	2204      	movs	r2, #4
   1afa0:	9b01      	ldr	r3, [sp, #4]
   1afa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1afa6:	9801      	ldr	r0, [sp, #4]
   1afa8:	f7ff fdba 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1afac:	2019      	movs	r0, #25
   1afae:	f001 f9b8 	bl	1c322 <smpMsgAlloc>
   1afb2:	9003      	str	r0, [sp, #12]
   1afb4:	9b03      	ldr	r3, [sp, #12]
   1afb6:	2b00      	cmp	r3, #0
   1afb8:	d012      	beq.n	1afe0 <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1afba:	9b03      	ldr	r3, [sp, #12]
   1afbc:	3308      	adds	r3, #8
   1afbe:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   1afc0:	9b02      	ldr	r3, [sp, #8]
   1afc2:	1c5a      	adds	r2, r3, #1
   1afc4:	9202      	str	r2, [sp, #8]
   1afc6:	2203      	movs	r2, #3
   1afc8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   1afca:	9b00      	ldr	r3, [sp, #0]
   1afcc:	685b      	ldr	r3, [r3, #4]
   1afce:	2210      	movs	r2, #16
   1afd0:	4619      	mov	r1, r3
   1afd2:	9802      	ldr	r0, [sp, #8]
   1afd4:	f7f1 f894 	bl	c100 <memcpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1afd8:	9903      	ldr	r1, [sp, #12]
   1afda:	9801      	ldr	r0, [sp, #4]
   1afdc:	f001 f960 	bl	1c2a0 <smpSendPkt>
  }
}
   1afe0:	bf00      	nop
   1afe2:	b005      	add	sp, #20
   1afe4:	f85d fb04 	ldr.w	pc, [sp], #4

0001afe8 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1afe8:	b500      	push	{lr}
   1afea:	b085      	sub	sp, #20
   1afec:	9001      	str	r0, [sp, #4]
   1afee:	9100      	str	r1, [sp, #0]
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1aff0:	9b00      	ldr	r3, [sp, #0]
   1aff2:	685b      	ldr	r3, [r3, #4]
   1aff4:	3309      	adds	r3, #9
   1aff6:	9303      	str	r3, [sp, #12]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
   1aff8:	9b01      	ldr	r3, [sp, #4]
   1affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1affc:	3310      	adds	r3, #16
   1affe:	2210      	movs	r2, #16
   1b000:	9903      	ldr	r1, [sp, #12]
   1b002:	4618      	mov	r0, r3
   1b004:	f7f1 f87c 	bl	c100 <memcpy>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
   1b008:	9b01      	ldr	r3, [sp, #4]
   1b00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b00c:	9a03      	ldr	r2, [sp, #12]
   1b00e:	4619      	mov	r1, r3
   1b010:	9801      	ldr	r0, [sp, #4]
   1b012:	f000 feed 	bl	1bdf0 <smpCalcC1Part1>
}
   1b016:	bf00      	nop
   1b018:	b005      	add	sp, #20
   1b01a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b01e <smpActPairCnfVerCalc2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b01e:	b500      	push	{lr}
   1b020:	b083      	sub	sp, #12
   1b022:	9001      	str	r0, [sp, #4]
   1b024:	9100      	str	r1, [sp, #0]
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   1b026:	9b01      	ldr	r3, [sp, #4]
   1b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b02a:	4619      	mov	r1, r3
   1b02c:	9b00      	ldr	r3, [sp, #0]
   1b02e:	685b      	ldr	r3, [r3, #4]
   1b030:	461a      	mov	r2, r3
   1b032:	9801      	ldr	r0, [sp, #4]
   1b034:	f000 ffcc 	bl	1bfd0 <smpCalcC1Part2>
}
   1b038:	bf00      	nop
   1b03a:	b003      	add	sp, #12
   1b03c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b040 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
   1b040:	b500      	push	{lr}
   1b042:	b08f      	sub	sp, #60	; 0x3c
   1b044:	9001      	str	r0, [sp, #4]
   1b046:	460b      	mov	r3, r1
   1b048:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1b04c:	4ba5      	ldr	r3, [pc, #660]	; (1b2e4 <smpSendKey+0x2a4>)
   1b04e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   1b052:	2b00      	cmp	r3, #0
   1b054:	d045      	beq.n	1b0e2 <smpSendKey+0xa2>
   1b056:	9b01      	ldr	r3, [sp, #4]
   1b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b05a:	781b      	ldrb	r3, [r3, #0]
   1b05c:	2b00      	cmp	r3, #0
   1b05e:	d040      	beq.n	1b0e2 <smpSendKey+0xa2>
   1b060:	9b01      	ldr	r3, [sp, #4]
   1b062:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b066:	2b00      	cmp	r3, #0
   1b068:	d13b      	bne.n	1b0e2 <smpSendKey+0xa2>
  {
    dmSecKeyIndEvt_t keyInd;

    /* pass LTK to app via DM */
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   1b06a:	9b01      	ldr	r3, [sp, #4]
   1b06c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b070:	4618      	mov	r0, r3
   1b072:	f7fa ffd1 	bl	16018 <DmConnRole>
   1b076:	4603      	mov	r3, r0
   1b078:	2b00      	cmp	r3, #0
   1b07a:	d103      	bne.n	1b084 <smpSendKey+0x44>
    {
      keyInd.type = DM_KEY_PEER_LTK;
   1b07c:	2302      	movs	r3, #2
   1b07e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1b082:	e002      	b.n	1b08a <smpSendKey+0x4a>
    }
    else
    {
      keyInd.type = DM_KEY_LOCAL_LTK;
   1b084:	2301      	movs	r3, #1
   1b086:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }

    keyInd.hdr.event = DM_SEC_KEY_IND;
   1b08a:	232f      	movs	r3, #47	; 0x2f
   1b08c:	f88d 300a 	strb.w	r3, [sp, #10]
    keyInd.hdr.param = pCcb->connId;
   1b090:	9b01      	ldr	r3, [sp, #4]
   1b092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b096:	b29b      	uxth	r3, r3
   1b098:	f8ad 3008 	strh.w	r3, [sp, #8]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1b09c:	9801      	ldr	r0, [sp, #4]
   1b09e:	f001 f975 	bl	1c38c <smpGetScSecLevel>
   1b0a2:	4603      	mov	r3, r0
   1b0a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    keyInd.keyData.ltk.ediv = 0;
   1b0a8:	2300      	movs	r3, #0
   1b0aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
   1b0ae:	ab02      	add	r3, sp, #8
   1b0b0:	3314      	adds	r3, #20
   1b0b2:	2208      	movs	r2, #8
   1b0b4:	2100      	movs	r1, #0
   1b0b6:	4618      	mov	r0, r3
   1b0b8:	f00d f9c0 	bl	2843c <memset>
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1b0bc:	9b01      	ldr	r3, [sp, #4]
   1b0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b0c0:	699b      	ldr	r3, [r3, #24]
   1b0c2:	f103 0210 	add.w	r2, r3, #16
   1b0c6:	ab02      	add	r3, sp, #8
   1b0c8:	3304      	adds	r3, #4
   1b0ca:	4611      	mov	r1, r2
   1b0cc:	4618      	mov	r0, r3
   1b0ce:	f7f9 fa31 	bl	14534 <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
   1b0d2:	ab02      	add	r3, sp, #8
   1b0d4:	4618      	mov	r0, r3
   1b0d6:	f7fb ffb7 	bl	17048 <DmSmpCbackExec>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
   1b0da:	9b01      	ldr	r3, [sp, #4]
   1b0dc:	2207      	movs	r2, #7
   1b0de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
   1b0e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b0e6:	2b00      	cmp	r3, #0
   1b0e8:	d016      	beq.n	1b118 <smpSendKey+0xd8>
   1b0ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b0ee:	2b01      	cmp	r3, #1
   1b0f0:	d104      	bne.n	1b0fc <smpSendKey+0xbc>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1b0f2:	9b01      	ldr	r3, [sp, #4]
   1b0f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b0f8:	2b07      	cmp	r3, #7
   1b0fa:	d00d      	beq.n	1b118 <smpSendKey+0xd8>
   1b0fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b100:	2b03      	cmp	r3, #3
   1b102:	d804      	bhi.n	1b10e <smpSendKey+0xce>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1b104:	9b01      	ldr	r3, [sp, #4]
   1b106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b10a:	2b09      	cmp	r3, #9
   1b10c:	d004      	beq.n	1b118 <smpSendKey+0xd8>
      (pCcb->lastSentKey == SMP_CMD_SIGN_INFO))
   1b10e:	9b01      	ldr	r3, [sp, #4]
   1b110:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1b114:	2b0a      	cmp	r3, #10
   1b116:	d101      	bne.n	1b11c <smpSendKey+0xdc>
  {
      return TRUE;
   1b118:	2301      	movs	r3, #1
   1b11a:	e0de      	b.n	1b2da <smpSendKey+0x29a>
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
   1b11c:	9b01      	ldr	r3, [sp, #4]
   1b11e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1b122:	2b00      	cmp	r3, #0
   1b124:	d001      	beq.n	1b12a <smpSendKey+0xea>
  {
    return FALSE;
   1b126:	2300      	movs	r3, #0
   1b128:	e0d7      	b.n	1b2da <smpSendKey+0x29a>
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
   1b12a:	2019      	movs	r0, #25
   1b12c:	f001 f8f9 	bl	1c322 <smpMsgAlloc>
   1b130:	900d      	str	r0, [sp, #52]	; 0x34
   1b132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b134:	2b00      	cmp	r3, #0
   1b136:	f000 80cf 	beq.w	1b2d8 <smpSendKey+0x298>
  {
    p = pPkt + L2C_PAYLOAD_START;
   1b13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b13c:	3308      	adds	r3, #8
   1b13e:	930c      	str	r3, [sp, #48]	; 0x30

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
   1b140:	9b01      	ldr	r3, [sp, #4]
   1b142:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b146:	2b00      	cmp	r3, #0
   1b148:	d115      	bne.n	1b176 <smpSendKey+0x136>
   1b14a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b14e:	f003 0301 	and.w	r3, r3, #1
   1b152:	2b00      	cmp	r3, #0
   1b154:	d00f      	beq.n	1b176 <smpSendKey+0x136>
    {
      /* generate LTK, EDIV, and RAND */
      smpGenerateLtk(pCcb);
   1b156:	9801      	ldr	r0, [sp, #4]
   1b158:	f001 f850 	bl	1c1fc <smpGenerateLtk>

      /* send first part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
   1b15c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b15e:	1c5a      	adds	r2, r3, #1
   1b160:	920c      	str	r2, [sp, #48]	; 0x30
   1b162:	2206      	movs	r2, #6
   1b164:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   1b166:	9b01      	ldr	r3, [sp, #4]
   1b168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b16a:	3304      	adds	r3, #4
   1b16c:	4619      	mov	r1, r3
   1b16e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b170:	f7f9 f9e0 	bl	14534 <Calc128Cpy>
   1b174:	e08b      	b.n	1b28e <smpSendKey+0x24e>
    }
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
   1b176:	9b01      	ldr	r3, [sp, #4]
   1b178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b17c:	2b06      	cmp	r3, #6
   1b17e:	d11f      	bne.n	1b1c0 <smpSendKey+0x180>
    {
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
   1b180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b182:	1c5a      	adds	r2, r3, #1
   1b184:	920c      	str	r2, [sp, #48]	; 0x30
   1b186:	2207      	movs	r2, #7
   1b188:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
   1b18a:	9b01      	ldr	r3, [sp, #4]
   1b18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b18e:	8b99      	ldrh	r1, [r3, #28]
   1b190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b192:	1c5a      	adds	r2, r3, #1
   1b194:	920c      	str	r2, [sp, #48]	; 0x30
   1b196:	b2ca      	uxtb	r2, r1
   1b198:	701a      	strb	r2, [r3, #0]
   1b19a:	9b01      	ldr	r3, [sp, #4]
   1b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b19e:	8b9b      	ldrh	r3, [r3, #28]
   1b1a0:	0a1b      	lsrs	r3, r3, #8
   1b1a2:	b299      	uxth	r1, r3
   1b1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1a6:	1c5a      	adds	r2, r3, #1
   1b1a8:	920c      	str	r2, [sp, #48]	; 0x30
   1b1aa:	b2ca      	uxtb	r2, r1
   1b1ac:	701a      	strb	r2, [r3, #0]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
   1b1ae:	9b01      	ldr	r3, [sp, #4]
   1b1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b1b2:	3314      	adds	r3, #20
   1b1b4:	2208      	movs	r2, #8
   1b1b6:	4619      	mov	r1, r3
   1b1b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b1ba:	f7f0 ffa1 	bl	c100 <memcpy>
   1b1be:	e066      	b.n	1b28e <smpSendKey+0x24e>
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   1b1c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b1c4:	f003 0302 	and.w	r3, r3, #2
   1b1c8:	2b00      	cmp	r3, #0
   1b1ca:	d016      	beq.n	1b1fa <smpSendKey+0x1ba>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   1b1cc:	9b01      	ldr	r3, [sp, #4]
   1b1ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   1b1d2:	2b00      	cmp	r3, #0
   1b1d4:	d004      	beq.n	1b1e0 <smpSendKey+0x1a0>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   1b1d6:	9b01      	ldr	r3, [sp, #4]
   1b1d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b1dc:	2b07      	cmp	r3, #7
   1b1de:	d10c      	bne.n	1b1fa <smpSendKey+0x1ba>
    {
      /* send first part of IRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
   1b1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1e2:	1c5a      	adds	r2, r3, #1
   1b1e4:	920c      	str	r2, [sp, #48]	; 0x30
   1b1e6:	2208      	movs	r2, #8
   1b1e8:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, DmSecGetLocalIrk());
   1b1ea:	f7fb ffcb 	bl	17184 <DmSecGetLocalIrk>
   1b1ee:	4603      	mov	r3, r0
   1b1f0:	4619      	mov	r1, r3
   1b1f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b1f4:	f7f9 f99e 	bl	14534 <Calc128Cpy>
   1b1f8:	e049      	b.n	1b28e <smpSendKey+0x24e>
    }
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
   1b1fa:	9b01      	ldr	r3, [sp, #4]
   1b1fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b200:	2b08      	cmp	r3, #8
   1b202:	d114      	bne.n	1b22e <smpSendKey+0x1ee>
    {
      /* send second part of IRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
   1b204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b206:	1c5a      	adds	r2, r3, #1
   1b208:	920c      	str	r2, [sp, #48]	; 0x30
   1b20a:	2209      	movs	r2, #9
   1b20c:	701a      	strb	r2, [r3, #0]
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
   1b20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b210:	1c5a      	adds	r2, r3, #1
   1b212:	920c      	str	r2, [sp, #48]	; 0x30
   1b214:	2200      	movs	r2, #0
   1b216:	701a      	strb	r2, [r3, #0]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
   1b218:	f004 f9a0 	bl	1f55c <HciGetBdAddr>
   1b21c:	4603      	mov	r3, r0
   1b21e:	4619      	mov	r1, r3
   1b220:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b222:	f7f9 f941 	bl	144a8 <BdaCpy>
   1b226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b228:	3306      	adds	r3, #6
   1b22a:	930c      	str	r3, [sp, #48]	; 0x30
   1b22c:	e02f      	b.n	1b28e <smpSendKey+0x24e>

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b22e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b232:	f003 0304 	and.w	r3, r3, #4
   1b236:	2b00      	cmp	r3, #0
   1b238:	d01b      	beq.n	1b272 <smpSendKey+0x232>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
   1b23a:	9b01      	ldr	r3, [sp, #4]
   1b23c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b240:	2b00      	cmp	r3, #0
   1b242:	d009      	beq.n	1b258 <smpSendKey+0x218>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
   1b244:	9b01      	ldr	r3, [sp, #4]
   1b246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b24a:	2b09      	cmp	r3, #9
   1b24c:	d004      	beq.n	1b258 <smpSendKey+0x218>
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   1b24e:	9b01      	ldr	r3, [sp, #4]
   1b250:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
   1b254:	2b07      	cmp	r3, #7
   1b256:	d10c      	bne.n	1b272 <smpSendKey+0x232>
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
   1b258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b25a:	1c5a      	adds	r2, r3, #1
   1b25c:	920c      	str	r2, [sp, #48]	; 0x30
   1b25e:	220a      	movs	r2, #10
   1b260:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, DmSecGetLocalCsrk());
   1b262:	f7fb ff89 	bl	17178 <DmSecGetLocalCsrk>
   1b266:	4603      	mov	r3, r0
   1b268:	4619      	mov	r1, r3
   1b26a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b26c:	f7f9 f962 	bl	14534 <Calc128Cpy>
   1b270:	e00d      	b.n	1b28e <smpSendKey+0x24e>
    }
    else
    {
      /* should never get here */
      WsfMsgFree(pPkt);
   1b272:	980d      	ldr	r0, [sp, #52]	; 0x34
   1b274:	f7f1 ff96 	bl	d1a4 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
   1b278:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1b27c:	9b01      	ldr	r3, [sp, #4]
   1b27e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1b282:	461a      	mov	r2, r3
   1b284:	4818      	ldr	r0, [pc, #96]	; (1b2e8 <smpSendKey+0x2a8>)
   1b286:	f7f2 fbdf 	bl	da48 <WsfTrace>
      return TRUE;
   1b28a:	2301      	movs	r3, #1
   1b28c:	e025      	b.n	1b2da <smpSendKey+0x29a>
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1b28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b290:	7a1a      	ldrb	r2, [r3, #8]
   1b292:	9b01      	ldr	r3, [sp, #4]
   1b294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
   1b298:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b29a:	9801      	ldr	r0, [sp, #4]
   1b29c:	f001 f800 	bl	1c2a0 <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
   1b2a0:	9b01      	ldr	r3, [sp, #4]
   1b2a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1b2a6:	2b00      	cmp	r3, #0
   1b2a8:	d116      	bne.n	1b2d8 <smpSendKey+0x298>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   1b2aa:	2004      	movs	r0, #4
   1b2ac:	f7f1 ff62 	bl	d174 <WsfMsgAlloc>
   1b2b0:	900b      	str	r0, [sp, #44]	; 0x2c
   1b2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b2b4:	2b00      	cmp	r3, #0
   1b2b6:	d00f      	beq.n	1b2d8 <smpSendKey+0x298>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
   1b2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b2ba:	220c      	movs	r2, #12
   1b2bc:	709a      	strb	r2, [r3, #2]
        pHdr->param = pCcb->connId;
   1b2be:	9b01      	ldr	r3, [sp, #4]
   1b2c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b2c4:	b29a      	uxth	r2, r3
   1b2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b2c8:	801a      	strh	r2, [r3, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
   1b2ca:	4b06      	ldr	r3, [pc, #24]	; (1b2e4 <smpSendKey+0x2a4>)
   1b2cc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   1b2d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b2d2:	4618      	mov	r0, r3
   1b2d4:	f7f1 ff72 	bl	d1bc <WsfMsgSend>
      }
    }
  }

  return FALSE;
   1b2d8:	2300      	movs	r3, #0
}
   1b2da:	4618      	mov	r0, r3
   1b2dc:	b00f      	add	sp, #60	; 0x3c
   1b2de:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2e2:	bf00      	nop
   1b2e4:	100095f8 	.word	0x100095f8
   1b2e8:	0002bac8 	.word	0x0002bac8

0001b2ec <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
   1b2ec:	b500      	push	{lr}
   1b2ee:	b087      	sub	sp, #28
   1b2f0:	9003      	str	r0, [sp, #12]
   1b2f2:	9102      	str	r1, [sp, #8]
   1b2f4:	9201      	str	r2, [sp, #4]
   1b2f6:	f88d 3003 	strb.w	r3, [sp, #3]
  bool_t    keyIndReady = FALSE;
   1b2fa:	2300      	movs	r3, #0
   1b2fc:	f88d 3017 	strb.w	r3, [sp, #23]
  bool_t    done = FALSE;
   1b300:	2300      	movs	r3, #0
   1b302:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
   1b306:	9b01      	ldr	r3, [sp, #4]
   1b308:	3308      	adds	r3, #8
   1b30a:	9301      	str	r3, [sp, #4]
  cmdCode = *pBuf++;
   1b30c:	9b01      	ldr	r3, [sp, #4]
   1b30e:	1c5a      	adds	r2, r3, #1
   1b310:	9201      	str	r2, [sp, #4]
   1b312:	781b      	ldrb	r3, [r3, #0]
   1b314:	f88d 3015 	strb.w	r3, [sp, #21]

  if (cmdCode == SMP_CMD_ENC_INFO)
   1b318:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b31c:	2b06      	cmp	r3, #6
   1b31e:	d106      	bne.n	1b32e <smpProcRcvKey+0x42>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
   1b320:	9b02      	ldr	r3, [sp, #8]
   1b322:	3304      	adds	r3, #4
   1b324:	9901      	ldr	r1, [sp, #4]
   1b326:	4618      	mov	r0, r3
   1b328:	f7f9 f904 	bl	14534 <Calc128Cpy>
   1b32c:	e062      	b.n	1b3f4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
   1b32e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b332:	2b07      	cmp	r3, #7
   1b334:	d129      	bne.n	1b38a <smpProcRcvKey+0x9e>
  {
    /* parse master identification packet */
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
   1b336:	9b01      	ldr	r3, [sp, #4]
   1b338:	781b      	ldrb	r3, [r3, #0]
   1b33a:	b29a      	uxth	r2, r3
   1b33c:	9b01      	ldr	r3, [sp, #4]
   1b33e:	3301      	adds	r3, #1
   1b340:	781b      	ldrb	r3, [r3, #0]
   1b342:	b29b      	uxth	r3, r3
   1b344:	021b      	lsls	r3, r3, #8
   1b346:	b29b      	uxth	r3, r3
   1b348:	4413      	add	r3, r2
   1b34a:	b29a      	uxth	r2, r3
   1b34c:	9b02      	ldr	r3, [sp, #8]
   1b34e:	839a      	strh	r2, [r3, #28]
   1b350:	9b01      	ldr	r3, [sp, #4]
   1b352:	3302      	adds	r3, #2
   1b354:	9301      	str	r3, [sp, #4]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
   1b356:	9b02      	ldr	r3, [sp, #8]
   1b358:	3314      	adds	r3, #20
   1b35a:	2208      	movs	r2, #8
   1b35c:	9901      	ldr	r1, [sp, #4]
   1b35e:	4618      	mov	r0, r3
   1b360:	f7f0 fece 	bl	c100 <memcpy>
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b364:	9b03      	ldr	r3, [sp, #12]
   1b366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1b36a:	f003 0304 	and.w	r3, r3, #4
   1b36e:	2b00      	cmp	r3, #0
   1b370:	d001      	beq.n	1b376 <smpProcRcvKey+0x8a>
   1b372:	2202      	movs	r2, #2
   1b374:	e000      	b.n	1b378 <smpProcRcvKey+0x8c>
   1b376:	2201      	movs	r2, #1
   1b378:	9b02      	ldr	r3, [sp, #8]
   1b37a:	77da      	strb	r2, [r3, #31]
    pKeyInd->type = DM_KEY_PEER_LTK;
   1b37c:	9b02      	ldr	r3, [sp, #8]
   1b37e:	2202      	movs	r2, #2
   1b380:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
   1b382:	2301      	movs	r3, #1
   1b384:	f88d 3017 	strb.w	r3, [sp, #23]
   1b388:	e034      	b.n	1b3f4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
   1b38a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b38e:	2b08      	cmp	r3, #8
   1b390:	d106      	bne.n	1b3a0 <smpProcRcvKey+0xb4>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
   1b392:	9b02      	ldr	r3, [sp, #8]
   1b394:	3304      	adds	r3, #4
   1b396:	9901      	ldr	r1, [sp, #4]
   1b398:	4618      	mov	r0, r3
   1b39a:	f7f9 f8cb 	bl	14534 <Calc128Cpy>
   1b39e:	e029      	b.n	1b3f4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
   1b3a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b3a4:	2b09      	cmp	r3, #9
   1b3a6:	d115      	bne.n	1b3d4 <smpProcRcvKey+0xe8>
  {
    /* parse identity address information packet */
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
   1b3a8:	9b01      	ldr	r3, [sp, #4]
   1b3aa:	1c5a      	adds	r2, r3, #1
   1b3ac:	9201      	str	r2, [sp, #4]
   1b3ae:	781a      	ldrb	r2, [r3, #0]
   1b3b0:	9b02      	ldr	r3, [sp, #8]
   1b3b2:	769a      	strb	r2, [r3, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
   1b3b4:	9b02      	ldr	r3, [sp, #8]
   1b3b6:	3314      	adds	r3, #20
   1b3b8:	9901      	ldr	r1, [sp, #4]
   1b3ba:	4618      	mov	r0, r3
   1b3bc:	f7f9 f874 	bl	144a8 <BdaCpy>
   1b3c0:	9b01      	ldr	r3, [sp, #4]
   1b3c2:	3306      	adds	r3, #6
   1b3c4:	9301      	str	r3, [sp, #4]
    pKeyInd->type = DM_KEY_IRK;
   1b3c6:	9b02      	ldr	r3, [sp, #8]
   1b3c8:	2204      	movs	r2, #4
   1b3ca:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
   1b3cc:	2301      	movs	r3, #1
   1b3ce:	f88d 3017 	strb.w	r3, [sp, #23]
   1b3d2:	e00f      	b.n	1b3f4 <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
   1b3d4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b3d8:	2b0a      	cmp	r3, #10
   1b3da:	d10b      	bne.n	1b3f4 <smpProcRcvKey+0x108>
  {
    /* parse signing information packet */
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
   1b3dc:	9b02      	ldr	r3, [sp, #8]
   1b3de:	3304      	adds	r3, #4
   1b3e0:	9901      	ldr	r1, [sp, #4]
   1b3e2:	4618      	mov	r0, r3
   1b3e4:	f7f9 f8a6 	bl	14534 <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
   1b3e8:	9b02      	ldr	r3, [sp, #8]
   1b3ea:	2208      	movs	r2, #8
   1b3ec:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
   1b3ee:	2301      	movs	r3, #1
   1b3f0:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
   1b3f4:	9b03      	ldr	r3, [sp, #12]
   1b3f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1b3fa:	2b06      	cmp	r3, #6
   1b3fc:	d004      	beq.n	1b408 <smpProcRcvKey+0x11c>
   1b3fe:	9b03      	ldr	r3, [sp, #12]
   1b400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1b404:	2b08      	cmp	r3, #8
   1b406:	d108      	bne.n	1b41a <smpProcRcvKey+0x12e>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
   1b408:	9b03      	ldr	r3, [sp, #12]
   1b40a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1b40e:	3301      	adds	r3, #1
   1b410:	b2da      	uxtb	r2, r3
   1b412:	9b03      	ldr	r3, [sp, #12]
   1b414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1b418:	e027      	b.n	1b46a <smpProcRcvKey+0x17e>
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
   1b41a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b41e:	f003 0302 	and.w	r3, r3, #2
   1b422:	2b00      	cmp	r3, #0
   1b424:	d009      	beq.n	1b43a <smpProcRcvKey+0x14e>
   1b426:	9b03      	ldr	r3, [sp, #12]
   1b428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1b42c:	2b07      	cmp	r3, #7
   1b42e:	d104      	bne.n	1b43a <smpProcRcvKey+0x14e>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1b430:	9b03      	ldr	r3, [sp, #12]
   1b432:	2208      	movs	r2, #8
   1b434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1b438:	e017      	b.n	1b46a <smpProcRcvKey+0x17e>
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b43a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b43e:	f003 0304 	and.w	r3, r3, #4
   1b442:	2b00      	cmp	r3, #0
   1b444:	d00e      	beq.n	1b464 <smpProcRcvKey+0x178>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   1b446:	9b03      	ldr	r3, [sp, #12]
   1b448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b44c:	2b07      	cmp	r3, #7
   1b44e:	d004      	beq.n	1b45a <smpProcRcvKey+0x16e>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   1b450:	9b03      	ldr	r3, [sp, #12]
   1b452:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1b456:	2b09      	cmp	r3, #9
   1b458:	d104      	bne.n	1b464 <smpProcRcvKey+0x178>
  {
    /* wait for SRK */
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1b45a:	9b03      	ldr	r3, [sp, #12]
   1b45c:	220a      	movs	r2, #10
   1b45e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1b462:	e002      	b.n	1b46a <smpProcRcvKey+0x17e>
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
   1b464:	2301      	movs	r3, #1
   1b466:	f88d 3016 	strb.w	r3, [sp, #22]
  }

  /* call callback if key ready */
  if (keyIndReady)
   1b46a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1b46e:	2b00      	cmp	r3, #0
   1b470:	d005      	beq.n	1b47e <smpProcRcvKey+0x192>
  {
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   1b472:	9b02      	ldr	r3, [sp, #8]
   1b474:	222f      	movs	r2, #47	; 0x2f
   1b476:	709a      	strb	r2, [r3, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   1b478:	9802      	ldr	r0, [sp, #8]
   1b47a:	f7fb fde5 	bl	17048 <DmSmpCbackExec>
  }

  return done;
   1b47e:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
   1b482:	4618      	mov	r0, r3
   1b484:	b007      	add	sp, #28
   1b486:	f85d fb04 	ldr.w	pc, [sp], #4

0001b48a <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b48a:	b500      	push	{lr}
   1b48c:	b085      	sub	sp, #20
   1b48e:	9001      	str	r0, [sp, #4]
   1b490:	9100      	str	r1, [sp, #0]
  uint32_t timeout;

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);
   1b492:	9900      	ldr	r1, [sp, #0]
   1b494:	9801      	ldr	r0, [sp, #4]
   1b496:	f7ff fbd1 	bl	1ac3c <smpActPairingCancel>

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   1b49a:	9b01      	ldr	r3, [sp, #4]
   1b49c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b4a0:	4618      	mov	r0, r3
   1b4a2:	f000 fa23 	bl	1b8ec <SmpDbMaxAttemptReached>
   1b4a6:	9003      	str	r0, [sp, #12]

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1b4a8:	9b01      	ldr	r3, [sp, #4]
   1b4aa:	2210      	movs	r2, #16
   1b4ac:	771a      	strb	r2, [r3, #28]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
   1b4ae:	9b01      	ldr	r3, [sp, #4]
   1b4b0:	3310      	adds	r3, #16
   1b4b2:	9903      	ldr	r1, [sp, #12]
   1b4b4:	4618      	mov	r0, r3
   1b4b6:	f7f2 f9ef 	bl	d898 <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
   1b4ba:	9b01      	ldr	r3, [sp, #4]
   1b4bc:	2200      	movs	r2, #0
   1b4be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
   1b4c2:	bf00      	nop
   1b4c4:	b005      	add	sp, #20
   1b4c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001b4ca <smpActAttemptRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b4ca:	b082      	sub	sp, #8
   1b4cc:	9001      	str	r0, [sp, #4]
   1b4ce:	9100      	str	r1, [sp, #0]
  /* set that attempt was received */
  pCcb->attempts = 1;
   1b4d0:	9b01      	ldr	r3, [sp, #4]
   1b4d2:	2201      	movs	r2, #1
   1b4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
   1b4d8:	bf00      	nop
   1b4da:	b002      	add	sp, #8
   1b4dc:	4770      	bx	lr

0001b4de <smpActNotifyDmAttemptsFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b4de:	b500      	push	{lr}
   1b4e0:	b083      	sub	sp, #12
   1b4e2:	9001      	str	r0, [sp, #4]
   1b4e4:	9100      	str	r1, [sp, #0]
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
   1b4e6:	9b00      	ldr	r3, [sp, #0]
   1b4e8:	2209      	movs	r2, #9
   1b4ea:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b4ec:	9b00      	ldr	r3, [sp, #0]
   1b4ee:	222b      	movs	r2, #43	; 0x2b
   1b4f0:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b4f2:	9800      	ldr	r0, [sp, #0]
   1b4f4:	f7fb fda8 	bl	17048 <DmSmpCbackExec>
}
   1b4f8:	bf00      	nop
   1b4fa:	b003      	add	sp, #12
   1b4fc:	f85d fb04 	ldr.w	pc, [sp], #4

0001b500 <smpActNotifyDmRspToFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b500:	b500      	push	{lr}
   1b502:	b083      	sub	sp, #12
   1b504:	9001      	str	r0, [sp, #4]
   1b506:	9100      	str	r1, [sp, #0]
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
   1b508:	9b00      	ldr	r3, [sp, #0]
   1b50a:	22e1      	movs	r2, #225	; 0xe1
   1b50c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b50e:	9b00      	ldr	r3, [sp, #0]
   1b510:	222b      	movs	r2, #43	; 0x2b
   1b512:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b514:	9800      	ldr	r0, [sp, #0]
   1b516:	f7fb fd97 	bl	17048 <DmSmpCbackExec>
}
   1b51a:	bf00      	nop
   1b51c:	b003      	add	sp, #12
   1b51e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b522 <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b522:	b500      	push	{lr}
   1b524:	b083      	sub	sp, #12
   1b526:	9001      	str	r0, [sp, #4]
   1b528:	9100      	str	r1, [sp, #0]
  /* check if attempt was received */
  if (pCcb->attempts)
   1b52a:	9b01      	ldr	r3, [sp, #4]
   1b52c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1b530:	2b00      	cmp	r3, #0
   1b532:	d00e      	beq.n	1b552 <smpActCheckAttempts+0x30>
  {
    pCcb->attempts = 0;
   1b534:	9b01      	ldr	r3, [sp, #4]
   1b536:	2200      	movs	r2, #0
   1b538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
   1b53c:	2109      	movs	r1, #9
   1b53e:	9801      	ldr	r0, [sp, #4]
   1b540:	f7ff fb40 	bl	1abc4 <smpSendPairingFailed>

    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);
   1b544:	9900      	ldr	r1, [sp, #0]
   1b546:	9801      	ldr	r0, [sp, #4]
   1b548:	f7ff ffc9 	bl	1b4de <smpActNotifyDmAttemptsFailure>

    smpCleanup(pCcb);
   1b54c:	9801      	ldr	r0, [sp, #4]
   1b54e:	f7ff faff 	bl	1ab50 <smpCleanup>
  }
}
   1b552:	bf00      	nop
   1b554:	b003      	add	sp, #12
   1b556:	f85d fb04 	ldr.w	pc, [sp], #4

0001b55a <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b55a:	b500      	push	{lr}
   1b55c:	b085      	sub	sp, #20
   1b55e:	9001      	str	r0, [sp, #4]
   1b560:	9100      	str	r1, [sp, #0]
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);
   1b562:	9801      	ldr	r0, [sp, #4]
   1b564:	f7ff faf4 	bl	1ab50 <smpCleanup>

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1b568:	9b01      	ldr	r3, [sp, #4]
   1b56a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b56e:	2200      	movs	r2, #0
   1b570:	2101      	movs	r1, #1
   1b572:	4618      	mov	r0, r3
   1b574:	f7fa fcc2 	bl	15efc <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
   1b578:	9b01      	ldr	r3, [sp, #4]
   1b57a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1b57e:	f88d 300c 	strb.w	r3, [sp, #12]
  pairCmpl.hdr.param = pCcb->connId;
   1b582:	9b01      	ldr	r3, [sp, #4]
   1b584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b588:	b29b      	uxth	r3, r3
   1b58a:	f8ad 3008 	strh.w	r3, [sp, #8]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   1b58e:	232a      	movs	r3, #42	; 0x2a
   1b590:	f88d 300a 	strb.w	r3, [sp, #10]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   1b594:	ab02      	add	r3, sp, #8
   1b596:	4618      	mov	r0, r3
   1b598:	f7fb fd56 	bl	17048 <DmSmpCbackExec>
}
   1b59c:	bf00      	nop
   1b59e:	b005      	add	sp, #20
   1b5a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5a4 <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b5a4:	b500      	push	{lr}
   1b5a6:	b085      	sub	sp, #20
   1b5a8:	9001      	str	r0, [sp, #4]
   1b5aa:	9100      	str	r1, [sp, #0]
#if SMP_EXTRA_TRACE == TRUE
  if (smpCb.lescSupported)
    SMP_TRACE_INFO2("SMP Exe: evt=%s st=%s", smpEventStr(pMsg->hdr.event), smpStateStr(pCcb->state));
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1b5ac:	9b00      	ldr	r3, [sp, #0]
   1b5ae:	789b      	ldrb	r3, [r3, #2]
   1b5b0:	4619      	mov	r1, r3
   1b5b2:	9b01      	ldr	r3, [sp, #4]
   1b5b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   1b5b8:	461a      	mov	r2, r3
   1b5ba:	4824      	ldr	r0, [pc, #144]	; (1b64c <smpSmExecute+0xa8>)
   1b5bc:	f7f2 fa44 	bl	da48 <WsfTrace>

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   1b5c0:	9b01      	ldr	r3, [sp, #4]
   1b5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1b5c6:	4618      	mov	r0, r3
   1b5c8:	f7fa fd26 	bl	16018 <DmConnRole>
   1b5cc:	4603      	mov	r3, r0
   1b5ce:	2b01      	cmp	r3, #1
   1b5d0:	d103      	bne.n	1b5da <smpSmExecute+0x36>
   1b5d2:	4b1f      	ldr	r3, [pc, #124]	; (1b650 <smpSmExecute+0xac>)
   1b5d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   1b5d8:	e002      	b.n	1b5e0 <smpSmExecute+0x3c>
   1b5da:	4b1d      	ldr	r3, [pc, #116]	; (1b650 <smpSmExecute+0xac>)
   1b5dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   1b5e0:	9302      	str	r3, [sp, #8]
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   1b5e2:	9b02      	ldr	r3, [sp, #8]
   1b5e4:	681a      	ldr	r2, [r3, #0]
   1b5e6:	9b01      	ldr	r3, [sp, #4]
   1b5e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   1b5ec:	009b      	lsls	r3, r3, #2
   1b5ee:	4413      	add	r3, r2
   1b5f0:	681b      	ldr	r3, [r3, #0]
   1b5f2:	9303      	str	r3, [sp, #12]
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   1b5f4:	9b03      	ldr	r3, [sp, #12]
   1b5f6:	781a      	ldrb	r2, [r3, #0]
   1b5f8:	9b00      	ldr	r3, [sp, #0]
   1b5fa:	789b      	ldrb	r3, [r3, #2]
   1b5fc:	429a      	cmp	r2, r3
   1b5fe:	d10f      	bne.n	1b620 <smpSmExecute+0x7c>
      {
        /* set next state */
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
   1b600:	9b03      	ldr	r3, [sp, #12]
   1b602:	785a      	ldrb	r2, [r3, #1]
   1b604:	9b01      	ldr	r3, [sp, #4]
   1b606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* execute action */
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   1b60a:	9b02      	ldr	r3, [sp, #8]
   1b60c:	685a      	ldr	r2, [r3, #4]
   1b60e:	9b03      	ldr	r3, [sp, #12]
   1b610:	789b      	ldrb	r3, [r3, #2]
   1b612:	009b      	lsls	r3, r3, #2
   1b614:	4413      	add	r3, r2
   1b616:	681b      	ldr	r3, [r3, #0]
   1b618:	9900      	ldr	r1, [sp, #0]
   1b61a:	9801      	ldr	r0, [sp, #4]
   1b61c:	4798      	blx	r3

        return;
   1b61e:	e011      	b.n	1b644 <smpSmExecute+0xa0>
      }

      /* next entry */
      pTblEntry++;
   1b620:	9b03      	ldr	r3, [sp, #12]
   1b622:	3303      	adds	r3, #3
   1b624:	9303      	str	r3, [sp, #12]

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
   1b626:	9b03      	ldr	r3, [sp, #12]
   1b628:	781b      	ldrb	r3, [r3, #0]
   1b62a:	2b00      	cmp	r3, #0
   1b62c:	d1e2      	bne.n	1b5f4 <smpSmExecute+0x50>

    /* if we've reached end of the common state table */
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
   1b62e:	9b02      	ldr	r3, [sp, #8]
   1b630:	689b      	ldr	r3, [r3, #8]
   1b632:	330c      	adds	r3, #12
   1b634:	9a03      	ldr	r2, [sp, #12]
   1b636:	429a      	cmp	r2, r3
   1b638:	d003      	beq.n	1b642 <smpSmExecute+0x9e>
    }
    /* else we haven't run through common state table yet */
    else
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
   1b63a:	9b02      	ldr	r3, [sp, #8]
   1b63c:	689b      	ldr	r3, [r3, #8]
   1b63e:	9303      	str	r3, [sp, #12]
  for(;;)
   1b640:	e7d8      	b.n	1b5f4 <smpSmExecute+0x50>
      break;
   1b642:	bf00      	nop
    }
  }
}
   1b644:	b005      	add	sp, #20
   1b646:	f85d fb04 	ldr.w	pc, [sp], #4
   1b64a:	bf00      	nop
   1b64c:	0002bb00 	.word	0x0002bb00
   1b650:	100095f8 	.word	0x100095f8

0001b654 <smpDbStartServiceTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpDbStartServiceTimer(void)
{
   1b654:	b508      	push	{r3, lr}
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1b656:	4b06      	ldr	r3, [pc, #24]	; (1b670 <smpDbStartServiceTimer+0x1c>)
   1b658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   1b65c:	2b00      	cmp	r3, #0
   1b65e:	d104      	bne.n	1b66a <smpDbStartServiceTimer+0x16>
  {
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1b660:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b664:	4803      	ldr	r0, [pc, #12]	; (1b674 <smpDbStartServiceTimer+0x20>)
   1b666:	f7f2 f917 	bl	d898 <WsfTimerStartMs>
  }
}
   1b66a:	bf00      	nop
   1b66c:	bd08      	pop	{r3, pc}
   1b66e:	bf00      	nop
   1b670:	100044f0 	.word	0x100044f0
   1b674:	10004538 	.word	0x10004538

0001b678 <smpDbRecordInUse>:
 *
 *  \return TRUE if record in use, else FALSE.
 */
/*************************************************************************************************/
static bool_t smpDbRecordInUse(smpDbDevice_t *pRec)
{
   1b678:	b082      	sub	sp, #8
   1b67a:	9001      	str	r0, [sp, #4]
  /* When failCount, lockMs, and attemptMult are zero, the record can be used for another device. */
  if (pRec->failCount > 0)
   1b67c:	9b01      	ldr	r3, [sp, #4]
   1b67e:	79db      	ldrb	r3, [r3, #7]
   1b680:	2b00      	cmp	r3, #0
   1b682:	d001      	beq.n	1b688 <smpDbRecordInUse+0x10>
  {
    return TRUE;
   1b684:	2301      	movs	r3, #1
   1b686:	e00c      	b.n	1b6a2 <smpDbRecordInUse+0x2a>
  }

  if (pRec->lockMs > 0)
   1b688:	9b01      	ldr	r3, [sp, #4]
   1b68a:	68db      	ldr	r3, [r3, #12]
   1b68c:	2b00      	cmp	r3, #0
   1b68e:	d001      	beq.n	1b694 <smpDbRecordInUse+0x1c>
  {
    return TRUE;
   1b690:	2301      	movs	r3, #1
   1b692:	e006      	b.n	1b6a2 <smpDbRecordInUse+0x2a>
  }

  if (pRec->attemptMult > 0)
   1b694:	9b01      	ldr	r3, [sp, #4]
   1b696:	891b      	ldrh	r3, [r3, #8]
   1b698:	2b00      	cmp	r3, #0
   1b69a:	d001      	beq.n	1b6a0 <smpDbRecordInUse+0x28>
  {
    return TRUE;
   1b69c:	2301      	movs	r3, #1
   1b69e:	e000      	b.n	1b6a2 <smpDbRecordInUse+0x2a>
  }

  return FALSE;
   1b6a0:	2300      	movs	r3, #0
}
   1b6a2:	4618      	mov	r0, r3
   1b6a4:	b002      	add	sp, #8
   1b6a6:	4770      	bx	lr

0001b6a8 <smpDbAddDevice>:
 *
 *  \return Pointer to DB record or NULL if database full.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbAddDevice(uint8_t *pAddr, uint8_t addrType)
{
   1b6a8:	b500      	push	{lr}
   1b6aa:	b085      	sub	sp, #20
   1b6ac:	9001      	str	r0, [sp, #4]
   1b6ae:	460b      	mov	r3, r1
   1b6b0:	f88d 3003 	strb.w	r3, [sp, #3]
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   1b6b4:	4b17      	ldr	r3, [pc, #92]	; (1b714 <smpDbAddDevice+0x6c>)
   1b6b6:	9303      	str	r3, [sp, #12]
  uint8_t i;

  SMP_TRACE_INFO0("smpDbAddDevice");
   1b6b8:	4817      	ldr	r0, [pc, #92]	; (1b718 <smpDbAddDevice+0x70>)
   1b6ba:	f7f2 f9c5 	bl	da48 <WsfTrace>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b6be:	2301      	movs	r3, #1
   1b6c0:	f88d 300b 	strb.w	r3, [sp, #11]
   1b6c4:	e01d      	b.n	1b702 <smpDbAddDevice+0x5a>
  {
    if (smpDbRecordInUse(pRec) == FALSE)
   1b6c6:	9803      	ldr	r0, [sp, #12]
   1b6c8:	f7ff ffd6 	bl	1b678 <smpDbRecordInUse>
   1b6cc:	4603      	mov	r3, r0
   1b6ce:	2b00      	cmp	r3, #0
   1b6d0:	d10f      	bne.n	1b6f2 <smpDbAddDevice+0x4a>
    {
      /* Reset record. */
      memset(pRec, 0, sizeof(smpDbDevice_t));
   1b6d2:	2218      	movs	r2, #24
   1b6d4:	2100      	movs	r1, #0
   1b6d6:	9803      	ldr	r0, [sp, #12]
   1b6d8:	f00c feb0 	bl	2843c <memset>

      pRec->addrType = addrType;
   1b6dc:	9b03      	ldr	r3, [sp, #12]
   1b6de:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1b6e2:	719a      	strb	r2, [r3, #6]
      BdaCpy(pRec->peerAddr, pAddr);
   1b6e4:	9b03      	ldr	r3, [sp, #12]
   1b6e6:	9901      	ldr	r1, [sp, #4]
   1b6e8:	4618      	mov	r0, r3
   1b6ea:	f7f8 fedd 	bl	144a8 <BdaCpy>
      return pRec;
   1b6ee:	9b03      	ldr	r3, [sp, #12]
   1b6f0:	e00c      	b.n	1b70c <smpDbAddDevice+0x64>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b6f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1b6f6:	3301      	adds	r3, #1
   1b6f8:	f88d 300b 	strb.w	r3, [sp, #11]
   1b6fc:	9b03      	ldr	r3, [sp, #12]
   1b6fe:	3318      	adds	r3, #24
   1b700:	9303      	str	r3, [sp, #12]
   1b702:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1b706:	2b02      	cmp	r3, #2
   1b708:	d9dd      	bls.n	1b6c6 <smpDbAddDevice+0x1e>
    }
  }

  return NULL;
   1b70a:	2300      	movs	r3, #0
}
   1b70c:	4618      	mov	r0, r3
   1b70e:	b005      	add	sp, #20
   1b710:	f85d fb04 	ldr.w	pc, [sp], #4
   1b714:	10004508 	.word	0x10004508
   1b718:	0002bb20 	.word	0x0002bb20

0001b71c <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
   1b71c:	b500      	push	{lr}
   1b71e:	b087      	sub	sp, #28
   1b720:	4603      	mov	r3, r0
   1b722:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   1b726:	4b2b      	ldr	r3, [pc, #172]	; (1b7d4 <smpDbGetRecord+0xb8>)
   1b728:	9305      	str	r3, [sp, #20]
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
   1b72a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b72e:	4618      	mov	r0, r3
   1b730:	f7fa fb5a 	bl	15de8 <DmConnPeerAddrType>
   1b734:	4603      	mov	r3, r0
   1b736:	4618      	mov	r0, r3
   1b738:	f7fb f88a 	bl	16850 <DmHostAddrType>
   1b73c:	4603      	mov	r3, r0
   1b73e:	f88d 3012 	strb.w	r3, [sp, #18]
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1b742:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b746:	4618      	mov	r0, r3
   1b748:	f7fa fb62 	bl	15e10 <DmConnPeerAddr>
   1b74c:	9003      	str	r0, [sp, #12]
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1b74e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b752:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1b756:	4619      	mov	r1, r3
   1b758:	481f      	ldr	r0, [pc, #124]	; (1b7d8 <smpDbGetRecord+0xbc>)
   1b75a:	f7f2 f975 	bl	da48 <WsfTrace>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b75e:	2301      	movs	r3, #1
   1b760:	f88d 3013 	strb.w	r3, [sp, #19]
   1b764:	e01d      	b.n	1b7a2 <smpDbGetRecord+0x86>
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1b766:	9805      	ldr	r0, [sp, #20]
   1b768:	f7ff ff86 	bl	1b678 <smpDbRecordInUse>
   1b76c:	4603      	mov	r3, r0
   1b76e:	2b00      	cmp	r3, #0
   1b770:	d00f      	beq.n	1b792 <smpDbGetRecord+0x76>
   1b772:	9b05      	ldr	r3, [sp, #20]
   1b774:	799b      	ldrb	r3, [r3, #6]
   1b776:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1b77a:	429a      	cmp	r2, r3
   1b77c:	d109      	bne.n	1b792 <smpDbGetRecord+0x76>
   1b77e:	9b05      	ldr	r3, [sp, #20]
   1b780:	9903      	ldr	r1, [sp, #12]
   1b782:	4618      	mov	r0, r3
   1b784:	f7f8 fe9d 	bl	144c2 <BdaCmp>
   1b788:	4603      	mov	r3, r0
   1b78a:	2b00      	cmp	r3, #0
   1b78c:	d001      	beq.n	1b792 <smpDbGetRecord+0x76>
    {
      return pRec;
   1b78e:	9b05      	ldr	r3, [sp, #20]
   1b790:	e01b      	b.n	1b7ca <smpDbGetRecord+0xae>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b792:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1b796:	3301      	adds	r3, #1
   1b798:	f88d 3013 	strb.w	r3, [sp, #19]
   1b79c:	9b05      	ldr	r3, [sp, #20]
   1b79e:	3318      	adds	r3, #24
   1b7a0:	9305      	str	r3, [sp, #20]
   1b7a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1b7a6:	2b02      	cmp	r3, #2
   1b7a8:	d9dd      	bls.n	1b766 <smpDbGetRecord+0x4a>
    }
  }

  /* Device is not in the database, add the device. */
  pRec = smpDbAddDevice(pAddr, addrType);
   1b7aa:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1b7ae:	4619      	mov	r1, r3
   1b7b0:	9803      	ldr	r0, [sp, #12]
   1b7b2:	f7ff ff79 	bl	1b6a8 <smpDbAddDevice>
   1b7b6:	9005      	str	r0, [sp, #20]

  if (pRec == NULL)
   1b7b8:	9b05      	ldr	r3, [sp, #20]
   1b7ba:	2b00      	cmp	r3, #0
   1b7bc:	d104      	bne.n	1b7c8 <smpDbGetRecord+0xac>
  {
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   1b7be:	4807      	ldr	r0, [pc, #28]	; (1b7dc <smpDbGetRecord+0xc0>)
   1b7c0:	f7f2 f942 	bl	da48 <WsfTrace>

    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
   1b7c4:	4b06      	ldr	r3, [pc, #24]	; (1b7e0 <smpDbGetRecord+0xc4>)
   1b7c6:	9305      	str	r3, [sp, #20]
  }

  return pRec;
   1b7c8:	9b05      	ldr	r3, [sp, #20]
}
   1b7ca:	4618      	mov	r0, r3
   1b7cc:	b007      	add	sp, #28
   1b7ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1b7d2:	bf00      	nop
   1b7d4:	10004508 	.word	0x10004508
   1b7d8:	0002bb30 	.word	0x0002bb30
   1b7dc:	0002bb54 	.word	0x0002bb54
   1b7e0:	100044f0 	.word	0x100044f0

0001b7e4 <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
   1b7e4:	b508      	push	{r3, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
   1b7e6:	4b0c      	ldr	r3, [pc, #48]	; (1b818 <SmpDbInit+0x34>)
   1b7e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   1b7ec:	2b01      	cmp	r3, #1
   1b7ee:	d102      	bne.n	1b7f6 <SmpDbInit+0x12>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
   1b7f0:	480a      	ldr	r0, [pc, #40]	; (1b81c <SmpDbInit+0x38>)
   1b7f2:	f7f2 f865 	bl	d8c0 <WsfTimerStop>
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
   1b7f6:	2258      	movs	r2, #88	; 0x58
   1b7f8:	2100      	movs	r1, #0
   1b7fa:	4807      	ldr	r0, [pc, #28]	; (1b818 <SmpDbInit+0x34>)
   1b7fc:	f00c fe1e 	bl	2843c <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   1b800:	4b07      	ldr	r3, [pc, #28]	; (1b820 <SmpDbInit+0x3c>)
   1b802:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   1b806:	4b04      	ldr	r3, [pc, #16]	; (1b818 <SmpDbInit+0x34>)
   1b808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   1b80c:	4b02      	ldr	r3, [pc, #8]	; (1b818 <SmpDbInit+0x34>)
   1b80e:	221f      	movs	r2, #31
   1b810:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
   1b814:	bf00      	nop
   1b816:	bd08      	pop	{r3, pc}
   1b818:	100044f0 	.word	0x100044f0
   1b81c:	10004538 	.word	0x10004538
   1b820:	100095f8 	.word	0x100095f8

0001b824 <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
   1b824:	b500      	push	{lr}
   1b826:	b085      	sub	sp, #20
   1b828:	4603      	mov	r3, r0
   1b82a:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b82e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b832:	4618      	mov	r0, r3
   1b834:	f7ff ff72 	bl	1b71c <smpDbGetRecord>
   1b838:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
   1b83a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b83e:	9b03      	ldr	r3, [sp, #12]
   1b840:	68da      	ldr	r2, [r3, #12]
   1b842:	9b03      	ldr	r3, [sp, #12]
   1b844:	891b      	ldrh	r3, [r3, #8]
   1b846:	4804      	ldr	r0, [pc, #16]	; (1b858 <SmpDbGetPairingDisabledTime+0x34>)
   1b848:	f7f2 f8fe 	bl	da48 <WsfTrace>
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
   1b84c:	9b03      	ldr	r3, [sp, #12]
   1b84e:	68db      	ldr	r3, [r3, #12]
}
   1b850:	4618      	mov	r0, r3
   1b852:	b005      	add	sp, #20
   1b854:	f85d fb04 	ldr.w	pc, [sp], #4
   1b858:	0002bb74 	.word	0x0002bb74

0001b85c <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
   1b85c:	b500      	push	{lr}
   1b85e:	b085      	sub	sp, #20
   1b860:	4603      	mov	r3, r0
   1b862:	460a      	mov	r2, r1
   1b864:	f88d 3007 	strb.w	r3, [sp, #7]
   1b868:	4613      	mov	r3, r2
   1b86a:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b86e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b872:	4618      	mov	r0, r3
   1b874:	f7ff ff52 	bl	1b71c <smpDbGetRecord>
   1b878:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);
   1b87a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b87e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1b882:	4619      	mov	r1, r3
   1b884:	4809      	ldr	r0, [pc, #36]	; (1b8ac <SmpDbSetFailureCount+0x50>)
   1b886:	f7f2 f8df 	bl	da48 <WsfTrace>

  pRec->failCount = count;
   1b88a:	9b03      	ldr	r3, [sp, #12]
   1b88c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1b890:	71da      	strb	r2, [r3, #7]

  if (count != 0)
   1b892:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b896:	2b00      	cmp	r3, #0
   1b898:	d004      	beq.n	1b8a4 <SmpDbSetFailureCount+0x48>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
   1b89a:	4b05      	ldr	r3, [pc, #20]	; (1b8b0 <SmpDbSetFailureCount+0x54>)
   1b89c:	681b      	ldr	r3, [r3, #0]
   1b89e:	68da      	ldr	r2, [r3, #12]
   1b8a0:	9b03      	ldr	r3, [sp, #12]
   1b8a2:	615a      	str	r2, [r3, #20]
  }
}
   1b8a4:	bf00      	nop
   1b8a6:	b005      	add	sp, #20
   1b8a8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b8ac:	0002bbb8 	.word	0x0002bbb8
   1b8b0:	10002bd0 	.word	0x10002bd0

0001b8b4 <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
   1b8b4:	b500      	push	{lr}
   1b8b6:	b085      	sub	sp, #20
   1b8b8:	4603      	mov	r3, r0
   1b8ba:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b8be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b8c2:	4618      	mov	r0, r3
   1b8c4:	f7ff ff2a 	bl	1b71c <smpDbGetRecord>
   1b8c8:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);
   1b8ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b8ce:	9b03      	ldr	r3, [sp, #12]
   1b8d0:	79db      	ldrb	r3, [r3, #7]
   1b8d2:	461a      	mov	r2, r3
   1b8d4:	4804      	ldr	r0, [pc, #16]	; (1b8e8 <SmpDbGetFailureCount+0x34>)
   1b8d6:	f7f2 f8b7 	bl	da48 <WsfTrace>

  return pRec->failCount;
   1b8da:	9b03      	ldr	r3, [sp, #12]
   1b8dc:	79db      	ldrb	r3, [r3, #7]
}
   1b8de:	4618      	mov	r0, r3
   1b8e0:	b005      	add	sp, #20
   1b8e2:	f85d fb04 	ldr.w	pc, [sp], #4
   1b8e6:	bf00      	nop
   1b8e8:	0002bbe4 	.word	0x0002bbe4

0001b8ec <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
   1b8ec:	b500      	push	{lr}
   1b8ee:	b085      	sub	sp, #20
   1b8f0:	4603      	mov	r3, r0
   1b8f2:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b8f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b8fa:	4618      	mov	r0, r3
   1b8fc:	f7ff ff0e 	bl	1b71c <smpDbGetRecord>
   1b900:	9002      	str	r0, [sp, #8]
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);
   1b902:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b906:	4619      	mov	r1, r3
   1b908:	481f      	ldr	r0, [pc, #124]	; (1b988 <SmpDbMaxAttemptReached+0x9c>)
   1b90a:	f7f2 f89d 	bl	da48 <WsfTrace>

  if (pRec->attemptMult == 0)
   1b90e:	9b02      	ldr	r3, [sp, #8]
   1b910:	891b      	ldrh	r3, [r3, #8]
   1b912:	2b00      	cmp	r3, #0
   1b914:	d103      	bne.n	1b91e <SmpDbMaxAttemptReached+0x32>
  {
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
   1b916:	2301      	movs	r3, #1
   1b918:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b91c:	e008      	b.n	1b930 <SmpDbMaxAttemptReached+0x44>
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1b91e:	9b02      	ldr	r3, [sp, #8]
   1b920:	891a      	ldrh	r2, [r3, #8]
   1b922:	4b1a      	ldr	r3, [pc, #104]	; (1b98c <SmpDbMaxAttemptReached+0xa0>)
   1b924:	681b      	ldr	r3, [r3, #0]
   1b926:	8a9b      	ldrh	r3, [r3, #20]
   1b928:	fb12 f303 	smulbb	r3, r2, r3
   1b92c:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1b930:	4b16      	ldr	r3, [pc, #88]	; (1b98c <SmpDbMaxAttemptReached+0xa0>)
   1b932:	681b      	ldr	r3, [r3, #0]
   1b934:	681b      	ldr	r3, [r3, #0]
   1b936:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1b93a:	fb02 f203 	mul.w	r2, r2, r3
   1b93e:	4b13      	ldr	r3, [pc, #76]	; (1b98c <SmpDbMaxAttemptReached+0xa0>)
   1b940:	681b      	ldr	r3, [r3, #0]
   1b942:	68db      	ldr	r3, [r3, #12]
   1b944:	429a      	cmp	r2, r3
   1b946:	d80d      	bhi.n	1b964 <SmpDbMaxAttemptReached+0x78>
  {
    pRec->lockMs = pSmpCfg->attemptTimeout * multiplier;
   1b948:	4b10      	ldr	r3, [pc, #64]	; (1b98c <SmpDbMaxAttemptReached+0xa0>)
   1b94a:	681b      	ldr	r3, [r3, #0]
   1b94c:	681b      	ldr	r3, [r3, #0]
   1b94e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1b952:	fb02 f203 	mul.w	r2, r2, r3
   1b956:	9b02      	ldr	r3, [sp, #8]
   1b958:	60da      	str	r2, [r3, #12]
    pRec->attemptMult = multiplier;
   1b95a:	9b02      	ldr	r3, [sp, #8]
   1b95c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1b960:	811a      	strh	r2, [r3, #8]
   1b962:	e004      	b.n	1b96e <SmpDbMaxAttemptReached+0x82>
  }
  else
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
   1b964:	4b09      	ldr	r3, [pc, #36]	; (1b98c <SmpDbMaxAttemptReached+0xa0>)
   1b966:	681b      	ldr	r3, [r3, #0]
   1b968:	68da      	ldr	r2, [r3, #12]
   1b96a:	9b02      	ldr	r3, [sp, #8]
   1b96c:	60da      	str	r2, [r3, #12]
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1b96e:	4b07      	ldr	r3, [pc, #28]	; (1b98c <SmpDbMaxAttemptReached+0xa0>)
   1b970:	681b      	ldr	r3, [r3, #0]
   1b972:	691a      	ldr	r2, [r3, #16]
   1b974:	9b02      	ldr	r3, [sp, #8]
   1b976:	611a      	str	r2, [r3, #16]

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();
   1b978:	f7ff fe6c 	bl	1b654 <smpDbStartServiceTimer>

  return pRec->lockMs;
   1b97c:	9b02      	ldr	r3, [sp, #8]
   1b97e:	68db      	ldr	r3, [r3, #12]
}
   1b980:	4618      	mov	r0, r3
   1b982:	b005      	add	sp, #20
   1b984:	f85d fb04 	ldr.w	pc, [sp], #4
   1b988:	0002bc10 	.word	0x0002bc10
   1b98c:	10002bd0 	.word	0x10002bd0

0001b990 <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
   1b990:	b500      	push	{lr}
   1b992:	b085      	sub	sp, #20
   1b994:	4603      	mov	r3, r0
   1b996:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b99a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b99e:	4618      	mov	r0, r3
   1b9a0:	f7ff febc 	bl	1b71c <smpDbGetRecord>
   1b9a4:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   1b9a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b9aa:	4619      	mov	r1, r3
   1b9ac:	4805      	ldr	r0, [pc, #20]	; (1b9c4 <SmpDbPairingFailed+0x34>)
   1b9ae:	f7f2 f84b 	bl	da48 <WsfTrace>

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1b9b2:	4b05      	ldr	r3, [pc, #20]	; (1b9c8 <SmpDbPairingFailed+0x38>)
   1b9b4:	681b      	ldr	r3, [r3, #0]
   1b9b6:	691a      	ldr	r2, [r3, #16]
   1b9b8:	9b03      	ldr	r3, [sp, #12]
   1b9ba:	611a      	str	r2, [r3, #16]
}
   1b9bc:	bf00      	nop
   1b9be:	b005      	add	sp, #20
   1b9c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1b9c4:	0002bc34 	.word	0x0002bc34
   1b9c8:	10002bd0 	.word	0x10002bd0

0001b9cc <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
   1b9cc:	b500      	push	{lr}
   1b9ce:	b083      	sub	sp, #12
  uint8_t i;
  smpDbDevice_t *pRec = smpDbCb.db;
   1b9d0:	4b31      	ldr	r3, [pc, #196]	; (1ba98 <SmpDbService+0xcc>)
   1b9d2:	9300      	str	r3, [sp, #0]

  /* Service device specific records. */
  for (i = 0; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b9d4:	2300      	movs	r3, #0
   1b9d6:	f88d 3007 	strb.w	r3, [sp, #7]
   1b9da:	e054      	b.n	1ba86 <SmpDbService+0xba>
  {
    if (smpDbRecordInUse(pRec))
   1b9dc:	9800      	ldr	r0, [sp, #0]
   1b9de:	f7ff fe4b 	bl	1b678 <smpDbRecordInUse>
   1b9e2:	4603      	mov	r3, r0
   1b9e4:	2b00      	cmp	r3, #0
   1b9e6:	d046      	beq.n	1ba76 <SmpDbService+0xaa>
    {
      /* Decrement all time periods. */
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1b9e8:	9b00      	ldr	r3, [sp, #0]
   1b9ea:	691b      	ldr	r3, [r3, #16]
   1b9ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1b9f0:	bf38      	it	cc
   1b9f2:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   1b9f6:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   1b9fa:	9b00      	ldr	r3, [sp, #0]
   1b9fc:	611a      	str	r2, [r3, #16]
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b9fe:	9b00      	ldr	r3, [sp, #0]
   1ba00:	68db      	ldr	r3, [r3, #12]
   1ba02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1ba06:	bf38      	it	cc
   1ba08:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   1ba0c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   1ba10:	9b00      	ldr	r3, [sp, #0]
   1ba12:	60da      	str	r2, [r3, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1ba14:	9b00      	ldr	r3, [sp, #0]
   1ba16:	695b      	ldr	r3, [r3, #20]
   1ba18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1ba1c:	bf38      	it	cc
   1ba1e:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   1ba22:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   1ba26:	9b00      	ldr	r3, [sp, #0]
   1ba28:	615a      	str	r2, [r3, #20]

      /* Process expDecrementMs timeout. */
      if (pRec->expDecrementMs == 0)
   1ba2a:	9b00      	ldr	r3, [sp, #0]
   1ba2c:	691b      	ldr	r3, [r3, #16]
   1ba2e:	2b00      	cmp	r3, #0
   1ba30:	d112      	bne.n	1ba58 <SmpDbService+0x8c>
      {
        /* Exponential decrease of multiplier. */
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1ba32:	9b00      	ldr	r3, [sp, #0]
   1ba34:	891a      	ldrh	r2, [r3, #8]
   1ba36:	4b19      	ldr	r3, [pc, #100]	; (1ba9c <SmpDbService+0xd0>)
   1ba38:	681b      	ldr	r3, [r3, #0]
   1ba3a:	8a9b      	ldrh	r3, [r3, #20]
   1ba3c:	fbb2 f3f3 	udiv	r3, r2, r3
   1ba40:	b29a      	uxth	r2, r3
   1ba42:	9b00      	ldr	r3, [sp, #0]
   1ba44:	811a      	strh	r2, [r3, #8]

        if (pRec->attemptMult)
   1ba46:	9b00      	ldr	r3, [sp, #0]
   1ba48:	891b      	ldrh	r3, [r3, #8]
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d004      	beq.n	1ba58 <SmpDbService+0x8c>
        {
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1ba4e:	4b13      	ldr	r3, [pc, #76]	; (1ba9c <SmpDbService+0xd0>)
   1ba50:	681b      	ldr	r3, [r3, #0]
   1ba52:	691a      	ldr	r2, [r3, #16]
   1ba54:	9b00      	ldr	r3, [sp, #0]
   1ba56:	611a      	str	r2, [r3, #16]
        }
      }

      /* Process failCountToMs timeout. */
      if (pRec->failCountToMs == 0)
   1ba58:	9b00      	ldr	r3, [sp, #0]
   1ba5a:	695b      	ldr	r3, [r3, #20]
   1ba5c:	2b00      	cmp	r3, #0
   1ba5e:	d102      	bne.n	1ba66 <SmpDbService+0x9a>
      {
        pRec->failCount = 0;
   1ba60:	9b00      	ldr	r3, [sp, #0]
   1ba62:	2200      	movs	r2, #0
   1ba64:	71da      	strb	r2, [r3, #7]
      }

      /* If the record is in use, ensure the service timer is running. */
      if (smpDbRecordInUse(pRec))
   1ba66:	9800      	ldr	r0, [sp, #0]
   1ba68:	f7ff fe06 	bl	1b678 <smpDbRecordInUse>
   1ba6c:	4603      	mov	r3, r0
   1ba6e:	2b00      	cmp	r3, #0
   1ba70:	d001      	beq.n	1ba76 <SmpDbService+0xaa>
      {
        smpDbStartServiceTimer();
   1ba72:	f7ff fdef 	bl	1b654 <smpDbStartServiceTimer>
  for (i = 0; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1ba76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba7a:	3301      	adds	r3, #1
   1ba7c:	f88d 3007 	strb.w	r3, [sp, #7]
   1ba80:	9b00      	ldr	r3, [sp, #0]
   1ba82:	3318      	adds	r3, #24
   1ba84:	9300      	str	r3, [sp, #0]
   1ba86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba8a:	2b02      	cmp	r3, #2
   1ba8c:	d9a6      	bls.n	1b9dc <SmpDbService+0x10>
      }
    }
  }
}
   1ba8e:	bf00      	nop
   1ba90:	bf00      	nop
   1ba92:	b003      	add	sp, #12
   1ba94:	f85d fb04 	ldr.w	pc, [sp], #4
   1ba98:	100044f0 	.word	0x100044f0
   1ba9c:	10002bd0 	.word	0x10002bd0

0001baa0 <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1baa0:	b500      	push	{lr}
   1baa2:	b08b      	sub	sp, #44	; 0x2c
   1baa4:	4603      	mov	r3, r0
   1baa6:	9200      	str	r2, [sp, #0]
   1baa8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1baac:	460b      	mov	r3, r1
   1baae:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       cmdCode;
  smpCcb_t      *pCcb;

  /* get connection control block for this handle, ignore packet if not found */
  if ((pCcb = smpCcbByHandle(handle)) == NULL)
   1bab2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bab6:	4618      	mov	r0, r3
   1bab8:	f000 f966 	bl	1bd88 <smpCcbByHandle>
   1babc:	9009      	str	r0, [sp, #36]	; 0x24
   1babe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	d047      	beq.n	1bb54 <smpL2cDataCback+0xb4>
  {
    return;
  }

  /* parse command code */
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
   1bac4:	9b00      	ldr	r3, [sp, #0]
   1bac6:	7a1b      	ldrb	r3, [r3, #8]
   1bac8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

  /* verify length and that command is the expected command or pairing failed */
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1bacc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1bad0:	2b00      	cmp	r3, #0
   1bad2:	d034      	beq.n	1bb3e <smpL2cDataCback+0x9e>
   1bad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1bad8:	2b0e      	cmp	r3, #14
   1bada:	d830      	bhi.n	1bb3e <smpL2cDataCback+0x9e>
      (len == smpPktLenTbl[cmdCode]) &&
   1badc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1bae0:	4a1e      	ldr	r2, [pc, #120]	; (1bb5c <smpL2cDataCback+0xbc>)
   1bae2:	5cd3      	ldrb	r3, [r2, r3]
   1bae4:	b29b      	uxth	r3, r3
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1bae6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1baea:	429a      	cmp	r2, r3
   1baec:	d127      	bne.n	1bb3e <smpL2cDataCback+0x9e>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1baee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1baf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
   1baf4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1baf8:	429a      	cmp	r2, r3
   1bafa:	d003      	beq.n	1bb04 <smpL2cDataCback+0x64>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1bafc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1bb00:	2b05      	cmp	r3, #5
   1bb02:	d11c      	bne.n	1bb3e <smpL2cDataCback+0x9e>
  {
    smpMsg_t msg;

    /* send to state machine */
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   1bb04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1bb08:	2b05      	cmp	r3, #5
   1bb0a:	d107      	bne.n	1bb1c <smpL2cDataCback+0x7c>
    {
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
   1bb0c:	2307      	movs	r3, #7
   1bb0e:	f88d 300a 	strb.w	r3, [sp, #10]
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   1bb12:	9b00      	ldr	r3, [sp, #0]
   1bb14:	7a5b      	ldrb	r3, [r3, #9]
   1bb16:	f88d 300b 	strb.w	r3, [sp, #11]
   1bb1a:	e002      	b.n	1bb22 <smpL2cDataCback+0x82>
    }
    else
    {
      msg.hdr.event = SMP_MSG_CMD_PKT;
   1bb1c:	2306      	movs	r3, #6
   1bb1e:	f88d 300a 	strb.w	r3, [sp, #10]
    }

    msg.hdr.param = pCcb->connId;
   1bb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1bb28:	b29b      	uxth	r3, r3
   1bb2a:	f8ad 3008 	strh.w	r3, [sp, #8]
    msg.data.pPacket = pPacket;
   1bb2e:	9b00      	ldr	r3, [sp, #0]
   1bb30:	9303      	str	r3, [sp, #12]
    smpSmExecute(pCcb, &msg);
   1bb32:	ab02      	add	r3, sp, #8
   1bb34:	4619      	mov	r1, r3
   1bb36:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bb38:	f7ff fd34 	bl	1b5a4 <smpSmExecute>
  {
   1bb3c:	e00b      	b.n	1bb56 <smpL2cDataCback+0xb6>
  }
  /* else ignore it */
  else
  {
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   1bb3e:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1bb42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1bb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   1bb4c:	4804      	ldr	r0, [pc, #16]	; (1bb60 <smpL2cDataCback+0xc0>)
   1bb4e:	f7f1 ff7b 	bl	da48 <WsfTrace>
   1bb52:	e000      	b.n	1bb56 <smpL2cDataCback+0xb6>
    return;
   1bb54:	bf00      	nop
  }
}
   1bb56:	b00b      	add	sp, #44	; 0x2c
   1bb58:	f85d fb04 	ldr.w	pc, [sp], #4
   1bb5c:	0002ca30 	.word	0x0002ca30
   1bb60:	0002bc54 	.word	0x0002bc54

0001bb64 <smpL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   1bb64:	b500      	push	{lr}
   1bb66:	b085      	sub	sp, #20
   1bb68:	9001      	str	r0, [sp, #4]
  smpCcb_t      *pCcb;
  uint8_t       *pPkt;

  /* get connection control block */
  pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);
   1bb6a:	9b01      	ldr	r3, [sp, #4]
   1bb6c:	881b      	ldrh	r3, [r3, #0]
   1bb6e:	b2db      	uxtb	r3, r3
   1bb70:	4618      	mov	r0, r3
   1bb72:	f000 f92b 	bl	1bdcc <smpCcbByConnId>
   1bb76:	9003      	str	r0, [sp, #12]

  /* verify connection is open */
  if (pCcb->connId != DM_CONN_ID_NONE)
   1bb78:	9b03      	ldr	r3, [sp, #12]
   1bb7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1bb7e:	2b00      	cmp	r3, #0
   1bb80:	d02a      	beq.n	1bbd8 <smpL2cCtrlCback+0x74>
  {
    /* set flow */
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
   1bb82:	9b01      	ldr	r3, [sp, #4]
   1bb84:	789b      	ldrb	r3, [r3, #2]
   1bb86:	2b01      	cmp	r3, #1
   1bb88:	bf0c      	ite	eq
   1bb8a:	2301      	moveq	r3, #1
   1bb8c:	2300      	movne	r3, #0
   1bb8e:	b2db      	uxtb	r3, r3
   1bb90:	461a      	mov	r2, r3
   1bb92:	9b03      	ldr	r3, [sp, #12]
   1bb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* if data flow enabled */
    if (!pCcb->flowDisabled)
   1bb98:	9b03      	ldr	r3, [sp, #12]
   1bb9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	d11a      	bne.n	1bbd8 <smpL2cCtrlCback+0x74>
    {
      /* if packet in qeueue */
      if (pCcb->pQueued != NULL)
   1bba2:	9b03      	ldr	r3, [sp, #12]
   1bba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bba6:	2b00      	cmp	r3, #0
   1bba8:	d009      	beq.n	1bbbe <smpL2cCtrlCback+0x5a>
      {
        /* send queued packet */
        pPkt = pCcb->pQueued;
   1bbaa:	9b03      	ldr	r3, [sp, #12]
   1bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bbae:	9302      	str	r3, [sp, #8]
        pCcb->pQueued = NULL;
   1bbb0:	9b03      	ldr	r3, [sp, #12]
   1bbb2:	2200      	movs	r2, #0
   1bbb4:	635a      	str	r2, [r3, #52]	; 0x34
        smpSendPkt(pCcb, pPkt);
   1bbb6:	9902      	ldr	r1, [sp, #8]
   1bbb8:	9803      	ldr	r0, [sp, #12]
   1bbba:	f000 fb71 	bl	1c2a0 <smpSendPkt>
      }

      /* if SMP state not idle */
      if (!smpStateIdle(pCcb))
   1bbbe:	9803      	ldr	r0, [sp, #12]
   1bbc0:	f000 fba2 	bl	1c308 <smpStateIdle>
   1bbc4:	4603      	mov	r3, r0
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d106      	bne.n	1bbd8 <smpL2cCtrlCback+0x74>
      {
        /* trigger send of next key */
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
   1bbca:	9b01      	ldr	r3, [sp, #4]
   1bbcc:	220c      	movs	r2, #12
   1bbce:	709a      	strb	r2, [r3, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1bbd0:	9901      	ldr	r1, [sp, #4]
   1bbd2:	9803      	ldr	r0, [sp, #12]
   1bbd4:	f7ff fce6 	bl	1b5a4 <smpSmExecute>
      }
    }
  }
}
   1bbd8:	bf00      	nop
   1bbda:	b005      	add	sp, #20
   1bbdc:	f85d fb04 	ldr.w	pc, [sp], #4

0001bbe0 <smpResumeAttemptsState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpResumeAttemptsState(dmConnId_t connId)
{
   1bbe0:	b500      	push	{lr}
   1bbe2:	b085      	sub	sp, #20
   1bbe4:	4603      	mov	r3, r0
   1bbe6:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1bbea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bbee:	4618      	mov	r0, r3
   1bbf0:	f000 f8ec 	bl	1bdcc <smpCcbByConnId>
   1bbf4:	9003      	str	r0, [sp, #12]
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
   1bbf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bbfa:	4618      	mov	r0, r3
   1bbfc:	f7ff fe12 	bl	1b824 <SmpDbGetPairingDisabledTime>
   1bc00:	9002      	str	r0, [sp, #8]

  if (timeMs)
   1bc02:	9b02      	ldr	r3, [sp, #8]
   1bc04:	2b00      	cmp	r3, #0
   1bc06:	d02a      	beq.n	1bc5e <smpResumeAttemptsState+0x7e>
  {
    if (smpCb.lescSupported)
   1bc08:	4b17      	ldr	r3, [pc, #92]	; (1bc68 <smpResumeAttemptsState+0x88>)
   1bc0a:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	d00e      	beq.n	1bc30 <smpResumeAttemptsState+0x50>
    {
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   1bc12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bc16:	4618      	mov	r0, r3
   1bc18:	f7fa f9fe 	bl	16018 <DmConnRole>
   1bc1c:	4603      	mov	r3, r0
   1bc1e:	2b01      	cmp	r3, #1
   1bc20:	d101      	bne.n	1bc26 <smpResumeAttemptsState+0x46>
   1bc22:	2226      	movs	r2, #38	; 0x26
   1bc24:	e000      	b.n	1bc28 <smpResumeAttemptsState+0x48>
   1bc26:	2224      	movs	r2, #36	; 0x24
   1bc28:	9b03      	ldr	r3, [sp, #12]
   1bc2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   1bc2e:	e00d      	b.n	1bc4c <smpResumeAttemptsState+0x6c>
    }
    else
    {
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
   1bc30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bc34:	4618      	mov	r0, r3
   1bc36:	f7fa f9ef 	bl	16018 <DmConnRole>
   1bc3a:	4603      	mov	r3, r0
   1bc3c:	2b01      	cmp	r3, #1
   1bc3e:	d101      	bne.n	1bc44 <smpResumeAttemptsState+0x64>
   1bc40:	220d      	movs	r2, #13
   1bc42:	e000      	b.n	1bc46 <smpResumeAttemptsState+0x66>
   1bc44:	220c      	movs	r2, #12
   1bc46:	9b03      	ldr	r3, [sp, #12]
   1bc48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    /* Start smp timer indicating the time to prevent pairing in the attempts state */
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1bc4c:	9b03      	ldr	r3, [sp, #12]
   1bc4e:	2210      	movs	r2, #16
   1bc50:	771a      	strb	r2, [r3, #28]
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   1bc52:	9b03      	ldr	r3, [sp, #12]
   1bc54:	3310      	adds	r3, #16
   1bc56:	9902      	ldr	r1, [sp, #8]
   1bc58:	4618      	mov	r0, r3
   1bc5a:	f7f1 fe1d 	bl	d898 <WsfTimerStartMs>
  }
}
   1bc5e:	bf00      	nop
   1bc60:	b005      	add	sp, #20
   1bc62:	f85d fb04 	ldr.w	pc, [sp], #4
   1bc66:	bf00      	nop
   1bc68:	100095f8 	.word	0x100095f8

0001bc6c <smpDmConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpDmConnCback(dmEvt_t *pDmEvt)
{
   1bc6c:	b500      	push	{lr}
   1bc6e:	b085      	sub	sp, #20
   1bc70:	9001      	str	r0, [sp, #4]
  smpCcb_t      *pCcb;
  wsfMsgHdr_t   hdr;

  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   1bc72:	9b01      	ldr	r3, [sp, #4]
   1bc74:	881b      	ldrh	r3, [r3, #0]
   1bc76:	b2db      	uxtb	r3, r3
   1bc78:	4618      	mov	r0, r3
   1bc7a:	f000 f8a7 	bl	1bdcc <smpCcbByConnId>
   1bc7e:	9003      	str	r0, [sp, #12]

  /* if new connection created */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1bc80:	9b01      	ldr	r3, [sp, #4]
   1bc82:	789b      	ldrb	r3, [r3, #2]
   1bc84:	2b27      	cmp	r3, #39	; 0x27
   1bc86:	d145      	bne.n	1bd14 <smpDmConnCback+0xa8>
  {
    /* set up state machine for master or slave */
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
   1bc88:	9b01      	ldr	r3, [sp, #4]
   1bc8a:	881b      	ldrh	r3, [r3, #0]
   1bc8c:	b2db      	uxtb	r3, r3
   1bc8e:	4618      	mov	r0, r3
   1bc90:	f7fa f9c2 	bl	16018 <DmConnRole>
   1bc94:	4603      	mov	r3, r0
   1bc96:	2b00      	cmp	r3, #0
   1bc98:	d108      	bne.n	1bcac <smpDmConnCback+0x40>
    {
      pCcb->initiator = TRUE;
   1bc9a:	9b03      	ldr	r3, [sp, #12]
   1bc9c:	2201      	movs	r2, #1
   1bc9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      pCcb->nextCmdCode = SMP_CMD_SECURITY_REQ;
   1bca2:	9b03      	ldr	r3, [sp, #12]
   1bca4:	220b      	movs	r2, #11
   1bca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1bcaa:	e007      	b.n	1bcbc <smpDmConnCback+0x50>
    }
    else
    {
      pCcb->initiator = FALSE;
   1bcac:	9b03      	ldr	r3, [sp, #12]
   1bcae:	2200      	movs	r2, #0
   1bcb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   1bcb4:	9b03      	ldr	r3, [sp, #12]
   1bcb6:	2201      	movs	r2, #1
   1bcb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    /* initialize control block */
    pCcb->handle = pDmEvt->connOpen.handle;
   1bcbc:	9b01      	ldr	r3, [sp, #4]
   1bcbe:	88da      	ldrh	r2, [r3, #6]
   1bcc0:	9b03      	ldr	r3, [sp, #12]
   1bcc2:	871a      	strh	r2, [r3, #56]	; 0x38
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1bcc4:	9b01      	ldr	r3, [sp, #4]
   1bcc6:	881b      	ldrh	r3, [r3, #0]
   1bcc8:	b2da      	uxtb	r2, r3
   1bcca:	9b03      	ldr	r3, [sp, #12]
   1bccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    pCcb->secReq = FALSE;
   1bcd0:	9b03      	ldr	r3, [sp, #12]
   1bcd2:	2200      	movs	r2, #0
   1bcd4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
   1bcd8:	9b03      	ldr	r3, [sp, #12]
   1bcda:	2200      	movs	r2, #0
   1bcdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   1bce0:	9b01      	ldr	r3, [sp, #4]
   1bce2:	881b      	ldrh	r3, [r3, #0]
   1bce4:	b2db      	uxtb	r3, r3
   1bce6:	4618      	mov	r0, r3
   1bce8:	f7ff fde4 	bl	1b8b4 <SmpDbGetFailureCount>
   1bcec:	4603      	mov	r3, r0
   1bcee:	461a      	mov	r2, r3
   1bcf0:	9b03      	ldr	r3, [sp, #12]
   1bcf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pCcb->lastSentKey = 0;
   1bcf6:	9b03      	ldr	r3, [sp, #12]
   1bcf8:	2200      	movs	r2, #0
   1bcfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pCcb->state = 0;
   1bcfe:	9b03      	ldr	r3, [sp, #12]
   1bd00:	2200      	movs	r2, #0
   1bd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Resume the attempts state if necessary */
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
   1bd06:	9b01      	ldr	r3, [sp, #4]
   1bd08:	881b      	ldrh	r3, [r3, #0]
   1bd0a:	b2db      	uxtb	r3, r3
   1bd0c:	4618      	mov	r0, r3
   1bd0e:	f7ff ff67 	bl	1bbe0 <smpResumeAttemptsState>
        WsfMsgFree(pCcb->pQueued);
        pCcb->pQueued = NULL;
      }
    }
  }
}
   1bd12:	e034      	b.n	1bd7e <smpDmConnCback+0x112>
  else if (pCcb->connId != DM_CONN_ID_NONE)
   1bd14:	9b03      	ldr	r3, [sp, #12]
   1bd16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1bd1a:	2b00      	cmp	r3, #0
   1bd1c:	d02f      	beq.n	1bd7e <smpDmConnCback+0x112>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1bd1e:	9b01      	ldr	r3, [sp, #4]
   1bd20:	789b      	ldrb	r3, [r3, #2]
   1bd22:	2b28      	cmp	r3, #40	; 0x28
   1bd24:	d12b      	bne.n	1bd7e <smpDmConnCback+0x112>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
   1bd26:	9b01      	ldr	r3, [sp, #4]
   1bd28:	881b      	ldrh	r3, [r3, #0]
   1bd2a:	b2da      	uxtb	r2, r3
   1bd2c:	9b03      	ldr	r3, [sp, #12]
   1bd2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1bd32:	4619      	mov	r1, r3
   1bd34:	4610      	mov	r0, r2
   1bd36:	f7ff fd91 	bl	1b85c <SmpDbSetFailureCount>
      hdr.param = pDmEvt->hdr.param;
   1bd3a:	9b01      	ldr	r3, [sp, #4]
   1bd3c:	881b      	ldrh	r3, [r3, #0]
   1bd3e:	f8ad 3008 	strh.w	r3, [sp, #8]
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   1bd42:	230a      	movs	r3, #10
   1bd44:	f88d 300a 	strb.w	r3, [sp, #10]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1bd48:	9b01      	ldr	r3, [sp, #4]
   1bd4a:	7a1b      	ldrb	r3, [r3, #8]
   1bd4c:	3320      	adds	r3, #32
   1bd4e:	b2db      	uxtb	r3, r3
   1bd50:	f88d 300b 	strb.w	r3, [sp, #11]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1bd54:	ab02      	add	r3, sp, #8
   1bd56:	4619      	mov	r1, r3
   1bd58:	9803      	ldr	r0, [sp, #12]
   1bd5a:	f7ff fc23 	bl	1b5a4 <smpSmExecute>
      pCcb->connId = DM_CONN_ID_NONE;
   1bd5e:	9b03      	ldr	r3, [sp, #12]
   1bd60:	2200      	movs	r2, #0
   1bd62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
   1bd66:	9b03      	ldr	r3, [sp, #12]
   1bd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bd6a:	2b00      	cmp	r3, #0
   1bd6c:	d007      	beq.n	1bd7e <smpDmConnCback+0x112>
        WsfMsgFree(pCcb->pQueued);
   1bd6e:	9b03      	ldr	r3, [sp, #12]
   1bd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1bd72:	4618      	mov	r0, r3
   1bd74:	f7f1 fa16 	bl	d1a4 <WsfMsgFree>
        pCcb->pQueued = NULL;
   1bd78:	9b03      	ldr	r3, [sp, #12]
   1bd7a:	2200      	movs	r2, #0
   1bd7c:	635a      	str	r2, [r3, #52]	; 0x34
}
   1bd7e:	bf00      	nop
   1bd80:	b005      	add	sp, #20
   1bd82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001bd88 <smpCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
   1bd88:	b500      	push	{lr}
   1bd8a:	b085      	sub	sp, #20
   1bd8c:	4603      	mov	r3, r0
   1bd8e:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1bd92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd96:	4618      	mov	r0, r3
   1bd98:	f7f9 ffde 	bl	15d58 <DmConnIdByHandle>
   1bd9c:	4603      	mov	r3, r0
   1bd9e:	f88d 300f 	strb.w	r3, [sp, #15]
   1bda2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1bda6:	2b00      	cmp	r3, #0
   1bda8:	d009      	beq.n	1bdbe <smpCcbByHandle+0x36>
  {
    return &smpCb.ccb[connId - 1];
   1bdaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1bdae:	1e5a      	subs	r2, r3, #1
   1bdb0:	4613      	mov	r3, r2
   1bdb2:	00db      	lsls	r3, r3, #3
   1bdb4:	4413      	add	r3, r2
   1bdb6:	00db      	lsls	r3, r3, #3
   1bdb8:	4a03      	ldr	r2, [pc, #12]	; (1bdc8 <smpCcbByHandle+0x40>)
   1bdba:	4413      	add	r3, r2
   1bdbc:	e000      	b.n	1bdc0 <smpCcbByHandle+0x38>
  }

  return NULL;
   1bdbe:	2300      	movs	r3, #0
}
   1bdc0:	4618      	mov	r0, r3
   1bdc2:	b005      	add	sp, #20
   1bdc4:	f85d fb04 	ldr.w	pc, [sp], #4
   1bdc8:	100095f8 	.word	0x100095f8

0001bdcc <smpCcbByConnId>:
 *
 *  \return Pointer to connection control block.
 */
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
   1bdcc:	b082      	sub	sp, #8
   1bdce:	4603      	mov	r3, r0
   1bdd0:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
   1bdd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bdd8:	1e5a      	subs	r2, r3, #1
   1bdda:	4613      	mov	r3, r2
   1bddc:	00db      	lsls	r3, r3, #3
   1bdde:	4413      	add	r3, r2
   1bde0:	00db      	lsls	r3, r3, #3
   1bde2:	4a02      	ldr	r2, [pc, #8]	; (1bdec <smpCcbByConnId+0x20>)
   1bde4:	4413      	add	r3, r2
}
   1bde6:	4618      	mov	r0, r3
   1bde8:	b002      	add	sp, #8
   1bdea:	4770      	bx	lr
   1bdec:	100095f8 	.word	0x100095f8

0001bdf0 <smpCalcC1Part1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcC1Part1(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pRand)
{
   1bdf0:	b500      	push	{lr}
   1bdf2:	b08f      	sub	sp, #60	; 0x3c
   1bdf4:	9005      	str	r0, [sp, #20]
   1bdf6:	9104      	str	r1, [sp, #16]
   1bdf8:	9203      	str	r2, [sp, #12]
  uint8_t   i;
  uint8_t   iAddrType;
  uint8_t   rAddrType;

  /* set initiator/responder address types */
  if (pCcb->initiator)
   1bdfa:	9b05      	ldr	r3, [sp, #20]
   1bdfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1be00:	2b00      	cmp	r3, #0
   1be02:	d034      	beq.n	1be6e <smpCalcC1Part1+0x7e>
  {
    /* if local device's using RPA */
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1be04:	9b05      	ldr	r3, [sp, #20]
   1be06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1be0a:	4618      	mov	r0, r3
   1be0c:	f7fa f84e 	bl	15eac <DmConnLocalRpa>
   1be10:	4603      	mov	r3, r0
   1be12:	4618      	mov	r0, r3
   1be14:	f7f8 fb76 	bl	14504 <BdaIsZeros>
   1be18:	4603      	mov	r3, r0
   1be1a:	2b00      	cmp	r3, #0
   1be1c:	d103      	bne.n	1be26 <smpCalcC1Part1+0x36>
    {
      iAddrType = DM_ADDR_RANDOM;
   1be1e:	2301      	movs	r3, #1
   1be20:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1be24:	e008      	b.n	1be38 <smpCalcC1Part1+0x48>
    }
    else
    {
      iAddrType = DmConnLocalAddrType(pCcb->connId);
   1be26:	9b05      	ldr	r3, [sp, #20]
   1be28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1be2c:	4618      	mov	r0, r3
   1be2e:	f7fa f801 	bl	15e34 <DmConnLocalAddrType>
   1be32:	4603      	mov	r3, r0
   1be34:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* if peer device's using RPA */
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1be38:	9b05      	ldr	r3, [sp, #20]
   1be3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1be3e:	4618      	mov	r0, r3
   1be40:	f7fa f820 	bl	15e84 <DmConnPeerRpa>
   1be44:	4603      	mov	r3, r0
   1be46:	4618      	mov	r0, r3
   1be48:	f7f8 fb5c 	bl	14504 <BdaIsZeros>
   1be4c:	4603      	mov	r3, r0
   1be4e:	2b00      	cmp	r3, #0
   1be50:	d103      	bne.n	1be5a <smpCalcC1Part1+0x6a>
    {
      rAddrType = DM_ADDR_RANDOM;
   1be52:	2301      	movs	r3, #1
   1be54:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1be58:	e03d      	b.n	1bed6 <smpCalcC1Part1+0xe6>
    }
    else
    {
      rAddrType = DmConnPeerAddrType(pCcb->connId);
   1be5a:	9b05      	ldr	r3, [sp, #20]
   1be5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1be60:	4618      	mov	r0, r3
   1be62:	f7f9 ffc1 	bl	15de8 <DmConnPeerAddrType>
   1be66:	4603      	mov	r3, r0
   1be68:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1be6c:	e033      	b.n	1bed6 <smpCalcC1Part1+0xe6>
    }
  }
  else
  {
    /* if peer device's using RPA */
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1be6e:	9b05      	ldr	r3, [sp, #20]
   1be70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1be74:	4618      	mov	r0, r3
   1be76:	f7fa f805 	bl	15e84 <DmConnPeerRpa>
   1be7a:	4603      	mov	r3, r0
   1be7c:	4618      	mov	r0, r3
   1be7e:	f7f8 fb41 	bl	14504 <BdaIsZeros>
   1be82:	4603      	mov	r3, r0
   1be84:	2b00      	cmp	r3, #0
   1be86:	d103      	bne.n	1be90 <smpCalcC1Part1+0xa0>
    {
      iAddrType = DM_ADDR_RANDOM;
   1be88:	2301      	movs	r3, #1
   1be8a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1be8e:	e008      	b.n	1bea2 <smpCalcC1Part1+0xb2>
    }
    else
    {
      iAddrType = DmConnPeerAddrType(pCcb->connId);
   1be90:	9b05      	ldr	r3, [sp, #20]
   1be92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1be96:	4618      	mov	r0, r3
   1be98:	f7f9 ffa6 	bl	15de8 <DmConnPeerAddrType>
   1be9c:	4603      	mov	r3, r0
   1be9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* if local device's using RPA */
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1bea2:	9b05      	ldr	r3, [sp, #20]
   1bea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1bea8:	4618      	mov	r0, r3
   1beaa:	f7f9 ffff 	bl	15eac <DmConnLocalRpa>
   1beae:	4603      	mov	r3, r0
   1beb0:	4618      	mov	r0, r3
   1beb2:	f7f8 fb27 	bl	14504 <BdaIsZeros>
   1beb6:	4603      	mov	r3, r0
   1beb8:	2b00      	cmp	r3, #0
   1beba:	d103      	bne.n	1bec4 <smpCalcC1Part1+0xd4>
    {
      rAddrType = DM_ADDR_RANDOM;
   1bebc:	2301      	movs	r3, #1
   1bebe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1bec2:	e008      	b.n	1bed6 <smpCalcC1Part1+0xe6>
    }
    else
    {
      rAddrType = DmConnLocalAddrType(pCcb->connId);
   1bec4:	9b05      	ldr	r3, [sp, #20]
   1bec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1beca:	4618      	mov	r0, r3
   1becc:	f7f9 ffb2 	bl	15e34 <DmConnLocalAddrType>
   1bed0:	4603      	mov	r3, r0
   1bed2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  }

  /* note all numbers contained in byte arrays are little endian */

  /* create parameter from xor of r and pres, preq, rat, and iat */
  p = buf;
   1bed6:	ab08      	add	r3, sp, #32
   1bed8:	930d      	str	r3, [sp, #52]	; 0x34
  *p++ = iAddrType ^ *pRand++;
   1beda:	9b03      	ldr	r3, [sp, #12]
   1bedc:	1c5a      	adds	r2, r3, #1
   1bede:	9203      	str	r2, [sp, #12]
   1bee0:	7819      	ldrb	r1, [r3, #0]
   1bee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bee4:	1c5a      	adds	r2, r3, #1
   1bee6:	920d      	str	r2, [sp, #52]	; 0x34
   1bee8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1beec:	404a      	eors	r2, r1
   1beee:	b2d2      	uxtb	r2, r2
   1bef0:	701a      	strb	r2, [r3, #0]
  *p++ = rAddrType ^ *pRand++;
   1bef2:	9b03      	ldr	r3, [sp, #12]
   1bef4:	1c5a      	adds	r2, r3, #1
   1bef6:	9203      	str	r2, [sp, #12]
   1bef8:	7819      	ldrb	r1, [r3, #0]
   1befa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1befc:	1c5a      	adds	r2, r3, #1
   1befe:	920d      	str	r2, [sp, #52]	; 0x34
   1bf00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1bf04:	404a      	eors	r2, r1
   1bf06:	b2d2      	uxtb	r2, r2
   1bf08:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_REQ_LEN; i++)
   1bf0a:	2300      	movs	r3, #0
   1bf0c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1bf10:	e014      	b.n	1bf3c <smpCalcC1Part1+0x14c>
  {
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bf12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1bf16:	9a05      	ldr	r2, [sp, #20]
   1bf18:	4413      	add	r3, r2
   1bf1a:	f893 1020 	ldrb.w	r1, [r3, #32]
   1bf1e:	9b03      	ldr	r3, [sp, #12]
   1bf20:	1c5a      	adds	r2, r3, #1
   1bf22:	9203      	str	r2, [sp, #12]
   1bf24:	781a      	ldrb	r2, [r3, #0]
   1bf26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bf28:	1c58      	adds	r0, r3, #1
   1bf2a:	900d      	str	r0, [sp, #52]	; 0x34
   1bf2c:	404a      	eors	r2, r1
   1bf2e:	b2d2      	uxtb	r2, r2
   1bf30:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_REQ_LEN; i++)
   1bf32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1bf36:	3301      	adds	r3, #1
   1bf38:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1bf3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1bf40:	2b06      	cmp	r3, #6
   1bf42:	d9e6      	bls.n	1bf12 <smpCalcC1Part1+0x122>
  }
  for (i = 0; i < SMP_PAIR_RSP_LEN; i++)
   1bf44:	2300      	movs	r3, #0
   1bf46:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1bf4a:	e014      	b.n	1bf76 <smpCalcC1Part1+0x186>
  {
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bf4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1bf50:	9a05      	ldr	r2, [sp, #20]
   1bf52:	4413      	add	r3, r2
   1bf54:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1bf58:	9b03      	ldr	r3, [sp, #12]
   1bf5a:	1c5a      	adds	r2, r3, #1
   1bf5c:	9203      	str	r2, [sp, #12]
   1bf5e:	781a      	ldrb	r2, [r3, #0]
   1bf60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bf62:	1c58      	adds	r0, r3, #1
   1bf64:	900d      	str	r0, [sp, #52]	; 0x34
   1bf66:	404a      	eors	r2, r1
   1bf68:	b2d2      	uxtb	r2, r2
   1bf6a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_RSP_LEN; i++)
   1bf6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1bf70:	3301      	adds	r3, #1
   1bf72:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1bf76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1bf7a:	2b06      	cmp	r3, #6
   1bf7c:	d9e6      	bls.n	1bf4c <smpCalcC1Part1+0x15c>
  }

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bf7e:	4b13      	ldr	r3, [pc, #76]	; (1bfcc <smpCalcC1Part1+0x1dc>)
   1bf80:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   1bf84:	9b05      	ldr	r3, [sp, #20]
   1bf86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1bf8a:	b29b      	uxth	r3, r3
   1bf8c:	a908      	add	r1, sp, #32
   1bf8e:	200b      	movs	r0, #11
   1bf90:	9000      	str	r0, [sp, #0]
   1bf92:	9804      	ldr	r0, [sp, #16]
   1bf94:	f7fd fc5e 	bl	19854 <SecAes>
   1bf98:	4603      	mov	r3, r0
   1bf9a:	461a      	mov	r2, r3
   1bf9c:	9b05      	ldr	r3, [sp, #20]
   1bf9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
   1bfa2:	9b05      	ldr	r3, [sp, #20]
   1bfa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   1bfa8:	2bff      	cmp	r3, #255	; 0xff
   1bfaa:	d10a      	bne.n	1bfc2 <smpCalcC1Part1+0x1d2>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
   1bfac:	2308      	movs	r3, #8
   1bfae:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bfb2:	2303      	movs	r3, #3
   1bfb4:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1bfb8:	ab07      	add	r3, sp, #28
   1bfba:	4619      	mov	r1, r3
   1bfbc:	9805      	ldr	r0, [sp, #20]
   1bfbe:	f7ff faf1 	bl	1b5a4 <smpSmExecute>
  }
}
   1bfc2:	bf00      	nop
   1bfc4:	b00f      	add	sp, #60	; 0x3c
   1bfc6:	f85d fb04 	ldr.w	pc, [sp], #4
   1bfca:	bf00      	nop
   1bfcc:	100095f8 	.word	0x100095f8

0001bfd0 <smpCalcC1Part2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcC1Part2(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pPart1)
{
   1bfd0:	b500      	push	{lr}
   1bfd2:	b091      	sub	sp, #68	; 0x44
   1bfd4:	9005      	str	r0, [sp, #20]
   1bfd6:	9104      	str	r1, [sp, #16]
   1bfd8:	9203      	str	r2, [sp, #12]
  uint8_t   i;
  uint8_t   *pIaddr;
  uint8_t   *pRaddr;

  /* set initiator/responder addresss */
  if (pCcb->initiator)
   1bfda:	9b05      	ldr	r3, [sp, #20]
   1bfdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1bfe0:	2b00      	cmp	r3, #0
   1bfe2:	d028      	beq.n	1c036 <smpCalcC1Part2+0x66>
  {
    /* use local device's RPA */
    pIaddr = DmConnLocalRpa(pCcb->connId);
   1bfe4:	9b05      	ldr	r3, [sp, #20]
   1bfe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1bfea:	4618      	mov	r0, r3
   1bfec:	f7f9 ff5e 	bl	15eac <DmConnLocalRpa>
   1bff0:	900d      	str	r0, [sp, #52]	; 0x34

    /* if local device's not using RPA */
    if (BdaIsZeros(pIaddr))
   1bff2:	980d      	ldr	r0, [sp, #52]	; 0x34
   1bff4:	f7f8 fa86 	bl	14504 <BdaIsZeros>
   1bff8:	4603      	mov	r3, r0
   1bffa:	2b00      	cmp	r3, #0
   1bffc:	d006      	beq.n	1c00c <smpCalcC1Part2+0x3c>
    {
      /* use local device's address */
      pIaddr = DmConnLocalAddr(pCcb->connId);
   1bffe:	9b05      	ldr	r3, [sp, #20]
   1c000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c004:	4618      	mov	r0, r3
   1c006:	f7f9 ff29 	bl	15e5c <DmConnLocalAddr>
   1c00a:	900d      	str	r0, [sp, #52]	; 0x34
    }

    /* use peer device's RPA */
    pRaddr = DmConnPeerRpa(pCcb->connId);
   1c00c:	9b05      	ldr	r3, [sp, #20]
   1c00e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c012:	4618      	mov	r0, r3
   1c014:	f7f9 ff36 	bl	15e84 <DmConnPeerRpa>
   1c018:	900c      	str	r0, [sp, #48]	; 0x30

    /* if peer device's not using RPA */
    if (BdaIsZeros(pRaddr))
   1c01a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c01c:	f7f8 fa72 	bl	14504 <BdaIsZeros>
   1c020:	4603      	mov	r3, r0
   1c022:	2b00      	cmp	r3, #0
   1c024:	d02f      	beq.n	1c086 <smpCalcC1Part2+0xb6>
    {
      /* use peer device's address */
      pRaddr = DmConnPeerAddr(pCcb->connId);
   1c026:	9b05      	ldr	r3, [sp, #20]
   1c028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c02c:	4618      	mov	r0, r3
   1c02e:	f7f9 feef 	bl	15e10 <DmConnPeerAddr>
   1c032:	900c      	str	r0, [sp, #48]	; 0x30
   1c034:	e027      	b.n	1c086 <smpCalcC1Part2+0xb6>
    }
  }
  else
  {
    /* use peer device's RPA */
    pIaddr = DmConnPeerRpa(pCcb->connId);
   1c036:	9b05      	ldr	r3, [sp, #20]
   1c038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c03c:	4618      	mov	r0, r3
   1c03e:	f7f9 ff21 	bl	15e84 <DmConnPeerRpa>
   1c042:	900d      	str	r0, [sp, #52]	; 0x34

    /* if peer device's not using RPA */
    if (BdaIsZeros(pIaddr))
   1c044:	980d      	ldr	r0, [sp, #52]	; 0x34
   1c046:	f7f8 fa5d 	bl	14504 <BdaIsZeros>
   1c04a:	4603      	mov	r3, r0
   1c04c:	2b00      	cmp	r3, #0
   1c04e:	d006      	beq.n	1c05e <smpCalcC1Part2+0x8e>
    {
      /* use peer device's address */
      pIaddr = DmConnPeerAddr(pCcb->connId);
   1c050:	9b05      	ldr	r3, [sp, #20]
   1c052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c056:	4618      	mov	r0, r3
   1c058:	f7f9 feda 	bl	15e10 <DmConnPeerAddr>
   1c05c:	900d      	str	r0, [sp, #52]	; 0x34
    }

    /* use local device's RPA */
    pRaddr = DmConnLocalRpa(pCcb->connId);
   1c05e:	9b05      	ldr	r3, [sp, #20]
   1c060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c064:	4618      	mov	r0, r3
   1c066:	f7f9 ff21 	bl	15eac <DmConnLocalRpa>
   1c06a:	900c      	str	r0, [sp, #48]	; 0x30

    /* if local device's not using RPA */
    if (BdaIsZeros(pRaddr))
   1c06c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c06e:	f7f8 fa49 	bl	14504 <BdaIsZeros>
   1c072:	4603      	mov	r3, r0
   1c074:	2b00      	cmp	r3, #0
   1c076:	d006      	beq.n	1c086 <smpCalcC1Part2+0xb6>
    {
      /* use local device's address */
      pRaddr = DmConnLocalAddr(pCcb->connId);
   1c078:	9b05      	ldr	r3, [sp, #20]
   1c07a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c07e:	4618      	mov	r0, r3
   1c080:	f7f9 feec 	bl	15e5c <DmConnLocalAddr>
   1c084:	900c      	str	r0, [sp, #48]	; 0x30
  }

  /* note all numbers contained in byte arrays are little endian */

  /* create parameter from xor of part 1 result with ia, ra, and pad */
  p = buf;
   1c086:	ab08      	add	r3, sp, #32
   1c088:	930f      	str	r3, [sp, #60]	; 0x3c
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1c08a:	2306      	movs	r3, #6
   1c08c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1c090:	e012      	b.n	1c0b8 <smpCalcC1Part2+0xe8>
  {
    *p++ = *pRaddr++ ^ *pPart1++;
   1c092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c094:	1c5a      	adds	r2, r3, #1
   1c096:	920c      	str	r2, [sp, #48]	; 0x30
   1c098:	7819      	ldrb	r1, [r3, #0]
   1c09a:	9b03      	ldr	r3, [sp, #12]
   1c09c:	1c5a      	adds	r2, r3, #1
   1c09e:	9203      	str	r2, [sp, #12]
   1c0a0:	781a      	ldrb	r2, [r3, #0]
   1c0a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c0a4:	1c58      	adds	r0, r3, #1
   1c0a6:	900f      	str	r0, [sp, #60]	; 0x3c
   1c0a8:	404a      	eors	r2, r1
   1c0aa:	b2d2      	uxtb	r2, r2
   1c0ac:	701a      	strb	r2, [r3, #0]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1c0ae:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1c0b2:	3b01      	subs	r3, #1
   1c0b4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1c0b8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	d1e8      	bne.n	1c092 <smpCalcC1Part2+0xc2>
  }
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1c0c0:	2306      	movs	r3, #6
   1c0c2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1c0c6:	e012      	b.n	1c0ee <smpCalcC1Part2+0x11e>
  {
    *p++ = *pIaddr++ ^ *pPart1++;
   1c0c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c0ca:	1c5a      	adds	r2, r3, #1
   1c0cc:	920d      	str	r2, [sp, #52]	; 0x34
   1c0ce:	7819      	ldrb	r1, [r3, #0]
   1c0d0:	9b03      	ldr	r3, [sp, #12]
   1c0d2:	1c5a      	adds	r2, r3, #1
   1c0d4:	9203      	str	r2, [sp, #12]
   1c0d6:	781a      	ldrb	r2, [r3, #0]
   1c0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c0da:	1c58      	adds	r0, r3, #1
   1c0dc:	900f      	str	r0, [sp, #60]	; 0x3c
   1c0de:	404a      	eors	r2, r1
   1c0e0:	b2d2      	uxtb	r2, r2
   1c0e2:	701a      	strb	r2, [r3, #0]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1c0e4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1c0e8:	3b01      	subs	r3, #1
   1c0ea:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1c0ee:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1c0f2:	2b00      	cmp	r3, #0
   1c0f4:	d1e8      	bne.n	1c0c8 <smpCalcC1Part2+0xf8>
  }
  *p++ = *pPart1++;
   1c0f6:	9a03      	ldr	r2, [sp, #12]
   1c0f8:	1c53      	adds	r3, r2, #1
   1c0fa:	9303      	str	r3, [sp, #12]
   1c0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c0fe:	1c59      	adds	r1, r3, #1
   1c100:	910f      	str	r1, [sp, #60]	; 0x3c
   1c102:	7812      	ldrb	r2, [r2, #0]
   1c104:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
   1c106:	9a03      	ldr	r2, [sp, #12]
   1c108:	1c53      	adds	r3, r2, #1
   1c10a:	9303      	str	r3, [sp, #12]
   1c10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c10e:	1c59      	adds	r1, r3, #1
   1c110:	910f      	str	r1, [sp, #60]	; 0x3c
   1c112:	7812      	ldrb	r2, [r2, #0]
   1c114:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
   1c116:	9a03      	ldr	r2, [sp, #12]
   1c118:	1c53      	adds	r3, r2, #1
   1c11a:	9303      	str	r3, [sp, #12]
   1c11c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c11e:	1c59      	adds	r1, r3, #1
   1c120:	910f      	str	r1, [sp, #60]	; 0x3c
   1c122:	7812      	ldrb	r2, [r2, #0]
   1c124:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
   1c126:	9a03      	ldr	r2, [sp, #12]
   1c128:	1c53      	adds	r3, r2, #1
   1c12a:	9303      	str	r3, [sp, #12]
   1c12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c12e:	1c59      	adds	r1, r3, #1
   1c130:	910f      	str	r1, [sp, #60]	; 0x3c
   1c132:	7812      	ldrb	r2, [r2, #0]
   1c134:	701a      	strb	r2, [r3, #0]

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1c136:	4b13      	ldr	r3, [pc, #76]	; (1c184 <smpCalcC1Part2+0x1b4>)
   1c138:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   1c13c:	9b05      	ldr	r3, [sp, #20]
   1c13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c142:	b29b      	uxth	r3, r3
   1c144:	a908      	add	r1, sp, #32
   1c146:	200b      	movs	r0, #11
   1c148:	9000      	str	r0, [sp, #0]
   1c14a:	9804      	ldr	r0, [sp, #16]
   1c14c:	f7fd fb82 	bl	19854 <SecAes>
   1c150:	4603      	mov	r3, r0
   1c152:	461a      	mov	r2, r3
   1c154:	9b05      	ldr	r3, [sp, #20]
   1c156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
   1c15a:	9b05      	ldr	r3, [sp, #20]
   1c15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   1c160:	2bff      	cmp	r3, #255	; 0xff
   1c162:	d10a      	bne.n	1c17a <smpCalcC1Part2+0x1aa>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
   1c164:	2308      	movs	r3, #8
   1c166:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c16a:	2303      	movs	r3, #3
   1c16c:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c170:	ab07      	add	r3, sp, #28
   1c172:	4619      	mov	r1, r3
   1c174:	9805      	ldr	r0, [sp, #20]
   1c176:	f7ff fa15 	bl	1b5a4 <smpSmExecute>
  }
}
   1c17a:	bf00      	nop
   1c17c:	b011      	add	sp, #68	; 0x44
   1c17e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c182:	bf00      	nop
   1c184:	100095f8 	.word	0x100095f8

0001c188 <smpCalcS1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcS1(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pRand1, uint8_t *pRand2)
{
   1c188:	b500      	push	{lr}
   1c18a:	b08d      	sub	sp, #52	; 0x34
   1c18c:	9005      	str	r0, [sp, #20]
   1c18e:	9104      	str	r1, [sp, #16]
   1c190:	9203      	str	r2, [sp, #12]
   1c192:	9302      	str	r3, [sp, #8]
  uint8_t   buf[HCI_ENCRYPT_DATA_LEN];

  /* note all numbers contained in byte arrays are little endian */

  /* construct parameter r' from r1 and r2 */
  Calc128Cpy64(buf, pRand2);
   1c194:	ab08      	add	r3, sp, #32
   1c196:	9902      	ldr	r1, [sp, #8]
   1c198:	4618      	mov	r0, r3
   1c19a:	f7f8 f9d8 	bl	1454e <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
   1c19e:	ab08      	add	r3, sp, #32
   1c1a0:	3308      	adds	r3, #8
   1c1a2:	9903      	ldr	r1, [sp, #12]
   1c1a4:	4618      	mov	r0, r3
   1c1a6:	f7f8 f9d2 	bl	1454e <Calc128Cpy64>

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1c1aa:	4b13      	ldr	r3, [pc, #76]	; (1c1f8 <smpCalcS1+0x70>)
   1c1ac:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   1c1b0:	9b05      	ldr	r3, [sp, #20]
   1c1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c1b6:	b29b      	uxth	r3, r3
   1c1b8:	a908      	add	r1, sp, #32
   1c1ba:	200b      	movs	r0, #11
   1c1bc:	9000      	str	r0, [sp, #0]
   1c1be:	9804      	ldr	r0, [sp, #16]
   1c1c0:	f7fd fb48 	bl	19854 <SecAes>
   1c1c4:	4603      	mov	r3, r0
   1c1c6:	461a      	mov	r2, r3
   1c1c8:	9b05      	ldr	r3, [sp, #20]
   1c1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
   1c1ce:	9b05      	ldr	r3, [sp, #20]
   1c1d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   1c1d4:	2bff      	cmp	r3, #255	; 0xff
   1c1d6:	d10a      	bne.n	1c1ee <smpCalcS1+0x66>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
   1c1d8:	2308      	movs	r3, #8
   1c1da:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c1de:	2303      	movs	r3, #3
   1c1e0:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c1e4:	ab07      	add	r3, sp, #28
   1c1e6:	4619      	mov	r1, r3
   1c1e8:	9805      	ldr	r0, [sp, #20]
   1c1ea:	f7ff f9db 	bl	1b5a4 <smpSmExecute>
  }
}
   1c1ee:	bf00      	nop
   1c1f0:	b00d      	add	sp, #52	; 0x34
   1c1f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1c1f6:	bf00      	nop
   1c1f8:	100095f8 	.word	0x100095f8

0001c1fc <smpGenerateLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpGenerateLtk(smpCcb_t *pCcb)
{
   1c1fc:	b500      	push	{lr}
   1c1fe:	b085      	sub	sp, #20
   1c200:	9001      	str	r0, [sp, #4]
  uint8_t *p;
  smpScratch_t *pScr = pCcb->pScr;
   1c202:	9b01      	ldr	r3, [sp, #4]
   1c204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c206:	9303      	str	r3, [sp, #12]

  /* generated results are stored in scratch buffer */
  p = pScr->keyInd.keyData.ltk.key;
   1c208:	9b03      	ldr	r3, [sp, #12]
   1c20a:	3304      	adds	r3, #4
   1c20c:	9302      	str	r3, [sp, #8]

  /* generate LTK from random number */
  SecRand(p, pScr->keyInd.encKeyLen);
   1c20e:	9b03      	ldr	r3, [sp, #12]
   1c210:	f893 3020 	ldrb.w	r3, [r3, #32]
   1c214:	4619      	mov	r1, r3
   1c216:	9802      	ldr	r0, [sp, #8]
   1c218:	f7fd fe00 	bl	19e1c <SecRand>
  p += pScr->keyInd.encKeyLen;
   1c21c:	9b03      	ldr	r3, [sp, #12]
   1c21e:	f893 3020 	ldrb.w	r3, [r3, #32]
   1c222:	461a      	mov	r2, r3
   1c224:	9b02      	ldr	r3, [sp, #8]
   1c226:	4413      	add	r3, r2
   1c228:	9302      	str	r3, [sp, #8]

  /* set remaining key bytes to zero */
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
   1c22a:	9b03      	ldr	r3, [sp, #12]
   1c22c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1c230:	f1c3 0310 	rsb	r3, r3, #16
   1c234:	461a      	mov	r2, r3
   1c236:	2100      	movs	r1, #0
   1c238:	9802      	ldr	r0, [sp, #8]
   1c23a:	f00c f8ff 	bl	2843c <memset>

  /* use existing random number stored in scratch buf b4 for EDIV and RAND */
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1c23e:	9b03      	ldr	r3, [sp, #12]
   1c240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1c244:	b29a      	uxth	r2, r3
   1c246:	9b03      	ldr	r3, [sp, #12]
   1c248:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   1c24c:	b29b      	uxth	r3, r3
   1c24e:	021b      	lsls	r3, r3, #8
   1c250:	b29b      	uxth	r3, r3
   1c252:	4413      	add	r3, r2
   1c254:	b29a      	uxth	r2, r3
   1c256:	9b03      	ldr	r3, [sp, #12]
   1c258:	839a      	strh	r2, [r3, #28]
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1c25a:	9b03      	ldr	r3, [sp, #12]
   1c25c:	f103 0014 	add.w	r0, r3, #20
   1c260:	9b03      	ldr	r3, [sp, #12]
   1c262:	3332      	adds	r3, #50	; 0x32
   1c264:	2208      	movs	r2, #8
   1c266:	4619      	mov	r1, r3
   1c268:	f7ef ff4a 	bl	c100 <memcpy>

  /* pass key to app via DM */
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   1c26c:	9b03      	ldr	r3, [sp, #12]
   1c26e:	2201      	movs	r2, #1
   1c270:	779a      	strb	r2, [r3, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1c272:	9b01      	ldr	r3, [sp, #4]
   1c274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1c278:	f003 0304 	and.w	r3, r3, #4
   1c27c:	2b00      	cmp	r3, #0
   1c27e:	d001      	beq.n	1c284 <smpGenerateLtk+0x88>
   1c280:	2202      	movs	r2, #2
   1c282:	e000      	b.n	1c286 <smpGenerateLtk+0x8a>
   1c284:	2201      	movs	r2, #1
   1c286:	9b03      	ldr	r3, [sp, #12]
   1c288:	77da      	strb	r2, [r3, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   1c28a:	9b03      	ldr	r3, [sp, #12]
   1c28c:	222f      	movs	r2, #47	; 0x2f
   1c28e:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   1c290:	9b03      	ldr	r3, [sp, #12]
   1c292:	4618      	mov	r0, r3
   1c294:	f7fa fed8 	bl	17048 <DmSmpCbackExec>
}
   1c298:	bf00      	nop
   1c29a:	b005      	add	sp, #20
   1c29c:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2a0 <smpSendPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPkt(smpCcb_t *pCcb, uint8_t *pPkt)
{
   1c2a0:	b500      	push	{lr}
   1c2a2:	b083      	sub	sp, #12
   1c2a4:	9001      	str	r0, [sp, #4]
   1c2a6:	9100      	str	r1, [sp, #0]
  /* if flow disabled */
  if (pCcb->flowDisabled)
   1c2a8:	9b01      	ldr	r3, [sp, #4]
   1c2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d014      	beq.n	1c2dc <smpSendPkt+0x3c>
  {
    /* if packet already queued discard it and replace it with this new packet */
    if (pCcb->pQueued != NULL)
   1c2b2:	9b01      	ldr	r3, [sp, #4]
   1c2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c2b6:	2b00      	cmp	r3, #0
   1c2b8:	d00c      	beq.n	1c2d4 <smpSendPkt+0x34>
    {
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
   1c2ba:	9b01      	ldr	r3, [sp, #4]
   1c2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c2be:	3308      	adds	r3, #8
   1c2c0:	781b      	ldrb	r3, [r3, #0]
   1c2c2:	4619      	mov	r1, r3
   1c2c4:	480e      	ldr	r0, [pc, #56]	; (1c300 <smpSendPkt+0x60>)
   1c2c6:	f7f1 fbbf 	bl	da48 <WsfTrace>
      WsfMsgFree(pCcb->pQueued);
   1c2ca:	9b01      	ldr	r3, [sp, #4]
   1c2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c2ce:	4618      	mov	r0, r3
   1c2d0:	f7f0 ff68 	bl	d1a4 <WsfMsgFree>
    }

    /* queue packet */
    pCcb->pQueued = pPkt;
   1c2d4:	9b01      	ldr	r3, [sp, #4]
   1c2d6:	9a00      	ldr	r2, [sp, #0]
   1c2d8:	635a      	str	r2, [r3, #52]	; 0x34
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
  }
}
   1c2da:	e00c      	b.n	1c2f6 <smpSendPkt+0x56>
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1c2dc:	9b01      	ldr	r3, [sp, #4]
   1c2de:	8f19      	ldrh	r1, [r3, #56]	; 0x38
   1c2e0:	9b00      	ldr	r3, [sp, #0]
   1c2e2:	3308      	adds	r3, #8
   1c2e4:	781b      	ldrb	r3, [r3, #0]
   1c2e6:	461a      	mov	r2, r3
   1c2e8:	4b06      	ldr	r3, [pc, #24]	; (1c304 <smpSendPkt+0x64>)
   1c2ea:	5c9b      	ldrb	r3, [r3, r2]
   1c2ec:	b29a      	uxth	r2, r3
   1c2ee:	9b00      	ldr	r3, [sp, #0]
   1c2f0:	2006      	movs	r0, #6
   1c2f2:	f7f0 f9dd 	bl	c6b0 <L2cDataReq>
}
   1c2f6:	bf00      	nop
   1c2f8:	b003      	add	sp, #12
   1c2fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1c2fe:	bf00      	nop
   1c300:	0002bc84 	.word	0x0002bc84
   1c304:	0002ca30 	.word	0x0002ca30

0001c308 <smpStateIdle>:
 *
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
   1c308:	b082      	sub	sp, #8
   1c30a:	9001      	str	r0, [sp, #4]
  return (pCcb->state == 0);
   1c30c:	9b01      	ldr	r3, [sp, #4]
   1c30e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   1c312:	2b00      	cmp	r3, #0
   1c314:	bf0c      	ite	eq
   1c316:	2301      	moveq	r3, #1
   1c318:	2300      	movne	r3, #0
   1c31a:	b2db      	uxtb	r3, r3
}
   1c31c:	4618      	mov	r0, r3
   1c31e:	b002      	add	sp, #8
   1c320:	4770      	bx	lr

0001c322 <smpMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
   1c322:	b500      	push	{lr}
   1c324:	b083      	sub	sp, #12
   1c326:	4603      	mov	r3, r0
   1c328:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1c32c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c330:	2100      	movs	r1, #0
   1c332:	4618      	mov	r0, r3
   1c334:	f7f0 ff06 	bl	d144 <WsfMsgDataAlloc>
   1c338:	4603      	mov	r3, r0
}
   1c33a:	4618      	mov	r0, r3
   1c33c:	b003      	add	sp, #12
   1c33e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001c344 <SmpDmMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
   1c344:	b500      	push	{lr}
   1c346:	b083      	sub	sp, #12
   1c348:	9001      	str	r0, [sp, #4]
  WsfMsgSend(smpCb.handlerId, pMsg);
   1c34a:	4b05      	ldr	r3, [pc, #20]	; (1c360 <SmpDmMsgSend+0x1c>)
   1c34c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   1c350:	9901      	ldr	r1, [sp, #4]
   1c352:	4618      	mov	r0, r3
   1c354:	f7f0 ff32 	bl	d1bc <WsfMsgSend>
}
   1c358:	bf00      	nop
   1c35a:	b003      	add	sp, #12
   1c35c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c360:	100095f8 	.word	0x100095f8

0001c364 <SmpDmEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
   1c364:	b500      	push	{lr}
   1c366:	b083      	sub	sp, #12
   1c368:	9001      	str	r0, [sp, #4]
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1c36a:	9b01      	ldr	r3, [sp, #4]
   1c36c:	78db      	ldrb	r3, [r3, #3]
   1c36e:	2b00      	cmp	r3, #0
   1c370:	d101      	bne.n	1c376 <SmpDmEncryptInd+0x12>
   1c372:	2208      	movs	r2, #8
   1c374:	e000      	b.n	1c378 <SmpDmEncryptInd+0x14>
   1c376:	2209      	movs	r2, #9
   1c378:	9b01      	ldr	r3, [sp, #4]
   1c37a:	709a      	strb	r2, [r3, #2]
                 SMP_MSG_DM_ENCRYPT_CMPL : SMP_MSG_DM_ENCRYPT_FAILED;

  /* pass event to handler */
  SmpHandler(0, pMsg);
   1c37c:	9901      	ldr	r1, [sp, #4]
   1c37e:	2000      	movs	r0, #0
   1c380:	f000 f8b6 	bl	1c4f0 <SmpHandler>
}
   1c384:	bf00      	nop
   1c386:	b003      	add	sp, #12
   1c388:	f85d fb04 	ldr.w	pc, [sp], #4

0001c38c <smpGetScSecLevel>:
*
*  \return Security level.
*/
/*************************************************************************************************/
uint8_t smpGetScSecLevel(smpCcb_t *pCcb)
{
   1c38c:	b084      	sub	sp, #16
   1c38e:	9001      	str	r0, [sp, #4]
  uint8_t secLevel;

  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1c390:	9b01      	ldr	r3, [sp, #4]
   1c392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1c396:	f003 0304 	and.w	r3, r3, #4
   1c39a:	2b00      	cmp	r3, #0
   1c39c:	d013      	beq.n	1c3c6 <smpGetScSecLevel+0x3a>
  {
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   1c39e:	9b01      	ldr	r3, [sp, #4]
   1c3a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1c3a4:	9b01      	ldr	r3, [sp, #4]
   1c3a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c3aa:	4293      	cmp	r3, r2
   1c3ac:	bf28      	it	cs
   1c3ae:	4613      	movcs	r3, r2
   1c3b0:	b2db      	uxtb	r3, r3
   1c3b2:	2b10      	cmp	r3, #16
   1c3b4:	d103      	bne.n	1c3be <smpGetScSecLevel+0x32>
    {
      secLevel = DM_SEC_LEVEL_ENC_LESC;
   1c3b6:	2303      	movs	r3, #3
   1c3b8:	f88d 300f 	strb.w	r3, [sp, #15]
   1c3bc:	e006      	b.n	1c3cc <smpGetScSecLevel+0x40>
    }
    else
    {
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   1c3be:	2302      	movs	r3, #2
   1c3c0:	f88d 300f 	strb.w	r3, [sp, #15]
   1c3c4:	e002      	b.n	1c3cc <smpGetScSecLevel+0x40>
    }
  }
  else
  {
    secLevel = DM_SEC_LEVEL_ENC;
   1c3c6:	2301      	movs	r3, #1
   1c3c8:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return secLevel;
   1c3cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1c3d0:	4618      	mov	r0, r3
   1c3d2:	b004      	add	sp, #16
   1c3d4:	4770      	bx	lr
	...

0001c3d8 <SmpDmGetStk>:
 *
 *  \return Pointer to STK or NULL if not available.
 */
/*************************************************************************************************/
uint8_t *SmpDmGetStk(dmConnId_t connId, uint8_t *pSecLevel)
{
   1c3d8:	b500      	push	{lr}
   1c3da:	b085      	sub	sp, #20
   1c3dc:	4603      	mov	r3, r0
   1c3de:	9100      	str	r1, [sp, #0]
   1c3e0:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t     *pCcb;

  /* get connection control block */
  pCcb = smpCcbByConnId(connId);
   1c3e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c3e8:	4618      	mov	r0, r3
   1c3ea:	f7ff fcef 	bl	1bdcc <smpCcbByConnId>
   1c3ee:	9003      	str	r0, [sp, #12]

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1c3f0:	4b19      	ldr	r3, [pc, #100]	; (1c458 <SmpDmGetStk+0x80>)
   1c3f2:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	d015      	beq.n	1c426 <SmpDmGetStk+0x4e>
   1c3fa:	9b03      	ldr	r3, [sp, #12]
   1c3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c3fe:	781b      	ldrb	r3, [r3, #0]
   1c400:	2b00      	cmp	r3, #0
   1c402:	d010      	beq.n	1c426 <SmpDmGetStk+0x4e>
   1c404:	9b03      	ldr	r3, [sp, #12]
   1c406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c408:	699b      	ldr	r3, [r3, #24]
   1c40a:	2b00      	cmp	r3, #0
   1c40c:	d00b      	beq.n	1c426 <SmpDmGetStk+0x4e>
  {
    /* set security level */
    *pSecLevel = smpGetScSecLevel(pCcb);
   1c40e:	9803      	ldr	r0, [sp, #12]
   1c410:	f7ff ffbc 	bl	1c38c <smpGetScSecLevel>
   1c414:	4603      	mov	r3, r0
   1c416:	461a      	mov	r2, r3
   1c418:	9b00      	ldr	r3, [sp, #0]
   1c41a:	701a      	strb	r2, [r3, #0]

    /* return buffer containing STK */
    return pCcb->pScCcb->pLtk->ltk_t;
   1c41c:	9b03      	ldr	r3, [sp, #12]
   1c41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c420:	699b      	ldr	r3, [r3, #24]
   1c422:	3310      	adds	r3, #16
   1c424:	e014      	b.n	1c450 <SmpDmGetStk+0x78>
  }
  else if (pCcb->pScr != NULL)
   1c426:	9b03      	ldr	r3, [sp, #12]
   1c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c42a:	2b00      	cmp	r3, #0
   1c42c:	d00f      	beq.n	1c44e <SmpDmGetStk+0x76>
  {
    /* set security level */
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1c42e:	9b03      	ldr	r3, [sp, #12]
   1c430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1c434:	f003 0304 	and.w	r3, r3, #4
   1c438:	2b00      	cmp	r3, #0
   1c43a:	d001      	beq.n	1c440 <SmpDmGetStk+0x68>
   1c43c:	2202      	movs	r2, #2
   1c43e:	e000      	b.n	1c442 <SmpDmGetStk+0x6a>
   1c440:	2201      	movs	r2, #1
   1c442:	9b00      	ldr	r3, [sp, #0]
   1c444:	701a      	strb	r2, [r3, #0]

    /* return buffer containing STK */
    return pCcb->pScr->buf.b3;
   1c446:	9b03      	ldr	r3, [sp, #12]
   1c448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c44a:	3320      	adds	r3, #32
   1c44c:	e000      	b.n	1c450 <SmpDmGetStk+0x78>
  }
  else
  {
    return NULL;
   1c44e:	2300      	movs	r3, #0
  }
}
   1c450:	4618      	mov	r0, r3
   1c452:	b005      	add	sp, #20
   1c454:	f85d fb04 	ldr.w	pc, [sp], #4
   1c458:	100095f8 	.word	0x100095f8

0001c45c <SmpHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpHandlerInit(wsfHandlerId_t handlerId)
{
   1c45c:	b500      	push	{lr}
   1c45e:	b085      	sub	sp, #20
   1c460:	4603      	mov	r3, r0
   1c462:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t     i;
  smpCcb_t   *pCcb;

  /* store handler ID */
  smpCb.handlerId = handlerId;
   1c466:	4a1e      	ldr	r2, [pc, #120]	; (1c4e0 <SmpHandlerInit+0x84>)
   1c468:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c46c:	f882 30e0 	strb.w	r3, [r2, #224]	; 0xe0

  /* Initialize the SMP device database */
  SmpDbInit();
   1c470:	f7ff f9b8 	bl	1b7e4 <SmpDbInit>

  /* Initialize control block CCBs */
  for (i = 0, pCcb = smpCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   1c474:	2300      	movs	r3, #0
   1c476:	f88d 300f 	strb.w	r3, [sp, #15]
   1c47a:	4b19      	ldr	r3, [pc, #100]	; (1c4e0 <SmpHandlerInit+0x84>)
   1c47c:	9302      	str	r3, [sp, #8]
   1c47e:	e01d      	b.n	1c4bc <SmpHandlerInit+0x60>
  {
    /* initialize response timer */
    pCcb->rspTimer.handlerId = handlerId;
   1c480:	9b02      	ldr	r3, [sp, #8]
   1c482:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1c486:	721a      	strb	r2, [r3, #8]
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1c488:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c48c:	b29b      	uxth	r3, r3
   1c48e:	3301      	adds	r3, #1
   1c490:	b29a      	uxth	r2, r3
   1c492:	9b02      	ldr	r3, [sp, #8]
   1c494:	815a      	strh	r2, [r3, #10]

    /* initialize wait interval timer */
    pCcb->waitTimer.handlerId = handlerId;
   1c496:	9b02      	ldr	r3, [sp, #8]
   1c498:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1c49c:	761a      	strb	r2, [r3, #24]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1c49e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c4a2:	b29b      	uxth	r3, r3
   1c4a4:	3301      	adds	r3, #1
   1c4a6:	b29a      	uxth	r2, r3
   1c4a8:	9b02      	ldr	r3, [sp, #8]
   1c4aa:	835a      	strh	r2, [r3, #26]
  for (i = 0, pCcb = smpCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   1c4ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c4b0:	3301      	adds	r3, #1
   1c4b2:	f88d 300f 	strb.w	r3, [sp, #15]
   1c4b6:	9b02      	ldr	r3, [sp, #8]
   1c4b8:	3348      	adds	r3, #72	; 0x48
   1c4ba:	9302      	str	r3, [sp, #8]
   1c4bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c4c0:	2b02      	cmp	r3, #2
   1c4c2:	d9dd      	bls.n	1c480 <SmpHandlerInit+0x24>
  }

  /* Register with L2C */
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1c4c4:	4a07      	ldr	r2, [pc, #28]	; (1c4e4 <SmpHandlerInit+0x88>)
   1c4c6:	4908      	ldr	r1, [pc, #32]	; (1c4e8 <SmpHandlerInit+0x8c>)
   1c4c8:	2006      	movs	r0, #6
   1c4ca:	f7f0 f8d5 	bl	c678 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   1c4ce:	4907      	ldr	r1, [pc, #28]	; (1c4ec <SmpHandlerInit+0x90>)
   1c4d0:	2001      	movs	r0, #1
   1c4d2:	f7f9 fafb 	bl	15acc <DmConnRegister>
}
   1c4d6:	bf00      	nop
   1c4d8:	b005      	add	sp, #20
   1c4da:	f85d fb04 	ldr.w	pc, [sp], #4
   1c4de:	bf00      	nop
   1c4e0:	100095f8 	.word	0x100095f8
   1c4e4:	0001bb65 	.word	0x0001bb65
   1c4e8:	0001baa1 	.word	0x0001baa1
   1c4ec:	0001bc6d 	.word	0x0001bc6d

0001c4f0 <SmpHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1c4f0:	b500      	push	{lr}
   1c4f2:	b085      	sub	sp, #20
   1c4f4:	4603      	mov	r3, r0
   1c4f6:	9100      	str	r1, [sp, #0]
   1c4f8:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t     *pCcb;

  /* Handle message */
  if (pMsg != NULL)
   1c4fc:	9b00      	ldr	r3, [sp, #0]
   1c4fe:	2b00      	cmp	r3, #0
   1c500:	d03b      	beq.n	1c57a <SmpHandler+0x8a>
  {
    if (pMsg->event == SMP_DB_SERVICE_IND)
   1c502:	9b00      	ldr	r3, [sp, #0]
   1c504:	789b      	ldrb	r3, [r3, #2]
   1c506:	2b1f      	cmp	r3, #31
   1c508:	d102      	bne.n	1c510 <SmpHandler+0x20>
    {
      SmpDbService();
   1c50a:	f7ff fa5f 	bl	1b9cc <SmpDbService>
  /* Handle events */
  else if (event)
  {

  }
}
   1c50e:	e034      	b.n	1c57a <SmpHandler+0x8a>
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   1c510:	9b00      	ldr	r3, [sp, #0]
   1c512:	789b      	ldrb	r3, [r3, #2]
   1c514:	2b1c      	cmp	r3, #28
   1c516:	d10a      	bne.n	1c52e <SmpHandler+0x3e>
        secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
   1c518:	9b00      	ldr	r3, [sp, #0]
   1c51a:	9303      	str	r3, [sp, #12]
        if (pCmac->pPlainText)
   1c51c:	9b03      	ldr	r3, [sp, #12]
   1c51e:	689b      	ldr	r3, [r3, #8]
   1c520:	2b00      	cmp	r3, #0
   1c522:	d004      	beq.n	1c52e <SmpHandler+0x3e>
          WsfBufFree(pCmac->pPlainText);
   1c524:	9b03      	ldr	r3, [sp, #12]
   1c526:	689b      	ldr	r3, [r3, #8]
   1c528:	4618      	mov	r0, r3
   1c52a:	f7f0 fdd3 	bl	d0d4 <WsfBufFree>
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);
   1c52e:	9b00      	ldr	r3, [sp, #0]
   1c530:	881b      	ldrh	r3, [r3, #0]
   1c532:	b2db      	uxtb	r3, r3
   1c534:	4618      	mov	r0, r3
   1c536:	f7ff fc49 	bl	1bdcc <smpCcbByConnId>
   1c53a:	9002      	str	r0, [sp, #8]
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c53c:	9b02      	ldr	r3, [sp, #8]
   1c53e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c542:	2b00      	cmp	r3, #0
   1c544:	d019      	beq.n	1c57a <SmpHandler+0x8a>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
   1c546:	9b00      	ldr	r3, [sp, #0]
   1c548:	789b      	ldrb	r3, [r3, #2]
   1c54a:	2b0b      	cmp	r3, #11
   1c54c:	d111      	bne.n	1c572 <SmpHandler+0x82>
   1c54e:	9b02      	ldr	r3, [sp, #8]
   1c550:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   1c554:	9b00      	ldr	r3, [sp, #0]
   1c556:	78db      	ldrb	r3, [r3, #3]
   1c558:	429a      	cmp	r2, r3
   1c55a:	d00a      	beq.n	1c572 <SmpHandler+0x82>
          SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1c55c:	9b02      	ldr	r3, [sp, #8]
   1c55e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   1c562:	4619      	mov	r1, r3
   1c564:	9b00      	ldr	r3, [sp, #0]
   1c566:	78db      	ldrb	r3, [r3, #3]
   1c568:	461a      	mov	r2, r3
   1c56a:	4806      	ldr	r0, [pc, #24]	; (1c584 <SmpHandler+0x94>)
   1c56c:	f7f1 fa6c 	bl	da48 <WsfTrace>
}
   1c570:	e003      	b.n	1c57a <SmpHandler+0x8a>
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1c572:	9900      	ldr	r1, [sp, #0]
   1c574:	9802      	ldr	r0, [sp, #8]
   1c576:	f7ff f815 	bl	1b5a4 <smpSmExecute>
}
   1c57a:	bf00      	nop
   1c57c:	b005      	add	sp, #20
   1c57e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c582:	bf00      	nop
   1c584:	0002bca8 	.word	0x0002bca8

0001c588 <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1c588:	b500      	push	{lr}
   1c58a:	b085      	sub	sp, #20
   1c58c:	9001      	str	r0, [sp, #4]
   1c58e:	9100      	str	r1, [sp, #0]
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1c590:	9b01      	ldr	r3, [sp, #4]
   1c592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c596:	4618      	mov	r0, r3
   1c598:	f7f8 fdaa 	bl	150f0 <dmConnCcbById>
   1c59c:	9003      	str	r0, [sp, #12]

  if (pDmCcb)
   1c59e:	9b03      	ldr	r3, [sp, #12]
   1c5a0:	2b00      	cmp	r3, #0
   1c5a2:	d04b      	beq.n	1c63c <smpScCatInitiatorBdAddr+0xb4>
  {
    if (pCcb->initiator)
   1c5a4:	9b01      	ldr	r3, [sp, #4]
   1c5a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1c5aa:	2b00      	cmp	r3, #0
   1c5ac:	d022      	beq.n	1c5f4 <smpScCatInitiatorBdAddr+0x6c>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   1c5ae:	9b03      	ldr	r3, [sp, #12]
   1c5b0:	331a      	adds	r3, #26
   1c5b2:	4618      	mov	r0, r3
   1c5b4:	f7f7 ffa6 	bl	14504 <BdaIsZeros>
   1c5b8:	4603      	mov	r3, r0
   1c5ba:	2b00      	cmp	r3, #0
   1c5bc:	d10c      	bne.n	1c5d8 <smpScCatInitiatorBdAddr+0x50>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1c5be:	9b00      	ldr	r3, [sp, #0]
   1c5c0:	1c5a      	adds	r2, r3, #1
   1c5c2:	9200      	str	r2, [sp, #0]
   1c5c4:	2201      	movs	r2, #1
   1c5c6:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   1c5c8:	9b03      	ldr	r3, [sp, #12]
   1c5ca:	331a      	adds	r3, #26
   1c5cc:	2206      	movs	r2, #6
   1c5ce:	4619      	mov	r1, r3
   1c5d0:	9800      	ldr	r0, [sp, #0]
   1c5d2:	f7f7 ffe8 	bl	145a6 <WStrReverseCpy>
   1c5d6:	e02e      	b.n	1c636 <smpScCatInitiatorBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->localAddrType;
   1c5d8:	9b00      	ldr	r3, [sp, #0]
   1c5da:	1c5a      	adds	r2, r3, #1
   1c5dc:	9200      	str	r2, [sp, #0]
   1c5de:	9a03      	ldr	r2, [sp, #12]
   1c5e0:	7d12      	ldrb	r2, [r2, #20]
   1c5e2:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1c5e4:	9b03      	ldr	r3, [sp, #12]
   1c5e6:	3306      	adds	r3, #6
   1c5e8:	2206      	movs	r2, #6
   1c5ea:	4619      	mov	r1, r3
   1c5ec:	9800      	ldr	r0, [sp, #0]
   1c5ee:	f7f7 ffda 	bl	145a6 <WStrReverseCpy>
   1c5f2:	e020      	b.n	1c636 <smpScCatInitiatorBdAddr+0xae>
      }
    }
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   1c5f4:	9b03      	ldr	r3, [sp, #12]
   1c5f6:	3320      	adds	r3, #32
   1c5f8:	4618      	mov	r0, r3
   1c5fa:	f7f7 ff83 	bl	14504 <BdaIsZeros>
   1c5fe:	4603      	mov	r3, r0
   1c600:	2b00      	cmp	r3, #0
   1c602:	d10c      	bne.n	1c61e <smpScCatInitiatorBdAddr+0x96>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1c604:	9b00      	ldr	r3, [sp, #0]
   1c606:	1c5a      	adds	r2, r3, #1
   1c608:	9200      	str	r2, [sp, #0]
   1c60a:	2201      	movs	r2, #1
   1c60c:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   1c60e:	9b03      	ldr	r3, [sp, #12]
   1c610:	3320      	adds	r3, #32
   1c612:	2206      	movs	r2, #6
   1c614:	4619      	mov	r1, r3
   1c616:	9800      	ldr	r0, [sp, #0]
   1c618:	f7f7 ffc5 	bl	145a6 <WStrReverseCpy>
   1c61c:	e00b      	b.n	1c636 <smpScCatInitiatorBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->peerAddrType;
   1c61e:	9b00      	ldr	r3, [sp, #0]
   1c620:	1c5a      	adds	r2, r3, #1
   1c622:	9200      	str	r2, [sp, #0]
   1c624:	9a03      	ldr	r2, [sp, #12]
   1c626:	7cd2      	ldrb	r2, [r2, #19]
   1c628:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1c62a:	9b03      	ldr	r3, [sp, #12]
   1c62c:	2206      	movs	r2, #6
   1c62e:	4619      	mov	r1, r3
   1c630:	9800      	ldr	r0, [sp, #0]
   1c632:	f7f7 ffb8 	bl	145a6 <WStrReverseCpy>
      }
    }

    pBuf += BDA_ADDR_LEN;
   1c636:	9b00      	ldr	r3, [sp, #0]
   1c638:	3306      	adds	r3, #6
   1c63a:	9300      	str	r3, [sp, #0]
  }

  return pBuf;
   1c63c:	9b00      	ldr	r3, [sp, #0]
}
   1c63e:	4618      	mov	r0, r3
   1c640:	b005      	add	sp, #20
   1c642:	f85d fb04 	ldr.w	pc, [sp], #4

0001c646 <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1c646:	b500      	push	{lr}
   1c648:	b085      	sub	sp, #20
   1c64a:	9001      	str	r0, [sp, #4]
   1c64c:	9100      	str	r1, [sp, #0]
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1c64e:	9b01      	ldr	r3, [sp, #4]
   1c650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c654:	4618      	mov	r0, r3
   1c656:	f7f8 fd4b 	bl	150f0 <dmConnCcbById>
   1c65a:	9003      	str	r0, [sp, #12]

  if (pDmCcb)
   1c65c:	9b03      	ldr	r3, [sp, #12]
   1c65e:	2b00      	cmp	r3, #0
   1c660:	d04b      	beq.n	1c6fa <smpScCatResponderBdAddr+0xb4>
  {
    if (pCcb->initiator)
   1c662:	9b01      	ldr	r3, [sp, #4]
   1c664:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1c668:	2b00      	cmp	r3, #0
   1c66a:	d021      	beq.n	1c6b0 <smpScCatResponderBdAddr+0x6a>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   1c66c:	9b03      	ldr	r3, [sp, #12]
   1c66e:	3320      	adds	r3, #32
   1c670:	4618      	mov	r0, r3
   1c672:	f7f7 ff47 	bl	14504 <BdaIsZeros>
   1c676:	4603      	mov	r3, r0
   1c678:	2b00      	cmp	r3, #0
   1c67a:	d10c      	bne.n	1c696 <smpScCatResponderBdAddr+0x50>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1c67c:	9b00      	ldr	r3, [sp, #0]
   1c67e:	1c5a      	adds	r2, r3, #1
   1c680:	9200      	str	r2, [sp, #0]
   1c682:	2201      	movs	r2, #1
   1c684:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   1c686:	9b03      	ldr	r3, [sp, #12]
   1c688:	3320      	adds	r3, #32
   1c68a:	2206      	movs	r2, #6
   1c68c:	4619      	mov	r1, r3
   1c68e:	9800      	ldr	r0, [sp, #0]
   1c690:	f7f7 ff89 	bl	145a6 <WStrReverseCpy>
   1c694:	e02e      	b.n	1c6f4 <smpScCatResponderBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->peerAddrType;
   1c696:	9b00      	ldr	r3, [sp, #0]
   1c698:	1c5a      	adds	r2, r3, #1
   1c69a:	9200      	str	r2, [sp, #0]
   1c69c:	9a03      	ldr	r2, [sp, #12]
   1c69e:	7cd2      	ldrb	r2, [r2, #19]
   1c6a0:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1c6a2:	9b03      	ldr	r3, [sp, #12]
   1c6a4:	2206      	movs	r2, #6
   1c6a6:	4619      	mov	r1, r3
   1c6a8:	9800      	ldr	r0, [sp, #0]
   1c6aa:	f7f7 ff7c 	bl	145a6 <WStrReverseCpy>
   1c6ae:	e021      	b.n	1c6f4 <smpScCatResponderBdAddr+0xae>
      }
    }
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   1c6b0:	9b03      	ldr	r3, [sp, #12]
   1c6b2:	331a      	adds	r3, #26
   1c6b4:	4618      	mov	r0, r3
   1c6b6:	f7f7 ff25 	bl	14504 <BdaIsZeros>
   1c6ba:	4603      	mov	r3, r0
   1c6bc:	2b00      	cmp	r3, #0
   1c6be:	d10c      	bne.n	1c6da <smpScCatResponderBdAddr+0x94>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1c6c0:	9b00      	ldr	r3, [sp, #0]
   1c6c2:	1c5a      	adds	r2, r3, #1
   1c6c4:	9200      	str	r2, [sp, #0]
   1c6c6:	2201      	movs	r2, #1
   1c6c8:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   1c6ca:	9b03      	ldr	r3, [sp, #12]
   1c6cc:	331a      	adds	r3, #26
   1c6ce:	2206      	movs	r2, #6
   1c6d0:	4619      	mov	r1, r3
   1c6d2:	9800      	ldr	r0, [sp, #0]
   1c6d4:	f7f7 ff67 	bl	145a6 <WStrReverseCpy>
   1c6d8:	e00c      	b.n	1c6f4 <smpScCatResponderBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->localAddrType;
   1c6da:	9b00      	ldr	r3, [sp, #0]
   1c6dc:	1c5a      	adds	r2, r3, #1
   1c6de:	9200      	str	r2, [sp, #0]
   1c6e0:	9a03      	ldr	r2, [sp, #12]
   1c6e2:	7d12      	ldrb	r2, [r2, #20]
   1c6e4:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1c6e6:	9b03      	ldr	r3, [sp, #12]
   1c6e8:	3306      	adds	r3, #6
   1c6ea:	2206      	movs	r2, #6
   1c6ec:	4619      	mov	r1, r3
   1c6ee:	9800      	ldr	r0, [sp, #0]
   1c6f0:	f7f7 ff59 	bl	145a6 <WStrReverseCpy>
      }
    }

    pBuf += BDA_ADDR_LEN;
   1c6f4:	9b00      	ldr	r3, [sp, #0]
   1c6f6:	3306      	adds	r3, #6
   1c6f8:	9300      	str	r3, [sp, #0]
  }

  return pBuf;
   1c6fa:	9b00      	ldr	r3, [sp, #0]
}
   1c6fc:	4618      	mov	r0, r3
   1c6fe:	b005      	add	sp, #20
   1c700:	f85d fb04 	ldr.w	pc, [sp], #4

0001c704 <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   1c704:	b510      	push	{r4, lr}
   1c706:	b086      	sub	sp, #24
   1c708:	9003      	str	r0, [sp, #12]
   1c70a:	9102      	str	r1, [sp, #8]
   1c70c:	9201      	str	r2, [sp, #4]
  bool_t          justWorks = TRUE;
   1c70e:	2301      	movs	r3, #1
   1c710:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   1c714:	9b01      	ldr	r3, [sp, #4]
   1c716:	2200      	movs	r2, #0
   1c718:	701a      	strb	r2, [r3, #0]
  *pOob = SMP_OOB_DATA_NONE;
   1c71a:	9b02      	ldr	r3, [sp, #8]
   1c71c:	2200      	movs	r2, #0
   1c71e:	701a      	strb	r2, [r3, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c720:	9b03      	ldr	r3, [sp, #12]
   1c722:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1c726:	f003 0308 	and.w	r3, r3, #8
   1c72a:	2b00      	cmp	r3, #0
   1c72c:	d017      	beq.n	1c75e <smpScProcPairing+0x5a>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   1c72e:	9b03      	ldr	r3, [sp, #12]
   1c730:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1c734:	f003 0308 	and.w	r3, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c738:	2b00      	cmp	r3, #0
   1c73a:	d010      	beq.n	1c75e <smpScProcPairing+0x5a>
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1c73c:	9b03      	ldr	r3, [sp, #12]
   1c73e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1c742:	2b01      	cmp	r3, #1
   1c744:	d004      	beq.n	1c750 <smpScProcPairing+0x4c>
        (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT))
   1c746:	9b03      	ldr	r3, [sp, #12]
   1c748:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1c74c:	2b01      	cmp	r3, #1
   1c74e:	d117      	bne.n	1c780 <smpScProcPairing+0x7c>
    {
      *pOob = SMP_OOB_DATA_PRESENT;
   1c750:	9b02      	ldr	r3, [sp, #8]
   1c752:	2201      	movs	r2, #1
   1c754:	701a      	strb	r2, [r3, #0]
      justWorks = FALSE;
   1c756:	2300      	movs	r3, #0
   1c758:	f88d 3017 	strb.w	r3, [sp, #23]
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1c75c:	e010      	b.n	1c780 <smpScProcPairing+0x7c>
  }
  /* legacy pairing */
  else
  {
    /* if both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   1c75e:	9b03      	ldr	r3, [sp, #12]
   1c760:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1c764:	2b01      	cmp	r3, #1
   1c766:	d10c      	bne.n	1c782 <smpScProcPairing+0x7e>
        (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT))
   1c768:	9b03      	ldr	r3, [sp, #12]
   1c76a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   1c76e:	2b01      	cmp	r3, #1
   1c770:	d107      	bne.n	1c782 <smpScProcPairing+0x7e>
    {
      *pOob = SMP_OOB_DATA_PRESENT;
   1c772:	9b02      	ldr	r3, [sp, #8]
   1c774:	2201      	movs	r2, #1
   1c776:	701a      	strb	r2, [r3, #0]
      justWorks = FALSE;
   1c778:	2300      	movs	r3, #0
   1c77a:	f88d 3017 	strb.w	r3, [sp, #23]
   1c77e:	e000      	b.n	1c782 <smpScProcPairing+0x7e>
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1c780:	bf00      	nop
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   1c782:	9b02      	ldr	r3, [sp, #8]
   1c784:	781b      	ldrb	r3, [r3, #0]
   1c786:	2b00      	cmp	r3, #0
   1c788:	d168      	bne.n	1c85c <smpScProcPairing+0x158>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1c78a:	9b03      	ldr	r3, [sp, #12]
   1c78c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1c790:	f003 0304 	and.w	r3, r3, #4
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   1c794:	2b00      	cmp	r3, #0
   1c796:	d106      	bne.n	1c7a6 <smpScProcPairing+0xa2>
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
   1c798:	9b03      	ldr	r3, [sp, #12]
   1c79a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1c79e:	f003 0304 	and.w	r3, r3, #4
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1c7a2:	2b00      	cmp	r3, #0
   1c7a4:	d05a      	beq.n	1c85c <smpScProcPairing+0x158>
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1c7a6:	9b03      	ldr	r3, [sp, #12]
   1c7a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1c7ac:	2b03      	cmp	r3, #3
   1c7ae:	d055      	beq.n	1c85c <smpScProcPairing+0x158>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1c7b0:	9b03      	ldr	r3, [sp, #12]
   1c7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1c7b6:	2b03      	cmp	r3, #3
   1c7b8:	d050      	beq.n	1c85c <smpScProcPairing+0x158>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1c7ba:	9b03      	ldr	r3, [sp, #12]
   1c7bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1c7c0:	2b00      	cmp	r3, #0
   1c7c2:	d004      	beq.n	1c7ce <smpScProcPairing+0xca>
           (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO)) &&
   1c7c4:	9b03      	ldr	r3, [sp, #12]
   1c7c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1c7ca:	2b01      	cmp	r3, #1
   1c7cc:	d109      	bne.n	1c7e2 <smpScProcPairing+0xde>
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   1c7ce:	9b03      	ldr	r3, [sp, #12]
   1c7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1c7d4:	2b00      	cmp	r3, #0
   1c7d6:	d041      	beq.n	1c85c <smpScProcPairing+0x158>
           (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO))))
   1c7d8:	9b03      	ldr	r3, [sp, #12]
   1c7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   1c7de:	2b01      	cmp	r3, #1
   1c7e0:	d03c      	beq.n	1c85c <smpScProcPairing+0x158>
    {
      /* use pin */
      justWorks = FALSE;
   1c7e2:	2300      	movs	r3, #0
   1c7e4:	f88d 3017 	strb.w	r3, [sp, #23]

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   1c7e8:	9b03      	ldr	r3, [sp, #12]
   1c7ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1c7ee:	2b00      	cmp	r3, #0
   1c7f0:	d013      	beq.n	1c81a <smpScProcPairing+0x116>
   1c7f2:	9b03      	ldr	r3, [sp, #12]
   1c7f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   1c7f8:	2b01      	cmp	r3, #1
   1c7fa:	d00e      	beq.n	1c81a <smpScProcPairing+0x116>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1c7fc:	9b03      	ldr	r3, [sp, #12]
   1c7fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1c802:	2b04      	cmp	r3, #4
   1c804:	d10b      	bne.n	1c81e <smpScProcPairing+0x11a>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1c806:	9b03      	ldr	r3, [sp, #12]
   1c808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1c80c:	2b02      	cmp	r3, #2
   1c80e:	d004      	beq.n	1c81a <smpScProcPairing+0x116>
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));
   1c810:	9b03      	ldr	r3, [sp, #12]
   1c812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1c816:	2b04      	cmp	r3, #4
   1c818:	d101      	bne.n	1c81e <smpScProcPairing+0x11a>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1c81a:	2301      	movs	r3, #1
   1c81c:	e000      	b.n	1c820 <smpScProcPairing+0x11c>
   1c81e:	2300      	movs	r3, #0
      *pDisplay =
   1c820:	b2da      	uxtb	r2, r3
   1c822:	9b01      	ldr	r3, [sp, #4]
   1c824:	701a      	strb	r2, [r3, #0]

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1c826:	9b03      	ldr	r3, [sp, #12]
   1c828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1c82c:	2b02      	cmp	r3, #2
   1c82e:	d104      	bne.n	1c83a <smpScProcPairing+0x136>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
   1c830:	9b03      	ldr	r3, [sp, #12]
   1c832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1c836:	2b02      	cmp	r3, #2
   1c838:	d010      	beq.n	1c85c <smpScProcPairing+0x158>
      {
        *pDisplay ^= !pCcb->initiator;
   1c83a:	9b01      	ldr	r3, [sp, #4]
   1c83c:	781b      	ldrb	r3, [r3, #0]
   1c83e:	b25a      	sxtb	r2, r3
   1c840:	9b03      	ldr	r3, [sp, #12]
   1c842:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1c846:	2b00      	cmp	r3, #0
   1c848:	bf0c      	ite	eq
   1c84a:	2301      	moveq	r3, #1
   1c84c:	2300      	movne	r3, #0
   1c84e:	b2db      	uxtb	r3, r3
   1c850:	b25b      	sxtb	r3, r3
   1c852:	4053      	eors	r3, r2
   1c854:	b25b      	sxtb	r3, r3
   1c856:	b2da      	uxtb	r2, r3
   1c858:	9b01      	ldr	r3, [sp, #4]
   1c85a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c85c:	9b03      	ldr	r3, [sp, #12]
   1c85e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1c862:	f003 0308 	and.w	r3, r3, #8
   1c866:	2b00      	cmp	r3, #0
   1c868:	f000 80c2 	beq.w	1c9f0 <smpScProcPairing+0x2ec>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   1c86c:	9b03      	ldr	r3, [sp, #12]
   1c86e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1c872:	f003 0308 	and.w	r3, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c876:	2b00      	cmp	r3, #0
   1c878:	f000 80ba 	beq.w	1c9f0 <smpScProcPairing+0x2ec>
  {
    if (smpCb.lescSupported == FALSE)
   1c87c:	4bae      	ldr	r3, [pc, #696]	; (1cb38 <smpScProcPairing+0x434>)
   1c87e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   1c882:	2b00      	cmp	r3, #0
   1c884:	d112      	bne.n	1c8ac <smpScProcPairing+0x1a8>
    {
      /* cancel pairing if LESC is not initialized by application */
      hdr.param = pCcb->connId;
   1c886:	9b03      	ldr	r3, [sp, #12]
   1c888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c88c:	b29b      	uxth	r3, r3
   1c88e:	f8ad 3010 	strh.w	r3, [sp, #16]
      hdr.status = SMP_ERR_AUTH_REQ;
   1c892:	2303      	movs	r3, #3
   1c894:	f88d 3013 	strb.w	r3, [sp, #19]
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c898:	2303      	movs	r3, #3
   1c89a:	f88d 3012 	strb.w	r3, [sp, #18]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c89e:	ab04      	add	r3, sp, #16
   1c8a0:	4619      	mov	r1, r3
   1c8a2:	9803      	ldr	r0, [sp, #12]
   1c8a4:	f7fe fe7e 	bl	1b5a4 <smpSmExecute>
      return FALSE;
   1c8a8:	2300      	movs	r3, #0
   1c8aa:	e142      	b.n	1cb32 <smpScProcPairing+0x42e>
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
   1c8ac:	9b03      	ldr	r3, [sp, #12]
   1c8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c8b0:	2201      	movs	r2, #1
   1c8b2:	701a      	strb	r2, [r3, #0]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
   1c8b4:	9b03      	ldr	r3, [sp, #12]
   1c8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c8b8:	2201      	movs	r2, #1
   1c8ba:	705a      	strb	r2, [r3, #1]
      pCcb->pScCcb->display = *pDisplay;
   1c8bc:	9b03      	ldr	r3, [sp, #12]
   1c8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c8c0:	9a01      	ldr	r2, [sp, #4]
   1c8c2:	7812      	ldrb	r2, [r2, #0]
   1c8c4:	711a      	strb	r2, [r3, #4]

      if (*pOob)
   1c8c6:	9b02      	ldr	r3, [sp, #8]
   1c8c8:	781b      	ldrb	r3, [r3, #0]
   1c8ca:	2b00      	cmp	r3, #0
   1c8cc:	d004      	beq.n	1c8d8 <smpScProcPairing+0x1d4>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
   1c8ce:	9b03      	ldr	r3, [sp, #12]
   1c8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c8d2:	2202      	movs	r2, #2
   1c8d4:	705a      	strb	r2, [r3, #1]
   1c8d6:	e049      	b.n	1c96c <smpScProcPairing+0x268>
      }
      else if (justWorks == FALSE)
   1c8d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1c8dc:	2b00      	cmp	r3, #0
   1c8de:	d134      	bne.n	1c94a <smpScProcPairing+0x246>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
   1c8e0:	9b03      	ldr	r3, [sp, #12]
   1c8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c8e4:	2203      	movs	r2, #3
   1c8e6:	705a      	strb	r2, [r3, #1]

        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1c8e8:	9b03      	ldr	r3, [sp, #12]
   1c8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1c8ee:	2b04      	cmp	r3, #4
   1c8f0:	d109      	bne.n	1c906 <smpScProcPairing+0x202>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1c8f2:	9b03      	ldr	r3, [sp, #12]
   1c8f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1c8f8:	2b01      	cmp	r3, #1
   1c8fa:	d00e      	beq.n	1c91a <smpScProcPairing+0x216>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   1c8fc:	9b03      	ldr	r3, [sp, #12]
   1c8fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1c902:	2b04      	cmp	r3, #4
   1c904:	d009      	beq.n	1c91a <smpScProcPairing+0x216>

            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c906:	9b03      	ldr	r3, [sp, #12]
   1c908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   1c90c:	2b01      	cmp	r3, #1
   1c90e:	d109      	bne.n	1c924 <smpScProcPairing+0x220>
             (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP)))
   1c910:	9b03      	ldr	r3, [sp, #12]
   1c912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c916:	2b04      	cmp	r3, #4
   1c918:	d104      	bne.n	1c924 <smpScProcPairing+0x220>
        {
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1c91a:	9b03      	ldr	r3, [sp, #12]
   1c91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c91e:	2204      	movs	r2, #4
   1c920:	705a      	strb	r2, [r3, #1]
   1c922:	e023      	b.n	1c96c <smpScProcPairing+0x268>
        }
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   1c924:	9b03      	ldr	r3, [sp, #12]
   1c926:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1c92a:	f003 0310 	and.w	r3, r3, #16
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d01c      	beq.n	1c96c <smpScProcPairing+0x268>
                 (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG))
   1c932:	9b03      	ldr	r3, [sp, #12]
   1c934:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1c938:	f003 0310 	and.w	r3, r3, #16
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   1c93c:	2b00      	cmp	r3, #0
   1c93e:	d015      	beq.n	1c96c <smpScProcPairing+0x268>
        {
          pCcb->pScCcb->kpNotify = TRUE;
   1c940:	9b03      	ldr	r3, [sp, #12]
   1c942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c944:	2201      	movs	r2, #1
   1c946:	709a      	strb	r2, [r3, #2]
   1c948:	e010      	b.n	1c96c <smpScProcPairing+0x268>
        }
      }
      else
      {
        /* Check for numeric comparison */
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c94a:	9b03      	ldr	r3, [sp, #12]
   1c94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1c950:	2b01      	cmp	r3, #1
   1c952:	d10b      	bne.n	1c96c <smpScProcPairing+0x268>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
   1c954:	9b03      	ldr	r3, [sp, #12]
   1c956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c95a:	2b01      	cmp	r3, #1
   1c95c:	d106      	bne.n	1c96c <smpScProcPairing+0x268>
        {
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1c95e:	9b03      	ldr	r3, [sp, #12]
   1c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c962:	2204      	movs	r2, #4
   1c964:	705a      	strb	r2, [r3, #1]

          /* set false to add in MITM below */
          justWorks = FALSE;
   1c966:	2300      	movs	r3, #0
   1c968:	f88d 3017 	strb.w	r3, [sp, #23]
        }
      }
    }

    hdr.param = pCcb->connId;
   1c96c:	9b03      	ldr	r3, [sp, #12]
   1c96e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1c972:	b29b      	uxth	r3, r3
   1c974:	f8ad 3010 	strh.w	r3, [sp, #16]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
   1c978:	9803      	ldr	r0, [sp, #12]
   1c97a:	f000 fd81 	bl	1d480 <SmpScAllocScratchBuffers>
   1c97e:	4603      	mov	r3, r0
   1c980:	2b00      	cmp	r3, #0
   1c982:	d029      	beq.n	1c9d8 <smpScProcPairing+0x2d4>
    {
      /* Store the current ECC key */
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
   1c984:	9b03      	ldr	r3, [sp, #12]
   1c986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c988:	68db      	ldr	r3, [r3, #12]
   1c98a:	461c      	mov	r4, r3
   1c98c:	f7fa fc66 	bl	1725c <DmSecGetEccKey>
   1c990:	4603      	mov	r3, r0
   1c992:	2220      	movs	r2, #32
   1c994:	4619      	mov	r1, r3
   1c996:	4620      	mov	r0, r4
   1c998:	f7ef fbb2 	bl	c100 <memcpy>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
   1c99c:	9b03      	ldr	r3, [sp, #12]
   1c99e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c9a0:	68db      	ldr	r3, [r3, #12]
   1c9a2:	f103 0420 	add.w	r4, r3, #32
   1c9a6:	f7fa fc59 	bl	1725c <DmSecGetEccKey>
   1c9aa:	4603      	mov	r3, r0
   1c9ac:	3320      	adds	r3, #32
   1c9ae:	2220      	movs	r2, #32
   1c9b0:	4619      	mov	r1, r3
   1c9b2:	4620      	mov	r0, r4
   1c9b4:	f7ef fba4 	bl	c100 <memcpy>
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   1c9b8:	9b03      	ldr	r3, [sp, #12]
   1c9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c9bc:	691c      	ldr	r4, [r3, #16]
   1c9be:	f7fa fc4d 	bl	1725c <DmSecGetEccKey>
   1c9c2:	4603      	mov	r3, r0
   1c9c4:	3340      	adds	r3, #64	; 0x40
   1c9c6:	2220      	movs	r2, #32
   1c9c8:	4619      	mov	r1, r3
   1c9ca:	4620      	mov	r0, r4
   1c9cc:	f7ef fb98 	bl	c100 <memcpy>

      /* Send internal message indicating LESC was requested */
      hdr.event = SMP_MSG_INT_LESC;
   1c9d0:	2311      	movs	r3, #17
   1c9d2:	f88d 3012 	strb.w	r3, [sp, #18]
   1c9d6:	e005      	b.n	1c9e4 <smpScProcPairing+0x2e0>
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
   1c9d8:	2308      	movs	r3, #8
   1c9da:	f88d 3013 	strb.w	r3, [sp, #19]
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c9de:	2303      	movs	r3, #3
   1c9e0:	f88d 3012 	strb.w	r3, [sp, #18]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c9e4:	ab04      	add	r3, sp, #16
   1c9e6:	4619      	mov	r1, r3
   1c9e8:	9803      	ldr	r0, [sp, #12]
   1c9ea:	f7fe fddb 	bl	1b5a4 <smpSmExecute>
   1c9ee:	e02b      	b.n	1ca48 <smpScProcPairing+0x344>
  }
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
   1c9f0:	4b52      	ldr	r3, [pc, #328]	; (1cb3c <smpScProcPairing+0x438>)
   1c9f2:	681b      	ldr	r3, [r3, #0]
   1c9f4:	7a1b      	ldrb	r3, [r3, #8]
   1c9f6:	f003 0308 	and.w	r3, r3, #8
   1c9fa:	2b00      	cmp	r3, #0
   1c9fc:	d012      	beq.n	1ca24 <smpScProcPairing+0x320>
  {
    /* cancel pairing if configuration requires LESC and we are falling back to legacy */
    hdr.param = pCcb->connId;
   1c9fe:	9b03      	ldr	r3, [sp, #12]
   1ca00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1ca04:	b29b      	uxth	r3, r3
   1ca06:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
   1ca0a:	2303      	movs	r3, #3
   1ca0c:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ca10:	2303      	movs	r3, #3
   1ca12:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ca16:	ab04      	add	r3, sp, #16
   1ca18:	4619      	mov	r1, r3
   1ca1a:	9803      	ldr	r0, [sp, #12]
   1ca1c:	f7fe fdc2 	bl	1b5a4 <smpSmExecute>
    return FALSE;
   1ca20:	2300      	movs	r3, #0
   1ca22:	e086      	b.n	1cb32 <smpScProcPairing+0x42e>
  }
  else
  {
    /* in case we're falling back to legacy after being paired with SC */
    pCcb->pScCcb->lescEnabled = FALSE;
   1ca24:	9b03      	ldr	r3, [sp, #12]
   1ca26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ca28:	2200      	movs	r2, #0
   1ca2a:	701a      	strb	r2, [r3, #0]

    /* Send internal message indicating legacy security was requested */
    hdr.param = pCcb->connId;
   1ca2c:	9b03      	ldr	r3, [sp, #12]
   1ca2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1ca32:	b29b      	uxth	r3, r3
   1ca34:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.event = SMP_MSG_INT_LEGACY;
   1ca38:	2312      	movs	r3, #18
   1ca3a:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ca3e:	ab04      	add	r3, sp, #16
   1ca40:	4619      	mov	r1, r3
   1ca42:	9803      	ldr	r0, [sp, #12]
   1ca44:	f7fe fdae 	bl	1b5a4 <smpSmExecute>
  }

  if (!justWorks)
   1ca48:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1ca4c:	2b00      	cmp	r3, #0
   1ca4e:	d10e      	bne.n	1ca6e <smpScProcPairing+0x36a>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1ca50:	9b03      	ldr	r3, [sp, #12]
   1ca52:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1ca56:	9b03      	ldr	r3, [sp, #12]
   1ca58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1ca5c:	4013      	ands	r3, r2
   1ca5e:	b2db      	uxtb	r3, r3
   1ca60:	f043 0304 	orr.w	r3, r3, #4
   1ca64:	b2da      	uxtb	r2, r3
   1ca66:	9b03      	ldr	r3, [sp, #12]
   1ca68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1ca6c:	e00d      	b.n	1ca8a <smpScProcPairing+0x386>
  }
  else
  {
    /* set auth flags with mitm bit cleared */
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1ca6e:	9b03      	ldr	r3, [sp, #12]
   1ca70:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1ca74:	9b03      	ldr	r3, [sp, #12]
   1ca76:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1ca7a:	4013      	ands	r3, r2
   1ca7c:	b2db      	uxtb	r3, r3
   1ca7e:	f023 0304 	bic.w	r3, r3, #4
   1ca82:	b2da      	uxtb	r2, r3
   1ca84:	9b03      	ldr	r3, [sp, #12]
   1ca86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   1ca8a:	9b03      	ldr	r3, [sp, #12]
   1ca8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1ca90:	2b00      	cmp	r3, #0
   1ca92:	d003      	beq.n	1ca9c <smpScProcPairing+0x398>
   1ca94:	9b03      	ldr	r3, [sp, #12]
   1ca96:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1ca9a:	e002      	b.n	1caa2 <smpScProcPairing+0x39e>
   1ca9c:	9b03      	ldr	r3, [sp, #12]
   1ca9e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1caa2:	f88d 3016 	strb.w	r3, [sp, #22]
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1caa6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1caaa:	2b00      	cmp	r3, #0
   1caac:	d01d      	beq.n	1caea <smpScProcPairing+0x3e6>
   1caae:	4b23      	ldr	r3, [pc, #140]	; (1cb3c <smpScProcPairing+0x438>)
   1cab0:	681b      	ldr	r3, [r3, #0]
   1cab2:	7a1a      	ldrb	r2, [r3, #8]
   1cab4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1cab8:	4013      	ands	r3, r2
   1caba:	b2db      	uxtb	r3, r3
   1cabc:	f003 0304 	and.w	r3, r3, #4
   1cac0:	2b00      	cmp	r3, #0
   1cac2:	d012      	beq.n	1caea <smpScProcPairing+0x3e6>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   1cac4:	9b03      	ldr	r3, [sp, #12]
   1cac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1caca:	b29b      	uxth	r3, r3
   1cacc:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
   1cad0:	2303      	movs	r3, #3
   1cad2:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1cad6:	2303      	movs	r3, #3
   1cad8:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1cadc:	ab04      	add	r3, sp, #16
   1cade:	4619      	mov	r1, r3
   1cae0:	9803      	ldr	r0, [sp, #12]
   1cae2:	f7fe fd5f 	bl	1b5a4 <smpSmExecute>
    return FALSE;
   1cae6:	2300      	movs	r3, #0
   1cae8:	e023      	b.n	1cb32 <smpScProcPairing+0x42e>
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1caea:	9b03      	ldr	r3, [sp, #12]
   1caec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1caf0:	4b12      	ldr	r3, [pc, #72]	; (1cb3c <smpScProcPairing+0x438>)
   1caf2:	681b      	ldr	r3, [r3, #0]
   1caf4:	795b      	ldrb	r3, [r3, #5]
   1caf6:	429a      	cmp	r2, r3
   1caf8:	d307      	bcc.n	1cb0a <smpScProcPairing+0x406>
      pCcb->pairRsp[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen)
   1cafa:	9b03      	ldr	r3, [sp, #12]
   1cafc:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1cb00:	4b0e      	ldr	r3, [pc, #56]	; (1cb3c <smpScProcPairing+0x438>)
   1cb02:	681b      	ldr	r3, [r3, #0]
   1cb04:	795b      	ldrb	r3, [r3, #5]
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1cb06:	429a      	cmp	r2, r3
   1cb08:	d212      	bcs.n	1cb30 <smpScProcPairing+0x42c>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   1cb0a:	9b03      	ldr	r3, [sp, #12]
   1cb0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cb10:	b29b      	uxth	r3, r3
   1cb12:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_ENC_KEY_SIZE;
   1cb16:	2306      	movs	r3, #6
   1cb18:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1cb1c:	2303      	movs	r3, #3
   1cb1e:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1cb22:	ab04      	add	r3, sp, #16
   1cb24:	4619      	mov	r1, r3
   1cb26:	9803      	ldr	r0, [sp, #12]
   1cb28:	f7fe fd3c 	bl	1b5a4 <smpSmExecute>
    return FALSE;
   1cb2c:	2300      	movs	r3, #0
   1cb2e:	e000      	b.n	1cb32 <smpScProcPairing+0x42e>
  }

  return TRUE;
   1cb30:	2301      	movs	r3, #1
}
   1cb32:	4618      	mov	r0, r3
   1cb34:	b006      	add	sp, #24
   1cb36:	bd10      	pop	{r4, pc}
   1cb38:	100095f8 	.word	0x100095f8
   1cb3c:	10002bd0 	.word	0x10002bd0

0001cb40 <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   1cb40:	b500      	push	{lr}
   1cb42:	b089      	sub	sp, #36	; 0x24
   1cb44:	9001      	str	r0, [sp, #4]
   1cb46:	460b      	mov	r3, r1
   1cb48:	f88d 3003 	strb.w	r3, [sp, #3]
   1cb4c:	4613      	mov	r3, r2
   1cb4e:	f88d 3002 	strb.w	r3, [sp, #2]
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1cb52:	9b01      	ldr	r3, [sp, #4]
   1cb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cb56:	781b      	ldrb	r3, [r3, #0]
   1cb58:	2b00      	cmp	r3, #0
   1cb5a:	d106      	bne.n	1cb6a <smpScAuthReq+0x2a>
   1cb5c:	9b01      	ldr	r3, [sp, #4]
   1cb5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1cb62:	f003 0304 	and.w	r3, r3, #4
   1cb66:	2b00      	cmp	r3, #0
   1cb68:	d109      	bne.n	1cb7e <smpScAuthReq+0x3e>
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   1cb6a:	9b01      	ldr	r3, [sp, #4]
   1cb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cb6e:	781b      	ldrb	r3, [r3, #0]
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1cb70:	2b00      	cmp	r3, #0
   1cb72:	d01a      	beq.n	1cbaa <smpScAuthReq+0x6a>
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   1cb74:	9b01      	ldr	r3, [sp, #4]
   1cb76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cb78:	785b      	ldrb	r3, [r3, #1]
   1cb7a:	2b02      	cmp	r3, #2
   1cb7c:	d115      	bne.n	1cbaa <smpScAuthReq+0x6a>
  {
    /* request pin or oob from user */
    buf.authReq.hdr.param = pCcb->connId;
   1cb7e:	9b01      	ldr	r3, [sp, #4]
   1cb80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cb84:	b29b      	uxth	r3, r3
   1cb86:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1cb8a:	232e      	movs	r3, #46	; 0x2e
   1cb8c:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authReq.oob = oob;
   1cb90:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1cb94:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authReq.display = display;
   1cb98:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1cb9c:	f88d 300d 	strb.w	r3, [sp, #13]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1cba0:	ab02      	add	r3, sp, #8
   1cba2:	4618      	mov	r0, r3
   1cba4:	f7fa fa50 	bl	17048 <DmSmpCbackExec>
   1cba8:	e01a      	b.n	1cbe0 <smpScAuthReq+0xa0>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
   1cbaa:	9b01      	ldr	r3, [sp, #4]
   1cbac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cbb0:	b29b      	uxth	r3, r3
   1cbb2:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1cbb6:	2304      	movs	r3, #4
   1cbb8:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authRsp.authData[0] = 0;
   1cbbc:	2300      	movs	r3, #0
   1cbbe:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authRsp.authData[1] = 0;
   1cbc2:	2300      	movs	r3, #0
   1cbc4:	f88d 300d 	strb.w	r3, [sp, #13]
    buf.authRsp.authData[2] = 0;
   1cbc8:	2300      	movs	r3, #0
   1cbca:	f88d 300e 	strb.w	r3, [sp, #14]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1cbce:	2303      	movs	r3, #3
   1cbd0:	f88d 301c 	strb.w	r3, [sp, #28]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1cbd4:	ab02      	add	r3, sp, #8
   1cbd6:	4619      	mov	r1, r3
   1cbd8:	9801      	ldr	r0, [sp, #4]
   1cbda:	f7fe fce3 	bl	1b5a4 <smpSmExecute>
  }
}
   1cbde:	bf00      	nop
   1cbe0:	bf00      	nop
   1cbe2:	b009      	add	sp, #36	; 0x24
   1cbe4:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbe8 <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cbe8:	b500      	push	{lr}
   1cbea:	b083      	sub	sp, #12
   1cbec:	9001      	str	r0, [sp, #4]
   1cbee:	9100      	str	r1, [sp, #0]
  smpActCleanup(pCcb, pMsg);
   1cbf0:	9900      	ldr	r1, [sp, #0]
   1cbf2:	9801      	ldr	r0, [sp, #4]
   1cbf4:	f7fd ffdb 	bl	1abae <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
   1cbf8:	9801      	ldr	r0, [sp, #4]
   1cbfa:	f000 fc9f 	bl	1d53c <SmpScFreeScratchBuffers>
}
   1cbfe:	bf00      	nop
   1cc00:	b003      	add	sp, #12
   1cc02:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc06 <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cc06:	b500      	push	{lr}
   1cc08:	b083      	sub	sp, #12
   1cc0a:	9001      	str	r0, [sp, #4]
   1cc0c:	9100      	str	r1, [sp, #0]
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);
   1cc0e:	9900      	ldr	r1, [sp, #0]
   1cc10:	9801      	ldr	r0, [sp, #4]
   1cc12:	f7ff ffe9 	bl	1cbe8 <smpScActCleanup>

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
   1cc16:	9900      	ldr	r1, [sp, #0]
   1cc18:	9801      	ldr	r0, [sp, #4]
   1cc1a:	f7fd fff6 	bl	1ac0a <smpActPairingFailed>
}
   1cc1e:	bf00      	nop
   1cc20:	b003      	add	sp, #12
   1cc22:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc26 <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cc26:	b500      	push	{lr}
   1cc28:	b083      	sub	sp, #12
   1cc2a:	9001      	str	r0, [sp, #4]
   1cc2c:	9100      	str	r1, [sp, #0]
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1cc2e:	9b00      	ldr	r3, [sp, #0]
   1cc30:	78db      	ldrb	r3, [r3, #3]
   1cc32:	4619      	mov	r1, r3
   1cc34:	9801      	ldr	r0, [sp, #4]
   1cc36:	f7fd ffc5 	bl	1abc4 <smpSendPairingFailed>

  smpScActPairingFailed(pCcb, pMsg);
   1cc3a:	9900      	ldr	r1, [sp, #0]
   1cc3c:	9801      	ldr	r0, [sp, #4]
   1cc3e:	f7ff ffe2 	bl	1cc06 <smpScActPairingFailed>
}
   1cc42:	bf00      	nop
   1cc44:	b003      	add	sp, #12
   1cc46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001cc4c <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cc4c:	b500      	push	{lr}
   1cc4e:	b085      	sub	sp, #20
   1cc50:	9001      	str	r0, [sp, #4]
   1cc52:	9100      	str	r1, [sp, #0]
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1cc54:	9b00      	ldr	r3, [sp, #0]
   1cc56:	685b      	ldr	r3, [r3, #4]
   1cc58:	3308      	adds	r3, #8
   1cc5a:	9303      	str	r3, [sp, #12]

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   1cc5c:	9b01      	ldr	r3, [sp, #4]
   1cc5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cc60:	689b      	ldr	r3, [r3, #8]
   1cc62:	4618      	mov	r0, r3
   1cc64:	9b03      	ldr	r3, [sp, #12]
   1cc66:	3301      	adds	r3, #1
   1cc68:	2220      	movs	r2, #32
   1cc6a:	4619      	mov	r1, r3
   1cc6c:	f7f7 fc9b 	bl	145a6 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
   1cc70:	9b01      	ldr	r3, [sp, #4]
   1cc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cc74:	689b      	ldr	r3, [r3, #8]
   1cc76:	f103 0020 	add.w	r0, r3, #32
   1cc7a:	9b03      	ldr	r3, [sp, #12]
   1cc7c:	3321      	adds	r3, #33	; 0x21
   1cc7e:	2220      	movs	r2, #32
   1cc80:	4619      	mov	r1, r3
   1cc82:	f7f7 fc90 	bl	145a6 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
   1cc86:	9b01      	ldr	r3, [sp, #4]
   1cc88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cc8c:	b29b      	uxth	r3, r3
   1cc8e:	f8ad 3008 	strh.w	r3, [sp, #8]

  switch(pCcb->pScCcb->authType)
   1cc92:	9b01      	ldr	r3, [sp, #4]
   1cc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cc96:	785b      	ldrb	r3, [r3, #1]
   1cc98:	3b01      	subs	r3, #1
   1cc9a:	2b03      	cmp	r3, #3
   1cc9c:	d816      	bhi.n	1cccc <smpScActAuthSelect+0x80>
   1cc9e:	a201      	add	r2, pc, #4	; (adr r2, 1cca4 <smpScActAuthSelect+0x58>)
   1cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cca4:	0001ccb5 	.word	0x0001ccb5
   1cca8:	0001ccbd 	.word	0x0001ccbd
   1ccac:	0001ccc5 	.word	0x0001ccc5
   1ccb0:	0001ccb5 	.word	0x0001ccb5
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
   1ccb4:	2313      	movs	r3, #19
   1ccb6:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   1ccba:	e00e      	b.n	1ccda <smpScActAuthSelect+0x8e>
  case SMP_AUTH_TYPE_OOB:
    hdr.event = SMP_MSG_INT_OOB;
   1ccbc:	2315      	movs	r3, #21
   1ccbe:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   1ccc2:	e00a      	b.n	1ccda <smpScActAuthSelect+0x8e>
  case SMP_AUTH_TYPE_PASSKEY:
    hdr.event = SMP_MSG_INT_PASSKEY;
   1ccc4:	2314      	movs	r3, #20
   1ccc6:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   1ccca:	e006      	b.n	1ccda <smpScActAuthSelect+0x8e>
  default:
    hdr.status = SMP_ERR_UNSPECIFIED;
   1cccc:	2308      	movs	r3, #8
   1ccce:	f88d 300b 	strb.w	r3, [sp, #11]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ccd2:	2303      	movs	r3, #3
   1ccd4:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   1ccd8:	bf00      	nop
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ccda:	ab02      	add	r3, sp, #8
   1ccdc:	4619      	mov	r1, r3
   1ccde:	9801      	ldr	r0, [sp, #4]
   1cce0:	f7fe fc60 	bl	1b5a4 <smpSmExecute>
}
   1cce4:	bf00      	nop
   1cce6:	b005      	add	sp, #20
   1cce8:	f85d fb04 	ldr.w	pc, [sp], #4

0001ccec <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ccec:	b500      	push	{lr}
   1ccee:	b089      	sub	sp, #36	; 0x24
   1ccf0:	9001      	str	r0, [sp, #4]
   1ccf2:	9100      	str	r1, [sp, #0]
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
   1ccf4:	9b01      	ldr	r3, [sp, #4]
   1ccf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ccf8:	2200      	movs	r2, #0
   1ccfa:	70da      	strb	r2, [r3, #3]

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1ccfc:	9b01      	ldr	r3, [sp, #4]
   1ccfe:	2203      	movs	r2, #3
   1cd00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
   1cd04:	9b01      	ldr	r3, [sp, #4]
   1cd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cd0a:	b29b      	uxth	r3, r3
   1cd0c:	f8ad 3008 	strh.w	r3, [sp, #8]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1cd10:	232e      	movs	r3, #46	; 0x2e
   1cd12:	f88d 300a 	strb.w	r3, [sp, #10]
  buf.authReq.oob = FALSE;
   1cd16:	2300      	movs	r3, #0
   1cd18:	f88d 300c 	strb.w	r3, [sp, #12]
  buf.authReq.display = pCcb->pScCcb->display;
   1cd1c:	9b01      	ldr	r3, [sp, #4]
   1cd1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd20:	791b      	ldrb	r3, [r3, #4]
   1cd22:	f88d 300d 	strb.w	r3, [sp, #13]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   1cd26:	ab02      	add	r3, sp, #8
   1cd28:	4618      	mov	r0, r3
   1cd2a:	f7fa f98d 	bl	17048 <DmSmpCbackExec>
}
   1cd2e:	bf00      	nop
   1cd30:	b009      	add	sp, #36	; 0x24
   1cd32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001cd38 <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cd38:	b500      	push	{lr}
   1cd3a:	b085      	sub	sp, #20
   1cd3c:	9003      	str	r0, [sp, #12]
   1cd3e:	9102      	str	r1, [sp, #8]
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
   1cd40:	9b03      	ldr	r3, [sp, #12]
   1cd42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1cd46:	2b00      	cmp	r3, #0
   1cd48:	d02d      	beq.n	1cda6 <smpScActJwncCalcF4+0x6e>
  {
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1cd4a:	9b03      	ldr	r3, [sp, #12]
   1cd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd4e:	689b      	ldr	r3, [r3, #8]
   1cd50:	2220      	movs	r2, #32
   1cd52:	4619      	mov	r1, r3
   1cd54:	482c      	ldr	r0, [pc, #176]	; (1ce08 <smpScActJwncCalcF4+0xd0>)
   1cd56:	f000 fe87 	bl	1da68 <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   1cd5a:	9b03      	ldr	r3, [sp, #12]
   1cd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd5e:	68db      	ldr	r3, [r3, #12]
   1cd60:	2220      	movs	r2, #32
   1cd62:	4619      	mov	r1, r3
   1cd64:	4829      	ldr	r0, [pc, #164]	; (1ce0c <smpScActJwncCalcF4+0xd4>)
   1cd66:	f000 fe7f 	bl	1da68 <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1cd6a:	9b03      	ldr	r3, [sp, #12]
   1cd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd6e:	695b      	ldr	r3, [r3, #20]
   1cd70:	3310      	adds	r3, #16
   1cd72:	2210      	movs	r2, #16
   1cd74:	4619      	mov	r1, r3
   1cd76:	4826      	ldr	r0, [pc, #152]	; (1ce10 <smpScActJwncCalcF4+0xd8>)
   1cd78:	f000 fe76 	bl	1da68 <smpLogByteArray>

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1cd7c:	9b03      	ldr	r3, [sp, #12]
   1cd7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd80:	689b      	ldr	r3, [r3, #8]
   1cd82:	461a      	mov	r2, r3
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1cd84:	9b03      	ldr	r3, [sp, #12]
   1cd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd88:	68db      	ldr	r3, [r3, #12]
   1cd8a:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1cd8c:	9b03      	ldr	r3, [sp, #12]
   1cd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd90:	695b      	ldr	r3, [r3, #20]
   1cd92:	3310      	adds	r3, #16
    SmpScCalcF4(pCcb, pMsg,
   1cd94:	9301      	str	r3, [sp, #4]
   1cd96:	2300      	movs	r3, #0
   1cd98:	9300      	str	r3, [sp, #0]
   1cd9a:	460b      	mov	r3, r1
   1cd9c:	9902      	ldr	r1, [sp, #8]
   1cd9e:	9803      	ldr	r0, [sp, #12]
   1cda0:	f000 fc6e 	bl	1d680 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   1cda4:	e02c      	b.n	1ce00 <smpScActJwncCalcF4+0xc8>
    SMP_TRACE_256("F4 PKb",  pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   1cda6:	9b03      	ldr	r3, [sp, #12]
   1cda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cdaa:	68db      	ldr	r3, [r3, #12]
   1cdac:	2220      	movs	r2, #32
   1cdae:	4619      	mov	r1, r3
   1cdb0:	4815      	ldr	r0, [pc, #84]	; (1ce08 <smpScActJwncCalcF4+0xd0>)
   1cdb2:	f000 fe59 	bl	1da68 <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1cdb6:	9b03      	ldr	r3, [sp, #12]
   1cdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cdba:	689b      	ldr	r3, [r3, #8]
   1cdbc:	2220      	movs	r2, #32
   1cdbe:	4619      	mov	r1, r3
   1cdc0:	4812      	ldr	r0, [pc, #72]	; (1ce0c <smpScActJwncCalcF4+0xd4>)
   1cdc2:	f000 fe51 	bl	1da68 <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1cdc6:	9b03      	ldr	r3, [sp, #12]
   1cdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cdca:	695b      	ldr	r3, [r3, #20]
   1cdcc:	3310      	adds	r3, #16
   1cdce:	2210      	movs	r2, #16
   1cdd0:	4619      	mov	r1, r3
   1cdd2:	480f      	ldr	r0, [pc, #60]	; (1ce10 <smpScActJwncCalcF4+0xd8>)
   1cdd4:	f000 fe48 	bl	1da68 <smpLogByteArray>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1cdd8:	9b03      	ldr	r3, [sp, #12]
   1cdda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cddc:	68db      	ldr	r3, [r3, #12]
   1cdde:	461a      	mov	r2, r3
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1cde0:	9b03      	ldr	r3, [sp, #12]
   1cde2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cde4:	689b      	ldr	r3, [r3, #8]
   1cde6:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1cde8:	9b03      	ldr	r3, [sp, #12]
   1cdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cdec:	695b      	ldr	r3, [r3, #20]
   1cdee:	3310      	adds	r3, #16
    SmpScCalcF4(pCcb, pMsg,
   1cdf0:	9301      	str	r3, [sp, #4]
   1cdf2:	2300      	movs	r3, #0
   1cdf4:	9300      	str	r3, [sp, #0]
   1cdf6:	460b      	mov	r3, r1
   1cdf8:	9902      	ldr	r1, [sp, #8]
   1cdfa:	9803      	ldr	r0, [sp, #12]
   1cdfc:	f000 fc40 	bl	1d680 <SmpScCalcF4>
}
   1ce00:	bf00      	nop
   1ce02:	b005      	add	sp, #20
   1ce04:	f85d fb04 	ldr.w	pc, [sp], #4
   1ce08:	0002bcc4 	.word	0x0002bcc4
   1ce0c:	0002bccc 	.word	0x0002bccc
   1ce10:	0002bcd4 	.word	0x0002bcd4

0001ce14 <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ce14:	b500      	push	{lr}
   1ce16:	b087      	sub	sp, #28
   1ce18:	9003      	str	r0, [sp, #12]
   1ce1a:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1ce1c:	9a02      	ldr	r2, [sp, #8]
   1ce1e:	9903      	ldr	r1, [sp, #12]
   1ce20:	2050      	movs	r0, #80	; 0x50
   1ce22:	f000 fc0d 	bl	1d640 <SmpScAlloc>
   1ce26:	9004      	str	r0, [sp, #16]
   1ce28:	9b04      	ldr	r3, [sp, #16]
   1ce2a:	2b00      	cmp	r3, #0
   1ce2c:	d03f      	beq.n	1ceae <smpScActJwncCalcG2+0x9a>
  {
    uint8_t *pCatBuf = pCmacText;
   1ce2e:	9b04      	ldr	r3, [sp, #16]
   1ce30:	9305      	str	r3, [sp, #20]

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
   1ce32:	9b03      	ldr	r3, [sp, #12]
   1ce34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1ce38:	2b00      	cmp	r3, #0
   1ce3a:	d012      	beq.n	1ce62 <smpScActJwncCalcG2+0x4e>
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1ce3c:	9b03      	ldr	r3, [sp, #12]
   1ce3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce40:	68db      	ldr	r3, [r3, #12]
   1ce42:	2220      	movs	r2, #32
   1ce44:	4619      	mov	r1, r3
   1ce46:	9805      	ldr	r0, [sp, #20]
   1ce48:	f000 fc80 	bl	1d74c <SmpScCat>
   1ce4c:	9005      	str	r0, [sp, #20]
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1ce4e:	9b03      	ldr	r3, [sp, #12]
   1ce50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce52:	689b      	ldr	r3, [r3, #8]
   1ce54:	2220      	movs	r2, #32
   1ce56:	4619      	mov	r1, r3
   1ce58:	9805      	ldr	r0, [sp, #20]
   1ce5a:	f000 fc77 	bl	1d74c <SmpScCat>
   1ce5e:	9005      	str	r0, [sp, #20]
   1ce60:	e011      	b.n	1ce86 <smpScActJwncCalcG2+0x72>
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1ce62:	9b03      	ldr	r3, [sp, #12]
   1ce64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce66:	689b      	ldr	r3, [r3, #8]
   1ce68:	2220      	movs	r2, #32
   1ce6a:	4619      	mov	r1, r3
   1ce6c:	9805      	ldr	r0, [sp, #20]
   1ce6e:	f000 fc6d 	bl	1d74c <SmpScCat>
   1ce72:	9005      	str	r0, [sp, #20]
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1ce74:	9b03      	ldr	r3, [sp, #12]
   1ce76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce78:	68db      	ldr	r3, [r3, #12]
   1ce7a:	2220      	movs	r2, #32
   1ce7c:	4619      	mov	r1, r3
   1ce7e:	9805      	ldr	r0, [sp, #20]
   1ce80:	f000 fc64 	bl	1d74c <SmpScCat>
   1ce84:	9005      	str	r0, [sp, #20]
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1ce86:	9b03      	ldr	r3, [sp, #12]
   1ce88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce8a:	695b      	ldr	r3, [r3, #20]
   1ce8c:	3310      	adds	r3, #16
   1ce8e:	4619      	mov	r1, r3
   1ce90:	9805      	ldr	r0, [sp, #20]
   1ce92:	f000 fc71 	bl	1d778 <SmpScCat128>
   1ce96:	9005      	str	r0, [sp, #20]

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
   1ce98:	9b03      	ldr	r3, [sp, #12]
   1ce9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce9c:	695b      	ldr	r3, [r3, #20]
   1ce9e:	4618      	mov	r0, r3
   1cea0:	9b02      	ldr	r3, [sp, #8]
   1cea2:	9300      	str	r3, [sp, #0]
   1cea4:	9b03      	ldr	r3, [sp, #12]
   1cea6:	2250      	movs	r2, #80	; 0x50
   1cea8:	9904      	ldr	r1, [sp, #16]
   1ceaa:	f000 fb99 	bl	1d5e0 <SmpScCmac>
  }
}
   1ceae:	bf00      	nop
   1ceb0:	b007      	add	sp, #28
   1ceb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001ceb8 <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ceb8:	b500      	push	{lr}
   1ceba:	b089      	sub	sp, #36	; 0x24
   1cebc:	9001      	str	r0, [sp, #4]
   1cebe:	9100      	str	r1, [sp, #0]
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   1cec0:	9b01      	ldr	r3, [sp, #4]
   1cec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cec4:	785b      	ldrb	r3, [r3, #1]
   1cec6:	2b04      	cmp	r3, #4
   1cec8:	d11f      	bne.n	1cf0a <smpScActJwncDisplay+0x52>
  {
    dmSecCnfIndEvt_t cnfEvt;

    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);
   1ceca:	9b00      	ldr	r3, [sp, #0]
   1cecc:	685b      	ldr	r3, [r3, #4]
   1cece:	2210      	movs	r2, #16
   1ced0:	4619      	mov	r1, r3
   1ced2:	4818      	ldr	r0, [pc, #96]	; (1cf34 <smpScActJwncDisplay+0x7c>)
   1ced4:	f000 fdc8 	bl	1da68 <smpLogByteArray>

    /* Send the confirm value to the application for display to the user */
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
   1ced8:	9b00      	ldr	r3, [sp, #0]
   1ceda:	685a      	ldr	r2, [r3, #4]
   1cedc:	ab03      	add	r3, sp, #12
   1cede:	3304      	adds	r3, #4
   1cee0:	4611      	mov	r1, r2
   1cee2:	4618      	mov	r0, r3
   1cee4:	f7f7 fb26 	bl	14534 <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
   1cee8:	9b01      	ldr	r3, [sp, #4]
   1ceea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1ceee:	b29b      	uxth	r3, r3
   1cef0:	f8ad 300c 	strh.w	r3, [sp, #12]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   1cef4:	2335      	movs	r3, #53	; 0x35
   1cef6:	f88d 300e 	strb.w	r3, [sp, #14]
    cnfEvt.hdr.status = HCI_SUCCESS;
   1cefa:	2300      	movs	r3, #0
   1cefc:	f88d 300f 	strb.w	r3, [sp, #15]

    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   1cf00:	ab03      	add	r3, sp, #12
   1cf02:	4618      	mov	r0, r3
   1cf04:	f7fa f8a0 	bl	17048 <DmSmpCbackExec>
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_API_USER_CONFIRM;
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   1cf08:	e010      	b.n	1cf2c <smpScActJwncDisplay+0x74>
    hdr.param = pCcb->connId;
   1cf0a:	9b01      	ldr	r3, [sp, #4]
   1cf0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cf10:	b29b      	uxth	r3, r3
   1cf12:	f8ad 3008 	strh.w	r3, [sp, #8]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   1cf16:	2316      	movs	r3, #22
   1cf18:	f88d 300a 	strb.w	r3, [sp, #10]
    hdr.status = HCI_SUCCESS;
   1cf1c:	2300      	movs	r3, #0
   1cf1e:	f88d 300b 	strb.w	r3, [sp, #11]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1cf22:	ab02      	add	r3, sp, #8
   1cf24:	4619      	mov	r1, r3
   1cf26:	9801      	ldr	r0, [sp, #4]
   1cf28:	f7fe fb3c 	bl	1b5a4 <smpSmExecute>
}
   1cf2c:	bf00      	nop
   1cf2e:	b009      	add	sp, #36	; 0x24
   1cf30:	f85d fb04 	ldr.w	pc, [sp], #4
   1cf34:	0002bcdc 	.word	0x0002bcdc

0001cf38 <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cf38:	b500      	push	{lr}
   1cf3a:	b087      	sub	sp, #28
   1cf3c:	9001      	str	r0, [sp, #4]
   1cf3e:	9100      	str	r1, [sp, #0]
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1cf40:	9b00      	ldr	r3, [sp, #0]
   1cf42:	685b      	ldr	r3, [r3, #4]
   1cf44:	3308      	adds	r3, #8
   1cf46:	9305      	str	r3, [sp, #20]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1cf48:	9b00      	ldr	r3, [sp, #0]
   1cf4a:	685b      	ldr	r3, [r3, #4]
   1cf4c:	3309      	adds	r3, #9
   1cf4e:	9304      	str	r3, [sp, #16]

  if (*pCmd == SMP_CMD_KEYPRESS)
   1cf50:	9b05      	ldr	r3, [sp, #20]
   1cf52:	781b      	ldrb	r3, [r3, #0]
   1cf54:	2b0e      	cmp	r3, #14
   1cf56:	d114      	bne.n	1cf82 <smpScActPkKeypress+0x4a>
  {
    dmSecKeypressIndEvt_t keypressEvt;

    /* Notify the application a keypress message was received from the responder */
    keypressEvt.notificationType = *pPacket;
   1cf58:	9b04      	ldr	r3, [sp, #16]
   1cf5a:	781b      	ldrb	r3, [r3, #0]
   1cf5c:	f88d 300c 	strb.w	r3, [sp, #12]
    keypressEvt.hdr.param = pCcb->connId;
   1cf60:	9b01      	ldr	r3, [sp, #4]
   1cf62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1cf66:	b29b      	uxth	r3, r3
   1cf68:	f8ad 3008 	strh.w	r3, [sp, #8]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   1cf6c:	2336      	movs	r3, #54	; 0x36
   1cf6e:	f88d 300a 	strb.w	r3, [sp, #10]
    keypressEvt.hdr.status = HCI_SUCCESS;
   1cf72:	2300      	movs	r3, #0
   1cf74:	f88d 300b 	strb.w	r3, [sp, #11]

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   1cf78:	ab02      	add	r3, sp, #8
   1cf7a:	4618      	mov	r0, r3
   1cf7c:	f7fa f864 	bl	17048 <DmSmpCbackExec>
  }
  else
  {
    /* Unexpected command */
  }
}
   1cf80:	e00d      	b.n	1cf9e <smpScActPkKeypress+0x66>
  else if (*pCmd == SMP_CMD_PAIR_CNF)
   1cf82:	9b05      	ldr	r3, [sp, #20]
   1cf84:	781b      	ldrb	r3, [r3, #0]
   1cf86:	2b03      	cmp	r3, #3
   1cf88:	d109      	bne.n	1cf9e <smpScActPkKeypress+0x66>
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
   1cf8a:	9b00      	ldr	r3, [sp, #0]
   1cf8c:	221e      	movs	r2, #30
   1cf8e:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = HCI_SUCCESS;
   1cf90:	9b00      	ldr	r3, [sp, #0]
   1cf92:	2200      	movs	r2, #0
   1cf94:	70da      	strb	r2, [r3, #3]
    smpSmExecute(pCcb, pMsg);
   1cf96:	9900      	ldr	r1, [sp, #0]
   1cf98:	9801      	ldr	r0, [sp, #4]
   1cf9a:	f7fe fb03 	bl	1b5a4 <smpSmExecute>
}
   1cf9e:	bf00      	nop
   1cfa0:	b007      	add	sp, #28
   1cfa2:	f85d fb04 	ldr.w	pc, [sp], #4

0001cfa6 <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cfa6:	b500      	push	{lr}
   1cfa8:	b087      	sub	sp, #28
   1cfaa:	9001      	str	r0, [sp, #4]
   1cfac:	9100      	str	r1, [sp, #0]
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
   1cfae:	9b00      	ldr	r3, [sp, #0]
   1cfb0:	9305      	str	r3, [sp, #20]
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
   1cfb2:	9b01      	ldr	r3, [sp, #4]
   1cfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cfb6:	789b      	ldrb	r3, [r3, #2]
   1cfb8:	2b00      	cmp	r3, #0
   1cfba:	d024      	beq.n	1d006 <smpScActPkSendKeypress+0x60>
  {
    /* start smp response timer */
    smpStartRspTimer(pCcb);
   1cfbc:	9801      	ldr	r0, [sp, #4]
   1cfbe:	f7fd fdaf 	bl	1ab20 <smpStartRspTimer>

    /* allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1cfc2:	200a      	movs	r0, #10
   1cfc4:	f7ff f9ad 	bl	1c322 <smpMsgAlloc>
   1cfc8:	9004      	str	r0, [sp, #16]
   1cfca:	9b04      	ldr	r3, [sp, #16]
   1cfcc:	2b00      	cmp	r3, #0
   1cfce:	d010      	beq.n	1cff2 <smpScActPkSendKeypress+0x4c>
    {
      /* build packet */
      p = pPkt + L2C_PAYLOAD_START;
   1cfd0:	9b04      	ldr	r3, [sp, #16]
   1cfd2:	3308      	adds	r3, #8
   1cfd4:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
   1cfd6:	9b03      	ldr	r3, [sp, #12]
   1cfd8:	1c5a      	adds	r2, r3, #1
   1cfda:	9203      	str	r2, [sp, #12]
   1cfdc:	220e      	movs	r2, #14
   1cfde:	701a      	strb	r2, [r3, #0]

      /* Store keypress notification type */
      *p = pKeypress->keypress;
   1cfe0:	9b05      	ldr	r3, [sp, #20]
   1cfe2:	791a      	ldrb	r2, [r3, #4]
   1cfe4:	9b03      	ldr	r3, [sp, #12]
   1cfe6:	701a      	strb	r2, [r3, #0]

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   1cfe8:	9904      	ldr	r1, [sp, #16]
   1cfea:	9801      	ldr	r0, [sp, #4]
   1cfec:	f7ff f958 	bl	1c2a0 <smpSendPkt>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
   1cff0:	e009      	b.n	1d006 <smpScActPkSendKeypress+0x60>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1cff2:	9b00      	ldr	r3, [sp, #0]
   1cff4:	2208      	movs	r2, #8
   1cff6:	70da      	strb	r2, [r3, #3]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1cff8:	9b00      	ldr	r3, [sp, #0]
   1cffa:	2203      	movs	r2, #3
   1cffc:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
   1cffe:	9900      	ldr	r1, [sp, #0]
   1d000:	9801      	ldr	r0, [sp, #4]
   1d002:	f7fe facf 	bl	1b5a4 <smpSmExecute>
}
   1d006:	bf00      	nop
   1d008:	b007      	add	sp, #28
   1d00a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001d010 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d010:	b530      	push	{r4, r5, lr}
   1d012:	b09b      	sub	sp, #108	; 0x6c
   1d014:	9001      	str	r0, [sp, #4]
   1d016:	9100      	str	r1, [sp, #0]
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1d018:	9b01      	ldr	r3, [sp, #4]
   1d01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d01c:	691b      	ldr	r3, [r3, #16]
   1d01e:	ac12      	add	r4, sp, #72	; 0x48
   1d020:	461d      	mov	r5, r3
   1d022:	6828      	ldr	r0, [r5, #0]
   1d024:	6869      	ldr	r1, [r5, #4]
   1d026:	68aa      	ldr	r2, [r5, #8]
   1d028:	68eb      	ldr	r3, [r5, #12]
   1d02a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d02c:	6928      	ldr	r0, [r5, #16]
   1d02e:	6969      	ldr	r1, [r5, #20]
   1d030:	69aa      	ldr	r2, [r5, #24]
   1d032:	69eb      	ldr	r3, [r5, #28]
   1d034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1d036:	9b01      	ldr	r3, [sp, #4]
   1d038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d03a:	689b      	ldr	r3, [r3, #8]
   1d03c:	ac02      	add	r4, sp, #8
   1d03e:	461d      	mov	r5, r3
   1d040:	6828      	ldr	r0, [r5, #0]
   1d042:	6869      	ldr	r1, [r5, #4]
   1d044:	68aa      	ldr	r2, [r5, #8]
   1d046:	68eb      	ldr	r3, [r5, #12]
   1d048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d04a:	6928      	ldr	r0, [r5, #16]
   1d04c:	6969      	ldr	r1, [r5, #20]
   1d04e:	69aa      	ldr	r2, [r5, #24]
   1d050:	69eb      	ldr	r3, [r5, #28]
   1d052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   1d054:	9b01      	ldr	r3, [sp, #4]
   1d056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d058:	689b      	ldr	r3, [r3, #8]
   1d05a:	3320      	adds	r3, #32
   1d05c:	ac0a      	add	r4, sp, #40	; 0x28
   1d05e:	461d      	mov	r5, r3
   1d060:	6828      	ldr	r0, [r5, #0]
   1d062:	6869      	ldr	r1, [r5, #4]
   1d064:	68aa      	ldr	r2, [r5, #8]
   1d066:	68eb      	ldr	r3, [r5, #12]
   1d068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d06a:	6928      	ldr	r0, [r5, #16]
   1d06c:	6969      	ldr	r1, [r5, #20]
   1d06e:	69aa      	ldr	r2, [r5, #24]
   1d070:	69eb      	ldr	r3, [r5, #28]
   1d072:	c40f      	stmia	r4!, {r0, r1, r2, r3}

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   1d074:	4b0d      	ldr	r3, [pc, #52]	; (1d0ac <smpScActCalcSharedSecret+0x9c>)
   1d076:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
   1d07a:	9b01      	ldr	r3, [sp, #4]
   1d07c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d080:	b29a      	uxth	r2, r3
   1d082:	a802      	add	r0, sp, #8
   1d084:	2319      	movs	r3, #25
   1d086:	f7f6 f90e 	bl	132a6 <SecEccGenSharedSecret>
   1d08a:	4603      	mov	r3, r0
   1d08c:	2b00      	cmp	r3, #0
   1d08e:	d109      	bne.n	1d0a4 <smpScActCalcSharedSecret+0x94>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
   1d090:	9b00      	ldr	r3, [sp, #0]
   1d092:	22e0      	movs	r2, #224	; 0xe0
   1d094:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d096:	9b00      	ldr	r3, [sp, #0]
   1d098:	2203      	movs	r2, #3
   1d09a:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d09c:	9900      	ldr	r1, [sp, #0]
   1d09e:	9801      	ldr	r0, [sp, #4]
   1d0a0:	f7fe fa80 	bl	1b5a4 <smpSmExecute>
  }
}
   1d0a4:	bf00      	nop
   1d0a6:	b01b      	add	sp, #108	; 0x6c
   1d0a8:	bd30      	pop	{r4, r5, pc}
   1d0aa:	bf00      	nop
   1d0ac:	100095f8 	.word	0x100095f8

0001d0b0 <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d0b0:	b510      	push	{r4, lr}
   1d0b2:	b08a      	sub	sp, #40	; 0x28
   1d0b4:	9003      	str	r0, [sp, #12]
   1d0b6:	9102      	str	r1, [sp, #8]
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
   1d0b8:	9b02      	ldr	r3, [sp, #8]
   1d0ba:	9309      	str	r3, [sp, #36]	; 0x24
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
   1d0bc:	9b02      	ldr	r3, [sp, #8]
   1d0be:	78db      	ldrb	r3, [r3, #3]
   1d0c0:	2b00      	cmp	r3, #0
   1d0c2:	d124      	bne.n	1d10e <smpScActCalcF5TKey+0x5e>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);
   1d0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d0c6:	3304      	adds	r3, #4
   1d0c8:	2220      	movs	r2, #32
   1d0ca:	4619      	mov	r1, r3
   1d0cc:	4817      	ldr	r0, [pc, #92]	; (1d12c <smpScActCalcF5TKey+0x7c>)
   1d0ce:	f000 fccb 	bl	1da68 <smpLogByteArray>

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1d0d2:	9a02      	ldr	r2, [sp, #8]
   1d0d4:	9903      	ldr	r1, [sp, #12]
   1d0d6:	2020      	movs	r0, #32
   1d0d8:	f000 fab2 	bl	1d640 <SmpScAlloc>
   1d0dc:	9008      	str	r0, [sp, #32]
   1d0de:	9b08      	ldr	r3, [sp, #32]
   1d0e0:	2b00      	cmp	r3, #0
   1d0e2:	d020      	beq.n	1d126 <smpScActCalcF5TKey+0x76>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   1d0e4:	4b12      	ldr	r3, [pc, #72]	; (1d130 <smpScActCalcF5TKey+0x80>)
   1d0e6:	ac04      	add	r4, sp, #16
   1d0e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d0ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   1d0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d0f0:	3304      	adds	r3, #4
   1d0f2:	2220      	movs	r2, #32
   1d0f4:	4619      	mov	r1, r3
   1d0f6:	9808      	ldr	r0, [sp, #32]
   1d0f8:	f7ef f802 	bl	c100 <memcpy>

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
   1d0fc:	a804      	add	r0, sp, #16
   1d0fe:	9b02      	ldr	r3, [sp, #8]
   1d100:	9300      	str	r3, [sp, #0]
   1d102:	9b03      	ldr	r3, [sp, #12]
   1d104:	2220      	movs	r2, #32
   1d106:	9908      	ldr	r1, [sp, #32]
   1d108:	f000 fa6a 	bl	1d5e0 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
   1d10c:	e00b      	b.n	1d126 <smpScActCalcF5TKey+0x76>
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
   1d10e:	9b03      	ldr	r3, [sp, #12]
   1d110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d114:	9902      	ldr	r1, [sp, #8]
   1d116:	220b      	movs	r2, #11
   1d118:	4618      	mov	r0, r3
   1d11a:	f000 fc4d 	bl	1d9b8 <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
   1d11e:	9902      	ldr	r1, [sp, #8]
   1d120:	9803      	ldr	r0, [sp, #12]
   1d122:	f7fe fa3f 	bl	1b5a4 <smpSmExecute>
}
   1d126:	bf00      	nop
   1d128:	b00a      	add	sp, #40	; 0x28
   1d12a:	bd10      	pop	{r4, pc}
   1d12c:	0002bcf0 	.word	0x0002bcf0
   1d130:	0002bd08 	.word	0x0002bd08

0001d134 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d134:	b500      	push	{lr}
   1d136:	b089      	sub	sp, #36	; 0x24
   1d138:	9003      	str	r0, [sp, #12]
   1d13a:	9102      	str	r1, [sp, #8]
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
   1d13c:	9b02      	ldr	r3, [sp, #8]
   1d13e:	9307      	str	r3, [sp, #28]
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1d140:	9b03      	ldr	r3, [sp, #12]
   1d142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d144:	699b      	ldr	r3, [r3, #24]
   1d146:	f103 0210 	add.w	r2, r3, #16
   1d14a:	9b07      	ldr	r3, [sp, #28]
   1d14c:	685b      	ldr	r3, [r3, #4]
   1d14e:	4619      	mov	r1, r3
   1d150:	4610      	mov	r0, r2
   1d152:	f7f7 f9ef 	bl	14534 <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);
   1d156:	9b03      	ldr	r3, [sp, #12]
   1d158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d15a:	699b      	ldr	r3, [r3, #24]
   1d15c:	3310      	adds	r3, #16
   1d15e:	2210      	movs	r2, #16
   1d160:	4619      	mov	r1, r3
   1d162:	4827      	ldr	r0, [pc, #156]	; (1d200 <smpScActCalcF5MacKey+0xcc>)
   1d164:	f000 fc80 	bl	1da68 <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1d168:	9a02      	ldr	r2, [sp, #8]
   1d16a:	9903      	ldr	r1, [sp, #12]
   1d16c:	2035      	movs	r0, #53	; 0x35
   1d16e:	f000 fa67 	bl	1d640 <SmpScAlloc>
   1d172:	9006      	str	r0, [sp, #24]
   1d174:	9b06      	ldr	r3, [sp, #24]
   1d176:	2b00      	cmp	r3, #0
   1d178:	d03d      	beq.n	1d1f6 <smpScActCalcF5MacKey+0xc2>
  {
    uint8_t *pCatBuf = pCmacText;
   1d17a:	9b06      	ldr	r3, [sp, #24]
   1d17c:	9305      	str	r3, [sp, #20]

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
   1d17e:	9b05      	ldr	r3, [sp, #20]
   1d180:	1c5a      	adds	r2, r3, #1
   1d182:	9205      	str	r2, [sp, #20]
   1d184:	2200      	movs	r2, #0
   1d186:	701a      	strb	r2, [r3, #0]
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1d188:	2204      	movs	r2, #4
   1d18a:	491e      	ldr	r1, [pc, #120]	; (1d204 <smpScActCalcF5MacKey+0xd0>)
   1d18c:	9805      	ldr	r0, [sp, #20]
   1d18e:	f000 fadd 	bl	1d74c <SmpScCat>
   1d192:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1d194:	9b03      	ldr	r3, [sp, #12]
   1d196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d198:	695b      	ldr	r3, [r3, #20]
   1d19a:	4619      	mov	r1, r3
   1d19c:	9805      	ldr	r0, [sp, #20]
   1d19e:	f000 faeb 	bl	1d778 <SmpScCat128>
   1d1a2:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1d1a4:	9b03      	ldr	r3, [sp, #12]
   1d1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d1a8:	695b      	ldr	r3, [r3, #20]
   1d1aa:	3310      	adds	r3, #16
   1d1ac:	4619      	mov	r1, r3
   1d1ae:	9805      	ldr	r0, [sp, #20]
   1d1b0:	f000 fae2 	bl	1d778 <SmpScCat128>
   1d1b4:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1d1b6:	9905      	ldr	r1, [sp, #20]
   1d1b8:	9803      	ldr	r0, [sp, #12]
   1d1ba:	f7ff f9e5 	bl	1c588 <smpScCatInitiatorBdAddr>
   1d1be:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1d1c0:	9905      	ldr	r1, [sp, #20]
   1d1c2:	9803      	ldr	r0, [sp, #12]
   1d1c4:	f7ff fa3f 	bl	1c646 <smpScCatResponderBdAddr>
   1d1c8:	9005      	str	r0, [sp, #20]
    *pCatBuf++ = 1;
   1d1ca:	9b05      	ldr	r3, [sp, #20]
   1d1cc:	1c5a      	adds	r2, r3, #1
   1d1ce:	9205      	str	r2, [sp, #20]
   1d1d0:	2201      	movs	r2, #1
   1d1d2:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = 0;
   1d1d4:	9b05      	ldr	r3, [sp, #20]
   1d1d6:	1c5a      	adds	r2, r3, #1
   1d1d8:	9205      	str	r2, [sp, #20]
   1d1da:	2200      	movs	r2, #0
   1d1dc:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   1d1de:	9b03      	ldr	r3, [sp, #12]
   1d1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d1e2:	699b      	ldr	r3, [r3, #24]
   1d1e4:	f103 0010 	add.w	r0, r3, #16
   1d1e8:	9b02      	ldr	r3, [sp, #8]
   1d1ea:	9300      	str	r3, [sp, #0]
   1d1ec:	9b03      	ldr	r3, [sp, #12]
   1d1ee:	2235      	movs	r2, #53	; 0x35
   1d1f0:	9906      	ldr	r1, [sp, #24]
   1d1f2:	f000 f9f5 	bl	1d5e0 <SmpScCmac>
  }
}
   1d1f6:	bf00      	nop
   1d1f8:	b009      	add	sp, #36	; 0x24
   1d1fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1d1fe:	bf00      	nop
   1d200:	0002bd18 	.word	0x0002bd18
   1d204:	0002ca40 	.word	0x0002ca40

0001d208 <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d208:	b500      	push	{lr}
   1d20a:	b089      	sub	sp, #36	; 0x24
   1d20c:	9003      	str	r0, [sp, #12]
   1d20e:	9102      	str	r1, [sp, #8]
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
   1d210:	9b02      	ldr	r3, [sp, #8]
   1d212:	9307      	str	r3, [sp, #28]
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);
   1d214:	9b02      	ldr	r3, [sp, #8]
   1d216:	685b      	ldr	r3, [r3, #4]
   1d218:	2210      	movs	r2, #16
   1d21a:	4619      	mov	r1, r3
   1d21c:	482b      	ldr	r0, [pc, #172]	; (1d2cc <smpScActCalcF5Ltk+0xc4>)
   1d21e:	f000 fc23 	bl	1da68 <smpLogByteArray>

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
   1d222:	9b03      	ldr	r3, [sp, #12]
   1d224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d226:	699b      	ldr	r3, [r3, #24]
   1d228:	461a      	mov	r2, r3
   1d22a:	9b07      	ldr	r3, [sp, #28]
   1d22c:	685b      	ldr	r3, [r3, #4]
   1d22e:	4619      	mov	r1, r3
   1d230:	4610      	mov	r0, r2
   1d232:	f7f7 f97f 	bl	14534 <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1d236:	9a02      	ldr	r2, [sp, #8]
   1d238:	9903      	ldr	r1, [sp, #12]
   1d23a:	2035      	movs	r0, #53	; 0x35
   1d23c:	f000 fa00 	bl	1d640 <SmpScAlloc>
   1d240:	9006      	str	r0, [sp, #24]
   1d242:	9b06      	ldr	r3, [sp, #24]
   1d244:	2b00      	cmp	r3, #0
   1d246:	d03d      	beq.n	1d2c4 <smpScActCalcF5Ltk+0xbc>
  {
    uint8_t *pCatBuf = pCmacText;
   1d248:	9b06      	ldr	r3, [sp, #24]
   1d24a:	9305      	str	r3, [sp, #20]

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
   1d24c:	9b05      	ldr	r3, [sp, #20]
   1d24e:	1c5a      	adds	r2, r3, #1
   1d250:	9205      	str	r2, [sp, #20]
   1d252:	2201      	movs	r2, #1
   1d254:	701a      	strb	r2, [r3, #0]
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1d256:	2204      	movs	r2, #4
   1d258:	491d      	ldr	r1, [pc, #116]	; (1d2d0 <smpScActCalcF5Ltk+0xc8>)
   1d25a:	9805      	ldr	r0, [sp, #20]
   1d25c:	f000 fa76 	bl	1d74c <SmpScCat>
   1d260:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1d262:	9b03      	ldr	r3, [sp, #12]
   1d264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d266:	695b      	ldr	r3, [r3, #20]
   1d268:	4619      	mov	r1, r3
   1d26a:	9805      	ldr	r0, [sp, #20]
   1d26c:	f000 fa84 	bl	1d778 <SmpScCat128>
   1d270:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1d272:	9b03      	ldr	r3, [sp, #12]
   1d274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d276:	695b      	ldr	r3, [r3, #20]
   1d278:	3310      	adds	r3, #16
   1d27a:	4619      	mov	r1, r3
   1d27c:	9805      	ldr	r0, [sp, #20]
   1d27e:	f000 fa7b 	bl	1d778 <SmpScCat128>
   1d282:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1d284:	9905      	ldr	r1, [sp, #20]
   1d286:	9803      	ldr	r0, [sp, #12]
   1d288:	f7ff f97e 	bl	1c588 <smpScCatInitiatorBdAddr>
   1d28c:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1d28e:	9905      	ldr	r1, [sp, #20]
   1d290:	9803      	ldr	r0, [sp, #12]
   1d292:	f7ff f9d8 	bl	1c646 <smpScCatResponderBdAddr>
   1d296:	9005      	str	r0, [sp, #20]
    *pCatBuf++ = 1;
   1d298:	9b05      	ldr	r3, [sp, #20]
   1d29a:	1c5a      	adds	r2, r3, #1
   1d29c:	9205      	str	r2, [sp, #20]
   1d29e:	2201      	movs	r2, #1
   1d2a0:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = 0;
   1d2a2:	9b05      	ldr	r3, [sp, #20]
   1d2a4:	1c5a      	adds	r2, r3, #1
   1d2a6:	9205      	str	r2, [sp, #20]
   1d2a8:	2200      	movs	r2, #0
   1d2aa:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   1d2ac:	9b03      	ldr	r3, [sp, #12]
   1d2ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d2b0:	699b      	ldr	r3, [r3, #24]
   1d2b2:	f103 0010 	add.w	r0, r3, #16
   1d2b6:	9b02      	ldr	r3, [sp, #8]
   1d2b8:	9300      	str	r3, [sp, #0]
   1d2ba:	9b03      	ldr	r3, [sp, #12]
   1d2bc:	2235      	movs	r2, #53	; 0x35
   1d2be:	9906      	ldr	r1, [sp, #24]
   1d2c0:	f000 f98e 	bl	1d5e0 <SmpScCmac>
  }
}
   1d2c4:	bf00      	nop
   1d2c6:	b009      	add	sp, #36	; 0x24
   1d2c8:	f85d fb04 	ldr.w	pc, [sp], #4
   1d2cc:	0002bd1c 	.word	0x0002bd1c
   1d2d0:	0002ca40 	.word	0x0002ca40

0001d2d4 <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d2d4:	b500      	push	{lr}
   1d2d6:	b087      	sub	sp, #28
   1d2d8:	9003      	str	r0, [sp, #12]
   1d2da:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);
   1d2dc:	9b02      	ldr	r3, [sp, #8]
   1d2de:	685b      	ldr	r3, [r3, #4]
   1d2e0:	2210      	movs	r2, #16
   1d2e2:	4619      	mov	r1, r3
   1d2e4:	4830      	ldr	r0, [pc, #192]	; (1d3a8 <smpScActDHKeyCalcF6Ea+0xd4>)
   1d2e6:	f000 fbbf 	bl	1da68 <smpLogByteArray>

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
   1d2ea:	9b03      	ldr	r3, [sp, #12]
   1d2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d2ee:	699b      	ldr	r3, [r3, #24]
   1d2f0:	f103 0010 	add.w	r0, r3, #16
   1d2f4:	9b02      	ldr	r3, [sp, #8]
   1d2f6:	685b      	ldr	r3, [r3, #4]
   1d2f8:	2210      	movs	r2, #16
   1d2fa:	4619      	mov	r1, r3
   1d2fc:	f7f7 f953 	bl	145a6 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1d300:	9a02      	ldr	r2, [sp, #8]
   1d302:	9903      	ldr	r1, [sp, #12]
   1d304:	2041      	movs	r0, #65	; 0x41
   1d306:	f000 f99b 	bl	1d640 <SmpScAlloc>
   1d30a:	9005      	str	r0, [sp, #20]
   1d30c:	9b05      	ldr	r3, [sp, #20]
   1d30e:	2b00      	cmp	r3, #0
   1d310:	d045      	beq.n	1d39e <smpScActDHKeyCalcF6Ea+0xca>
  {
    uint8_t *pCatBuf = pCmacText;
   1d312:	9b05      	ldr	r3, [sp, #20]
   1d314:	9304      	str	r3, [sp, #16]

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1d316:	9b03      	ldr	r3, [sp, #12]
   1d318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d31a:	695b      	ldr	r3, [r3, #20]
   1d31c:	4619      	mov	r1, r3
   1d31e:	9804      	ldr	r0, [sp, #16]
   1d320:	f000 fa2a 	bl	1d778 <SmpScCat128>
   1d324:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1d326:	9b03      	ldr	r3, [sp, #12]
   1d328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d32a:	695b      	ldr	r3, [r3, #20]
   1d32c:	3310      	adds	r3, #16
   1d32e:	4619      	mov	r1, r3
   1d330:	9804      	ldr	r0, [sp, #16]
   1d332:	f000 fa21 	bl	1d778 <SmpScCat128>
   1d336:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
   1d338:	9b03      	ldr	r3, [sp, #12]
   1d33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d33c:	695b      	ldr	r3, [r3, #20]
   1d33e:	3330      	adds	r3, #48	; 0x30
   1d340:	4619      	mov	r1, r3
   1d342:	9804      	ldr	r0, [sp, #16]
   1d344:	f000 fa18 	bl	1d778 <SmpScCat128>
   1d348:	9004      	str	r0, [sp, #16]

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
   1d34a:	9b04      	ldr	r3, [sp, #16]
   1d34c:	1c5a      	adds	r2, r3, #1
   1d34e:	9204      	str	r2, [sp, #16]
   1d350:	9a03      	ldr	r2, [sp, #12]
   1d352:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   1d356:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
   1d358:	9b04      	ldr	r3, [sp, #16]
   1d35a:	1c5a      	adds	r2, r3, #1
   1d35c:	9204      	str	r2, [sp, #16]
   1d35e:	9a03      	ldr	r2, [sp, #12]
   1d360:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   1d364:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
   1d366:	9b04      	ldr	r3, [sp, #16]
   1d368:	1c5a      	adds	r2, r3, #1
   1d36a:	9204      	str	r2, [sp, #16]
   1d36c:	9a03      	ldr	r2, [sp, #12]
   1d36e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   1d372:	701a      	strb	r2, [r3, #0]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1d374:	9904      	ldr	r1, [sp, #16]
   1d376:	9803      	ldr	r0, [sp, #12]
   1d378:	f7ff f906 	bl	1c588 <smpScCatInitiatorBdAddr>
   1d37c:	9004      	str	r0, [sp, #16]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1d37e:	9904      	ldr	r1, [sp, #16]
   1d380:	9803      	ldr	r0, [sp, #12]
   1d382:	f7ff f960 	bl	1c646 <smpScCatResponderBdAddr>
   1d386:	9004      	str	r0, [sp, #16]

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   1d388:	9b03      	ldr	r3, [sp, #12]
   1d38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d38c:	699b      	ldr	r3, [r3, #24]
   1d38e:	4618      	mov	r0, r3
   1d390:	9b02      	ldr	r3, [sp, #8]
   1d392:	9300      	str	r3, [sp, #0]
   1d394:	9b03      	ldr	r3, [sp, #12]
   1d396:	2241      	movs	r2, #65	; 0x41
   1d398:	9905      	ldr	r1, [sp, #20]
   1d39a:	f000 f921 	bl	1d5e0 <SmpScCmac>
  }
}
   1d39e:	bf00      	nop
   1d3a0:	b007      	add	sp, #28
   1d3a2:	f85d fb04 	ldr.w	pc, [sp], #4
   1d3a6:	bf00      	nop
   1d3a8:	0002bd20 	.word	0x0002bd20

0001d3ac <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d3ac:	b500      	push	{lr}
   1d3ae:	b087      	sub	sp, #28
   1d3b0:	9003      	str	r0, [sp, #12]
   1d3b2:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   1d3b4:	9b02      	ldr	r3, [sp, #8]
   1d3b6:	685b      	ldr	r3, [r3, #4]
   1d3b8:	2210      	movs	r2, #16
   1d3ba:	4619      	mov	r1, r3
   1d3bc:	482f      	ldr	r0, [pc, #188]	; (1d47c <smpScActDHKeyCalcF6Eb+0xd0>)
   1d3be:	f000 fb53 	bl	1da68 <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1d3c2:	9a02      	ldr	r2, [sp, #8]
   1d3c4:	9903      	ldr	r1, [sp, #12]
   1d3c6:	2041      	movs	r0, #65	; 0x41
   1d3c8:	f000 f93a 	bl	1d640 <SmpScAlloc>
   1d3cc:	9005      	str	r0, [sp, #20]
   1d3ce:	9b05      	ldr	r3, [sp, #20]
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d045      	beq.n	1d460 <smpScActDHKeyCalcF6Eb+0xb4>
  {
    uint8_t *pCatBuf = pCmacText;
   1d3d4:	9b05      	ldr	r3, [sp, #20]
   1d3d6:	9304      	str	r3, [sp, #16]

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1d3d8:	9b03      	ldr	r3, [sp, #12]
   1d3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d3dc:	695b      	ldr	r3, [r3, #20]
   1d3de:	3310      	adds	r3, #16
   1d3e0:	4619      	mov	r1, r3
   1d3e2:	9804      	ldr	r0, [sp, #16]
   1d3e4:	f000 f9c8 	bl	1d778 <SmpScCat128>
   1d3e8:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1d3ea:	9b03      	ldr	r3, [sp, #12]
   1d3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d3ee:	695b      	ldr	r3, [r3, #20]
   1d3f0:	4619      	mov	r1, r3
   1d3f2:	9804      	ldr	r0, [sp, #16]
   1d3f4:	f000 f9c0 	bl	1d778 <SmpScCat128>
   1d3f8:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
   1d3fa:	9b03      	ldr	r3, [sp, #12]
   1d3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d3fe:	695b      	ldr	r3, [r3, #20]
   1d400:	3320      	adds	r3, #32
   1d402:	4619      	mov	r1, r3
   1d404:	9804      	ldr	r0, [sp, #16]
   1d406:	f000 f9b7 	bl	1d778 <SmpScCat128>
   1d40a:	9004      	str	r0, [sp, #16]

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
   1d40c:	9b04      	ldr	r3, [sp, #16]
   1d40e:	1c5a      	adds	r2, r3, #1
   1d410:	9204      	str	r2, [sp, #16]
   1d412:	9a03      	ldr	r2, [sp, #12]
   1d414:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
   1d418:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
   1d41a:	9b04      	ldr	r3, [sp, #16]
   1d41c:	1c5a      	adds	r2, r3, #1
   1d41e:	9204      	str	r2, [sp, #16]
   1d420:	9a03      	ldr	r2, [sp, #12]
   1d422:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
   1d426:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
   1d428:	9b04      	ldr	r3, [sp, #16]
   1d42a:	1c5a      	adds	r2, r3, #1
   1d42c:	9204      	str	r2, [sp, #16]
   1d42e:	9a03      	ldr	r2, [sp, #12]
   1d430:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
   1d434:	701a      	strb	r2, [r3, #0]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1d436:	9904      	ldr	r1, [sp, #16]
   1d438:	9803      	ldr	r0, [sp, #12]
   1d43a:	f7ff f904 	bl	1c646 <smpScCatResponderBdAddr>
   1d43e:	9004      	str	r0, [sp, #16]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1d440:	9904      	ldr	r1, [sp, #16]
   1d442:	9803      	ldr	r0, [sp, #12]
   1d444:	f7ff f8a0 	bl	1c588 <smpScCatInitiatorBdAddr>
   1d448:	9004      	str	r0, [sp, #16]

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   1d44a:	9b03      	ldr	r3, [sp, #12]
   1d44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d44e:	699b      	ldr	r3, [r3, #24]
   1d450:	4618      	mov	r0, r3
   1d452:	9b02      	ldr	r3, [sp, #8]
   1d454:	9300      	str	r3, [sp, #0]
   1d456:	9b03      	ldr	r3, [sp, #12]
   1d458:	2241      	movs	r2, #65	; 0x41
   1d45a:	9905      	ldr	r1, [sp, #20]
   1d45c:	f000 f8c0 	bl	1d5e0 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   1d460:	9b03      	ldr	r3, [sp, #12]
   1d462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d464:	695b      	ldr	r3, [r3, #20]
   1d466:	461a      	mov	r2, r3
   1d468:	9b02      	ldr	r3, [sp, #8]
   1d46a:	685b      	ldr	r3, [r3, #4]
   1d46c:	4619      	mov	r1, r3
   1d46e:	4610      	mov	r0, r2
   1d470:	f7f7 f860 	bl	14534 <Calc128Cpy>
}
   1d474:	bf00      	nop
   1d476:	b007      	add	sp, #28
   1d478:	f85d fb04 	ldr.w	pc, [sp], #4
   1d47c:	0002bd24 	.word	0x0002bd24

0001d480 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
   1d480:	b510      	push	{r4, lr}
   1d482:	b082      	sub	sp, #8
   1d484:	9001      	str	r0, [sp, #4]
  if (pCcb->pScCcb->pScratch == NULL)
   1d486:	9b01      	ldr	r3, [sp, #4]
   1d488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d48a:	695b      	ldr	r3, [r3, #20]
   1d48c:	2b00      	cmp	r3, #0
   1d48e:	d106      	bne.n	1d49e <SmpScAllocScratchBuffers+0x1e>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
   1d490:	9b01      	ldr	r3, [sp, #4]
   1d492:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   1d494:	2060      	movs	r0, #96	; 0x60
   1d496:	f7ef fdd7 	bl	d048 <WsfBufAlloc>
   1d49a:	4603      	mov	r3, r0
   1d49c:	6163      	str	r3, [r4, #20]
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   1d49e:	9b01      	ldr	r3, [sp, #4]
   1d4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d4a2:	689b      	ldr	r3, [r3, #8]
   1d4a4:	2b00      	cmp	r3, #0
   1d4a6:	d106      	bne.n	1d4b6 <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   1d4a8:	9b01      	ldr	r3, [sp, #4]
   1d4aa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   1d4ac:	2040      	movs	r0, #64	; 0x40
   1d4ae:	f7ef fdcb 	bl	d048 <WsfBufAlloc>
   1d4b2:	4603      	mov	r3, r0
   1d4b4:	60a3      	str	r3, [r4, #8]
  }

  if (pCcb->pScCcb->pLtk == NULL)
   1d4b6:	9b01      	ldr	r3, [sp, #4]
   1d4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d4ba:	699b      	ldr	r3, [r3, #24]
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	d106      	bne.n	1d4ce <SmpScAllocScratchBuffers+0x4e>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
   1d4c0:	9b01      	ldr	r3, [sp, #4]
   1d4c2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   1d4c4:	2020      	movs	r0, #32
   1d4c6:	f7ef fdbf 	bl	d048 <WsfBufAlloc>
   1d4ca:	4603      	mov	r3, r0
   1d4cc:	61a3      	str	r3, [r4, #24]
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   1d4ce:	9b01      	ldr	r3, [sp, #4]
   1d4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d4d2:	68db      	ldr	r3, [r3, #12]
   1d4d4:	2b00      	cmp	r3, #0
   1d4d6:	d106      	bne.n	1d4e6 <SmpScAllocScratchBuffers+0x66>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   1d4d8:	9b01      	ldr	r3, [sp, #4]
   1d4da:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   1d4dc:	2040      	movs	r0, #64	; 0x40
   1d4de:	f7ef fdb3 	bl	d048 <WsfBufAlloc>
   1d4e2:	4603      	mov	r3, r0
   1d4e4:	60e3      	str	r3, [r4, #12]
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
   1d4e6:	9b01      	ldr	r3, [sp, #4]
   1d4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d4ea:	691b      	ldr	r3, [r3, #16]
   1d4ec:	2b00      	cmp	r3, #0
   1d4ee:	d106      	bne.n	1d4fe <SmpScAllocScratchBuffers+0x7e>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
   1d4f0:	9b01      	ldr	r3, [sp, #4]
   1d4f2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   1d4f4:	2020      	movs	r0, #32
   1d4f6:	f7ef fda7 	bl	d048 <WsfBufAlloc>
   1d4fa:	4603      	mov	r3, r0
   1d4fc:	6123      	str	r3, [r4, #16]
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   1d4fe:	9b01      	ldr	r3, [sp, #4]
   1d500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d502:	695b      	ldr	r3, [r3, #20]
   1d504:	2b00      	cmp	r3, #0
   1d506:	d015      	beq.n	1d534 <SmpScAllocScratchBuffers+0xb4>
   1d508:	9b01      	ldr	r3, [sp, #4]
   1d50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d50c:	689b      	ldr	r3, [r3, #8]
   1d50e:	2b00      	cmp	r3, #0
   1d510:	d010      	beq.n	1d534 <SmpScAllocScratchBuffers+0xb4>
   1d512:	9b01      	ldr	r3, [sp, #4]
   1d514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d516:	699b      	ldr	r3, [r3, #24]
   1d518:	2b00      	cmp	r3, #0
   1d51a:	d00b      	beq.n	1d534 <SmpScAllocScratchBuffers+0xb4>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   1d51c:	9b01      	ldr	r3, [sp, #4]
   1d51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d520:	68db      	ldr	r3, [r3, #12]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   1d522:	2b00      	cmp	r3, #0
   1d524:	d006      	beq.n	1d534 <SmpScAllocScratchBuffers+0xb4>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   1d526:	9b01      	ldr	r3, [sp, #4]
   1d528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d52a:	691b      	ldr	r3, [r3, #16]
   1d52c:	2b00      	cmp	r3, #0
   1d52e:	d001      	beq.n	1d534 <SmpScAllocScratchBuffers+0xb4>
  {
    return TRUE;
   1d530:	2301      	movs	r3, #1
   1d532:	e000      	b.n	1d536 <SmpScAllocScratchBuffers+0xb6>
  }

  return FALSE;
   1d534:	2300      	movs	r3, #0
}
   1d536:	4618      	mov	r0, r3
   1d538:	b002      	add	sp, #8
   1d53a:	bd10      	pop	{r4, pc}

0001d53c <SmpScFreeScratchBuffers>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
   1d53c:	b500      	push	{lr}
   1d53e:	b083      	sub	sp, #12
   1d540:	9001      	str	r0, [sp, #4]
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
   1d542:	9b01      	ldr	r3, [sp, #4]
   1d544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d546:	695b      	ldr	r3, [r3, #20]
   1d548:	2b00      	cmp	r3, #0
   1d54a:	d009      	beq.n	1d560 <SmpScFreeScratchBuffers+0x24>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
   1d54c:	9b01      	ldr	r3, [sp, #4]
   1d54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d550:	695b      	ldr	r3, [r3, #20]
   1d552:	4618      	mov	r0, r3
   1d554:	f7ef fdbe 	bl	d0d4 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
   1d558:	9b01      	ldr	r3, [sp, #4]
   1d55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d55c:	2200      	movs	r2, #0
   1d55e:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
   1d560:	9b01      	ldr	r3, [sp, #4]
   1d562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d564:	689b      	ldr	r3, [r3, #8]
   1d566:	2b00      	cmp	r3, #0
   1d568:	d009      	beq.n	1d57e <SmpScFreeScratchBuffers+0x42>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
   1d56a:	9b01      	ldr	r3, [sp, #4]
   1d56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d56e:	689b      	ldr	r3, [r3, #8]
   1d570:	4618      	mov	r0, r3
   1d572:	f7ef fdaf 	bl	d0d4 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
   1d576:	9b01      	ldr	r3, [sp, #4]
   1d578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d57a:	2200      	movs	r2, #0
   1d57c:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
   1d57e:	9b01      	ldr	r3, [sp, #4]
   1d580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d582:	699b      	ldr	r3, [r3, #24]
   1d584:	2b00      	cmp	r3, #0
   1d586:	d009      	beq.n	1d59c <SmpScFreeScratchBuffers+0x60>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
   1d588:	9b01      	ldr	r3, [sp, #4]
   1d58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d58c:	699b      	ldr	r3, [r3, #24]
   1d58e:	4618      	mov	r0, r3
   1d590:	f7ef fda0 	bl	d0d4 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
   1d594:	9b01      	ldr	r3, [sp, #4]
   1d596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d598:	2200      	movs	r2, #0
   1d59a:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
   1d59c:	9b01      	ldr	r3, [sp, #4]
   1d59e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5a0:	68db      	ldr	r3, [r3, #12]
   1d5a2:	2b00      	cmp	r3, #0
   1d5a4:	d009      	beq.n	1d5ba <SmpScFreeScratchBuffers+0x7e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
   1d5a6:	9b01      	ldr	r3, [sp, #4]
   1d5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5aa:	68db      	ldr	r3, [r3, #12]
   1d5ac:	4618      	mov	r0, r3
   1d5ae:	f7ef fd91 	bl	d0d4 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
   1d5b2:	9b01      	ldr	r3, [sp, #4]
   1d5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5b6:	2200      	movs	r2, #0
   1d5b8:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
   1d5ba:	9b01      	ldr	r3, [sp, #4]
   1d5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5be:	691b      	ldr	r3, [r3, #16]
   1d5c0:	2b00      	cmp	r3, #0
   1d5c2:	d009      	beq.n	1d5d8 <SmpScFreeScratchBuffers+0x9c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
   1d5c4:	9b01      	ldr	r3, [sp, #4]
   1d5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5c8:	691b      	ldr	r3, [r3, #16]
   1d5ca:	4618      	mov	r0, r3
   1d5cc:	f7ef fd82 	bl	d0d4 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
   1d5d0:	9b01      	ldr	r3, [sp, #4]
   1d5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d5d4:	2200      	movs	r2, #0
   1d5d6:	611a      	str	r2, [r3, #16]
  }
}
   1d5d8:	bf00      	nop
   1d5da:	b003      	add	sp, #12
   1d5dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001d5e0 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d5e0:	b500      	push	{lr}
   1d5e2:	b087      	sub	sp, #28
   1d5e4:	9005      	str	r0, [sp, #20]
   1d5e6:	9104      	str	r1, [sp, #16]
   1d5e8:	9302      	str	r3, [sp, #8]
   1d5ea:	4613      	mov	r3, r2
   1d5ec:	f88d 300f 	strb.w	r3, [sp, #15]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1d5f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d5f4:	b29a      	uxth	r2, r3
   1d5f6:	4b11      	ldr	r3, [pc, #68]	; (1d63c <SmpScCmac+0x5c>)
   1d5f8:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
   1d5fc:	9b02      	ldr	r3, [sp, #8]
   1d5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d602:	b29b      	uxth	r3, r3
   1d604:	201c      	movs	r0, #28
   1d606:	9001      	str	r0, [sp, #4]
   1d608:	9300      	str	r3, [sp, #0]
   1d60a:	460b      	mov	r3, r1
   1d60c:	9904      	ldr	r1, [sp, #16]
   1d60e:	9805      	ldr	r0, [sp, #20]
   1d610:	f7fc faf0 	bl	19bf4 <SecCmac>
   1d614:	4603      	mov	r3, r0
   1d616:	2b00      	cmp	r3, #0
   1d618:	d10c      	bne.n	1d634 <SmpScCmac+0x54>
  {
    WsfBufFree(pText);
   1d61a:	9804      	ldr	r0, [sp, #16]
   1d61c:	f7ef fd5a 	bl	d0d4 <WsfBufFree>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1d620:	9b08      	ldr	r3, [sp, #32]
   1d622:	2208      	movs	r2, #8
   1d624:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d626:	9b08      	ldr	r3, [sp, #32]
   1d628:	2203      	movs	r2, #3
   1d62a:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d62c:	9908      	ldr	r1, [sp, #32]
   1d62e:	9802      	ldr	r0, [sp, #8]
   1d630:	f7fd ffb8 	bl	1b5a4 <smpSmExecute>
  }
}
   1d634:	bf00      	nop
   1d636:	b007      	add	sp, #28
   1d638:	f85d fb04 	ldr.w	pc, [sp], #4
   1d63c:	100095f8 	.word	0x100095f8

0001d640 <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d640:	b500      	push	{lr}
   1d642:	b087      	sub	sp, #28
   1d644:	4603      	mov	r3, r0
   1d646:	9102      	str	r1, [sp, #8]
   1d648:	9201      	str	r2, [sp, #4]
   1d64a:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t *pBuf = WsfBufAlloc(size);
   1d64e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d652:	b29b      	uxth	r3, r3
   1d654:	4618      	mov	r0, r3
   1d656:	f7ef fcf7 	bl	d048 <WsfBufAlloc>
   1d65a:	9005      	str	r0, [sp, #20]

  if (pBuf == NULL)
   1d65c:	9b05      	ldr	r3, [sp, #20]
   1d65e:	2b00      	cmp	r3, #0
   1d660:	d109      	bne.n	1d676 <SmpScAlloc+0x36>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1d662:	9b01      	ldr	r3, [sp, #4]
   1d664:	2208      	movs	r2, #8
   1d666:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d668:	9b01      	ldr	r3, [sp, #4]
   1d66a:	2203      	movs	r2, #3
   1d66c:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d66e:	9901      	ldr	r1, [sp, #4]
   1d670:	9802      	ldr	r0, [sp, #8]
   1d672:	f7fd ff97 	bl	1b5a4 <smpSmExecute>
  }

  return pBuf;
   1d676:	9b05      	ldr	r3, [sp, #20]
}
   1d678:	4618      	mov	r0, r3
   1d67a:	b007      	add	sp, #28
   1d67c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d680 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
   1d680:	b500      	push	{lr}
   1d682:	b089      	sub	sp, #36	; 0x24
   1d684:	9005      	str	r0, [sp, #20]
   1d686:	9104      	str	r1, [sp, #16]
   1d688:	9203      	str	r2, [sp, #12]
   1d68a:	9302      	str	r3, [sp, #8]
  uint8_t *pCmacText;

  /* f4(pU, pV, pX, z) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if ((pCmacText = SmpScAlloc(SMP_F4_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1d68c:	9a04      	ldr	r2, [sp, #16]
   1d68e:	9905      	ldr	r1, [sp, #20]
   1d690:	2041      	movs	r0, #65	; 0x41
   1d692:	f7ff ffd5 	bl	1d640 <SmpScAlloc>
   1d696:	9007      	str	r0, [sp, #28]
   1d698:	9b07      	ldr	r3, [sp, #28]
   1d69a:	2b00      	cmp	r3, #0
   1d69c:	d019      	beq.n	1d6d2 <SmpScCalcF4+0x52>
  {
    uint8_t *pCatBuf = pCmacText;
   1d69e:	9b07      	ldr	r3, [sp, #28]
   1d6a0:	9306      	str	r3, [sp, #24]

    /* Concatinate pU, pV, z */
    pCatBuf = SmpScCat(pCatBuf, pU, SMP_PUB_KEY_LEN);
   1d6a2:	2220      	movs	r2, #32
   1d6a4:	9903      	ldr	r1, [sp, #12]
   1d6a6:	9806      	ldr	r0, [sp, #24]
   1d6a8:	f000 f850 	bl	1d74c <SmpScCat>
   1d6ac:	9006      	str	r0, [sp, #24]
    pCatBuf = SmpScCat(pCatBuf, pV, SMP_PUB_KEY_LEN);
   1d6ae:	2220      	movs	r2, #32
   1d6b0:	9902      	ldr	r1, [sp, #8]
   1d6b2:	9806      	ldr	r0, [sp, #24]
   1d6b4:	f000 f84a 	bl	1d74c <SmpScCat>
   1d6b8:	9006      	str	r0, [sp, #24]
    *pCatBuf = z;
   1d6ba:	9b06      	ldr	r3, [sp, #24]
   1d6bc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   1d6c0:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with Nb as the key */
    SmpScCmac(pX, pCmacText, SMP_F4_TEXT_LEN, pCcb, pMsg);
   1d6c2:	9b04      	ldr	r3, [sp, #16]
   1d6c4:	9300      	str	r3, [sp, #0]
   1d6c6:	9b05      	ldr	r3, [sp, #20]
   1d6c8:	2241      	movs	r2, #65	; 0x41
   1d6ca:	9907      	ldr	r1, [sp, #28]
   1d6cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d6ce:	f7ff ff87 	bl	1d5e0 <SmpScCmac>
  }
}
   1d6d2:	bf00      	nop
   1d6d4:	b009      	add	sp, #36	; 0x24
   1d6d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001d6dc <SmpScInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScInit()
{
   1d6dc:	b082      	sub	sp, #8
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   1d6de:	2300      	movs	r3, #0
   1d6e0:	f88d 3007 	strb.w	r3, [sp, #7]
   1d6e4:	e016      	b.n	1d714 <SmpScInit+0x38>
  {
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1d6e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1d6ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1d6ee:	460b      	mov	r3, r1
   1d6f0:	00db      	lsls	r3, r3, #3
   1d6f2:	1a5b      	subs	r3, r3, r1
   1d6f4:	009b      	lsls	r3, r3, #2
   1d6f6:	4911      	ldr	r1, [pc, #68]	; (1d73c <SmpScInit+0x60>)
   1d6f8:	4419      	add	r1, r3
   1d6fa:	4811      	ldr	r0, [pc, #68]	; (1d740 <SmpScInit+0x64>)
   1d6fc:	4613      	mov	r3, r2
   1d6fe:	00db      	lsls	r3, r3, #3
   1d700:	4413      	add	r3, r2
   1d702:	00db      	lsls	r3, r3, #3
   1d704:	4403      	add	r3, r0
   1d706:	3344      	adds	r3, #68	; 0x44
   1d708:	6019      	str	r1, [r3, #0]
  for (i=0; i<DM_CONN_MAX; i++)
   1d70a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d70e:	3301      	adds	r3, #1
   1d710:	f88d 3007 	strb.w	r3, [sp, #7]
   1d714:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d718:	2b02      	cmp	r3, #2
   1d71a:	d9e4      	bls.n	1d6e6 <SmpScInit+0xa>
  }

  smpCb.procPairing = smpScProcPairing;
   1d71c:	4b08      	ldr	r3, [pc, #32]	; (1d740 <SmpScInit+0x64>)
   1d71e:	4a09      	ldr	r2, [pc, #36]	; (1d744 <SmpScInit+0x68>)
   1d720:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  smpCb.procAuthReq = smpScAuthReq;
   1d724:	4b06      	ldr	r3, [pc, #24]	; (1d740 <SmpScInit+0x64>)
   1d726:	4a08      	ldr	r2, [pc, #32]	; (1d748 <SmpScInit+0x6c>)
   1d728:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  smpCb.lescSupported = TRUE;
   1d72c:	4b04      	ldr	r3, [pc, #16]	; (1d740 <SmpScInit+0x64>)
   1d72e:	2201      	movs	r2, #1
   1d730:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
   1d734:	bf00      	nop
   1d736:	b002      	add	sp, #8
   1d738:	4770      	bx	lr
   1d73a:	bf00      	nop
   1d73c:	100096e8 	.word	0x100096e8
   1d740:	100095f8 	.word	0x100095f8
   1d744:	0001c705 	.word	0x0001c705
   1d748:	0001cb41 	.word	0x0001cb41

0001d74c <SmpScCat>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
   1d74c:	b500      	push	{lr}
   1d74e:	b085      	sub	sp, #20
   1d750:	9003      	str	r0, [sp, #12]
   1d752:	9102      	str	r1, [sp, #8]
   1d754:	4613      	mov	r3, r2
   1d756:	f88d 3007 	strb.w	r3, [sp, #7]
  memcpy(pDst, pSrc, len);
   1d75a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d75e:	461a      	mov	r2, r3
   1d760:	9902      	ldr	r1, [sp, #8]
   1d762:	9803      	ldr	r0, [sp, #12]
   1d764:	f7ee fccc 	bl	c100 <memcpy>
  return pDst + len;
   1d768:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d76c:	9a03      	ldr	r2, [sp, #12]
   1d76e:	4413      	add	r3, r2
}
   1d770:	4618      	mov	r0, r3
   1d772:	b005      	add	sp, #20
   1d774:	f85d fb04 	ldr.w	pc, [sp], #4

0001d778 <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
   1d778:	b500      	push	{lr}
   1d77a:	b083      	sub	sp, #12
   1d77c:	9001      	str	r0, [sp, #4]
   1d77e:	9100      	str	r1, [sp, #0]
  Calc128Cpy(pDst, pSrc);
   1d780:	9900      	ldr	r1, [sp, #0]
   1d782:	9801      	ldr	r0, [sp, #4]
   1d784:	f7f6 fed6 	bl	14534 <Calc128Cpy>
  return pDst + 16;
   1d788:	9b01      	ldr	r3, [sp, #4]
   1d78a:	3310      	adds	r3, #16
}
   1d78c:	4618      	mov	r0, r3
   1d78e:	b003      	add	sp, #12
   1d790:	f85d fb04 	ldr.w	pc, [sp], #4

0001d794 <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1d794:	b500      	push	{lr}
   1d796:	b085      	sub	sp, #20
   1d798:	9001      	str	r0, [sp, #4]
   1d79a:	9100      	str	r1, [sp, #0]
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d79c:	9b01      	ldr	r3, [sp, #4]
   1d79e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d7a2:	2201      	movs	r2, #1
   1d7a4:	2101      	movs	r1, #1
   1d7a6:	4618      	mov	r0, r3
   1d7a8:	f7f8 fba8 	bl	15efc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d7ac:	9801      	ldr	r0, [sp, #4]
   1d7ae:	f7fd f9b7 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1d7b2:	2049      	movs	r0, #73	; 0x49
   1d7b4:	f7fe fdb5 	bl	1c322 <smpMsgAlloc>
   1d7b8:	9003      	str	r0, [sp, #12]
   1d7ba:	9b03      	ldr	r3, [sp, #12]
   1d7bc:	2b00      	cmp	r3, #0
   1d7be:	d01f      	beq.n	1d800 <smpScSendPubKey+0x6c>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1d7c0:	9b03      	ldr	r3, [sp, #12]
   1d7c2:	3308      	adds	r3, #8
   1d7c4:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
   1d7c6:	9b02      	ldr	r3, [sp, #8]
   1d7c8:	1c5a      	adds	r2, r3, #1
   1d7ca:	9202      	str	r2, [sp, #8]
   1d7cc:	220c      	movs	r2, #12
   1d7ce:	701a      	strb	r2, [r3, #0]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1d7d0:	9b01      	ldr	r3, [sp, #4]
   1d7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d7d4:	68db      	ldr	r3, [r3, #12]
   1d7d6:	2220      	movs	r2, #32
   1d7d8:	4619      	mov	r1, r3
   1d7da:	9802      	ldr	r0, [sp, #8]
   1d7dc:	f7f6 fee3 	bl	145a6 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   1d7e0:	9b02      	ldr	r3, [sp, #8]
   1d7e2:	f103 0020 	add.w	r0, r3, #32
   1d7e6:	9b01      	ldr	r3, [sp, #4]
   1d7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d7ea:	68db      	ldr	r3, [r3, #12]
   1d7ec:	3320      	adds	r3, #32
   1d7ee:	2220      	movs	r2, #32
   1d7f0:	4619      	mov	r1, r3
   1d7f2:	f7f6 fed8 	bl	145a6 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d7f6:	9903      	ldr	r1, [sp, #12]
   1d7f8:	9801      	ldr	r0, [sp, #4]
   1d7fa:	f7fe fd51 	bl	1c2a0 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d7fe:	e009      	b.n	1d814 <smpScSendPubKey+0x80>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1d800:	9b00      	ldr	r3, [sp, #0]
   1d802:	2208      	movs	r2, #8
   1d804:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d806:	9b00      	ldr	r3, [sp, #0]
   1d808:	2203      	movs	r2, #3
   1d80a:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d80c:	9900      	ldr	r1, [sp, #0]
   1d80e:	9801      	ldr	r0, [sp, #4]
   1d810:	f7fd fec8 	bl	1b5a4 <smpSmExecute>
}
   1d814:	bf00      	nop
   1d816:	b005      	add	sp, #20
   1d818:	f85d fb04 	ldr.w	pc, [sp], #4

0001d81c <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
   1d81c:	b500      	push	{lr}
   1d81e:	b087      	sub	sp, #28
   1d820:	9003      	str	r0, [sp, #12]
   1d822:	9102      	str	r1, [sp, #8]
   1d824:	9201      	str	r2, [sp, #4]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d826:	9b03      	ldr	r3, [sp, #12]
   1d828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d82c:	2201      	movs	r2, #1
   1d82e:	2101      	movs	r1, #1
   1d830:	4618      	mov	r0, r3
   1d832:	f7f8 fb63 	bl	15efc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d836:	9803      	ldr	r0, [sp, #12]
   1d838:	f7fd f972 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1d83c:	2019      	movs	r0, #25
   1d83e:	f7fe fd70 	bl	1c322 <smpMsgAlloc>
   1d842:	9005      	str	r0, [sp, #20]
   1d844:	9b05      	ldr	r3, [sp, #20]
   1d846:	2b00      	cmp	r3, #0
   1d848:	d011      	beq.n	1d86e <smpScSendDHKeyCheck+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1d84a:	9b05      	ldr	r3, [sp, #20]
   1d84c:	3308      	adds	r3, #8
   1d84e:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
   1d850:	9b04      	ldr	r3, [sp, #16]
   1d852:	1c5a      	adds	r2, r3, #1
   1d854:	9204      	str	r2, [sp, #16]
   1d856:	220d      	movs	r2, #13
   1d858:	701a      	strb	r2, [r3, #0]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
   1d85a:	2210      	movs	r2, #16
   1d85c:	9901      	ldr	r1, [sp, #4]
   1d85e:	9804      	ldr	r0, [sp, #16]
   1d860:	f7f6 fea1 	bl	145a6 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d864:	9905      	ldr	r1, [sp, #20]
   1d866:	9803      	ldr	r0, [sp, #12]
   1d868:	f7fe fd1a 	bl	1c2a0 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d86c:	e009      	b.n	1d882 <smpScSendDHKeyCheck+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1d86e:	9b02      	ldr	r3, [sp, #8]
   1d870:	2208      	movs	r2, #8
   1d872:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d874:	9b02      	ldr	r3, [sp, #8]
   1d876:	2203      	movs	r2, #3
   1d878:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d87a:	9902      	ldr	r1, [sp, #8]
   1d87c:	9803      	ldr	r0, [sp, #12]
   1d87e:	f7fd fe91 	bl	1b5a4 <smpSmExecute>
}
   1d882:	bf00      	nop
   1d884:	b007      	add	sp, #28
   1d886:	f85d fb04 	ldr.w	pc, [sp], #4

0001d88a <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
   1d88a:	b500      	push	{lr}
   1d88c:	b087      	sub	sp, #28
   1d88e:	9003      	str	r0, [sp, #12]
   1d890:	9102      	str	r1, [sp, #8]
   1d892:	9201      	str	r2, [sp, #4]
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d894:	9b03      	ldr	r3, [sp, #12]
   1d896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d89a:	2201      	movs	r2, #1
   1d89c:	2101      	movs	r1, #1
   1d89e:	4618      	mov	r0, r3
   1d8a0:	f7f8 fb2c 	bl	15efc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d8a4:	9803      	ldr	r0, [sp, #12]
   1d8a6:	f7fd f93b 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   1d8aa:	2019      	movs	r0, #25
   1d8ac:	f7fe fd39 	bl	1c322 <smpMsgAlloc>
   1d8b0:	9005      	str	r0, [sp, #20]
   1d8b2:	9b05      	ldr	r3, [sp, #20]
   1d8b4:	2b00      	cmp	r3, #0
   1d8b6:	d011      	beq.n	1d8dc <smpScSendRand+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1d8b8:	9b05      	ldr	r3, [sp, #20]
   1d8ba:	3308      	adds	r3, #8
   1d8bc:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   1d8be:	9b04      	ldr	r3, [sp, #16]
   1d8c0:	1c5a      	adds	r2, r3, #1
   1d8c2:	9204      	str	r2, [sp, #16]
   1d8c4:	2204      	movs	r2, #4
   1d8c6:	701a      	strb	r2, [r3, #0]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
   1d8c8:	2210      	movs	r2, #16
   1d8ca:	9901      	ldr	r1, [sp, #4]
   1d8cc:	9804      	ldr	r0, [sp, #16]
   1d8ce:	f7f6 fe6a 	bl	145a6 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d8d2:	9905      	ldr	r1, [sp, #20]
   1d8d4:	9803      	ldr	r0, [sp, #12]
   1d8d6:	f7fe fce3 	bl	1c2a0 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d8da:	e009      	b.n	1d8f0 <smpScSendRand+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1d8dc:	9b02      	ldr	r3, [sp, #8]
   1d8de:	2208      	movs	r2, #8
   1d8e0:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d8e2:	9b02      	ldr	r3, [sp, #8]
   1d8e4:	2203      	movs	r2, #3
   1d8e6:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d8e8:	9902      	ldr	r1, [sp, #8]
   1d8ea:	9803      	ldr	r0, [sp, #12]
   1d8ec:	f7fd fe5a 	bl	1b5a4 <smpSmExecute>
}
   1d8f0:	bf00      	nop
   1d8f2:	b007      	add	sp, #28
   1d8f4:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8f8 <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
   1d8f8:	b500      	push	{lr}
   1d8fa:	b087      	sub	sp, #28
   1d8fc:	9003      	str	r0, [sp, #12]
   1d8fe:	9102      	str	r1, [sp, #8]
   1d900:	9201      	str	r2, [sp, #4]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d902:	9b03      	ldr	r3, [sp, #12]
   1d904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1d908:	2201      	movs	r2, #1
   1d90a:	2101      	movs	r1, #1
   1d90c:	4618      	mov	r0, r3
   1d90e:	f7f8 faf5 	bl	15efc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d912:	9803      	ldr	r0, [sp, #12]
   1d914:	f7fd f904 	bl	1ab20 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1d918:	2019      	movs	r0, #25
   1d91a:	f7fe fd02 	bl	1c322 <smpMsgAlloc>
   1d91e:	9005      	str	r0, [sp, #20]
   1d920:	9b05      	ldr	r3, [sp, #20]
   1d922:	2b00      	cmp	r3, #0
   1d924:	d011      	beq.n	1d94a <smpScSendPairCnf+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1d926:	9b05      	ldr	r3, [sp, #20]
   1d928:	3308      	adds	r3, #8
   1d92a:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   1d92c:	9b04      	ldr	r3, [sp, #16]
   1d92e:	1c5a      	adds	r2, r3, #1
   1d930:	9204      	str	r2, [sp, #16]
   1d932:	2203      	movs	r2, #3
   1d934:	701a      	strb	r2, [r3, #0]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
   1d936:	2210      	movs	r2, #16
   1d938:	9901      	ldr	r1, [sp, #4]
   1d93a:	9804      	ldr	r0, [sp, #16]
   1d93c:	f7f6 fe33 	bl	145a6 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d940:	9905      	ldr	r1, [sp, #20]
   1d942:	9803      	ldr	r0, [sp, #12]
   1d944:	f7fe fcac 	bl	1c2a0 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d948:	e009      	b.n	1d95e <smpScSendPairCnf+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   1d94a:	9b02      	ldr	r3, [sp, #8]
   1d94c:	2208      	movs	r2, #8
   1d94e:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d950:	9b02      	ldr	r3, [sp, #8]
   1d952:	2203      	movs	r2, #3
   1d954:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1d956:	9902      	ldr	r1, [sp, #8]
   1d958:	9803      	ldr	r0, [sp, #12]
   1d95a:	f7fd fe23 	bl	1b5a4 <smpSmExecute>
}
   1d95e:	bf00      	nop
   1d960:	b007      	add	sp, #28
   1d962:	f85d fb04 	ldr.w	pc, [sp], #4

0001d966 <smpGetPkBit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
   1d966:	b084      	sub	sp, #16
   1d968:	9001      	str	r0, [sp, #4]
  smpScCcb_t *pScCb = pCcb->pScCcb;
   1d96a:	9b01      	ldr	r3, [sp, #4]
   1d96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d96e:	9303      	str	r3, [sp, #12]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   1d970:	9b03      	ldr	r3, [sp, #12]
   1d972:	78db      	ldrb	r3, [r3, #3]
   1d974:	08db      	lsrs	r3, r3, #3
   1d976:	b2db      	uxtb	r3, r3
   1d978:	f1c3 030f 	rsb	r3, r3, #15
   1d97c:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t bit = pScCb->pkPos % 8;
   1d980:	9b03      	ldr	r3, [sp, #12]
   1d982:	78db      	ldrb	r3, [r3, #3]
   1d984:	f003 0307 	and.w	r3, r3, #7
   1d988:	f88d 300a 	strb.w	r3, [sp, #10]

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   1d98c:	9b03      	ldr	r3, [sp, #12]
   1d98e:	695a      	ldr	r2, [r3, #20]
   1d990:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1d994:	4413      	add	r3, r2
   1d996:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d99a:	461a      	mov	r2, r3
   1d99c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1d9a0:	fa42 f303 	asr.w	r3, r2, r3
   1d9a4:	f003 0301 	and.w	r3, r3, #1
   1d9a8:	2b00      	cmp	r3, #0
   1d9aa:	d001      	beq.n	1d9b0 <smpGetPkBit+0x4a>
    return 0x81;
   1d9ac:	2381      	movs	r3, #129	; 0x81
   1d9ae:	e000      	b.n	1d9b2 <smpGetPkBit+0x4c>

  return 0x80;
   1d9b0:	2380      	movs	r3, #128	; 0x80
}
   1d9b2:	4618      	mov	r0, r3
   1d9b4:	b004      	add	sp, #16
   1d9b6:	4770      	bx	lr

0001d9b8 <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
   1d9b8:	b500      	push	{lr}
   1d9ba:	b085      	sub	sp, #20
   1d9bc:	4603      	mov	r3, r0
   1d9be:	9100      	str	r1, [sp, #0]
   1d9c0:	f88d 3007 	strb.w	r3, [sp, #7]
   1d9c4:	4613      	mov	r3, r2
   1d9c6:	f88d 3006 	strb.w	r3, [sp, #6]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1d9ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d9ce:	4618      	mov	r0, r3
   1d9d0:	f7fe f9fc 	bl	1bdcc <smpCcbByConnId>
   1d9d4:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   1d9d6:	9b03      	ldr	r3, [sp, #12]
   1d9d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1d9dc:	4619      	mov	r1, r3
   1d9de:	4816      	ldr	r0, [pc, #88]	; (1da38 <SmpScGetCancelMsgWithReattempt+0x80>)
   1d9e0:	f7f0 f832 	bl	da48 <WsfTrace>

  /* update repeated attempts count */
  pCcb->attempts++;
   1d9e4:	9b03      	ldr	r3, [sp, #12]
   1d9e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1d9ea:	3301      	adds	r3, #1
   1d9ec:	b2da      	uxtb	r2, r3
   1d9ee:	9b03      	ldr	r3, [sp, #12]
   1d9f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  pHdr->param = connId;
   1d9f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d9f8:	b29a      	uxth	r2, r3
   1d9fa:	9b00      	ldr	r3, [sp, #0]
   1d9fc:	801a      	strh	r2, [r3, #0]
  pHdr->status = status;
   1d9fe:	9b00      	ldr	r3, [sp, #0]
   1da00:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1da04:	70da      	strb	r2, [r3, #3]

  SmpDbPairingFailed(connId);
   1da06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1da0a:	4618      	mov	r0, r3
   1da0c:	f7fd ffc0 	bl	1b990 <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
   1da10:	9b03      	ldr	r3, [sp, #12]
   1da12:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   1da16:	4b09      	ldr	r3, [pc, #36]	; (1da3c <SmpScGetCancelMsgWithReattempt+0x84>)
   1da18:	681b      	ldr	r3, [r3, #0]
   1da1a:	79db      	ldrb	r3, [r3, #7]
   1da1c:	429a      	cmp	r2, r3
   1da1e:	d103      	bne.n	1da28 <SmpScGetCancelMsgWithReattempt+0x70>
  {
    /* max attempts reached */
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
   1da20:	9b00      	ldr	r3, [sp, #0]
   1da22:	220d      	movs	r2, #13
   1da24:	709a      	strb	r2, [r3, #2]
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
  }
}
   1da26:	e002      	b.n	1da2e <SmpScGetCancelMsgWithReattempt+0x76>
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1da28:	9b00      	ldr	r3, [sp, #0]
   1da2a:	2203      	movs	r2, #3
   1da2c:	709a      	strb	r2, [r3, #2]
}
   1da2e:	bf00      	nop
   1da30:	b005      	add	sp, #20
   1da32:	f85d fb04 	ldr.w	pc, [sp], #4
   1da36:	bf00      	nop
   1da38:	0002bd7c 	.word	0x0002bd7c
   1da3c:	10002bd0 	.word	0x10002bd0

0001da40 <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
   1da40:	b500      	push	{lr}
   1da42:	b085      	sub	sp, #20
   1da44:	9001      	str	r0, [sp, #4]
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
   1da46:	9b01      	ldr	r3, [sp, #4]
   1da48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1da4c:	a903      	add	r1, sp, #12
   1da4e:	2204      	movs	r2, #4
   1da50:	4618      	mov	r0, r3
   1da52:	f7ff ffb1 	bl	1d9b8 <SmpScGetCancelMsgWithReattempt>

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1da56:	ab03      	add	r3, sp, #12
   1da58:	4619      	mov	r1, r3
   1da5a:	9801      	ldr	r0, [sp, #4]
   1da5c:	f7fd fda2 	bl	1b5a4 <smpSmExecute>
}
   1da60:	bf00      	nop
   1da62:	b005      	add	sp, #20
   1da64:	f85d fb04 	ldr.w	pc, [sp], #4

0001da68 <smpLogByteArray>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpLogByteArray(char *str, uint8_t *pArray, uint8_t len)
{
   1da68:	b500      	push	{lr}
   1da6a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   1da6e:	ab03      	add	r3, sp, #12
   1da70:	6018      	str	r0, [r3, #0]
   1da72:	ab02      	add	r3, sp, #8
   1da74:	6019      	str	r1, [r3, #0]
   1da76:	f10d 0307 	add.w	r3, sp, #7
   1da7a:	701a      	strb	r2, [r3, #0]
#if WSF_TOKEN_ENABLED == TRUE || WSF_TRACE_ENABLED == TRUE

  char buffer[512];
  int i, j=0, pos=0;
   1da7c:	2300      	movs	r3, #0
   1da7e:	9388      	str	r3, [sp, #544]	; 0x220
   1da80:	2300      	movs	r3, #0
   1da82:	9387      	str	r3, [sp, #540]	; 0x21c

  SMP_TRACE_INFO0(str);
   1da84:	ab03      	add	r3, sp, #12
   1da86:	6818      	ldr	r0, [r3, #0]
   1da88:	f7ef ffde 	bl	da48 <WsfTrace>

  while (j < len)
   1da8c:	e07d      	b.n	1db8a <smpLogByteArray+0x122>
  {
    int count = 16;
   1da8e:	2310      	movs	r3, #16
   1da90:	9386      	str	r3, [sp, #536]	; 0x218

    if (len-j < count)
   1da92:	f10d 0307 	add.w	r3, sp, #7
   1da96:	781a      	ldrb	r2, [r3, #0]
   1da98:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1da9a:	1ad3      	subs	r3, r2, r3
   1da9c:	9a86      	ldr	r2, [sp, #536]	; 0x218
   1da9e:	429a      	cmp	r2, r3
   1daa0:	dd01      	ble.n	1daa6 <smpLogByteArray+0x3e>
      count = j;
   1daa2:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1daa4:	9386      	str	r3, [sp, #536]	; 0x218

    buffer[pos++] = '[';
   1daa6:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1daa8:	1c5a      	adds	r2, r3, #1
   1daaa:	9287      	str	r2, [sp, #540]	; 0x21c
   1daac:	aa05      	add	r2, sp, #20
   1daae:	215b      	movs	r1, #91	; 0x5b
   1dab0:	54d1      	strb	r1, [r2, r3]

    for (i=0; i<count; i++, j++)
   1dab2:	2300      	movs	r3, #0
   1dab4:	9389      	str	r3, [sp, #548]	; 0x224
   1dab6:	e052      	b.n	1db5e <smpLogByteArray+0xf6>
    {
      uint8_t quad;

      if (i && i % 4 == 0)
   1dab8:	9b89      	ldr	r3, [sp, #548]	; 0x224
   1daba:	2b00      	cmp	r3, #0
   1dabc:	d00a      	beq.n	1dad4 <smpLogByteArray+0x6c>
   1dabe:	9b89      	ldr	r3, [sp, #548]	; 0x224
   1dac0:	f003 0303 	and.w	r3, r3, #3
   1dac4:	2b00      	cmp	r3, #0
   1dac6:	d105      	bne.n	1dad4 <smpLogByteArray+0x6c>
        buffer[pos++] = ' ';
   1dac8:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1daca:	1c5a      	adds	r2, r3, #1
   1dacc:	9287      	str	r2, [sp, #540]	; 0x21c
   1dace:	aa05      	add	r2, sp, #20
   1dad0:	2120      	movs	r1, #32
   1dad2:	54d1      	strb	r1, [r2, r3]

      quad = (pArray[j] >> 4) & 0xf;
   1dad4:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1dad6:	aa02      	add	r2, sp, #8
   1dad8:	6812      	ldr	r2, [r2, #0]
   1dada:	4413      	add	r3, r2
   1dadc:	781b      	ldrb	r3, [r3, #0]
   1dade:	091b      	lsrs	r3, r3, #4
   1dae0:	f88d 3217 	strb.w	r3, [sp, #535]	; 0x217

      if (quad < 10)
   1dae4:	f89d 3217 	ldrb.w	r3, [sp, #535]	; 0x217
   1dae8:	2b09      	cmp	r3, #9
   1daea:	d809      	bhi.n	1db00 <smpLogByteArray+0x98>
        buffer[pos++] = '0' + quad;
   1daec:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1daee:	1c5a      	adds	r2, r3, #1
   1daf0:	9287      	str	r2, [sp, #540]	; 0x21c
   1daf2:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1daf6:	3230      	adds	r2, #48	; 0x30
   1daf8:	b2d1      	uxtb	r1, r2
   1dafa:	aa05      	add	r2, sp, #20
   1dafc:	54d1      	strb	r1, [r2, r3]
   1dafe:	e008      	b.n	1db12 <smpLogByteArray+0xaa>
      else
        buffer[pos++] = 'a' + quad - 10;
   1db00:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1db02:	1c5a      	adds	r2, r3, #1
   1db04:	9287      	str	r2, [sp, #540]	; 0x21c
   1db06:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1db0a:	3257      	adds	r2, #87	; 0x57
   1db0c:	b2d1      	uxtb	r1, r2
   1db0e:	aa05      	add	r2, sp, #20
   1db10:	54d1      	strb	r1, [r2, r3]

      quad = pArray[j] & 0xf;
   1db12:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1db14:	aa02      	add	r2, sp, #8
   1db16:	6812      	ldr	r2, [r2, #0]
   1db18:	4413      	add	r3, r2
   1db1a:	781b      	ldrb	r3, [r3, #0]
   1db1c:	f003 030f 	and.w	r3, r3, #15
   1db20:	f88d 3217 	strb.w	r3, [sp, #535]	; 0x217

      if (quad < 10)
   1db24:	f89d 3217 	ldrb.w	r3, [sp, #535]	; 0x217
   1db28:	2b09      	cmp	r3, #9
   1db2a:	d809      	bhi.n	1db40 <smpLogByteArray+0xd8>
        buffer[pos++] = '0' + quad;
   1db2c:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1db2e:	1c5a      	adds	r2, r3, #1
   1db30:	9287      	str	r2, [sp, #540]	; 0x21c
   1db32:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1db36:	3230      	adds	r2, #48	; 0x30
   1db38:	b2d1      	uxtb	r1, r2
   1db3a:	aa05      	add	r2, sp, #20
   1db3c:	54d1      	strb	r1, [r2, r3]
   1db3e:	e008      	b.n	1db52 <smpLogByteArray+0xea>
      else
        buffer[pos++] = 'a' + quad - 10;
   1db40:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1db42:	1c5a      	adds	r2, r3, #1
   1db44:	9287      	str	r2, [sp, #540]	; 0x21c
   1db46:	f89d 2217 	ldrb.w	r2, [sp, #535]	; 0x217
   1db4a:	3257      	adds	r2, #87	; 0x57
   1db4c:	b2d1      	uxtb	r1, r2
   1db4e:	aa05      	add	r2, sp, #20
   1db50:	54d1      	strb	r1, [r2, r3]
    for (i=0; i<count; i++, j++)
   1db52:	9b89      	ldr	r3, [sp, #548]	; 0x224
   1db54:	3301      	adds	r3, #1
   1db56:	9389      	str	r3, [sp, #548]	; 0x224
   1db58:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1db5a:	3301      	adds	r3, #1
   1db5c:	9388      	str	r3, [sp, #544]	; 0x220
   1db5e:	9a89      	ldr	r2, [sp, #548]	; 0x224
   1db60:	9b86      	ldr	r3, [sp, #536]	; 0x218
   1db62:	429a      	cmp	r2, r3
   1db64:	dba8      	blt.n	1dab8 <smpLogByteArray+0x50>
    }

    buffer[pos++] = ']';
   1db66:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1db68:	1c5a      	adds	r2, r3, #1
   1db6a:	9287      	str	r2, [sp, #540]	; 0x21c
   1db6c:	aa05      	add	r2, sp, #20
   1db6e:	215d      	movs	r1, #93	; 0x5d
   1db70:	54d1      	strb	r1, [r2, r3]
    buffer[pos++] = '\0';
   1db72:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1db74:	1c5a      	adds	r2, r3, #1
   1db76:	9287      	str	r2, [sp, #540]	; 0x21c
   1db78:	aa05      	add	r2, sp, #20
   1db7a:	2100      	movs	r1, #0
   1db7c:	54d1      	strb	r1, [r2, r3]
    SMP_TRACE_INFO0(buffer);
   1db7e:	ab05      	add	r3, sp, #20
   1db80:	4618      	mov	r0, r3
   1db82:	f7ef ff61 	bl	da48 <WsfTrace>
    pos = 0;
   1db86:	2300      	movs	r3, #0
   1db88:	9387      	str	r3, [sp, #540]	; 0x21c
  while (j < len)
   1db8a:	f10d 0307 	add.w	r3, sp, #7
   1db8e:	781b      	ldrb	r3, [r3, #0]
   1db90:	9a88      	ldr	r2, [sp, #544]	; 0x220
   1db92:	429a      	cmp	r2, r3
   1db94:	f6ff af7b 	blt.w	1da8e <smpLogByteArray+0x26>
  }

  if (pos)
   1db98:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1db9a:	2b00      	cmp	r3, #0
   1db9c:	d00f      	beq.n	1dbbe <smpLogByteArray+0x156>
  {
    buffer[pos++] = ']';
   1db9e:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1dba0:	1c5a      	adds	r2, r3, #1
   1dba2:	9287      	str	r2, [sp, #540]	; 0x21c
   1dba4:	aa05      	add	r2, sp, #20
   1dba6:	215d      	movs	r1, #93	; 0x5d
   1dba8:	54d1      	strb	r1, [r2, r3]
    buffer[pos++] = '\0';
   1dbaa:	9b87      	ldr	r3, [sp, #540]	; 0x21c
   1dbac:	1c5a      	adds	r2, r3, #1
   1dbae:	9287      	str	r2, [sp, #540]	; 0x21c
   1dbb0:	aa05      	add	r2, sp, #20
   1dbb2:	2100      	movs	r1, #0
   1dbb4:	54d1      	strb	r1, [r2, r3]

    SMP_TRACE_INFO0(buffer);
   1dbb6:	ab05      	add	r3, sp, #20
   1dbb8:	4618      	mov	r0, r3
   1dbba:	f7ef ff45 	bl	da48 <WsfTrace>
  }
#endif
}
   1dbbe:	bf00      	nop
   1dbc0:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   1dbc4:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbc8 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   1dbc8:	b082      	sub	sp, #8
   1dbca:	9001      	str	r0, [sp, #4]
  hciCb.evtCback = evtCback;
   1dbcc:	4a02      	ldr	r2, [pc, #8]	; (1dbd8 <HciEvtRegister+0x10>)
   1dbce:	9b01      	ldr	r3, [sp, #4]
   1dbd0:	6093      	str	r3, [r2, #8]
}
   1dbd2:	bf00      	nop
   1dbd4:	b002      	add	sp, #8
   1dbd6:	4770      	bx	lr
   1dbd8:	1000973c 	.word	0x1000973c

0001dbdc <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   1dbdc:	b082      	sub	sp, #8
   1dbde:	9001      	str	r0, [sp, #4]
  hciCb.secCback = secCback;
   1dbe0:	4a02      	ldr	r2, [pc, #8]	; (1dbec <HciSecRegister+0x10>)
   1dbe2:	9b01      	ldr	r3, [sp, #4]
   1dbe4:	60d3      	str	r3, [r2, #12]
}
   1dbe6:	bf00      	nop
   1dbe8:	b002      	add	sp, #8
   1dbea:	4770      	bx	lr
   1dbec:	1000973c 	.word	0x1000973c

0001dbf0 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   1dbf0:	b082      	sub	sp, #8
   1dbf2:	9001      	str	r0, [sp, #4]
   1dbf4:	9100      	str	r1, [sp, #0]
  hciCb.aclCback = aclCback;
   1dbf6:	4a04      	ldr	r2, [pc, #16]	; (1dc08 <HciAclRegister+0x18>)
   1dbf8:	9b01      	ldr	r3, [sp, #4]
   1dbfa:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   1dbfc:	4a02      	ldr	r2, [pc, #8]	; (1dc08 <HciAclRegister+0x18>)
   1dbfe:	9b00      	ldr	r3, [sp, #0]
   1dc00:	6153      	str	r3, [r2, #20]
}
   1dc02:	bf00      	nop
   1dc04:	b002      	add	sp, #8
   1dc06:	4770      	bx	lr
   1dc08:	1000973c 	.word	0x1000973c

0001dc0c <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   1dc0c:	b500      	push	{lr}
   1dc0e:	b083      	sub	sp, #12
   1dc10:	4603      	mov	r3, r0
   1dc12:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   1dc16:	4a08      	ldr	r2, [pc, #32]	; (1dc38 <HciHandlerInit+0x2c>)
   1dc18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc1c:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   1dc1e:	4b06      	ldr	r3, [pc, #24]	; (1dc38 <HciHandlerInit+0x2c>)
   1dc20:	2200      	movs	r2, #0
   1dc22:	601a      	str	r2, [r3, #0]
   1dc24:	4b04      	ldr	r3, [pc, #16]	; (1dc38 <HciHandlerInit+0x2c>)
   1dc26:	2200      	movs	r2, #0
   1dc28:	605a      	str	r2, [r3, #4]

  /* perform other hci initialization */
  HciCoreInit();
   1dc2a:	f001 fa97 	bl	1f15c <HciCoreInit>
}
   1dc2e:	bf00      	nop
   1dc30:	b003      	add	sp, #12
   1dc32:	f85d fb04 	ldr.w	pc, [sp], #4
   1dc36:	bf00      	nop
   1dc38:	1000973c 	.word	0x1000973c

0001dc3c <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1dc3c:	b500      	push	{lr}
   1dc3e:	b083      	sub	sp, #12
   1dc40:	4603      	mov	r3, r0
   1dc42:	9100      	str	r1, [sp, #0]
   1dc44:	f88d 3007 	strb.w	r3, [sp, #7]
  HciCoreHandler(event, pMsg);
   1dc48:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dc4c:	9900      	ldr	r1, [sp, #0]
   1dc4e:	4618      	mov	r0, r3
   1dc50:	f001 fc3e 	bl	1f4d0 <HciCoreHandler>
}
   1dc54:	bf00      	nop
   1dc56:	b003      	add	sp, #12
   1dc58:	f85d fb04 	ldr.w	pc, [sp], #4

0001dc5c <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   1dc5c:	b500      	push	{lr}
   1dc5e:	b085      	sub	sp, #20
   1dc60:	4603      	mov	r3, r0
   1dc62:	460a      	mov	r2, r1
   1dc64:	f8ad 3006 	strh.w	r3, [sp, #6]
   1dc68:	4613      	mov	r3, r2
   1dc6a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1dc6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1dc72:	3303      	adds	r3, #3
   1dc74:	b29b      	uxth	r3, r3
   1dc76:	4618      	mov	r0, r3
   1dc78:	f7ef fa7c 	bl	d174 <WsfMsgAlloc>
   1dc7c:	9003      	str	r0, [sp, #12]
   1dc7e:	9b03      	ldr	r3, [sp, #12]
   1dc80:	2b00      	cmp	r3, #0
   1dc82:	d019      	beq.n	1dcb8 <hciCmdAlloc+0x5c>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   1dc84:	9b03      	ldr	r3, [sp, #12]
   1dc86:	1c5a      	adds	r2, r3, #1
   1dc88:	9203      	str	r2, [sp, #12]
   1dc8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1dc8e:	b2d2      	uxtb	r2, r2
   1dc90:	701a      	strb	r2, [r3, #0]
   1dc92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc96:	0a1b      	lsrs	r3, r3, #8
   1dc98:	b299      	uxth	r1, r3
   1dc9a:	9b03      	ldr	r3, [sp, #12]
   1dc9c:	1c5a      	adds	r2, r3, #1
   1dc9e:	9203      	str	r2, [sp, #12]
   1dca0:	b2ca      	uxtb	r2, r1
   1dca2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   1dca4:	9b03      	ldr	r3, [sp, #12]
   1dca6:	1c5a      	adds	r2, r3, #1
   1dca8:	9203      	str	r2, [sp, #12]
   1dcaa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1dcae:	b2d2      	uxtb	r2, r2
   1dcb0:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   1dcb2:	9b03      	ldr	r3, [sp, #12]
   1dcb4:	3b03      	subs	r3, #3
   1dcb6:	9303      	str	r3, [sp, #12]
  }

  return p;
   1dcb8:	9b03      	ldr	r3, [sp, #12]
}
   1dcba:	4618      	mov	r0, r3
   1dcbc:	b005      	add	sp, #20
   1dcbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001dcc4 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   1dcc4:	b500      	push	{lr}
   1dcc6:	b085      	sub	sp, #20
   1dcc8:	9001      	str	r0, [sp, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   1dcca:	9b01      	ldr	r3, [sp, #4]
   1dccc:	2b00      	cmp	r3, #0
   1dcce:	d004      	beq.n	1dcda <hciCmdSend+0x16>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1dcd0:	9a01      	ldr	r2, [sp, #4]
   1dcd2:	2100      	movs	r1, #0
   1dcd4:	4817      	ldr	r0, [pc, #92]	; (1dd34 <hciCmdSend+0x70>)
   1dcd6:	f7ef fa8c 	bl	d1f2 <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   1dcda:	4b17      	ldr	r3, [pc, #92]	; (1dd38 <hciCmdSend+0x74>)
   1dcdc:	7e9b      	ldrb	r3, [r3, #26]
   1dcde:	2b00      	cmp	r3, #0
   1dce0:	d023      	beq.n	1dd2a <hciCmdSend+0x66>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1dce2:	f10d 030b 	add.w	r3, sp, #11
   1dce6:	4619      	mov	r1, r3
   1dce8:	4812      	ldr	r0, [pc, #72]	; (1dd34 <hciCmdSend+0x70>)
   1dcea:	f7ef fa98 	bl	d21e <WsfMsgDeq>
   1dcee:	9003      	str	r0, [sp, #12]
   1dcf0:	9b03      	ldr	r3, [sp, #12]
   1dcf2:	2b00      	cmp	r3, #0
   1dcf4:	d019      	beq.n	1dd2a <hciCmdSend+0x66>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   1dcf6:	4b10      	ldr	r3, [pc, #64]	; (1dd38 <hciCmdSend+0x74>)
   1dcf8:	7e9b      	ldrb	r3, [r3, #26]
   1dcfa:	3b01      	subs	r3, #1
   1dcfc:	b2da      	uxtb	r2, r3
   1dcfe:	4b0e      	ldr	r3, [pc, #56]	; (1dd38 <hciCmdSend+0x74>)
   1dd00:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1dd02:	9b03      	ldr	r3, [sp, #12]
   1dd04:	781b      	ldrb	r3, [r3, #0]
   1dd06:	b29a      	uxth	r2, r3
   1dd08:	9b03      	ldr	r3, [sp, #12]
   1dd0a:	3301      	adds	r3, #1
   1dd0c:	781b      	ldrb	r3, [r3, #0]
   1dd0e:	b29b      	uxth	r3, r3
   1dd10:	021b      	lsls	r3, r3, #8
   1dd12:	b29b      	uxth	r3, r3
   1dd14:	4413      	add	r3, r2
   1dd16:	b29a      	uxth	r2, r3
   1dd18:	4b07      	ldr	r3, [pc, #28]	; (1dd38 <hciCmdSend+0x74>)
   1dd1a:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1dd1c:	210a      	movs	r1, #10
   1dd1e:	4806      	ldr	r0, [pc, #24]	; (1dd38 <hciCmdSend+0x74>)
   1dd20:	f7ef fdaa 	bl	d878 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   1dd24:	9803      	ldr	r0, [sp, #12]
   1dd26:	f003 faf2 	bl	2130e <hciTrSendCmd>
    }
  }
}
   1dd2a:	bf00      	nop
   1dd2c:	b005      	add	sp, #20
   1dd2e:	f85d fb04 	ldr.w	pc, [sp], #4
   1dd32:	bf00      	nop
   1dd34:	10009768 	.word	0x10009768
   1dd38:	10009758 	.word	0x10009758

0001dd3c <hciCmdInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   1dd3c:	4b08      	ldr	r3, [pc, #32]	; (1dd60 <hciCmdInit+0x24>)
   1dd3e:	2200      	movs	r2, #0
   1dd40:	611a      	str	r2, [r3, #16]
   1dd42:	4b07      	ldr	r3, [pc, #28]	; (1dd60 <hciCmdInit+0x24>)
   1dd44:	2200      	movs	r2, #0
   1dd46:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   1dd48:	4b05      	ldr	r3, [pc, #20]	; (1dd60 <hciCmdInit+0x24>)
   1dd4a:	2201      	movs	r2, #1
   1dd4c:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   1dd4e:	4b04      	ldr	r3, [pc, #16]	; (1dd60 <hciCmdInit+0x24>)
   1dd50:	2201      	movs	r2, #1
   1dd52:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   1dd54:	4b03      	ldr	r3, [pc, #12]	; (1dd64 <hciCmdInit+0x28>)
   1dd56:	7e1a      	ldrb	r2, [r3, #24]
   1dd58:	4b01      	ldr	r3, [pc, #4]	; (1dd60 <hciCmdInit+0x24>)
   1dd5a:	721a      	strb	r2, [r3, #8]
}
   1dd5c:	bf00      	nop
   1dd5e:	4770      	bx	lr
   1dd60:	10009758 	.word	0x10009758
   1dd64:	1000973c 	.word	0x1000973c

0001dd68 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   1dd68:	b500      	push	{lr}
   1dd6a:	b083      	sub	sp, #12
   1dd6c:	9001      	str	r0, [sp, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   1dd6e:	f7f6 f92d 	bl	13fcc <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   1dd72:	2000      	movs	r0, #0
   1dd74:	f7f6 f834 	bl	13de0 <HciDrvRadioBoot>
  DmDevReset();
   1dd78:	f7f8 fbcc 	bl	16514 <DmDevReset>
}
   1dd7c:	bf00      	nop
   1dd7e:	b003      	add	sp, #12
   1dd80:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd84 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   1dd84:	b500      	push	{lr}
   1dd86:	b083      	sub	sp, #12
   1dd88:	4603      	mov	r3, r0
   1dd8a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   1dd8e:	4806      	ldr	r0, [pc, #24]	; (1dda8 <hciCmdRecvCmpl+0x24>)
   1dd90:	f7ef fd96 	bl	d8c0 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   1dd94:	4b04      	ldr	r3, [pc, #16]	; (1dda8 <hciCmdRecvCmpl+0x24>)
   1dd96:	2201      	movs	r2, #1
   1dd98:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   1dd9a:	2000      	movs	r0, #0
   1dd9c:	f7ff ff92 	bl	1dcc4 <hciCmdSend>
}
   1dda0:	bf00      	nop
   1dda2:	b003      	add	sp, #12
   1dda4:	f85d fb04 	ldr.w	pc, [sp], #4
   1dda8:	10009758 	.word	0x10009758

0001ddac <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   1ddac:	b500      	push	{lr}
   1ddae:	b085      	sub	sp, #20
   1ddb0:	4603      	mov	r3, r0
   1ddb2:	460a      	mov	r2, r1
   1ddb4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ddb8:	4613      	mov	r3, r2
   1ddba:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   1ddbe:	2103      	movs	r1, #3
   1ddc0:	f240 4006 	movw	r0, #1030	; 0x406
   1ddc4:	f7ff ff4a 	bl	1dc5c <hciCmdAlloc>
   1ddc8:	9003      	str	r0, [sp, #12]
   1ddca:	9b03      	ldr	r3, [sp, #12]
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	d01b      	beq.n	1de08 <HciDisconnectCmd+0x5c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1ddd0:	9b03      	ldr	r3, [sp, #12]
   1ddd2:	3303      	adds	r3, #3
   1ddd4:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1ddd6:	9b02      	ldr	r3, [sp, #8]
   1ddd8:	1c5a      	adds	r2, r3, #1
   1ddda:	9202      	str	r2, [sp, #8]
   1dddc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1dde0:	b2d2      	uxtb	r2, r2
   1dde2:	701a      	strb	r2, [r3, #0]
   1dde4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dde8:	0a1b      	lsrs	r3, r3, #8
   1ddea:	b299      	uxth	r1, r3
   1ddec:	9b02      	ldr	r3, [sp, #8]
   1ddee:	1c5a      	adds	r2, r3, #1
   1ddf0:	9202      	str	r2, [sp, #8]
   1ddf2:	b2ca      	uxtb	r2, r1
   1ddf4:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   1ddf6:	9b02      	ldr	r3, [sp, #8]
   1ddf8:	1c5a      	adds	r2, r3, #1
   1ddfa:	9202      	str	r2, [sp, #8]
   1ddfc:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1de00:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1de02:	9803      	ldr	r0, [sp, #12]
   1de04:	f7ff ff5e 	bl	1dcc4 <hciCmdSend>
  }
}
   1de08:	bf00      	nop
   1de0a:	b005      	add	sp, #20
   1de0c:	f85d fb04 	ldr.w	pc, [sp], #4

0001de10 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   1de10:	b500      	push	{lr}
   1de12:	b085      	sub	sp, #20
   1de14:	4603      	mov	r3, r0
   1de16:	9100      	str	r1, [sp, #0]
   1de18:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   1de1c:	2107      	movs	r1, #7
   1de1e:	f242 0011 	movw	r0, #8209	; 0x2011
   1de22:	f7ff ff1b 	bl	1dc5c <hciCmdAlloc>
   1de26:	9003      	str	r0, [sp, #12]
   1de28:	9b03      	ldr	r3, [sp, #12]
   1de2a:	2b00      	cmp	r3, #0
   1de2c:	d012      	beq.n	1de54 <HciLeAddDevWhiteListCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1de2e:	9b03      	ldr	r3, [sp, #12]
   1de30:	3303      	adds	r3, #3
   1de32:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1de34:	9b02      	ldr	r3, [sp, #8]
   1de36:	1c5a      	adds	r2, r3, #1
   1de38:	9202      	str	r2, [sp, #8]
   1de3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1de3e:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   1de40:	9900      	ldr	r1, [sp, #0]
   1de42:	9802      	ldr	r0, [sp, #8]
   1de44:	f7f6 fb30 	bl	144a8 <BdaCpy>
   1de48:	9b02      	ldr	r3, [sp, #8]
   1de4a:	3306      	adds	r3, #6
   1de4c:	9302      	str	r3, [sp, #8]
    hciCmdSend(pBuf);
   1de4e:	9803      	ldr	r0, [sp, #12]
   1de50:	f7ff ff38 	bl	1dcc4 <hciCmdSend>
  }
}
   1de54:	bf00      	nop
   1de56:	b005      	add	sp, #20
   1de58:	f85d fb04 	ldr.w	pc, [sp], #4

0001de5c <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   1de5c:	b500      	push	{lr}
   1de5e:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   1de60:	2100      	movs	r1, #0
   1de62:	f242 0010 	movw	r0, #8208	; 0x2010
   1de66:	f7ff fef9 	bl	1dc5c <hciCmdAlloc>
   1de6a:	9001      	str	r0, [sp, #4]
   1de6c:	9b01      	ldr	r3, [sp, #4]
   1de6e:	2b00      	cmp	r3, #0
   1de70:	d002      	beq.n	1de78 <HciLeClearWhiteListCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1de72:	9801      	ldr	r0, [sp, #4]
   1de74:	f7ff ff26 	bl	1dcc4 <hciCmdSend>
  }
}
   1de78:	bf00      	nop
   1de7a:	b003      	add	sp, #12
   1de7c:	f85d fb04 	ldr.w	pc, [sp], #4

0001de80 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1de80:	b500      	push	{lr}
   1de82:	b085      	sub	sp, #20
   1de84:	4603      	mov	r3, r0
   1de86:	9100      	str	r1, [sp, #0]
   1de88:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   1de8c:	210e      	movs	r1, #14
   1de8e:	f242 0013 	movw	r0, #8211	; 0x2013
   1de92:	f7ff fee3 	bl	1dc5c <hciCmdAlloc>
   1de96:	9003      	str	r0, [sp, #12]
   1de98:	9b03      	ldr	r3, [sp, #12]
   1de9a:	2b00      	cmp	r3, #0
   1de9c:	d075      	beq.n	1df8a <HciLeConnUpdateCmd+0x10a>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1de9e:	9b03      	ldr	r3, [sp, #12]
   1dea0:	3303      	adds	r3, #3
   1dea2:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1dea4:	9b02      	ldr	r3, [sp, #8]
   1dea6:	1c5a      	adds	r2, r3, #1
   1dea8:	9202      	str	r2, [sp, #8]
   1deaa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1deae:	b2d2      	uxtb	r2, r2
   1deb0:	701a      	strb	r2, [r3, #0]
   1deb2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1deb6:	0a1b      	lsrs	r3, r3, #8
   1deb8:	b299      	uxth	r1, r3
   1deba:	9b02      	ldr	r3, [sp, #8]
   1debc:	1c5a      	adds	r2, r3, #1
   1debe:	9202      	str	r2, [sp, #8]
   1dec0:	b2ca      	uxtb	r2, r1
   1dec2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   1dec4:	9b00      	ldr	r3, [sp, #0]
   1dec6:	8819      	ldrh	r1, [r3, #0]
   1dec8:	9b02      	ldr	r3, [sp, #8]
   1deca:	1c5a      	adds	r2, r3, #1
   1decc:	9202      	str	r2, [sp, #8]
   1dece:	b2ca      	uxtb	r2, r1
   1ded0:	701a      	strb	r2, [r3, #0]
   1ded2:	9b00      	ldr	r3, [sp, #0]
   1ded4:	881b      	ldrh	r3, [r3, #0]
   1ded6:	0a1b      	lsrs	r3, r3, #8
   1ded8:	b299      	uxth	r1, r3
   1deda:	9b02      	ldr	r3, [sp, #8]
   1dedc:	1c5a      	adds	r2, r3, #1
   1dede:	9202      	str	r2, [sp, #8]
   1dee0:	b2ca      	uxtb	r2, r1
   1dee2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   1dee4:	9b00      	ldr	r3, [sp, #0]
   1dee6:	8859      	ldrh	r1, [r3, #2]
   1dee8:	9b02      	ldr	r3, [sp, #8]
   1deea:	1c5a      	adds	r2, r3, #1
   1deec:	9202      	str	r2, [sp, #8]
   1deee:	b2ca      	uxtb	r2, r1
   1def0:	701a      	strb	r2, [r3, #0]
   1def2:	9b00      	ldr	r3, [sp, #0]
   1def4:	885b      	ldrh	r3, [r3, #2]
   1def6:	0a1b      	lsrs	r3, r3, #8
   1def8:	b299      	uxth	r1, r3
   1defa:	9b02      	ldr	r3, [sp, #8]
   1defc:	1c5a      	adds	r2, r3, #1
   1defe:	9202      	str	r2, [sp, #8]
   1df00:	b2ca      	uxtb	r2, r1
   1df02:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   1df04:	9b00      	ldr	r3, [sp, #0]
   1df06:	8899      	ldrh	r1, [r3, #4]
   1df08:	9b02      	ldr	r3, [sp, #8]
   1df0a:	1c5a      	adds	r2, r3, #1
   1df0c:	9202      	str	r2, [sp, #8]
   1df0e:	b2ca      	uxtb	r2, r1
   1df10:	701a      	strb	r2, [r3, #0]
   1df12:	9b00      	ldr	r3, [sp, #0]
   1df14:	889b      	ldrh	r3, [r3, #4]
   1df16:	0a1b      	lsrs	r3, r3, #8
   1df18:	b299      	uxth	r1, r3
   1df1a:	9b02      	ldr	r3, [sp, #8]
   1df1c:	1c5a      	adds	r2, r3, #1
   1df1e:	9202      	str	r2, [sp, #8]
   1df20:	b2ca      	uxtb	r2, r1
   1df22:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   1df24:	9b00      	ldr	r3, [sp, #0]
   1df26:	88d9      	ldrh	r1, [r3, #6]
   1df28:	9b02      	ldr	r3, [sp, #8]
   1df2a:	1c5a      	adds	r2, r3, #1
   1df2c:	9202      	str	r2, [sp, #8]
   1df2e:	b2ca      	uxtb	r2, r1
   1df30:	701a      	strb	r2, [r3, #0]
   1df32:	9b00      	ldr	r3, [sp, #0]
   1df34:	88db      	ldrh	r3, [r3, #6]
   1df36:	0a1b      	lsrs	r3, r3, #8
   1df38:	b299      	uxth	r1, r3
   1df3a:	9b02      	ldr	r3, [sp, #8]
   1df3c:	1c5a      	adds	r2, r3, #1
   1df3e:	9202      	str	r2, [sp, #8]
   1df40:	b2ca      	uxtb	r2, r1
   1df42:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   1df44:	9b00      	ldr	r3, [sp, #0]
   1df46:	8919      	ldrh	r1, [r3, #8]
   1df48:	9b02      	ldr	r3, [sp, #8]
   1df4a:	1c5a      	adds	r2, r3, #1
   1df4c:	9202      	str	r2, [sp, #8]
   1df4e:	b2ca      	uxtb	r2, r1
   1df50:	701a      	strb	r2, [r3, #0]
   1df52:	9b00      	ldr	r3, [sp, #0]
   1df54:	891b      	ldrh	r3, [r3, #8]
   1df56:	0a1b      	lsrs	r3, r3, #8
   1df58:	b299      	uxth	r1, r3
   1df5a:	9b02      	ldr	r3, [sp, #8]
   1df5c:	1c5a      	adds	r2, r3, #1
   1df5e:	9202      	str	r2, [sp, #8]
   1df60:	b2ca      	uxtb	r2, r1
   1df62:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   1df64:	9b00      	ldr	r3, [sp, #0]
   1df66:	8959      	ldrh	r1, [r3, #10]
   1df68:	9b02      	ldr	r3, [sp, #8]
   1df6a:	1c5a      	adds	r2, r3, #1
   1df6c:	9202      	str	r2, [sp, #8]
   1df6e:	b2ca      	uxtb	r2, r1
   1df70:	701a      	strb	r2, [r3, #0]
   1df72:	9b00      	ldr	r3, [sp, #0]
   1df74:	895b      	ldrh	r3, [r3, #10]
   1df76:	0a1b      	lsrs	r3, r3, #8
   1df78:	b299      	uxth	r1, r3
   1df7a:	9b02      	ldr	r3, [sp, #8]
   1df7c:	1c5a      	adds	r2, r3, #1
   1df7e:	9202      	str	r2, [sp, #8]
   1df80:	b2ca      	uxtb	r2, r1
   1df82:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1df84:	9803      	ldr	r0, [sp, #12]
   1df86:	f7ff fe9d 	bl	1dcc4 <hciCmdSend>
  }
}
   1df8a:	bf00      	nop
   1df8c:	b005      	add	sp, #20
   1df8e:	f85d fb04 	ldr.w	pc, [sp], #4

0001df92 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   1df92:	b510      	push	{r4, lr}
   1df94:	b084      	sub	sp, #16
   1df96:	4604      	mov	r4, r0
   1df98:	4608      	mov	r0, r1
   1df9a:	4611      	mov	r1, r2
   1df9c:	461a      	mov	r2, r3
   1df9e:	4623      	mov	r3, r4
   1dfa0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1dfa4:	4603      	mov	r3, r0
   1dfa6:	f8ad 3004 	strh.w	r3, [sp, #4]
   1dfaa:	460b      	mov	r3, r1
   1dfac:	f8ad 3002 	strh.w	r3, [sp, #2]
   1dfb0:	4613      	mov	r3, r2
   1dfb2:	f8ad 3000 	strh.w	r3, [sp]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   1dfb6:	210e      	movs	r1, #14
   1dfb8:	f242 0020 	movw	r0, #8224	; 0x2020
   1dfbc:	f7ff fe4e 	bl	1dc5c <hciCmdAlloc>
   1dfc0:	9003      	str	r0, [sp, #12]
   1dfc2:	9b03      	ldr	r3, [sp, #12]
   1dfc4:	2b00      	cmp	r3, #0
   1dfc6:	d075      	beq.n	1e0b4 <HciLeRemoteConnParamReqReply+0x122>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1dfc8:	9b03      	ldr	r3, [sp, #12]
   1dfca:	3303      	adds	r3, #3
   1dfcc:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1dfce:	9b02      	ldr	r3, [sp, #8]
   1dfd0:	1c5a      	adds	r2, r3, #1
   1dfd2:	9202      	str	r2, [sp, #8]
   1dfd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1dfd8:	b2d2      	uxtb	r2, r2
   1dfda:	701a      	strb	r2, [r3, #0]
   1dfdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dfe0:	0a1b      	lsrs	r3, r3, #8
   1dfe2:	b299      	uxth	r1, r3
   1dfe4:	9b02      	ldr	r3, [sp, #8]
   1dfe6:	1c5a      	adds	r2, r3, #1
   1dfe8:	9202      	str	r2, [sp, #8]
   1dfea:	b2ca      	uxtb	r2, r1
   1dfec:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   1dfee:	9b02      	ldr	r3, [sp, #8]
   1dff0:	1c5a      	adds	r2, r3, #1
   1dff2:	9202      	str	r2, [sp, #8]
   1dff4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1dff8:	b2d2      	uxtb	r2, r2
   1dffa:	701a      	strb	r2, [r3, #0]
   1dffc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e000:	0a1b      	lsrs	r3, r3, #8
   1e002:	b299      	uxth	r1, r3
   1e004:	9b02      	ldr	r3, [sp, #8]
   1e006:	1c5a      	adds	r2, r3, #1
   1e008:	9202      	str	r2, [sp, #8]
   1e00a:	b2ca      	uxtb	r2, r1
   1e00c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   1e00e:	9b02      	ldr	r3, [sp, #8]
   1e010:	1c5a      	adds	r2, r3, #1
   1e012:	9202      	str	r2, [sp, #8]
   1e014:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1e018:	b2d2      	uxtb	r2, r2
   1e01a:	701a      	strb	r2, [r3, #0]
   1e01c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e020:	0a1b      	lsrs	r3, r3, #8
   1e022:	b299      	uxth	r1, r3
   1e024:	9b02      	ldr	r3, [sp, #8]
   1e026:	1c5a      	adds	r2, r3, #1
   1e028:	9202      	str	r2, [sp, #8]
   1e02a:	b2ca      	uxtb	r2, r1
   1e02c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   1e02e:	9b02      	ldr	r3, [sp, #8]
   1e030:	1c5a      	adds	r2, r3, #1
   1e032:	9202      	str	r2, [sp, #8]
   1e034:	f8bd 2000 	ldrh.w	r2, [sp]
   1e038:	b2d2      	uxtb	r2, r2
   1e03a:	701a      	strb	r2, [r3, #0]
   1e03c:	f8bd 3000 	ldrh.w	r3, [sp]
   1e040:	0a1b      	lsrs	r3, r3, #8
   1e042:	b299      	uxth	r1, r3
   1e044:	9b02      	ldr	r3, [sp, #8]
   1e046:	1c5a      	adds	r2, r3, #1
   1e048:	9202      	str	r2, [sp, #8]
   1e04a:	b2ca      	uxtb	r2, r1
   1e04c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1e04e:	9b02      	ldr	r3, [sp, #8]
   1e050:	1c5a      	adds	r2, r3, #1
   1e052:	9202      	str	r2, [sp, #8]
   1e054:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1e058:	b2d2      	uxtb	r2, r2
   1e05a:	701a      	strb	r2, [r3, #0]
   1e05c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1e060:	0a1b      	lsrs	r3, r3, #8
   1e062:	b299      	uxth	r1, r3
   1e064:	9b02      	ldr	r3, [sp, #8]
   1e066:	1c5a      	adds	r2, r3, #1
   1e068:	9202      	str	r2, [sp, #8]
   1e06a:	b2ca      	uxtb	r2, r1
   1e06c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   1e06e:	9b02      	ldr	r3, [sp, #8]
   1e070:	1c5a      	adds	r2, r3, #1
   1e072:	9202      	str	r2, [sp, #8]
   1e074:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1e078:	b2d2      	uxtb	r2, r2
   1e07a:	701a      	strb	r2, [r3, #0]
   1e07c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1e080:	0a1b      	lsrs	r3, r3, #8
   1e082:	b299      	uxth	r1, r3
   1e084:	9b02      	ldr	r3, [sp, #8]
   1e086:	1c5a      	adds	r2, r3, #1
   1e088:	9202      	str	r2, [sp, #8]
   1e08a:	b2ca      	uxtb	r2, r1
   1e08c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   1e08e:	9b02      	ldr	r3, [sp, #8]
   1e090:	1c5a      	adds	r2, r3, #1
   1e092:	9202      	str	r2, [sp, #8]
   1e094:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1e098:	b2d2      	uxtb	r2, r2
   1e09a:	701a      	strb	r2, [r3, #0]
   1e09c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1e0a0:	0a1b      	lsrs	r3, r3, #8
   1e0a2:	b299      	uxth	r1, r3
   1e0a4:	9b02      	ldr	r3, [sp, #8]
   1e0a6:	1c5a      	adds	r2, r3, #1
   1e0a8:	9202      	str	r2, [sp, #8]
   1e0aa:	b2ca      	uxtb	r2, r1
   1e0ac:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e0ae:	9803      	ldr	r0, [sp, #12]
   1e0b0:	f7ff fe08 	bl	1dcc4 <hciCmdSend>
  }
}
   1e0b4:	bf00      	nop
   1e0b6:	b004      	add	sp, #16
   1e0b8:	bd10      	pop	{r4, pc}

0001e0ba <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   1e0ba:	b500      	push	{lr}
   1e0bc:	b085      	sub	sp, #20
   1e0be:	4603      	mov	r3, r0
   1e0c0:	460a      	mov	r2, r1
   1e0c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e0c6:	4613      	mov	r3, r2
   1e0c8:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   1e0cc:	2103      	movs	r1, #3
   1e0ce:	f242 0021 	movw	r0, #8225	; 0x2021
   1e0d2:	f7ff fdc3 	bl	1dc5c <hciCmdAlloc>
   1e0d6:	9003      	str	r0, [sp, #12]
   1e0d8:	9b03      	ldr	r3, [sp, #12]
   1e0da:	2b00      	cmp	r3, #0
   1e0dc:	d01b      	beq.n	1e116 <HciLeRemoteConnParamReqNegReply+0x5c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e0de:	9b03      	ldr	r3, [sp, #12]
   1e0e0:	3303      	adds	r3, #3
   1e0e2:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e0e4:	9b02      	ldr	r3, [sp, #8]
   1e0e6:	1c5a      	adds	r2, r3, #1
   1e0e8:	9202      	str	r2, [sp, #8]
   1e0ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e0ee:	b2d2      	uxtb	r2, r2
   1e0f0:	701a      	strb	r2, [r3, #0]
   1e0f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e0f6:	0a1b      	lsrs	r3, r3, #8
   1e0f8:	b299      	uxth	r1, r3
   1e0fa:	9b02      	ldr	r3, [sp, #8]
   1e0fc:	1c5a      	adds	r2, r3, #1
   1e0fe:	9202      	str	r2, [sp, #8]
   1e100:	b2ca      	uxtb	r2, r1
   1e102:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   1e104:	9b02      	ldr	r3, [sp, #8]
   1e106:	1c5a      	adds	r2, r3, #1
   1e108:	9202      	str	r2, [sp, #8]
   1e10a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1e10e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e110:	9803      	ldr	r0, [sp, #12]
   1e112:	f7ff fdd7 	bl	1dcc4 <hciCmdSend>
  }
}
   1e116:	bf00      	nop
   1e118:	b005      	add	sp, #20
   1e11a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e11e <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   1e11e:	b500      	push	{lr}
   1e120:	b085      	sub	sp, #20
   1e122:	4603      	mov	r3, r0
   1e124:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e128:	460b      	mov	r3, r1
   1e12a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1e12e:	4613      	mov	r3, r2
   1e130:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   1e134:	2106      	movs	r1, #6
   1e136:	f242 0022 	movw	r0, #8226	; 0x2022
   1e13a:	f7ff fd8f 	bl	1dc5c <hciCmdAlloc>
   1e13e:	9003      	str	r0, [sp, #12]
   1e140:	9b03      	ldr	r3, [sp, #12]
   1e142:	2b00      	cmp	r3, #0
   1e144:	d035      	beq.n	1e1b2 <HciLeSetDataLen+0x94>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e146:	9b03      	ldr	r3, [sp, #12]
   1e148:	3303      	adds	r3, #3
   1e14a:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e14c:	9b02      	ldr	r3, [sp, #8]
   1e14e:	1c5a      	adds	r2, r3, #1
   1e150:	9202      	str	r2, [sp, #8]
   1e152:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e156:	b2d2      	uxtb	r2, r2
   1e158:	701a      	strb	r2, [r3, #0]
   1e15a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e15e:	0a1b      	lsrs	r3, r3, #8
   1e160:	b299      	uxth	r1, r3
   1e162:	9b02      	ldr	r3, [sp, #8]
   1e164:	1c5a      	adds	r2, r3, #1
   1e166:	9202      	str	r2, [sp, #8]
   1e168:	b2ca      	uxtb	r2, r1
   1e16a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   1e16c:	9b02      	ldr	r3, [sp, #8]
   1e16e:	1c5a      	adds	r2, r3, #1
   1e170:	9202      	str	r2, [sp, #8]
   1e172:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1e176:	b2d2      	uxtb	r2, r2
   1e178:	701a      	strb	r2, [r3, #0]
   1e17a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e17e:	0a1b      	lsrs	r3, r3, #8
   1e180:	b299      	uxth	r1, r3
   1e182:	9b02      	ldr	r3, [sp, #8]
   1e184:	1c5a      	adds	r2, r3, #1
   1e186:	9202      	str	r2, [sp, #8]
   1e188:	b2ca      	uxtb	r2, r1
   1e18a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   1e18c:	9b02      	ldr	r3, [sp, #8]
   1e18e:	1c5a      	adds	r2, r3, #1
   1e190:	9202      	str	r2, [sp, #8]
   1e192:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1e196:	b2d2      	uxtb	r2, r2
   1e198:	701a      	strb	r2, [r3, #0]
   1e19a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e19e:	0a1b      	lsrs	r3, r3, #8
   1e1a0:	b299      	uxth	r1, r3
   1e1a2:	9b02      	ldr	r3, [sp, #8]
   1e1a4:	1c5a      	adds	r2, r3, #1
   1e1a6:	9202      	str	r2, [sp, #8]
   1e1a8:	b2ca      	uxtb	r2, r1
   1e1aa:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e1ac:	9803      	ldr	r0, [sp, #12]
   1e1ae:	f7ff fd89 	bl	1dcc4 <hciCmdSend>
  }
}
   1e1b2:	bf00      	nop
   1e1b4:	b005      	add	sp, #20
   1e1b6:	f85d fb04 	ldr.w	pc, [sp], #4

0001e1ba <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   1e1ba:	b500      	push	{lr}
   1e1bc:	b085      	sub	sp, #20
   1e1be:	4603      	mov	r3, r0
   1e1c0:	460a      	mov	r2, r1
   1e1c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e1c6:	4613      	mov	r3, r2
   1e1c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   1e1cc:	2104      	movs	r1, #4
   1e1ce:	f242 0024 	movw	r0, #8228	; 0x2024
   1e1d2:	f7ff fd43 	bl	1dc5c <hciCmdAlloc>
   1e1d6:	9003      	str	r0, [sp, #12]
   1e1d8:	9b03      	ldr	r3, [sp, #12]
   1e1da:	2b00      	cmp	r3, #0
   1e1dc:	d025      	beq.n	1e22a <HciLeWriteDefDataLen+0x70>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e1de:	9b03      	ldr	r3, [sp, #12]
   1e1e0:	3303      	adds	r3, #3
   1e1e2:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   1e1e4:	9b02      	ldr	r3, [sp, #8]
   1e1e6:	1c5a      	adds	r2, r3, #1
   1e1e8:	9202      	str	r2, [sp, #8]
   1e1ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e1ee:	b2d2      	uxtb	r2, r2
   1e1f0:	701a      	strb	r2, [r3, #0]
   1e1f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e1f6:	0a1b      	lsrs	r3, r3, #8
   1e1f8:	b299      	uxth	r1, r3
   1e1fa:	9b02      	ldr	r3, [sp, #8]
   1e1fc:	1c5a      	adds	r2, r3, #1
   1e1fe:	9202      	str	r2, [sp, #8]
   1e200:	b2ca      	uxtb	r2, r1
   1e202:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   1e204:	9b02      	ldr	r3, [sp, #8]
   1e206:	1c5a      	adds	r2, r3, #1
   1e208:	9202      	str	r2, [sp, #8]
   1e20a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1e20e:	b2d2      	uxtb	r2, r2
   1e210:	701a      	strb	r2, [r3, #0]
   1e212:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e216:	0a1b      	lsrs	r3, r3, #8
   1e218:	b299      	uxth	r1, r3
   1e21a:	9b02      	ldr	r3, [sp, #8]
   1e21c:	1c5a      	adds	r2, r3, #1
   1e21e:	9202      	str	r2, [sp, #8]
   1e220:	b2ca      	uxtb	r2, r1
   1e222:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e224:	9803      	ldr	r0, [sp, #12]
   1e226:	f7ff fd4d 	bl	1dcc4 <hciCmdSend>
  }
}
   1e22a:	bf00      	nop
   1e22c:	b005      	add	sp, #20
   1e22e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e232 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   1e232:	b500      	push	{lr}
   1e234:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   1e236:	2100      	movs	r1, #0
   1e238:	f242 002f 	movw	r0, #8239	; 0x202f
   1e23c:	f7ff fd0e 	bl	1dc5c <hciCmdAlloc>
   1e240:	9001      	str	r0, [sp, #4]
   1e242:	9b01      	ldr	r3, [sp, #4]
   1e244:	2b00      	cmp	r3, #0
   1e246:	d002      	beq.n	1e24e <HciLeReadMaxDataLen+0x1c>
  {
    hciCmdSend(pBuf);
   1e248:	9801      	ldr	r0, [sp, #4]
   1e24a:	f7ff fd3b 	bl	1dcc4 <hciCmdSend>
  }
}
   1e24e:	bf00      	nop
   1e250:	b003      	add	sp, #12
   1e252:	f85d fb04 	ldr.w	pc, [sp], #4

0001e256 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   1e256:	b500      	push	{lr}
   1e258:	b085      	sub	sp, #20
   1e25a:	9001      	str	r0, [sp, #4]
   1e25c:	9100      	str	r1, [sp, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   1e25e:	2120      	movs	r1, #32
   1e260:	f242 0017 	movw	r0, #8215	; 0x2017
   1e264:	f7ff fcfa 	bl	1dc5c <hciCmdAlloc>
   1e268:	9003      	str	r0, [sp, #12]
   1e26a:	9b03      	ldr	r3, [sp, #12]
   1e26c:	2b00      	cmp	r3, #0
   1e26e:	d012      	beq.n	1e296 <HciLeEncryptCmd+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e270:	9b03      	ldr	r3, [sp, #12]
   1e272:	3303      	adds	r3, #3
   1e274:	9302      	str	r3, [sp, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   1e276:	2210      	movs	r2, #16
   1e278:	9901      	ldr	r1, [sp, #4]
   1e27a:	9802      	ldr	r0, [sp, #8]
   1e27c:	f7ed ff40 	bl	c100 <memcpy>
    p += HCI_KEY_LEN;
   1e280:	9b02      	ldr	r3, [sp, #8]
   1e282:	3310      	adds	r3, #16
   1e284:	9302      	str	r3, [sp, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   1e286:	2210      	movs	r2, #16
   1e288:	9900      	ldr	r1, [sp, #0]
   1e28a:	9802      	ldr	r0, [sp, #8]
   1e28c:	f7ed ff38 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e290:	9803      	ldr	r0, [sp, #12]
   1e292:	f7ff fd17 	bl	1dcc4 <hciCmdSend>
  }
}
   1e296:	bf00      	nop
   1e298:	b005      	add	sp, #20
   1e29a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e29e <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   1e29e:	b500      	push	{lr}
   1e2a0:	b085      	sub	sp, #20
   1e2a2:	4603      	mov	r3, r0
   1e2a4:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   1e2a8:	2102      	movs	r1, #2
   1e2aa:	f242 001b 	movw	r0, #8219	; 0x201b
   1e2ae:	f7ff fcd5 	bl	1dc5c <hciCmdAlloc>
   1e2b2:	9003      	str	r0, [sp, #12]
   1e2b4:	9b03      	ldr	r3, [sp, #12]
   1e2b6:	2b00      	cmp	r3, #0
   1e2b8:	d015      	beq.n	1e2e6 <HciLeLtkReqNegReplCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e2ba:	9b03      	ldr	r3, [sp, #12]
   1e2bc:	3303      	adds	r3, #3
   1e2be:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e2c0:	9b02      	ldr	r3, [sp, #8]
   1e2c2:	1c5a      	adds	r2, r3, #1
   1e2c4:	9202      	str	r2, [sp, #8]
   1e2c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e2ca:	b2d2      	uxtb	r2, r2
   1e2cc:	701a      	strb	r2, [r3, #0]
   1e2ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e2d2:	0a1b      	lsrs	r3, r3, #8
   1e2d4:	b299      	uxth	r1, r3
   1e2d6:	9b02      	ldr	r3, [sp, #8]
   1e2d8:	1c5a      	adds	r2, r3, #1
   1e2da:	9202      	str	r2, [sp, #8]
   1e2dc:	b2ca      	uxtb	r2, r1
   1e2de:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e2e0:	9803      	ldr	r0, [sp, #12]
   1e2e2:	f7ff fcef 	bl	1dcc4 <hciCmdSend>
  }
}
   1e2e6:	bf00      	nop
   1e2e8:	b005      	add	sp, #20
   1e2ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001e2ee <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   1e2ee:	b500      	push	{lr}
   1e2f0:	b085      	sub	sp, #20
   1e2f2:	4603      	mov	r3, r0
   1e2f4:	9100      	str	r1, [sp, #0]
   1e2f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   1e2fa:	2112      	movs	r1, #18
   1e2fc:	f242 001a 	movw	r0, #8218	; 0x201a
   1e300:	f7ff fcac 	bl	1dc5c <hciCmdAlloc>
   1e304:	9003      	str	r0, [sp, #12]
   1e306:	9b03      	ldr	r3, [sp, #12]
   1e308:	2b00      	cmp	r3, #0
   1e30a:	d01a      	beq.n	1e342 <HciLeLtkReqReplCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e30c:	9b03      	ldr	r3, [sp, #12]
   1e30e:	3303      	adds	r3, #3
   1e310:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e312:	9b02      	ldr	r3, [sp, #8]
   1e314:	1c5a      	adds	r2, r3, #1
   1e316:	9202      	str	r2, [sp, #8]
   1e318:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e31c:	b2d2      	uxtb	r2, r2
   1e31e:	701a      	strb	r2, [r3, #0]
   1e320:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e324:	0a1b      	lsrs	r3, r3, #8
   1e326:	b299      	uxth	r1, r3
   1e328:	9b02      	ldr	r3, [sp, #8]
   1e32a:	1c5a      	adds	r2, r3, #1
   1e32c:	9202      	str	r2, [sp, #8]
   1e32e:	b2ca      	uxtb	r2, r1
   1e330:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   1e332:	2210      	movs	r2, #16
   1e334:	9900      	ldr	r1, [sp, #0]
   1e336:	9802      	ldr	r0, [sp, #8]
   1e338:	f7ed fee2 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e33c:	9803      	ldr	r0, [sp, #12]
   1e33e:	f7ff fcc1 	bl	1dcc4 <hciCmdSend>
  }
}
   1e342:	bf00      	nop
   1e344:	b005      	add	sp, #20
   1e346:	f85d fb04 	ldr.w	pc, [sp], #4

0001e34a <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   1e34a:	b500      	push	{lr}
   1e34c:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   1e34e:	2100      	movs	r1, #0
   1e350:	f242 0018 	movw	r0, #8216	; 0x2018
   1e354:	f7ff fc82 	bl	1dc5c <hciCmdAlloc>
   1e358:	9001      	str	r0, [sp, #4]
   1e35a:	9b01      	ldr	r3, [sp, #4]
   1e35c:	2b00      	cmp	r3, #0
   1e35e:	d002      	beq.n	1e366 <HciLeRandCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e360:	9801      	ldr	r0, [sp, #4]
   1e362:	f7ff fcaf 	bl	1dcc4 <hciCmdSend>
  }
}
   1e366:	bf00      	nop
   1e368:	b003      	add	sp, #12
   1e36a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e36e <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   1e36e:	b500      	push	{lr}
   1e370:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   1e372:	2100      	movs	r1, #0
   1e374:	f242 0002 	movw	r0, #8194	; 0x2002
   1e378:	f7ff fc70 	bl	1dc5c <hciCmdAlloc>
   1e37c:	9001      	str	r0, [sp, #4]
   1e37e:	9b01      	ldr	r3, [sp, #4]
   1e380:	2b00      	cmp	r3, #0
   1e382:	d002      	beq.n	1e38a <HciLeReadBufSizeCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e384:	9801      	ldr	r0, [sp, #4]
   1e386:	f7ff fc9d 	bl	1dcc4 <hciCmdSend>
  }
}
   1e38a:	bf00      	nop
   1e38c:	b003      	add	sp, #12
   1e38e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e392 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   1e392:	b500      	push	{lr}
   1e394:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   1e396:	2100      	movs	r1, #0
   1e398:	f242 0003 	movw	r0, #8195	; 0x2003
   1e39c:	f7ff fc5e 	bl	1dc5c <hciCmdAlloc>
   1e3a0:	9001      	str	r0, [sp, #4]
   1e3a2:	9b01      	ldr	r3, [sp, #4]
   1e3a4:	2b00      	cmp	r3, #0
   1e3a6:	d002      	beq.n	1e3ae <HciLeReadLocalSupFeatCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e3a8:	9801      	ldr	r0, [sp, #4]
   1e3aa:	f7ff fc8b 	bl	1dcc4 <hciCmdSend>
  }
}
   1e3ae:	bf00      	nop
   1e3b0:	b003      	add	sp, #12
   1e3b2:	f85d fb04 	ldr.w	pc, [sp], #4

0001e3b6 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   1e3b6:	b500      	push	{lr}
   1e3b8:	b085      	sub	sp, #20
   1e3ba:	4603      	mov	r3, r0
   1e3bc:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   1e3c0:	2102      	movs	r1, #2
   1e3c2:	f242 0016 	movw	r0, #8214	; 0x2016
   1e3c6:	f7ff fc49 	bl	1dc5c <hciCmdAlloc>
   1e3ca:	9003      	str	r0, [sp, #12]
   1e3cc:	9b03      	ldr	r3, [sp, #12]
   1e3ce:	2b00      	cmp	r3, #0
   1e3d0:	d015      	beq.n	1e3fe <HciLeReadRemoteFeatCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e3d2:	9b03      	ldr	r3, [sp, #12]
   1e3d4:	3303      	adds	r3, #3
   1e3d6:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e3d8:	9b02      	ldr	r3, [sp, #8]
   1e3da:	1c5a      	adds	r2, r3, #1
   1e3dc:	9202      	str	r2, [sp, #8]
   1e3de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e3e2:	b2d2      	uxtb	r2, r2
   1e3e4:	701a      	strb	r2, [r3, #0]
   1e3e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e3ea:	0a1b      	lsrs	r3, r3, #8
   1e3ec:	b299      	uxth	r1, r3
   1e3ee:	9b02      	ldr	r3, [sp, #8]
   1e3f0:	1c5a      	adds	r2, r3, #1
   1e3f2:	9202      	str	r2, [sp, #8]
   1e3f4:	b2ca      	uxtb	r2, r1
   1e3f6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e3f8:	9803      	ldr	r0, [sp, #12]
   1e3fa:	f7ff fc63 	bl	1dcc4 <hciCmdSend>
  }
}
   1e3fe:	bf00      	nop
   1e400:	b005      	add	sp, #20
   1e402:	f85d fb04 	ldr.w	pc, [sp], #4

0001e406 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   1e406:	b500      	push	{lr}
   1e408:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   1e40a:	2100      	movs	r1, #0
   1e40c:	f242 001c 	movw	r0, #8220	; 0x201c
   1e410:	f7ff fc24 	bl	1dc5c <hciCmdAlloc>
   1e414:	9001      	str	r0, [sp, #4]
   1e416:	9b01      	ldr	r3, [sp, #4]
   1e418:	2b00      	cmp	r3, #0
   1e41a:	d002      	beq.n	1e422 <HciLeReadSupStatesCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e41c:	9801      	ldr	r0, [sp, #4]
   1e41e:	f7ff fc51 	bl	1dcc4 <hciCmdSend>
  }
}
   1e422:	bf00      	nop
   1e424:	b003      	add	sp, #12
   1e426:	f85d fb04 	ldr.w	pc, [sp], #4

0001e42a <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   1e42a:	b500      	push	{lr}
   1e42c:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   1e42e:	2100      	movs	r1, #0
   1e430:	f242 000f 	movw	r0, #8207	; 0x200f
   1e434:	f7ff fc12 	bl	1dc5c <hciCmdAlloc>
   1e438:	9001      	str	r0, [sp, #4]
   1e43a:	9b01      	ldr	r3, [sp, #4]
   1e43c:	2b00      	cmp	r3, #0
   1e43e:	d002      	beq.n	1e446 <HciLeReadWhiteListSizeCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e440:	9801      	ldr	r0, [sp, #4]
   1e442:	f7ff fc3f 	bl	1dcc4 <hciCmdSend>
  }
}
   1e446:	bf00      	nop
   1e448:	b003      	add	sp, #12
   1e44a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e44e <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   1e44e:	b500      	push	{lr}
   1e450:	b085      	sub	sp, #20
   1e452:	4603      	mov	r3, r0
   1e454:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   1e458:	2101      	movs	r1, #1
   1e45a:	f242 000a 	movw	r0, #8202	; 0x200a
   1e45e:	f7ff fbfd 	bl	1dc5c <hciCmdAlloc>
   1e462:	9003      	str	r0, [sp, #12]
   1e464:	9b03      	ldr	r3, [sp, #12]
   1e466:	2b00      	cmp	r3, #0
   1e468:	d00b      	beq.n	1e482 <HciLeSetAdvEnableCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e46a:	9b03      	ldr	r3, [sp, #12]
   1e46c:	3303      	adds	r3, #3
   1e46e:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, enable);
   1e470:	9b02      	ldr	r3, [sp, #8]
   1e472:	1c5a      	adds	r2, r3, #1
   1e474:	9202      	str	r2, [sp, #8]
   1e476:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e47a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e47c:	9803      	ldr	r0, [sp, #12]
   1e47e:	f7ff fc21 	bl	1dcc4 <hciCmdSend>
  }
}
   1e482:	bf00      	nop
   1e484:	b005      	add	sp, #20
   1e486:	f85d fb04 	ldr.w	pc, [sp], #4

0001e48a <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   1e48a:	b500      	push	{lr}
   1e48c:	b085      	sub	sp, #20
   1e48e:	4603      	mov	r3, r0
   1e490:	9100      	str	r1, [sp, #0]
   1e492:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   1e496:	2120      	movs	r1, #32
   1e498:	f242 0008 	movw	r0, #8200	; 0x2008
   1e49c:	f7ff fbde 	bl	1dc5c <hciCmdAlloc>
   1e4a0:	9003      	str	r0, [sp, #12]
   1e4a2:	9b03      	ldr	r3, [sp, #12]
   1e4a4:	2b00      	cmp	r3, #0
   1e4a6:	d020      	beq.n	1e4ea <HciLeSetAdvDataCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e4a8:	9b03      	ldr	r3, [sp, #12]
   1e4aa:	3303      	adds	r3, #3
   1e4ac:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, len);
   1e4ae:	9b02      	ldr	r3, [sp, #8]
   1e4b0:	1c5a      	adds	r2, r3, #1
   1e4b2:	9202      	str	r2, [sp, #8]
   1e4b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e4b8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1e4ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e4be:	461a      	mov	r2, r3
   1e4c0:	9900      	ldr	r1, [sp, #0]
   1e4c2:	9802      	ldr	r0, [sp, #8]
   1e4c4:	f7ed fe1c 	bl	c100 <memcpy>
    p += len;
   1e4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e4cc:	9a02      	ldr	r2, [sp, #8]
   1e4ce:	4413      	add	r3, r2
   1e4d0:	9302      	str	r3, [sp, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   1e4d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e4d6:	f1c3 031f 	rsb	r3, r3, #31
   1e4da:	461a      	mov	r2, r3
   1e4dc:	2100      	movs	r1, #0
   1e4de:	9802      	ldr	r0, [sp, #8]
   1e4e0:	f009 ffac 	bl	2843c <memset>
    hciCmdSend(pBuf);
   1e4e4:	9803      	ldr	r0, [sp, #12]
   1e4e6:	f7ff fbed 	bl	1dcc4 <hciCmdSend>
  }
}
   1e4ea:	bf00      	nop
   1e4ec:	b005      	add	sp, #20
   1e4ee:	f85d fb04 	ldr.w	pc, [sp], #4

0001e4f2 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   1e4f2:	b510      	push	{r4, lr}
   1e4f4:	b084      	sub	sp, #16
   1e4f6:	4604      	mov	r4, r0
   1e4f8:	4608      	mov	r0, r1
   1e4fa:	4611      	mov	r1, r2
   1e4fc:	461a      	mov	r2, r3
   1e4fe:	4623      	mov	r3, r4
   1e500:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e504:	4603      	mov	r3, r0
   1e506:	f8ad 3004 	strh.w	r3, [sp, #4]
   1e50a:	460b      	mov	r3, r1
   1e50c:	f88d 3003 	strb.w	r3, [sp, #3]
   1e510:	4613      	mov	r3, r2
   1e512:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   1e516:	210f      	movs	r1, #15
   1e518:	f242 0006 	movw	r0, #8198	; 0x2006
   1e51c:	f7ff fb9e 	bl	1dc5c <hciCmdAlloc>
   1e520:	9002      	str	r0, [sp, #8]
   1e522:	9b02      	ldr	r3, [sp, #8]
   1e524:	2b00      	cmp	r3, #0
   1e526:	d052      	beq.n	1e5ce <HciLeSetAdvParamCmd+0xdc>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e528:	9b02      	ldr	r3, [sp, #8]
   1e52a:	3303      	adds	r3, #3
   1e52c:	9303      	str	r3, [sp, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   1e52e:	9b03      	ldr	r3, [sp, #12]
   1e530:	1c5a      	adds	r2, r3, #1
   1e532:	9203      	str	r2, [sp, #12]
   1e534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e538:	b2d2      	uxtb	r2, r2
   1e53a:	701a      	strb	r2, [r3, #0]
   1e53c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e540:	0a1b      	lsrs	r3, r3, #8
   1e542:	b299      	uxth	r1, r3
   1e544:	9b03      	ldr	r3, [sp, #12]
   1e546:	1c5a      	adds	r2, r3, #1
   1e548:	9203      	str	r2, [sp, #12]
   1e54a:	b2ca      	uxtb	r2, r1
   1e54c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   1e54e:	9b03      	ldr	r3, [sp, #12]
   1e550:	1c5a      	adds	r2, r3, #1
   1e552:	9203      	str	r2, [sp, #12]
   1e554:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1e558:	b2d2      	uxtb	r2, r2
   1e55a:	701a      	strb	r2, [r3, #0]
   1e55c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e560:	0a1b      	lsrs	r3, r3, #8
   1e562:	b299      	uxth	r1, r3
   1e564:	9b03      	ldr	r3, [sp, #12]
   1e566:	1c5a      	adds	r2, r3, #1
   1e568:	9203      	str	r2, [sp, #12]
   1e56a:	b2ca      	uxtb	r2, r1
   1e56c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   1e56e:	9b03      	ldr	r3, [sp, #12]
   1e570:	1c5a      	adds	r2, r3, #1
   1e572:	9203      	str	r2, [sp, #12]
   1e574:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1e578:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   1e57a:	9b03      	ldr	r3, [sp, #12]
   1e57c:	1c5a      	adds	r2, r3, #1
   1e57e:	9203      	str	r2, [sp, #12]
   1e580:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1e584:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1e586:	9b03      	ldr	r3, [sp, #12]
   1e588:	1c5a      	adds	r2, r3, #1
   1e58a:	9203      	str	r2, [sp, #12]
   1e58c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1e590:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   1e592:	9b07      	ldr	r3, [sp, #28]
   1e594:	2b00      	cmp	r3, #0
   1e596:	d007      	beq.n	1e5a8 <HciLeSetAdvParamCmd+0xb6>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   1e598:	9907      	ldr	r1, [sp, #28]
   1e59a:	9803      	ldr	r0, [sp, #12]
   1e59c:	f7f5 ff84 	bl	144a8 <BdaCpy>
   1e5a0:	9b03      	ldr	r3, [sp, #12]
   1e5a2:	3306      	adds	r3, #6
   1e5a4:	9303      	str	r3, [sp, #12]
   1e5a6:	e003      	b.n	1e5b0 <HciLeSetAdvParamCmd+0xbe>
    }
    else
    {
      p = BdaClr(p);
   1e5a8:	9803      	ldr	r0, [sp, #12]
   1e5aa:	f7f5 ff9d 	bl	144e8 <BdaClr>
   1e5ae:	9003      	str	r0, [sp, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   1e5b0:	9b03      	ldr	r3, [sp, #12]
   1e5b2:	1c5a      	adds	r2, r3, #1
   1e5b4:	9203      	str	r2, [sp, #12]
   1e5b6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e5ba:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   1e5bc:	9b03      	ldr	r3, [sp, #12]
   1e5be:	1c5a      	adds	r2, r3, #1
   1e5c0:	9203      	str	r2, [sp, #12]
   1e5c2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1e5c6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e5c8:	9802      	ldr	r0, [sp, #8]
   1e5ca:	f7ff fb7b 	bl	1dcc4 <hciCmdSend>
  }
}
   1e5ce:	bf00      	nop
   1e5d0:	b004      	add	sp, #16
   1e5d2:	bd10      	pop	{r4, pc}

0001e5d4 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   1e5d4:	b500      	push	{lr}
   1e5d6:	b085      	sub	sp, #20
   1e5d8:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   1e5da:	2108      	movs	r1, #8
   1e5dc:	f242 0001 	movw	r0, #8193	; 0x2001
   1e5e0:	f7ff fb3c 	bl	1dc5c <hciCmdAlloc>
   1e5e4:	9003      	str	r0, [sp, #12]
   1e5e6:	9b03      	ldr	r3, [sp, #12]
   1e5e8:	2b00      	cmp	r3, #0
   1e5ea:	d00a      	beq.n	1e602 <HciLeSetEventMaskCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e5ec:	9b03      	ldr	r3, [sp, #12]
   1e5ee:	3303      	adds	r3, #3
   1e5f0:	9302      	str	r3, [sp, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   1e5f2:	2208      	movs	r2, #8
   1e5f4:	9901      	ldr	r1, [sp, #4]
   1e5f6:	9802      	ldr	r0, [sp, #8]
   1e5f8:	f7ed fd82 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e5fc:	9803      	ldr	r0, [sp, #12]
   1e5fe:	f7ff fb61 	bl	1dcc4 <hciCmdSend>
  }
}
   1e602:	bf00      	nop
   1e604:	b005      	add	sp, #20
   1e606:	f85d fb04 	ldr.w	pc, [sp], #4

0001e60a <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   1e60a:	b500      	push	{lr}
   1e60c:	b085      	sub	sp, #20
   1e60e:	4603      	mov	r3, r0
   1e610:	9100      	str	r1, [sp, #0]
   1e612:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   1e616:	2120      	movs	r1, #32
   1e618:	f242 0009 	movw	r0, #8201	; 0x2009
   1e61c:	f7ff fb1e 	bl	1dc5c <hciCmdAlloc>
   1e620:	9003      	str	r0, [sp, #12]
   1e622:	9b03      	ldr	r3, [sp, #12]
   1e624:	2b00      	cmp	r3, #0
   1e626:	d020      	beq.n	1e66a <HciLeSetScanRespDataCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e628:	9b03      	ldr	r3, [sp, #12]
   1e62a:	3303      	adds	r3, #3
   1e62c:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, len);
   1e62e:	9b02      	ldr	r3, [sp, #8]
   1e630:	1c5a      	adds	r2, r3, #1
   1e632:	9202      	str	r2, [sp, #8]
   1e634:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e638:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1e63a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e63e:	461a      	mov	r2, r3
   1e640:	9900      	ldr	r1, [sp, #0]
   1e642:	9802      	ldr	r0, [sp, #8]
   1e644:	f7ed fd5c 	bl	c100 <memcpy>
    p += len;
   1e648:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e64c:	9a02      	ldr	r2, [sp, #8]
   1e64e:	4413      	add	r3, r2
   1e650:	9302      	str	r3, [sp, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   1e652:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e656:	f1c3 031f 	rsb	r3, r3, #31
   1e65a:	461a      	mov	r2, r3
   1e65c:	2100      	movs	r1, #0
   1e65e:	9802      	ldr	r0, [sp, #8]
   1e660:	f009 feec 	bl	2843c <memset>
    hciCmdSend(pBuf);
   1e664:	9803      	ldr	r0, [sp, #12]
   1e666:	f7ff fb2d 	bl	1dcc4 <hciCmdSend>
  }
}
   1e66a:	bf00      	nop
   1e66c:	b005      	add	sp, #20
   1e66e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e672 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   1e672:	b500      	push	{lr}
   1e674:	b087      	sub	sp, #28
   1e676:	9102      	str	r1, [sp, #8]
   1e678:	9301      	str	r3, [sp, #4]
   1e67a:	4603      	mov	r3, r0
   1e67c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1e680:	4613      	mov	r3, r2
   1e682:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   1e686:	211c      	movs	r1, #28
   1e688:	f242 0019 	movw	r0, #8217	; 0x2019
   1e68c:	f7ff fae6 	bl	1dc5c <hciCmdAlloc>
   1e690:	9005      	str	r0, [sp, #20]
   1e692:	9b05      	ldr	r3, [sp, #20]
   1e694:	2b00      	cmp	r3, #0
   1e696:	d032      	beq.n	1e6fe <HciLeStartEncryptionCmd+0x8c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e698:	9b05      	ldr	r3, [sp, #20]
   1e69a:	3303      	adds	r3, #3
   1e69c:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, handle);
   1e69e:	9b04      	ldr	r3, [sp, #16]
   1e6a0:	1c5a      	adds	r2, r3, #1
   1e6a2:	9204      	str	r2, [sp, #16]
   1e6a4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1e6a8:	b2d2      	uxtb	r2, r2
   1e6aa:	701a      	strb	r2, [r3, #0]
   1e6ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e6b0:	0a1b      	lsrs	r3, r3, #8
   1e6b2:	b299      	uxth	r1, r3
   1e6b4:	9b04      	ldr	r3, [sp, #16]
   1e6b6:	1c5a      	adds	r2, r3, #1
   1e6b8:	9204      	str	r2, [sp, #16]
   1e6ba:	b2ca      	uxtb	r2, r1
   1e6bc:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   1e6be:	2208      	movs	r2, #8
   1e6c0:	9902      	ldr	r1, [sp, #8]
   1e6c2:	9804      	ldr	r0, [sp, #16]
   1e6c4:	f7ed fd1c 	bl	c100 <memcpy>
    p += HCI_RAND_LEN;
   1e6c8:	9b04      	ldr	r3, [sp, #16]
   1e6ca:	3308      	adds	r3, #8
   1e6cc:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   1e6ce:	9b04      	ldr	r3, [sp, #16]
   1e6d0:	1c5a      	adds	r2, r3, #1
   1e6d2:	9204      	str	r2, [sp, #16]
   1e6d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1e6d8:	b2d2      	uxtb	r2, r2
   1e6da:	701a      	strb	r2, [r3, #0]
   1e6dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e6e0:	0a1b      	lsrs	r3, r3, #8
   1e6e2:	b299      	uxth	r1, r3
   1e6e4:	9b04      	ldr	r3, [sp, #16]
   1e6e6:	1c5a      	adds	r2, r3, #1
   1e6e8:	9204      	str	r2, [sp, #16]
   1e6ea:	b2ca      	uxtb	r2, r1
   1e6ec:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   1e6ee:	2210      	movs	r2, #16
   1e6f0:	9901      	ldr	r1, [sp, #4]
   1e6f2:	9804      	ldr	r0, [sp, #16]
   1e6f4:	f7ed fd04 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e6f8:	9805      	ldr	r0, [sp, #20]
   1e6fa:	f7ff fae3 	bl	1dcc4 <hciCmdSend>
  }
}
   1e6fe:	bf00      	nop
   1e700:	b007      	add	sp, #28
   1e702:	f85d fb04 	ldr.w	pc, [sp], #4

0001e706 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   1e706:	b500      	push	{lr}
   1e708:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   1e70a:	2100      	movs	r1, #0
   1e70c:	f241 0009 	movw	r0, #4105	; 0x1009
   1e710:	f7ff faa4 	bl	1dc5c <hciCmdAlloc>
   1e714:	9001      	str	r0, [sp, #4]
   1e716:	9b01      	ldr	r3, [sp, #4]
   1e718:	2b00      	cmp	r3, #0
   1e71a:	d002      	beq.n	1e722 <HciReadBdAddrCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e71c:	9801      	ldr	r0, [sp, #4]
   1e71e:	f7ff fad1 	bl	1dcc4 <hciCmdSend>
  }
}
   1e722:	bf00      	nop
   1e724:	b003      	add	sp, #12
   1e726:	f85d fb04 	ldr.w	pc, [sp], #4

0001e72a <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   1e72a:	b500      	push	{lr}
   1e72c:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   1e72e:	2100      	movs	r1, #0
   1e730:	f241 0001 	movw	r0, #4097	; 0x1001
   1e734:	f7ff fa92 	bl	1dc5c <hciCmdAlloc>
   1e738:	9001      	str	r0, [sp, #4]
   1e73a:	9b01      	ldr	r3, [sp, #4]
   1e73c:	2b00      	cmp	r3, #0
   1e73e:	d002      	beq.n	1e746 <HciReadLocalVerInfoCmd+0x1c>
  {
    hciCmdSend(pBuf);
   1e740:	9801      	ldr	r0, [sp, #4]
   1e742:	f7ff fabf 	bl	1dcc4 <hciCmdSend>
  }
}
   1e746:	bf00      	nop
   1e748:	b003      	add	sp, #12
   1e74a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e74e <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   1e74e:	b500      	push	{lr}
   1e750:	b085      	sub	sp, #20
   1e752:	4603      	mov	r3, r0
   1e754:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   1e758:	2102      	movs	r1, #2
   1e75a:	f241 4005 	movw	r0, #5125	; 0x1405
   1e75e:	f7ff fa7d 	bl	1dc5c <hciCmdAlloc>
   1e762:	9003      	str	r0, [sp, #12]
   1e764:	9b03      	ldr	r3, [sp, #12]
   1e766:	2b00      	cmp	r3, #0
   1e768:	d015      	beq.n	1e796 <HciReadRssiCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e76a:	9b03      	ldr	r3, [sp, #12]
   1e76c:	3303      	adds	r3, #3
   1e76e:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e770:	9b02      	ldr	r3, [sp, #8]
   1e772:	1c5a      	adds	r2, r3, #1
   1e774:	9202      	str	r2, [sp, #8]
   1e776:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e77a:	b2d2      	uxtb	r2, r2
   1e77c:	701a      	strb	r2, [r3, #0]
   1e77e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e782:	0a1b      	lsrs	r3, r3, #8
   1e784:	b299      	uxth	r1, r3
   1e786:	9b02      	ldr	r3, [sp, #8]
   1e788:	1c5a      	adds	r2, r3, #1
   1e78a:	9202      	str	r2, [sp, #8]
   1e78c:	b2ca      	uxtb	r2, r1
   1e78e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e790:	9803      	ldr	r0, [sp, #12]
   1e792:	f7ff fa97 	bl	1dcc4 <hciCmdSend>
  }
}
   1e796:	bf00      	nop
   1e798:	b005      	add	sp, #20
   1e79a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e7a0 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   1e7a0:	b500      	push	{lr}
   1e7a2:	b085      	sub	sp, #20
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   1e7a4:	2314      	movs	r3, #20
   1e7a6:	f88d 3006 	strb.w	r3, [sp, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   1e7aa:	4b13      	ldr	r3, [pc, #76]	; (1e7f8 <HciResetCmd+0x58>)
   1e7ac:	68db      	ldr	r3, [r3, #12]
   1e7ae:	aa01      	add	r2, sp, #4
   1e7b0:	4610      	mov	r0, r2
   1e7b2:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1e7b4:	e002      	b.n	1e7bc <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   1e7b6:	9803      	ldr	r0, [sp, #12]
   1e7b8:	f7ee fcf4 	bl	d1a4 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1e7bc:	f10d 030b 	add.w	r3, sp, #11
   1e7c0:	4619      	mov	r1, r3
   1e7c2:	480e      	ldr	r0, [pc, #56]	; (1e7fc <HciResetCmd+0x5c>)
   1e7c4:	f7ee fd2b 	bl	d21e <WsfMsgDeq>
   1e7c8:	9003      	str	r0, [sp, #12]
   1e7ca:	9b03      	ldr	r3, [sp, #12]
   1e7cc:	2b00      	cmp	r3, #0
   1e7ce:	d1f2      	bne.n	1e7b6 <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   1e7d0:	4b0b      	ldr	r3, [pc, #44]	; (1e800 <HciResetCmd+0x60>)
   1e7d2:	2201      	movs	r2, #1
   1e7d4:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   1e7d6:	2100      	movs	r1, #0
   1e7d8:	f640 4003 	movw	r0, #3075	; 0xc03
   1e7dc:	f7ff fa3e 	bl	1dc5c <hciCmdAlloc>
   1e7e0:	9003      	str	r0, [sp, #12]
   1e7e2:	9b03      	ldr	r3, [sp, #12]
   1e7e4:	2b00      	cmp	r3, #0
   1e7e6:	d002      	beq.n	1e7ee <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   1e7e8:	9803      	ldr	r0, [sp, #12]
   1e7ea:	f7ff fa6b 	bl	1dcc4 <hciCmdSend>
  }
}
   1e7ee:	bf00      	nop
   1e7f0:	b005      	add	sp, #20
   1e7f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e7f6:	bf00      	nop
   1e7f8:	1000973c 	.word	0x1000973c
   1e7fc:	10009768 	.word	0x10009768
   1e800:	10009758 	.word	0x10009758

0001e804 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   1e804:	b500      	push	{lr}
   1e806:	b085      	sub	sp, #20
   1e808:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   1e80a:	2108      	movs	r1, #8
   1e80c:	f640 4001 	movw	r0, #3073	; 0xc01
   1e810:	f7ff fa24 	bl	1dc5c <hciCmdAlloc>
   1e814:	9003      	str	r0, [sp, #12]
   1e816:	9b03      	ldr	r3, [sp, #12]
   1e818:	2b00      	cmp	r3, #0
   1e81a:	d00a      	beq.n	1e832 <HciSetEventMaskCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e81c:	9b03      	ldr	r3, [sp, #12]
   1e81e:	3303      	adds	r3, #3
   1e820:	9302      	str	r3, [sp, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   1e822:	2208      	movs	r2, #8
   1e824:	9901      	ldr	r1, [sp, #4]
   1e826:	9802      	ldr	r0, [sp, #8]
   1e828:	f7ed fc6a 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e82c:	9803      	ldr	r0, [sp, #12]
   1e82e:	f7ff fa49 	bl	1dcc4 <hciCmdSend>
  }
}
   1e832:	bf00      	nop
   1e834:	b005      	add	sp, #20
   1e836:	f85d fb04 	ldr.w	pc, [sp], #4

0001e83a <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   1e83a:	b500      	push	{lr}
   1e83c:	b085      	sub	sp, #20
   1e83e:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   1e840:	2108      	movs	r1, #8
   1e842:	f640 4063 	movw	r0, #3171	; 0xc63
   1e846:	f7ff fa09 	bl	1dc5c <hciCmdAlloc>
   1e84a:	9003      	str	r0, [sp, #12]
   1e84c:	9b03      	ldr	r3, [sp, #12]
   1e84e:	2b00      	cmp	r3, #0
   1e850:	d00a      	beq.n	1e868 <HciSetEventMaskPage2Cmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e852:	9b03      	ldr	r3, [sp, #12]
   1e854:	3303      	adds	r3, #3
   1e856:	9302      	str	r3, [sp, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   1e858:	2208      	movs	r2, #8
   1e85a:	9901      	ldr	r1, [sp, #4]
   1e85c:	9802      	ldr	r0, [sp, #8]
   1e85e:	f7ed fc4f 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e862:	9803      	ldr	r0, [sp, #12]
   1e864:	f7ff fa2e 	bl	1dcc4 <hciCmdSend>
  }
}
   1e868:	bf00      	nop
   1e86a:	b005      	add	sp, #20
   1e86c:	f85d fb04 	ldr.w	pc, [sp], #4

0001e870 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   1e870:	b500      	push	{lr}
   1e872:	b085      	sub	sp, #20
   1e874:	4603      	mov	r3, r0
   1e876:	460a      	mov	r2, r1
   1e878:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e87c:	4613      	mov	r3, r2
   1e87e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   1e882:	2104      	movs	r1, #4
   1e884:	f640 407c 	movw	r0, #3196	; 0xc7c
   1e888:	f7ff f9e8 	bl	1dc5c <hciCmdAlloc>
   1e88c:	9003      	str	r0, [sp, #12]
   1e88e:	9b03      	ldr	r3, [sp, #12]
   1e890:	2b00      	cmp	r3, #0
   1e892:	d025      	beq.n	1e8e0 <HciWriteAuthPayloadTimeout+0x70>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e894:	9b03      	ldr	r3, [sp, #12]
   1e896:	3303      	adds	r3, #3
   1e898:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
   1e89a:	9b02      	ldr	r3, [sp, #8]
   1e89c:	1c5a      	adds	r2, r3, #1
   1e89e:	9202      	str	r2, [sp, #8]
   1e8a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e8a4:	b2d2      	uxtb	r2, r2
   1e8a6:	701a      	strb	r2, [r3, #0]
   1e8a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e8ac:	0a1b      	lsrs	r3, r3, #8
   1e8ae:	b299      	uxth	r1, r3
   1e8b0:	9b02      	ldr	r3, [sp, #8]
   1e8b2:	1c5a      	adds	r2, r3, #1
   1e8b4:	9202      	str	r2, [sp, #8]
   1e8b6:	b2ca      	uxtb	r2, r1
   1e8b8:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1e8ba:	9b02      	ldr	r3, [sp, #8]
   1e8bc:	1c5a      	adds	r2, r3, #1
   1e8be:	9202      	str	r2, [sp, #8]
   1e8c0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1e8c4:	b2d2      	uxtb	r2, r2
   1e8c6:	701a      	strb	r2, [r3, #0]
   1e8c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e8cc:	0a1b      	lsrs	r3, r3, #8
   1e8ce:	b299      	uxth	r1, r3
   1e8d0:	9b02      	ldr	r3, [sp, #8]
   1e8d2:	1c5a      	adds	r2, r3, #1
   1e8d4:	9202      	str	r2, [sp, #8]
   1e8d6:	b2ca      	uxtb	r2, r1
   1e8d8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1e8da:	9803      	ldr	r0, [sp, #12]
   1e8dc:	f7ff f9f2 	bl	1dcc4 <hciCmdSend>
  }
}
   1e8e0:	bf00      	nop
   1e8e2:	b005      	add	sp, #20
   1e8e4:	f85d fb04 	ldr.w	pc, [sp], #4

0001e8e8 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   1e8e8:	b500      	push	{lr}
   1e8ea:	b087      	sub	sp, #28
   1e8ec:	9102      	str	r1, [sp, #8]
   1e8ee:	9201      	str	r2, [sp, #4]
   1e8f0:	9300      	str	r3, [sp, #0]
   1e8f2:	4603      	mov	r3, r0
   1e8f4:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   1e8f8:	2127      	movs	r1, #39	; 0x27
   1e8fa:	f242 0027 	movw	r0, #8231	; 0x2027
   1e8fe:	f7ff f9ad 	bl	1dc5c <hciCmdAlloc>
   1e902:	9005      	str	r0, [sp, #20]
   1e904:	9b05      	ldr	r3, [sp, #20]
   1e906:	2b00      	cmp	r3, #0
   1e908:	d01f      	beq.n	1e94a <HciLeAddDeviceToResolvingListCmd+0x62>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e90a:	9b05      	ldr	r3, [sp, #20]
   1e90c:	3303      	adds	r3, #3
   1e90e:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1e910:	9b04      	ldr	r3, [sp, #16]
   1e912:	1c5a      	adds	r2, r3, #1
   1e914:	9204      	str	r2, [sp, #16]
   1e916:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1e91a:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1e91c:	9902      	ldr	r1, [sp, #8]
   1e91e:	9804      	ldr	r0, [sp, #16]
   1e920:	f7f5 fdc2 	bl	144a8 <BdaCpy>
   1e924:	9b04      	ldr	r3, [sp, #16]
   1e926:	3306      	adds	r3, #6
   1e928:	9304      	str	r3, [sp, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   1e92a:	2210      	movs	r2, #16
   1e92c:	9901      	ldr	r1, [sp, #4]
   1e92e:	9804      	ldr	r0, [sp, #16]
   1e930:	f7ed fbe6 	bl	c100 <memcpy>
    p += HCI_KEY_LEN;
   1e934:	9b04      	ldr	r3, [sp, #16]
   1e936:	3310      	adds	r3, #16
   1e938:	9304      	str	r3, [sp, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   1e93a:	2210      	movs	r2, #16
   1e93c:	9900      	ldr	r1, [sp, #0]
   1e93e:	9804      	ldr	r0, [sp, #16]
   1e940:	f7ed fbde 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1e944:	9805      	ldr	r0, [sp, #20]
   1e946:	f7ff f9bd 	bl	1dcc4 <hciCmdSend>
  }
}
   1e94a:	bf00      	nop
   1e94c:	b007      	add	sp, #28
   1e94e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e952 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   1e952:	b500      	push	{lr}
   1e954:	b085      	sub	sp, #20
   1e956:	4603      	mov	r3, r0
   1e958:	9100      	str	r1, [sp, #0]
   1e95a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   1e95e:	2107      	movs	r1, #7
   1e960:	f242 0028 	movw	r0, #8232	; 0x2028
   1e964:	f7ff f97a 	bl	1dc5c <hciCmdAlloc>
   1e968:	9003      	str	r0, [sp, #12]
   1e96a:	9b03      	ldr	r3, [sp, #12]
   1e96c:	2b00      	cmp	r3, #0
   1e96e:	d012      	beq.n	1e996 <HciLeRemoveDeviceFromResolvingList+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1e970:	9b03      	ldr	r3, [sp, #12]
   1e972:	3303      	adds	r3, #3
   1e974:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1e976:	9b02      	ldr	r3, [sp, #8]
   1e978:	1c5a      	adds	r2, r3, #1
   1e97a:	9202      	str	r2, [sp, #8]
   1e97c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e980:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1e982:	9900      	ldr	r1, [sp, #0]
   1e984:	9802      	ldr	r0, [sp, #8]
   1e986:	f7f5 fd8f 	bl	144a8 <BdaCpy>
   1e98a:	9b02      	ldr	r3, [sp, #8]
   1e98c:	3306      	adds	r3, #6
   1e98e:	9302      	str	r3, [sp, #8]
    hciCmdSend(pBuf);
   1e990:	9803      	ldr	r0, [sp, #12]
   1e992:	f7ff f997 	bl	1dcc4 <hciCmdSend>
  }
}
   1e996:	bf00      	nop
   1e998:	b005      	add	sp, #20
   1e99a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e99e <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   1e99e:	b500      	push	{lr}
   1e9a0:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   1e9a2:	2100      	movs	r1, #0
   1e9a4:	f242 0029 	movw	r0, #8233	; 0x2029
   1e9a8:	f7ff f958 	bl	1dc5c <hciCmdAlloc>
   1e9ac:	9001      	str	r0, [sp, #4]
   1e9ae:	9b01      	ldr	r3, [sp, #4]
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d002      	beq.n	1e9ba <HciLeClearResolvingList+0x1c>
  {
    hciCmdSend(pBuf);
   1e9b4:	9801      	ldr	r0, [sp, #4]
   1e9b6:	f7ff f985 	bl	1dcc4 <hciCmdSend>
  }
}
   1e9ba:	bf00      	nop
   1e9bc:	b003      	add	sp, #12
   1e9be:	f85d fb04 	ldr.w	pc, [sp], #4

0001e9c2 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   1e9c2:	b500      	push	{lr}
   1e9c4:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   1e9c6:	2100      	movs	r1, #0
   1e9c8:	f242 002a 	movw	r0, #8234	; 0x202a
   1e9cc:	f7ff f946 	bl	1dc5c <hciCmdAlloc>
   1e9d0:	9001      	str	r0, [sp, #4]
   1e9d2:	9b01      	ldr	r3, [sp, #4]
   1e9d4:	2b00      	cmp	r3, #0
   1e9d6:	d002      	beq.n	1e9de <HciLeReadResolvingListSize+0x1c>
  {
    hciCmdSend(pBuf);
   1e9d8:	9801      	ldr	r0, [sp, #4]
   1e9da:	f7ff f973 	bl	1dcc4 <hciCmdSend>
  }
}
   1e9de:	bf00      	nop
   1e9e0:	b003      	add	sp, #12
   1e9e2:	f85d fb04 	ldr.w	pc, [sp], #4

0001e9e6 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   1e9e6:	b500      	push	{lr}
   1e9e8:	b085      	sub	sp, #20
   1e9ea:	4603      	mov	r3, r0
   1e9ec:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   1e9f0:	2101      	movs	r1, #1
   1e9f2:	f242 002d 	movw	r0, #8237	; 0x202d
   1e9f6:	f7ff f931 	bl	1dc5c <hciCmdAlloc>
   1e9fa:	9003      	str	r0, [sp, #12]
   1e9fc:	9b03      	ldr	r3, [sp, #12]
   1e9fe:	2b00      	cmp	r3, #0
   1ea00:	d00b      	beq.n	1ea1a <HciLeSetAddrResolutionEnable+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1ea02:	9b03      	ldr	r3, [sp, #12]
   1ea04:	3303      	adds	r3, #3
   1ea06:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, enable);
   1ea08:	9b02      	ldr	r3, [sp, #8]
   1ea0a:	1c5a      	adds	r2, r3, #1
   1ea0c:	9202      	str	r2, [sp, #8]
   1ea0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1ea12:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1ea14:	9803      	ldr	r0, [sp, #12]
   1ea16:	f7ff f955 	bl	1dcc4 <hciCmdSend>
  }
}
   1ea1a:	bf00      	nop
   1ea1c:	b005      	add	sp, #20
   1ea1e:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea22 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   1ea22:	b500      	push	{lr}
   1ea24:	b085      	sub	sp, #20
   1ea26:	4603      	mov	r3, r0
   1ea28:	9100      	str	r1, [sp, #0]
   1ea2a:	f88d 3007 	strb.w	r3, [sp, #7]
   1ea2e:	4613      	mov	r3, r2
   1ea30:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   1ea34:	2108      	movs	r1, #8
   1ea36:	f242 004e 	movw	r0, #8270	; 0x204e
   1ea3a:	f7ff f90f 	bl	1dc5c <hciCmdAlloc>
   1ea3e:	9003      	str	r0, [sp, #12]
   1ea40:	9b03      	ldr	r3, [sp, #12]
   1ea42:	2b00      	cmp	r3, #0
   1ea44:	d018      	beq.n	1ea78 <HciLeSetPrivacyModeCmd+0x56>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1ea46:	9b03      	ldr	r3, [sp, #12]
   1ea48:	3303      	adds	r3, #3
   1ea4a:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1ea4c:	9b02      	ldr	r3, [sp, #8]
   1ea4e:	1c5a      	adds	r2, r3, #1
   1ea50:	9202      	str	r2, [sp, #8]
   1ea52:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1ea56:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   1ea58:	9900      	ldr	r1, [sp, #0]
   1ea5a:	9802      	ldr	r0, [sp, #8]
   1ea5c:	f7f5 fd24 	bl	144a8 <BdaCpy>
   1ea60:	9b02      	ldr	r3, [sp, #8]
   1ea62:	3306      	adds	r3, #6
   1ea64:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, mode);
   1ea66:	9b02      	ldr	r3, [sp, #8]
   1ea68:	1c5a      	adds	r2, r3, #1
   1ea6a:	9202      	str	r2, [sp, #8]
   1ea6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1ea70:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1ea72:	9803      	ldr	r0, [sp, #12]
   1ea74:	f7ff f926 	bl	1dcc4 <hciCmdSend>
  }
}
   1ea78:	bf00      	nop
   1ea7a:	b005      	add	sp, #20
   1ea7c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea80 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   1ea80:	b500      	push	{lr}
   1ea82:	b085      	sub	sp, #20
   1ea84:	4603      	mov	r3, r0
   1ea86:	9200      	str	r2, [sp, #0]
   1ea88:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ea8c:	460b      	mov	r3, r1
   1ea8e:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   1ea92:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1ea96:	b29a      	uxth	r2, r3
   1ea98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ea9c:	4611      	mov	r1, r2
   1ea9e:	4618      	mov	r0, r3
   1eaa0:	f7ff f8dc 	bl	1dc5c <hciCmdAlloc>
   1eaa4:	9003      	str	r0, [sp, #12]
   1eaa6:	9b03      	ldr	r3, [sp, #12]
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d00c      	beq.n	1eac6 <HciVendorSpecificCmd+0x46>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1eaac:	9b03      	ldr	r3, [sp, #12]
   1eaae:	3303      	adds	r3, #3
   1eab0:	9302      	str	r3, [sp, #8]
    memcpy(p, pData, len);
   1eab2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1eab6:	461a      	mov	r2, r3
   1eab8:	9900      	ldr	r1, [sp, #0]
   1eaba:	9802      	ldr	r0, [sp, #8]
   1eabc:	f7ed fb20 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   1eac0:	9803      	ldr	r0, [sp, #12]
   1eac2:	f7ff f8ff 	bl	1dcc4 <hciCmdSend>
  }
}
   1eac6:	bf00      	nop
   1eac8:	b005      	add	sp, #20
   1eaca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001ead0 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   1ead0:	b084      	sub	sp, #16
   1ead2:	4603      	mov	r3, r0
   1ead4:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1ead8:	4b13      	ldr	r3, [pc, #76]	; (1eb28 <hciCoreConnAlloc+0x58>)
   1eada:	9302      	str	r3, [sp, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1eadc:	2303      	movs	r3, #3
   1eade:	f88d 300f 	strb.w	r3, [sp, #15]
   1eae2:	e01b      	b.n	1eb1c <hciCoreConnAlloc+0x4c>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   1eae4:	9b02      	ldr	r3, [sp, #8]
   1eae6:	8a1b      	ldrh	r3, [r3, #16]
   1eae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1eaec:	4293      	cmp	r3, r2
   1eaee:	d10d      	bne.n	1eb0c <hciCoreConnAlloc+0x3c>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   1eaf0:	9b02      	ldr	r3, [sp, #8]
   1eaf2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1eaf6:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   1eaf8:	9b02      	ldr	r3, [sp, #8]
   1eafa:	2200      	movs	r2, #0
   1eafc:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   1eafe:	9b02      	ldr	r3, [sp, #8]
   1eb00:	2200      	movs	r2, #0
   1eb02:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   1eb04:	9b02      	ldr	r3, [sp, #8]
   1eb06:	2200      	movs	r2, #0
   1eb08:	761a      	strb	r2, [r3, #24]

      return;
   1eb0a:	e00b      	b.n	1eb24 <hciCoreConnAlloc+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1eb0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1eb10:	3b01      	subs	r3, #1
   1eb12:	f88d 300f 	strb.w	r3, [sp, #15]
   1eb16:	9b02      	ldr	r3, [sp, #8]
   1eb18:	331c      	adds	r3, #28
   1eb1a:	9302      	str	r3, [sp, #8]
   1eb1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1eb20:	2b00      	cmp	r3, #0
   1eb22:	d1df      	bne.n	1eae4 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   1eb24:	b004      	add	sp, #16
   1eb26:	4770      	bx	lr
   1eb28:	10009774 	.word	0x10009774

0001eb2c <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   1eb2c:	b500      	push	{lr}
   1eb2e:	b085      	sub	sp, #20
   1eb30:	4603      	mov	r3, r0
   1eb32:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1eb36:	4b20      	ldr	r3, [pc, #128]	; (1ebb8 <hciCoreConnFree+0x8c>)
   1eb38:	9302      	str	r3, [sp, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1eb3a:	2303      	movs	r3, #3
   1eb3c:	f88d 300f 	strb.w	r3, [sp, #15]
   1eb40:	e032      	b.n	1eba8 <hciCoreConnFree+0x7c>
  {
    if (pConn->handle == handle)
   1eb42:	9b02      	ldr	r3, [sp, #8]
   1eb44:	8a1b      	ldrh	r3, [r3, #16]
   1eb46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1eb4a:	429a      	cmp	r2, r3
   1eb4c:	d124      	bne.n	1eb98 <hciCoreConnFree+0x6c>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   1eb4e:	9b02      	ldr	r3, [sp, #8]
   1eb50:	681b      	ldr	r3, [r3, #0]
   1eb52:	2b00      	cmp	r3, #0
   1eb54:	d007      	beq.n	1eb66 <hciCoreConnFree+0x3a>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   1eb56:	9b02      	ldr	r3, [sp, #8]
   1eb58:	681b      	ldr	r3, [r3, #0]
   1eb5a:	4618      	mov	r0, r3
   1eb5c:	f7ee fb22 	bl	d1a4 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   1eb60:	9b02      	ldr	r3, [sp, #8]
   1eb62:	2200      	movs	r2, #0
   1eb64:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   1eb66:	9b02      	ldr	r3, [sp, #8]
   1eb68:	2200      	movs	r2, #0
   1eb6a:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   1eb6c:	9b02      	ldr	r3, [sp, #8]
   1eb6e:	689b      	ldr	r3, [r3, #8]
   1eb70:	2b00      	cmp	r3, #0
   1eb72:	d007      	beq.n	1eb84 <hciCoreConnFree+0x58>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   1eb74:	9b02      	ldr	r3, [sp, #8]
   1eb76:	689b      	ldr	r3, [r3, #8]
   1eb78:	4618      	mov	r0, r3
   1eb7a:	f7ee fb13 	bl	d1a4 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1eb7e:	9b02      	ldr	r3, [sp, #8]
   1eb80:	2200      	movs	r2, #0
   1eb82:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   1eb84:	9b02      	ldr	r3, [sp, #8]
   1eb86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1eb8a:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   1eb8c:	9b02      	ldr	r3, [sp, #8]
   1eb8e:	7e5b      	ldrb	r3, [r3, #25]
   1eb90:	4618      	mov	r0, r3
   1eb92:	f000 f89b 	bl	1eccc <hciCoreTxReady>

      return;
   1eb96:	e00b      	b.n	1ebb0 <hciCoreConnFree+0x84>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1eb98:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1eb9c:	3b01      	subs	r3, #1
   1eb9e:	f88d 300f 	strb.w	r3, [sp, #15]
   1eba2:	9b02      	ldr	r3, [sp, #8]
   1eba4:	331c      	adds	r3, #28
   1eba6:	9302      	str	r3, [sp, #8]
   1eba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ebac:	2b00      	cmp	r3, #0
   1ebae:	d1c8      	bne.n	1eb42 <hciCoreConnFree+0x16>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   1ebb0:	b005      	add	sp, #20
   1ebb2:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebb6:	bf00      	nop
   1ebb8:	10009774 	.word	0x10009774

0001ebbc <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   1ebbc:	b084      	sub	sp, #16
   1ebbe:	4603      	mov	r3, r0
   1ebc0:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1ebc4:	4b0e      	ldr	r3, [pc, #56]	; (1ec00 <hciCoreConnByHandle+0x44>)
   1ebc6:	9302      	str	r3, [sp, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1ebc8:	2303      	movs	r3, #3
   1ebca:	f88d 300f 	strb.w	r3, [sp, #15]
   1ebce:	e00f      	b.n	1ebf0 <hciCoreConnByHandle+0x34>
  {
    if (pConn->handle == handle)
   1ebd0:	9b02      	ldr	r3, [sp, #8]
   1ebd2:	8a1b      	ldrh	r3, [r3, #16]
   1ebd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ebd8:	429a      	cmp	r2, r3
   1ebda:	d101      	bne.n	1ebe0 <hciCoreConnByHandle+0x24>
    {
      return pConn;
   1ebdc:	9b02      	ldr	r3, [sp, #8]
   1ebde:	e00c      	b.n	1ebfa <hciCoreConnByHandle+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1ebe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ebe4:	3b01      	subs	r3, #1
   1ebe6:	f88d 300f 	strb.w	r3, [sp, #15]
   1ebea:	9b02      	ldr	r3, [sp, #8]
   1ebec:	331c      	adds	r3, #28
   1ebee:	9302      	str	r3, [sp, #8]
   1ebf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ebf4:	2b00      	cmp	r3, #0
   1ebf6:	d1eb      	bne.n	1ebd0 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   1ebf8:	2300      	movs	r3, #0
}
   1ebfa:	4618      	mov	r0, r3
   1ebfc:	b004      	add	sp, #16
   1ebfe:	4770      	bx	lr
   1ec00:	10009774 	.word	0x10009774

0001ec04 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   1ec04:	b082      	sub	sp, #8
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1ec06:	4b11      	ldr	r3, [pc, #68]	; (1ec4c <hciCoreNextConnFragment+0x48>)
   1ec08:	9300      	str	r3, [sp, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1ec0a:	2303      	movs	r3, #3
   1ec0c:	f88d 3007 	strb.w	r3, [sp, #7]
   1ec10:	e013      	b.n	1ec3a <hciCoreNextConnFragment+0x36>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   1ec12:	9b00      	ldr	r3, [sp, #0]
   1ec14:	8a1b      	ldrh	r3, [r3, #16]
   1ec16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ec1a:	4293      	cmp	r3, r2
   1ec1c:	d005      	beq.n	1ec2a <hciCoreNextConnFragment+0x26>
   1ec1e:	9b00      	ldr	r3, [sp, #0]
   1ec20:	7d9b      	ldrb	r3, [r3, #22]
   1ec22:	2b00      	cmp	r3, #0
   1ec24:	d001      	beq.n	1ec2a <hciCoreNextConnFragment+0x26>
    {
      return pConn;
   1ec26:	9b00      	ldr	r3, [sp, #0]
   1ec28:	e00c      	b.n	1ec44 <hciCoreNextConnFragment+0x40>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1ec2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ec2e:	3b01      	subs	r3, #1
   1ec30:	f88d 3007 	strb.w	r3, [sp, #7]
   1ec34:	9b00      	ldr	r3, [sp, #0]
   1ec36:	331c      	adds	r3, #28
   1ec38:	9300      	str	r3, [sp, #0]
   1ec3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	d1e7      	bne.n	1ec12 <hciCoreNextConnFragment+0xe>
    }
  }

  return NULL;
   1ec42:	2300      	movs	r3, #0
}
   1ec44:	4618      	mov	r0, r3
   1ec46:	b002      	add	sp, #8
   1ec48:	4770      	bx	lr
   1ec4a:	bf00      	nop
   1ec4c:	10009774 	.word	0x10009774

0001ec50 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   1ec50:	b500      	push	{lr}
   1ec52:	b083      	sub	sp, #12
   1ec54:	4603      	mov	r3, r0
   1ec56:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   1ec5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ec5e:	4618      	mov	r0, r3
   1ec60:	f7ff ff36 	bl	1ead0 <hciCoreConnAlloc>
}
   1ec64:	bf00      	nop
   1ec66:	b003      	add	sp, #12
   1ec68:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec6c <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   1ec6c:	b500      	push	{lr}
   1ec6e:	b083      	sub	sp, #12
   1ec70:	4603      	mov	r3, r0
   1ec72:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   1ec76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ec7a:	4618      	mov	r0, r3
   1ec7c:	f7ff ff56 	bl	1eb2c <hciCoreConnFree>
}
   1ec80:	bf00      	nop
   1ec82:	b003      	add	sp, #12
   1ec84:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec88 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   1ec88:	b500      	push	{lr}
   1ec8a:	b083      	sub	sp, #12
   1ec8c:	9001      	str	r0, [sp, #4]
   1ec8e:	9100      	str	r1, [sp, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   1ec90:	9b01      	ldr	r3, [sp, #4]
   1ec92:	7e5b      	ldrb	r3, [r3, #25]
   1ec94:	3301      	adds	r3, #1
   1ec96:	b2da      	uxtb	r2, r3
   1ec98:	9b01      	ldr	r3, [sp, #4]
   1ec9a:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   1ec9c:	9900      	ldr	r1, [sp, #0]
   1ec9e:	9801      	ldr	r0, [sp, #4]
   1eca0:	f002 fb0a 	bl	212b8 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   1eca4:	4b08      	ldr	r3, [pc, #32]	; (1ecc8 <hciCoreSendAclData+0x40>)
   1eca6:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1ecaa:	2b00      	cmp	r3, #0
   1ecac:	d007      	beq.n	1ecbe <hciCoreSendAclData+0x36>
  {
    hciCoreCb.availBufs--;
   1ecae:	4b06      	ldr	r3, [pc, #24]	; (1ecc8 <hciCoreSendAclData+0x40>)
   1ecb0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1ecb4:	3b01      	subs	r3, #1
   1ecb6:	b2da      	uxtb	r2, r3
   1ecb8:	4b03      	ldr	r3, [pc, #12]	; (1ecc8 <hciCoreSendAclData+0x40>)
   1ecba:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   1ecbe:	bf00      	nop
   1ecc0:	b003      	add	sp, #12
   1ecc2:	f85d fb04 	ldr.w	pc, [sp], #4
   1ecc6:	bf00      	nop
   1ecc8:	10009774 	.word	0x10009774

0001eccc <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   1eccc:	b500      	push	{lr}
   1ecce:	b087      	sub	sp, #28
   1ecd0:	4603      	mov	r3, r0
   1ecd2:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   1ecd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ecda:	2b00      	cmp	r3, #0
   1ecdc:	d055      	beq.n	1ed8a <hciCoreTxReady+0xbe>
  {
    hciCoreCb.availBufs += bufs;
   1ecde:	4b30      	ldr	r3, [pc, #192]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ece0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1ece4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ece8:	4413      	add	r3, r2
   1ecea:	b2da      	uxtb	r2, r3
   1ecec:	4b2c      	ldr	r3, [pc, #176]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ecee:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   1ecf2:	4b2b      	ldr	r3, [pc, #172]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ecf4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1ecf8:	4b29      	ldr	r3, [pc, #164]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ecfa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1ecfe:	429a      	cmp	r2, r3
   1ed00:	d943      	bls.n	1ed8a <hciCoreTxReady+0xbe>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   1ed02:	4b27      	ldr	r3, [pc, #156]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ed04:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   1ed08:	4b25      	ldr	r3, [pc, #148]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ed0a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   1ed0e:	e03c      	b.n	1ed8a <hciCoreTxReady+0xbe>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   1ed10:	2000      	movs	r0, #0
   1ed12:	f000 f899 	bl	1ee48 <hciCoreTxAclContinue>
   1ed16:	4603      	mov	r3, r0
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	d136      	bne.n	1ed8a <hciCoreTxReady+0xbe>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   1ed1c:	f10d 030b 	add.w	r3, sp, #11
   1ed20:	4619      	mov	r1, r3
   1ed22:	4820      	ldr	r0, [pc, #128]	; (1eda4 <hciCoreTxReady+0xd8>)
   1ed24:	f7ee fa7b 	bl	d21e <WsfMsgDeq>
   1ed28:	9005      	str	r0, [sp, #20]
   1ed2a:	9b05      	ldr	r3, [sp, #20]
   1ed2c:	2b00      	cmp	r3, #0
   1ed2e:	d032      	beq.n	1ed96 <hciCoreTxReady+0xca>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   1ed30:	9b05      	ldr	r3, [sp, #20]
   1ed32:	781b      	ldrb	r3, [r3, #0]
   1ed34:	b29a      	uxth	r2, r3
   1ed36:	9b05      	ldr	r3, [sp, #20]
   1ed38:	3301      	adds	r3, #1
   1ed3a:	781b      	ldrb	r3, [r3, #0]
   1ed3c:	b29b      	uxth	r3, r3
   1ed3e:	021b      	lsls	r3, r3, #8
   1ed40:	b29b      	uxth	r3, r3
   1ed42:	4413      	add	r3, r2
   1ed44:	f8ad 3012 	strh.w	r3, [sp, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   1ed48:	9b05      	ldr	r3, [sp, #20]
   1ed4a:	3302      	adds	r3, #2
   1ed4c:	781b      	ldrb	r3, [r3, #0]
   1ed4e:	b29a      	uxth	r2, r3
   1ed50:	9b05      	ldr	r3, [sp, #20]
   1ed52:	3303      	adds	r3, #3
   1ed54:	781b      	ldrb	r3, [r3, #0]
   1ed56:	b29b      	uxth	r3, r3
   1ed58:	021b      	lsls	r3, r3, #8
   1ed5a:	b29b      	uxth	r3, r3
   1ed5c:	4413      	add	r3, r2
   1ed5e:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1ed62:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ed66:	4618      	mov	r0, r3
   1ed68:	f7ff ff28 	bl	1ebbc <hciCoreConnByHandle>
   1ed6c:	9003      	str	r0, [sp, #12]
   1ed6e:	9b03      	ldr	r3, [sp, #12]
   1ed70:	2b00      	cmp	r3, #0
   1ed72:	d007      	beq.n	1ed84 <hciCoreTxReady+0xb8>
        {
          hciCoreTxAclStart(pConn, len, pData);
   1ed74:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1ed78:	9a05      	ldr	r2, [sp, #20]
   1ed7a:	4619      	mov	r1, r3
   1ed7c:	9803      	ldr	r0, [sp, #12]
   1ed7e:	f000 f813 	bl	1eda8 <hciCoreTxAclStart>
   1ed82:	e002      	b.n	1ed8a <hciCoreTxReady+0xbe>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   1ed84:	9805      	ldr	r0, [sp, #20]
   1ed86:	f7ee fa0d 	bl	d1a4 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   1ed8a:	4b05      	ldr	r3, [pc, #20]	; (1eda0 <hciCoreTxReady+0xd4>)
   1ed8c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1ed90:	2b00      	cmp	r3, #0
   1ed92:	d1bd      	bne.n	1ed10 <hciCoreTxReady+0x44>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   1ed94:	e000      	b.n	1ed98 <hciCoreTxReady+0xcc>
        break;
   1ed96:	bf00      	nop
}
   1ed98:	bf00      	nop
   1ed9a:	b007      	add	sp, #28
   1ed9c:	f85d fb04 	ldr.w	pc, [sp], #4
   1eda0:	10009774 	.word	0x10009774
   1eda4:	100097d8 	.word	0x100097d8

0001eda8 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   1eda8:	b500      	push	{lr}
   1edaa:	b087      	sub	sp, #28
   1edac:	9003      	str	r0, [sp, #12]
   1edae:	460b      	mov	r3, r1
   1edb0:	9201      	str	r2, [sp, #4]
   1edb2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   1edb6:	f000 fbd7 	bl	1f568 <HciGetBufSize>
   1edba:	4603      	mov	r3, r0
   1edbc:	f8ad 3016 	strh.w	r3, [sp, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   1edc0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1edc4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1edc8:	429a      	cmp	r2, r3
   1edca:	d932      	bls.n	1ee32 <hciCoreTxAclStart+0x8a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   1edcc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1edd0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1edd4:	1ad3      	subs	r3, r2, r3
   1edd6:	b29a      	uxth	r2, r3
   1edd8:	9b03      	ldr	r3, [sp, #12]
   1edda:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   1eddc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1ede0:	9a01      	ldr	r2, [sp, #4]
   1ede2:	441a      	add	r2, r3
   1ede4:	9b03      	ldr	r3, [sp, #12]
   1ede6:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   1ede8:	9b03      	ldr	r3, [sp, #12]
   1edea:	9a01      	ldr	r2, [sp, #4]
   1edec:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   1edee:	9b03      	ldr	r3, [sp, #12]
   1edf0:	2201      	movs	r2, #1
   1edf2:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   1edf4:	9b01      	ldr	r3, [sp, #4]
   1edf6:	3302      	adds	r3, #2
   1edf8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1edfc:	b2d2      	uxtb	r2, r2
   1edfe:	701a      	strb	r2, [r3, #0]
   1ee00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1ee04:	0a1b      	lsrs	r3, r3, #8
   1ee06:	b29a      	uxth	r2, r3
   1ee08:	9b01      	ldr	r3, [sp, #4]
   1ee0a:	3303      	adds	r3, #3
   1ee0c:	b2d2      	uxtb	r2, r2
   1ee0e:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   1ee10:	9901      	ldr	r1, [sp, #4]
   1ee12:	9803      	ldr	r0, [sp, #12]
   1ee14:	f7ff ff38 	bl	1ec88 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   1ee18:	bf00      	nop
   1ee1a:	4b0a      	ldr	r3, [pc, #40]	; (1ee44 <hciCoreTxAclStart+0x9c>)
   1ee1c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1ee20:	2b00      	cmp	r3, #0
   1ee22:	d00a      	beq.n	1ee3a <hciCoreTxAclStart+0x92>
   1ee24:	9803      	ldr	r0, [sp, #12]
   1ee26:	f000 f80f 	bl	1ee48 <hciCoreTxAclContinue>
   1ee2a:	4603      	mov	r3, r0
   1ee2c:	2b00      	cmp	r3, #0
   1ee2e:	d1f4      	bne.n	1ee1a <hciCoreTxAclStart+0x72>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   1ee30:	e003      	b.n	1ee3a <hciCoreTxAclStart+0x92>
    hciCoreSendAclData(pConn, pData);
   1ee32:	9901      	ldr	r1, [sp, #4]
   1ee34:	9803      	ldr	r0, [sp, #12]
   1ee36:	f7ff ff27 	bl	1ec88 <hciCoreSendAclData>
}
   1ee3a:	bf00      	nop
   1ee3c:	b007      	add	sp, #28
   1ee3e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ee42:	bf00      	nop
   1ee44:	10009774 	.word	0x10009774

0001ee48 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   1ee48:	b510      	push	{r4, lr}
   1ee4a:	b084      	sub	sp, #16
   1ee4c:	9001      	str	r0, [sp, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   1ee4e:	9b01      	ldr	r3, [sp, #4]
   1ee50:	2b00      	cmp	r3, #0
   1ee52:	d102      	bne.n	1ee5a <hciCoreTxAclContinue+0x12>
  {
    pConn = hciCoreNextConnFragment();
   1ee54:	f7ff fed6 	bl	1ec04 <hciCoreNextConnFragment>
   1ee58:	9001      	str	r0, [sp, #4]
  }

  if (pConn != NULL)
   1ee5a:	9b01      	ldr	r3, [sp, #4]
   1ee5c:	2b00      	cmp	r3, #0
   1ee5e:	d04f      	beq.n	1ef00 <hciCoreTxAclContinue+0xb8>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   1ee60:	9b01      	ldr	r3, [sp, #4]
   1ee62:	8a5c      	ldrh	r4, [r3, #18]
   1ee64:	f000 fb80 	bl	1f568 <HciGetBufSize>
   1ee68:	4603      	mov	r3, r0
   1ee6a:	429c      	cmp	r4, r3
   1ee6c:	d202      	bcs.n	1ee74 <hciCoreTxAclContinue+0x2c>
   1ee6e:	9b01      	ldr	r3, [sp, #4]
   1ee70:	8a5b      	ldrh	r3, [r3, #18]
   1ee72:	e002      	b.n	1ee7a <hciCoreTxAclContinue+0x32>
   1ee74:	f000 fb78 	bl	1f568 <HciGetBufSize>
   1ee78:	4603      	mov	r3, r0
   1ee7a:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (aclLen > 0)
   1ee7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ee82:	2b00      	cmp	r3, #0
   1ee84:	d03c      	beq.n	1ef00 <hciCoreTxAclContinue+0xb8>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   1ee86:	9b01      	ldr	r3, [sp, #4]
   1ee88:	8a5a      	ldrh	r2, [r3, #18]
   1ee8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ee8e:	1ad3      	subs	r3, r2, r3
   1ee90:	b29a      	uxth	r2, r3
   1ee92:	9b01      	ldr	r3, [sp, #4]
   1ee94:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   1ee96:	9b01      	ldr	r3, [sp, #4]
   1ee98:	8a1a      	ldrh	r2, [r3, #16]
   1ee9a:	9b01      	ldr	r3, [sp, #4]
   1ee9c:	685b      	ldr	r3, [r3, #4]
   1ee9e:	b2d2      	uxtb	r2, r2
   1eea0:	701a      	strb	r2, [r3, #0]
   1eea2:	9b01      	ldr	r3, [sp, #4]
   1eea4:	8a1b      	ldrh	r3, [r3, #16]
   1eea6:	0a1b      	lsrs	r3, r3, #8
   1eea8:	b29b      	uxth	r3, r3
   1eeaa:	f043 0310 	orr.w	r3, r3, #16
   1eeae:	b29a      	uxth	r2, r3
   1eeb0:	9b01      	ldr	r3, [sp, #4]
   1eeb2:	685b      	ldr	r3, [r3, #4]
   1eeb4:	3301      	adds	r3, #1
   1eeb6:	b2d2      	uxtb	r2, r2
   1eeb8:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   1eeba:	9b01      	ldr	r3, [sp, #4]
   1eebc:	685b      	ldr	r3, [r3, #4]
   1eebe:	3302      	adds	r3, #2
   1eec0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1eec4:	b2d2      	uxtb	r2, r2
   1eec6:	701a      	strb	r2, [r3, #0]
   1eec8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1eecc:	0a1b      	lsrs	r3, r3, #8
   1eece:	b29a      	uxth	r2, r3
   1eed0:	9b01      	ldr	r3, [sp, #4]
   1eed2:	685b      	ldr	r3, [r3, #4]
   1eed4:	3303      	adds	r3, #3
   1eed6:	b2d2      	uxtb	r2, r2
   1eed8:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   1eeda:	9b01      	ldr	r3, [sp, #4]
   1eedc:	685b      	ldr	r3, [r3, #4]
   1eede:	4619      	mov	r1, r3
   1eee0:	9801      	ldr	r0, [sp, #4]
   1eee2:	f7ff fed1 	bl	1ec88 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   1eee6:	9b01      	ldr	r3, [sp, #4]
   1eee8:	8a5b      	ldrh	r3, [r3, #18]
   1eeea:	2b00      	cmp	r3, #0
   1eeec:	d006      	beq.n	1eefc <hciCoreTxAclContinue+0xb4>
      {
        pConn->pNextTxFrag += aclLen;
   1eeee:	9b01      	ldr	r3, [sp, #4]
   1eef0:	685a      	ldr	r2, [r3, #4]
   1eef2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1eef6:	441a      	add	r2, r3
   1eef8:	9b01      	ldr	r3, [sp, #4]
   1eefa:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   1eefc:	2301      	movs	r3, #1
   1eefe:	e000      	b.n	1ef02 <hciCoreTxAclContinue+0xba>
    }
  }

  return FALSE;
   1ef00:	2300      	movs	r3, #0
}
   1ef02:	4618      	mov	r0, r3
   1ef04:	b004      	add	sp, #16
   1ef06:	bd10      	pop	{r4, pc}

0001ef08 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   1ef08:	b500      	push	{lr}
   1ef0a:	b083      	sub	sp, #12
   1ef0c:	9001      	str	r0, [sp, #4]
   1ef0e:	9100      	str	r1, [sp, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   1ef10:	9b01      	ldr	r3, [sp, #4]
   1ef12:	7d9b      	ldrb	r3, [r3, #22]
   1ef14:	2b00      	cmp	r3, #0
   1ef16:	d00f      	beq.n	1ef38 <hciCoreTxAclComplete+0x30>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   1ef18:	9b01      	ldr	r3, [sp, #4]
   1ef1a:	8a5b      	ldrh	r3, [r3, #18]
   1ef1c:	2b00      	cmp	r3, #0
   1ef1e:	d111      	bne.n	1ef44 <hciCoreTxAclComplete+0x3c>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   1ef20:	9b01      	ldr	r3, [sp, #4]
   1ef22:	681b      	ldr	r3, [r3, #0]
   1ef24:	4618      	mov	r0, r3
   1ef26:	f7ee f93d 	bl	d1a4 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   1ef2a:	9b01      	ldr	r3, [sp, #4]
   1ef2c:	2200      	movs	r2, #0
   1ef2e:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   1ef30:	9b01      	ldr	r3, [sp, #4]
   1ef32:	2200      	movs	r2, #0
   1ef34:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   1ef36:	e005      	b.n	1ef44 <hciCoreTxAclComplete+0x3c>
  else if (pData != NULL)
   1ef38:	9b00      	ldr	r3, [sp, #0]
   1ef3a:	2b00      	cmp	r3, #0
   1ef3c:	d002      	beq.n	1ef44 <hciCoreTxAclComplete+0x3c>
    WsfMsgFree(pData);
   1ef3e:	9800      	ldr	r0, [sp, #0]
   1ef40:	f7ee f930 	bl	d1a4 <WsfMsgFree>
}
   1ef44:	bf00      	nop
   1ef46:	b003      	add	sp, #12
   1ef48:	f85d fb04 	ldr.w	pc, [sp], #4

0001ef4c <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   1ef4c:	b500      	push	{lr}
   1ef4e:	b089      	sub	sp, #36	; 0x24
   1ef50:	9001      	str	r0, [sp, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   1ef52:	2300      	movs	r3, #0
   1ef54:	9307      	str	r3, [sp, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   1ef56:	2301      	movs	r3, #1
   1ef58:	f88d 301b 	strb.w	r3, [sp, #27]

  BYTES_TO_UINT16(handle, pData);
   1ef5c:	9b01      	ldr	r3, [sp, #4]
   1ef5e:	781b      	ldrb	r3, [r3, #0]
   1ef60:	b29a      	uxth	r2, r3
   1ef62:	9b01      	ldr	r3, [sp, #4]
   1ef64:	3301      	adds	r3, #1
   1ef66:	781b      	ldrb	r3, [r3, #0]
   1ef68:	b29b      	uxth	r3, r3
   1ef6a:	021b      	lsls	r3, r3, #8
   1ef6c:	b29b      	uxth	r3, r3
   1ef6e:	4413      	add	r3, r2
   1ef70:	f8ad 3018 	strh.w	r3, [sp, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   1ef74:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1ef78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   1ef7c:	f8ad 3016 	strh.w	r3, [sp, #22]
  handle &= HCI_HANDLE_MASK;
   1ef80:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1ef84:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1ef88:	f8ad 3018 	strh.w	r3, [sp, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   1ef8c:	9b01      	ldr	r3, [sp, #4]
   1ef8e:	3302      	adds	r3, #2
   1ef90:	781b      	ldrb	r3, [r3, #0]
   1ef92:	b29a      	uxth	r2, r3
   1ef94:	9b01      	ldr	r3, [sp, #4]
   1ef96:	3303      	adds	r3, #3
   1ef98:	781b      	ldrb	r3, [r3, #0]
   1ef9a:	b29b      	uxth	r3, r3
   1ef9c:	021b      	lsls	r3, r3, #8
   1ef9e:	b29b      	uxth	r3, r3
   1efa0:	4413      	add	r3, r2
   1efa2:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1efa6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1efaa:	4618      	mov	r0, r3
   1efac:	f7ff fe06 	bl	1ebbc <hciCoreConnByHandle>
   1efb0:	9004      	str	r0, [sp, #16]
   1efb2:	9b04      	ldr	r3, [sp, #16]
   1efb4:	2b00      	cmp	r3, #0
   1efb6:	f000 80c3 	beq.w	1f140 <hciCoreAclReassembly+0x1f4>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   1efba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1efbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1efc2:	f040 808c 	bne.w	1f0de <hciCoreAclReassembly+0x192>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   1efc6:	9b04      	ldr	r3, [sp, #16]
   1efc8:	689b      	ldr	r3, [r3, #8]
   1efca:	2b00      	cmp	r3, #0
   1efcc:	d007      	beq.n	1efde <hciCoreAclReassembly+0x92>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   1efce:	9b04      	ldr	r3, [sp, #16]
   1efd0:	689b      	ldr	r3, [r3, #8]
   1efd2:	4618      	mov	r0, r3
   1efd4:	f7ee f8e6 	bl	d1a4 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1efd8:	9b04      	ldr	r3, [sp, #16]
   1efda:	2200      	movs	r2, #0
   1efdc:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   1efde:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1efe2:	2b03      	cmp	r3, #3
   1efe4:	f240 80ac 	bls.w	1f140 <hciCoreAclReassembly+0x1f4>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   1efe8:	9b01      	ldr	r3, [sp, #4]
   1efea:	3304      	adds	r3, #4
   1efec:	781b      	ldrb	r3, [r3, #0]
   1efee:	b29a      	uxth	r2, r3
   1eff0:	9b01      	ldr	r3, [sp, #4]
   1eff2:	3305      	adds	r3, #5
   1eff4:	781b      	ldrb	r3, [r3, #0]
   1eff6:	b29b      	uxth	r3, r3
   1eff8:	021b      	lsls	r3, r3, #8
   1effa:	b29b      	uxth	r3, r3
   1effc:	4413      	add	r3, r2
   1effe:	f8ad 300e 	strh.w	r3, [sp, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   1f002:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f006:	3303      	adds	r3, #3
   1f008:	4a53      	ldr	r2, [pc, #332]	; (1f158 <hciCoreAclReassembly+0x20c>)
   1f00a:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
   1f00e:	4293      	cmp	r3, r2
   1f010:	f280 8096 	bge.w	1f140 <hciCoreAclReassembly+0x1f4>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   1f014:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f018:	1cda      	adds	r2, r3, #3
   1f01a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f01e:	429a      	cmp	r2, r3
   1f020:	db57      	blt.n	1f0d2 <hciCoreAclReassembly+0x186>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   1f022:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f026:	3308      	adds	r3, #8
   1f028:	b29b      	uxth	r3, r3
   1f02a:	2100      	movs	r1, #0
   1f02c:	4618      	mov	r0, r3
   1f02e:	f7ee f889 	bl	d144 <WsfMsgDataAlloc>
   1f032:	4602      	mov	r2, r0
   1f034:	9b04      	ldr	r3, [sp, #16]
   1f036:	609a      	str	r2, [r3, #8]
   1f038:	9b04      	ldr	r3, [sp, #16]
   1f03a:	689b      	ldr	r3, [r3, #8]
   1f03c:	2b00      	cmp	r3, #0
   1f03e:	d07f      	beq.n	1f140 <hciCoreAclReassembly+0x1f4>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   1f040:	9b04      	ldr	r3, [sp, #16]
   1f042:	689a      	ldr	r2, [r3, #8]
   1f044:	9b04      	ldr	r3, [sp, #16]
   1f046:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   1f048:	9b04      	ldr	r3, [sp, #16]
   1f04a:	68db      	ldr	r3, [r3, #12]
   1f04c:	1c59      	adds	r1, r3, #1
   1f04e:	9a04      	ldr	r2, [sp, #16]
   1f050:	60d1      	str	r1, [r2, #12]
   1f052:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1f056:	b2d2      	uxtb	r2, r2
   1f058:	701a      	strb	r2, [r3, #0]
   1f05a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1f05e:	0a1b      	lsrs	r3, r3, #8
   1f060:	b298      	uxth	r0, r3
   1f062:	9b04      	ldr	r3, [sp, #16]
   1f064:	68db      	ldr	r3, [r3, #12]
   1f066:	1c59      	adds	r1, r3, #1
   1f068:	9a04      	ldr	r2, [sp, #16]
   1f06a:	60d1      	str	r1, [r2, #12]
   1f06c:	b2c2      	uxtb	r2, r0
   1f06e:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   1f070:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f074:	b2da      	uxtb	r2, r3
   1f076:	9b04      	ldr	r3, [sp, #16]
   1f078:	68db      	ldr	r3, [r3, #12]
   1f07a:	1c58      	adds	r0, r3, #1
   1f07c:	9904      	ldr	r1, [sp, #16]
   1f07e:	60c8      	str	r0, [r1, #12]
   1f080:	3204      	adds	r2, #4
   1f082:	b2d2      	uxtb	r2, r2
   1f084:	701a      	strb	r2, [r3, #0]
   1f086:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f08a:	3304      	adds	r3, #4
   1f08c:	1218      	asrs	r0, r3, #8
   1f08e:	9b04      	ldr	r3, [sp, #16]
   1f090:	68db      	ldr	r3, [r3, #12]
   1f092:	1c59      	adds	r1, r3, #1
   1f094:	9a04      	ldr	r2, [sp, #16]
   1f096:	60d1      	str	r1, [r2, #12]
   1f098:	b2c2      	uxtb	r2, r0
   1f09a:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   1f09c:	9b04      	ldr	r3, [sp, #16]
   1f09e:	68d8      	ldr	r0, [r3, #12]
   1f0a0:	9b01      	ldr	r3, [sp, #4]
   1f0a2:	3304      	adds	r3, #4
   1f0a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f0a8:	4619      	mov	r1, r3
   1f0aa:	f7ed f829 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
   1f0ae:	9b04      	ldr	r3, [sp, #16]
   1f0b0:	68da      	ldr	r2, [r3, #12]
   1f0b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f0b6:	441a      	add	r2, r3
   1f0b8:	9b04      	ldr	r3, [sp, #16]
   1f0ba:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   1f0bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1f0c0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f0c4:	1ad3      	subs	r3, r2, r3
   1f0c6:	b29b      	uxth	r3, r3
   1f0c8:	3304      	adds	r3, #4
   1f0ca:	b29a      	uxth	r2, r3
   1f0cc:	9b04      	ldr	r3, [sp, #16]
   1f0ce:	829a      	strh	r2, [r3, #20]
   1f0d0:	e036      	b.n	1f140 <hciCoreAclReassembly+0x1f4>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   1f0d2:	9b01      	ldr	r3, [sp, #4]
   1f0d4:	9307      	str	r3, [sp, #28]
          freeData = FALSE;
   1f0d6:	2300      	movs	r3, #0
   1f0d8:	f88d 301b 	strb.w	r3, [sp, #27]
   1f0dc:	e030      	b.n	1f140 <hciCoreAclReassembly+0x1f4>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   1f0de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1f0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1f0e6:	d12b      	bne.n	1f140 <hciCoreAclReassembly+0x1f4>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   1f0e8:	9b04      	ldr	r3, [sp, #16]
   1f0ea:	689b      	ldr	r3, [r3, #8]
   1f0ec:	2b00      	cmp	r3, #0
   1f0ee:	d027      	beq.n	1f140 <hciCoreAclReassembly+0x1f4>
      {
        if (aclLen <= pConn->rxAclRemLen)
   1f0f0:	9b04      	ldr	r3, [sp, #16]
   1f0f2:	8a9b      	ldrh	r3, [r3, #20]
   1f0f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f0f8:	429a      	cmp	r2, r3
   1f0fa:	d821      	bhi.n	1f140 <hciCoreAclReassembly+0x1f4>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   1f0fc:	9b04      	ldr	r3, [sp, #16]
   1f0fe:	68d8      	ldr	r0, [r3, #12]
   1f100:	9b01      	ldr	r3, [sp, #4]
   1f102:	3304      	adds	r3, #4
   1f104:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f108:	4619      	mov	r1, r3
   1f10a:	f7ec fff9 	bl	c100 <memcpy>
          pConn->pNextRxFrag += aclLen;
   1f10e:	9b04      	ldr	r3, [sp, #16]
   1f110:	68da      	ldr	r2, [r3, #12]
   1f112:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f116:	441a      	add	r2, r3
   1f118:	9b04      	ldr	r3, [sp, #16]
   1f11a:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   1f11c:	9b04      	ldr	r3, [sp, #16]
   1f11e:	8a9a      	ldrh	r2, [r3, #20]
   1f120:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f124:	1ad3      	subs	r3, r2, r3
   1f126:	b29a      	uxth	r2, r3
   1f128:	9b04      	ldr	r3, [sp, #16]
   1f12a:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   1f12c:	9b04      	ldr	r3, [sp, #16]
   1f12e:	8a9b      	ldrh	r3, [r3, #20]
   1f130:	2b00      	cmp	r3, #0
   1f132:	d105      	bne.n	1f140 <hciCoreAclReassembly+0x1f4>
          {
            pDataRtn = pConn->pRxAclPkt;
   1f134:	9b04      	ldr	r3, [sp, #16]
   1f136:	689b      	ldr	r3, [r3, #8]
   1f138:	9307      	str	r3, [sp, #28]
            pConn->pRxAclPkt = NULL;
   1f13a:	9b04      	ldr	r3, [sp, #16]
   1f13c:	2200      	movs	r2, #0
   1f13e:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   1f140:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1f144:	2b00      	cmp	r3, #0
   1f146:	d002      	beq.n	1f14e <hciCoreAclReassembly+0x202>
  {
    WsfMsgFree(pData);
   1f148:	9801      	ldr	r0, [sp, #4]
   1f14a:	f7ee f82b 	bl	d1a4 <WsfMsgFree>
  }

  return pDataRtn;
   1f14e:	9b07      	ldr	r3, [sp, #28]
}
   1f150:	4618      	mov	r0, r3
   1f152:	b009      	add	sp, #36	; 0x24
   1f154:	f85d fb04 	ldr.w	pc, [sp], #4
   1f158:	10009774 	.word	0x10009774

0001f15c <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   1f15c:	b500      	push	{lr}
   1f15e:	b083      	sub	sp, #12
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   1f160:	4b24      	ldr	r3, [pc, #144]	; (1f1f4 <HciCoreInit+0x98>)
   1f162:	2200      	movs	r2, #0
   1f164:	665a      	str	r2, [r3, #100]	; 0x64
   1f166:	4b23      	ldr	r3, [pc, #140]	; (1f1f4 <HciCoreInit+0x98>)
   1f168:	2200      	movs	r2, #0
   1f16a:	669a      	str	r2, [r3, #104]	; 0x68

  for (i = 0; i < DM_CONN_MAX; i++)
   1f16c:	2300      	movs	r3, #0
   1f16e:	f88d 3007 	strb.w	r3, [sp, #7]
   1f172:	e010      	b.n	1f196 <HciCoreInit+0x3a>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   1f174:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1f178:	491e      	ldr	r1, [pc, #120]	; (1f1f4 <HciCoreInit+0x98>)
   1f17a:	4613      	mov	r3, r2
   1f17c:	00db      	lsls	r3, r3, #3
   1f17e:	1a9b      	subs	r3, r3, r2
   1f180:	009b      	lsls	r3, r3, #2
   1f182:	440b      	add	r3, r1
   1f184:	3310      	adds	r3, #16
   1f186:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f18a:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   1f18c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f190:	3301      	adds	r3, #1
   1f192:	f88d 3007 	strb.w	r3, [sp, #7]
   1f196:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f19a:	2b02      	cmp	r3, #2
   1f19c:	d9ea      	bls.n	1f174 <HciCoreInit+0x18>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   1f19e:	4b15      	ldr	r3, [pc, #84]	; (1f1f4 <HciCoreInit+0x98>)
   1f1a0:	221b      	movs	r2, #27
   1f1a2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   1f1a6:	4b13      	ldr	r3, [pc, #76]	; (1f1f4 <HciCoreInit+0x98>)
   1f1a8:	2205      	movs	r2, #5
   1f1aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   1f1ae:	4b11      	ldr	r3, [pc, #68]	; (1f1f4 <HciCoreInit+0x98>)
   1f1b0:	2203      	movs	r2, #3
   1f1b2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
   1f1b6:	4b10      	ldr	r3, [pc, #64]	; (1f1f8 <HciCoreInit+0x9c>)
   1f1b8:	68db      	ldr	r3, [r3, #12]
   1f1ba:	b2db      	uxtb	r3, r3
   1f1bc:	2b20      	cmp	r3, #32
   1f1be:	d90f      	bls.n	1f1e0 <HciCoreInit+0x84>
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
   1f1c0:	4b0c      	ldr	r3, [pc, #48]	; (1f1f4 <HciCoreInit+0x98>)
   1f1c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1f1c6:	3b01      	subs	r3, #1
   1f1c8:	b2da      	uxtb	r2, r3
   1f1ca:	4b0a      	ldr	r3, [pc, #40]	; (1f1f4 <HciCoreInit+0x98>)
   1f1cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
   1f1d0:	4b08      	ldr	r3, [pc, #32]	; (1f1f4 <HciCoreInit+0x98>)
   1f1d2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1f1d6:	3b01      	subs	r3, #1
   1f1d8:	b2da      	uxtb	r2, r3
   1f1da:	4b06      	ldr	r3, [pc, #24]	; (1f1f4 <HciCoreInit+0x98>)
   1f1dc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
   1f1e0:	4b04      	ldr	r3, [pc, #16]	; (1f1f4 <HciCoreInit+0x98>)
   1f1e2:	2200      	movs	r2, #0
   1f1e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
   1f1e8:	f000 f8da 	bl	1f3a0 <hciCoreInit>
}
   1f1ec:	bf00      	nop
   1f1ee:	b003      	add	sp, #12
   1f1f0:	f85d fb04 	ldr.w	pc, [sp], #4
   1f1f4:	10009774 	.word	0x10009774
   1f1f8:	40020000 	.word	0x40020000

0001f1fc <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   1f1fc:	b500      	push	{lr}
   1f1fe:	b085      	sub	sp, #20
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1f200:	4b26      	ldr	r3, [pc, #152]	; (1f29c <HciResetSequence+0xa0>)
   1f202:	9302      	str	r3, [sp, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1f204:	e002      	b.n	1f20c <HciResetSequence+0x10>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   1f206:	9801      	ldr	r0, [sp, #4]
   1f208:	f7ed ffcc 	bl	d1a4 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1f20c:	f10d 0303 	add.w	r3, sp, #3
   1f210:	4619      	mov	r1, r3
   1f212:	4823      	ldr	r0, [pc, #140]	; (1f2a0 <HciResetSequence+0xa4>)
   1f214:	f7ee f803 	bl	d21e <WsfMsgDeq>
   1f218:	9001      	str	r0, [sp, #4]
   1f21a:	9b01      	ldr	r3, [sp, #4]
   1f21c:	2b00      	cmp	r3, #0
   1f21e:	d1f2      	bne.n	1f206 <HciResetSequence+0xa>
  }

  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1f220:	2303      	movs	r3, #3
   1f222:	f88d 300f 	strb.w	r3, [sp, #15]
   1f226:	e02b      	b.n	1f280 <HciResetSequence+0x84>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   1f228:	9b02      	ldr	r3, [sp, #8]
   1f22a:	681b      	ldr	r3, [r3, #0]
   1f22c:	2b00      	cmp	r3, #0
   1f22e:	d007      	beq.n	1f240 <HciResetSequence+0x44>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   1f230:	9b02      	ldr	r3, [sp, #8]
   1f232:	681b      	ldr	r3, [r3, #0]
   1f234:	4618      	mov	r0, r3
   1f236:	f7ed ffb5 	bl	d1a4 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   1f23a:	9b02      	ldr	r3, [sp, #8]
   1f23c:	2200      	movs	r2, #0
   1f23e:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   1f240:	9b02      	ldr	r3, [sp, #8]
   1f242:	2200      	movs	r2, #0
   1f244:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   1f246:	9b02      	ldr	r3, [sp, #8]
   1f248:	689b      	ldr	r3, [r3, #8]
   1f24a:	2b00      	cmp	r3, #0
   1f24c:	d007      	beq.n	1f25e <HciResetSequence+0x62>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   1f24e:	9b02      	ldr	r3, [sp, #8]
   1f250:	689b      	ldr	r3, [r3, #8]
   1f252:	4618      	mov	r0, r3
   1f254:	f7ed ffa6 	bl	d1a4 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   1f258:	9b02      	ldr	r3, [sp, #8]
   1f25a:	2200      	movs	r2, #0
   1f25c:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   1f25e:	9b02      	ldr	r3, [sp, #8]
   1f260:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f264:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   1f266:	9b02      	ldr	r3, [sp, #8]
   1f268:	7e5b      	ldrb	r3, [r3, #25]
   1f26a:	4618      	mov	r0, r3
   1f26c:	f7ff fd2e 	bl	1eccc <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1f270:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f274:	3b01      	subs	r3, #1
   1f276:	f88d 300f 	strb.w	r3, [sp, #15]
   1f27a:	9b02      	ldr	r3, [sp, #8]
   1f27c:	331c      	adds	r3, #28
   1f27e:	9302      	str	r3, [sp, #8]
   1f280:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f284:	2b00      	cmp	r3, #0
   1f286:	d1cf      	bne.n	1f228 <HciResetSequence+0x2c>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   1f288:	4b05      	ldr	r3, [pc, #20]	; (1f2a0 <HciResetSequence+0xa4>)
   1f28a:	2201      	movs	r2, #1
   1f28c:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   1f28e:	f002 f9cb 	bl	21628 <hciCoreResetStart>
}
   1f292:	bf00      	nop
   1f294:	b005      	add	sp, #20
   1f296:	f85d fb04 	ldr.w	pc, [sp], #4
   1f29a:	bf00      	nop
   1f29c:	10009774 	.word	0x10009774
   1f2a0:	1000973c 	.word	0x1000973c

0001f2a4 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   1f2a4:	b082      	sub	sp, #8
   1f2a6:	4603      	mov	r3, r0
   1f2a8:	f8ad 3006 	strh.w	r3, [sp, #6]
  hciCoreCb.maxRxAclLen = len;
   1f2ac:	4a03      	ldr	r2, [pc, #12]	; (1f2bc <HciSetMaxRxAclLen+0x18>)
   1f2ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f2b2:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
   1f2b6:	bf00      	nop
   1f2b8:	b002      	add	sp, #8
   1f2ba:	4770      	bx	lr
   1f2bc:	10009774 	.word	0x10009774

0001f2c0 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   1f2c0:	b510      	push	{r4, lr}
   1f2c2:	b084      	sub	sp, #16
   1f2c4:	9001      	str	r0, [sp, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   1f2c6:	9b01      	ldr	r3, [sp, #4]
   1f2c8:	781b      	ldrb	r3, [r3, #0]
   1f2ca:	b29a      	uxth	r2, r3
   1f2cc:	9b01      	ldr	r3, [sp, #4]
   1f2ce:	3301      	adds	r3, #1
   1f2d0:	781b      	ldrb	r3, [r3, #0]
   1f2d2:	b29b      	uxth	r3, r3
   1f2d4:	021b      	lsls	r3, r3, #8
   1f2d6:	b29b      	uxth	r3, r3
   1f2d8:	4413      	add	r3, r2
   1f2da:	f8ad 300e 	strh.w	r3, [sp, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   1f2de:	9b01      	ldr	r3, [sp, #4]
   1f2e0:	3302      	adds	r3, #2
   1f2e2:	781b      	ldrb	r3, [r3, #0]
   1f2e4:	b29a      	uxth	r2, r3
   1f2e6:	9b01      	ldr	r3, [sp, #4]
   1f2e8:	3303      	adds	r3, #3
   1f2ea:	781b      	ldrb	r3, [r3, #0]
   1f2ec:	b29b      	uxth	r3, r3
   1f2ee:	021b      	lsls	r3, r3, #8
   1f2f0:	b29b      	uxth	r3, r3
   1f2f2:	4413      	add	r3, r2
   1f2f4:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1f2f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f2fc:	4618      	mov	r0, r3
   1f2fe:	f7ff fc5d 	bl	1ebbc <hciCoreConnByHandle>
   1f302:	9002      	str	r0, [sp, #8]
   1f304:	9b02      	ldr	r3, [sp, #8]
   1f306:	2b00      	cmp	r3, #0
   1f308:	d03d      	beq.n	1f386 <HciSendAclData+0xc6>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   1f30a:	4822      	ldr	r0, [pc, #136]	; (1f394 <HciSendAclData+0xd4>)
   1f30c:	f7ee fa0b 	bl	d726 <WsfQueueEmpty>
   1f310:	4603      	mov	r3, r0
   1f312:	2b00      	cmp	r3, #0
   1f314:	d00c      	beq.n	1f330 <HciSendAclData+0x70>
   1f316:	4b20      	ldr	r3, [pc, #128]	; (1f398 <HciSendAclData+0xd8>)
   1f318:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1f31c:	2b00      	cmp	r3, #0
   1f31e:	d007      	beq.n	1f330 <HciSendAclData+0x70>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   1f320:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f324:	9a01      	ldr	r2, [sp, #4]
   1f326:	4619      	mov	r1, r3
   1f328:	9802      	ldr	r0, [sp, #8]
   1f32a:	f7ff fd3d 	bl	1eda8 <hciCoreTxAclStart>
   1f32e:	e004      	b.n	1f33a <HciSendAclData+0x7a>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   1f330:	9a01      	ldr	r2, [sp, #4]
   1f332:	2100      	movs	r1, #0
   1f334:	4817      	ldr	r0, [pc, #92]	; (1f394 <HciSendAclData+0xd4>)
   1f336:	f7ed ff5c 	bl	d1f2 <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   1f33a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f33e:	1e5c      	subs	r4, r3, #1
   1f340:	f000 f912 	bl	1f568 <HciGetBufSize>
   1f344:	4603      	mov	r3, r0
   1f346:	fb94 f3f3 	sdiv	r3, r4, r3
   1f34a:	1c59      	adds	r1, r3, #1
   1f34c:	9b02      	ldr	r3, [sp, #8]
   1f34e:	7e1a      	ldrb	r2, [r3, #24]
   1f350:	b2cb      	uxtb	r3, r1
   1f352:	4413      	add	r3, r2
   1f354:	b2da      	uxtb	r2, r3
   1f356:	9b02      	ldr	r3, [sp, #8]
   1f358:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   1f35a:	9b02      	ldr	r3, [sp, #8]
   1f35c:	7e1a      	ldrb	r2, [r3, #24]
   1f35e:	4b0e      	ldr	r3, [pc, #56]	; (1f398 <HciSendAclData+0xd8>)
   1f360:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1f364:	429a      	cmp	r2, r3
   1f366:	d311      	bcc.n	1f38c <HciSendAclData+0xcc>
   1f368:	9b02      	ldr	r3, [sp, #8]
   1f36a:	7ddb      	ldrb	r3, [r3, #23]
   1f36c:	2b00      	cmp	r3, #0
   1f36e:	d10d      	bne.n	1f38c <HciSendAclData+0xcc>
    {
      pConn->flowDisabled = TRUE;
   1f370:	9b02      	ldr	r3, [sp, #8]
   1f372:	2201      	movs	r2, #1
   1f374:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   1f376:	4b09      	ldr	r3, [pc, #36]	; (1f39c <HciSendAclData+0xdc>)
   1f378:	695b      	ldr	r3, [r3, #20]
   1f37a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1f37e:	2101      	movs	r1, #1
   1f380:	4610      	mov	r0, r2
   1f382:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   1f384:	e002      	b.n	1f38c <HciSendAclData+0xcc>
    WsfMsgFree(pData);
   1f386:	9801      	ldr	r0, [sp, #4]
   1f388:	f7ed ff0c 	bl	d1a4 <WsfMsgFree>
}
   1f38c:	bf00      	nop
   1f38e:	b004      	add	sp, #16
   1f390:	bd10      	pop	{r4, pc}
   1f392:	bf00      	nop
   1f394:	100097d8 	.word	0x100097d8
   1f398:	10009774 	.word	0x10009774
   1f39c:	1000973c 	.word	0x1000973c

0001f3a0 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   1f3a0:	b508      	push	{r3, lr}
  hciCmdInit();
   1f3a2:	f7fe fccb 	bl	1dd3c <hciCmdInit>
}
   1f3a6:	bf00      	nop
   1f3a8:	bd08      	pop	{r3, pc}
	...

0001f3ac <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   1f3ac:	b500      	push	{lr}
   1f3ae:	b087      	sub	sp, #28
   1f3b0:	9001      	str	r0, [sp, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   1f3b2:	2300      	movs	r3, #0
   1f3b4:	f88d 3016 	strb.w	r3, [sp, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   1f3b8:	9b01      	ldr	r3, [sp, #4]
   1f3ba:	1c5a      	adds	r2, r3, #1
   1f3bc:	9201      	str	r2, [sp, #4]
   1f3be:	781b      	ldrb	r3, [r3, #0]
   1f3c0:	f88d 3017 	strb.w	r3, [sp, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   1f3c4:	e055      	b.n	1f472 <hciCoreNumCmplPkts+0xc6>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   1f3c6:	9b01      	ldr	r3, [sp, #4]
   1f3c8:	781b      	ldrb	r3, [r3, #0]
   1f3ca:	b29a      	uxth	r2, r3
   1f3cc:	9b01      	ldr	r3, [sp, #4]
   1f3ce:	3301      	adds	r3, #1
   1f3d0:	781b      	ldrb	r3, [r3, #0]
   1f3d2:	b29b      	uxth	r3, r3
   1f3d4:	021b      	lsls	r3, r3, #8
   1f3d6:	b29b      	uxth	r3, r3
   1f3d8:	4413      	add	r3, r2
   1f3da:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f3de:	9b01      	ldr	r3, [sp, #4]
   1f3e0:	3302      	adds	r3, #2
   1f3e2:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   1f3e4:	9b01      	ldr	r3, [sp, #4]
   1f3e6:	781b      	ldrb	r3, [r3, #0]
   1f3e8:	b29a      	uxth	r2, r3
   1f3ea:	9b01      	ldr	r3, [sp, #4]
   1f3ec:	3301      	adds	r3, #1
   1f3ee:	781b      	ldrb	r3, [r3, #0]
   1f3f0:	b29b      	uxth	r3, r3
   1f3f2:	021b      	lsls	r3, r3, #8
   1f3f4:	b29b      	uxth	r3, r3
   1f3f6:	4413      	add	r3, r2
   1f3f8:	f8ad 3012 	strh.w	r3, [sp, #18]
   1f3fc:	9b01      	ldr	r3, [sp, #4]
   1f3fe:	3302      	adds	r3, #2
   1f400:	9301      	str	r3, [sp, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1f402:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f406:	4618      	mov	r0, r3
   1f408:	f7ff fbd8 	bl	1ebbc <hciCoreConnByHandle>
   1f40c:	9003      	str	r0, [sp, #12]
   1f40e:	9b03      	ldr	r3, [sp, #12]
   1f410:	2b00      	cmp	r3, #0
   1f412:	d02e      	beq.n	1f472 <hciCoreNumCmplPkts+0xc6>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   1f414:	9b03      	ldr	r3, [sp, #12]
   1f416:	7e5a      	ldrb	r2, [r3, #25]
   1f418:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1f41c:	b2db      	uxtb	r3, r3
   1f41e:	1ad3      	subs	r3, r2, r3
   1f420:	b2da      	uxtb	r2, r3
   1f422:	9b03      	ldr	r3, [sp, #12]
   1f424:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   1f426:	9b03      	ldr	r3, [sp, #12]
   1f428:	7e1a      	ldrb	r2, [r3, #24]
   1f42a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1f42e:	b2db      	uxtb	r3, r3
   1f430:	1ad3      	subs	r3, r2, r3
   1f432:	b2da      	uxtb	r2, r3
   1f434:	9b03      	ldr	r3, [sp, #12]
   1f436:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   1f438:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1f43c:	b2da      	uxtb	r2, r3
   1f43e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1f442:	4413      	add	r3, r2
   1f444:	f88d 3016 	strb.w	r3, [sp, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   1f448:	9b03      	ldr	r3, [sp, #12]
   1f44a:	7ddb      	ldrb	r3, [r3, #23]
   1f44c:	2b00      	cmp	r3, #0
   1f44e:	d010      	beq.n	1f472 <hciCoreNumCmplPkts+0xc6>
   1f450:	9b03      	ldr	r3, [sp, #12]
   1f452:	7e1a      	ldrb	r2, [r3, #24]
   1f454:	4b0f      	ldr	r3, [pc, #60]	; (1f494 <hciCoreNumCmplPkts+0xe8>)
   1f456:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   1f45a:	429a      	cmp	r2, r3
   1f45c:	d809      	bhi.n	1f472 <hciCoreNumCmplPkts+0xc6>
      {
        pConn->flowDisabled = FALSE;
   1f45e:	9b03      	ldr	r3, [sp, #12]
   1f460:	2200      	movs	r2, #0
   1f462:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   1f464:	4b0c      	ldr	r3, [pc, #48]	; (1f498 <hciCoreNumCmplPkts+0xec>)
   1f466:	695b      	ldr	r3, [r3, #20]
   1f468:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f46c:	2100      	movs	r1, #0
   1f46e:	4610      	mov	r0, r2
   1f470:	4798      	blx	r3
  while (numHandles-- > 0)
   1f472:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1f476:	1e5a      	subs	r2, r3, #1
   1f478:	f88d 2017 	strb.w	r2, [sp, #23]
   1f47c:	2b00      	cmp	r3, #0
   1f47e:	d1a2      	bne.n	1f3c6 <hciCoreNumCmplPkts+0x1a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   1f480:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1f484:	4618      	mov	r0, r3
   1f486:	f7ff fc21 	bl	1eccc <hciCoreTxReady>
}
   1f48a:	bf00      	nop
   1f48c:	b007      	add	sp, #28
   1f48e:	f85d fb04 	ldr.w	pc, [sp], #4
   1f492:	bf00      	nop
   1f494:	10009774 	.word	0x10009774
   1f498:	1000973c 	.word	0x1000973c

0001f49c <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   1f49c:	b500      	push	{lr}
   1f49e:	b083      	sub	sp, #12
   1f4a0:	4603      	mov	r3, r0
   1f4a2:	9100      	str	r1, [sp, #0]
   1f4a4:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   1f4a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4ac:	9a00      	ldr	r2, [sp, #0]
   1f4ae:	4619      	mov	r1, r3
   1f4b0:	4806      	ldr	r0, [pc, #24]	; (1f4cc <hciCoreRecv+0x30>)
   1f4b2:	f7ed fe9e 	bl	d1f2 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   1f4b6:	4b05      	ldr	r3, [pc, #20]	; (1f4cc <hciCoreRecv+0x30>)
   1f4b8:	7e1b      	ldrb	r3, [r3, #24]
   1f4ba:	2101      	movs	r1, #1
   1f4bc:	4618      	mov	r0, r3
   1f4be:	f7ed ff39 	bl	d334 <WsfSetEvent>
}
   1f4c2:	bf00      	nop
   1f4c4:	b003      	add	sp, #12
   1f4c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1f4ca:	bf00      	nop
   1f4cc:	1000973c 	.word	0x1000973c

0001f4d0 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1f4d0:	b500      	push	{lr}
   1f4d2:	b085      	sub	sp, #20
   1f4d4:	4603      	mov	r3, r0
   1f4d6:	9100      	str	r1, [sp, #0]
   1f4d8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   1f4dc:	9b00      	ldr	r3, [sp, #0]
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	d007      	beq.n	1f4f2 <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   1f4e2:	9b00      	ldr	r3, [sp, #0]
   1f4e4:	789b      	ldrb	r3, [r3, #2]
   1f4e6:	2b01      	cmp	r3, #1
   1f4e8:	d131      	bne.n	1f54e <HciCoreHandler+0x7e>
    {
      hciCmdTimeout(pMsg);
   1f4ea:	9800      	ldr	r0, [sp, #0]
   1f4ec:	f7fe fc3c 	bl	1dd68 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   1f4f0:	e02d      	b.n	1f54e <HciCoreHandler+0x7e>
  else if (event & HCI_EVT_RX)
   1f4f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4f6:	f003 0301 	and.w	r3, r3, #1
   1f4fa:	2b00      	cmp	r3, #0
   1f4fc:	d027      	beq.n	1f54e <HciCoreHandler+0x7e>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1f4fe:	e01c      	b.n	1f53a <HciCoreHandler+0x6a>
      if (handlerId == HCI_EVT_TYPE)
   1f500:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1f504:	2b04      	cmp	r3, #4
   1f506:	d10d      	bne.n	1f524 <HciCoreHandler+0x54>
        hciEvtProcessMsg(pBuf);
   1f508:	9803      	ldr	r0, [sp, #12]
   1f50a:	f001 fc81 	bl	20e10 <hciEvtProcessMsg>
        if (hciCb.resetting)
   1f50e:	4b12      	ldr	r3, [pc, #72]	; (1f558 <HciCoreHandler+0x88>)
   1f510:	7e5b      	ldrb	r3, [r3, #25]
   1f512:	2b00      	cmp	r3, #0
   1f514:	d002      	beq.n	1f51c <HciCoreHandler+0x4c>
          hciCoreResetSequence(pBuf);
   1f516:	9803      	ldr	r0, [sp, #12]
   1f518:	f002 f88c 	bl	21634 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   1f51c:	9803      	ldr	r0, [sp, #12]
   1f51e:	f7ed fe41 	bl	d1a4 <WsfMsgFree>
   1f522:	e00a      	b.n	1f53a <HciCoreHandler+0x6a>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   1f524:	9803      	ldr	r0, [sp, #12]
   1f526:	f7ff fd11 	bl	1ef4c <hciCoreAclReassembly>
   1f52a:	9003      	str	r0, [sp, #12]
   1f52c:	9b03      	ldr	r3, [sp, #12]
   1f52e:	2b00      	cmp	r3, #0
   1f530:	d003      	beq.n	1f53a <HciCoreHandler+0x6a>
          hciCb.aclCback(pBuf);
   1f532:	4b09      	ldr	r3, [pc, #36]	; (1f558 <HciCoreHandler+0x88>)
   1f534:	691b      	ldr	r3, [r3, #16]
   1f536:	9803      	ldr	r0, [sp, #12]
   1f538:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1f53a:	f10d 030b 	add.w	r3, sp, #11
   1f53e:	4619      	mov	r1, r3
   1f540:	4805      	ldr	r0, [pc, #20]	; (1f558 <HciCoreHandler+0x88>)
   1f542:	f7ed fe6c 	bl	d21e <WsfMsgDeq>
   1f546:	9003      	str	r0, [sp, #12]
   1f548:	9b03      	ldr	r3, [sp, #12]
   1f54a:	2b00      	cmp	r3, #0
   1f54c:	d1d8      	bne.n	1f500 <HciCoreHandler+0x30>
}
   1f54e:	bf00      	nop
   1f550:	b005      	add	sp, #20
   1f552:	f85d fb04 	ldr.w	pc, [sp], #4
   1f556:	bf00      	nop
   1f558:	1000973c 	.word	0x1000973c

0001f55c <HciGetBdAddr>:
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
   1f55c:	4b01      	ldr	r3, [pc, #4]	; (1f564 <HciGetBdAddr+0x8>)
}
   1f55e:	4618      	mov	r0, r3
   1f560:	4770      	bx	lr
   1f562:	bf00      	nop
   1f564:	100097d0 	.word	0x100097d0

0001f568 <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
   1f568:	4b02      	ldr	r3, [pc, #8]	; (1f574 <HciGetBufSize+0xc>)
   1f56a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
}
   1f56e:	4618      	mov	r0, r3
   1f570:	4770      	bx	lr
   1f572:	bf00      	nop
   1f574:	10009774 	.word	0x10009774

0001f578 <HciGetLeSupFeat>:
/*************************************************************************************************/
uint32_t HciGetLeSupFeat(void)
{
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   1f578:	4b02      	ldr	r3, [pc, #8]	; (1f584 <HciGetLeSupFeat+0xc>)
   1f57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1f57c:	f023 0302 	bic.w	r3, r3, #2
}
   1f580:	4618      	mov	r0, r3
   1f582:	4770      	bx	lr
   1f584:	10009774 	.word	0x10009774

0001f588 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
   1f588:	4b02      	ldr	r3, [pc, #8]	; (1f594 <HciGetMaxRxAclLen+0xc>)
   1f58a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
   1f58e:	4618      	mov	r0, r3
   1f590:	4770      	bx	lr
   1f592:	bf00      	nop
   1f594:	10009774 	.word	0x10009774

0001f598 <HciLlPrivacySupported>:
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   1f598:	4b04      	ldr	r3, [pc, #16]	; (1f5ac <HciLlPrivacySupported+0x14>)
   1f59a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
   1f59e:	2b00      	cmp	r3, #0
   1f5a0:	bf14      	ite	ne
   1f5a2:	2301      	movne	r3, #1
   1f5a4:	2300      	moveq	r3, #0
   1f5a6:	b2db      	uxtb	r3, r3
}
   1f5a8:	4618      	mov	r0, r3
   1f5aa:	4770      	bx	lr
   1f5ac:	10009774 	.word	0x10009774

0001f5b0 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f5b0:	b500      	push	{lr}
   1f5b2:	b085      	sub	sp, #20
   1f5b4:	9003      	str	r0, [sp, #12]
   1f5b6:	9102      	str	r1, [sp, #8]
   1f5b8:	4613      	mov	r3, r2
   1f5ba:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1f5be:	9b02      	ldr	r3, [sp, #8]
   1f5c0:	1c5a      	adds	r2, r3, #1
   1f5c2:	9202      	str	r2, [sp, #8]
   1f5c4:	781a      	ldrb	r2, [r3, #0]
   1f5c6:	9b03      	ldr	r3, [sp, #12]
   1f5c8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1f5ca:	9b02      	ldr	r3, [sp, #8]
   1f5cc:	781b      	ldrb	r3, [r3, #0]
   1f5ce:	b29a      	uxth	r2, r3
   1f5d0:	9b02      	ldr	r3, [sp, #8]
   1f5d2:	3301      	adds	r3, #1
   1f5d4:	781b      	ldrb	r3, [r3, #0]
   1f5d6:	b29b      	uxth	r3, r3
   1f5d8:	021b      	lsls	r3, r3, #8
   1f5da:	b29b      	uxth	r3, r3
   1f5dc:	4413      	add	r3, r2
   1f5de:	b29a      	uxth	r2, r3
   1f5e0:	9b03      	ldr	r3, [sp, #12]
   1f5e2:	80da      	strh	r2, [r3, #6]
   1f5e4:	9b02      	ldr	r3, [sp, #8]
   1f5e6:	3302      	adds	r3, #2
   1f5e8:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1f5ea:	9b02      	ldr	r3, [sp, #8]
   1f5ec:	1c5a      	adds	r2, r3, #1
   1f5ee:	9202      	str	r2, [sp, #8]
   1f5f0:	781a      	ldrb	r2, [r3, #0]
   1f5f2:	9b03      	ldr	r3, [sp, #12]
   1f5f4:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1f5f6:	9b02      	ldr	r3, [sp, #8]
   1f5f8:	1c5a      	adds	r2, r3, #1
   1f5fa:	9202      	str	r2, [sp, #8]
   1f5fc:	781a      	ldrb	r2, [r3, #0]
   1f5fe:	9b03      	ldr	r3, [sp, #12]
   1f600:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1f602:	9b03      	ldr	r3, [sp, #12]
   1f604:	330a      	adds	r3, #10
   1f606:	9902      	ldr	r1, [sp, #8]
   1f608:	4618      	mov	r0, r3
   1f60a:	f7f4 ff4d 	bl	144a8 <BdaCpy>
   1f60e:	9b02      	ldr	r3, [sp, #8]
   1f610:	3306      	adds	r3, #6
   1f612:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   1f614:	9b02      	ldr	r3, [sp, #8]
   1f616:	781b      	ldrb	r3, [r3, #0]
   1f618:	b29a      	uxth	r2, r3
   1f61a:	9b02      	ldr	r3, [sp, #8]
   1f61c:	3301      	adds	r3, #1
   1f61e:	781b      	ldrb	r3, [r3, #0]
   1f620:	b29b      	uxth	r3, r3
   1f622:	021b      	lsls	r3, r3, #8
   1f624:	b29b      	uxth	r3, r3
   1f626:	4413      	add	r3, r2
   1f628:	b29a      	uxth	r2, r3
   1f62a:	9b03      	ldr	r3, [sp, #12]
   1f62c:	821a      	strh	r2, [r3, #16]
   1f62e:	9b02      	ldr	r3, [sp, #8]
   1f630:	3302      	adds	r3, #2
   1f632:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1f634:	9b02      	ldr	r3, [sp, #8]
   1f636:	781b      	ldrb	r3, [r3, #0]
   1f638:	b29a      	uxth	r2, r3
   1f63a:	9b02      	ldr	r3, [sp, #8]
   1f63c:	3301      	adds	r3, #1
   1f63e:	781b      	ldrb	r3, [r3, #0]
   1f640:	b29b      	uxth	r3, r3
   1f642:	021b      	lsls	r3, r3, #8
   1f644:	b29b      	uxth	r3, r3
   1f646:	4413      	add	r3, r2
   1f648:	b29a      	uxth	r2, r3
   1f64a:	9b03      	ldr	r3, [sp, #12]
   1f64c:	825a      	strh	r2, [r3, #18]
   1f64e:	9b02      	ldr	r3, [sp, #8]
   1f650:	3302      	adds	r3, #2
   1f652:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   1f654:	9b02      	ldr	r3, [sp, #8]
   1f656:	781b      	ldrb	r3, [r3, #0]
   1f658:	b29a      	uxth	r2, r3
   1f65a:	9b02      	ldr	r3, [sp, #8]
   1f65c:	3301      	adds	r3, #1
   1f65e:	781b      	ldrb	r3, [r3, #0]
   1f660:	b29b      	uxth	r3, r3
   1f662:	021b      	lsls	r3, r3, #8
   1f664:	b29b      	uxth	r3, r3
   1f666:	4413      	add	r3, r2
   1f668:	b29a      	uxth	r2, r3
   1f66a:	9b03      	ldr	r3, [sp, #12]
   1f66c:	829a      	strh	r2, [r3, #20]
   1f66e:	9b02      	ldr	r3, [sp, #8]
   1f670:	3302      	adds	r3, #2
   1f672:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1f674:	9b02      	ldr	r3, [sp, #8]
   1f676:	1c5a      	adds	r2, r3, #1
   1f678:	9202      	str	r2, [sp, #8]
   1f67a:	781a      	ldrb	r2, [r3, #0]
   1f67c:	9b03      	ldr	r3, [sp, #12]
   1f67e:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   1f680:	9b03      	ldr	r3, [sp, #12]
   1f682:	3317      	adds	r3, #23
   1f684:	2206      	movs	r2, #6
   1f686:	2100      	movs	r1, #0
   1f688:	4618      	mov	r0, r3
   1f68a:	f008 fed7 	bl	2843c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   1f68e:	9b03      	ldr	r3, [sp, #12]
   1f690:	331d      	adds	r3, #29
   1f692:	2206      	movs	r2, #6
   1f694:	2100      	movs	r1, #0
   1f696:	4618      	mov	r0, r3
   1f698:	f008 fed0 	bl	2843c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1f69c:	9b03      	ldr	r3, [sp, #12]
   1f69e:	88da      	ldrh	r2, [r3, #6]
   1f6a0:	9b03      	ldr	r3, [sp, #12]
   1f6a2:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1f6a4:	9b03      	ldr	r3, [sp, #12]
   1f6a6:	791a      	ldrb	r2, [r3, #4]
   1f6a8:	9b03      	ldr	r3, [sp, #12]
   1f6aa:	70da      	strb	r2, [r3, #3]
}
   1f6ac:	bf00      	nop
   1f6ae:	b005      	add	sp, #20
   1f6b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001f6b4 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f6b4:	b500      	push	{lr}
   1f6b6:	b085      	sub	sp, #20
   1f6b8:	9003      	str	r0, [sp, #12]
   1f6ba:	9102      	str	r1, [sp, #8]
   1f6bc:	4613      	mov	r3, r2
   1f6be:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1f6c2:	9b02      	ldr	r3, [sp, #8]
   1f6c4:	1c5a      	adds	r2, r3, #1
   1f6c6:	9202      	str	r2, [sp, #8]
   1f6c8:	781a      	ldrb	r2, [r3, #0]
   1f6ca:	9b03      	ldr	r3, [sp, #12]
   1f6cc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1f6ce:	9b02      	ldr	r3, [sp, #8]
   1f6d0:	781b      	ldrb	r3, [r3, #0]
   1f6d2:	b29a      	uxth	r2, r3
   1f6d4:	9b02      	ldr	r3, [sp, #8]
   1f6d6:	3301      	adds	r3, #1
   1f6d8:	781b      	ldrb	r3, [r3, #0]
   1f6da:	b29b      	uxth	r3, r3
   1f6dc:	021b      	lsls	r3, r3, #8
   1f6de:	b29b      	uxth	r3, r3
   1f6e0:	4413      	add	r3, r2
   1f6e2:	b29a      	uxth	r2, r3
   1f6e4:	9b03      	ldr	r3, [sp, #12]
   1f6e6:	80da      	strh	r2, [r3, #6]
   1f6e8:	9b02      	ldr	r3, [sp, #8]
   1f6ea:	3302      	adds	r3, #2
   1f6ec:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1f6ee:	9b02      	ldr	r3, [sp, #8]
   1f6f0:	1c5a      	adds	r2, r3, #1
   1f6f2:	9202      	str	r2, [sp, #8]
   1f6f4:	781a      	ldrb	r2, [r3, #0]
   1f6f6:	9b03      	ldr	r3, [sp, #12]
   1f6f8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1f6fa:	9b02      	ldr	r3, [sp, #8]
   1f6fc:	1c5a      	adds	r2, r3, #1
   1f6fe:	9202      	str	r2, [sp, #8]
   1f700:	781a      	ldrb	r2, [r3, #0]
   1f702:	9b03      	ldr	r3, [sp, #12]
   1f704:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1f706:	9b03      	ldr	r3, [sp, #12]
   1f708:	330a      	adds	r3, #10
   1f70a:	9902      	ldr	r1, [sp, #8]
   1f70c:	4618      	mov	r0, r3
   1f70e:	f7f4 fecb 	bl	144a8 <BdaCpy>
   1f712:	9b02      	ldr	r3, [sp, #8]
   1f714:	3306      	adds	r3, #6
   1f716:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   1f718:	9b03      	ldr	r3, [sp, #12]
   1f71a:	3317      	adds	r3, #23
   1f71c:	9902      	ldr	r1, [sp, #8]
   1f71e:	4618      	mov	r0, r3
   1f720:	f7f4 fec2 	bl	144a8 <BdaCpy>
   1f724:	9b02      	ldr	r3, [sp, #8]
   1f726:	3306      	adds	r3, #6
   1f728:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   1f72a:	9b03      	ldr	r3, [sp, #12]
   1f72c:	331d      	adds	r3, #29
   1f72e:	9902      	ldr	r1, [sp, #8]
   1f730:	4618      	mov	r0, r3
   1f732:	f7f4 feb9 	bl	144a8 <BdaCpy>
   1f736:	9b02      	ldr	r3, [sp, #8]
   1f738:	3306      	adds	r3, #6
   1f73a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   1f73c:	9b02      	ldr	r3, [sp, #8]
   1f73e:	781b      	ldrb	r3, [r3, #0]
   1f740:	b29a      	uxth	r2, r3
   1f742:	9b02      	ldr	r3, [sp, #8]
   1f744:	3301      	adds	r3, #1
   1f746:	781b      	ldrb	r3, [r3, #0]
   1f748:	b29b      	uxth	r3, r3
   1f74a:	021b      	lsls	r3, r3, #8
   1f74c:	b29b      	uxth	r3, r3
   1f74e:	4413      	add	r3, r2
   1f750:	b29a      	uxth	r2, r3
   1f752:	9b03      	ldr	r3, [sp, #12]
   1f754:	821a      	strh	r2, [r3, #16]
   1f756:	9b02      	ldr	r3, [sp, #8]
   1f758:	3302      	adds	r3, #2
   1f75a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1f75c:	9b02      	ldr	r3, [sp, #8]
   1f75e:	781b      	ldrb	r3, [r3, #0]
   1f760:	b29a      	uxth	r2, r3
   1f762:	9b02      	ldr	r3, [sp, #8]
   1f764:	3301      	adds	r3, #1
   1f766:	781b      	ldrb	r3, [r3, #0]
   1f768:	b29b      	uxth	r3, r3
   1f76a:	021b      	lsls	r3, r3, #8
   1f76c:	b29b      	uxth	r3, r3
   1f76e:	4413      	add	r3, r2
   1f770:	b29a      	uxth	r2, r3
   1f772:	9b03      	ldr	r3, [sp, #12]
   1f774:	825a      	strh	r2, [r3, #18]
   1f776:	9b02      	ldr	r3, [sp, #8]
   1f778:	3302      	adds	r3, #2
   1f77a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   1f77c:	9b02      	ldr	r3, [sp, #8]
   1f77e:	781b      	ldrb	r3, [r3, #0]
   1f780:	b29a      	uxth	r2, r3
   1f782:	9b02      	ldr	r3, [sp, #8]
   1f784:	3301      	adds	r3, #1
   1f786:	781b      	ldrb	r3, [r3, #0]
   1f788:	b29b      	uxth	r3, r3
   1f78a:	021b      	lsls	r3, r3, #8
   1f78c:	b29b      	uxth	r3, r3
   1f78e:	4413      	add	r3, r2
   1f790:	b29a      	uxth	r2, r3
   1f792:	9b03      	ldr	r3, [sp, #12]
   1f794:	829a      	strh	r2, [r3, #20]
   1f796:	9b02      	ldr	r3, [sp, #8]
   1f798:	3302      	adds	r3, #2
   1f79a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1f79c:	9b02      	ldr	r3, [sp, #8]
   1f79e:	1c5a      	adds	r2, r3, #1
   1f7a0:	9202      	str	r2, [sp, #8]
   1f7a2:	781a      	ldrb	r2, [r3, #0]
   1f7a4:	9b03      	ldr	r3, [sp, #12]
   1f7a6:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1f7a8:	9b03      	ldr	r3, [sp, #12]
   1f7aa:	88da      	ldrh	r2, [r3, #6]
   1f7ac:	9b03      	ldr	r3, [sp, #12]
   1f7ae:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1f7b0:	9b03      	ldr	r3, [sp, #12]
   1f7b2:	791a      	ldrb	r2, [r3, #4]
   1f7b4:	9b03      	ldr	r3, [sp, #12]
   1f7b6:	70da      	strb	r2, [r3, #3]
}
   1f7b8:	bf00      	nop
   1f7ba:	b005      	add	sp, #20
   1f7bc:	f85d fb04 	ldr.w	pc, [sp], #4

0001f7c0 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f7c0:	b084      	sub	sp, #16
   1f7c2:	9003      	str	r0, [sp, #12]
   1f7c4:	9102      	str	r1, [sp, #8]
   1f7c6:	4613      	mov	r3, r2
   1f7c8:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   1f7cc:	9b02      	ldr	r3, [sp, #8]
   1f7ce:	1c5a      	adds	r2, r3, #1
   1f7d0:	9202      	str	r2, [sp, #8]
   1f7d2:	781a      	ldrb	r2, [r3, #0]
   1f7d4:	9b03      	ldr	r3, [sp, #12]
   1f7d6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   1f7d8:	9b02      	ldr	r3, [sp, #8]
   1f7da:	781b      	ldrb	r3, [r3, #0]
   1f7dc:	b29a      	uxth	r2, r3
   1f7de:	9b02      	ldr	r3, [sp, #8]
   1f7e0:	3301      	adds	r3, #1
   1f7e2:	781b      	ldrb	r3, [r3, #0]
   1f7e4:	b29b      	uxth	r3, r3
   1f7e6:	021b      	lsls	r3, r3, #8
   1f7e8:	b29b      	uxth	r3, r3
   1f7ea:	4413      	add	r3, r2
   1f7ec:	b29a      	uxth	r2, r3
   1f7ee:	9b03      	ldr	r3, [sp, #12]
   1f7f0:	80da      	strh	r2, [r3, #6]
   1f7f2:	9b02      	ldr	r3, [sp, #8]
   1f7f4:	3302      	adds	r3, #2
   1f7f6:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   1f7f8:	9b02      	ldr	r3, [sp, #8]
   1f7fa:	1c5a      	adds	r2, r3, #1
   1f7fc:	9202      	str	r2, [sp, #8]
   1f7fe:	781a      	ldrb	r2, [r3, #0]
   1f800:	9b03      	ldr	r3, [sp, #12]
   1f802:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   1f804:	9b03      	ldr	r3, [sp, #12]
   1f806:	88da      	ldrh	r2, [r3, #6]
   1f808:	9b03      	ldr	r3, [sp, #12]
   1f80a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   1f80c:	9b03      	ldr	r3, [sp, #12]
   1f80e:	791a      	ldrb	r2, [r3, #4]
   1f810:	9b03      	ldr	r3, [sp, #12]
   1f812:	70da      	strb	r2, [r3, #3]
}
   1f814:	bf00      	nop
   1f816:	b004      	add	sp, #16
   1f818:	4770      	bx	lr

0001f81a <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f81a:	b084      	sub	sp, #16
   1f81c:	9003      	str	r0, [sp, #12]
   1f81e:	9102      	str	r1, [sp, #8]
   1f820:	4613      	mov	r3, r2
   1f822:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   1f826:	9b02      	ldr	r3, [sp, #8]
   1f828:	1c5a      	adds	r2, r3, #1
   1f82a:	9202      	str	r2, [sp, #8]
   1f82c:	781a      	ldrb	r2, [r3, #0]
   1f82e:	9b03      	ldr	r3, [sp, #12]
   1f830:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   1f832:	9b02      	ldr	r3, [sp, #8]
   1f834:	781b      	ldrb	r3, [r3, #0]
   1f836:	b29a      	uxth	r2, r3
   1f838:	9b02      	ldr	r3, [sp, #8]
   1f83a:	3301      	adds	r3, #1
   1f83c:	781b      	ldrb	r3, [r3, #0]
   1f83e:	b29b      	uxth	r3, r3
   1f840:	021b      	lsls	r3, r3, #8
   1f842:	b29b      	uxth	r3, r3
   1f844:	4413      	add	r3, r2
   1f846:	b29a      	uxth	r2, r3
   1f848:	9b03      	ldr	r3, [sp, #12]
   1f84a:	80da      	strh	r2, [r3, #6]
   1f84c:	9b02      	ldr	r3, [sp, #8]
   1f84e:	3302      	adds	r3, #2
   1f850:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   1f852:	9b02      	ldr	r3, [sp, #8]
   1f854:	781b      	ldrb	r3, [r3, #0]
   1f856:	b29a      	uxth	r2, r3
   1f858:	9b02      	ldr	r3, [sp, #8]
   1f85a:	3301      	adds	r3, #1
   1f85c:	781b      	ldrb	r3, [r3, #0]
   1f85e:	b29b      	uxth	r3, r3
   1f860:	021b      	lsls	r3, r3, #8
   1f862:	b29b      	uxth	r3, r3
   1f864:	4413      	add	r3, r2
   1f866:	b29a      	uxth	r2, r3
   1f868:	9b03      	ldr	r3, [sp, #12]
   1f86a:	811a      	strh	r2, [r3, #8]
   1f86c:	9b02      	ldr	r3, [sp, #8]
   1f86e:	3302      	adds	r3, #2
   1f870:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   1f872:	9b02      	ldr	r3, [sp, #8]
   1f874:	781b      	ldrb	r3, [r3, #0]
   1f876:	b29a      	uxth	r2, r3
   1f878:	9b02      	ldr	r3, [sp, #8]
   1f87a:	3301      	adds	r3, #1
   1f87c:	781b      	ldrb	r3, [r3, #0]
   1f87e:	b29b      	uxth	r3, r3
   1f880:	021b      	lsls	r3, r3, #8
   1f882:	b29b      	uxth	r3, r3
   1f884:	4413      	add	r3, r2
   1f886:	b29a      	uxth	r2, r3
   1f888:	9b03      	ldr	r3, [sp, #12]
   1f88a:	815a      	strh	r2, [r3, #10]
   1f88c:	9b02      	ldr	r3, [sp, #8]
   1f88e:	3302      	adds	r3, #2
   1f890:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   1f892:	9b02      	ldr	r3, [sp, #8]
   1f894:	781b      	ldrb	r3, [r3, #0]
   1f896:	b29a      	uxth	r2, r3
   1f898:	9b02      	ldr	r3, [sp, #8]
   1f89a:	3301      	adds	r3, #1
   1f89c:	781b      	ldrb	r3, [r3, #0]
   1f89e:	b29b      	uxth	r3, r3
   1f8a0:	021b      	lsls	r3, r3, #8
   1f8a2:	b29b      	uxth	r3, r3
   1f8a4:	4413      	add	r3, r2
   1f8a6:	b29a      	uxth	r2, r3
   1f8a8:	9b03      	ldr	r3, [sp, #12]
   1f8aa:	819a      	strh	r2, [r3, #12]
   1f8ac:	9b02      	ldr	r3, [sp, #8]
   1f8ae:	3302      	adds	r3, #2
   1f8b0:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   1f8b2:	9b03      	ldr	r3, [sp, #12]
   1f8b4:	88da      	ldrh	r2, [r3, #6]
   1f8b6:	9b03      	ldr	r3, [sp, #12]
   1f8b8:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   1f8ba:	9b03      	ldr	r3, [sp, #12]
   1f8bc:	791a      	ldrb	r2, [r3, #4]
   1f8be:	9b03      	ldr	r3, [sp, #12]
   1f8c0:	70da      	strb	r2, [r3, #3]
}
   1f8c2:	bf00      	nop
   1f8c4:	b004      	add	sp, #16
   1f8c6:	4770      	bx	lr

0001f8c8 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f8c8:	b084      	sub	sp, #16
   1f8ca:	9003      	str	r0, [sp, #12]
   1f8cc:	9102      	str	r1, [sp, #8]
   1f8ce:	4613      	mov	r3, r2
   1f8d0:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   1f8d4:	9b02      	ldr	r3, [sp, #8]
   1f8d6:	1c5a      	adds	r2, r3, #1
   1f8d8:	9202      	str	r2, [sp, #8]
   1f8da:	781a      	ldrb	r2, [r3, #0]
   1f8dc:	9b03      	ldr	r3, [sp, #12]
   1f8de:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   1f8e0:	9b03      	ldr	r3, [sp, #12]
   1f8e2:	791a      	ldrb	r2, [r3, #4]
   1f8e4:	9b03      	ldr	r3, [sp, #12]
   1f8e6:	70da      	strb	r2, [r3, #3]
}
   1f8e8:	bf00      	nop
   1f8ea:	b004      	add	sp, #16
   1f8ec:	4770      	bx	lr

0001f8ee <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f8ee:	b084      	sub	sp, #16
   1f8f0:	9003      	str	r0, [sp, #12]
   1f8f2:	9102      	str	r1, [sp, #8]
   1f8f4:	4613      	mov	r3, r2
   1f8f6:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   1f8fa:	9b02      	ldr	r3, [sp, #8]
   1f8fc:	1c5a      	adds	r2, r3, #1
   1f8fe:	9202      	str	r2, [sp, #8]
   1f900:	781a      	ldrb	r2, [r3, #0]
   1f902:	9b03      	ldr	r3, [sp, #12]
   1f904:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   1f906:	9b02      	ldr	r3, [sp, #8]
   1f908:	781b      	ldrb	r3, [r3, #0]
   1f90a:	b29a      	uxth	r2, r3
   1f90c:	9b02      	ldr	r3, [sp, #8]
   1f90e:	3301      	adds	r3, #1
   1f910:	781b      	ldrb	r3, [r3, #0]
   1f912:	b29b      	uxth	r3, r3
   1f914:	021b      	lsls	r3, r3, #8
   1f916:	b29b      	uxth	r3, r3
   1f918:	4413      	add	r3, r2
   1f91a:	b29a      	uxth	r2, r3
   1f91c:	9b03      	ldr	r3, [sp, #12]
   1f91e:	80da      	strh	r2, [r3, #6]
   1f920:	9b02      	ldr	r3, [sp, #8]
   1f922:	3302      	adds	r3, #2
   1f924:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   1f926:	9b02      	ldr	r3, [sp, #8]
   1f928:	1c5a      	adds	r2, r3, #1
   1f92a:	9202      	str	r2, [sp, #8]
   1f92c:	781b      	ldrb	r3, [r3, #0]
   1f92e:	b25a      	sxtb	r2, r3
   1f930:	9b03      	ldr	r3, [sp, #12]
   1f932:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   1f934:	9b03      	ldr	r3, [sp, #12]
   1f936:	88da      	ldrh	r2, [r3, #6]
   1f938:	9b03      	ldr	r3, [sp, #12]
   1f93a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   1f93c:	9b03      	ldr	r3, [sp, #12]
   1f93e:	791a      	ldrb	r2, [r3, #4]
   1f940:	9b03      	ldr	r3, [sp, #12]
   1f942:	70da      	strb	r2, [r3, #3]
}
   1f944:	bf00      	nop
   1f946:	b004      	add	sp, #16
   1f948:	4770      	bx	lr

0001f94a <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f94a:	b500      	push	{lr}
   1f94c:	b085      	sub	sp, #20
   1f94e:	9003      	str	r0, [sp, #12]
   1f950:	9102      	str	r1, [sp, #8]
   1f952:	4613      	mov	r3, r2
   1f954:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   1f958:	9b02      	ldr	r3, [sp, #8]
   1f95a:	1c5a      	adds	r2, r3, #1
   1f95c:	9202      	str	r2, [sp, #8]
   1f95e:	781a      	ldrb	r2, [r3, #0]
   1f960:	9b03      	ldr	r3, [sp, #12]
   1f962:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   1f964:	9b02      	ldr	r3, [sp, #8]
   1f966:	781b      	ldrb	r3, [r3, #0]
   1f968:	b29a      	uxth	r2, r3
   1f96a:	9b02      	ldr	r3, [sp, #8]
   1f96c:	3301      	adds	r3, #1
   1f96e:	781b      	ldrb	r3, [r3, #0]
   1f970:	b29b      	uxth	r3, r3
   1f972:	021b      	lsls	r3, r3, #8
   1f974:	b29b      	uxth	r3, r3
   1f976:	4413      	add	r3, r2
   1f978:	b29a      	uxth	r2, r3
   1f97a:	9b03      	ldr	r3, [sp, #12]
   1f97c:	80da      	strh	r2, [r3, #6]
   1f97e:	9b02      	ldr	r3, [sp, #8]
   1f980:	3302      	adds	r3, #2
   1f982:	9302      	str	r3, [sp, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   1f984:	9b03      	ldr	r3, [sp, #12]
   1f986:	3308      	adds	r3, #8
   1f988:	2205      	movs	r2, #5
   1f98a:	9902      	ldr	r1, [sp, #8]
   1f98c:	4618      	mov	r0, r3
   1f98e:	f7ec fbb7 	bl	c100 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   1f992:	9b03      	ldr	r3, [sp, #12]
   1f994:	88da      	ldrh	r2, [r3, #6]
   1f996:	9b03      	ldr	r3, [sp, #12]
   1f998:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   1f99a:	9b03      	ldr	r3, [sp, #12]
   1f99c:	791a      	ldrb	r2, [r3, #4]
   1f99e:	9b03      	ldr	r3, [sp, #12]
   1f9a0:	70da      	strb	r2, [r3, #3]
}
   1f9a2:	bf00      	nop
   1f9a4:	b005      	add	sp, #20
   1f9a6:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9aa <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f9aa:	b084      	sub	sp, #16
   1f9ac:	9003      	str	r0, [sp, #12]
   1f9ae:	9102      	str	r1, [sp, #8]
   1f9b0:	4613      	mov	r3, r2
   1f9b2:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   1f9b6:	9b02      	ldr	r3, [sp, #8]
   1f9b8:	1c5a      	adds	r2, r3, #1
   1f9ba:	9202      	str	r2, [sp, #8]
   1f9bc:	781a      	ldrb	r2, [r3, #0]
   1f9be:	9b03      	ldr	r3, [sp, #12]
   1f9c0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   1f9c2:	9b02      	ldr	r3, [sp, #8]
   1f9c4:	781a      	ldrb	r2, [r3, #0]
   1f9c6:	9b03      	ldr	r3, [sp, #12]
   1f9c8:	715a      	strb	r2, [r3, #5]
   1f9ca:	9b02      	ldr	r3, [sp, #8]
   1f9cc:	3302      	adds	r3, #2
   1f9ce:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   1f9d0:	9b02      	ldr	r3, [sp, #8]
   1f9d2:	1c5a      	adds	r2, r3, #1
   1f9d4:	9202      	str	r2, [sp, #8]
   1f9d6:	781b      	ldrb	r3, [r3, #0]
   1f9d8:	b25a      	sxtb	r2, r3
   1f9da:	9b03      	ldr	r3, [sp, #12]
   1f9dc:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   1f9de:	9b03      	ldr	r3, [sp, #12]
   1f9e0:	795b      	ldrb	r3, [r3, #5]
   1f9e2:	b29a      	uxth	r2, r3
   1f9e4:	9b03      	ldr	r3, [sp, #12]
   1f9e6:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   1f9e8:	9b03      	ldr	r3, [sp, #12]
   1f9ea:	791a      	ldrb	r2, [r3, #4]
   1f9ec:	9b03      	ldr	r3, [sp, #12]
   1f9ee:	70da      	strb	r2, [r3, #3]
}
   1f9f0:	bf00      	nop
   1f9f2:	b004      	add	sp, #16
   1f9f4:	4770      	bx	lr

0001f9f6 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1f9f6:	b084      	sub	sp, #16
   1f9f8:	9003      	str	r0, [sp, #12]
   1f9fa:	9102      	str	r1, [sp, #8]
   1f9fc:	4613      	mov	r3, r2
   1f9fe:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   1fa02:	9b02      	ldr	r3, [sp, #8]
   1fa04:	1c5a      	adds	r2, r3, #1
   1fa06:	9202      	str	r2, [sp, #8]
   1fa08:	781a      	ldrb	r2, [r3, #0]
   1fa0a:	9b03      	ldr	r3, [sp, #12]
   1fa0c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   1fa0e:	9b02      	ldr	r3, [sp, #8]
   1fa10:	781b      	ldrb	r3, [r3, #0]
   1fa12:	b29a      	uxth	r2, r3
   1fa14:	9b02      	ldr	r3, [sp, #8]
   1fa16:	3301      	adds	r3, #1
   1fa18:	781b      	ldrb	r3, [r3, #0]
   1fa1a:	b29b      	uxth	r3, r3
   1fa1c:	021b      	lsls	r3, r3, #8
   1fa1e:	b29b      	uxth	r3, r3
   1fa20:	4413      	add	r3, r2
   1fa22:	b29a      	uxth	r2, r3
   1fa24:	9b03      	ldr	r3, [sp, #12]
   1fa26:	80da      	strh	r2, [r3, #6]
   1fa28:	9b02      	ldr	r3, [sp, #8]
   1fa2a:	3302      	adds	r3, #2
   1fa2c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   1fa2e:	9b02      	ldr	r3, [sp, #8]
   1fa30:	1c5a      	adds	r2, r3, #1
   1fa32:	9202      	str	r2, [sp, #8]
   1fa34:	781a      	ldrb	r2, [r3, #0]
   1fa36:	9b03      	ldr	r3, [sp, #12]
   1fa38:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   1fa3a:	9b02      	ldr	r3, [sp, #8]
   1fa3c:	781b      	ldrb	r3, [r3, #0]
   1fa3e:	b29a      	uxth	r2, r3
   1fa40:	9b02      	ldr	r3, [sp, #8]
   1fa42:	3301      	adds	r3, #1
   1fa44:	781b      	ldrb	r3, [r3, #0]
   1fa46:	b29b      	uxth	r3, r3
   1fa48:	021b      	lsls	r3, r3, #8
   1fa4a:	b29b      	uxth	r3, r3
   1fa4c:	4413      	add	r3, r2
   1fa4e:	b29a      	uxth	r2, r3
   1fa50:	9b03      	ldr	r3, [sp, #12]
   1fa52:	815a      	strh	r2, [r3, #10]
   1fa54:	9b02      	ldr	r3, [sp, #8]
   1fa56:	3302      	adds	r3, #2
   1fa58:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   1fa5a:	9b02      	ldr	r3, [sp, #8]
   1fa5c:	781b      	ldrb	r3, [r3, #0]
   1fa5e:	b29a      	uxth	r2, r3
   1fa60:	9b02      	ldr	r3, [sp, #8]
   1fa62:	3301      	adds	r3, #1
   1fa64:	781b      	ldrb	r3, [r3, #0]
   1fa66:	b29b      	uxth	r3, r3
   1fa68:	021b      	lsls	r3, r3, #8
   1fa6a:	b29b      	uxth	r3, r3
   1fa6c:	4413      	add	r3, r2
   1fa6e:	b29a      	uxth	r2, r3
   1fa70:	9b03      	ldr	r3, [sp, #12]
   1fa72:	819a      	strh	r2, [r3, #12]
   1fa74:	9b02      	ldr	r3, [sp, #8]
   1fa76:	3302      	adds	r3, #2
   1fa78:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   1fa7a:	9b03      	ldr	r3, [sp, #12]
   1fa7c:	88da      	ldrh	r2, [r3, #6]
   1fa7e:	9b03      	ldr	r3, [sp, #12]
   1fa80:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   1fa82:	9b03      	ldr	r3, [sp, #12]
   1fa84:	791a      	ldrb	r2, [r3, #4]
   1fa86:	9b03      	ldr	r3, [sp, #12]
   1fa88:	70da      	strb	r2, [r3, #3]
}
   1fa8a:	bf00      	nop
   1fa8c:	b004      	add	sp, #16
   1fa8e:	4770      	bx	lr

0001fa90 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fa90:	b500      	push	{lr}
   1fa92:	b085      	sub	sp, #20
   1fa94:	9003      	str	r0, [sp, #12]
   1fa96:	9102      	str	r1, [sp, #8]
   1fa98:	4613      	mov	r3, r2
   1fa9a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   1fa9e:	9b02      	ldr	r3, [sp, #8]
   1faa0:	1c5a      	adds	r2, r3, #1
   1faa2:	9202      	str	r2, [sp, #8]
   1faa4:	781a      	ldrb	r2, [r3, #0]
   1faa6:	9b03      	ldr	r3, [sp, #12]
   1faa8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   1faaa:	9b02      	ldr	r3, [sp, #8]
   1faac:	781b      	ldrb	r3, [r3, #0]
   1faae:	b29a      	uxth	r2, r3
   1fab0:	9b02      	ldr	r3, [sp, #8]
   1fab2:	3301      	adds	r3, #1
   1fab4:	781b      	ldrb	r3, [r3, #0]
   1fab6:	b29b      	uxth	r3, r3
   1fab8:	021b      	lsls	r3, r3, #8
   1faba:	b29b      	uxth	r3, r3
   1fabc:	4413      	add	r3, r2
   1fabe:	b29a      	uxth	r2, r3
   1fac0:	9b03      	ldr	r3, [sp, #12]
   1fac2:	80da      	strh	r2, [r3, #6]
   1fac4:	9b02      	ldr	r3, [sp, #8]
   1fac6:	3302      	adds	r3, #2
   1fac8:	9302      	str	r3, [sp, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   1faca:	9b03      	ldr	r3, [sp, #12]
   1facc:	3308      	adds	r3, #8
   1face:	2208      	movs	r2, #8
   1fad0:	9902      	ldr	r1, [sp, #8]
   1fad2:	4618      	mov	r0, r3
   1fad4:	f7ec fb14 	bl	c100 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   1fad8:	9b03      	ldr	r3, [sp, #12]
   1fada:	88da      	ldrh	r2, [r3, #6]
   1fadc:	9b03      	ldr	r3, [sp, #12]
   1fade:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   1fae0:	9b03      	ldr	r3, [sp, #12]
   1fae2:	791a      	ldrb	r2, [r3, #4]
   1fae4:	9b03      	ldr	r3, [sp, #12]
   1fae6:	70da      	strb	r2, [r3, #3]
}
   1fae8:	bf00      	nop
   1faea:	b005      	add	sp, #20
   1faec:	f85d fb04 	ldr.w	pc, [sp], #4

0001faf0 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1faf0:	b084      	sub	sp, #16
   1faf2:	9003      	str	r0, [sp, #12]
   1faf4:	9102      	str	r1, [sp, #8]
   1faf6:	4613      	mov	r3, r2
   1faf8:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   1fafc:	9b02      	ldr	r3, [sp, #8]
   1fafe:	1c5a      	adds	r2, r3, #1
   1fb00:	9202      	str	r2, [sp, #8]
   1fb02:	781a      	ldrb	r2, [r3, #0]
   1fb04:	9b03      	ldr	r3, [sp, #12]
   1fb06:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   1fb08:	9b02      	ldr	r3, [sp, #8]
   1fb0a:	781b      	ldrb	r3, [r3, #0]
   1fb0c:	b29a      	uxth	r2, r3
   1fb0e:	9b02      	ldr	r3, [sp, #8]
   1fb10:	3301      	adds	r3, #1
   1fb12:	781b      	ldrb	r3, [r3, #0]
   1fb14:	b29b      	uxth	r3, r3
   1fb16:	021b      	lsls	r3, r3, #8
   1fb18:	b29b      	uxth	r3, r3
   1fb1a:	4413      	add	r3, r2
   1fb1c:	b29a      	uxth	r2, r3
   1fb1e:	9b03      	ldr	r3, [sp, #12]
   1fb20:	80da      	strh	r2, [r3, #6]
   1fb22:	9b02      	ldr	r3, [sp, #8]
   1fb24:	3302      	adds	r3, #2
   1fb26:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   1fb28:	9b03      	ldr	r3, [sp, #12]
   1fb2a:	88da      	ldrh	r2, [r3, #6]
   1fb2c:	9b03      	ldr	r3, [sp, #12]
   1fb2e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   1fb30:	9b03      	ldr	r3, [sp, #12]
   1fb32:	791a      	ldrb	r2, [r3, #4]
   1fb34:	9b03      	ldr	r3, [sp, #12]
   1fb36:	70da      	strb	r2, [r3, #3]
}
   1fb38:	bf00      	nop
   1fb3a:	b004      	add	sp, #16
   1fb3c:	4770      	bx	lr

0001fb3e <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fb3e:	b084      	sub	sp, #16
   1fb40:	9003      	str	r0, [sp, #12]
   1fb42:	9102      	str	r1, [sp, #8]
   1fb44:	4613      	mov	r3, r2
   1fb46:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   1fb4a:	9b02      	ldr	r3, [sp, #8]
   1fb4c:	1c5a      	adds	r2, r3, #1
   1fb4e:	9202      	str	r2, [sp, #8]
   1fb50:	781a      	ldrb	r2, [r3, #0]
   1fb52:	9b03      	ldr	r3, [sp, #12]
   1fb54:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   1fb56:	9b02      	ldr	r3, [sp, #8]
   1fb58:	781b      	ldrb	r3, [r3, #0]
   1fb5a:	b29a      	uxth	r2, r3
   1fb5c:	9b02      	ldr	r3, [sp, #8]
   1fb5e:	3301      	adds	r3, #1
   1fb60:	781b      	ldrb	r3, [r3, #0]
   1fb62:	b29b      	uxth	r3, r3
   1fb64:	021b      	lsls	r3, r3, #8
   1fb66:	b29b      	uxth	r3, r3
   1fb68:	4413      	add	r3, r2
   1fb6a:	b29a      	uxth	r2, r3
   1fb6c:	9b03      	ldr	r3, [sp, #12]
   1fb6e:	80da      	strh	r2, [r3, #6]
   1fb70:	9b02      	ldr	r3, [sp, #8]
   1fb72:	3302      	adds	r3, #2
   1fb74:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   1fb76:	9b03      	ldr	r3, [sp, #12]
   1fb78:	88da      	ldrh	r2, [r3, #6]
   1fb7a:	9b03      	ldr	r3, [sp, #12]
   1fb7c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   1fb7e:	9b03      	ldr	r3, [sp, #12]
   1fb80:	791a      	ldrb	r2, [r3, #4]
   1fb82:	9b03      	ldr	r3, [sp, #12]
   1fb84:	70da      	strb	r2, [r3, #3]
}
   1fb86:	bf00      	nop
   1fb88:	b004      	add	sp, #16
   1fb8a:	4770      	bx	lr

0001fb8c <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fb8c:	b084      	sub	sp, #16
   1fb8e:	9003      	str	r0, [sp, #12]
   1fb90:	9102      	str	r1, [sp, #8]
   1fb92:	4613      	mov	r3, r2
   1fb94:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   1fb98:	9b02      	ldr	r3, [sp, #8]
   1fb9a:	1c5a      	adds	r2, r3, #1
   1fb9c:	9202      	str	r2, [sp, #8]
   1fb9e:	781a      	ldrb	r2, [r3, #0]
   1fba0:	9b03      	ldr	r3, [sp, #12]
   1fba2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   1fba4:	9b02      	ldr	r3, [sp, #8]
   1fba6:	781b      	ldrb	r3, [r3, #0]
   1fba8:	b29a      	uxth	r2, r3
   1fbaa:	9b02      	ldr	r3, [sp, #8]
   1fbac:	3301      	adds	r3, #1
   1fbae:	781b      	ldrb	r3, [r3, #0]
   1fbb0:	b29b      	uxth	r3, r3
   1fbb2:	021b      	lsls	r3, r3, #8
   1fbb4:	b29b      	uxth	r3, r3
   1fbb6:	4413      	add	r3, r2
   1fbb8:	b29a      	uxth	r2, r3
   1fbba:	9b03      	ldr	r3, [sp, #12]
   1fbbc:	80da      	strh	r2, [r3, #6]
   1fbbe:	9b02      	ldr	r3, [sp, #8]
   1fbc0:	3302      	adds	r3, #2
   1fbc2:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   1fbc4:	9b03      	ldr	r3, [sp, #12]
   1fbc6:	88da      	ldrh	r2, [r3, #6]
   1fbc8:	9b03      	ldr	r3, [sp, #12]
   1fbca:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   1fbcc:	9b03      	ldr	r3, [sp, #12]
   1fbce:	791a      	ldrb	r2, [r3, #4]
   1fbd0:	9b03      	ldr	r3, [sp, #12]
   1fbd2:	70da      	strb	r2, [r3, #3]
}
   1fbd4:	bf00      	nop
   1fbd6:	b004      	add	sp, #16
   1fbd8:	4770      	bx	lr

0001fbda <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fbda:	b084      	sub	sp, #16
   1fbdc:	9003      	str	r0, [sp, #12]
   1fbde:	9102      	str	r1, [sp, #8]
   1fbe0:	4613      	mov	r3, r2
   1fbe2:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   1fbe6:	9b02      	ldr	r3, [sp, #8]
   1fbe8:	1c5a      	adds	r2, r3, #1
   1fbea:	9202      	str	r2, [sp, #8]
   1fbec:	781a      	ldrb	r2, [r3, #0]
   1fbee:	9b03      	ldr	r3, [sp, #12]
   1fbf0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   1fbf2:	9b02      	ldr	r3, [sp, #8]
   1fbf4:	781b      	ldrb	r3, [r3, #0]
   1fbf6:	b29a      	uxth	r2, r3
   1fbf8:	9b02      	ldr	r3, [sp, #8]
   1fbfa:	3301      	adds	r3, #1
   1fbfc:	781b      	ldrb	r3, [r3, #0]
   1fbfe:	b29b      	uxth	r3, r3
   1fc00:	021b      	lsls	r3, r3, #8
   1fc02:	b29b      	uxth	r3, r3
   1fc04:	4413      	add	r3, r2
   1fc06:	b29a      	uxth	r2, r3
   1fc08:	9b03      	ldr	r3, [sp, #12]
   1fc0a:	80da      	strh	r2, [r3, #6]
   1fc0c:	9b02      	ldr	r3, [sp, #8]
   1fc0e:	3302      	adds	r3, #2
   1fc10:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   1fc12:	9b02      	ldr	r3, [sp, #8]
   1fc14:	1c5a      	adds	r2, r3, #1
   1fc16:	9202      	str	r2, [sp, #8]
   1fc18:	781a      	ldrb	r2, [r3, #0]
   1fc1a:	9b03      	ldr	r3, [sp, #12]
   1fc1c:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   1fc1e:	9b03      	ldr	r3, [sp, #12]
   1fc20:	88da      	ldrh	r2, [r3, #6]
   1fc22:	9b03      	ldr	r3, [sp, #12]
   1fc24:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   1fc26:	9b03      	ldr	r3, [sp, #12]
   1fc28:	791a      	ldrb	r2, [r3, #4]
   1fc2a:	9b03      	ldr	r3, [sp, #12]
   1fc2c:	70da      	strb	r2, [r3, #3]
}
   1fc2e:	bf00      	nop
   1fc30:	b004      	add	sp, #16
   1fc32:	4770      	bx	lr

0001fc34 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fc34:	b500      	push	{lr}
   1fc36:	b085      	sub	sp, #20
   1fc38:	9003      	str	r0, [sp, #12]
   1fc3a:	9102      	str	r1, [sp, #8]
   1fc3c:	4613      	mov	r3, r2
   1fc3e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   1fc42:	9b02      	ldr	r3, [sp, #8]
   1fc44:	781b      	ldrb	r3, [r3, #0]
   1fc46:	b29a      	uxth	r2, r3
   1fc48:	9b02      	ldr	r3, [sp, #8]
   1fc4a:	3301      	adds	r3, #1
   1fc4c:	781b      	ldrb	r3, [r3, #0]
   1fc4e:	b29b      	uxth	r3, r3
   1fc50:	021b      	lsls	r3, r3, #8
   1fc52:	b29b      	uxth	r3, r3
   1fc54:	4413      	add	r3, r2
   1fc56:	b29a      	uxth	r2, r3
   1fc58:	9b03      	ldr	r3, [sp, #12]
   1fc5a:	809a      	strh	r2, [r3, #4]
   1fc5c:	9b02      	ldr	r3, [sp, #8]
   1fc5e:	3302      	adds	r3, #2
   1fc60:	9302      	str	r3, [sp, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   1fc62:	9b03      	ldr	r3, [sp, #12]
   1fc64:	3306      	adds	r3, #6
   1fc66:	2208      	movs	r2, #8
   1fc68:	9902      	ldr	r1, [sp, #8]
   1fc6a:	4618      	mov	r0, r3
   1fc6c:	f7ec fa48 	bl	c100 <memcpy>
  p += HCI_RAND_LEN;
   1fc70:	9b02      	ldr	r3, [sp, #8]
   1fc72:	3308      	adds	r3, #8
   1fc74:	9302      	str	r3, [sp, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   1fc76:	9b02      	ldr	r3, [sp, #8]
   1fc78:	781b      	ldrb	r3, [r3, #0]
   1fc7a:	b29a      	uxth	r2, r3
   1fc7c:	9b02      	ldr	r3, [sp, #8]
   1fc7e:	3301      	adds	r3, #1
   1fc80:	781b      	ldrb	r3, [r3, #0]
   1fc82:	b29b      	uxth	r3, r3
   1fc84:	021b      	lsls	r3, r3, #8
   1fc86:	b29b      	uxth	r3, r3
   1fc88:	4413      	add	r3, r2
   1fc8a:	b29a      	uxth	r2, r3
   1fc8c:	9b03      	ldr	r3, [sp, #12]
   1fc8e:	81da      	strh	r2, [r3, #14]
   1fc90:	9b02      	ldr	r3, [sp, #8]
   1fc92:	3302      	adds	r3, #2
   1fc94:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   1fc96:	9b03      	ldr	r3, [sp, #12]
   1fc98:	889a      	ldrh	r2, [r3, #4]
   1fc9a:	9b03      	ldr	r3, [sp, #12]
   1fc9c:	801a      	strh	r2, [r3, #0]
}
   1fc9e:	bf00      	nop
   1fca0:	b005      	add	sp, #20
   1fca2:	f85d fb04 	ldr.w	pc, [sp], #4

0001fca6 <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fca6:	b084      	sub	sp, #16
   1fca8:	9003      	str	r0, [sp, #12]
   1fcaa:	9102      	str	r1, [sp, #8]
   1fcac:	4613      	mov	r3, r2
   1fcae:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   1fcb2:	9b02      	ldr	r3, [sp, #8]
   1fcb4:	781b      	ldrb	r3, [r3, #0]
   1fcb6:	b29a      	uxth	r2, r3
   1fcb8:	9b02      	ldr	r3, [sp, #8]
   1fcba:	3301      	adds	r3, #1
   1fcbc:	781b      	ldrb	r3, [r3, #0]
   1fcbe:	b29b      	uxth	r3, r3
   1fcc0:	021b      	lsls	r3, r3, #8
   1fcc2:	b29b      	uxth	r3, r3
   1fcc4:	4413      	add	r3, r2
   1fcc6:	b29a      	uxth	r2, r3
   1fcc8:	9b03      	ldr	r3, [sp, #12]
   1fcca:	809a      	strh	r2, [r3, #4]
   1fccc:	9b02      	ldr	r3, [sp, #8]
   1fcce:	3302      	adds	r3, #2
   1fcd0:	9302      	str	r3, [sp, #8]
}
   1fcd2:	bf00      	nop
   1fcd4:	b004      	add	sp, #16
   1fcd6:	4770      	bx	lr

0001fcd8 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fcd8:	b500      	push	{lr}
   1fcda:	b085      	sub	sp, #20
   1fcdc:	9003      	str	r0, [sp, #12]
   1fcde:	9102      	str	r1, [sp, #8]
   1fce0:	4613      	mov	r3, r2
   1fce2:	f88d 3007 	strb.w	r3, [sp, #7]
  /* roll pointer back to opcode */
  p -= 2;
   1fce6:	9b02      	ldr	r3, [sp, #8]
   1fce8:	3b02      	subs	r3, #2
   1fcea:	9302      	str	r3, [sp, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   1fcec:	9b02      	ldr	r3, [sp, #8]
   1fcee:	781b      	ldrb	r3, [r3, #0]
   1fcf0:	b29a      	uxth	r2, r3
   1fcf2:	9b02      	ldr	r3, [sp, #8]
   1fcf4:	3301      	adds	r3, #1
   1fcf6:	781b      	ldrb	r3, [r3, #0]
   1fcf8:	b29b      	uxth	r3, r3
   1fcfa:	021b      	lsls	r3, r3, #8
   1fcfc:	b29b      	uxth	r3, r3
   1fcfe:	4413      	add	r3, r2
   1fd00:	b29a      	uxth	r2, r3
   1fd02:	9b03      	ldr	r3, [sp, #12]
   1fd04:	809a      	strh	r2, [r3, #4]
   1fd06:	9b02      	ldr	r3, [sp, #8]
   1fd08:	3302      	adds	r3, #2
   1fd0a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1fd0c:	9b02      	ldr	r3, [sp, #8]
   1fd0e:	1c5a      	adds	r2, r3, #1
   1fd10:	9202      	str	r2, [sp, #8]
   1fd12:	781a      	ldrb	r2, [r3, #0]
   1fd14:	9b03      	ldr	r3, [sp, #12]
   1fd16:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   1fd18:	9b03      	ldr	r3, [sp, #12]
   1fd1a:	1d98      	adds	r0, r3, #6
   1fd1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1fd20:	3b04      	subs	r3, #4
   1fd22:	461a      	mov	r2, r3
   1fd24:	9902      	ldr	r1, [sp, #8]
   1fd26:	f7ec f9eb 	bl	c100 <memcpy>
}
   1fd2a:	bf00      	nop
   1fd2c:	b005      	add	sp, #20
   1fd2e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fd32 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fd32:	b500      	push	{lr}
   1fd34:	b085      	sub	sp, #20
   1fd36:	9003      	str	r0, [sp, #12]
   1fd38:	9102      	str	r1, [sp, #8]
   1fd3a:	4613      	mov	r3, r2
   1fd3c:	f88d 3007 	strb.w	r3, [sp, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   1fd40:	9b03      	ldr	r3, [sp, #12]
   1fd42:	3304      	adds	r3, #4
   1fd44:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1fd48:	9902      	ldr	r1, [sp, #8]
   1fd4a:	4618      	mov	r0, r3
   1fd4c:	f7ec f9d8 	bl	c100 <memcpy>
}
   1fd50:	bf00      	nop
   1fd52:	b005      	add	sp, #20
   1fd54:	f85d fb04 	ldr.w	pc, [sp], #4

0001fd58 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fd58:	b084      	sub	sp, #16
   1fd5a:	9003      	str	r0, [sp, #12]
   1fd5c:	9102      	str	r1, [sp, #8]
   1fd5e:	4613      	mov	r3, r2
   1fd60:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   1fd64:	9b02      	ldr	r3, [sp, #8]
   1fd66:	1c5a      	adds	r2, r3, #1
   1fd68:	9202      	str	r2, [sp, #8]
   1fd6a:	781a      	ldrb	r2, [r3, #0]
   1fd6c:	9b03      	ldr	r3, [sp, #12]
   1fd6e:	711a      	strb	r2, [r3, #4]
}
   1fd70:	bf00      	nop
   1fd72:	b004      	add	sp, #16
   1fd74:	4770      	bx	lr

0001fd76 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fd76:	b500      	push	{lr}
   1fd78:	b085      	sub	sp, #20
   1fd7a:	9003      	str	r0, [sp, #12]
   1fd7c:	9102      	str	r1, [sp, #8]
   1fd7e:	4613      	mov	r3, r2
   1fd80:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   1fd84:	9b02      	ldr	r3, [sp, #8]
   1fd86:	1c5a      	adds	r2, r3, #1
   1fd88:	9202      	str	r2, [sp, #8]
   1fd8a:	781a      	ldrb	r2, [r3, #0]
   1fd8c:	9b03      	ldr	r3, [sp, #12]
   1fd8e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   1fd90:	9b03      	ldr	r3, [sp, #12]
   1fd92:	3305      	adds	r3, #5
   1fd94:	2210      	movs	r2, #16
   1fd96:	9902      	ldr	r1, [sp, #8]
   1fd98:	4618      	mov	r0, r3
   1fd9a:	f7ec f9b1 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   1fd9e:	9b03      	ldr	r3, [sp, #12]
   1fda0:	791a      	ldrb	r2, [r3, #4]
   1fda2:	9b03      	ldr	r3, [sp, #12]
   1fda4:	70da      	strb	r2, [r3, #3]
}
   1fda6:	bf00      	nop
   1fda8:	b005      	add	sp, #20
   1fdaa:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdae <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fdae:	b500      	push	{lr}
   1fdb0:	b085      	sub	sp, #20
   1fdb2:	9003      	str	r0, [sp, #12]
   1fdb4:	9102      	str	r1, [sp, #8]
   1fdb6:	4613      	mov	r3, r2
   1fdb8:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   1fdbc:	9b02      	ldr	r3, [sp, #8]
   1fdbe:	1c5a      	adds	r2, r3, #1
   1fdc0:	9202      	str	r2, [sp, #8]
   1fdc2:	781a      	ldrb	r2, [r3, #0]
   1fdc4:	9b03      	ldr	r3, [sp, #12]
   1fdc6:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   1fdc8:	9b03      	ldr	r3, [sp, #12]
   1fdca:	3305      	adds	r3, #5
   1fdcc:	2208      	movs	r2, #8
   1fdce:	9902      	ldr	r1, [sp, #8]
   1fdd0:	4618      	mov	r0, r3
   1fdd2:	f7ec f995 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   1fdd6:	9b03      	ldr	r3, [sp, #12]
   1fdd8:	791a      	ldrb	r2, [r3, #4]
   1fdda:	9b03      	ldr	r3, [sp, #12]
   1fddc:	70da      	strb	r2, [r3, #3]
}
   1fdde:	bf00      	nop
   1fde0:	b005      	add	sp, #20
   1fde2:	f85d fb04 	ldr.w	pc, [sp], #4

0001fde6 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fde6:	b084      	sub	sp, #16
   1fde8:	9003      	str	r0, [sp, #12]
   1fdea:	9102      	str	r1, [sp, #8]
   1fdec:	4613      	mov	r3, r2
   1fdee:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   1fdf2:	9b02      	ldr	r3, [sp, #8]
   1fdf4:	1c5a      	adds	r2, r3, #1
   1fdf6:	9202      	str	r2, [sp, #8]
   1fdf8:	781a      	ldrb	r2, [r3, #0]
   1fdfa:	9b03      	ldr	r3, [sp, #12]
   1fdfc:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   1fdfe:	9b03      	ldr	r3, [sp, #12]
   1fe00:	791a      	ldrb	r2, [r3, #4]
   1fe02:	9b03      	ldr	r3, [sp, #12]
   1fe04:	70da      	strb	r2, [r3, #3]
}
   1fe06:	bf00      	nop
   1fe08:	b004      	add	sp, #16
   1fe0a:	4770      	bx	lr

0001fe0c <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fe0c:	b084      	sub	sp, #16
   1fe0e:	9003      	str	r0, [sp, #12]
   1fe10:	9102      	str	r1, [sp, #8]
   1fe12:	4613      	mov	r3, r2
   1fe14:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   1fe18:	9b02      	ldr	r3, [sp, #8]
   1fe1a:	1c5a      	adds	r2, r3, #1
   1fe1c:	9202      	str	r2, [sp, #8]
   1fe1e:	781a      	ldrb	r2, [r3, #0]
   1fe20:	9b03      	ldr	r3, [sp, #12]
   1fe22:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   1fe24:	9b03      	ldr	r3, [sp, #12]
   1fe26:	791a      	ldrb	r2, [r3, #4]
   1fe28:	9b03      	ldr	r3, [sp, #12]
   1fe2a:	70da      	strb	r2, [r3, #3]
}
   1fe2c:	bf00      	nop
   1fe2e:	b004      	add	sp, #16
   1fe30:	4770      	bx	lr

0001fe32 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fe32:	b084      	sub	sp, #16
   1fe34:	9003      	str	r0, [sp, #12]
   1fe36:	9102      	str	r1, [sp, #8]
   1fe38:	4613      	mov	r3, r2
   1fe3a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   1fe3e:	9b02      	ldr	r3, [sp, #8]
   1fe40:	1c5a      	adds	r2, r3, #1
   1fe42:	9202      	str	r2, [sp, #8]
   1fe44:	781a      	ldrb	r2, [r3, #0]
   1fe46:	9b03      	ldr	r3, [sp, #12]
   1fe48:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   1fe4a:	9b03      	ldr	r3, [sp, #12]
   1fe4c:	791a      	ldrb	r2, [r3, #4]
   1fe4e:	9b03      	ldr	r3, [sp, #12]
   1fe50:	70da      	strb	r2, [r3, #3]
}
   1fe52:	bf00      	nop
   1fe54:	b004      	add	sp, #16
   1fe56:	4770      	bx	lr

0001fe58 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fe58:	b500      	push	{lr}
   1fe5a:	b085      	sub	sp, #20
   1fe5c:	9003      	str	r0, [sp, #12]
   1fe5e:	9102      	str	r1, [sp, #8]
   1fe60:	4613      	mov	r3, r2
   1fe62:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   1fe66:	9b02      	ldr	r3, [sp, #8]
   1fe68:	1c5a      	adds	r2, r3, #1
   1fe6a:	9202      	str	r2, [sp, #8]
   1fe6c:	781a      	ldrb	r2, [r3, #0]
   1fe6e:	9b03      	ldr	r3, [sp, #12]
   1fe70:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   1fe72:	9b03      	ldr	r3, [sp, #12]
   1fe74:	3305      	adds	r3, #5
   1fe76:	9902      	ldr	r1, [sp, #8]
   1fe78:	4618      	mov	r0, r3
   1fe7a:	f7f4 fb15 	bl	144a8 <BdaCpy>
   1fe7e:	9b02      	ldr	r3, [sp, #8]
   1fe80:	3306      	adds	r3, #6
   1fe82:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   1fe84:	9b03      	ldr	r3, [sp, #12]
   1fe86:	791a      	ldrb	r2, [r3, #4]
   1fe88:	9b03      	ldr	r3, [sp, #12]
   1fe8a:	70da      	strb	r2, [r3, #3]
}
   1fe8c:	bf00      	nop
   1fe8e:	b005      	add	sp, #20
   1fe90:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe94 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fe94:	b500      	push	{lr}
   1fe96:	b085      	sub	sp, #20
   1fe98:	9003      	str	r0, [sp, #12]
   1fe9a:	9102      	str	r1, [sp, #8]
   1fe9c:	4613      	mov	r3, r2
   1fe9e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   1fea2:	9b02      	ldr	r3, [sp, #8]
   1fea4:	1c5a      	adds	r2, r3, #1
   1fea6:	9202      	str	r2, [sp, #8]
   1fea8:	781a      	ldrb	r2, [r3, #0]
   1feaa:	9b03      	ldr	r3, [sp, #12]
   1feac:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   1feae:	9b03      	ldr	r3, [sp, #12]
   1feb0:	3305      	adds	r3, #5
   1feb2:	9902      	ldr	r1, [sp, #8]
   1feb4:	4618      	mov	r0, r3
   1feb6:	f7f4 faf7 	bl	144a8 <BdaCpy>
   1feba:	9b02      	ldr	r3, [sp, #8]
   1febc:	3306      	adds	r3, #6
   1febe:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   1fec0:	9b03      	ldr	r3, [sp, #12]
   1fec2:	791a      	ldrb	r2, [r3, #4]
   1fec4:	9b03      	ldr	r3, [sp, #12]
   1fec6:	70da      	strb	r2, [r3, #3]
}
   1fec8:	bf00      	nop
   1feca:	b005      	add	sp, #20
   1fecc:	f85d fb04 	ldr.w	pc, [sp], #4

0001fed0 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fed0:	b084      	sub	sp, #16
   1fed2:	9003      	str	r0, [sp, #12]
   1fed4:	9102      	str	r1, [sp, #8]
   1fed6:	4613      	mov	r3, r2
   1fed8:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   1fedc:	9b02      	ldr	r3, [sp, #8]
   1fede:	1c5a      	adds	r2, r3, #1
   1fee0:	9202      	str	r2, [sp, #8]
   1fee2:	781a      	ldrb	r2, [r3, #0]
   1fee4:	9b03      	ldr	r3, [sp, #12]
   1fee6:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   1fee8:	9b03      	ldr	r3, [sp, #12]
   1feea:	791a      	ldrb	r2, [r3, #4]
   1feec:	9b03      	ldr	r3, [sp, #12]
   1feee:	70da      	strb	r2, [r3, #3]
}
   1fef0:	bf00      	nop
   1fef2:	b004      	add	sp, #16
   1fef4:	4770      	bx	lr

0001fef6 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fef6:	b084      	sub	sp, #16
   1fef8:	9003      	str	r0, [sp, #12]
   1fefa:	9102      	str	r1, [sp, #8]
   1fefc:	4613      	mov	r3, r2
   1fefe:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   1ff02:	9b02      	ldr	r3, [sp, #8]
   1ff04:	1c5a      	adds	r2, r3, #1
   1ff06:	9202      	str	r2, [sp, #8]
   1ff08:	781a      	ldrb	r2, [r3, #0]
   1ff0a:	9b03      	ldr	r3, [sp, #12]
   1ff0c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   1ff0e:	9b02      	ldr	r3, [sp, #8]
   1ff10:	781b      	ldrb	r3, [r3, #0]
   1ff12:	b29a      	uxth	r2, r3
   1ff14:	9b02      	ldr	r3, [sp, #8]
   1ff16:	3301      	adds	r3, #1
   1ff18:	781b      	ldrb	r3, [r3, #0]
   1ff1a:	b29b      	uxth	r3, r3
   1ff1c:	021b      	lsls	r3, r3, #8
   1ff1e:	b29b      	uxth	r3, r3
   1ff20:	4413      	add	r3, r2
   1ff22:	b29a      	uxth	r2, r3
   1ff24:	9b03      	ldr	r3, [sp, #12]
   1ff26:	80da      	strh	r2, [r3, #6]
   1ff28:	9b02      	ldr	r3, [sp, #8]
   1ff2a:	3302      	adds	r3, #2
   1ff2c:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   1ff2e:	9b03      	ldr	r3, [sp, #12]
   1ff30:	791a      	ldrb	r2, [r3, #4]
   1ff32:	9b03      	ldr	r3, [sp, #12]
   1ff34:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   1ff36:	9b03      	ldr	r3, [sp, #12]
   1ff38:	88da      	ldrh	r2, [r3, #6]
   1ff3a:	9b03      	ldr	r3, [sp, #12]
   1ff3c:	801a      	strh	r2, [r3, #0]
}
   1ff3e:	bf00      	nop
   1ff40:	b004      	add	sp, #16
   1ff42:	4770      	bx	lr

0001ff44 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ff44:	b084      	sub	sp, #16
   1ff46:	9003      	str	r0, [sp, #12]
   1ff48:	9102      	str	r1, [sp, #8]
   1ff4a:	4613      	mov	r3, r2
   1ff4c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   1ff50:	9b02      	ldr	r3, [sp, #8]
   1ff52:	1c5a      	adds	r2, r3, #1
   1ff54:	9202      	str	r2, [sp, #8]
   1ff56:	781a      	ldrb	r2, [r3, #0]
   1ff58:	9b03      	ldr	r3, [sp, #12]
   1ff5a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   1ff5c:	9b02      	ldr	r3, [sp, #8]
   1ff5e:	781b      	ldrb	r3, [r3, #0]
   1ff60:	b29a      	uxth	r2, r3
   1ff62:	9b02      	ldr	r3, [sp, #8]
   1ff64:	3301      	adds	r3, #1
   1ff66:	781b      	ldrb	r3, [r3, #0]
   1ff68:	b29b      	uxth	r3, r3
   1ff6a:	021b      	lsls	r3, r3, #8
   1ff6c:	b29b      	uxth	r3, r3
   1ff6e:	4413      	add	r3, r2
   1ff70:	b29a      	uxth	r2, r3
   1ff72:	9b03      	ldr	r3, [sp, #12]
   1ff74:	80da      	strh	r2, [r3, #6]
   1ff76:	9b02      	ldr	r3, [sp, #8]
   1ff78:	3302      	adds	r3, #2
   1ff7a:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   1ff7c:	9b03      	ldr	r3, [sp, #12]
   1ff7e:	791a      	ldrb	r2, [r3, #4]
   1ff80:	9b03      	ldr	r3, [sp, #12]
   1ff82:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   1ff84:	9b03      	ldr	r3, [sp, #12]
   1ff86:	88da      	ldrh	r2, [r3, #6]
   1ff88:	9b03      	ldr	r3, [sp, #12]
   1ff8a:	801a      	strh	r2, [r3, #0]
}
   1ff8c:	bf00      	nop
   1ff8e:	b004      	add	sp, #16
   1ff90:	4770      	bx	lr

0001ff92 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1ff92:	b084      	sub	sp, #16
   1ff94:	9003      	str	r0, [sp, #12]
   1ff96:	9102      	str	r1, [sp, #8]
   1ff98:	4613      	mov	r3, r2
   1ff9a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   1ff9e:	9b02      	ldr	r3, [sp, #8]
   1ffa0:	1c5a      	adds	r2, r3, #1
   1ffa2:	9202      	str	r2, [sp, #8]
   1ffa4:	781a      	ldrb	r2, [r3, #0]
   1ffa6:	9b03      	ldr	r3, [sp, #12]
   1ffa8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   1ffaa:	9b02      	ldr	r3, [sp, #8]
   1ffac:	781b      	ldrb	r3, [r3, #0]
   1ffae:	b29a      	uxth	r2, r3
   1ffb0:	9b02      	ldr	r3, [sp, #8]
   1ffb2:	3301      	adds	r3, #1
   1ffb4:	781b      	ldrb	r3, [r3, #0]
   1ffb6:	b29b      	uxth	r3, r3
   1ffb8:	021b      	lsls	r3, r3, #8
   1ffba:	b29b      	uxth	r3, r3
   1ffbc:	4413      	add	r3, r2
   1ffbe:	b29a      	uxth	r2, r3
   1ffc0:	9b03      	ldr	r3, [sp, #12]
   1ffc2:	80da      	strh	r2, [r3, #6]
   1ffc4:	9b02      	ldr	r3, [sp, #8]
   1ffc6:	3302      	adds	r3, #2
   1ffc8:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   1ffca:	9b02      	ldr	r3, [sp, #8]
   1ffcc:	781b      	ldrb	r3, [r3, #0]
   1ffce:	b29a      	uxth	r2, r3
   1ffd0:	9b02      	ldr	r3, [sp, #8]
   1ffd2:	3301      	adds	r3, #1
   1ffd4:	781b      	ldrb	r3, [r3, #0]
   1ffd6:	b29b      	uxth	r3, r3
   1ffd8:	021b      	lsls	r3, r3, #8
   1ffda:	b29b      	uxth	r3, r3
   1ffdc:	4413      	add	r3, r2
   1ffde:	b29a      	uxth	r2, r3
   1ffe0:	9b03      	ldr	r3, [sp, #12]
   1ffe2:	811a      	strh	r2, [r3, #8]
   1ffe4:	9b02      	ldr	r3, [sp, #8]
   1ffe6:	3302      	adds	r3, #2
   1ffe8:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   1ffea:	9b03      	ldr	r3, [sp, #12]
   1ffec:	791a      	ldrb	r2, [r3, #4]
   1ffee:	9b03      	ldr	r3, [sp, #12]
   1fff0:	70da      	strb	r2, [r3, #3]
}
   1fff2:	bf00      	nop
   1fff4:	b004      	add	sp, #16
   1fff6:	4770      	bx	lr

0001fff8 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1fff8:	b084      	sub	sp, #16
   1fffa:	9003      	str	r0, [sp, #12]
   1fffc:	9102      	str	r1, [sp, #8]
   1fffe:	4613      	mov	r3, r2
   20000:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   20004:	9b02      	ldr	r3, [sp, #8]
   20006:	1c5a      	adds	r2, r3, #1
   20008:	9202      	str	r2, [sp, #8]
   2000a:	781a      	ldrb	r2, [r3, #0]
   2000c:	9b03      	ldr	r3, [sp, #12]
   2000e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   20010:	9b03      	ldr	r3, [sp, #12]
   20012:	791a      	ldrb	r2, [r3, #4]
   20014:	9b03      	ldr	r3, [sp, #12]
   20016:	70da      	strb	r2, [r3, #3]
}
   20018:	bf00      	nop
   2001a:	b004      	add	sp, #16
   2001c:	4770      	bx	lr

0002001e <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   2001e:	b084      	sub	sp, #16
   20020:	9003      	str	r0, [sp, #12]
   20022:	9102      	str	r1, [sp, #8]
   20024:	4613      	mov	r3, r2
   20026:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   2002a:	9b02      	ldr	r3, [sp, #8]
   2002c:	1c5a      	adds	r2, r3, #1
   2002e:	9202      	str	r2, [sp, #8]
   20030:	781a      	ldrb	r2, [r3, #0]
   20032:	9b03      	ldr	r3, [sp, #12]
   20034:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   20036:	9b02      	ldr	r3, [sp, #8]
   20038:	781b      	ldrb	r3, [r3, #0]
   2003a:	b29a      	uxth	r2, r3
   2003c:	9b02      	ldr	r3, [sp, #8]
   2003e:	3301      	adds	r3, #1
   20040:	781b      	ldrb	r3, [r3, #0]
   20042:	b29b      	uxth	r3, r3
   20044:	021b      	lsls	r3, r3, #8
   20046:	b29b      	uxth	r3, r3
   20048:	4413      	add	r3, r2
   2004a:	b29a      	uxth	r2, r3
   2004c:	9b03      	ldr	r3, [sp, #12]
   2004e:	80da      	strh	r2, [r3, #6]
   20050:	9b02      	ldr	r3, [sp, #8]
   20052:	3302      	adds	r3, #2
   20054:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   20056:	9b03      	ldr	r3, [sp, #12]
   20058:	791a      	ldrb	r2, [r3, #4]
   2005a:	9b03      	ldr	r3, [sp, #12]
   2005c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   2005e:	9b03      	ldr	r3, [sp, #12]
   20060:	88da      	ldrh	r2, [r3, #6]
   20062:	9b03      	ldr	r3, [sp, #12]
   20064:	801a      	strh	r2, [r3, #0]
}
   20066:	bf00      	nop
   20068:	b004      	add	sp, #16
   2006a:	4770      	bx	lr

0002006c <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   2006c:	b084      	sub	sp, #16
   2006e:	9003      	str	r0, [sp, #12]
   20070:	9102      	str	r1, [sp, #8]
   20072:	4613      	mov	r3, r2
   20074:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   20078:	9b02      	ldr	r3, [sp, #8]
   2007a:	1c5a      	adds	r2, r3, #1
   2007c:	9202      	str	r2, [sp, #8]
   2007e:	781a      	ldrb	r2, [r3, #0]
   20080:	9b03      	ldr	r3, [sp, #12]
   20082:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   20084:	9b02      	ldr	r3, [sp, #8]
   20086:	781b      	ldrb	r3, [r3, #0]
   20088:	b29a      	uxth	r2, r3
   2008a:	9b02      	ldr	r3, [sp, #8]
   2008c:	3301      	adds	r3, #1
   2008e:	781b      	ldrb	r3, [r3, #0]
   20090:	b29b      	uxth	r3, r3
   20092:	021b      	lsls	r3, r3, #8
   20094:	b29b      	uxth	r3, r3
   20096:	4413      	add	r3, r2
   20098:	b29a      	uxth	r2, r3
   2009a:	9b03      	ldr	r3, [sp, #12]
   2009c:	80da      	strh	r2, [r3, #6]
   2009e:	9b02      	ldr	r3, [sp, #8]
   200a0:	3302      	adds	r3, #2
   200a2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   200a4:	9b02      	ldr	r3, [sp, #8]
   200a6:	781b      	ldrb	r3, [r3, #0]
   200a8:	b29a      	uxth	r2, r3
   200aa:	9b02      	ldr	r3, [sp, #8]
   200ac:	3301      	adds	r3, #1
   200ae:	781b      	ldrb	r3, [r3, #0]
   200b0:	b29b      	uxth	r3, r3
   200b2:	021b      	lsls	r3, r3, #8
   200b4:	b29b      	uxth	r3, r3
   200b6:	4413      	add	r3, r2
   200b8:	b29a      	uxth	r2, r3
   200ba:	9b03      	ldr	r3, [sp, #12]
   200bc:	811a      	strh	r2, [r3, #8]
   200be:	9b02      	ldr	r3, [sp, #8]
   200c0:	3302      	adds	r3, #2
   200c2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   200c4:	9b02      	ldr	r3, [sp, #8]
   200c6:	781b      	ldrb	r3, [r3, #0]
   200c8:	b29a      	uxth	r2, r3
   200ca:	9b02      	ldr	r3, [sp, #8]
   200cc:	3301      	adds	r3, #1
   200ce:	781b      	ldrb	r3, [r3, #0]
   200d0:	b29b      	uxth	r3, r3
   200d2:	021b      	lsls	r3, r3, #8
   200d4:	b29b      	uxth	r3, r3
   200d6:	4413      	add	r3, r2
   200d8:	b29a      	uxth	r2, r3
   200da:	9b03      	ldr	r3, [sp, #12]
   200dc:	815a      	strh	r2, [r3, #10]
   200de:	9b02      	ldr	r3, [sp, #8]
   200e0:	3302      	adds	r3, #2
   200e2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   200e4:	9b02      	ldr	r3, [sp, #8]
   200e6:	781b      	ldrb	r3, [r3, #0]
   200e8:	b29a      	uxth	r2, r3
   200ea:	9b02      	ldr	r3, [sp, #8]
   200ec:	3301      	adds	r3, #1
   200ee:	781b      	ldrb	r3, [r3, #0]
   200f0:	b29b      	uxth	r3, r3
   200f2:	021b      	lsls	r3, r3, #8
   200f4:	b29b      	uxth	r3, r3
   200f6:	4413      	add	r3, r2
   200f8:	b29a      	uxth	r2, r3
   200fa:	9b03      	ldr	r3, [sp, #12]
   200fc:	819a      	strh	r2, [r3, #12]
   200fe:	9b02      	ldr	r3, [sp, #8]
   20100:	3302      	adds	r3, #2
   20102:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   20104:	9b03      	ldr	r3, [sp, #12]
   20106:	791a      	ldrb	r2, [r3, #4]
   20108:	9b03      	ldr	r3, [sp, #12]
   2010a:	70da      	strb	r2, [r3, #3]
}
   2010c:	bf00      	nop
   2010e:	b004      	add	sp, #16
   20110:	4770      	bx	lr

00020112 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   20112:	b084      	sub	sp, #16
   20114:	9003      	str	r0, [sp, #12]
   20116:	9102      	str	r1, [sp, #8]
   20118:	4613      	mov	r3, r2
   2011a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   2011e:	9b02      	ldr	r3, [sp, #8]
   20120:	781b      	ldrb	r3, [r3, #0]
   20122:	b29a      	uxth	r2, r3
   20124:	9b02      	ldr	r3, [sp, #8]
   20126:	3301      	adds	r3, #1
   20128:	781b      	ldrb	r3, [r3, #0]
   2012a:	b29b      	uxth	r3, r3
   2012c:	021b      	lsls	r3, r3, #8
   2012e:	b29b      	uxth	r3, r3
   20130:	4413      	add	r3, r2
   20132:	b29a      	uxth	r2, r3
   20134:	9b03      	ldr	r3, [sp, #12]
   20136:	809a      	strh	r2, [r3, #4]
   20138:	9b02      	ldr	r3, [sp, #8]
   2013a:	3302      	adds	r3, #2
   2013c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   2013e:	9b02      	ldr	r3, [sp, #8]
   20140:	781b      	ldrb	r3, [r3, #0]
   20142:	b29a      	uxth	r2, r3
   20144:	9b02      	ldr	r3, [sp, #8]
   20146:	3301      	adds	r3, #1
   20148:	781b      	ldrb	r3, [r3, #0]
   2014a:	b29b      	uxth	r3, r3
   2014c:	021b      	lsls	r3, r3, #8
   2014e:	b29b      	uxth	r3, r3
   20150:	4413      	add	r3, r2
   20152:	b29a      	uxth	r2, r3
   20154:	9b03      	ldr	r3, [sp, #12]
   20156:	80da      	strh	r2, [r3, #6]
   20158:	9b02      	ldr	r3, [sp, #8]
   2015a:	3302      	adds	r3, #2
   2015c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   2015e:	9b02      	ldr	r3, [sp, #8]
   20160:	781b      	ldrb	r3, [r3, #0]
   20162:	b29a      	uxth	r2, r3
   20164:	9b02      	ldr	r3, [sp, #8]
   20166:	3301      	adds	r3, #1
   20168:	781b      	ldrb	r3, [r3, #0]
   2016a:	b29b      	uxth	r3, r3
   2016c:	021b      	lsls	r3, r3, #8
   2016e:	b29b      	uxth	r3, r3
   20170:	4413      	add	r3, r2
   20172:	b29a      	uxth	r2, r3
   20174:	9b03      	ldr	r3, [sp, #12]
   20176:	811a      	strh	r2, [r3, #8]
   20178:	9b02      	ldr	r3, [sp, #8]
   2017a:	3302      	adds	r3, #2
   2017c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   2017e:	9b02      	ldr	r3, [sp, #8]
   20180:	781b      	ldrb	r3, [r3, #0]
   20182:	b29a      	uxth	r2, r3
   20184:	9b02      	ldr	r3, [sp, #8]
   20186:	3301      	adds	r3, #1
   20188:	781b      	ldrb	r3, [r3, #0]
   2018a:	b29b      	uxth	r3, r3
   2018c:	021b      	lsls	r3, r3, #8
   2018e:	b29b      	uxth	r3, r3
   20190:	4413      	add	r3, r2
   20192:	b29a      	uxth	r2, r3
   20194:	9b03      	ldr	r3, [sp, #12]
   20196:	815a      	strh	r2, [r3, #10]
   20198:	9b02      	ldr	r3, [sp, #8]
   2019a:	3302      	adds	r3, #2
   2019c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   2019e:	9b02      	ldr	r3, [sp, #8]
   201a0:	781b      	ldrb	r3, [r3, #0]
   201a2:	b29a      	uxth	r2, r3
   201a4:	9b02      	ldr	r3, [sp, #8]
   201a6:	3301      	adds	r3, #1
   201a8:	781b      	ldrb	r3, [r3, #0]
   201aa:	b29b      	uxth	r3, r3
   201ac:	021b      	lsls	r3, r3, #8
   201ae:	b29b      	uxth	r3, r3
   201b0:	4413      	add	r3, r2
   201b2:	b29a      	uxth	r2, r3
   201b4:	9b03      	ldr	r3, [sp, #12]
   201b6:	819a      	strh	r2, [r3, #12]
   201b8:	9b02      	ldr	r3, [sp, #8]
   201ba:	3302      	adds	r3, #2
   201bc:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   201be:	9b03      	ldr	r3, [sp, #12]
   201c0:	889a      	ldrh	r2, [r3, #4]
   201c2:	9b03      	ldr	r3, [sp, #12]
   201c4:	801a      	strh	r2, [r3, #0]
}
   201c6:	bf00      	nop
   201c8:	b004      	add	sp, #16
   201ca:	4770      	bx	lr

000201cc <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   201cc:	b084      	sub	sp, #16
   201ce:	9003      	str	r0, [sp, #12]
   201d0:	9102      	str	r1, [sp, #8]
   201d2:	4613      	mov	r3, r2
   201d4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   201d8:	9b02      	ldr	r3, [sp, #8]
   201da:	781b      	ldrb	r3, [r3, #0]
   201dc:	b29a      	uxth	r2, r3
   201de:	9b02      	ldr	r3, [sp, #8]
   201e0:	3301      	adds	r3, #1
   201e2:	781b      	ldrb	r3, [r3, #0]
   201e4:	b29b      	uxth	r3, r3
   201e6:	021b      	lsls	r3, r3, #8
   201e8:	b29b      	uxth	r3, r3
   201ea:	4413      	add	r3, r2
   201ec:	b29a      	uxth	r2, r3
   201ee:	9b03      	ldr	r3, [sp, #12]
   201f0:	809a      	strh	r2, [r3, #4]
   201f2:	9b02      	ldr	r3, [sp, #8]
   201f4:	3302      	adds	r3, #2
   201f6:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   201f8:	9b02      	ldr	r3, [sp, #8]
   201fa:	781b      	ldrb	r3, [r3, #0]
   201fc:	b29a      	uxth	r2, r3
   201fe:	9b02      	ldr	r3, [sp, #8]
   20200:	3301      	adds	r3, #1
   20202:	781b      	ldrb	r3, [r3, #0]
   20204:	b29b      	uxth	r3, r3
   20206:	021b      	lsls	r3, r3, #8
   20208:	b29b      	uxth	r3, r3
   2020a:	4413      	add	r3, r2
   2020c:	b29a      	uxth	r2, r3
   2020e:	9b03      	ldr	r3, [sp, #12]
   20210:	80da      	strh	r2, [r3, #6]
   20212:	9b02      	ldr	r3, [sp, #8]
   20214:	3302      	adds	r3, #2
   20216:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   20218:	9b02      	ldr	r3, [sp, #8]
   2021a:	781b      	ldrb	r3, [r3, #0]
   2021c:	b29a      	uxth	r2, r3
   2021e:	9b02      	ldr	r3, [sp, #8]
   20220:	3301      	adds	r3, #1
   20222:	781b      	ldrb	r3, [r3, #0]
   20224:	b29b      	uxth	r3, r3
   20226:	021b      	lsls	r3, r3, #8
   20228:	b29b      	uxth	r3, r3
   2022a:	4413      	add	r3, r2
   2022c:	b29a      	uxth	r2, r3
   2022e:	9b03      	ldr	r3, [sp, #12]
   20230:	811a      	strh	r2, [r3, #8]
   20232:	9b02      	ldr	r3, [sp, #8]
   20234:	3302      	adds	r3, #2
   20236:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   20238:	9b02      	ldr	r3, [sp, #8]
   2023a:	781b      	ldrb	r3, [r3, #0]
   2023c:	b29a      	uxth	r2, r3
   2023e:	9b02      	ldr	r3, [sp, #8]
   20240:	3301      	adds	r3, #1
   20242:	781b      	ldrb	r3, [r3, #0]
   20244:	b29b      	uxth	r3, r3
   20246:	021b      	lsls	r3, r3, #8
   20248:	b29b      	uxth	r3, r3
   2024a:	4413      	add	r3, r2
   2024c:	b29a      	uxth	r2, r3
   2024e:	9b03      	ldr	r3, [sp, #12]
   20250:	815a      	strh	r2, [r3, #10]
   20252:	9b02      	ldr	r3, [sp, #8]
   20254:	3302      	adds	r3, #2
   20256:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   20258:	9b02      	ldr	r3, [sp, #8]
   2025a:	781b      	ldrb	r3, [r3, #0]
   2025c:	b29a      	uxth	r2, r3
   2025e:	9b02      	ldr	r3, [sp, #8]
   20260:	3301      	adds	r3, #1
   20262:	781b      	ldrb	r3, [r3, #0]
   20264:	b29b      	uxth	r3, r3
   20266:	021b      	lsls	r3, r3, #8
   20268:	b29b      	uxth	r3, r3
   2026a:	4413      	add	r3, r2
   2026c:	b29a      	uxth	r2, r3
   2026e:	9b03      	ldr	r3, [sp, #12]
   20270:	819a      	strh	r2, [r3, #12]
   20272:	9b02      	ldr	r3, [sp, #8]
   20274:	3302      	adds	r3, #2
   20276:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   20278:	9b03      	ldr	r3, [sp, #12]
   2027a:	889a      	ldrh	r2, [r3, #4]
   2027c:	9b03      	ldr	r3, [sp, #12]
   2027e:	801a      	strh	r2, [r3, #0]
}
   20280:	bf00      	nop
   20282:	b004      	add	sp, #16
   20284:	4770      	bx	lr

00020286 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   20286:	b500      	push	{lr}
   20288:	b085      	sub	sp, #20
   2028a:	9003      	str	r0, [sp, #12]
   2028c:	9102      	str	r1, [sp, #8]
   2028e:	4613      	mov	r3, r2
   20290:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   20294:	9b02      	ldr	r3, [sp, #8]
   20296:	1c5a      	adds	r2, r3, #1
   20298:	9202      	str	r2, [sp, #8]
   2029a:	781a      	ldrb	r2, [r3, #0]
   2029c:	9b03      	ldr	r3, [sp, #12]
   2029e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   202a0:	9b03      	ldr	r3, [sp, #12]
   202a2:	3305      	adds	r3, #5
   202a4:	2240      	movs	r2, #64	; 0x40
   202a6:	9902      	ldr	r1, [sp, #8]
   202a8:	4618      	mov	r0, r3
   202aa:	f7eb ff29 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   202ae:	9b03      	ldr	r3, [sp, #12]
   202b0:	791a      	ldrb	r2, [r3, #4]
   202b2:	9b03      	ldr	r3, [sp, #12]
   202b4:	70da      	strb	r2, [r3, #3]
}
   202b6:	bf00      	nop
   202b8:	b005      	add	sp, #20
   202ba:	f85d fb04 	ldr.w	pc, [sp], #4

000202be <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   202be:	b500      	push	{lr}
   202c0:	b085      	sub	sp, #20
   202c2:	9003      	str	r0, [sp, #12]
   202c4:	9102      	str	r1, [sp, #8]
   202c6:	4613      	mov	r3, r2
   202c8:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   202cc:	9b02      	ldr	r3, [sp, #8]
   202ce:	1c5a      	adds	r2, r3, #1
   202d0:	9202      	str	r2, [sp, #8]
   202d2:	781a      	ldrb	r2, [r3, #0]
   202d4:	9b03      	ldr	r3, [sp, #12]
   202d6:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   202d8:	9b03      	ldr	r3, [sp, #12]
   202da:	3305      	adds	r3, #5
   202dc:	2220      	movs	r2, #32
   202de:	9902      	ldr	r1, [sp, #8]
   202e0:	4618      	mov	r0, r3
   202e2:	f7eb ff0d 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   202e6:	9b03      	ldr	r3, [sp, #12]
   202e8:	791a      	ldrb	r2, [r3, #4]
   202ea:	9b03      	ldr	r3, [sp, #12]
   202ec:	70da      	strb	r2, [r3, #3]
}
   202ee:	bf00      	nop
   202f0:	b005      	add	sp, #20
   202f2:	f85d fb04 	ldr.w	pc, [sp], #4

000202f6 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   202f6:	b084      	sub	sp, #16
   202f8:	9003      	str	r0, [sp, #12]
   202fa:	9102      	str	r1, [sp, #8]
   202fc:	4613      	mov	r3, r2
   202fe:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   20302:	9b02      	ldr	r3, [sp, #8]
   20304:	1c5a      	adds	r2, r3, #1
   20306:	9202      	str	r2, [sp, #8]
   20308:	781a      	ldrb	r2, [r3, #0]
   2030a:	9b03      	ldr	r3, [sp, #12]
   2030c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   2030e:	9b02      	ldr	r3, [sp, #8]
   20310:	781b      	ldrb	r3, [r3, #0]
   20312:	b29a      	uxth	r2, r3
   20314:	9b02      	ldr	r3, [sp, #8]
   20316:	3301      	adds	r3, #1
   20318:	781b      	ldrb	r3, [r3, #0]
   2031a:	b29b      	uxth	r3, r3
   2031c:	021b      	lsls	r3, r3, #8
   2031e:	b29b      	uxth	r3, r3
   20320:	4413      	add	r3, r2
   20322:	b29a      	uxth	r2, r3
   20324:	9b03      	ldr	r3, [sp, #12]
   20326:	80da      	strh	r2, [r3, #6]
   20328:	9b02      	ldr	r3, [sp, #8]
   2032a:	3302      	adds	r3, #2
   2032c:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   2032e:	9b03      	ldr	r3, [sp, #12]
   20330:	791a      	ldrb	r2, [r3, #4]
   20332:	9b03      	ldr	r3, [sp, #12]
   20334:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   20336:	9b03      	ldr	r3, [sp, #12]
   20338:	88da      	ldrh	r2, [r3, #6]
   2033a:	9b03      	ldr	r3, [sp, #12]
   2033c:	801a      	strh	r2, [r3, #0]
}
   2033e:	bf00      	nop
   20340:	b004      	add	sp, #16
   20342:	4770      	bx	lr

00020344 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   20344:	b084      	sub	sp, #16
   20346:	9003      	str	r0, [sp, #12]
   20348:	9102      	str	r1, [sp, #8]
   2034a:	4613      	mov	r3, r2
   2034c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   20350:	9b02      	ldr	r3, [sp, #8]
   20352:	781b      	ldrb	r3, [r3, #0]
   20354:	b29a      	uxth	r2, r3
   20356:	9b02      	ldr	r3, [sp, #8]
   20358:	3301      	adds	r3, #1
   2035a:	781b      	ldrb	r3, [r3, #0]
   2035c:	b29b      	uxth	r3, r3
   2035e:	021b      	lsls	r3, r3, #8
   20360:	b29b      	uxth	r3, r3
   20362:	4413      	add	r3, r2
   20364:	b29a      	uxth	r2, r3
   20366:	9b03      	ldr	r3, [sp, #12]
   20368:	809a      	strh	r2, [r3, #4]
   2036a:	9b02      	ldr	r3, [sp, #8]
   2036c:	3302      	adds	r3, #2
   2036e:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   20370:	9b03      	ldr	r3, [sp, #12]
   20372:	889a      	ldrh	r2, [r3, #4]
   20374:	9b03      	ldr	r3, [sp, #12]
   20376:	801a      	strh	r2, [r3, #0]
}
   20378:	bf00      	nop
   2037a:	b004      	add	sp, #16
   2037c:	4770      	bx	lr

0002037e <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   2037e:	b084      	sub	sp, #16
   20380:	9003      	str	r0, [sp, #12]
   20382:	9102      	str	r1, [sp, #8]
   20384:	4613      	mov	r3, r2
   20386:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   2038a:	9b02      	ldr	r3, [sp, #8]
   2038c:	1c5a      	adds	r2, r3, #1
   2038e:	9202      	str	r2, [sp, #8]
   20390:	781a      	ldrb	r2, [r3, #0]
   20392:	9b03      	ldr	r3, [sp, #12]
   20394:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   20396:	9b02      	ldr	r3, [sp, #8]
   20398:	781b      	ldrb	r3, [r3, #0]
   2039a:	b29a      	uxth	r2, r3
   2039c:	9b02      	ldr	r3, [sp, #8]
   2039e:	3301      	adds	r3, #1
   203a0:	781b      	ldrb	r3, [r3, #0]
   203a2:	b29b      	uxth	r3, r3
   203a4:	021b      	lsls	r3, r3, #8
   203a6:	b29b      	uxth	r3, r3
   203a8:	4413      	add	r3, r2
   203aa:	b29a      	uxth	r2, r3
   203ac:	9b03      	ldr	r3, [sp, #12]
   203ae:	80da      	strh	r2, [r3, #6]
   203b0:	9b02      	ldr	r3, [sp, #8]
   203b2:	3302      	adds	r3, #2
   203b4:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   203b6:	9b02      	ldr	r3, [sp, #8]
   203b8:	1c5a      	adds	r2, r3, #1
   203ba:	9202      	str	r2, [sp, #8]
   203bc:	781a      	ldrb	r2, [r3, #0]
   203be:	9b03      	ldr	r3, [sp, #12]
   203c0:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   203c2:	9b02      	ldr	r3, [sp, #8]
   203c4:	1c5a      	adds	r2, r3, #1
   203c6:	9202      	str	r2, [sp, #8]
   203c8:	781a      	ldrb	r2, [r3, #0]
   203ca:	9b03      	ldr	r3, [sp, #12]
   203cc:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   203ce:	9b03      	ldr	r3, [sp, #12]
   203d0:	791a      	ldrb	r2, [r3, #4]
   203d2:	9b03      	ldr	r3, [sp, #12]
   203d4:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   203d6:	9b03      	ldr	r3, [sp, #12]
   203d8:	88da      	ldrh	r2, [r3, #6]
   203da:	9b03      	ldr	r3, [sp, #12]
   203dc:	801a      	strh	r2, [r3, #0]
}
   203de:	bf00      	nop
   203e0:	b004      	add	sp, #16
   203e2:	4770      	bx	lr

000203e4 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   203e4:	b084      	sub	sp, #16
   203e6:	9003      	str	r0, [sp, #12]
   203e8:	9102      	str	r1, [sp, #8]
   203ea:	4613      	mov	r3, r2
   203ec:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   203f0:	9b02      	ldr	r3, [sp, #8]
   203f2:	1c5a      	adds	r2, r3, #1
   203f4:	9202      	str	r2, [sp, #8]
   203f6:	781a      	ldrb	r2, [r3, #0]
   203f8:	9b03      	ldr	r3, [sp, #12]
   203fa:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   203fc:	9b03      	ldr	r3, [sp, #12]
   203fe:	791a      	ldrb	r2, [r3, #4]
   20400:	9b03      	ldr	r3, [sp, #12]
   20402:	70da      	strb	r2, [r3, #3]
}
   20404:	bf00      	nop
   20406:	b004      	add	sp, #16
   20408:	4770      	bx	lr

0002040a <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   2040a:	b084      	sub	sp, #16
   2040c:	9003      	str	r0, [sp, #12]
   2040e:	9102      	str	r1, [sp, #8]
   20410:	4613      	mov	r3, r2
   20412:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   20416:	9b02      	ldr	r3, [sp, #8]
   20418:	1c5a      	adds	r2, r3, #1
   2041a:	9202      	str	r2, [sp, #8]
   2041c:	781a      	ldrb	r2, [r3, #0]
   2041e:	9b03      	ldr	r3, [sp, #12]
   20420:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   20422:	9b02      	ldr	r3, [sp, #8]
   20424:	781b      	ldrb	r3, [r3, #0]
   20426:	b29a      	uxth	r2, r3
   20428:	9b02      	ldr	r3, [sp, #8]
   2042a:	3301      	adds	r3, #1
   2042c:	781b      	ldrb	r3, [r3, #0]
   2042e:	b29b      	uxth	r3, r3
   20430:	021b      	lsls	r3, r3, #8
   20432:	b29b      	uxth	r3, r3
   20434:	4413      	add	r3, r2
   20436:	b29a      	uxth	r2, r3
   20438:	9b03      	ldr	r3, [sp, #12]
   2043a:	80da      	strh	r2, [r3, #6]
   2043c:	9b02      	ldr	r3, [sp, #8]
   2043e:	3302      	adds	r3, #2
   20440:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   20442:	9b02      	ldr	r3, [sp, #8]
   20444:	1c5a      	adds	r2, r3, #1
   20446:	9202      	str	r2, [sp, #8]
   20448:	781a      	ldrb	r2, [r3, #0]
   2044a:	9b03      	ldr	r3, [sp, #12]
   2044c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   2044e:	9b02      	ldr	r3, [sp, #8]
   20450:	1c5a      	adds	r2, r3, #1
   20452:	9202      	str	r2, [sp, #8]
   20454:	781a      	ldrb	r2, [r3, #0]
   20456:	9b03      	ldr	r3, [sp, #12]
   20458:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   2045a:	9b03      	ldr	r3, [sp, #12]
   2045c:	791a      	ldrb	r2, [r3, #4]
   2045e:	9b03      	ldr	r3, [sp, #12]
   20460:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   20462:	9b03      	ldr	r3, [sp, #12]
   20464:	88da      	ldrh	r2, [r3, #6]
   20466:	9b03      	ldr	r3, [sp, #12]
   20468:	801a      	strh	r2, [r3, #0]
}
   2046a:	bf00      	nop
   2046c:	b004      	add	sp, #16
   2046e:	4770      	bx	lr

00020470 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   20470:	b500      	push	{lr}
   20472:	b085      	sub	sp, #20
   20474:	9001      	str	r0, [sp, #4]
   20476:	460b      	mov	r3, r1
   20478:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   2047c:	9b01      	ldr	r3, [sp, #4]
   2047e:	1c5a      	adds	r2, r3, #1
   20480:	9201      	str	r2, [sp, #4]
   20482:	781b      	ldrb	r3, [r3, #0]
   20484:	f88d 300f 	strb.w	r3, [sp, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   20488:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2048c:	2b0f      	cmp	r3, #15
   2048e:	d864      	bhi.n	2055a <hciEvtProcessLeAdvReport+0xea>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   20490:	203b      	movs	r0, #59	; 0x3b
   20492:	f7ec fdd9 	bl	d048 <WsfBufAlloc>
   20496:	9002      	str	r0, [sp, #8]
   20498:	9b02      	ldr	r3, [sp, #8]
   2049a:	2b00      	cmp	r3, #0
   2049c:	d05e      	beq.n	2055c <hciEvtProcessLeAdvReport+0xec>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   2049e:	e04f      	b.n	20540 <hciEvtProcessLeAdvReport+0xd0>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   204a0:	9b01      	ldr	r3, [sp, #4]
   204a2:	1c5a      	adds	r2, r3, #1
   204a4:	9201      	str	r2, [sp, #4]
   204a6:	781a      	ldrb	r2, [r3, #0]
   204a8:	9b02      	ldr	r3, [sp, #8]
   204aa:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   204ac:	9b01      	ldr	r3, [sp, #4]
   204ae:	1c5a      	adds	r2, r3, #1
   204b0:	9201      	str	r2, [sp, #4]
   204b2:	781a      	ldrb	r2, [r3, #0]
   204b4:	9b02      	ldr	r3, [sp, #8]
   204b6:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   204b8:	9b02      	ldr	r3, [sp, #8]
   204ba:	330c      	adds	r3, #12
   204bc:	9901      	ldr	r1, [sp, #4]
   204be:	4618      	mov	r0, r3
   204c0:	f7f3 fff2 	bl	144a8 <BdaCpy>
   204c4:	9b01      	ldr	r3, [sp, #4]
   204c6:	3306      	adds	r3, #6
   204c8:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   204ca:	9b01      	ldr	r3, [sp, #4]
   204cc:	1c5a      	adds	r2, r3, #1
   204ce:	9201      	str	r2, [sp, #4]
   204d0:	781a      	ldrb	r2, [r3, #0]
   204d2:	9b02      	ldr	r3, [sp, #8]
   204d4:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   204d6:	9b02      	ldr	r3, [sp, #8]
   204d8:	7a1b      	ldrb	r3, [r3, #8]
   204da:	2b1f      	cmp	r3, #31
   204dc:	d838      	bhi.n	20550 <hciEvtProcessLeAdvReport+0xe0>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   204de:	9b02      	ldr	r3, [sp, #8]
   204e0:	f103 021c 	add.w	r2, r3, #28
   204e4:	9b02      	ldr	r3, [sp, #8]
   204e6:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   204e8:	9b02      	ldr	r3, [sp, #8]
   204ea:	6858      	ldr	r0, [r3, #4]
   204ec:	9b02      	ldr	r3, [sp, #8]
   204ee:	7a1b      	ldrb	r3, [r3, #8]
   204f0:	461a      	mov	r2, r3
   204f2:	9901      	ldr	r1, [sp, #4]
   204f4:	f7eb fe04 	bl	c100 <memcpy>
      p += pMsg->len;
   204f8:	9b02      	ldr	r3, [sp, #8]
   204fa:	7a1b      	ldrb	r3, [r3, #8]
   204fc:	461a      	mov	r2, r3
   204fe:	9b01      	ldr	r3, [sp, #4]
   20500:	4413      	add	r3, r2
   20502:	9301      	str	r3, [sp, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   20504:	9b01      	ldr	r3, [sp, #4]
   20506:	1c5a      	adds	r2, r3, #1
   20508:	9201      	str	r2, [sp, #4]
   2050a:	781b      	ldrb	r3, [r3, #0]
   2050c:	b25a      	sxtb	r2, r3
   2050e:	9b02      	ldr	r3, [sp, #8]
   20510:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   20512:	9b02      	ldr	r3, [sp, #8]
   20514:	2200      	movs	r2, #0
   20516:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   20518:	9b02      	ldr	r3, [sp, #8]
   2051a:	3313      	adds	r3, #19
   2051c:	2206      	movs	r2, #6
   2051e:	2100      	movs	r1, #0
   20520:	4618      	mov	r0, r3
   20522:	f007 ff8b 	bl	2843c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   20526:	9b02      	ldr	r3, [sp, #8]
   20528:	2200      	movs	r2, #0
   2052a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   2052c:	9b02      	ldr	r3, [sp, #8]
   2052e:	2206      	movs	r2, #6
   20530:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   20532:	9b02      	ldr	r3, [sp, #8]
   20534:	2200      	movs	r2, #0
   20536:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   20538:	4b0a      	ldr	r3, [pc, #40]	; (20564 <hciEvtProcessLeAdvReport+0xf4>)
   2053a:	689b      	ldr	r3, [r3, #8]
   2053c:	9802      	ldr	r0, [sp, #8]
   2053e:	4798      	blx	r3
    while (i-- > 0)
   20540:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20544:	1e5a      	subs	r2, r3, #1
   20546:	f88d 200f 	strb.w	r2, [sp, #15]
   2054a:	2b00      	cmp	r3, #0
   2054c:	d1a8      	bne.n	204a0 <hciEvtProcessLeAdvReport+0x30>
   2054e:	e000      	b.n	20552 <hciEvtProcessLeAdvReport+0xe2>
        break;
   20550:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   20552:	9802      	ldr	r0, [sp, #8]
   20554:	f7ec fdbe 	bl	d0d4 <WsfBufFree>
   20558:	e000      	b.n	2055c <hciEvtProcessLeAdvReport+0xec>
    return;
   2055a:	bf00      	nop
  }
}
   2055c:	b005      	add	sp, #20
   2055e:	f85d fb04 	ldr.w	pc, [sp], #4
   20562:	bf00      	nop
   20564:	1000973c 	.word	0x1000973c

00020568 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   20568:	b500      	push	{lr}
   2056a:	b089      	sub	sp, #36	; 0x24
   2056c:	9001      	str	r0, [sp, #4]
   2056e:	460b      	mov	r3, r1
   20570:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   20574:	9b01      	ldr	r3, [sp, #4]
   20576:	781b      	ldrb	r3, [r3, #0]
   20578:	f88d 301f 	strb.w	r3, [sp, #31]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   2057c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20580:	2b0f      	cmp	r3, #15
   20582:	f200 80d2 	bhi.w	2072a <hciEvtProcessLeExtAdvReport+0x1c2>
  {
    return;
  }

  ptr = p + 1;
   20586:	9b01      	ldr	r3, [sp, #4]
   20588:	3301      	adds	r3, #1
   2058a:	9306      	str	r3, [sp, #24]
  maxLen = 0;
   2058c:	2300      	movs	r3, #0
   2058e:	f88d 3017 	strb.w	r3, [sp, #23]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   20592:	e017      	b.n	205c4 <hciEvtProcessLeExtAdvReport+0x5c>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   20594:	9b06      	ldr	r3, [sp, #24]
   20596:	3317      	adds	r3, #23
   20598:	9306      	str	r3, [sp, #24]
    BSTREAM_TO_UINT8(dataLen, ptr);
   2059a:	9b06      	ldr	r3, [sp, #24]
   2059c:	1c5a      	adds	r2, r3, #1
   2059e:	9206      	str	r2, [sp, #24]
   205a0:	781b      	ldrb	r3, [r3, #0]
   205a2:	f88d 300f 	strb.w	r3, [sp, #15]
    ptr += dataLen;
   205a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   205aa:	9a06      	ldr	r2, [sp, #24]
   205ac:	4413      	add	r3, r2
   205ae:	9306      	str	r3, [sp, #24]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   205b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   205b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   205b8:	429a      	cmp	r2, r3
   205ba:	d903      	bls.n	205c4 <hciEvtProcessLeExtAdvReport+0x5c>
    {
      /* update max len */
      maxLen = dataLen;
   205bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   205c0:	f88d 3017 	strb.w	r3, [sp, #23]
  while (i-- > 0)
   205c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   205c8:	1e5a      	subs	r2, r3, #1
   205ca:	f88d 201f 	strb.w	r2, [sp, #31]
   205ce:	2b00      	cmp	r3, #0
   205d0:	d1e0      	bne.n	20594 <hciEvtProcessLeExtAdvReport+0x2c>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   205d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   205d6:	b29b      	uxth	r3, r3
   205d8:	3324      	adds	r3, #36	; 0x24
   205da:	b29b      	uxth	r3, r3
   205dc:	4618      	mov	r0, r3
   205de:	f7ec fd33 	bl	d048 <WsfBufAlloc>
   205e2:	9004      	str	r0, [sp, #16]
   205e4:	9b04      	ldr	r3, [sp, #16]
   205e6:	2b00      	cmp	r3, #0
   205e8:	f000 80a0 	beq.w	2072c <hciEvtProcessLeExtAdvReport+0x1c4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   205ec:	9b01      	ldr	r3, [sp, #4]
   205ee:	1c5a      	adds	r2, r3, #1
   205f0:	9201      	str	r2, [sp, #4]
   205f2:	781b      	ldrb	r3, [r3, #0]
   205f4:	f88d 301f 	strb.w	r3, [sp, #31]

    /* parse each report and execute callback */
    while (i-- > 0)
   205f8:	e089      	b.n	2070e <hciEvtProcessLeExtAdvReport+0x1a6>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   205fa:	9b01      	ldr	r3, [sp, #4]
   205fc:	781b      	ldrb	r3, [r3, #0]
   205fe:	b29a      	uxth	r2, r3
   20600:	9b01      	ldr	r3, [sp, #4]
   20602:	3301      	adds	r3, #1
   20604:	781b      	ldrb	r3, [r3, #0]
   20606:	b29b      	uxth	r3, r3
   20608:	021b      	lsls	r3, r3, #8
   2060a:	b29b      	uxth	r3, r3
   2060c:	4413      	add	r3, r2
   2060e:	b29a      	uxth	r2, r3
   20610:	9b04      	ldr	r3, [sp, #16]
   20612:	809a      	strh	r2, [r3, #4]
   20614:	9b01      	ldr	r3, [sp, #4]
   20616:	3302      	adds	r3, #2
   20618:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   2061a:	9b01      	ldr	r3, [sp, #4]
   2061c:	1c5a      	adds	r2, r3, #1
   2061e:	9201      	str	r2, [sp, #4]
   20620:	781a      	ldrb	r2, [r3, #0]
   20622:	9b04      	ldr	r3, [sp, #16]
   20624:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   20626:	9b04      	ldr	r3, [sp, #16]
   20628:	3307      	adds	r3, #7
   2062a:	9901      	ldr	r1, [sp, #4]
   2062c:	4618      	mov	r0, r3
   2062e:	f7f3 ff3b 	bl	144a8 <BdaCpy>
   20632:	9b01      	ldr	r3, [sp, #4]
   20634:	3306      	adds	r3, #6
   20636:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   20638:	9b01      	ldr	r3, [sp, #4]
   2063a:	1c5a      	adds	r2, r3, #1
   2063c:	9201      	str	r2, [sp, #4]
   2063e:	781a      	ldrb	r2, [r3, #0]
   20640:	9b04      	ldr	r3, [sp, #16]
   20642:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   20644:	9b01      	ldr	r3, [sp, #4]
   20646:	1c5a      	adds	r2, r3, #1
   20648:	9201      	str	r2, [sp, #4]
   2064a:	781a      	ldrb	r2, [r3, #0]
   2064c:	9b04      	ldr	r3, [sp, #16]
   2064e:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   20650:	9b01      	ldr	r3, [sp, #4]
   20652:	1c5a      	adds	r2, r3, #1
   20654:	9201      	str	r2, [sp, #4]
   20656:	781a      	ldrb	r2, [r3, #0]
   20658:	9b04      	ldr	r3, [sp, #16]
   2065a:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   2065c:	9b01      	ldr	r3, [sp, #4]
   2065e:	1c5a      	adds	r2, r3, #1
   20660:	9201      	str	r2, [sp, #4]
   20662:	781b      	ldrb	r3, [r3, #0]
   20664:	b25a      	sxtb	r2, r3
   20666:	9b04      	ldr	r3, [sp, #16]
   20668:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   2066a:	9b01      	ldr	r3, [sp, #4]
   2066c:	1c5a      	adds	r2, r3, #1
   2066e:	9201      	str	r2, [sp, #4]
   20670:	781b      	ldrb	r3, [r3, #0]
   20672:	b25a      	sxtb	r2, r3
   20674:	9b04      	ldr	r3, [sp, #16]
   20676:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   20678:	9b01      	ldr	r3, [sp, #4]
   2067a:	781b      	ldrb	r3, [r3, #0]
   2067c:	b29a      	uxth	r2, r3
   2067e:	9b01      	ldr	r3, [sp, #4]
   20680:	3301      	adds	r3, #1
   20682:	781b      	ldrb	r3, [r3, #0]
   20684:	b29b      	uxth	r3, r3
   20686:	021b      	lsls	r3, r3, #8
   20688:	b29b      	uxth	r3, r3
   2068a:	4413      	add	r3, r2
   2068c:	b29b      	uxth	r3, r3
   2068e:	b21a      	sxth	r2, r3
   20690:	9b04      	ldr	r3, [sp, #16]
   20692:	825a      	strh	r2, [r3, #18]
   20694:	9b01      	ldr	r3, [sp, #4]
   20696:	3302      	adds	r3, #2
   20698:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   2069a:	9b01      	ldr	r3, [sp, #4]
   2069c:	1c5a      	adds	r2, r3, #1
   2069e:	9201      	str	r2, [sp, #4]
   206a0:	781a      	ldrb	r2, [r3, #0]
   206a2:	9b04      	ldr	r3, [sp, #16]
   206a4:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   206a6:	9b04      	ldr	r3, [sp, #16]
   206a8:	3315      	adds	r3, #21
   206aa:	9901      	ldr	r1, [sp, #4]
   206ac:	4618      	mov	r0, r3
   206ae:	f7f3 fefb 	bl	144a8 <BdaCpy>
   206b2:	9b01      	ldr	r3, [sp, #4]
   206b4:	3306      	adds	r3, #6
   206b6:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   206b8:	9b01      	ldr	r3, [sp, #4]
   206ba:	1c5a      	adds	r2, r3, #1
   206bc:	9201      	str	r2, [sp, #4]
   206be:	781b      	ldrb	r3, [r3, #0]
   206c0:	b29a      	uxth	r2, r3
   206c2:	9b04      	ldr	r3, [sp, #16]
   206c4:	839a      	strh	r2, [r3, #28]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   206c6:	9b04      	ldr	r3, [sp, #16]
   206c8:	8b9b      	ldrh	r3, [r3, #28]
   206ca:	2be5      	cmp	r3, #229	; 0xe5
   206cc:	d828      	bhi.n	20720 <hciEvtProcessLeExtAdvReport+0x1b8>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   206ce:	9b04      	ldr	r3, [sp, #16]
   206d0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   206d4:	9b04      	ldr	r3, [sp, #16]
   206d6:	621a      	str	r2, [r3, #32]
      memcpy(pMsg->pData, p, pMsg->len);
   206d8:	9b04      	ldr	r3, [sp, #16]
   206da:	6a18      	ldr	r0, [r3, #32]
   206dc:	9b04      	ldr	r3, [sp, #16]
   206de:	8b9b      	ldrh	r3, [r3, #28]
   206e0:	461a      	mov	r2, r3
   206e2:	9901      	ldr	r1, [sp, #4]
   206e4:	f7eb fd0c 	bl	c100 <memcpy>
      p += pMsg->len;
   206e8:	9b04      	ldr	r3, [sp, #16]
   206ea:	8b9b      	ldrh	r3, [r3, #28]
   206ec:	461a      	mov	r2, r3
   206ee:	9b01      	ldr	r3, [sp, #4]
   206f0:	4413      	add	r3, r2
   206f2:	9301      	str	r3, [sp, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   206f4:	9b04      	ldr	r3, [sp, #16]
   206f6:	2200      	movs	r2, #0
   206f8:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   206fa:	9b04      	ldr	r3, [sp, #16]
   206fc:	222c      	movs	r2, #44	; 0x2c
   206fe:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   20700:	9b04      	ldr	r3, [sp, #16]
   20702:	2200      	movs	r2, #0
   20704:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   20706:	4b0b      	ldr	r3, [pc, #44]	; (20734 <hciEvtProcessLeExtAdvReport+0x1cc>)
   20708:	689b      	ldr	r3, [r3, #8]
   2070a:	9804      	ldr	r0, [sp, #16]
   2070c:	4798      	blx	r3
    while (i-- > 0)
   2070e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20712:	1e5a      	subs	r2, r3, #1
   20714:	f88d 201f 	strb.w	r2, [sp, #31]
   20718:	2b00      	cmp	r3, #0
   2071a:	f47f af6e 	bne.w	205fa <hciEvtProcessLeExtAdvReport+0x92>
   2071e:	e000      	b.n	20722 <hciEvtProcessLeExtAdvReport+0x1ba>
        break;
   20720:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   20722:	9804      	ldr	r0, [sp, #16]
   20724:	f7ec fcd6 	bl	d0d4 <WsfBufFree>
   20728:	e000      	b.n	2072c <hciEvtProcessLeExtAdvReport+0x1c4>
    return;
   2072a:	bf00      	nop
  }
}
   2072c:	b009      	add	sp, #36	; 0x24
   2072e:	f85d fb04 	ldr.w	pc, [sp], #4
   20732:	bf00      	nop
   20734:	1000973c 	.word	0x1000973c

00020738 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   20738:	b084      	sub	sp, #16
   2073a:	9003      	str	r0, [sp, #12]
   2073c:	9102      	str	r1, [sp, #8]
   2073e:	4613      	mov	r3, r2
   20740:	f88d 3007 	strb.w	r3, [sp, #7]
  /* empty */
}
   20744:	bf00      	nop
   20746:	b004      	add	sp, #16
   20748:	4770      	bx	lr

0002074a <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   2074a:	b084      	sub	sp, #16
   2074c:	9003      	str	r0, [sp, #12]
   2074e:	9102      	str	r1, [sp, #8]
   20750:	4613      	mov	r3, r2
   20752:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   20756:	9b02      	ldr	r3, [sp, #8]
   20758:	1c5a      	adds	r2, r3, #1
   2075a:	9202      	str	r2, [sp, #8]
   2075c:	781a      	ldrb	r2, [r3, #0]
   2075e:	9b03      	ldr	r3, [sp, #12]
   20760:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   20762:	9b02      	ldr	r3, [sp, #8]
   20764:	1c5a      	adds	r2, r3, #1
   20766:	9202      	str	r2, [sp, #8]
   20768:	781a      	ldrb	r2, [r3, #0]
   2076a:	9b03      	ldr	r3, [sp, #12]
   2076c:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   2076e:	9b02      	ldr	r3, [sp, #8]
   20770:	781b      	ldrb	r3, [r3, #0]
   20772:	b29a      	uxth	r2, r3
   20774:	9b02      	ldr	r3, [sp, #8]
   20776:	3301      	adds	r3, #1
   20778:	781b      	ldrb	r3, [r3, #0]
   2077a:	b29b      	uxth	r3, r3
   2077c:	021b      	lsls	r3, r3, #8
   2077e:	b29b      	uxth	r3, r3
   20780:	4413      	add	r3, r2
   20782:	b29a      	uxth	r2, r3
   20784:	9b03      	ldr	r3, [sp, #12]
   20786:	80da      	strh	r2, [r3, #6]
   20788:	9b02      	ldr	r3, [sp, #8]
   2078a:	3302      	adds	r3, #2
   2078c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   2078e:	9b02      	ldr	r3, [sp, #8]
   20790:	1c5a      	adds	r2, r3, #1
   20792:	9202      	str	r2, [sp, #8]
   20794:	781a      	ldrb	r2, [r3, #0]
   20796:	9b03      	ldr	r3, [sp, #12]
   20798:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   2079a:	9b03      	ldr	r3, [sp, #12]
   2079c:	791a      	ldrb	r2, [r3, #4]
   2079e:	9b03      	ldr	r3, [sp, #12]
   207a0:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   207a2:	9b03      	ldr	r3, [sp, #12]
   207a4:	88da      	ldrh	r2, [r3, #6]
   207a6:	9b03      	ldr	r3, [sp, #12]
   207a8:	801a      	strh	r2, [r3, #0]
}
   207aa:	bf00      	nop
   207ac:	b004      	add	sp, #16
   207ae:	4770      	bx	lr

000207b0 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   207b0:	b500      	push	{lr}
   207b2:	b085      	sub	sp, #20
   207b4:	9003      	str	r0, [sp, #12]
   207b6:	9102      	str	r1, [sp, #8]
   207b8:	4613      	mov	r3, r2
   207ba:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   207be:	9b02      	ldr	r3, [sp, #8]
   207c0:	1c5a      	adds	r2, r3, #1
   207c2:	9202      	str	r2, [sp, #8]
   207c4:	781a      	ldrb	r2, [r3, #0]
   207c6:	9b03      	ldr	r3, [sp, #12]
   207c8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   207ca:	9b02      	ldr	r3, [sp, #8]
   207cc:	1c5a      	adds	r2, r3, #1
   207ce:	9202      	str	r2, [sp, #8]
   207d0:	781a      	ldrb	r2, [r3, #0]
   207d2:	9b03      	ldr	r3, [sp, #12]
   207d4:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   207d6:	9b03      	ldr	r3, [sp, #12]
   207d8:	3306      	adds	r3, #6
   207da:	9902      	ldr	r1, [sp, #8]
   207dc:	4618      	mov	r0, r3
   207de:	f7f3 fe63 	bl	144a8 <BdaCpy>
   207e2:	9b02      	ldr	r3, [sp, #8]
   207e4:	3306      	adds	r3, #6
   207e6:	9302      	str	r3, [sp, #8]
}
   207e8:	bf00      	nop
   207ea:	b005      	add	sp, #20
   207ec:	f85d fb04 	ldr.w	pc, [sp], #4

000207f0 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   207f0:	b500      	push	{lr}
   207f2:	b085      	sub	sp, #20
   207f4:	9003      	str	r0, [sp, #12]
   207f6:	9102      	str	r1, [sp, #8]
   207f8:	4613      	mov	r3, r2
   207fa:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   207fe:	9b02      	ldr	r3, [sp, #8]
   20800:	1c5a      	adds	r2, r3, #1
   20802:	9202      	str	r2, [sp, #8]
   20804:	781a      	ldrb	r2, [r3, #0]
   20806:	9b03      	ldr	r3, [sp, #12]
   20808:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   2080a:	9b02      	ldr	r3, [sp, #8]
   2080c:	781b      	ldrb	r3, [r3, #0]
   2080e:	b29a      	uxth	r2, r3
   20810:	9b02      	ldr	r3, [sp, #8]
   20812:	3301      	adds	r3, #1
   20814:	781b      	ldrb	r3, [r3, #0]
   20816:	b29b      	uxth	r3, r3
   20818:	021b      	lsls	r3, r3, #8
   2081a:	b29b      	uxth	r3, r3
   2081c:	4413      	add	r3, r2
   2081e:	b29a      	uxth	r2, r3
   20820:	9b03      	ldr	r3, [sp, #12]
   20822:	80da      	strh	r2, [r3, #6]
   20824:	9b02      	ldr	r3, [sp, #8]
   20826:	3302      	adds	r3, #2
   20828:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   2082a:	9b02      	ldr	r3, [sp, #8]
   2082c:	1c5a      	adds	r2, r3, #1
   2082e:	9202      	str	r2, [sp, #8]
   20830:	781a      	ldrb	r2, [r3, #0]
   20832:	9b03      	ldr	r3, [sp, #12]
   20834:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   20836:	9b02      	ldr	r3, [sp, #8]
   20838:	1c5a      	adds	r2, r3, #1
   2083a:	9202      	str	r2, [sp, #8]
   2083c:	781a      	ldrb	r2, [r3, #0]
   2083e:	9b03      	ldr	r3, [sp, #12]
   20840:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   20842:	9b03      	ldr	r3, [sp, #12]
   20844:	330a      	adds	r3, #10
   20846:	9902      	ldr	r1, [sp, #8]
   20848:	4618      	mov	r0, r3
   2084a:	f7f3 fe2d 	bl	144a8 <BdaCpy>
   2084e:	9b02      	ldr	r3, [sp, #8]
   20850:	3306      	adds	r3, #6
   20852:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   20854:	9b02      	ldr	r3, [sp, #8]
   20856:	1c5a      	adds	r2, r3, #1
   20858:	9202      	str	r2, [sp, #8]
   2085a:	781a      	ldrb	r2, [r3, #0]
   2085c:	9b03      	ldr	r3, [sp, #12]
   2085e:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   20860:	9b02      	ldr	r3, [sp, #8]
   20862:	781b      	ldrb	r3, [r3, #0]
   20864:	b29a      	uxth	r2, r3
   20866:	9b02      	ldr	r3, [sp, #8]
   20868:	3301      	adds	r3, #1
   2086a:	781b      	ldrb	r3, [r3, #0]
   2086c:	b29b      	uxth	r3, r3
   2086e:	021b      	lsls	r3, r3, #8
   20870:	b29b      	uxth	r3, r3
   20872:	4413      	add	r3, r2
   20874:	b29a      	uxth	r2, r3
   20876:	9b03      	ldr	r3, [sp, #12]
   20878:	825a      	strh	r2, [r3, #18]
   2087a:	9b02      	ldr	r3, [sp, #8]
   2087c:	3302      	adds	r3, #2
   2087e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   20880:	9b02      	ldr	r3, [sp, #8]
   20882:	1c5a      	adds	r2, r3, #1
   20884:	9202      	str	r2, [sp, #8]
   20886:	781a      	ldrb	r2, [r3, #0]
   20888:	9b03      	ldr	r3, [sp, #12]
   2088a:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   2088c:	9b03      	ldr	r3, [sp, #12]
   2088e:	791a      	ldrb	r2, [r3, #4]
   20890:	9b03      	ldr	r3, [sp, #12]
   20892:	70da      	strb	r2, [r3, #3]
}
   20894:	bf00      	nop
   20896:	b005      	add	sp, #20
   20898:	f85d fb04 	ldr.w	pc, [sp], #4

0002089c <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   2089c:	b500      	push	{lr}
   2089e:	b085      	sub	sp, #20
   208a0:	9001      	str	r0, [sp, #4]
   208a2:	460b      	mov	r3, r1
   208a4:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   208a8:	9b01      	ldr	r3, [sp, #4]
   208aa:	799b      	ldrb	r3, [r3, #6]
   208ac:	f88d 300f 	strb.w	r3, [sp, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   208b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   208b4:	2bf7      	cmp	r3, #247	; 0xf7
   208b6:	d859      	bhi.n	2096c <hciEvtProcessLePerAdvReport+0xd0>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   208b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   208bc:	b29b      	uxth	r3, r3
   208be:	3310      	adds	r3, #16
   208c0:	b29b      	uxth	r3, r3
   208c2:	4618      	mov	r0, r3
   208c4:	f7ec fbc0 	bl	d048 <WsfBufAlloc>
   208c8:	9002      	str	r0, [sp, #8]
   208ca:	9b02      	ldr	r3, [sp, #8]
   208cc:	2b00      	cmp	r3, #0
   208ce:	d04e      	beq.n	2096e <hciEvtProcessLePerAdvReport+0xd2>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   208d0:	9b01      	ldr	r3, [sp, #4]
   208d2:	781b      	ldrb	r3, [r3, #0]
   208d4:	b29a      	uxth	r2, r3
   208d6:	9b01      	ldr	r3, [sp, #4]
   208d8:	3301      	adds	r3, #1
   208da:	781b      	ldrb	r3, [r3, #0]
   208dc:	b29b      	uxth	r3, r3
   208de:	021b      	lsls	r3, r3, #8
   208e0:	b29b      	uxth	r3, r3
   208e2:	4413      	add	r3, r2
   208e4:	b29a      	uxth	r2, r3
   208e6:	9b02      	ldr	r3, [sp, #8]
   208e8:	809a      	strh	r2, [r3, #4]
   208ea:	9b01      	ldr	r3, [sp, #4]
   208ec:	3302      	adds	r3, #2
   208ee:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   208f0:	9b01      	ldr	r3, [sp, #4]
   208f2:	1c5a      	adds	r2, r3, #1
   208f4:	9201      	str	r2, [sp, #4]
   208f6:	781a      	ldrb	r2, [r3, #0]
   208f8:	9b02      	ldr	r3, [sp, #8]
   208fa:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   208fc:	9b01      	ldr	r3, [sp, #4]
   208fe:	1c5a      	adds	r2, r3, #1
   20900:	9201      	str	r2, [sp, #4]
   20902:	781a      	ldrb	r2, [r3, #0]
   20904:	9b02      	ldr	r3, [sp, #8]
   20906:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   20908:	9b01      	ldr	r3, [sp, #4]
   2090a:	1c5a      	adds	r2, r3, #1
   2090c:	9201      	str	r2, [sp, #4]
   2090e:	781a      	ldrb	r2, [r3, #0]
   20910:	9b02      	ldr	r3, [sp, #8]
   20912:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   20914:	9b01      	ldr	r3, [sp, #4]
   20916:	1c5a      	adds	r2, r3, #1
   20918:	9201      	str	r2, [sp, #4]
   2091a:	781a      	ldrb	r2, [r3, #0]
   2091c:	9b02      	ldr	r3, [sp, #8]
   2091e:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   20920:	9b01      	ldr	r3, [sp, #4]
   20922:	1c5a      	adds	r2, r3, #1
   20924:	9201      	str	r2, [sp, #4]
   20926:	781b      	ldrb	r3, [r3, #0]
   20928:	b29a      	uxth	r2, r3
   2092a:	9b02      	ldr	r3, [sp, #8]
   2092c:	815a      	strh	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   2092e:	9b02      	ldr	r3, [sp, #8]
   20930:	f103 0210 	add.w	r2, r3, #16
   20934:	9b02      	ldr	r3, [sp, #8]
   20936:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   20938:	9b02      	ldr	r3, [sp, #8]
   2093a:	68d8      	ldr	r0, [r3, #12]
   2093c:	9b02      	ldr	r3, [sp, #8]
   2093e:	895b      	ldrh	r3, [r3, #10]
   20940:	461a      	mov	r2, r3
   20942:	9901      	ldr	r1, [sp, #4]
   20944:	f7eb fbdc 	bl	c100 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   20948:	9b02      	ldr	r3, [sp, #8]
   2094a:	2200      	movs	r2, #0
   2094c:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   2094e:	9b02      	ldr	r3, [sp, #8]
   20950:	2231      	movs	r2, #49	; 0x31
   20952:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   20954:	9b02      	ldr	r3, [sp, #8]
   20956:	7a5a      	ldrb	r2, [r3, #9]
   20958:	9b02      	ldr	r3, [sp, #8]
   2095a:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   2095c:	4b05      	ldr	r3, [pc, #20]	; (20974 <hciEvtProcessLePerAdvReport+0xd8>)
   2095e:	689b      	ldr	r3, [r3, #8]
   20960:	9802      	ldr	r0, [sp, #8]
   20962:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   20964:	9802      	ldr	r0, [sp, #8]
   20966:	f7ec fbb5 	bl	d0d4 <WsfBufFree>
   2096a:	e000      	b.n	2096e <hciEvtProcessLePerAdvReport+0xd2>
    return;
   2096c:	bf00      	nop
  }
}
   2096e:	b005      	add	sp, #20
   20970:	f85d fb04 	ldr.w	pc, [sp], #4
   20974:	1000973c 	.word	0x1000973c

00020978 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   20978:	b084      	sub	sp, #16
   2097a:	9003      	str	r0, [sp, #12]
   2097c:	9102      	str	r1, [sp, #8]
   2097e:	4613      	mov	r3, r2
   20980:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   20984:	9b02      	ldr	r3, [sp, #8]
   20986:	1c5a      	adds	r2, r3, #1
   20988:	9202      	str	r2, [sp, #8]
   2098a:	781a      	ldrb	r2, [r3, #0]
   2098c:	9b03      	ldr	r3, [sp, #12]
   2098e:	70da      	strb	r2, [r3, #3]
}
   20990:	bf00      	nop
   20992:	b004      	add	sp, #16
   20994:	4770      	bx	lr

00020996 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   20996:	b084      	sub	sp, #16
   20998:	9003      	str	r0, [sp, #12]
   2099a:	9102      	str	r1, [sp, #8]
   2099c:	4613      	mov	r3, r2
   2099e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   209a2:	9b02      	ldr	r3, [sp, #8]
   209a4:	781b      	ldrb	r3, [r3, #0]
   209a6:	b29a      	uxth	r2, r3
   209a8:	9b02      	ldr	r3, [sp, #8]
   209aa:	3301      	adds	r3, #1
   209ac:	781b      	ldrb	r3, [r3, #0]
   209ae:	b29b      	uxth	r3, r3
   209b0:	021b      	lsls	r3, r3, #8
   209b2:	b29b      	uxth	r3, r3
   209b4:	4413      	add	r3, r2
   209b6:	b29a      	uxth	r2, r3
   209b8:	9b03      	ldr	r3, [sp, #12]
   209ba:	809a      	strh	r2, [r3, #4]
   209bc:	9b02      	ldr	r3, [sp, #8]
   209be:	3302      	adds	r3, #2
   209c0:	9302      	str	r3, [sp, #8]
}
   209c2:	bf00      	nop
   209c4:	b004      	add	sp, #16
   209c6:	4770      	bx	lr

000209c8 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   209c8:	b500      	push	{lr}
   209ca:	b085      	sub	sp, #20
   209cc:	9001      	str	r0, [sp, #4]
   209ce:	460b      	mov	r3, r1
   209d0:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   209d4:	9b01      	ldr	r3, [sp, #4]
   209d6:	1c5a      	adds	r2, r3, #1
   209d8:	9201      	str	r2, [sp, #4]
   209da:	781b      	ldrb	r3, [r3, #0]
   209dc:	f88d 300f 	strb.w	r3, [sp, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   209e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   209e4:	2b0f      	cmp	r3, #15
   209e6:	d850      	bhi.n	20a8a <hciEvtProcessLeDirectAdvReport+0xc2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   209e8:	201c      	movs	r0, #28
   209ea:	f7ec fb2d 	bl	d048 <WsfBufAlloc>
   209ee:	9002      	str	r0, [sp, #8]
   209f0:	9b02      	ldr	r3, [sp, #8]
   209f2:	2b00      	cmp	r3, #0
   209f4:	d04a      	beq.n	20a8c <hciEvtProcessLeDirectAdvReport+0xc4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   209f6:	e03d      	b.n	20a74 <hciEvtProcessLeDirectAdvReport+0xac>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   209f8:	9b01      	ldr	r3, [sp, #4]
   209fa:	1c5a      	adds	r2, r3, #1
   209fc:	9201      	str	r2, [sp, #4]
   209fe:	781a      	ldrb	r2, [r3, #0]
   20a00:	9b02      	ldr	r3, [sp, #8]
   20a02:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   20a04:	9b01      	ldr	r3, [sp, #4]
   20a06:	1c5a      	adds	r2, r3, #1
   20a08:	9201      	str	r2, [sp, #4]
   20a0a:	781a      	ldrb	r2, [r3, #0]
   20a0c:	9b02      	ldr	r3, [sp, #8]
   20a0e:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   20a10:	9b02      	ldr	r3, [sp, #8]
   20a12:	330c      	adds	r3, #12
   20a14:	9901      	ldr	r1, [sp, #4]
   20a16:	4618      	mov	r0, r3
   20a18:	f7f3 fd46 	bl	144a8 <BdaCpy>
   20a1c:	9b01      	ldr	r3, [sp, #4]
   20a1e:	3306      	adds	r3, #6
   20a20:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   20a22:	9b01      	ldr	r3, [sp, #4]
   20a24:	1c5a      	adds	r2, r3, #1
   20a26:	9201      	str	r2, [sp, #4]
   20a28:	781a      	ldrb	r2, [r3, #0]
   20a2a:	9b02      	ldr	r3, [sp, #8]
   20a2c:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   20a2e:	9b02      	ldr	r3, [sp, #8]
   20a30:	3313      	adds	r3, #19
   20a32:	9901      	ldr	r1, [sp, #4]
   20a34:	4618      	mov	r0, r3
   20a36:	f7f3 fd37 	bl	144a8 <BdaCpy>
   20a3a:	9b01      	ldr	r3, [sp, #4]
   20a3c:	3306      	adds	r3, #6
   20a3e:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   20a40:	9b01      	ldr	r3, [sp, #4]
   20a42:	1c5a      	adds	r2, r3, #1
   20a44:	9201      	str	r2, [sp, #4]
   20a46:	781b      	ldrb	r3, [r3, #0]
   20a48:	b25a      	sxtb	r2, r3
   20a4a:	9b02      	ldr	r3, [sp, #8]
   20a4c:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   20a4e:	9b02      	ldr	r3, [sp, #8]
   20a50:	2200      	movs	r2, #0
   20a52:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   20a54:	9b02      	ldr	r3, [sp, #8]
   20a56:	2200      	movs	r2, #0
   20a58:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   20a5a:	9b02      	ldr	r3, [sp, #8]
   20a5c:	2200      	movs	r2, #0
   20a5e:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   20a60:	9b02      	ldr	r3, [sp, #8]
   20a62:	2206      	movs	r2, #6
   20a64:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   20a66:	9b02      	ldr	r3, [sp, #8]
   20a68:	2200      	movs	r2, #0
   20a6a:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   20a6c:	4b09      	ldr	r3, [pc, #36]	; (20a94 <hciEvtProcessLeDirectAdvReport+0xcc>)
   20a6e:	689b      	ldr	r3, [r3, #8]
   20a70:	9802      	ldr	r0, [sp, #8]
   20a72:	4798      	blx	r3
    while (i-- > 0)
   20a74:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20a78:	1e5a      	subs	r2, r3, #1
   20a7a:	f88d 200f 	strb.w	r2, [sp, #15]
   20a7e:	2b00      	cmp	r3, #0
   20a80:	d1ba      	bne.n	209f8 <hciEvtProcessLeDirectAdvReport+0x30>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   20a82:	9802      	ldr	r0, [sp, #8]
   20a84:	f7ec fb26 	bl	d0d4 <WsfBufFree>
   20a88:	e000      	b.n	20a8c <hciEvtProcessLeDirectAdvReport+0xc4>
    return;
   20a8a:	bf00      	nop
  }
}
   20a8c:	b005      	add	sp, #20
   20a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   20a92:	bf00      	nop
   20a94:	1000973c 	.word	0x1000973c

00020a98 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   20a98:	b082      	sub	sp, #8
   20a9a:	4603      	mov	r3, r0
   20a9c:	460a      	mov	r2, r1
   20a9e:	f88d 3007 	strb.w	r3, [sp, #7]
   20aa2:	4613      	mov	r3, r2
   20aa4:	f8ad 3004 	strh.w	r3, [sp, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   20aa8:	bf00      	nop
   20aaa:	b002      	add	sp, #8
   20aac:	4770      	bx	lr

00020aae <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   20aae:	b500      	push	{lr}
   20ab0:	b085      	sub	sp, #20
   20ab2:	9001      	str	r0, [sp, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   20ab4:	9b01      	ldr	r3, [sp, #4]
   20ab6:	1c5a      	adds	r2, r3, #1
   20ab8:	9201      	str	r2, [sp, #4]
   20aba:	781b      	ldrb	r3, [r3, #0]
   20abc:	f88d 300f 	strb.w	r3, [sp, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   20ac0:	9b01      	ldr	r3, [sp, #4]
   20ac2:	1c5a      	adds	r2, r3, #1
   20ac4:	9201      	str	r2, [sp, #4]
   20ac6:	781b      	ldrb	r3, [r3, #0]
   20ac8:	f88d 300e 	strb.w	r3, [sp, #14]
  BSTREAM_TO_UINT16(opcode, p);
   20acc:	9b01      	ldr	r3, [sp, #4]
   20ace:	781b      	ldrb	r3, [r3, #0]
   20ad0:	b29a      	uxth	r2, r3
   20ad2:	9b01      	ldr	r3, [sp, #4]
   20ad4:	3301      	adds	r3, #1
   20ad6:	781b      	ldrb	r3, [r3, #0]
   20ad8:	b29b      	uxth	r3, r3
   20ada:	021b      	lsls	r3, r3, #8
   20adc:	b29b      	uxth	r3, r3
   20ade:	4413      	add	r3, r2
   20ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
   20ae4:	9b01      	ldr	r3, [sp, #4]
   20ae6:	3302      	adds	r3, #2
   20ae8:	9301      	str	r3, [sp, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   20aea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20aee:	2b00      	cmp	r3, #0
   20af0:	d007      	beq.n	20b02 <hciEvtProcessCmdStatus+0x54>
  {
    hciEvtCmdStatusFailure(status, opcode);
   20af2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   20af6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20afa:	4611      	mov	r1, r2
   20afc:	4618      	mov	r0, r3
   20afe:	f7ff ffcb 	bl	20a98 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   20b02:	f89d 300e 	ldrb.w	r3, [sp, #14]
   20b06:	4618      	mov	r0, r3
   20b08:	f7fd f93c 	bl	1dd84 <hciCmdRecvCmpl>
}
   20b0c:	bf00      	nop
   20b0e:	b005      	add	sp, #20
   20b10:	f85d fb04 	ldr.w	pc, [sp], #4

00020b14 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   20b14:	b500      	push	{lr}
   20b16:	b087      	sub	sp, #28
   20b18:	9001      	str	r0, [sp, #4]
   20b1a:	460b      	mov	r3, r1
   20b1c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   20b20:	2300      	movs	r3, #0
   20b22:	f88d 3017 	strb.w	r3, [sp, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   20b26:	4bb7      	ldr	r3, [pc, #732]	; (20e04 <hciEvtProcessCmdCmpl+0x2f0>)
   20b28:	689b      	ldr	r3, [r3, #8]
   20b2a:	9304      	str	r3, [sp, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   20b2c:	9b01      	ldr	r3, [sp, #4]
   20b2e:	1c5a      	adds	r2, r3, #1
   20b30:	9201      	str	r2, [sp, #4]
   20b32:	781b      	ldrb	r3, [r3, #0]
   20b34:	f88d 300f 	strb.w	r3, [sp, #15]
  BSTREAM_TO_UINT16(opcode, p);
   20b38:	9b01      	ldr	r3, [sp, #4]
   20b3a:	781b      	ldrb	r3, [r3, #0]
   20b3c:	b29a      	uxth	r2, r3
   20b3e:	9b01      	ldr	r3, [sp, #4]
   20b40:	3301      	adds	r3, #1
   20b42:	781b      	ldrb	r3, [r3, #0]
   20b44:	b29b      	uxth	r3, r3
   20b46:	021b      	lsls	r3, r3, #8
   20b48:	b29b      	uxth	r3, r3
   20b4a:	4413      	add	r3, r2
   20b4c:	f8ad 300c 	strh.w	r3, [sp, #12]
   20b50:	9b01      	ldr	r3, [sp, #4]
   20b52:	3302      	adds	r3, #2
   20b54:	9301      	str	r3, [sp, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   20b56:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20b5a:	f242 0242 	movw	r2, #8258	; 0x2042
   20b5e:	4293      	cmp	r3, r2
   20b60:	f300 810a 	bgt.w	20d78 <hciEvtProcessCmdCmpl+0x264>
   20b64:	f242 020a 	movw	r2, #8202	; 0x200a
   20b68:	4293      	cmp	r3, r2
   20b6a:	da14      	bge.n	20b96 <hciEvtProcessCmdCmpl+0x82>
   20b6c:	f241 4205 	movw	r2, #5125	; 0x1405
   20b70:	4293      	cmp	r3, r2
   20b72:	f000 80c1 	beq.w	20cf8 <hciEvtProcessCmdCmpl+0x1e4>
   20b76:	f241 4205 	movw	r2, #5125	; 0x1405
   20b7a:	4293      	cmp	r3, r2
   20b7c:	f300 80fc 	bgt.w	20d78 <hciEvtProcessCmdCmpl+0x264>
   20b80:	f640 422d 	movw	r2, #3117	; 0xc2d
   20b84:	4293      	cmp	r3, r2
   20b86:	f000 80bb 	beq.w	20d00 <hciEvtProcessCmdCmpl+0x1ec>
   20b8a:	f640 427c 	movw	r2, #3196	; 0xc7c
   20b8e:	4293      	cmp	r3, r2
   20b90:	f000 80d2 	beq.w	20d38 <hciEvtProcessCmdCmpl+0x224>
   20b94:	e0f0      	b.n	20d78 <hciEvtProcessCmdCmpl+0x264>
   20b96:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   20b9a:	3b0a      	subs	r3, #10
   20b9c:	2b38      	cmp	r3, #56	; 0x38
   20b9e:	f200 80eb 	bhi.w	20d78 <hciEvtProcessCmdCmpl+0x264>
   20ba2:	a201      	add	r2, pc, #4	; (adr r2, 20ba8 <hciEvtProcessCmdCmpl+0x94>)
   20ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20ba8:	00020d59 	.word	0x00020d59
   20bac:	00020d79 	.word	0x00020d79
   20bb0:	00020d51 	.word	0x00020d51
   20bb4:	00020d79 	.word	0x00020d79
   20bb8:	00020c8d 	.word	0x00020c8d
   20bbc:	00020d79 	.word	0x00020d79
   20bc0:	00020d79 	.word	0x00020d79
   20bc4:	00020d79 	.word	0x00020d79
   20bc8:	00020d79 	.word	0x00020d79
   20bcc:	00020d79 	.word	0x00020d79
   20bd0:	00020d79 	.word	0x00020d79
   20bd4:	00020cf1 	.word	0x00020cf1
   20bd8:	00020d79 	.word	0x00020d79
   20bdc:	00020c95 	.word	0x00020c95
   20be0:	00020ce3 	.word	0x00020ce3
   20be4:	00020d79 	.word	0x00020d79
   20be8:	00020cd3 	.word	0x00020cd3
   20bec:	00020cdb 	.word	0x00020cdb
   20bf0:	00020d79 	.word	0x00020d79
   20bf4:	00020d79 	.word	0x00020d79
   20bf8:	00020d79 	.word	0x00020d79
   20bfc:	00020d79 	.word	0x00020d79
   20c00:	00020ca3 	.word	0x00020ca3
   20c04:	00020cab 	.word	0x00020cab
   20c08:	00020cc3 	.word	0x00020cc3
   20c0c:	00020cb3 	.word	0x00020cb3
   20c10:	00020cbb 	.word	0x00020cbb
   20c14:	00020d79 	.word	0x00020d79
   20c18:	00020d79 	.word	0x00020d79
   20c1c:	00020d09 	.word	0x00020d09
   20c20:	00020d11 	.word	0x00020d11
   20c24:	00020d19 	.word	0x00020d19
   20c28:	00020d79 	.word	0x00020d79
   20c2c:	00020d21 	.word	0x00020d21
   20c30:	00020d29 	.word	0x00020d29
   20c34:	00020d31 	.word	0x00020d31
   20c38:	00020d79 	.word	0x00020d79
   20c3c:	00020ccb 	.word	0x00020ccb
   20c40:	00020d41 	.word	0x00020d41
   20c44:	00020d49 	.word	0x00020d49
   20c48:	00020d79 	.word	0x00020d79
   20c4c:	00020d79 	.word	0x00020d79
   20c50:	00020d79 	.word	0x00020d79
   20c54:	00020d79 	.word	0x00020d79
   20c58:	00020d79 	.word	0x00020d79
   20c5c:	00020d79 	.word	0x00020d79
   20c60:	00020d79 	.word	0x00020d79
   20c64:	00020d69 	.word	0x00020d69
   20c68:	00020d79 	.word	0x00020d79
   20c6c:	00020d79 	.word	0x00020d79
   20c70:	00020d79 	.word	0x00020d79
   20c74:	00020d79 	.word	0x00020d79
   20c78:	00020d79 	.word	0x00020d79
   20c7c:	00020d79 	.word	0x00020d79
   20c80:	00020d71 	.word	0x00020d71
   20c84:	00020d79 	.word	0x00020d79
   20c88:	00020d61 	.word	0x00020d61
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   20c8c:	2305      	movs	r3, #5
   20c8e:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20c92:	e083      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   20c94:	231b      	movs	r3, #27
   20c96:	f88d 3017 	strb.w	r3, [sp, #23]
    cback = hciCb.secCback;
   20c9a:	4b5a      	ldr	r3, [pc, #360]	; (20e04 <hciEvtProcessCmdCmpl+0x2f0>)
   20c9c:	68db      	ldr	r3, [r3, #12]
   20c9e:	9304      	str	r3, [sp, #16]
    break;
   20ca0:	e07c      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   20ca2:	231d      	movs	r3, #29
   20ca4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20ca8:	e078      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   20caa:	231e      	movs	r3, #30
   20cac:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cb0:	e074      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   20cb2:	231f      	movs	r3, #31
   20cb4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cb8:	e070      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   20cba:	2320      	movs	r3, #32
   20cbc:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cc0:	e06c      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   20cc2:	2321      	movs	r3, #33	; 0x21
   20cc4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cc8:	e068      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   20cca:	2322      	movs	r3, #34	; 0x22
   20ccc:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cd0:	e064      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   20cd2:	230c      	movs	r3, #12
   20cd4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cd8:	e060      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   20cda:	230d      	movs	r3, #13
   20cdc:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20ce0:	e05c      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   20ce2:	231c      	movs	r3, #28
   20ce4:	f88d 3017 	strb.w	r3, [sp, #23]
    cback = hciCb.secCback;
   20ce8:	4b46      	ldr	r3, [pc, #280]	; (20e04 <hciEvtProcessCmdCmpl+0x2f0>)
   20cea:	68db      	ldr	r3, [r3, #12]
   20cec:	9304      	str	r3, [sp, #16]
    break;
   20cee:	e055      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   20cf0:	2308      	movs	r3, #8
   20cf2:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cf6:	e051      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   20cf8:	2307      	movs	r3, #7
   20cfa:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20cfe:	e04d      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   20d00:	2309      	movs	r3, #9
   20d02:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d06:	e049      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   20d08:	2315      	movs	r3, #21
   20d0a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d0e:	e045      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   20d10:	2316      	movs	r3, #22
   20d12:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d16:	e041      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   20d18:	2317      	movs	r3, #23
   20d1a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d1e:	e03d      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   20d20:	2318      	movs	r3, #24
   20d22:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d26:	e039      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   20d28:	2319      	movs	r3, #25
   20d2a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d2e:	e035      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   20d30:	231a      	movs	r3, #26
   20d32:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d36:	e031      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   20d38:	2327      	movs	r3, #39	; 0x27
   20d3a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d3e:	e02d      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   20d40:	2329      	movs	r3, #41	; 0x29
   20d42:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d46:	e029      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   20d48:	232a      	movs	r3, #42	; 0x2a
   20d4a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d4e:	e025      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   20d50:	2334      	movs	r3, #52	; 0x34
   20d52:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d56:	e021      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   20d58:	2335      	movs	r3, #53	; 0x35
   20d5a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d5e:	e01d      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   20d60:	2336      	movs	r3, #54	; 0x36
   20d62:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d66:	e019      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   20d68:	2337      	movs	r3, #55	; 0x37
   20d6a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d6e:	e015      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   20d70:	2338      	movs	r3, #56	; 0x38
   20d72:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   20d76:	e011      	b.n	20d9c <hciEvtProcessCmdCmpl+0x288>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   20d78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20d7c:	0a9b      	lsrs	r3, r3, #10
   20d7e:	b29b      	uxth	r3, r3
   20d80:	2b3f      	cmp	r3, #63	; 0x3f
   20d82:	d10a      	bne.n	20d9a <hciEvtProcessCmdCmpl+0x286>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   20d84:	f89d 2003 	ldrb.w	r2, [sp, #3]
   20d88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20d8c:	9901      	ldr	r1, [sp, #4]
   20d8e:	4618      	mov	r0, r3
   20d90:	f000 fe32 	bl	219f8 <hciCoreVsCmdCmplRcvd>
   20d94:	4603      	mov	r3, r0
   20d96:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    break;
   20d9a:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   20d9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   20da0:	2b00      	cmp	r3, #0
   20da2:	d025      	beq.n	20df0 <hciEvtProcessCmdCmpl+0x2dc>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   20da4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   20da8:	4a17      	ldr	r2, [pc, #92]	; (20e08 <hciEvtProcessCmdCmpl+0x2f4>)
   20daa:	5cd3      	ldrb	r3, [r2, r3]
   20dac:	b29b      	uxth	r3, r3
   20dae:	4618      	mov	r0, r3
   20db0:	f7ec f94a 	bl	d048 <WsfBufAlloc>
   20db4:	9002      	str	r0, [sp, #8]
   20db6:	9b02      	ldr	r3, [sp, #8]
   20db8:	2b00      	cmp	r3, #0
   20dba:	d019      	beq.n	20df0 <hciEvtProcessCmdCmpl+0x2dc>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   20dbc:	9b02      	ldr	r3, [sp, #8]
   20dbe:	2200      	movs	r2, #0
   20dc0:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   20dc2:	9b02      	ldr	r3, [sp, #8]
   20dc4:	f89d 2017 	ldrb.w	r2, [sp, #23]
   20dc8:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   20dca:	9b02      	ldr	r3, [sp, #8]
   20dcc:	2200      	movs	r2, #0
   20dce:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   20dd0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   20dd4:	4a0d      	ldr	r2, [pc, #52]	; (20e0c <hciEvtProcessCmdCmpl+0x2f8>)
   20dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   20dda:	f89d 2003 	ldrb.w	r2, [sp, #3]
   20dde:	9901      	ldr	r1, [sp, #4]
   20de0:	9802      	ldr	r0, [sp, #8]
   20de2:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   20de4:	9b04      	ldr	r3, [sp, #16]
   20de6:	9802      	ldr	r0, [sp, #8]
   20de8:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   20dea:	9802      	ldr	r0, [sp, #8]
   20dec:	f7ec f972 	bl	d0d4 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   20df0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20df4:	4618      	mov	r0, r3
   20df6:	f7fc ffc5 	bl	1dd84 <hciCmdRecvCmpl>
}
   20dfa:	bf00      	nop
   20dfc:	b007      	add	sp, #28
   20dfe:	f85d fb04 	ldr.w	pc, [sp], #4
   20e02:	bf00      	nop
   20e04:	1000973c 	.word	0x1000973c
   20e08:	0002cb60 	.word	0x0002cb60
   20e0c:	0002ca7c 	.word	0x0002ca7c

00020e10 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   20e10:	b500      	push	{lr}
   20e12:	b089      	sub	sp, #36	; 0x24
   20e14:	9001      	str	r0, [sp, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   20e16:	2300      	movs	r3, #0
   20e18:	f88d 301f 	strb.w	r3, [sp, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   20e1c:	4bd1      	ldr	r3, [pc, #836]	; (21164 <hciEvtProcessMsg+0x354>)
   20e1e:	689b      	ldr	r3, [r3, #8]
   20e20:	9306      	str	r3, [sp, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   20e22:	9b01      	ldr	r3, [sp, #4]
   20e24:	1c5a      	adds	r2, r3, #1
   20e26:	9201      	str	r2, [sp, #4]
   20e28:	781b      	ldrb	r3, [r3, #0]
   20e2a:	f88d 3017 	strb.w	r3, [sp, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   20e2e:	9b01      	ldr	r3, [sp, #4]
   20e30:	1c5a      	adds	r2, r3, #1
   20e32:	9201      	str	r2, [sp, #4]
   20e34:	781b      	ldrb	r3, [r3, #0]
   20e36:	f88d 3016 	strb.w	r3, [sp, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   20e3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   20e3e:	2b57      	cmp	r3, #87	; 0x57
   20e40:	f300 80b0 	bgt.w	20fa4 <hciEvtProcessMsg+0x194>
   20e44:	2b05      	cmp	r3, #5
   20e46:	f2c0 81eb 	blt.w	21220 <hciEvtProcessMsg+0x410>
   20e4a:	3b05      	subs	r3, #5
   20e4c:	2b52      	cmp	r3, #82	; 0x52
   20e4e:	f200 81e7 	bhi.w	21220 <hciEvtProcessMsg+0x410>
   20e52:	a201      	add	r2, pc, #4	; (adr r2, 20e58 <hciEvtProcessMsg+0x48>)
   20e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20e58:	00021187 	.word	0x00021187
   20e5c:	00021221 	.word	0x00021221
   20e60:	00021221 	.word	0x00021221
   20e64:	0002119b 	.word	0x0002119b
   20e68:	00021221 	.word	0x00021221
   20e6c:	00021221 	.word	0x00021221
   20e70:	00021221 	.word	0x00021221
   20e74:	000211af 	.word	0x000211af
   20e78:	00021221 	.word	0x00021221
   20e7c:	00020fc1 	.word	0x00020fc1
   20e80:	00020fad 	.word	0x00020fad
   20e84:	000211e5 	.word	0x000211e5
   20e88:	00021221 	.word	0x00021221
   20e8c:	00021221 	.word	0x00021221
   20e90:	00020fdb 	.word	0x00020fdb
   20e94:	00021221 	.word	0x00021221
   20e98:	00021221 	.word	0x00021221
   20e9c:	00021221 	.word	0x00021221
   20ea0:	00021221 	.word	0x00021221
   20ea4:	00021221 	.word	0x00021221
   20ea8:	00021221 	.word	0x00021221
   20eac:	000211d7 	.word	0x000211d7
   20eb0:	00021221 	.word	0x00021221
   20eb4:	00021221 	.word	0x00021221
   20eb8:	00021221 	.word	0x00021221
   20ebc:	00021221 	.word	0x00021221
   20ec0:	00021221 	.word	0x00021221
   20ec4:	00021221 	.word	0x00021221
   20ec8:	00021221 	.word	0x00021221
   20ecc:	00021221 	.word	0x00021221
   20ed0:	00021221 	.word	0x00021221
   20ed4:	00021221 	.word	0x00021221
   20ed8:	00021221 	.word	0x00021221
   20edc:	00021221 	.word	0x00021221
   20ee0:	00021221 	.word	0x00021221
   20ee4:	00021221 	.word	0x00021221
   20ee8:	00021221 	.word	0x00021221
   20eec:	00021221 	.word	0x00021221
   20ef0:	00021221 	.word	0x00021221
   20ef4:	00021221 	.word	0x00021221
   20ef8:	00021221 	.word	0x00021221
   20efc:	00021221 	.word	0x00021221
   20f00:	00021221 	.word	0x00021221
   20f04:	000211c3 	.word	0x000211c3
   20f08:	00021221 	.word	0x00021221
   20f0c:	00021221 	.word	0x00021221
   20f10:	00021221 	.word	0x00021221
   20f14:	00021221 	.word	0x00021221
   20f18:	00021221 	.word	0x00021221
   20f1c:	00021221 	.word	0x00021221
   20f20:	00021221 	.word	0x00021221
   20f24:	00021221 	.word	0x00021221
   20f28:	00021221 	.word	0x00021221
   20f2c:	00021221 	.word	0x00021221
   20f30:	00021221 	.word	0x00021221
   20f34:	00021221 	.word	0x00021221
   20f38:	00021221 	.word	0x00021221
   20f3c:	00020fef 	.word	0x00020fef
   20f40:	00021221 	.word	0x00021221
   20f44:	00021221 	.word	0x00021221
   20f48:	00021221 	.word	0x00021221
   20f4c:	00021221 	.word	0x00021221
   20f50:	00021221 	.word	0x00021221
   20f54:	00021221 	.word	0x00021221
   20f58:	00021221 	.word	0x00021221
   20f5c:	00021221 	.word	0x00021221
   20f60:	00021221 	.word	0x00021221
   20f64:	00021221 	.word	0x00021221
   20f68:	00021221 	.word	0x00021221
   20f6c:	00021221 	.word	0x00021221
   20f70:	00021221 	.word	0x00021221
   20f74:	00021221 	.word	0x00021221
   20f78:	00021221 	.word	0x00021221
   20f7c:	00021221 	.word	0x00021221
   20f80:	00021221 	.word	0x00021221
   20f84:	00021221 	.word	0x00021221
   20f88:	00021221 	.word	0x00021221
   20f8c:	00021221 	.word	0x00021221
   20f90:	00021221 	.word	0x00021221
   20f94:	00021221 	.word	0x00021221
   20f98:	00021221 	.word	0x00021221
   20f9c:	00021221 	.word	0x00021221
   20fa0:	000211f9 	.word	0x000211f9
   20fa4:	2bff      	cmp	r3, #255	; 0xff
   20fa6:	f000 8131 	beq.w	2120c <hciEvtProcessMsg+0x3fc>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   20faa:	e139      	b.n	21220 <hciEvtProcessMsg+0x410>
      hciEvtStats.numCmdStatusEvt++;
   20fac:	4b6e      	ldr	r3, [pc, #440]	; (21168 <hciEvtProcessMsg+0x358>)
   20fae:	891b      	ldrh	r3, [r3, #8]
   20fb0:	3301      	adds	r3, #1
   20fb2:	b29a      	uxth	r2, r3
   20fb4:	4b6c      	ldr	r3, [pc, #432]	; (21168 <hciEvtProcessMsg+0x358>)
   20fb6:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   20fb8:	9801      	ldr	r0, [sp, #4]
   20fba:	f7ff fd78 	bl	20aae <hciEvtProcessCmdStatus>
      break;
   20fbe:	e130      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numCmdCmplEvt++;
   20fc0:	4b69      	ldr	r3, [pc, #420]	; (21168 <hciEvtProcessMsg+0x358>)
   20fc2:	88db      	ldrh	r3, [r3, #6]
   20fc4:	3301      	adds	r3, #1
   20fc6:	b29a      	uxth	r2, r3
   20fc8:	4b67      	ldr	r3, [pc, #412]	; (21168 <hciEvtProcessMsg+0x358>)
   20fca:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   20fcc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   20fd0:	4619      	mov	r1, r3
   20fd2:	9801      	ldr	r0, [sp, #4]
   20fd4:	f7ff fd9e 	bl	20b14 <hciEvtProcessCmdCmpl>
      break;
   20fd8:	e123      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciCoreNumCmplPkts(pEvt);
   20fda:	9801      	ldr	r0, [sp, #4]
   20fdc:	f7fe f9e6 	bl	1f3ac <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   20fe0:	4b61      	ldr	r3, [pc, #388]	; (21168 <hciEvtProcessMsg+0x358>)
   20fe2:	899b      	ldrh	r3, [r3, #12]
   20fe4:	3301      	adds	r3, #1
   20fe6:	b29a      	uxth	r2, r3
   20fe8:	4b5f      	ldr	r3, [pc, #380]	; (21168 <hciEvtProcessMsg+0x358>)
   20fea:	819a      	strh	r2, [r3, #12]
      break;
   20fec:	e119      	b.n	21222 <hciEvtProcessMsg+0x412>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   20fee:	9b01      	ldr	r3, [sp, #4]
   20ff0:	1c5a      	adds	r2, r3, #1
   20ff2:	9201      	str	r2, [sp, #4]
   20ff4:	781b      	ldrb	r3, [r3, #0]
   20ff6:	f88d 3015 	strb.w	r3, [sp, #21]
      hciEvtStats.numLeMetaEvt++;
   20ffa:	4b5b      	ldr	r3, [pc, #364]	; (21168 <hciEvtProcessMsg+0x358>)
   20ffc:	8a5b      	ldrh	r3, [r3, #18]
   20ffe:	3301      	adds	r3, #1
   21000:	b29a      	uxth	r2, r3
   21002:	4b59      	ldr	r3, [pc, #356]	; (21168 <hciEvtProcessMsg+0x358>)
   21004:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   21006:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2100a:	3b01      	subs	r3, #1
   2100c:	2b12      	cmp	r3, #18
   2100e:	f200 80b8 	bhi.w	21182 <hciEvtProcessMsg+0x372>
   21012:	a201      	add	r2, pc, #4	; (adr r2, 21018 <hciEvtProcessMsg+0x208>)
   21014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21018:	00021065 	.word	0x00021065
   2101c:	00021099 	.word	0x00021099
   21020:	000210a7 	.word	0x000210a7
   21024:	000210af 	.word	0x000210af
   21028:	000210b7 	.word	0x000210b7
   2102c:	00021101 	.word	0x00021101
   21030:	00021109 	.word	0x00021109
   21034:	00021111 	.word	0x00021111
   21038:	0002111f 	.word	0x0002111f
   2103c:	000210bf 	.word	0x000210bf
   21040:	000210f3 	.word	0x000210f3
   21044:	0002112d 	.word	0x0002112d
   21048:	00021135 	.word	0x00021135
   2104c:	0002115b 	.word	0x0002115b
   21050:	0002116d 	.word	0x0002116d
   21054:	0002117b 	.word	0x0002117b
   21058:	00021143 	.word	0x00021143
   2105c:	0002114b 	.word	0x0002114b
   21060:	00021153 	.word	0x00021153
          if (*pEvt == HCI_SUCCESS)
   21064:	9b01      	ldr	r3, [sp, #4]
   21066:	781b      	ldrb	r3, [r3, #0]
   21068:	2b00      	cmp	r3, #0
   2106a:	d111      	bne.n	21090 <hciEvtProcessMsg+0x280>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   2106c:	9b01      	ldr	r3, [sp, #4]
   2106e:	3301      	adds	r3, #1
   21070:	781b      	ldrb	r3, [r3, #0]
   21072:	b29a      	uxth	r2, r3
   21074:	9b01      	ldr	r3, [sp, #4]
   21076:	3302      	adds	r3, #2
   21078:	781b      	ldrb	r3, [r3, #0]
   2107a:	b29b      	uxth	r3, r3
   2107c:	021b      	lsls	r3, r3, #8
   2107e:	b29b      	uxth	r3, r3
   21080:	4413      	add	r3, r2
   21082:	f8ad 3012 	strh.w	r3, [sp, #18]
            hciCoreConnOpen(handle);
   21086:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2108a:	4618      	mov	r0, r3
   2108c:	f7fd fde0 	bl	1ec50 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   21090:	2301      	movs	r3, #1
   21092:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21096:	e075      	b.n	21184 <hciEvtProcessMsg+0x374>
          hciEvtProcessLeAdvReport(pEvt, len);
   21098:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2109c:	4619      	mov	r1, r3
   2109e:	9801      	ldr	r0, [sp, #4]
   210a0:	f7ff f9e6 	bl	20470 <hciEvtProcessLeAdvReport>
          break;
   210a4:	e06e      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   210a6:	2304      	movs	r3, #4
   210a8:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   210ac:	e06a      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   210ae:	230b      	movs	r3, #11
   210b0:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   210b4:	e066      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   210b6:	2310      	movs	r3, #16
   210b8:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   210bc:	e062      	b.n	21184 <hciEvtProcessMsg+0x374>
          if (*pEvt == HCI_SUCCESS)
   210be:	9b01      	ldr	r3, [sp, #4]
   210c0:	781b      	ldrb	r3, [r3, #0]
   210c2:	2b00      	cmp	r3, #0
   210c4:	d111      	bne.n	210ea <hciEvtProcessMsg+0x2da>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   210c6:	9b01      	ldr	r3, [sp, #4]
   210c8:	3301      	adds	r3, #1
   210ca:	781b      	ldrb	r3, [r3, #0]
   210cc:	b29a      	uxth	r2, r3
   210ce:	9b01      	ldr	r3, [sp, #4]
   210d0:	3302      	adds	r3, #2
   210d2:	781b      	ldrb	r3, [r3, #0]
   210d4:	b29b      	uxth	r3, r3
   210d6:	021b      	lsls	r3, r3, #8
   210d8:	b29b      	uxth	r3, r3
   210da:	4413      	add	r3, r2
   210dc:	f8ad 3012 	strh.w	r3, [sp, #18]
            hciCoreConnOpen(handle);
   210e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   210e4:	4618      	mov	r0, r3
   210e6:	f7fd fdb3 	bl	1ec50 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   210ea:	2302      	movs	r3, #2
   210ec:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   210f0:	e048      	b.n	21184 <hciEvtProcessMsg+0x374>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   210f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   210f6:	4619      	mov	r1, r3
   210f8:	9801      	ldr	r0, [sp, #4]
   210fa:	f7ff fc65 	bl	209c8 <hciEvtProcessLeDirectAdvReport>
          break;
   210fe:	e041      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   21100:	2323      	movs	r3, #35	; 0x23
   21102:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21106:	e03d      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   21108:	2324      	movs	r3, #36	; 0x24
   2110a:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   2110e:	e039      	b.n	21184 <hciEvtProcessMsg+0x374>
          cback = hciCb.secCback;
   21110:	4b14      	ldr	r3, [pc, #80]	; (21164 <hciEvtProcessMsg+0x354>)
   21112:	68db      	ldr	r3, [r3, #12]
   21114:	9306      	str	r3, [sp, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   21116:	2325      	movs	r3, #37	; 0x25
   21118:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   2111c:	e032      	b.n	21184 <hciEvtProcessMsg+0x374>
          cback = hciCb.secCback;
   2111e:	4b11      	ldr	r3, [pc, #68]	; (21164 <hciEvtProcessMsg+0x354>)
   21120:	68db      	ldr	r3, [r3, #12]
   21122:	9306      	str	r3, [sp, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   21124:	2326      	movs	r3, #38	; 0x26
   21126:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   2112a:	e02b      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   2112c:	232b      	movs	r3, #43	; 0x2b
   2112e:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21132:	e027      	b.n	21184 <hciEvtProcessMsg+0x374>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   21134:	f89d 3016 	ldrb.w	r3, [sp, #22]
   21138:	4619      	mov	r1, r3
   2113a:	9801      	ldr	r0, [sp, #4]
   2113c:	f7ff fa14 	bl	20568 <hciEvtProcessLeExtAdvReport>
          break;
   21140:	e020      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   21142:	232d      	movs	r3, #45	; 0x2d
   21144:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21148:	e01c      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   2114a:	232e      	movs	r3, #46	; 0x2e
   2114c:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21150:	e018      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   21152:	232f      	movs	r3, #47	; 0x2f
   21154:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21158:	e014      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   2115a:	2330      	movs	r3, #48	; 0x30
   2115c:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21160:	e010      	b.n	21184 <hciEvtProcessMsg+0x374>
   21162:	bf00      	nop
   21164:	1000973c 	.word	0x1000973c
   21168:	10004548 	.word	0x10004548
          hciEvtProcessLePerAdvReport(pEvt, len);
   2116c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   21170:	4619      	mov	r1, r3
   21172:	9801      	ldr	r0, [sp, #4]
   21174:	f7ff fb92 	bl	2089c <hciEvtProcessLePerAdvReport>
          break;
   21178:	e004      	b.n	21184 <hciEvtProcessMsg+0x374>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   2117a:	2332      	movs	r3, #50	; 0x32
   2117c:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   21180:	e000      	b.n	21184 <hciEvtProcessMsg+0x374>
          break;
   21182:	bf00      	nop
      break;
   21184:	e04d      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numDiscCmplEvt++;
   21186:	4b49      	ldr	r3, [pc, #292]	; (212ac <hciEvtProcessMsg+0x49c>)
   21188:	881b      	ldrh	r3, [r3, #0]
   2118a:	3301      	adds	r3, #1
   2118c:	b29a      	uxth	r2, r3
   2118e:	4b47      	ldr	r3, [pc, #284]	; (212ac <hciEvtProcessMsg+0x49c>)
   21190:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   21192:	2303      	movs	r3, #3
   21194:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   21198:	e043      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numEncChangeEvt++;
   2119a:	4b44      	ldr	r3, [pc, #272]	; (212ac <hciEvtProcessMsg+0x49c>)
   2119c:	885b      	ldrh	r3, [r3, #2]
   2119e:	3301      	adds	r3, #1
   211a0:	b29a      	uxth	r2, r3
   211a2:	4b42      	ldr	r3, [pc, #264]	; (212ac <hciEvtProcessMsg+0x49c>)
   211a4:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   211a6:	230f      	movs	r3, #15
   211a8:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   211ac:	e039      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   211ae:	4b3f      	ldr	r3, [pc, #252]	; (212ac <hciEvtProcessMsg+0x49c>)
   211b0:	889b      	ldrh	r3, [r3, #4]
   211b2:	3301      	adds	r3, #1
   211b4:	b29a      	uxth	r2, r3
   211b6:	4b3d      	ldr	r3, [pc, #244]	; (212ac <hciEvtProcessMsg+0x49c>)
   211b8:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   211ba:	230a      	movs	r3, #10
   211bc:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   211c0:	e02f      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   211c2:	4b3a      	ldr	r3, [pc, #232]	; (212ac <hciEvtProcessMsg+0x49c>)
   211c4:	8a1b      	ldrh	r3, [r3, #16]
   211c6:	3301      	adds	r3, #1
   211c8:	b29a      	uxth	r2, r3
   211ca:	4b38      	ldr	r3, [pc, #224]	; (212ac <hciEvtProcessMsg+0x49c>)
   211cc:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   211ce:	230e      	movs	r3, #14
   211d0:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   211d4:	e025      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numDataBufOverflowEvt++;
   211d6:	4b35      	ldr	r3, [pc, #212]	; (212ac <hciEvtProcessMsg+0x49c>)
   211d8:	89db      	ldrh	r3, [r3, #14]
   211da:	3301      	adds	r3, #1
   211dc:	b29a      	uxth	r2, r3
   211de:	4b33      	ldr	r3, [pc, #204]	; (212ac <hciEvtProcessMsg+0x49c>)
   211e0:	81da      	strh	r2, [r3, #14]
      break;
   211e2:	e01e      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numHwErrorEvt++;
   211e4:	4b31      	ldr	r3, [pc, #196]	; (212ac <hciEvtProcessMsg+0x49c>)
   211e6:	895b      	ldrh	r3, [r3, #10]
   211e8:	3301      	adds	r3, #1
   211ea:	b29a      	uxth	r2, r3
   211ec:	4b2f      	ldr	r3, [pc, #188]	; (212ac <hciEvtProcessMsg+0x49c>)
   211ee:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   211f0:	2314      	movs	r3, #20
   211f2:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   211f6:	e014      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numAuthToEvt++;
   211f8:	4b2c      	ldr	r3, [pc, #176]	; (212ac <hciEvtProcessMsg+0x49c>)
   211fa:	8adb      	ldrh	r3, [r3, #22]
   211fc:	3301      	adds	r3, #1
   211fe:	b29a      	uxth	r2, r3
   21200:	4b2a      	ldr	r3, [pc, #168]	; (212ac <hciEvtProcessMsg+0x49c>)
   21202:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   21204:	2328      	movs	r3, #40	; 0x28
   21206:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   2120a:	e00a      	b.n	21222 <hciEvtProcessMsg+0x412>
      hciEvtStats.numVendorSpecEvt++;
   2120c:	4b27      	ldr	r3, [pc, #156]	; (212ac <hciEvtProcessMsg+0x49c>)
   2120e:	8a9b      	ldrh	r3, [r3, #20]
   21210:	3301      	adds	r3, #1
   21212:	b29a      	uxth	r2, r3
   21214:	4b25      	ldr	r3, [pc, #148]	; (212ac <hciEvtProcessMsg+0x49c>)
   21216:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   21218:	2313      	movs	r3, #19
   2121a:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   2121e:	e000      	b.n	21222 <hciEvtProcessMsg+0x412>
      break;
   21220:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   21222:	f89d 301f 	ldrb.w	r3, [sp, #31]
   21226:	2b00      	cmp	r3, #0
   21228:	d03b      	beq.n	212a2 <hciEvtProcessMsg+0x492>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   2122a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2122e:	4a20      	ldr	r2, [pc, #128]	; (212b0 <hciEvtProcessMsg+0x4a0>)
   21230:	5cd3      	ldrb	r3, [r2, r3]
   21232:	b29b      	uxth	r3, r3
   21234:	4618      	mov	r0, r3
   21236:	f7eb ff07 	bl	d048 <WsfBufAlloc>
   2123a:	9003      	str	r0, [sp, #12]
   2123c:	9b03      	ldr	r3, [sp, #12]
   2123e:	2b00      	cmp	r3, #0
   21240:	d019      	beq.n	21276 <hciEvtProcessMsg+0x466>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   21242:	9b03      	ldr	r3, [sp, #12]
   21244:	2200      	movs	r2, #0
   21246:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   21248:	9b03      	ldr	r3, [sp, #12]
   2124a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2124e:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   21250:	9b03      	ldr	r3, [sp, #12]
   21252:	2200      	movs	r2, #0
   21254:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   21256:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2125a:	4a16      	ldr	r2, [pc, #88]	; (212b4 <hciEvtProcessMsg+0x4a4>)
   2125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   21260:	f89d 2016 	ldrb.w	r2, [sp, #22]
   21264:	9901      	ldr	r1, [sp, #4]
   21266:	9803      	ldr	r0, [sp, #12]
   21268:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   2126a:	9b06      	ldr	r3, [sp, #24]
   2126c:	9803      	ldr	r0, [sp, #12]
   2126e:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   21270:	9803      	ldr	r0, [sp, #12]
   21272:	f7eb ff2f 	bl	d0d4 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   21276:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2127a:	2b03      	cmp	r3, #3
   2127c:	d111      	bne.n	212a2 <hciEvtProcessMsg+0x492>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   2127e:	9b01      	ldr	r3, [sp, #4]
   21280:	3301      	adds	r3, #1
   21282:	781b      	ldrb	r3, [r3, #0]
   21284:	b29a      	uxth	r2, r3
   21286:	9b01      	ldr	r3, [sp, #4]
   21288:	3302      	adds	r3, #2
   2128a:	781b      	ldrb	r3, [r3, #0]
   2128c:	b29b      	uxth	r3, r3
   2128e:	021b      	lsls	r3, r3, #8
   21290:	b29b      	uxth	r3, r3
   21292:	4413      	add	r3, r2
   21294:	f8ad 3012 	strh.w	r3, [sp, #18]
      hciCoreConnClose(handle);
   21298:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2129c:	4618      	mov	r0, r3
   2129e:	f7fd fce5 	bl	1ec6c <hciCoreConnClose>
    }
  }
}
   212a2:	bf00      	nop
   212a4:	b009      	add	sp, #36	; 0x24
   212a6:	f85d fb04 	ldr.w	pc, [sp], #4
   212aa:	bf00      	nop
   212ac:	10004548 	.word	0x10004548
   212b0:	0002cb60 	.word	0x0002cb60
   212b4:	0002ca7c 	.word	0x0002ca7c

000212b8 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   212b8:	b500      	push	{lr}
   212ba:	b085      	sub	sp, #20
   212bc:	9001      	str	r0, [sp, #4]
   212be:	9100      	str	r1, [sp, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   212c0:	9b00      	ldr	r3, [sp, #0]
   212c2:	3302      	adds	r3, #2
   212c4:	781b      	ldrb	r3, [r3, #0]
   212c6:	b29a      	uxth	r2, r3
   212c8:	9b00      	ldr	r3, [sp, #0]
   212ca:	3303      	adds	r3, #3
   212cc:	781b      	ldrb	r3, [r3, #0]
   212ce:	b29b      	uxth	r3, r3
   212d0:	021b      	lsls	r3, r3, #8
   212d2:	b29b      	uxth	r3, r3
   212d4:	4413      	add	r3, r2
   212d6:	f8ad 300e 	strh.w	r3, [sp, #14]
  len += HCI_ACL_HDR_LEN;
   212da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   212de:	3304      	adds	r3, #4
   212e0:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   212e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   212e8:	9a00      	ldr	r2, [sp, #0]
   212ea:	4619      	mov	r1, r3
   212ec:	2002      	movs	r0, #2
   212ee:	f7f2 feb5 	bl	1405c <hciDrvWrite>
   212f2:	4603      	mov	r3, r0
   212f4:	461a      	mov	r2, r3
   212f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   212fa:	4293      	cmp	r3, r2
   212fc:	d103      	bne.n	21306 <hciTrSendAclData+0x4e>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   212fe:	9900      	ldr	r1, [sp, #0]
   21300:	9801      	ldr	r0, [sp, #4]
   21302:	f7fd fe01 	bl	1ef08 <hciCoreTxAclComplete>
  }
}
   21306:	bf00      	nop
   21308:	b005      	add	sp, #20
   2130a:	f85d fb04 	ldr.w	pc, [sp], #4

0002130e <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   2130e:	b500      	push	{lr}
   21310:	b085      	sub	sp, #20
   21312:	9001      	str	r0, [sp, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   21314:	9b01      	ldr	r3, [sp, #4]
   21316:	3302      	adds	r3, #2
   21318:	781b      	ldrb	r3, [r3, #0]
   2131a:	3303      	adds	r3, #3
   2131c:	f88d 300f 	strb.w	r3, [sp, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   21320:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21324:	b29b      	uxth	r3, r3
   21326:	9a01      	ldr	r2, [sp, #4]
   21328:	4619      	mov	r1, r3
   2132a:	2001      	movs	r0, #1
   2132c:	f7f2 fe96 	bl	1405c <hciDrvWrite>
   21330:	4603      	mov	r3, r0
   21332:	461a      	mov	r2, r3
   21334:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21338:	b29b      	uxth	r3, r3
   2133a:	429a      	cmp	r2, r3
   2133c:	d102      	bne.n	21344 <hciTrSendCmd+0x36>
  {
    /* free buffer */
    WsfMsgFree(pData);
   2133e:	9801      	ldr	r0, [sp, #4]
   21340:	f7eb ff30 	bl	d1a4 <WsfMsgFree>
  }
}
   21344:	bf00      	nop
   21346:	b005      	add	sp, #20
   21348:	f85d fb04 	ldr.w	pc, [sp], #4

0002134c <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   2134c:	b500      	push	{lr}
   2134e:	b085      	sub	sp, #20
   21350:	9001      	str	r0, [sp, #4]
   21352:	460b      	mov	r3, r1
   21354:	f8ad 3002 	strh.w	r3, [sp, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   21358:	2300      	movs	r3, #0
   2135a:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   2135e:	e10f      	b.n	21580 <hciTrSerialRxIncoming+0x234>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   21360:	9b01      	ldr	r3, [sp, #4]
   21362:	781b      	ldrb	r3, [r3, #0]
   21364:	f88d 3008 	strb.w	r3, [sp, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   21368:	4b8b      	ldr	r3, [pc, #556]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   2136a:	781b      	ldrb	r3, [r3, #0]
   2136c:	2b00      	cmp	r3, #0
   2136e:	d11a      	bne.n	213a6 <hciTrSerialRxIncoming+0x5a>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   21370:	4a8a      	ldr	r2, [pc, #552]	; (2159c <hciTrSerialRxIncoming+0x250>)
   21372:	f89d 3008 	ldrb.w	r3, [sp, #8]
   21376:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   21378:	4b89      	ldr	r3, [pc, #548]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   2137a:	2200      	movs	r2, #0
   2137c:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   2137e:	4b86      	ldr	r3, [pc, #536]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   21380:	2201      	movs	r2, #1
   21382:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   21384:	4b87      	ldr	r3, [pc, #540]	; (215a4 <hciTrSerialRxIncoming+0x258>)
   21386:	2201      	movs	r2, #1
   21388:	701a      	strb	r2, [r3, #0]
      pBuf++;
   2138a:	9b01      	ldr	r3, [sp, #4]
   2138c:	3301      	adds	r3, #1
   2138e:	9301      	str	r3, [sp, #4]
      consumed_bytes++;
   21390:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21394:	3301      	adds	r3, #1
   21396:	f8ad 300e 	strh.w	r3, [sp, #14]
      len--;
   2139a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2139e:	3b01      	subs	r3, #1
   213a0:	f8ad 3002 	strh.w	r3, [sp, #2]
   213a4:	e0d6      	b.n	21554 <hciTrSerialRxIncoming+0x208>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   213a6:	4b7c      	ldr	r3, [pc, #496]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   213a8:	781b      	ldrb	r3, [r3, #0]
   213aa:	2b01      	cmp	r3, #1
   213ac:	f040 80ac 	bne.w	21508 <hciTrSerialRxIncoming+0x1bc>
    {
      uint8_t  hdrLen = 0;
   213b0:	2300      	movs	r3, #0
   213b2:	f88d 300d 	strb.w	r3, [sp, #13]
      uint16_t dataLen = 0;
   213b6:	2300      	movs	r3, #0
   213b8:	f8ad 300a 	strh.w	r3, [sp, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   213bc:	4b77      	ldr	r3, [pc, #476]	; (2159c <hciTrSerialRxIncoming+0x250>)
   213be:	781b      	ldrb	r3, [r3, #0]
   213c0:	2b04      	cmp	r3, #4
   213c2:	d103      	bne.n	213cc <hciTrSerialRxIncoming+0x80>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   213c4:	2302      	movs	r3, #2
   213c6:	f88d 300d 	strb.w	r3, [sp, #13]
   213ca:	e00a      	b.n	213e2 <hciTrSerialRxIncoming+0x96>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   213cc:	4b73      	ldr	r3, [pc, #460]	; (2159c <hciTrSerialRxIncoming+0x250>)
   213ce:	781b      	ldrb	r3, [r3, #0]
   213d0:	2b02      	cmp	r3, #2
   213d2:	d103      	bne.n	213dc <hciTrSerialRxIncoming+0x90>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   213d4:	2304      	movs	r3, #4
   213d6:	f88d 300d 	strb.w	r3, [sp, #13]
   213da:	e002      	b.n	213e2 <hciTrSerialRxIncoming+0x96>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   213dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   213e0:	e0d5      	b.n	2158e <hciTrSerialRxIncoming+0x242>
      }

      if (iRx != hdrLen) {
   213e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   213e6:	b29a      	uxth	r2, r3
   213e8:	4b6d      	ldr	r3, [pc, #436]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   213ea:	881b      	ldrh	r3, [r3, #0]
   213ec:	429a      	cmp	r2, r3
   213ee:	d017      	beq.n	21420 <hciTrSerialRxIncoming+0xd4>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   213f0:	4b6b      	ldr	r3, [pc, #428]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   213f2:	881b      	ldrh	r3, [r3, #0]
   213f4:	1c5a      	adds	r2, r3, #1
   213f6:	b291      	uxth	r1, r2
   213f8:	4a69      	ldr	r2, [pc, #420]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   213fa:	8011      	strh	r1, [r2, #0]
   213fc:	4619      	mov	r1, r3
   213fe:	4a6a      	ldr	r2, [pc, #424]	; (215a8 <hciTrSerialRxIncoming+0x25c>)
   21400:	f89d 3008 	ldrb.w	r3, [sp, #8]
   21404:	5453      	strb	r3, [r2, r1]
        pBuf++;
   21406:	9b01      	ldr	r3, [sp, #4]
   21408:	3301      	adds	r3, #1
   2140a:	9301      	str	r3, [sp, #4]
        consumed_bytes++;
   2140c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21410:	3301      	adds	r3, #1
   21412:	f8ad 300e 	strh.w	r3, [sp, #14]
        len--;
   21416:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2141a:	3b01      	subs	r3, #1
   2141c:	f8ad 3002 	strh.w	r3, [sp, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   21420:	f89d 300d 	ldrb.w	r3, [sp, #13]
   21424:	b29a      	uxth	r2, r3
   21426:	4b5e      	ldr	r3, [pc, #376]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   21428:	881b      	ldrh	r3, [r3, #0]
   2142a:	429a      	cmp	r2, r3
   2142c:	f040 8092 	bne.w	21554 <hciTrSerialRxIncoming+0x208>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   21430:	4b5a      	ldr	r3, [pc, #360]	; (2159c <hciTrSerialRxIncoming+0x250>)
   21432:	781b      	ldrb	r3, [r3, #0]
   21434:	2b04      	cmp	r3, #4
   21436:	d104      	bne.n	21442 <hciTrSerialRxIncoming+0xf6>
        {
          dataLen = hdrRx[1];
   21438:	4b5b      	ldr	r3, [pc, #364]	; (215a8 <hciTrSerialRxIncoming+0x25c>)
   2143a:	785b      	ldrb	r3, [r3, #1]
   2143c:	f8ad 300a 	strh.w	r3, [sp, #10]
   21440:	e00e      	b.n	21460 <hciTrSerialRxIncoming+0x114>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   21442:	4b56      	ldr	r3, [pc, #344]	; (2159c <hciTrSerialRxIncoming+0x250>)
   21444:	781b      	ldrb	r3, [r3, #0]
   21446:	2b02      	cmp	r3, #2
   21448:	d10a      	bne.n	21460 <hciTrSerialRxIncoming+0x114>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   2144a:	4b57      	ldr	r3, [pc, #348]	; (215a8 <hciTrSerialRxIncoming+0x25c>)
   2144c:	789b      	ldrb	r3, [r3, #2]
   2144e:	b29a      	uxth	r2, r3
   21450:	4b56      	ldr	r3, [pc, #344]	; (215ac <hciTrSerialRxIncoming+0x260>)
   21452:	781b      	ldrb	r3, [r3, #0]
   21454:	b29b      	uxth	r3, r3
   21456:	021b      	lsls	r3, r3, #8
   21458:	b29b      	uxth	r3, r3
   2145a:	4413      	add	r3, r2
   2145c:	f8ad 300a 	strh.w	r3, [sp, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   21460:	4b4e      	ldr	r3, [pc, #312]	; (2159c <hciTrSerialRxIncoming+0x250>)
   21462:	781b      	ldrb	r3, [r3, #0]
   21464:	2b02      	cmp	r3, #2
   21466:	d10e      	bne.n	21486 <hciTrSerialRxIncoming+0x13a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   21468:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2146c:	b29a      	uxth	r2, r3
   2146e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   21472:	4413      	add	r3, r2
   21474:	b29b      	uxth	r3, r3
   21476:	2100      	movs	r1, #0
   21478:	4618      	mov	r0, r3
   2147a:	f7eb fe63 	bl	d144 <WsfMsgDataAlloc>
   2147e:	4603      	mov	r3, r0
   21480:	4a4b      	ldr	r2, [pc, #300]	; (215b0 <hciTrSerialRxIncoming+0x264>)
   21482:	6013      	str	r3, [r2, #0]
   21484:	e00c      	b.n	214a0 <hciTrSerialRxIncoming+0x154>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   21486:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2148a:	b29a      	uxth	r2, r3
   2148c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   21490:	4413      	add	r3, r2
   21492:	b29b      	uxth	r3, r3
   21494:	4618      	mov	r0, r3
   21496:	f7eb fe6d 	bl	d174 <WsfMsgAlloc>
   2149a:	4603      	mov	r3, r0
   2149c:	4a44      	ldr	r2, [pc, #272]	; (215b0 <hciTrSerialRxIncoming+0x264>)
   2149e:	6013      	str	r3, [r2, #0]
        }

        if (pPktRx != NULL)
   214a0:	4b43      	ldr	r3, [pc, #268]	; (215b0 <hciTrSerialRxIncoming+0x264>)
   214a2:	681b      	ldr	r3, [r3, #0]
   214a4:	2b00      	cmp	r3, #0
   214a6:	d02c      	beq.n	21502 <hciTrSerialRxIncoming+0x1b6>
        {
          pDataRx = pPktRx;
   214a8:	4b41      	ldr	r3, [pc, #260]	; (215b0 <hciTrSerialRxIncoming+0x264>)
   214aa:	681b      	ldr	r3, [r3, #0]
   214ac:	4a41      	ldr	r2, [pc, #260]	; (215b4 <hciTrSerialRxIncoming+0x268>)
   214ae:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   214b0:	2300      	movs	r3, #0
   214b2:	f88d 3009 	strb.w	r3, [sp, #9]
   214b6:	e00e      	b.n	214d6 <hciTrSerialRxIncoming+0x18a>
            {
              *pDataRx++ = hdrRx[i];
   214b8:	f89d 2009 	ldrb.w	r2, [sp, #9]
   214bc:	4b3d      	ldr	r3, [pc, #244]	; (215b4 <hciTrSerialRxIncoming+0x268>)
   214be:	681b      	ldr	r3, [r3, #0]
   214c0:	1c59      	adds	r1, r3, #1
   214c2:	483c      	ldr	r0, [pc, #240]	; (215b4 <hciTrSerialRxIncoming+0x268>)
   214c4:	6001      	str	r1, [r0, #0]
   214c6:	4938      	ldr	r1, [pc, #224]	; (215a8 <hciTrSerialRxIncoming+0x25c>)
   214c8:	5c8a      	ldrb	r2, [r1, r2]
   214ca:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   214cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
   214d0:	3301      	adds	r3, #1
   214d2:	f88d 3009 	strb.w	r3, [sp, #9]
   214d6:	f89d 2009 	ldrb.w	r2, [sp, #9]
   214da:	f89d 300d 	ldrb.w	r3, [sp, #13]
   214de:	429a      	cmp	r2, r3
   214e0:	d3ea      	bcc.n	214b8 <hciTrSerialRxIncoming+0x16c>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   214e2:	4a2f      	ldr	r2, [pc, #188]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   214e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   214e8:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   214ea:	4b2d      	ldr	r3, [pc, #180]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   214ec:	881b      	ldrh	r3, [r3, #0]
   214ee:	2b00      	cmp	r3, #0
   214f0:	d103      	bne.n	214fa <hciTrSerialRxIncoming+0x1ae>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   214f2:	4b29      	ldr	r3, [pc, #164]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   214f4:	2203      	movs	r2, #3
   214f6:	701a      	strb	r2, [r3, #0]
   214f8:	e02c      	b.n	21554 <hciTrSerialRxIncoming+0x208>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   214fa:	4b27      	ldr	r3, [pc, #156]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   214fc:	2202      	movs	r2, #2
   214fe:	701a      	strb	r2, [r3, #0]
   21500:	e028      	b.n	21554 <hciTrSerialRxIncoming+0x208>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   21502:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21506:	e042      	b.n	2158e <hciTrSerialRxIncoming+0x242>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   21508:	4b23      	ldr	r3, [pc, #140]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   2150a:	781b      	ldrb	r3, [r3, #0]
   2150c:	2b02      	cmp	r3, #2
   2150e:	d121      	bne.n	21554 <hciTrSerialRxIncoming+0x208>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   21510:	4b28      	ldr	r3, [pc, #160]	; (215b4 <hciTrSerialRxIncoming+0x268>)
   21512:	681b      	ldr	r3, [r3, #0]
   21514:	1c5a      	adds	r2, r3, #1
   21516:	4927      	ldr	r1, [pc, #156]	; (215b4 <hciTrSerialRxIncoming+0x268>)
   21518:	600a      	str	r2, [r1, #0]
   2151a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2151e:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   21520:	4b1f      	ldr	r3, [pc, #124]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   21522:	881b      	ldrh	r3, [r3, #0]
   21524:	3b01      	subs	r3, #1
   21526:	b29a      	uxth	r2, r3
   21528:	4b1d      	ldr	r3, [pc, #116]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   2152a:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   2152c:	4b1c      	ldr	r3, [pc, #112]	; (215a0 <hciTrSerialRxIncoming+0x254>)
   2152e:	881b      	ldrh	r3, [r3, #0]
   21530:	2b00      	cmp	r3, #0
   21532:	d102      	bne.n	2153a <hciTrSerialRxIncoming+0x1ee>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   21534:	4b18      	ldr	r3, [pc, #96]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   21536:	2203      	movs	r2, #3
   21538:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   2153a:	9b01      	ldr	r3, [sp, #4]
   2153c:	3301      	adds	r3, #1
   2153e:	9301      	str	r3, [sp, #4]
      consumed_bytes++;
   21540:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21544:	3301      	adds	r3, #1
   21546:	f8ad 300e 	strh.w	r3, [sp, #14]
      len--;
   2154a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2154e:	3b01      	subs	r3, #1
   21550:	f8ad 3002 	strh.w	r3, [sp, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   21554:	4b10      	ldr	r3, [pc, #64]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   21556:	781b      	ldrb	r3, [r3, #0]
   21558:	2b03      	cmp	r3, #3
   2155a:	d111      	bne.n	21580 <hciTrSerialRxIncoming+0x234>
    {
      g_bHCIReceivingPacket = FALSE;
   2155c:	4b11      	ldr	r3, [pc, #68]	; (215a4 <hciTrSerialRxIncoming+0x258>)
   2155e:	2200      	movs	r2, #0
   21560:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   21562:	4b13      	ldr	r3, [pc, #76]	; (215b0 <hciTrSerialRxIncoming+0x264>)
   21564:	681b      	ldr	r3, [r3, #0]
   21566:	2b00      	cmp	r3, #0
   21568:	d007      	beq.n	2157a <hciTrSerialRxIncoming+0x22e>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   2156a:	4b0c      	ldr	r3, [pc, #48]	; (2159c <hciTrSerialRxIncoming+0x250>)
   2156c:	781b      	ldrb	r3, [r3, #0]
   2156e:	4a10      	ldr	r2, [pc, #64]	; (215b0 <hciTrSerialRxIncoming+0x264>)
   21570:	6812      	ldr	r2, [r2, #0]
   21572:	4611      	mov	r1, r2
   21574:	4618      	mov	r0, r3
   21576:	f7fd ff91 	bl	1f49c <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   2157a:	4b07      	ldr	r3, [pc, #28]	; (21598 <hciTrSerialRxIncoming+0x24c>)
   2157c:	2200      	movs	r2, #0
   2157e:	701a      	strb	r2, [r3, #0]
  while (len)
   21580:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   21584:	2b00      	cmp	r3, #0
   21586:	f47f aeeb 	bne.w	21360 <hciTrSerialRxIncoming+0x14>
    }
  }
  return consumed_bytes;
   2158a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   2158e:	4618      	mov	r0, r3
   21590:	b005      	add	sp, #20
   21592:	f85d fb04 	ldr.w	pc, [sp], #4
   21596:	bf00      	nop
   21598:	10004561 	.word	0x10004561
   2159c:	10004562 	.word	0x10004562
   215a0:	10004564 	.word	0x10004564
   215a4:	10004560 	.word	0x10004560
   215a8:	10004568 	.word	0x10004568
   215ac:	1000456b 	.word	0x1000456b
   215b0:	1000456c 	.word	0x1000456c
   215b4:	10004570 	.word	0x10004570

000215b8 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   215b8:	b508      	push	{r3, lr}
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   215ba:	4b0c      	ldr	r3, [pc, #48]	; (215ec <hciCoreReadResolvingListSize+0x34>)
   215bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   215be:	f003 0340 	and.w	r3, r3, #64	; 0x40
   215c2:	2b00      	cmp	r3, #0
   215c4:	d008      	beq.n	215d8 <hciCoreReadResolvingListSize+0x20>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   215c6:	4b0a      	ldr	r3, [pc, #40]	; (215f0 <hciCoreReadResolvingListSize+0x38>)
   215c8:	681b      	ldr	r3, [r3, #0]
   215ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   215ce:	2b00      	cmp	r3, #0
   215d0:	d002      	beq.n	215d8 <hciCoreReadResolvingListSize+0x20>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   215d2:	f7fd f9f6 	bl	1e9c2 <HciLeReadResolvingListSize>
   215d6:	e006      	b.n	215e6 <hciCoreReadResolvingListSize+0x2e>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   215d8:	4b04      	ldr	r3, [pc, #16]	; (215ec <hciCoreReadResolvingListSize+0x34>)
   215da:	2200      	movs	r2, #0
   215dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   215e0:	f000 f808 	bl	215f4 <hciCoreReadMaxDataLen>
  }
}
   215e4:	bf00      	nop
   215e6:	bf00      	nop
   215e8:	bd08      	pop	{r3, pc}
   215ea:	bf00      	nop
   215ec:	10009774 	.word	0x10009774
   215f0:	10002bd4 	.word	0x10002bd4

000215f4 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   215f4:	b508      	push	{r3, lr}
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   215f6:	4b0a      	ldr	r3, [pc, #40]	; (21620 <hciCoreReadMaxDataLen+0x2c>)
   215f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   215fa:	f003 0320 	and.w	r3, r3, #32
   215fe:	2b00      	cmp	r3, #0
   21600:	d008      	beq.n	21614 <hciCoreReadMaxDataLen+0x20>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   21602:	4b08      	ldr	r3, [pc, #32]	; (21624 <hciCoreReadMaxDataLen+0x30>)
   21604:	681b      	ldr	r3, [r3, #0]
   21606:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   2160a:	2b00      	cmp	r3, #0
   2160c:	d002      	beq.n	21614 <hciCoreReadMaxDataLen+0x20>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   2160e:	f7fc fe10 	bl	1e232 <HciLeReadMaxDataLen>
   21612:	e002      	b.n	2161a <hciCoreReadMaxDataLen+0x26>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   21614:	f7fc fe99 	bl	1e34a <HciLeRandCmd>
  }
}
   21618:	bf00      	nop
   2161a:	bf00      	nop
   2161c:	bd08      	pop	{r3, pc}
   2161e:	bf00      	nop
   21620:	10009774 	.word	0x10009774
   21624:	10002bd4 	.word	0x10002bd4

00021628 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   21628:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   2162a:	f7fd f8b9 	bl	1e7a0 <HciResetCmd>
}
   2162e:	bf00      	nop
   21630:	bd08      	pop	{r3, pc}
	...

00021634 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   21634:	b500      	push	{lr}
   21636:	b087      	sub	sp, #28
   21638:	9001      	str	r0, [sp, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   2163a:	9b01      	ldr	r3, [sp, #4]
   2163c:	781b      	ldrb	r3, [r3, #0]
   2163e:	2b0e      	cmp	r3, #14
   21640:	f040 81c1 	bne.w	219c6 <hciCoreResetSequence+0x392>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   21644:	9b01      	ldr	r3, [sp, #4]
   21646:	3302      	adds	r3, #2
   21648:	9301      	str	r3, [sp, #4]
    pMsg++;                   /* skip num packets */
   2164a:	9b01      	ldr	r3, [sp, #4]
   2164c:	3301      	adds	r3, #1
   2164e:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   21650:	9b01      	ldr	r3, [sp, #4]
   21652:	781b      	ldrb	r3, [r3, #0]
   21654:	b29a      	uxth	r2, r3
   21656:	9b01      	ldr	r3, [sp, #4]
   21658:	3301      	adds	r3, #1
   2165a:	781b      	ldrb	r3, [r3, #0]
   2165c:	b29b      	uxth	r3, r3
   2165e:	021b      	lsls	r3, r3, #8
   21660:	b29b      	uxth	r3, r3
   21662:	4413      	add	r3, r2
   21664:	f8ad 3016 	strh.w	r3, [sp, #22]
   21668:	9b01      	ldr	r3, [sp, #4]
   2166a:	3302      	adds	r3, #2
   2166c:	9301      	str	r3, [sp, #4]
    pMsg++;                   /* skip status */
   2166e:	9b01      	ldr	r3, [sp, #4]
   21670:	3301      	adds	r3, #1
   21672:	9301      	str	r3, [sp, #4]

    /* decode opcode */
    switch (opcode)
   21674:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   21678:	f242 024a 	movw	r2, #8266	; 0x204a
   2167c:	4293      	cmp	r3, r2
   2167e:	f300 81a4 	bgt.w	219ca <hciCoreResetSequence+0x396>
   21682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   21686:	dc1e      	bgt.n	216c6 <hciCoreResetSequence+0x92>
   21688:	f241 0209 	movw	r2, #4105	; 0x1009
   2168c:	4293      	cmp	r3, r2
   2168e:	f000 80c9 	beq.w	21824 <hciCoreResetSequence+0x1f0>
   21692:	f241 0209 	movw	r2, #4105	; 0x1009
   21696:	4293      	cmp	r3, r2
   21698:	f300 8197 	bgt.w	219ca <hciCoreResetSequence+0x396>
   2169c:	f640 4263 	movw	r2, #3171	; 0xc63
   216a0:	4293      	cmp	r3, r2
   216a2:	f000 80bc 	beq.w	2181e <hciCoreResetSequence+0x1ea>
   216a6:	f640 4263 	movw	r2, #3171	; 0xc63
   216aa:	4293      	cmp	r3, r2
   216ac:	f300 818d 	bgt.w	219ca <hciCoreResetSequence+0x396>
   216b0:	f640 4201 	movw	r2, #3073	; 0xc01
   216b4:	4293      	cmp	r3, r2
   216b6:	f000 80aa 	beq.w	2180e <hciCoreResetSequence+0x1da>
   216ba:	f640 4203 	movw	r2, #3075	; 0xc03
   216be:	4293      	cmp	r3, r2
   216c0:	f000 809e 	beq.w	21800 <hciCoreResetSequence+0x1cc>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   216c4:	e181      	b.n	219ca <hciCoreResetSequence+0x396>
   216c6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   216ca:	3b01      	subs	r3, #1
   216cc:	2b49      	cmp	r3, #73	; 0x49
   216ce:	f200 817c 	bhi.w	219ca <hciCoreResetSequence+0x396>
   216d2:	a201      	add	r2, pc, #4	; (adr r2, 216d8 <hciCoreResetSequence+0xa4>)
   216d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   216d8:	00021817 	.word	0x00021817
   216dc:	00021833 	.word	0x00021833
   216e0:	000218b5 	.word	0x000218b5
   216e4:	000219cb 	.word	0x000219cb
   216e8:	000219cb 	.word	0x000219cb
   216ec:	000219cb 	.word	0x000219cb
   216f0:	000219cb 	.word	0x000219cb
   216f4:	000219cb 	.word	0x000219cb
   216f8:	000219cb 	.word	0x000219cb
   216fc:	000219cb 	.word	0x000219cb
   21700:	000219cb 	.word	0x000219cb
   21704:	000219cb 	.word	0x000219cb
   21708:	000219cb 	.word	0x000219cb
   2170c:	000219cb 	.word	0x000219cb
   21710:	000218a1 	.word	0x000218a1
   21714:	000219cb 	.word	0x000219cb
   21718:	000219cb 	.word	0x000219cb
   2171c:	000219cb 	.word	0x000219cb
   21720:	000219cb 	.word	0x000219cb
   21724:	000219cb 	.word	0x000219cb
   21728:	000219cb 	.word	0x000219cb
   2172c:	000219cb 	.word	0x000219cb
   21730:	000219cb 	.word	0x000219cb
   21734:	0002198f 	.word	0x0002198f
   21738:	000219cb 	.word	0x000219cb
   2173c:	000219cb 	.word	0x000219cb
   21740:	000219cb 	.word	0x000219cb
   21744:	0002188f 	.word	0x0002188f
   21748:	000219cb 	.word	0x000219cb
   2174c:	000219cb 	.word	0x000219cb
   21750:	000219cb 	.word	0x000219cb
   21754:	000219cb 	.word	0x000219cb
   21758:	000219cb 	.word	0x000219cb
   2175c:	000219cb 	.word	0x000219cb
   21760:	000219cb 	.word	0x000219cb
   21764:	00021939 	.word	0x00021939
   21768:	000219cb 	.word	0x000219cb
   2176c:	000219cb 	.word	0x000219cb
   21770:	000219cb 	.word	0x000219cb
   21774:	000219cb 	.word	0x000219cb
   21778:	000219cb 	.word	0x000219cb
   2177c:	000218d7 	.word	0x000218d7
   21780:	000219cb 	.word	0x000219cb
   21784:	000219cb 	.word	0x000219cb
   21788:	000219cb 	.word	0x000219cb
   2178c:	000219cb 	.word	0x000219cb
   21790:	000218eb 	.word	0x000218eb
   21794:	000219cb 	.word	0x000219cb
   21798:	000219cb 	.word	0x000219cb
   2179c:	000219cb 	.word	0x000219cb
   217a0:	000219cb 	.word	0x000219cb
   217a4:	000219cb 	.word	0x000219cb
   217a8:	000219cb 	.word	0x000219cb
   217ac:	000219cb 	.word	0x000219cb
   217b0:	000219cb 	.word	0x000219cb
   217b4:	000219cb 	.word	0x000219cb
   217b8:	000219cb 	.word	0x000219cb
   217bc:	00021973 	.word	0x00021973
   217c0:	00021973 	.word	0x00021973
   217c4:	000219cb 	.word	0x000219cb
   217c8:	000219cb 	.word	0x000219cb
   217cc:	000219cb 	.word	0x000219cb
   217d0:	000219cb 	.word	0x000219cb
   217d4:	000219cb 	.word	0x000219cb
   217d8:	000219cb 	.word	0x000219cb
   217dc:	000219cb 	.word	0x000219cb
   217e0:	000219cb 	.word	0x000219cb
   217e4:	000219cb 	.word	0x000219cb
   217e8:	000219cb 	.word	0x000219cb
   217ec:	000219cb 	.word	0x000219cb
   217f0:	000219cb 	.word	0x000219cb
   217f4:	000219cb 	.word	0x000219cb
   217f8:	000219cb 	.word	0x000219cb
   217fc:	00021973 	.word	0x00021973
        randCnt = 0;
   21800:	4b75      	ldr	r3, [pc, #468]	; (219d8 <hciCoreResetSequence+0x3a4>)
   21802:	2200      	movs	r2, #0
   21804:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   21806:	4875      	ldr	r0, [pc, #468]	; (219dc <hciCoreResetSequence+0x3a8>)
   21808:	f7fc fffc 	bl	1e804 <HciSetEventMaskCmd>
        break;
   2180c:	e0e0      	b.n	219d0 <hciCoreResetSequence+0x39c>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   2180e:	4874      	ldr	r0, [pc, #464]	; (219e0 <hciCoreResetSequence+0x3ac>)
   21810:	f7fc fee0 	bl	1e5d4 <HciLeSetEventMaskCmd>
        break;
   21814:	e0dc      	b.n	219d0 <hciCoreResetSequence+0x39c>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   21816:	4873      	ldr	r0, [pc, #460]	; (219e4 <hciCoreResetSequence+0x3b0>)
   21818:	f7fd f80f 	bl	1e83a <HciSetEventMaskPage2Cmd>
        break;
   2181c:	e0d8      	b.n	219d0 <hciCoreResetSequence+0x39c>
        HciReadBdAddrCmd();
   2181e:	f7fc ff72 	bl	1e706 <HciReadBdAddrCmd>
        break;
   21822:	e0d5      	b.n	219d0 <hciCoreResetSequence+0x39c>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   21824:	9901      	ldr	r1, [sp, #4]
   21826:	4870      	ldr	r0, [pc, #448]	; (219e8 <hciCoreResetSequence+0x3b4>)
   21828:	f7f2 fe3e 	bl	144a8 <BdaCpy>
        HciLeReadBufSizeCmd();
   2182c:	f7fc fd9f 	bl	1e36e <HciLeReadBufSizeCmd>
        break;
   21830:	e0ce      	b.n	219d0 <hciCoreResetSequence+0x39c>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   21832:	9b01      	ldr	r3, [sp, #4]
   21834:	781b      	ldrb	r3, [r3, #0]
   21836:	b29a      	uxth	r2, r3
   21838:	9b01      	ldr	r3, [sp, #4]
   2183a:	3301      	adds	r3, #1
   2183c:	781b      	ldrb	r3, [r3, #0]
   2183e:	b29b      	uxth	r3, r3
   21840:	021b      	lsls	r3, r3, #8
   21842:	b29b      	uxth	r3, r3
   21844:	4413      	add	r3, r2
   21846:	b29a      	uxth	r2, r3
   21848:	4b68      	ldr	r3, [pc, #416]	; (219ec <hciCoreResetSequence+0x3b8>)
   2184a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   2184e:	9b01      	ldr	r3, [sp, #4]
   21850:	3302      	adds	r3, #2
   21852:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   21854:	9b01      	ldr	r3, [sp, #4]
   21856:	1c5a      	adds	r2, r3, #1
   21858:	9201      	str	r2, [sp, #4]
   2185a:	781a      	ldrb	r2, [r3, #0]
   2185c:	4b63      	ldr	r3, [pc, #396]	; (219ec <hciCoreResetSequence+0x3b8>)
   2185e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
   21862:	4b63      	ldr	r3, [pc, #396]	; (219f0 <hciCoreResetSequence+0x3bc>)
   21864:	68db      	ldr	r3, [r3, #12]
   21866:	b2db      	uxtb	r3, r3
   21868:	2b20      	cmp	r3, #32
   2186a:	d807      	bhi.n	2187c <hciCoreResetSequence+0x248>
          hciCoreCb.numBufs--;
   2186c:	4b5f      	ldr	r3, [pc, #380]	; (219ec <hciCoreResetSequence+0x3b8>)
   2186e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   21872:	3b01      	subs	r3, #1
   21874:	b2da      	uxtb	r2, r3
   21876:	4b5d      	ldr	r3, [pc, #372]	; (219ec <hciCoreResetSequence+0x3b8>)
   21878:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   2187c:	4b5b      	ldr	r3, [pc, #364]	; (219ec <hciCoreResetSequence+0x3b8>)
   2187e:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   21882:	4b5a      	ldr	r3, [pc, #360]	; (219ec <hciCoreResetSequence+0x3b8>)
   21884:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        HciLeReadSupStatesCmd();
   21888:	f7fc fdbd 	bl	1e406 <HciLeReadSupStatesCmd>
        break;
   2188c:	e0a0      	b.n	219d0 <hciCoreResetSequence+0x39c>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   2188e:	4b57      	ldr	r3, [pc, #348]	; (219ec <hciCoreResetSequence+0x3b8>)
   21890:	9a01      	ldr	r2, [sp, #4]
   21892:	3354      	adds	r3, #84	; 0x54
   21894:	6810      	ldr	r0, [r2, #0]
   21896:	6851      	ldr	r1, [r2, #4]
   21898:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   2189a:	f7fc fdc6 	bl	1e42a <HciLeReadWhiteListSizeCmd>
        break;
   2189e:	e097      	b.n	219d0 <hciCoreResetSequence+0x39c>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   218a0:	9b01      	ldr	r3, [sp, #4]
   218a2:	1c5a      	adds	r2, r3, #1
   218a4:	9201      	str	r2, [sp, #4]
   218a6:	781a      	ldrb	r2, [r3, #0]
   218a8:	4b50      	ldr	r3, [pc, #320]	; (219ec <hciCoreResetSequence+0x3b8>)
   218aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        HciLeReadLocalSupFeatCmd();
   218ae:	f7fc fd70 	bl	1e392 <HciLeReadLocalSupFeatCmd>
        break;
   218b2:	e08d      	b.n	219d0 <hciCoreResetSequence+0x39c>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   218b4:	9b01      	ldr	r3, [sp, #4]
   218b6:	781b      	ldrb	r3, [r3, #0]
   218b8:	461a      	mov	r2, r3
   218ba:	9b01      	ldr	r3, [sp, #4]
   218bc:	3301      	adds	r3, #1
   218be:	781b      	ldrb	r3, [r3, #0]
   218c0:	021b      	lsls	r3, r3, #8
   218c2:	4413      	add	r3, r2
   218c4:	461a      	mov	r2, r3
   218c6:	4b49      	ldr	r3, [pc, #292]	; (219ec <hciCoreResetSequence+0x3b8>)
   218c8:	67da      	str	r2, [r3, #124]	; 0x7c
   218ca:	9b01      	ldr	r3, [sp, #4]
   218cc:	3302      	adds	r3, #2
   218ce:	9301      	str	r3, [sp, #4]
        hciCoreReadResolvingListSize();
   218d0:	f7ff fe72 	bl	215b8 <hciCoreReadResolvingListSize>
        break;
   218d4:	e07c      	b.n	219d0 <hciCoreResetSequence+0x39c>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   218d6:	9b01      	ldr	r3, [sp, #4]
   218d8:	1c5a      	adds	r2, r3, #1
   218da:	9201      	str	r2, [sp, #4]
   218dc:	781a      	ldrb	r2, [r3, #0]
   218de:	4b43      	ldr	r3, [pc, #268]	; (219ec <hciCoreResetSequence+0x3b8>)
   218e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        hciCoreReadMaxDataLen();
   218e4:	f7ff fe86 	bl	215f4 <hciCoreReadMaxDataLen>
        break;
   218e8:	e072      	b.n	219d0 <hciCoreResetSequence+0x39c>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   218ea:	9b01      	ldr	r3, [sp, #4]
   218ec:	781b      	ldrb	r3, [r3, #0]
   218ee:	b29a      	uxth	r2, r3
   218f0:	9b01      	ldr	r3, [sp, #4]
   218f2:	3301      	adds	r3, #1
   218f4:	781b      	ldrb	r3, [r3, #0]
   218f6:	b29b      	uxth	r3, r3
   218f8:	021b      	lsls	r3, r3, #8
   218fa:	b29b      	uxth	r3, r3
   218fc:	4413      	add	r3, r2
   218fe:	f8ad 3014 	strh.w	r3, [sp, #20]
   21902:	9b01      	ldr	r3, [sp, #4]
   21904:	3302      	adds	r3, #2
   21906:	9301      	str	r3, [sp, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   21908:	9b01      	ldr	r3, [sp, #4]
   2190a:	781b      	ldrb	r3, [r3, #0]
   2190c:	b29a      	uxth	r2, r3
   2190e:	9b01      	ldr	r3, [sp, #4]
   21910:	3301      	adds	r3, #1
   21912:	781b      	ldrb	r3, [r3, #0]
   21914:	b29b      	uxth	r3, r3
   21916:	021b      	lsls	r3, r3, #8
   21918:	b29b      	uxth	r3, r3
   2191a:	4413      	add	r3, r2
   2191c:	f8ad 3012 	strh.w	r3, [sp, #18]
   21920:	9b01      	ldr	r3, [sp, #4]
   21922:	3302      	adds	r3, #2
   21924:	9301      	str	r3, [sp, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   21926:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   2192a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2192e:	4611      	mov	r1, r2
   21930:	4618      	mov	r0, r3
   21932:	f7fc fc42 	bl	1e1ba <HciLeWriteDefDataLen>
        break;
   21936:	e04b      	b.n	219d0 <hciCoreResetSequence+0x39c>
        if (hciCoreCb.extResetSeq)
   21938:	4b2c      	ldr	r3, [pc, #176]	; (219ec <hciCoreResetSequence+0x3b8>)
   2193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   2193e:	2b00      	cmp	r3, #0
   21940:	d008      	beq.n	21954 <hciCoreResetSequence+0x320>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   21942:	4b2a      	ldr	r3, [pc, #168]	; (219ec <hciCoreResetSequence+0x3b8>)
   21944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   21948:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2194c:	4611      	mov	r1, r2
   2194e:	9801      	ldr	r0, [sp, #4]
   21950:	4798      	blx	r3
        break;
   21952:	e03d      	b.n	219d0 <hciCoreResetSequence+0x39c>
          hciCoreCb.maxAdvDataLen = 0;
   21954:	4b25      	ldr	r3, [pc, #148]	; (219ec <hciCoreResetSequence+0x3b8>)
   21956:	2200      	movs	r2, #0
   21958:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
   2195c:	4b23      	ldr	r3, [pc, #140]	; (219ec <hciCoreResetSequence+0x3b8>)
   2195e:	2200      	movs	r2, #0
   21960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          hciCoreCb.perAdvListSize = 0;
   21964:	4b21      	ldr	r3, [pc, #132]	; (219ec <hciCoreResetSequence+0x3b8>)
   21966:	2200      	movs	r2, #0
   21968:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
          HciLeRandCmd();
   2196c:	f7fc fced 	bl	1e34a <HciLeRandCmd>
        break;
   21970:	e02e      	b.n	219d0 <hciCoreResetSequence+0x39c>
        if (hciCoreCb.extResetSeq)
   21972:	4b1e      	ldr	r3, [pc, #120]	; (219ec <hciCoreResetSequence+0x3b8>)
   21974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   21978:	2b00      	cmp	r3, #0
   2197a:	d028      	beq.n	219ce <hciCoreResetSequence+0x39a>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   2197c:	4b1b      	ldr	r3, [pc, #108]	; (219ec <hciCoreResetSequence+0x3b8>)
   2197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   21982:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   21986:	4611      	mov	r1, r2
   21988:	9801      	ldr	r0, [sp, #4]
   2198a:	4798      	blx	r3
        break;
   2198c:	e01f      	b.n	219ce <hciCoreResetSequence+0x39a>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   2198e:	4b12      	ldr	r3, [pc, #72]	; (219d8 <hciCoreResetSequence+0x3a4>)
   21990:	781b      	ldrb	r3, [r3, #0]
   21992:	2b02      	cmp	r3, #2
   21994:	d808      	bhi.n	219a8 <hciCoreResetSequence+0x374>
          randCnt++;
   21996:	4b10      	ldr	r3, [pc, #64]	; (219d8 <hciCoreResetSequence+0x3a4>)
   21998:	781b      	ldrb	r3, [r3, #0]
   2199a:	3301      	adds	r3, #1
   2199c:	b2da      	uxtb	r2, r3
   2199e:	4b0e      	ldr	r3, [pc, #56]	; (219d8 <hciCoreResetSequence+0x3a4>)
   219a0:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   219a2:	f7fc fcd2 	bl	1e34a <HciLeRandCmd>
        break;
   219a6:	e013      	b.n	219d0 <hciCoreResetSequence+0x39c>
          hciCb.resetting = FALSE;
   219a8:	4b12      	ldr	r3, [pc, #72]	; (219f4 <hciCoreResetSequence+0x3c0>)
   219aa:	2200      	movs	r2, #0
   219ac:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   219ae:	2300      	movs	r3, #0
   219b0:	f8ad 300c 	strh.w	r3, [sp, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   219b4:	2300      	movs	r3, #0
   219b6:	f88d 300e 	strb.w	r3, [sp, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   219ba:	4b0e      	ldr	r3, [pc, #56]	; (219f4 <hciCoreResetSequence+0x3c0>)
   219bc:	689b      	ldr	r3, [r3, #8]
   219be:	aa03      	add	r2, sp, #12
   219c0:	4610      	mov	r0, r2
   219c2:	4798      	blx	r3
        break;
   219c4:	e004      	b.n	219d0 <hciCoreResetSequence+0x39c>
    }
  }
   219c6:	bf00      	nop
   219c8:	e002      	b.n	219d0 <hciCoreResetSequence+0x39c>
        break;
   219ca:	bf00      	nop
   219cc:	e000      	b.n	219d0 <hciCoreResetSequence+0x39c>
        break;
   219ce:	bf00      	nop
}
   219d0:	bf00      	nop
   219d2:	b007      	add	sp, #28
   219d4:	f85d fb04 	ldr.w	pc, [sp], #4
   219d8:	10004574 	.word	0x10004574
   219dc:	0002ca64 	.word	0x0002ca64
   219e0:	0002ca6c 	.word	0x0002ca6c
   219e4:	0002ca74 	.word	0x0002ca74
   219e8:	100097d0 	.word	0x100097d0
   219ec:	10009774 	.word	0x10009774
   219f0:	40020000 	.word	0x40020000
   219f4:	1000973c 	.word	0x1000973c

000219f8 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   219f8:	b082      	sub	sp, #8
   219fa:	4603      	mov	r3, r0
   219fc:	9100      	str	r1, [sp, #0]
   219fe:	f8ad 3006 	strh.w	r3, [sp, #6]
   21a02:	4613      	mov	r3, r2
   21a04:	f88d 3005 	strb.w	r3, [sp, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   21a08:	2312      	movs	r3, #18
}
   21a0a:	4618      	mov	r0, r3
   21a0c:	b002      	add	sp, #8
   21a0e:	4770      	bx	lr

00021a10 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   21a10:	b082      	sub	sp, #8
   21a12:	4603      	mov	r3, r0
   21a14:	f88d 3007 	strb.w	r3, [sp, #7]

}
   21a18:	bf00      	nop
   21a1a:	b002      	add	sp, #8
   21a1c:	4770      	bx	lr
	...

00021a20 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   21a20:	b500      	push	{lr}
   21a22:	b089      	sub	sp, #36	; 0x24
   21a24:	9001      	str	r0, [sp, #4]
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   21a26:	ab03      	add	r3, sp, #12
   21a28:	4618      	mov	r0, r3
   21a2a:	f008 fb41 	bl	2a0b0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   21a2e:	9b03      	ldr	r3, [sp, #12]
   21a30:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   21a32:	9b07      	ldr	r3, [sp, #28]
   21a34:	4a07      	ldr	r2, [pc, #28]	; (21a54 <am_util_delay_ms+0x34>)
   21a36:	fba2 2303 	umull	r2, r3, r2, r3
   21a3a:	099a      	lsrs	r2, r3, #6
   21a3c:	9b01      	ldr	r3, [sp, #4]
   21a3e:	fb02 f303 	mul.w	r3, r2, r3
   21a42:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   21a44:	9806      	ldr	r0, [sp, #24]
   21a46:	f008 fb91 	bl	2a16c <am_hal_flash_delay>
}
   21a4a:	bf00      	nop
   21a4c:	b009      	add	sp, #36	; 0x24
   21a4e:	f85d fb04 	ldr.w	pc, [sp], #4
   21a52:	bf00      	nop
   21a54:	057619f1 	.word	0x057619f1

00021a58 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   21a58:	b500      	push	{lr}
   21a5a:	b089      	sub	sp, #36	; 0x24
   21a5c:	9001      	str	r0, [sp, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   21a5e:	ab03      	add	r3, sp, #12
   21a60:	4618      	mov	r0, r3
   21a62:	f008 fb25 	bl	2a0b0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   21a66:	9b03      	ldr	r3, [sp, #12]
   21a68:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   21a6a:	9b07      	ldr	r3, [sp, #28]
   21a6c:	4a07      	ldr	r2, [pc, #28]	; (21a8c <am_util_delay_us+0x34>)
   21a6e:	fba2 2303 	umull	r2, r3, r2, r3
   21a72:	0c9a      	lsrs	r2, r3, #18
   21a74:	9b01      	ldr	r3, [sp, #4]
   21a76:	fb02 f303 	mul.w	r3, r2, r3
   21a7a:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   21a7c:	9806      	ldr	r0, [sp, #24]
   21a7e:	f008 fb75 	bl	2a16c <am_hal_flash_delay>
}
   21a82:	bf00      	nop
   21a84:	b009      	add	sp, #36	; 0x24
   21a86:	f85d fb04 	ldr.w	pc, [sp], #4
   21a8a:	bf00      	nop
   21a8c:	165e9f81 	.word	0x165e9f81

00021a90 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   21a90:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   21a92:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   21a96:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   21a98:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   21a9c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   21aa0:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   21aa4:	f000 f80a 	bl	21abc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   21aa8:	bd01      	pop	{r0, pc}
}
   21aaa:	bf00      	nop
   21aac:	4618      	mov	r0, r3

00021aae <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   21aae:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   21ab0:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   21ab2:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   21ab4:	4770      	bx	lr
}
   21ab6:	bf00      	nop
   21ab8:	4618      	mov	r0, r3
	...

00021abc <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   21abc:	b500      	push	{lr}
   21abe:	b097      	sub	sp, #92	; 0x5c
   21ac0:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   21ac2:	ab03      	add	r3, sp, #12
   21ac4:	2200      	movs	r2, #0
   21ac6:	601a      	str	r2, [r3, #0]
   21ac8:	605a      	str	r2, [r3, #4]
   21aca:	609a      	str	r2, [r3, #8]
   21acc:	60da      	str	r2, [r3, #12]
   21ace:	611a      	str	r2, [r3, #16]
   21ad0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   21ad2:	2300      	movs	r3, #0
   21ad4:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   21ad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21ad8:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   21ada:	4b2e      	ldr	r3, [pc, #184]	; (21b94 <am_util_faultisr_collect_data+0xd8>)
   21adc:	681b      	ldr	r3, [r3, #0]
   21ade:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   21ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21ae2:	b2db      	uxtb	r3, r3
   21ae4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   21ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21aea:	0a1b      	lsrs	r3, r3, #8
   21aec:	b2db      	uxtb	r3, r3
   21aee:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   21af2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21af4:	0c1b      	lsrs	r3, r3, #16
   21af6:	b29b      	uxth	r3, r3
   21af8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   21afc:	4b26      	ldr	r3, [pc, #152]	; (21b98 <am_util_faultisr_collect_data+0xdc>)
   21afe:	681b      	ldr	r3, [r3, #0]
   21b00:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   21b02:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   21b06:	b2db      	uxtb	r3, r3
   21b08:	f003 0302 	and.w	r3, r3, #2
   21b0c:	2b00      	cmp	r3, #0
   21b0e:	d005      	beq.n	21b1c <am_util_faultisr_collect_data+0x60>
   21b10:	9901      	ldr	r1, [sp, #4]
   21b12:	2006      	movs	r0, #6
   21b14:	f7ff ffcb 	bl	21aae <getStackedReg>
   21b18:	4603      	mov	r3, r0
   21b1a:	e001      	b.n	21b20 <am_util_faultisr_collect_data+0x64>
   21b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21b20:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   21b22:	9901      	ldr	r1, [sp, #4]
   21b24:	2000      	movs	r0, #0
   21b26:	f7ff ffc2 	bl	21aae <getStackedReg>
   21b2a:	4603      	mov	r3, r0
   21b2c:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   21b2e:	9901      	ldr	r1, [sp, #4]
   21b30:	2001      	movs	r0, #1
   21b32:	f7ff ffbc 	bl	21aae <getStackedReg>
   21b36:	4603      	mov	r3, r0
   21b38:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   21b3a:	9901      	ldr	r1, [sp, #4]
   21b3c:	2002      	movs	r0, #2
   21b3e:	f7ff ffb6 	bl	21aae <getStackedReg>
   21b42:	4603      	mov	r3, r0
   21b44:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   21b46:	9901      	ldr	r1, [sp, #4]
   21b48:	2003      	movs	r0, #3
   21b4a:	f7ff ffb0 	bl	21aae <getStackedReg>
   21b4e:	4603      	mov	r3, r0
   21b50:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   21b52:	9901      	ldr	r1, [sp, #4]
   21b54:	2004      	movs	r0, #4
   21b56:	f7ff ffaa 	bl	21aae <getStackedReg>
   21b5a:	4603      	mov	r3, r0
   21b5c:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   21b5e:	9901      	ldr	r1, [sp, #4]
   21b60:	2005      	movs	r0, #5
   21b62:	f7ff ffa4 	bl	21aae <getStackedReg>
   21b66:	4603      	mov	r3, r0
   21b68:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   21b6a:	9901      	ldr	r1, [sp, #4]
   21b6c:	2006      	movs	r0, #6
   21b6e:	f7ff ff9e 	bl	21aae <getStackedReg>
   21b72:	4603      	mov	r3, r0
   21b74:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   21b76:	9901      	ldr	r1, [sp, #4]
   21b78:	2007      	movs	r0, #7
   21b7a:	f7ff ff98 	bl	21aae <getStackedReg>
   21b7e:	4603      	mov	r3, r0
   21b80:	9310      	str	r3, [sp, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   21b82:	ab03      	add	r3, sp, #12
   21b84:	4619      	mov	r1, r3
   21b86:	2002      	movs	r0, #2
   21b88:	f008 fcfe 	bl	2a588 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
   21b8c:	2300      	movs	r3, #0
   21b8e:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   21b90:	e7fe      	b.n	21b90 <am_util_faultisr_collect_data+0xd4>
   21b92:	bf00      	nop
   21b94:	e000ed28 	.word	0xe000ed28
   21b98:	e000ed38 	.word	0xe000ed38

00021b9c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   21b9c:	b082      	sub	sp, #8
   21b9e:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
   21ba0:	4a02      	ldr	r2, [pc, #8]	; (21bac <am_util_stdio_printf_init+0x10>)
   21ba2:	9b01      	ldr	r3, [sp, #4]
   21ba4:	6013      	str	r3, [r2, #0]
}
   21ba6:	bf00      	nop
   21ba8:	b002      	add	sp, #8
   21baa:	4770      	bx	lr
   21bac:	10009808 	.word	0x10009808

00021bb0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   21bb0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   21bb4:	b096      	sub	sp, #88	; 0x58
   21bb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   21bba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   21bbe:	f04f 0000 	mov.w	r0, #0
   21bc2:	f04f 0100 	mov.w	r1, #0
   21bc6:	0018      	movs	r0, r3
   21bc8:	2100      	movs	r1, #0
   21bca:	ea50 0301 	orrs.w	r3, r0, r1
   21bce:	f000 80ad 	beq.w	21d2c <divu64_10+0x17c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   21bd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   21bd6:	f04f 0400 	mov.w	r4, #0
   21bda:	f04f 0500 	mov.w	r5, #0
   21bde:	0854      	lsrs	r4, r2, #1
   21be0:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
   21be4:	085d      	lsrs	r5, r3, #1
   21be6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   21bea:	f04f 0000 	mov.w	r0, #0
   21bee:	f04f 0100 	mov.w	r1, #0
   21bf2:	0890      	lsrs	r0, r2, #2
   21bf4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
   21bf8:	0899      	lsrs	r1, r3, #2
   21bfa:	eb14 0800 	adds.w	r8, r4, r0
   21bfe:	eb45 0901 	adc.w	r9, r5, r1
   21c02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
        q64 += (q64 >> 4);
   21c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21c0a:	f04f 0000 	mov.w	r0, #0
   21c0e:	f04f 0100 	mov.w	r1, #0
   21c12:	0910      	lsrs	r0, r2, #4
   21c14:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
   21c18:	0919      	lsrs	r1, r3, #4
   21c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21c1e:	1814      	adds	r4, r2, r0
   21c20:	9400      	str	r4, [sp, #0]
   21c22:	414b      	adcs	r3, r1
   21c24:	9301      	str	r3, [sp, #4]
   21c26:	e9dd 3400 	ldrd	r3, r4, [sp]
   21c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        q64 += (q64 >> 8);
   21c2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21c32:	f04f 0000 	mov.w	r0, #0
   21c36:	f04f 0100 	mov.w	r1, #0
   21c3a:	0a10      	lsrs	r0, r2, #8
   21c3c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   21c40:	0a19      	lsrs	r1, r3, #8
   21c42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21c46:	1814      	adds	r4, r2, r0
   21c48:	9402      	str	r4, [sp, #8]
   21c4a:	414b      	adcs	r3, r1
   21c4c:	9303      	str	r3, [sp, #12]
   21c4e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   21c52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        q64 += (q64 >> 16);
   21c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21c5a:	f04f 0000 	mov.w	r0, #0
   21c5e:	f04f 0100 	mov.w	r1, #0
   21c62:	0c10      	lsrs	r0, r2, #16
   21c64:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   21c68:	0c19      	lsrs	r1, r3, #16
   21c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21c6e:	1814      	adds	r4, r2, r0
   21c70:	9404      	str	r4, [sp, #16]
   21c72:	414b      	adcs	r3, r1
   21c74:	9305      	str	r3, [sp, #20]
   21c76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   21c7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        q64 += (q64 >> 32);
   21c7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21c82:	f04f 0200 	mov.w	r2, #0
   21c86:	f04f 0300 	mov.w	r3, #0
   21c8a:	000a      	movs	r2, r1
   21c8c:	2300      	movs	r3, #0
   21c8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21c92:	1884      	adds	r4, r0, r2
   21c94:	9406      	str	r4, [sp, #24]
   21c96:	eb41 0303 	adc.w	r3, r1, r3
   21c9a:	9307      	str	r3, [sp, #28]
   21c9c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   21ca0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        q64 >>= 3;
   21ca4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21ca8:	f04f 0200 	mov.w	r2, #0
   21cac:	f04f 0300 	mov.w	r3, #0
   21cb0:	08c2      	lsrs	r2, r0, #3
   21cb2:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   21cb6:	08cb      	lsrs	r3, r1, #3
   21cb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
        r64 = ui64Val - q64*10;
   21cbc:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   21cc0:	4622      	mov	r2, r4
   21cc2:	462b      	mov	r3, r5
   21cc4:	f04f 0000 	mov.w	r0, #0
   21cc8:	f04f 0100 	mov.w	r1, #0
   21ccc:	0099      	lsls	r1, r3, #2
   21cce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
   21cd2:	0090      	lsls	r0, r2, #2
   21cd4:	4602      	mov	r2, r0
   21cd6:	460b      	mov	r3, r1
   21cd8:	1912      	adds	r2, r2, r4
   21cda:	eb45 0303 	adc.w	r3, r5, r3
   21cde:	1891      	adds	r1, r2, r2
   21ce0:	9108      	str	r1, [sp, #32]
   21ce2:	415b      	adcs	r3, r3
   21ce4:	9309      	str	r3, [sp, #36]	; 0x24
   21ce6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   21cea:	4610      	mov	r0, r2
   21cec:	4619      	mov	r1, r3
   21cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   21cf2:	1a14      	subs	r4, r2, r0
   21cf4:	940a      	str	r4, [sp, #40]	; 0x28
   21cf6:	eb63 0301 	sbc.w	r3, r3, r1
   21cfa:	930b      	str	r3, [sp, #44]	; 0x2c
   21cfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   21d00:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
        return q64 + ((r64 + 6) >> 4);
   21d04:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21d08:	1d96      	adds	r6, r2, #6
   21d0a:	f143 0700 	adc.w	r7, r3, #0
   21d0e:	f04f 0200 	mov.w	r2, #0
   21d12:	f04f 0300 	mov.w	r3, #0
   21d16:	0932      	lsrs	r2, r6, #4
   21d18:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
   21d1c:	093b      	lsrs	r3, r7, #4
   21d1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21d22:	eb12 0a00 	adds.w	sl, r2, r0
   21d26:	eb43 0b01 	adc.w	fp, r3, r1
   21d2a:	e02a      	b.n	21d82 <divu64_10+0x1d2>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   21d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21d2e:	9315      	str	r3, [sp, #84]	; 0x54
        q32 = (ui32Val>>1) + (ui32Val>>2);
   21d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21d32:	085a      	lsrs	r2, r3, #1
   21d34:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21d36:	089b      	lsrs	r3, r3, #2
   21d38:	4413      	add	r3, r2
   21d3a:	9314      	str	r3, [sp, #80]	; 0x50
        q32 += (q32 >> 4);
   21d3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21d3e:	091b      	lsrs	r3, r3, #4
   21d40:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21d42:	4413      	add	r3, r2
   21d44:	9314      	str	r3, [sp, #80]	; 0x50
        q32 += (q32 >> 8);
   21d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21d48:	0a1b      	lsrs	r3, r3, #8
   21d4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21d4c:	4413      	add	r3, r2
   21d4e:	9314      	str	r3, [sp, #80]	; 0x50
        q32 += (q32 >> 16);
   21d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21d52:	0c1b      	lsrs	r3, r3, #16
   21d54:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21d56:	4413      	add	r3, r2
   21d58:	9314      	str	r3, [sp, #80]	; 0x50
        q32 >>= 3;
   21d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21d5c:	08db      	lsrs	r3, r3, #3
   21d5e:	9314      	str	r3, [sp, #80]	; 0x50
        r32 = ui32Val - q32*10;
   21d60:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21d62:	4613      	mov	r3, r2
   21d64:	009b      	lsls	r3, r3, #2
   21d66:	4413      	add	r3, r2
   21d68:	005b      	lsls	r3, r3, #1
   21d6a:	461a      	mov	r2, r3
   21d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21d6e:	1a9b      	subs	r3, r3, r2
   21d70:	9313      	str	r3, [sp, #76]	; 0x4c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   21d72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21d74:	3306      	adds	r3, #6
   21d76:	091a      	lsrs	r2, r3, #4
   21d78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21d7a:	4413      	add	r3, r2
   21d7c:	469a      	mov	sl, r3
   21d7e:	f04f 0b00 	mov.w	fp, #0
   21d82:	4652      	mov	r2, sl
   21d84:	465b      	mov	r3, fp
    }
}
   21d86:	4610      	mov	r0, r2
   21d88:	4619      	mov	r1, r3
   21d8a:	b016      	add	sp, #88	; 0x58
   21d8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   21d90:	4770      	bx	lr

00021d92 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   21d92:	b500      	push	{lr}
   21d94:	b085      	sub	sp, #20
   21d96:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
   21d9a:	9a00      	ldr	r2, [sp, #0]
   21d9c:	9b01      	ldr	r3, [sp, #4]
   21d9e:	4313      	orrs	r3, r2
   21da0:	2b00      	cmp	r3, #0
   21da2:	bf0c      	ite	eq
   21da4:	2301      	moveq	r3, #1
   21da6:	2300      	movne	r3, #0
   21da8:	b2db      	uxtb	r3, r3
   21daa:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
   21dac:	e008      	b.n	21dc0 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   21dae:	e9dd 0100 	ldrd	r0, r1, [sp]
   21db2:	f7ff fefd 	bl	21bb0 <divu64_10>
   21db6:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
   21dba:	9b03      	ldr	r3, [sp, #12]
   21dbc:	3301      	adds	r3, #1
   21dbe:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
   21dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
   21dc4:	4313      	orrs	r3, r2
   21dc6:	d1f2      	bne.n	21dae <ndigits_in_u64+0x1c>
    }

    return iNDigits;
   21dc8:	9b03      	ldr	r3, [sp, #12]
}
   21dca:	4618      	mov	r0, r3
   21dcc:	b005      	add	sp, #20
   21dce:	f85d fb04 	ldr.w	pc, [sp], #4

00021dd2 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   21dd2:	b500      	push	{lr}
   21dd4:	b083      	sub	sp, #12
   21dd6:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
   21dda:	e9dd 2300 	ldrd	r2, r3, [sp]
   21dde:	2a00      	cmp	r2, #0
   21de0:	f173 0300 	sbcs.w	r3, r3, #0
   21de4:	da06      	bge.n	21df4 <ndigits_in_i64+0x22>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   21de6:	e9dd 2300 	ldrd	r2, r3, [sp]
   21dea:	4252      	negs	r2, r2
   21dec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21df0:	e9cd 2300 	strd	r2, r3, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   21df4:	e9dd 2300 	ldrd	r2, r3, [sp]
   21df8:	4610      	mov	r0, r2
   21dfa:	4619      	mov	r1, r3
   21dfc:	f7ff ffc9 	bl	21d92 <ndigits_in_u64>
   21e00:	4603      	mov	r3, r0
}
   21e02:	4618      	mov	r0, r3
   21e04:	b003      	add	sp, #12
   21e06:	f85d fb04 	ldr.w	pc, [sp], #4

00021e0a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   21e0a:	b084      	sub	sp, #16
   21e0c:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
   21e10:	9a00      	ldr	r2, [sp, #0]
   21e12:	9b01      	ldr	r3, [sp, #4]
   21e14:	4313      	orrs	r3, r2
   21e16:	2b00      	cmp	r3, #0
   21e18:	bf0c      	ite	eq
   21e1a:	2301      	moveq	r3, #1
   21e1c:	2300      	movne	r3, #0
   21e1e:	b2db      	uxtb	r3, r3
   21e20:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
   21e22:	e00e      	b.n	21e42 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
   21e24:	e9dd 0100 	ldrd	r0, r1, [sp]
   21e28:	f04f 0200 	mov.w	r2, #0
   21e2c:	f04f 0300 	mov.w	r3, #0
   21e30:	0902      	lsrs	r2, r0, #4
   21e32:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   21e36:	090b      	lsrs	r3, r1, #4
   21e38:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
   21e3c:	9b03      	ldr	r3, [sp, #12]
   21e3e:	3301      	adds	r3, #1
   21e40:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
   21e42:	e9dd 2300 	ldrd	r2, r3, [sp]
   21e46:	4313      	orrs	r3, r2
   21e48:	d1ec      	bne.n	21e24 <ndigits_in_hex+0x1a>
    }

    return iDigits;
   21e4a:	9b03      	ldr	r3, [sp, #12]
}
   21e4c:	4618      	mov	r0, r3
   21e4e:	b004      	add	sp, #16
   21e50:	4770      	bx	lr

00021e52 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   21e52:	b086      	sub	sp, #24
   21e54:	9001      	str	r0, [sp, #4]
   21e56:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
   21e58:	2300      	movs	r3, #0
   21e5a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   21e5e:	2300      	movs	r3, #0
   21e60:	9304      	str	r3, [sp, #16]
   21e62:	2300      	movs	r3, #0
   21e64:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
   21e66:	9b01      	ldr	r3, [sp, #4]
   21e68:	781b      	ldrb	r3, [r3, #0]
   21e6a:	2b2d      	cmp	r3, #45	; 0x2d
   21e6c:	d11c      	bne.n	21ea8 <decstr_to_int+0x56>
    {
        bNeg = true;
   21e6e:	2301      	movs	r3, #1
   21e70:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
   21e74:	9b01      	ldr	r3, [sp, #4]
   21e76:	3301      	adds	r3, #1
   21e78:	9301      	str	r3, [sp, #4]
        uCnt++;
   21e7a:	9b03      	ldr	r3, [sp, #12]
   21e7c:	3301      	adds	r3, #1
   21e7e:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   21e80:	e012      	b.n	21ea8 <decstr_to_int+0x56>
    {
        ++uCnt;
   21e82:	9b03      	ldr	r3, [sp, #12]
   21e84:	3301      	adds	r3, #1
   21e86:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   21e88:	9a04      	ldr	r2, [sp, #16]
   21e8a:	4613      	mov	r3, r2
   21e8c:	009b      	lsls	r3, r3, #2
   21e8e:	4413      	add	r3, r2
   21e90:	005b      	lsls	r3, r3, #1
   21e92:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   21e94:	9b01      	ldr	r3, [sp, #4]
   21e96:	781b      	ldrb	r3, [r3, #0]
   21e98:	461a      	mov	r2, r3
   21e9a:	9b04      	ldr	r3, [sp, #16]
   21e9c:	4413      	add	r3, r2
   21e9e:	3b30      	subs	r3, #48	; 0x30
   21ea0:	9304      	str	r3, [sp, #16]
        pcStr++;
   21ea2:	9b01      	ldr	r3, [sp, #4]
   21ea4:	3301      	adds	r3, #1
   21ea6:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   21ea8:	9b01      	ldr	r3, [sp, #4]
   21eaa:	781b      	ldrb	r3, [r3, #0]
   21eac:	2b2f      	cmp	r3, #47	; 0x2f
   21eae:	d903      	bls.n	21eb8 <decstr_to_int+0x66>
   21eb0:	9b01      	ldr	r3, [sp, #4]
   21eb2:	781b      	ldrb	r3, [r3, #0]
   21eb4:	2b39      	cmp	r3, #57	; 0x39
   21eb6:	d9e4      	bls.n	21e82 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   21eb8:	9b00      	ldr	r3, [sp, #0]
   21eba:	2b00      	cmp	r3, #0
   21ebc:	d002      	beq.n	21ec4 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   21ebe:	9b00      	ldr	r3, [sp, #0]
   21ec0:	9a03      	ldr	r2, [sp, #12]
   21ec2:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   21ec4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   21ec8:	2b00      	cmp	r3, #0
   21eca:	d002      	beq.n	21ed2 <decstr_to_int+0x80>
   21ecc:	9b04      	ldr	r3, [sp, #16]
   21ece:	425b      	negs	r3, r3
   21ed0:	e000      	b.n	21ed4 <decstr_to_int+0x82>
   21ed2:	9b04      	ldr	r3, [sp, #16]
}
   21ed4:	4618      	mov	r0, r3
   21ed6:	b006      	add	sp, #24
   21ed8:	4770      	bx	lr

00021eda <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   21eda:	b500      	push	{lr}
   21edc:	b091      	sub	sp, #68	; 0x44
   21ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
   21ee2:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   21ee4:	2300      	movs	r3, #0
   21ee6:	930f      	str	r3, [sp, #60]	; 0x3c
   21ee8:	2300      	movs	r3, #0
   21eea:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   21eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21ef0:	f7ff fe5e 	bl	21bb0 <divu64_10>
   21ef4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   21ef8:	9902      	ldr	r1, [sp, #8]
   21efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21efc:	4613      	mov	r3, r2
   21efe:	009b      	lsls	r3, r3, #2
   21f00:	4413      	add	r3, r2
   21f02:	005b      	lsls	r3, r3, #1
   21f04:	1acb      	subs	r3, r1, r3
   21f06:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   21f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21f0a:	b2da      	uxtb	r2, r3
   21f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21f0e:	1c59      	adds	r1, r3, #1
   21f10:	910f      	str	r1, [sp, #60]	; 0x3c
   21f12:	3230      	adds	r2, #48	; 0x30
   21f14:	b2d2      	uxtb	r2, r2
   21f16:	a910      	add	r1, sp, #64	; 0x40
   21f18:	440b      	add	r3, r1
   21f1a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   21f1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   21f22:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
   21f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21f2a:	4313      	orrs	r3, r2
   21f2c:	d1de      	bne.n	21eec <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   21f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21f30:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   21f32:	9b01      	ldr	r3, [sp, #4]
   21f34:	2b00      	cmp	r3, #0
   21f36:	d010      	beq.n	21f5a <uint64_to_str+0x80>
    {
        while ( ix-- )
   21f38:	e007      	b.n	21f4a <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
   21f3a:	9b01      	ldr	r3, [sp, #4]
   21f3c:	1c5a      	adds	r2, r3, #1
   21f3e:	9201      	str	r2, [sp, #4]
   21f40:	a904      	add	r1, sp, #16
   21f42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21f44:	440a      	add	r2, r1
   21f46:	7812      	ldrb	r2, [r2, #0]
   21f48:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   21f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21f4c:	1e5a      	subs	r2, r3, #1
   21f4e:	920f      	str	r2, [sp, #60]	; 0x3c
   21f50:	2b00      	cmp	r3, #0
   21f52:	d1f2      	bne.n	21f3a <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   21f54:	9b01      	ldr	r3, [sp, #4]
   21f56:	2200      	movs	r2, #0
   21f58:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   21f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
   21f5c:	4618      	mov	r0, r3
   21f5e:	b011      	add	sp, #68	; 0x44
   21f60:	f85d fb04 	ldr.w	pc, [sp], #4

00021f64 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   21f64:	b08c      	sub	sp, #48	; 0x30
   21f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
   21f6a:	9201      	str	r2, [sp, #4]
   21f6c:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
   21f70:	2300      	movs	r3, #0
   21f72:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   21f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21f78:	4313      	orrs	r3, r2
   21f7a:	d135      	bne.n	21fe8 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
   21f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21f7e:	1c5a      	adds	r2, r3, #1
   21f80:	920b      	str	r2, [sp, #44]	; 0x2c
   21f82:	aa0c      	add	r2, sp, #48	; 0x30
   21f84:	4413      	add	r3, r2
   21f86:	2230      	movs	r2, #48	; 0x30
   21f88:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   21f8c:	e02c      	b.n	21fe8 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
   21f8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   21f92:	f003 030f 	and.w	r3, r3, #15
   21f96:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   21f9a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   21f9e:	2b09      	cmp	r3, #9
   21fa0:	d90b      	bls.n	21fba <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   21fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   21fa6:	2b00      	cmp	r3, #0
   21fa8:	d001      	beq.n	21fae <uint64_to_hexstr+0x4a>
   21faa:	2227      	movs	r2, #39	; 0x27
   21fac:	e000      	b.n	21fb0 <uint64_to_hexstr+0x4c>
   21fae:	2207      	movs	r2, #7
   21fb0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   21fb4:	4413      	add	r3, r2
   21fb6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   21fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21fbc:	1c5a      	adds	r2, r3, #1
   21fbe:	920b      	str	r2, [sp, #44]	; 0x2c
   21fc0:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
   21fc4:	3230      	adds	r2, #48	; 0x30
   21fc6:	b2d2      	uxtb	r2, r2
   21fc8:	a90c      	add	r1, sp, #48	; 0x30
   21fca:	440b      	add	r3, r1
   21fcc:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   21fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21fd4:	f04f 0200 	mov.w	r2, #0
   21fd8:	f04f 0300 	mov.w	r3, #0
   21fdc:	0902      	lsrs	r2, r0, #4
   21fde:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   21fe2:	090b      	lsrs	r3, r1, #4
   21fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
   21fe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21fec:	4313      	orrs	r3, r2
   21fee:	d1ce      	bne.n	21f8e <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   21ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21ff2:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   21ff4:	9b01      	ldr	r3, [sp, #4]
   21ff6:	2b00      	cmp	r3, #0
   21ff8:	d010      	beq.n	2201c <uint64_to_hexstr+0xb8>
    {
        while (ix--)
   21ffa:	e007      	b.n	2200c <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
   21ffc:	9b01      	ldr	r3, [sp, #4]
   21ffe:	1c5a      	adds	r2, r3, #1
   22000:	9201      	str	r2, [sp, #4]
   22002:	a904      	add	r1, sp, #16
   22004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22006:	440a      	add	r2, r1
   22008:	7812      	ldrb	r2, [r2, #0]
   2200a:	701a      	strb	r2, [r3, #0]
        while (ix--)
   2200c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2200e:	1e5a      	subs	r2, r3, #1
   22010:	920b      	str	r2, [sp, #44]	; 0x2c
   22012:	2b00      	cmp	r3, #0
   22014:	d1f2      	bne.n	21ffc <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   22016:	9b01      	ldr	r3, [sp, #4]
   22018:	2200      	movs	r2, #0
   2201a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   2201c:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
   2201e:	4618      	mov	r0, r3
   22020:	b00c      	add	sp, #48	; 0x30
   22022:	4770      	bx	lr

00022024 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   22024:	b084      	sub	sp, #16
   22026:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
   22028:	2300      	movs	r3, #0
   2202a:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
   2202c:	9b01      	ldr	r3, [sp, #4]
   2202e:	2b00      	cmp	r3, #0
   22030:	d104      	bne.n	2203c <simple_strlen+0x18>
    {
        return ui32RetVal;
   22032:	9b03      	ldr	r3, [sp, #12]
   22034:	e009      	b.n	2204a <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   22036:	9b03      	ldr	r3, [sp, #12]
   22038:	3301      	adds	r3, #1
   2203a:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
   2203c:	9b01      	ldr	r3, [sp, #4]
   2203e:	1c5a      	adds	r2, r3, #1
   22040:	9201      	str	r2, [sp, #4]
   22042:	781b      	ldrb	r3, [r3, #0]
   22044:	2b00      	cmp	r3, #0
   22046:	d1f6      	bne.n	22036 <simple_strlen+0x12>
    }
    return ui32RetVal;
   22048:	9b03      	ldr	r3, [sp, #12]
}
   2204a:	4618      	mov	r0, r3
   2204c:	b004      	add	sp, #16
   2204e:	4770      	bx	lr

00022050 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   22050:	b086      	sub	sp, #24
   22052:	9003      	str	r0, [sp, #12]
   22054:	460b      	mov	r3, r1
   22056:	9201      	str	r2, [sp, #4]
   22058:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
   2205c:	2300      	movs	r3, #0
   2205e:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
   22060:	9b01      	ldr	r3, [sp, #4]
   22062:	2b00      	cmp	r3, #0
   22064:	dc0d      	bgt.n	22082 <padbuffer+0x32>
    {
        return i32Cnt;
   22066:	9b05      	ldr	r3, [sp, #20]
   22068:	e011      	b.n	2208e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   2206a:	9b03      	ldr	r3, [sp, #12]
   2206c:	2b00      	cmp	r3, #0
   2206e:	d005      	beq.n	2207c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   22070:	9b03      	ldr	r3, [sp, #12]
   22072:	1c5a      	adds	r2, r3, #1
   22074:	9203      	str	r2, [sp, #12]
   22076:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2207a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   2207c:	9b05      	ldr	r3, [sp, #20]
   2207e:	3301      	adds	r3, #1
   22080:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
   22082:	9b01      	ldr	r3, [sp, #4]
   22084:	1e5a      	subs	r2, r3, #1
   22086:	9201      	str	r2, [sp, #4]
   22088:	2b00      	cmp	r3, #0
   2208a:	d1ee      	bne.n	2206a <padbuffer+0x1a>
    }

    return i32Cnt;
   2208c:	9b05      	ldr	r3, [sp, #20]
}
   2208e:	4618      	mov	r0, r3
   22090:	b006      	add	sp, #24
   22092:	4770      	bx	lr

00022094 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   22094:	b500      	push	{lr}
   22096:	b08f      	sub	sp, #60	; 0x3c
   22098:	ed8d 0a03 	vstr	s0, [sp, #12]
   2209c:	9002      	str	r0, [sp, #8]
   2209e:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   220a0:	9b02      	ldr	r3, [sp, #8]
   220a2:	681b      	ldr	r3, [r3, #0]
   220a4:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
   220a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   220a8:	2b03      	cmp	r3, #3
   220aa:	dc02      	bgt.n	220b2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
   220ac:	f06f 0302 	mvn.w	r3, #2
   220b0:	e0e5      	b.n	2227e <ftoa+0x1ea>
    }

    if (fValue == 0.0f)
   220b2:	eddd 7a03 	vldr	s15, [sp, #12]
   220b6:	eef5 7a40 	vcmp.f32	s15, #0.0
   220ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   220be:	d104      	bne.n	220ca <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   220c0:	9b02      	ldr	r3, [sp, #8]
   220c2:	4a71      	ldr	r2, [pc, #452]	; (22288 <ftoa+0x1f4>)
   220c4:	601a      	str	r2, [r3, #0]
        return 3;
   220c6:	2303      	movs	r3, #3
   220c8:	e0d9      	b.n	2227e <ftoa+0x1ea>
    }

    pcBufInitial = pcBuf;
   220ca:	9b02      	ldr	r3, [sp, #8]
   220cc:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
   220ce:	9b03      	ldr	r3, [sp, #12]
   220d0:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   220d2:	9b04      	ldr	r3, [sp, #16]
   220d4:	15db      	asrs	r3, r3, #23
   220d6:	b2db      	uxtb	r3, r3
   220d8:	3b7f      	subs	r3, #127	; 0x7f
   220da:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   220dc:	9b04      	ldr	r3, [sp, #16]
   220de:	f3c3 0316 	ubfx	r3, r3, #0, #23
   220e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   220e6:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
   220e8:	2300      	movs	r3, #0
   220ea:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
   220ec:	2300      	movs	r3, #0
   220ee:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
   220f0:	9b07      	ldr	r3, [sp, #28]
   220f2:	2b1e      	cmp	r3, #30
   220f4:	dd02      	ble.n	220fc <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   220f6:	f06f 0301 	mvn.w	r3, #1
   220fa:	e0c0      	b.n	2227e <ftoa+0x1ea>
    }
    else if (iExp2 < -23)
   220fc:	9b07      	ldr	r3, [sp, #28]
   220fe:	f113 0f17 	cmn.w	r3, #23
   22102:	da02      	bge.n	2210a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   22104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22108:	e0b9      	b.n	2227e <ftoa+0x1ea>
    }
    else if (iExp2 >= 23)
   2210a:	9b07      	ldr	r3, [sp, #28]
   2210c:	2b16      	cmp	r3, #22
   2210e:	dd06      	ble.n	2211e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   22110:	9b07      	ldr	r3, [sp, #28]
   22112:	3b17      	subs	r3, #23
   22114:	9a06      	ldr	r2, [sp, #24]
   22116:	fa02 f303 	lsl.w	r3, r2, r3
   2211a:	930d      	str	r3, [sp, #52]	; 0x34
   2211c:	e01a      	b.n	22154 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
   2211e:	9b07      	ldr	r3, [sp, #28]
   22120:	2b00      	cmp	r3, #0
   22122:	db0f      	blt.n	22144 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   22124:	9b07      	ldr	r3, [sp, #28]
   22126:	f1c3 0317 	rsb	r3, r3, #23
   2212a:	9a06      	ldr	r2, [sp, #24]
   2212c:	fa42 f303 	asr.w	r3, r2, r3
   22130:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   22132:	9b07      	ldr	r3, [sp, #28]
   22134:	3301      	adds	r3, #1
   22136:	9a06      	ldr	r2, [sp, #24]
   22138:	fa02 f303 	lsl.w	r3, r2, r3
   2213c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   22140:	930c      	str	r3, [sp, #48]	; 0x30
   22142:	e007      	b.n	22154 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   22144:	9b06      	ldr	r3, [sp, #24]
   22146:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   2214a:	9b07      	ldr	r3, [sp, #28]
   2214c:	43db      	mvns	r3, r3
   2214e:	fa42 f303 	asr.w	r3, r2, r3
   22152:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   22154:	9b04      	ldr	r3, [sp, #16]
   22156:	2b00      	cmp	r3, #0
   22158:	da04      	bge.n	22164 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
   2215a:	9b02      	ldr	r3, [sp, #8]
   2215c:	1c5a      	adds	r2, r3, #1
   2215e:	9202      	str	r2, [sp, #8]
   22160:	222d      	movs	r2, #45	; 0x2d
   22162:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   22164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22166:	2b00      	cmp	r3, #0
   22168:	d105      	bne.n	22176 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
   2216a:	9b02      	ldr	r3, [sp, #8]
   2216c:	1c5a      	adds	r2, r3, #1
   2216e:	9202      	str	r2, [sp, #8]
   22170:	2230      	movs	r2, #48	; 0x30
   22172:	701a      	strb	r2, [r3, #0]
   22174:	e01f      	b.n	221b6 <ftoa+0x122>
    }
    else
    {
        if (i32IntPart > 0)
   22176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22178:	2b00      	cmp	r3, #0
   2217a:	dd07      	ble.n	2218c <ftoa+0xf8>
        {
            uint64_to_str(i32IntPart, pcBuf);
   2217c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2217e:	4618      	mov	r0, r3
   22180:	ea4f 71e0 	mov.w	r1, r0, asr #31
   22184:	9a02      	ldr	r2, [sp, #8]
   22186:	f7ff fea8 	bl	21eda <uint64_to_str>
   2218a:	e010      	b.n	221ae <ftoa+0x11a>
        }
        else
        {
            *pcBuf++ = '-';
   2218c:	9b02      	ldr	r3, [sp, #8]
   2218e:	1c5a      	adds	r2, r3, #1
   22190:	9202      	str	r2, [sp, #8]
   22192:	222d      	movs	r2, #45	; 0x2d
   22194:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   22196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22198:	425b      	negs	r3, r3
   2219a:	4618      	mov	r0, r3
   2219c:	ea4f 71e0 	mov.w	r1, r0, asr #31
   221a0:	9a02      	ldr	r2, [sp, #8]
   221a2:	f7ff fe9a 	bl	21eda <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   221a6:	e002      	b.n	221ae <ftoa+0x11a>
        {
            pcBuf++;
   221a8:	9b02      	ldr	r3, [sp, #8]
   221aa:	3301      	adds	r3, #1
   221ac:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
   221ae:	9b02      	ldr	r3, [sp, #8]
   221b0:	781b      	ldrb	r3, [r3, #0]
   221b2:	2b00      	cmp	r3, #0
   221b4:	d1f8      	bne.n	221a8 <ftoa+0x114>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   221b6:	9b02      	ldr	r3, [sp, #8]
   221b8:	1c5a      	adds	r2, r3, #1
   221ba:	9202      	str	r2, [sp, #8]
   221bc:	222e      	movs	r2, #46	; 0x2e
   221be:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   221c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   221c2:	2b00      	cmp	r3, #0
   221c4:	d105      	bne.n	221d2 <ftoa+0x13e>
    {
        *pcBuf++ = '0';
   221c6:	9b02      	ldr	r3, [sp, #8]
   221c8:	1c5a      	adds	r2, r3, #1
   221ca:	9202      	str	r2, [sp, #8]
   221cc:	2230      	movs	r2, #48	; 0x30
   221ce:	701a      	strb	r2, [r3, #0]
   221d0:	e04f      	b.n	22272 <ftoa+0x1de>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   221d2:	9a02      	ldr	r2, [sp, #8]
   221d4:	9b08      	ldr	r3, [sp, #32]
   221d6:	1ad3      	subs	r3, r2, r3
   221d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   221da:	1ad3      	subs	r3, r2, r3
   221dc:	3b01      	subs	r3, #1
   221de:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   221e0:	9a05      	ldr	r2, [sp, #20]
   221e2:	9b01      	ldr	r3, [sp, #4]
   221e4:	4293      	cmp	r3, r2
   221e6:	bfa8      	it	ge
   221e8:	4613      	movge	r3, r2
   221ea:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
   221ec:	2300      	movs	r3, #0
   221ee:	930a      	str	r3, [sp, #40]	; 0x28
   221f0:	e015      	b.n	2221e <ftoa+0x18a>
        {
            i32FracPart *= 10;
   221f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   221f4:	4613      	mov	r3, r2
   221f6:	009b      	lsls	r3, r3, #2
   221f8:	4413      	add	r3, r2
   221fa:	005b      	lsls	r3, r3, #1
   221fc:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   221fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22200:	161b      	asrs	r3, r3, #24
   22202:	b2da      	uxtb	r2, r3
   22204:	9b02      	ldr	r3, [sp, #8]
   22206:	1c59      	adds	r1, r3, #1
   22208:	9102      	str	r1, [sp, #8]
   2220a:	3230      	adds	r2, #48	; 0x30
   2220c:	b2d2      	uxtb	r2, r2
   2220e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   22210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22212:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   22216:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   22218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2221a:	3301      	adds	r3, #1
   2221c:	930a      	str	r3, [sp, #40]	; 0x28
   2221e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22220:	9b05      	ldr	r3, [sp, #20]
   22222:	429a      	cmp	r2, r3
   22224:	dbe5      	blt.n	221f2 <ftoa+0x15e>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   22226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   22228:	4613      	mov	r3, r2
   2222a:	009b      	lsls	r3, r3, #2
   2222c:	4413      	add	r3, r2
   2222e:	005b      	lsls	r3, r3, #1
   22230:	161b      	asrs	r3, r3, #24
   22232:	2b04      	cmp	r3, #4
   22234:	dd1d      	ble.n	22272 <ftoa+0x1de>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   22236:	9b02      	ldr	r3, [sp, #8]
   22238:	3b01      	subs	r3, #1
   2223a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   2223c:	e015      	b.n	2226a <ftoa+0x1d6>
            {
                if ( *pcBuftmp == '.' )
   2223e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22240:	781b      	ldrb	r3, [r3, #0]
   22242:	2b2e      	cmp	r3, #46	; 0x2e
   22244:	d00e      	beq.n	22264 <ftoa+0x1d0>
                {
                }
                else if ( *pcBuftmp == '9' )
   22246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22248:	781b      	ldrb	r3, [r3, #0]
   2224a:	2b39      	cmp	r3, #57	; 0x39
   2224c:	d103      	bne.n	22256 <ftoa+0x1c2>
                {
                    *pcBuftmp = '0';
   2224e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22250:	2230      	movs	r2, #48	; 0x30
   22252:	701a      	strb	r2, [r3, #0]
   22254:	e006      	b.n	22264 <ftoa+0x1d0>
                }
                else
                {
                    *pcBuftmp += 1;
   22256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22258:	781b      	ldrb	r3, [r3, #0]
   2225a:	3301      	adds	r3, #1
   2225c:	b2da      	uxtb	r2, r3
   2225e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22260:	701a      	strb	r2, [r3, #0]
                    break;
   22262:	e006      	b.n	22272 <ftoa+0x1de>
                }
                pcBuftmp--;
   22264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22266:	3b01      	subs	r3, #1
   22268:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   2226a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2226c:	9b08      	ldr	r3, [sp, #32]
   2226e:	429a      	cmp	r2, r3
   22270:	d2e5      	bcs.n	2223e <ftoa+0x1aa>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   22272:	9b02      	ldr	r3, [sp, #8]
   22274:	2200      	movs	r2, #0
   22276:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   22278:	9a02      	ldr	r2, [sp, #8]
   2227a:	9b08      	ldr	r3, [sp, #32]
   2227c:	1ad3      	subs	r3, r2, r3
} // ftoa()
   2227e:	4618      	mov	r0, r3
   22280:	b00f      	add	sp, #60	; 0x3c
   22282:	f85d fb04 	ldr.w	pc, [sp], #4
   22286:	bf00      	nop
   22288:	00302e30 	.word	0x00302e30

0002228c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   2228c:	b500      	push	{lr}
   2228e:	b097      	sub	sp, #92	; 0x5c
   22290:	9003      	str	r0, [sp, #12]
   22292:	9102      	str	r1, [sp, #8]
   22294:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   22296:	2300      	movs	r3, #0
   22298:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   2229a:	2300      	movs	r3, #0
   2229c:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
   2229e:	e2e9      	b.n	22874 <am_util_stdio_vsprintf+0x5e8>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   222a0:	2306      	movs	r3, #6
   222a2:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
   222a4:	9b02      	ldr	r3, [sp, #8]
   222a6:	781b      	ldrb	r3, [r3, #0]
   222a8:	2b25      	cmp	r3, #37	; 0x25
   222aa:	d01f      	beq.n	222ec <am_util_stdio_vsprintf+0x60>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   222ac:	9b03      	ldr	r3, [sp, #12]
   222ae:	2b00      	cmp	r3, #0
   222b0:	d015      	beq.n	222de <am_util_stdio_vsprintf+0x52>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   222b2:	9b02      	ldr	r3, [sp, #8]
   222b4:	781b      	ldrb	r3, [r3, #0]
   222b6:	2b0a      	cmp	r3, #10
   222b8:	d10b      	bne.n	222d2 <am_util_stdio_vsprintf+0x46>
   222ba:	4bb1      	ldr	r3, [pc, #708]	; (22580 <am_util_stdio_vsprintf+0x2f4>)
   222bc:	781b      	ldrb	r3, [r3, #0]
   222be:	2b00      	cmp	r3, #0
   222c0:	d007      	beq.n	222d2 <am_util_stdio_vsprintf+0x46>
                {
                    *pcBuf++ = '\r';
   222c2:	9b03      	ldr	r3, [sp, #12]
   222c4:	1c5a      	adds	r2, r3, #1
   222c6:	9203      	str	r2, [sp, #12]
   222c8:	220d      	movs	r2, #13
   222ca:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   222cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   222ce:	3301      	adds	r3, #1
   222d0:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
   222d2:	9b03      	ldr	r3, [sp, #12]
   222d4:	1c5a      	adds	r2, r3, #1
   222d6:	9203      	str	r2, [sp, #12]
   222d8:	9a02      	ldr	r2, [sp, #8]
   222da:	7812      	ldrb	r2, [r2, #0]
   222dc:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   222de:	9b02      	ldr	r3, [sp, #8]
   222e0:	3301      	adds	r3, #1
   222e2:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
   222e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   222e6:	3301      	adds	r3, #1
   222e8:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
   222ea:	e2c3      	b.n	22874 <am_util_stdio_vsprintf+0x5e8>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   222ec:	9b02      	ldr	r3, [sp, #8]
   222ee:	3301      	adds	r3, #1
   222f0:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
   222f2:	2300      	movs	r3, #0
   222f4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   222f8:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   222fc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   22300:	2320      	movs	r3, #32
   22302:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
   22306:	9b02      	ldr	r3, [sp, #8]
   22308:	781b      	ldrb	r3, [r3, #0]
   2230a:	2b30      	cmp	r3, #48	; 0x30
   2230c:	d105      	bne.n	2231a <am_util_stdio_vsprintf+0x8e>
        {
            ui8PadChar = '0';
   2230e:	2330      	movs	r3, #48	; 0x30
   22310:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
   22314:	9b02      	ldr	r3, [sp, #8]
   22316:	3301      	adds	r3, #1
   22318:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   2231a:	ab05      	add	r3, sp, #20
   2231c:	4619      	mov	r1, r3
   2231e:	9802      	ldr	r0, [sp, #8]
   22320:	f7ff fd97 	bl	21e52 <decstr_to_int>
   22324:	4603      	mov	r3, r0
   22326:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
   22328:	9b05      	ldr	r3, [sp, #20]
   2232a:	9a02      	ldr	r2, [sp, #8]
   2232c:	4413      	add	r3, r2
   2232e:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   22330:	9b02      	ldr	r3, [sp, #8]
   22332:	781b      	ldrb	r3, [r3, #0]
   22334:	2b73      	cmp	r3, #115	; 0x73
   22336:	d005      	beq.n	22344 <am_util_stdio_vsprintf+0xb8>
   22338:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2233a:	2b00      	cmp	r3, #0
   2233c:	da02      	bge.n	22344 <am_util_stdio_vsprintf+0xb8>
        {
            iWidth = -iWidth;
   2233e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22340:	425b      	negs	r3, r3
   22342:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   22344:	9b02      	ldr	r3, [sp, #8]
   22346:	781b      	ldrb	r3, [r3, #0]
   22348:	2b2e      	cmp	r3, #46	; 0x2e
   2234a:	d10d      	bne.n	22368 <am_util_stdio_vsprintf+0xdc>
        {
            ++pcFmt;
   2234c:	9b02      	ldr	r3, [sp, #8]
   2234e:	3301      	adds	r3, #1
   22350:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   22352:	ab05      	add	r3, sp, #20
   22354:	4619      	mov	r1, r3
   22356:	9802      	ldr	r0, [sp, #8]
   22358:	f7ff fd7b 	bl	21e52 <decstr_to_int>
   2235c:	4603      	mov	r3, r0
   2235e:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
   22360:	9b05      	ldr	r3, [sp, #20]
   22362:	9a02      	ldr	r2, [sp, #8]
   22364:	4413      	add	r3, r2
   22366:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   22368:	9b02      	ldr	r3, [sp, #8]
   2236a:	781b      	ldrb	r3, [r3, #0]
   2236c:	2b6c      	cmp	r3, #108	; 0x6c
   2236e:	d10c      	bne.n	2238a <am_util_stdio_vsprintf+0xfe>
        {
            pcFmt++;
   22370:	9b02      	ldr	r3, [sp, #8]
   22372:	3301      	adds	r3, #1
   22374:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   22376:	9b02      	ldr	r3, [sp, #8]
   22378:	781b      	ldrb	r3, [r3, #0]
   2237a:	2b6c      	cmp	r3, #108	; 0x6c
   2237c:	d105      	bne.n	2238a <am_util_stdio_vsprintf+0xfe>
            {
                pcFmt++;
   2237e:	9b02      	ldr	r3, [sp, #8]
   22380:	3301      	adds	r3, #1
   22382:	9302      	str	r3, [sp, #8]
                bLongLong = true;
   22384:	2301      	movs	r3, #1
   22386:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
   2238a:	9b02      	ldr	r3, [sp, #8]
   2238c:	781b      	ldrb	r3, [r3, #0]
   2238e:	3b46      	subs	r3, #70	; 0x46
   22390:	2b32      	cmp	r3, #50	; 0x32
   22392:	f200 825c 	bhi.w	2284e <am_util_stdio_vsprintf+0x5c2>
   22396:	a201      	add	r2, pc, #4	; (adr r2, 2239c <am_util_stdio_vsprintf+0x110>)
   22398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2239c:	000227d5 	.word	0x000227d5
   223a0:	0002284f 	.word	0x0002284f
   223a4:	0002284f 	.word	0x0002284f
   223a8:	0002284f 	.word	0x0002284f
   223ac:	0002284f 	.word	0x0002284f
   223b0:	0002284f 	.word	0x0002284f
   223b4:	0002284f 	.word	0x0002284f
   223b8:	0002284f 	.word	0x0002284f
   223bc:	0002284f 	.word	0x0002284f
   223c0:	0002284f 	.word	0x0002284f
   223c4:	0002284f 	.word	0x0002284f
   223c8:	0002284f 	.word	0x0002284f
   223cc:	0002284f 	.word	0x0002284f
   223d0:	0002284f 	.word	0x0002284f
   223d4:	0002284f 	.word	0x0002284f
   223d8:	0002284f 	.word	0x0002284f
   223dc:	0002284f 	.word	0x0002284f
   223e0:	0002284f 	.word	0x0002284f
   223e4:	00022563 	.word	0x00022563
   223e8:	0002284f 	.word	0x0002284f
   223ec:	0002284f 	.word	0x0002284f
   223f0:	0002284f 	.word	0x0002284f
   223f4:	0002284f 	.word	0x0002284f
   223f8:	0002284f 	.word	0x0002284f
   223fc:	0002284f 	.word	0x0002284f
   22400:	0002284f 	.word	0x0002284f
   22404:	0002284f 	.word	0x0002284f
   22408:	0002284f 	.word	0x0002284f
   2240c:	0002284f 	.word	0x0002284f
   22410:	00022469 	.word	0x00022469
   22414:	00022699 	.word	0x00022699
   22418:	0002284f 	.word	0x0002284f
   2241c:	000227d5 	.word	0x000227d5
   22420:	0002284f 	.word	0x0002284f
   22424:	0002284f 	.word	0x0002284f
   22428:	00022699 	.word	0x00022699
   2242c:	0002284f 	.word	0x0002284f
   22430:	0002284f 	.word	0x0002284f
   22434:	0002284f 	.word	0x0002284f
   22438:	0002284f 	.word	0x0002284f
   2243c:	0002284f 	.word	0x0002284f
   22440:	0002284f 	.word	0x0002284f
   22444:	0002284f 	.word	0x0002284f
   22448:	0002284f 	.word	0x0002284f
   2244c:	0002284f 	.word	0x0002284f
   22450:	0002248f 	.word	0x0002248f
   22454:	0002284f 	.word	0x0002284f
   22458:	00022603 	.word	0x00022603
   2245c:	0002284f 	.word	0x0002284f
   22460:	0002284f 	.word	0x0002284f
   22464:	0002255d 	.word	0x0002255d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   22468:	9b01      	ldr	r3, [sp, #4]
   2246a:	1d1a      	adds	r2, r3, #4
   2246c:	9201      	str	r2, [sp, #4]
   2246e:	681b      	ldr	r3, [r3, #0]
   22470:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
   22474:	9b03      	ldr	r3, [sp, #12]
   22476:	2b00      	cmp	r3, #0
   22478:	d005      	beq.n	22486 <am_util_stdio_vsprintf+0x1fa>
                {
                    *pcBuf++ = ui8CharSpecifier;
   2247a:	9b03      	ldr	r3, [sp, #12]
   2247c:	1c5a      	adds	r2, r3, #1
   2247e:	9203      	str	r2, [sp, #12]
   22480:	f89d 201f 	ldrb.w	r2, [sp, #31]
   22484:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   22486:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22488:	3301      	adds	r3, #1
   2248a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
   2248c:	e1ef      	b.n	2286e <am_util_stdio_vsprintf+0x5e2>

            case 's':
                pcStr = va_arg(pArgs, char *);
   2248e:	9b01      	ldr	r3, [sp, #4]
   22490:	1d1a      	adds	r2, r3, #4
   22492:	9201      	str	r2, [sp, #4]
   22494:	681b      	ldr	r3, [r3, #0]
   22496:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   22498:	9815      	ldr	r0, [sp, #84]	; 0x54
   2249a:	f7ff fdc3 	bl	22024 <simple_strlen>
   2249e:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
   224a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   224a2:	2b00      	cmp	r3, #0
   224a4:	dd2e      	ble.n	22504 <am_util_stdio_vsprintf+0x278>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   224a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   224a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   224aa:	429a      	cmp	r2, r3
   224ac:	d22a      	bcs.n	22504 <am_util_stdio_vsprintf+0x278>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   224ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   224b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   224b2:	1ad3      	subs	r3, r2, r3
   224b4:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   224b6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   224ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
   224bc:	4619      	mov	r1, r3
   224be:	9803      	ldr	r0, [sp, #12]
   224c0:	f7ff fdc6 	bl	22050 <padbuffer>
   224c4:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
   224c6:	9b03      	ldr	r3, [sp, #12]
   224c8:	2b00      	cmp	r3, #0
   224ca:	d001      	beq.n	224d0 <am_util_stdio_vsprintf+0x244>
   224cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   224ce:	e000      	b.n	224d2 <am_util_stdio_vsprintf+0x246>
   224d0:	2300      	movs	r3, #0
   224d2:	9a03      	ldr	r2, [sp, #12]
   224d4:	4413      	add	r3, r2
   224d6:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
   224d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   224da:	9a11      	ldr	r2, [sp, #68]	; 0x44
   224dc:	4413      	add	r3, r2
   224de:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
   224e0:	2300      	movs	r3, #0
   224e2:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
   224e4:	e00e      	b.n	22504 <am_util_stdio_vsprintf+0x278>
                {
                    if ( pcBuf )
   224e6:	9b03      	ldr	r3, [sp, #12]
   224e8:	2b00      	cmp	r3, #0
   224ea:	d005      	beq.n	224f8 <am_util_stdio_vsprintf+0x26c>
                    {
                        *pcBuf++ = *pcStr;
   224ec:	9b03      	ldr	r3, [sp, #12]
   224ee:	1c5a      	adds	r2, r3, #1
   224f0:	9203      	str	r2, [sp, #12]
   224f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   224f4:	7812      	ldrb	r2, [r2, #0]
   224f6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   224f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   224fa:	3301      	adds	r3, #1
   224fc:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
   224fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22500:	3301      	adds	r3, #1
   22502:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
   22504:	9b15      	ldr	r3, [sp, #84]	; 0x54
   22506:	781b      	ldrb	r3, [r3, #0]
   22508:	2b00      	cmp	r3, #0
   2250a:	d1ec      	bne.n	224e6 <am_util_stdio_vsprintf+0x25a>
                }

                if ( iWidth )
   2250c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2250e:	2b00      	cmp	r3, #0
   22510:	f000 81aa 	beq.w	22868 <am_util_stdio_vsprintf+0x5dc>
                {
                    iWidth = -iWidth;
   22514:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22516:	425b      	negs	r3, r3
   22518:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   2251a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2251c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2251e:	429a      	cmp	r2, r3
   22520:	f080 81a2 	bcs.w	22868 <am_util_stdio_vsprintf+0x5dc>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   22524:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22528:	1ad3      	subs	r3, r2, r3
   2252a:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   2252c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22530:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22532:	4619      	mov	r1, r3
   22534:	9803      	ldr	r0, [sp, #12]
   22536:	f7ff fd8b 	bl	22050 <padbuffer>
   2253a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
   2253c:	9b03      	ldr	r3, [sp, #12]
   2253e:	2b00      	cmp	r3, #0
   22540:	d001      	beq.n	22546 <am_util_stdio_vsprintf+0x2ba>
   22542:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22544:	e000      	b.n	22548 <am_util_stdio_vsprintf+0x2bc>
   22546:	2300      	movs	r3, #0
   22548:	9a03      	ldr	r2, [sp, #12]
   2254a:	4413      	add	r3, r2
   2254c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
   2254e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22550:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22552:	4413      	add	r3, r2
   22554:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
   22556:	2300      	movs	r3, #0
   22558:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
   2255a:	e185      	b.n	22868 <am_util_stdio_vsprintf+0x5dc>

            case 'x':
                bLower = true;
   2255c:	2301      	movs	r3, #1
   2255e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   22562:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   22566:	2b00      	cmp	r3, #0
   22568:	d00c      	beq.n	22584 <am_util_stdio_vsprintf+0x2f8>
   2256a:	9b01      	ldr	r3, [sp, #4]
   2256c:	3307      	adds	r3, #7
   2256e:	f023 0307 	bic.w	r3, r3, #7
   22572:	f103 0208 	add.w	r2, r3, #8
   22576:	9201      	str	r2, [sp, #4]
   22578:	e9d3 2300 	ldrd	r2, r3, [r3]
   2257c:	e009      	b.n	22592 <am_util_stdio_vsprintf+0x306>
   2257e:	bf00      	nop
   22580:	10004678 	.word	0x10004678
                                      va_arg(pArgs, uint32_t);
   22584:	9b01      	ldr	r3, [sp, #4]
   22586:	1d1a      	adds	r2, r3, #4
   22588:	9201      	str	r2, [sp, #4]
   2258a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2258c:	461a      	mov	r2, r3
   2258e:	f04f 0300 	mov.w	r3, #0
   22592:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

                if ( iWidth )
   22596:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22598:	2b00      	cmp	r3, #0
   2259a:	d01e      	beq.n	225da <am_util_stdio_vsprintf+0x34e>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   2259c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   225a0:	f7ff fc33 	bl	21e0a <ndigits_in_hex>
   225a4:	4602      	mov	r2, r0
   225a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   225a8:	1a9b      	subs	r3, r3, r2
   225aa:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   225ac:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   225b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   225b2:	4619      	mov	r1, r3
   225b4:	9803      	ldr	r0, [sp, #12]
   225b6:	f7ff fd4b 	bl	22050 <padbuffer>
   225ba:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
   225bc:	9b03      	ldr	r3, [sp, #12]
   225be:	2b00      	cmp	r3, #0
   225c0:	d001      	beq.n	225c6 <am_util_stdio_vsprintf+0x33a>
   225c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   225c4:	e000      	b.n	225c8 <am_util_stdio_vsprintf+0x33c>
   225c6:	2300      	movs	r3, #0
   225c8:	9a03      	ldr	r2, [sp, #12]
   225ca:	4413      	add	r3, r2
   225cc:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
   225ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   225d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   225d2:	4413      	add	r3, r2
   225d4:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
   225d6:	2300      	movs	r3, #0
   225d8:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   225da:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   225de:	9a03      	ldr	r2, [sp, #12]
   225e0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   225e4:	f7ff fcbe 	bl	21f64 <uint64_to_hexstr>
   225e8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
   225ea:	9b03      	ldr	r3, [sp, #12]
   225ec:	2b00      	cmp	r3, #0
   225ee:	d003      	beq.n	225f8 <am_util_stdio_vsprintf+0x36c>
                {
                    pcBuf += iVal;
   225f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   225f2:	9a03      	ldr	r2, [sp, #12]
   225f4:	4413      	add	r3, r2
   225f6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
   225f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   225fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   225fc:	4413      	add	r3, r2
   225fe:	9311      	str	r3, [sp, #68]	; 0x44
                break;
   22600:	e135      	b.n	2286e <am_util_stdio_vsprintf+0x5e2>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   22602:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   22606:	2b00      	cmp	r3, #0
   22608:	d009      	beq.n	2261e <am_util_stdio_vsprintf+0x392>
   2260a:	9b01      	ldr	r3, [sp, #4]
   2260c:	3307      	adds	r3, #7
   2260e:	f023 0307 	bic.w	r3, r3, #7
   22612:	f103 0208 	add.w	r2, r3, #8
   22616:	9201      	str	r2, [sp, #4]
   22618:	e9d3 2300 	ldrd	r2, r3, [r3]
   2261c:	e006      	b.n	2262c <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
   2261e:	9b01      	ldr	r3, [sp, #4]
   22620:	1d1a      	adds	r2, r3, #4
   22622:	9201      	str	r2, [sp, #4]
   22624:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   22626:	461a      	mov	r2, r3
   22628:	f04f 0300 	mov.w	r3, #0
   2262c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

                if ( iWidth )
   22630:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22632:	2b00      	cmp	r3, #0
   22634:	d01e      	beq.n	22674 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   22636:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2263a:	f7ff fbaa 	bl	21d92 <ndigits_in_u64>
   2263e:	4602      	mov	r2, r0
   22640:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22642:	1a9b      	subs	r3, r3, r2
   22644:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   22646:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   2264a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2264c:	4619      	mov	r1, r3
   2264e:	9803      	ldr	r0, [sp, #12]
   22650:	f7ff fcfe 	bl	22050 <padbuffer>
   22654:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
   22656:	9b03      	ldr	r3, [sp, #12]
   22658:	2b00      	cmp	r3, #0
   2265a:	d001      	beq.n	22660 <am_util_stdio_vsprintf+0x3d4>
   2265c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2265e:	e000      	b.n	22662 <am_util_stdio_vsprintf+0x3d6>
   22660:	2300      	movs	r3, #0
   22662:	9a03      	ldr	r2, [sp, #12]
   22664:	4413      	add	r3, r2
   22666:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
   22668:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2266a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2266c:	4413      	add	r3, r2
   2266e:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
   22670:	2300      	movs	r3, #0
   22672:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   22674:	9a03      	ldr	r2, [sp, #12]
   22676:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2267a:	f7ff fc2e 	bl	21eda <uint64_to_str>
   2267e:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
   22680:	9b03      	ldr	r3, [sp, #12]
   22682:	2b00      	cmp	r3, #0
   22684:	d003      	beq.n	2268e <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
   22686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22688:	9a03      	ldr	r2, [sp, #12]
   2268a:	4413      	add	r3, r2
   2268c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
   2268e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22690:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22692:	4413      	add	r3, r2
   22694:	9311      	str	r3, [sp, #68]	; 0x44
                break;
   22696:	e0ea      	b.n	2286e <am_util_stdio_vsprintf+0x5e2>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   22698:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   2269c:	2b00      	cmp	r3, #0
   2269e:	d009      	beq.n	226b4 <am_util_stdio_vsprintf+0x428>
   226a0:	9b01      	ldr	r3, [sp, #4]
   226a2:	3307      	adds	r3, #7
   226a4:	f023 0307 	bic.w	r3, r3, #7
   226a8:	f103 0208 	add.w	r2, r3, #8
   226ac:	9201      	str	r2, [sp, #4]
   226ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   226b2:	e006      	b.n	226c2 <am_util_stdio_vsprintf+0x436>
                                     va_arg(pArgs, int32_t);
   226b4:	9b01      	ldr	r3, [sp, #4]
   226b6:	1d1a      	adds	r2, r3, #4
   226b8:	9201      	str	r2, [sp, #4]
   226ba:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   226bc:	461a      	mov	r2, r3
   226be:	ea4f 73e2 	mov.w	r3, r2, asr #31
   226c2:	e9cd 2308 	strd	r2, r3, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   226c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   226ca:	2a00      	cmp	r2, #0
   226cc:	f173 0300 	sbcs.w	r3, r3, #0
   226d0:	da0a      	bge.n	226e8 <am_util_stdio_vsprintf+0x45c>
                {
                    ui64Val = -i64Val;          // Get absolute value
   226d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   226d6:	4252      	negs	r2, r2
   226d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   226dc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = true;
   226e0:	2301      	movs	r3, #1
   226e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   226e6:	e006      	b.n	226f6 <am_util_stdio_vsprintf+0x46a>
                }
                else
                {
                    ui64Val = i64Val;
   226e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   226ec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
   226f0:	2300      	movs	r3, #0
   226f2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
   226f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   226f8:	2b00      	cmp	r3, #0
   226fa:	d04a      	beq.n	22792 <am_util_stdio_vsprintf+0x506>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   226fc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   22700:	4610      	mov	r0, r2
   22702:	4619      	mov	r1, r3
   22704:	f7ff fb65 	bl	21dd2 <ndigits_in_i64>
   22708:	4602      	mov	r2, r0
   2270a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2270c:	1a9b      	subs	r3, r3, r2
   2270e:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
   22710:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   22714:	2b00      	cmp	r3, #0
   22716:	d011      	beq.n	2273c <am_util_stdio_vsprintf+0x4b0>
                    {
                        --iWidth;
   22718:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2271a:	3b01      	subs	r3, #1
   2271c:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   2271e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22722:	2b30      	cmp	r3, #48	; 0x30
   22724:	d10a      	bne.n	2273c <am_util_stdio_vsprintf+0x4b0>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   22726:	9b03      	ldr	r3, [sp, #12]
   22728:	2b00      	cmp	r3, #0
   2272a:	d004      	beq.n	22736 <am_util_stdio_vsprintf+0x4aa>
                            {
                                *pcBuf++ = '-';
   2272c:	9b03      	ldr	r3, [sp, #12]
   2272e:	1c5a      	adds	r2, r3, #1
   22730:	9203      	str	r2, [sp, #12]
   22732:	222d      	movs	r2, #45	; 0x2d
   22734:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   22736:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22738:	3301      	adds	r3, #1
   2273a:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   2273c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22740:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22742:	4619      	mov	r1, r3
   22744:	9803      	ldr	r0, [sp, #12]
   22746:	f7ff fc83 	bl	22050 <padbuffer>
   2274a:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
   2274c:	9b03      	ldr	r3, [sp, #12]
   2274e:	2b00      	cmp	r3, #0
   22750:	d001      	beq.n	22756 <am_util_stdio_vsprintf+0x4ca>
   22752:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22754:	e000      	b.n	22758 <am_util_stdio_vsprintf+0x4cc>
   22756:	2300      	movs	r3, #0
   22758:	9a03      	ldr	r2, [sp, #12]
   2275a:	4413      	add	r3, r2
   2275c:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
   2275e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22760:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22762:	4413      	add	r3, r2
   22764:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
   22766:	2300      	movs	r3, #0
   22768:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   2276a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2276e:	2b00      	cmp	r3, #0
   22770:	d01e      	beq.n	227b0 <am_util_stdio_vsprintf+0x524>
   22772:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22776:	2b20      	cmp	r3, #32
   22778:	d11a      	bne.n	227b0 <am_util_stdio_vsprintf+0x524>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   2277a:	9b03      	ldr	r3, [sp, #12]
   2277c:	2b00      	cmp	r3, #0
   2277e:	d004      	beq.n	2278a <am_util_stdio_vsprintf+0x4fe>
                        {
                            *pcBuf++ = '-';
   22780:	9b03      	ldr	r3, [sp, #12]
   22782:	1c5a      	adds	r2, r3, #1
   22784:	9203      	str	r2, [sp, #12]
   22786:	222d      	movs	r2, #45	; 0x2d
   22788:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   2278a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2278c:	3301      	adds	r3, #1
   2278e:	9311      	str	r3, [sp, #68]	; 0x44
   22790:	e00e      	b.n	227b0 <am_util_stdio_vsprintf+0x524>
                    }
                }
                else
                {
                    if ( bNeg )
   22792:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   22796:	2b00      	cmp	r3, #0
   22798:	d00a      	beq.n	227b0 <am_util_stdio_vsprintf+0x524>
                    {
                        if ( pcBuf )
   2279a:	9b03      	ldr	r3, [sp, #12]
   2279c:	2b00      	cmp	r3, #0
   2279e:	d004      	beq.n	227aa <am_util_stdio_vsprintf+0x51e>
                        {
                            *pcBuf++ = '-';
   227a0:	9b03      	ldr	r3, [sp, #12]
   227a2:	1c5a      	adds	r2, r3, #1
   227a4:	9203      	str	r2, [sp, #12]
   227a6:	222d      	movs	r2, #45	; 0x2d
   227a8:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   227aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   227ac:	3301      	adds	r3, #1
   227ae:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   227b0:	9a03      	ldr	r2, [sp, #12]
   227b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   227b6:	f7ff fb90 	bl	21eda <uint64_to_str>
   227ba:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
   227bc:	9b03      	ldr	r3, [sp, #12]
   227be:	2b00      	cmp	r3, #0
   227c0:	d003      	beq.n	227ca <am_util_stdio_vsprintf+0x53e>
                {
                    pcBuf += iVal;
   227c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   227c4:	9a03      	ldr	r2, [sp, #12]
   227c6:	4413      	add	r3, r2
   227c8:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
   227ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   227cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   227ce:	4413      	add	r3, r2
   227d0:	9311      	str	r3, [sp, #68]	; 0x44
                break;
   227d2:	e04c      	b.n	2286e <am_util_stdio_vsprintf+0x5e2>


            case 'f':
            case 'F':
                if ( pcBuf )
   227d4:	9b03      	ldr	r3, [sp, #12]
   227d6:	2b00      	cmp	r3, #0
   227d8:	d048      	beq.n	2286c <am_util_stdio_vsprintf+0x5e0>
                {
                    float fValue = va_arg(pArgs, double);
   227da:	9b01      	ldr	r3, [sp, #4]
   227dc:	3307      	adds	r3, #7
   227de:	f023 0307 	bic.w	r3, r3, #7
   227e2:	f103 0208 	add.w	r2, r3, #8
   227e6:	9201      	str	r2, [sp, #4]
   227e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   227ec:	4610      	mov	r0, r2
   227ee:	4619      	mov	r1, r3
   227f0:	f7e9 fd20 	bl	c234 <__aeabi_d2f>
   227f4:	4603      	mov	r3, r0
   227f6:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   227f8:	9b03      	ldr	r3, [sp, #12]
   227fa:	2214      	movs	r2, #20
   227fc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   227fe:	990e      	ldr	r1, [sp, #56]	; 0x38
   22800:	9803      	ldr	r0, [sp, #12]
   22802:	ed9d 0a06 	vldr	s0, [sp, #24]
   22806:	f7ff fc45 	bl	22094 <ftoa>
   2280a:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
   2280c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2280e:	2b00      	cmp	r3, #0
   22810:	da14      	bge.n	2283c <am_util_stdio_vsprintf+0x5b0>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   22812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22818:	d102      	bne.n	22820 <am_util_stdio_vsprintf+0x594>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   2281a:	4b1e      	ldr	r3, [pc, #120]	; (22894 <am_util_stdio_vsprintf+0x608>)
   2281c:	930c      	str	r3, [sp, #48]	; 0x30
   2281e:	e008      	b.n	22832 <am_util_stdio_vsprintf+0x5a6>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   22820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22822:	f113 0f02 	cmn.w	r3, #2
   22826:	d102      	bne.n	2282e <am_util_stdio_vsprintf+0x5a2>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   22828:	4b1b      	ldr	r3, [pc, #108]	; (22898 <am_util_stdio_vsprintf+0x60c>)
   2282a:	930c      	str	r3, [sp, #48]	; 0x30
   2282c:	e001      	b.n	22832 <am_util_stdio_vsprintf+0x5a6>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   2282e:	4b1b      	ldr	r3, [pc, #108]	; (2289c <am_util_stdio_vsprintf+0x610>)
   22830:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   22832:	9b03      	ldr	r3, [sp, #12]
   22834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   22836:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   22838:	2303      	movs	r3, #3
   2283a:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
   2283c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2283e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22840:	4413      	add	r3, r2
   22842:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
   22844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22846:	9a03      	ldr	r2, [sp, #12]
   22848:	4413      	add	r3, r2
   2284a:	9303      	str	r3, [sp, #12]
                }
                break;
   2284c:	e00e      	b.n	2286c <am_util_stdio_vsprintf+0x5e0>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   2284e:	9b03      	ldr	r3, [sp, #12]
   22850:	2b00      	cmp	r3, #0
   22852:	d005      	beq.n	22860 <am_util_stdio_vsprintf+0x5d4>
                {
                    *pcBuf++ = *pcFmt;
   22854:	9b03      	ldr	r3, [sp, #12]
   22856:	1c5a      	adds	r2, r3, #1
   22858:	9203      	str	r2, [sp, #12]
   2285a:	9a02      	ldr	r2, [sp, #8]
   2285c:	7812      	ldrb	r2, [r2, #0]
   2285e:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   22860:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22862:	3301      	adds	r3, #1
   22864:	9311      	str	r3, [sp, #68]	; 0x44
                break;
   22866:	e002      	b.n	2286e <am_util_stdio_vsprintf+0x5e2>
                break;
   22868:	bf00      	nop
   2286a:	e000      	b.n	2286e <am_util_stdio_vsprintf+0x5e2>
                break;
   2286c:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   2286e:	9b02      	ldr	r3, [sp, #8]
   22870:	3301      	adds	r3, #1
   22872:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
   22874:	9b02      	ldr	r3, [sp, #8]
   22876:	781b      	ldrb	r3, [r3, #0]
   22878:	2b00      	cmp	r3, #0
   2287a:	f47f ad11 	bne.w	222a0 <am_util_stdio_vsprintf+0x14>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   2287e:	9b03      	ldr	r3, [sp, #12]
   22880:	2b00      	cmp	r3, #0
   22882:	d002      	beq.n	2288a <am_util_stdio_vsprintf+0x5fe>
    {
        *pcBuf = 0x0;
   22884:	9b03      	ldr	r3, [sp, #12]
   22886:	2200      	movs	r2, #0
   22888:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   2288a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
   2288c:	4618      	mov	r0, r3
   2288e:	b017      	add	sp, #92	; 0x5c
   22890:	f85d fb04 	ldr.w	pc, [sp], #4
   22894:	00302e30 	.word	0x00302e30
   22898:	00232e23 	.word	0x00232e23
   2289c:	003f2e3f 	.word	0x003f2e3f

000228a0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   228a0:	b40f      	push	{r0, r1, r2, r3}
   228a2:	b500      	push	{lr}
   228a4:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   228a6:	4b0c      	ldr	r3, [pc, #48]	; (228d8 <am_util_stdio_printf+0x38>)
   228a8:	681b      	ldr	r3, [r3, #0]
   228aa:	2b00      	cmp	r3, #0
   228ac:	d101      	bne.n	228b2 <am_util_stdio_printf+0x12>
    {
        return 0;
   228ae:	2300      	movs	r3, #0
   228b0:	e00c      	b.n	228cc <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   228b2:	ab05      	add	r3, sp, #20
   228b4:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   228b6:	9a00      	ldr	r2, [sp, #0]
   228b8:	9904      	ldr	r1, [sp, #16]
   228ba:	4808      	ldr	r0, [pc, #32]	; (228dc <am_util_stdio_printf+0x3c>)
   228bc:	f7ff fce6 	bl	2228c <am_util_stdio_vsprintf>
   228c0:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   228c2:	4b05      	ldr	r3, [pc, #20]	; (228d8 <am_util_stdio_printf+0x38>)
   228c4:	681b      	ldr	r3, [r3, #0]
   228c6:	4805      	ldr	r0, [pc, #20]	; (228dc <am_util_stdio_printf+0x3c>)
   228c8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   228ca:	9b01      	ldr	r3, [sp, #4]
}
   228cc:	4618      	mov	r0, r3
   228ce:	b003      	add	sp, #12
   228d0:	f85d eb04 	ldr.w	lr, [sp], #4
   228d4:	b004      	add	sp, #16
   228d6:	4770      	bx	lr
   228d8:	10009808 	.word	0x10009808
   228dc:	10004578 	.word	0x10004578

000228e0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   228e0:	b500      	push	{lr}
   228e2:	b083      	sub	sp, #12
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   228e4:	2018      	movs	r0, #24
   228e6:	f001 ff57 	bl	24798 <pvPortMalloc>
   228ea:	9001      	str	r0, [sp, #4]

		if( pxEventBits != NULL )
   228ec:	9b01      	ldr	r3, [sp, #4]
   228ee:	2b00      	cmp	r3, #0
   228f0:	d007      	beq.n	22902 <xEventGroupCreate+0x22>
		{
			pxEventBits->uxEventBits = 0;
   228f2:	9b01      	ldr	r3, [sp, #4]
   228f4:	2200      	movs	r2, #0
   228f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   228f8:	9b01      	ldr	r3, [sp, #4]
   228fa:	3304      	adds	r3, #4
   228fc:	4618      	mov	r0, r3
   228fe:	f000 f94a 	bl	22b96 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   22902:	9b01      	ldr	r3, [sp, #4]
	}
   22904:	4618      	mov	r0, r3
   22906:	b003      	add	sp, #12
   22908:	f85d fb04 	ldr.w	pc, [sp], #4

0002290c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   2290c:	b500      	push	{lr}
   2290e:	b08d      	sub	sp, #52	; 0x34
   22910:	9003      	str	r0, [sp, #12]
   22912:	9102      	str	r1, [sp, #8]
   22914:	9201      	str	r2, [sp, #4]
   22916:	9300      	str	r3, [sp, #0]
EventGroup_t *pxEventBits = xEventGroup;
   22918:	9b03      	ldr	r3, [sp, #12]
   2291a:	9309      	str	r3, [sp, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   2291c:	2300      	movs	r3, #0
   2291e:	930a      	str	r3, [sp, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   22920:	2300      	movs	r3, #0
   22922:	9308      	str	r3, [sp, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   22924:	9b03      	ldr	r3, [sp, #12]
   22926:	2b00      	cmp	r3, #0
   22928:	d100      	bne.n	2292c <xEventGroupWaitBits+0x20>
   2292a:	e7fe      	b.n	2292a <xEventGroupWaitBits+0x1e>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   2292c:	9b02      	ldr	r3, [sp, #8]
   2292e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   22932:	2b00      	cmp	r3, #0
   22934:	d000      	beq.n	22938 <xEventGroupWaitBits+0x2c>
   22936:	e7fe      	b.n	22936 <xEventGroupWaitBits+0x2a>
	configASSERT( uxBitsToWaitFor != 0 );
   22938:	9b02      	ldr	r3, [sp, #8]
   2293a:	2b00      	cmp	r3, #0
   2293c:	d100      	bne.n	22940 <xEventGroupWaitBits+0x34>
   2293e:	e7fe      	b.n	2293e <xEventGroupWaitBits+0x32>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   22940:	f001 fbbe 	bl	240c0 <xTaskGetSchedulerState>
   22944:	4603      	mov	r3, r0
   22946:	2b00      	cmp	r3, #0
   22948:	d102      	bne.n	22950 <xEventGroupWaitBits+0x44>
   2294a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2294c:	2b00      	cmp	r3, #0
   2294e:	d101      	bne.n	22954 <xEventGroupWaitBits+0x48>
   22950:	2301      	movs	r3, #1
   22952:	e000      	b.n	22956 <xEventGroupWaitBits+0x4a>
   22954:	2300      	movs	r3, #0
   22956:	2b00      	cmp	r3, #0
   22958:	d100      	bne.n	2295c <xEventGroupWaitBits+0x50>
   2295a:	e7fe      	b.n	2295a <xEventGroupWaitBits+0x4e>
	}
	#endif

	vTaskSuspendAll();
   2295c:	f000 ff7e 	bl	2385c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   22960:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22962:	681b      	ldr	r3, [r3, #0]
   22964:	9307      	str	r3, [sp, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   22966:	9a00      	ldr	r2, [sp, #0]
   22968:	9902      	ldr	r1, [sp, #8]
   2296a:	9807      	ldr	r0, [sp, #28]
   2296c:	f000 f8f6 	bl	22b5c <prvTestWaitCondition>
   22970:	9006      	str	r0, [sp, #24]

		if( xWaitConditionMet != pdFALSE )
   22972:	9b06      	ldr	r3, [sp, #24]
   22974:	2b00      	cmp	r3, #0
   22976:	d00e      	beq.n	22996 <xEventGroupWaitBits+0x8a>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   22978:	9b07      	ldr	r3, [sp, #28]
   2297a:	930b      	str	r3, [sp, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   2297c:	2300      	movs	r3, #0
   2297e:	930e      	str	r3, [sp, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   22980:	9b01      	ldr	r3, [sp, #4]
   22982:	2b00      	cmp	r3, #0
   22984:	d028      	beq.n	229d8 <xEventGroupWaitBits+0xcc>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   22986:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22988:	681a      	ldr	r2, [r3, #0]
   2298a:	9b02      	ldr	r3, [sp, #8]
   2298c:	43db      	mvns	r3, r3
   2298e:	401a      	ands	r2, r3
   22990:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22992:	601a      	str	r2, [r3, #0]
   22994:	e020      	b.n	229d8 <xEventGroupWaitBits+0xcc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   22996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22998:	2b00      	cmp	r3, #0
   2299a:	d104      	bne.n	229a6 <xEventGroupWaitBits+0x9a>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   2299c:	9b07      	ldr	r3, [sp, #28]
   2299e:	930b      	str	r3, [sp, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   229a0:	2301      	movs	r3, #1
   229a2:	9308      	str	r3, [sp, #32]
   229a4:	e018      	b.n	229d8 <xEventGroupWaitBits+0xcc>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   229a6:	9b01      	ldr	r3, [sp, #4]
   229a8:	2b00      	cmp	r3, #0
   229aa:	d003      	beq.n	229b4 <xEventGroupWaitBits+0xa8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   229ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   229ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   229b2:	930a      	str	r3, [sp, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   229b4:	9b00      	ldr	r3, [sp, #0]
   229b6:	2b00      	cmp	r3, #0
   229b8:	d003      	beq.n	229c2 <xEventGroupWaitBits+0xb6>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   229ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   229bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   229c0:	930a      	str	r3, [sp, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   229c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   229c4:	1d18      	adds	r0, r3, #4
   229c6:	9a02      	ldr	r2, [sp, #8]
   229c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   229ca:	4313      	orrs	r3, r2
   229cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   229ce:	4619      	mov	r1, r3
   229d0:	f001 f964 	bl	23c9c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   229d4:	2300      	movs	r3, #0
   229d6:	930b      	str	r3, [sp, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   229d8:	f000 ff7c 	bl	238d4 <xTaskResumeAll>
   229dc:	9005      	str	r0, [sp, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   229de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   229e0:	2b00      	cmp	r3, #0
   229e2:	d031      	beq.n	22a48 <xEventGroupWaitBits+0x13c>
	{
		if( xAlreadyYielded == pdFALSE )
   229e4:	9b05      	ldr	r3, [sp, #20]
   229e6:	2b00      	cmp	r3, #0
   229e8:	d107      	bne.n	229fa <xEventGroupWaitBits+0xee>
		{
			portYIELD_WITHIN_API();
   229ea:	4b1a      	ldr	r3, [pc, #104]	; (22a54 <xEventGroupWaitBits+0x148>)
   229ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   229f0:	601a      	str	r2, [r3, #0]
   229f2:	f3bf 8f4f 	dsb	sy
   229f6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   229fa:	f001 fb7b 	bl	240f4 <uxTaskResetEventItemValue>
   229fe:	900b      	str	r0, [sp, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   22a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   22a06:	2b00      	cmp	r3, #0
   22a08:	d11a      	bne.n	22a40 <xEventGroupWaitBits+0x134>
		{
			taskENTER_CRITICAL();
   22a0a:	f7f6 fcd1 	bl	193b0 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   22a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22a10:	681b      	ldr	r3, [r3, #0]
   22a12:	930b      	str	r3, [sp, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   22a14:	9a00      	ldr	r2, [sp, #0]
   22a16:	9902      	ldr	r1, [sp, #8]
   22a18:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22a1a:	f000 f89f 	bl	22b5c <prvTestWaitCondition>
   22a1e:	4603      	mov	r3, r0
   22a20:	2b00      	cmp	r3, #0
   22a22:	d009      	beq.n	22a38 <xEventGroupWaitBits+0x12c>
				{
					if( xClearOnExit != pdFALSE )
   22a24:	9b01      	ldr	r3, [sp, #4]
   22a26:	2b00      	cmp	r3, #0
   22a28:	d006      	beq.n	22a38 <xEventGroupWaitBits+0x12c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   22a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22a2c:	681a      	ldr	r2, [r3, #0]
   22a2e:	9b02      	ldr	r3, [sp, #8]
   22a30:	43db      	mvns	r3, r3
   22a32:	401a      	ands	r2, r3
   22a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22a36:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   22a38:	2301      	movs	r3, #1
   22a3a:	9308      	str	r3, [sp, #32]
			}
			taskEXIT_CRITICAL();
   22a3c:	f7f6 fcda 	bl	193f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   22a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22a42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   22a46:	930b      	str	r3, [sp, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   22a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
   22a4a:	4618      	mov	r0, r3
   22a4c:	b00d      	add	sp, #52	; 0x34
   22a4e:	f85d fb04 	ldr.w	pc, [sp], #4
   22a52:	bf00      	nop
   22a54:	e000ed04 	.word	0xe000ed04

00022a58 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   22a58:	b500      	push	{lr}
   22a5a:	b08d      	sub	sp, #52	; 0x34
   22a5c:	9001      	str	r0, [sp, #4]
   22a5e:	9100      	str	r1, [sp, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   22a60:	2300      	movs	r3, #0
   22a62:	930a      	str	r3, [sp, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   22a64:	9b01      	ldr	r3, [sp, #4]
   22a66:	9308      	str	r3, [sp, #32]
BaseType_t xMatchFound = pdFALSE;
   22a68:	2300      	movs	r3, #0
   22a6a:	9309      	str	r3, [sp, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   22a6c:	9b01      	ldr	r3, [sp, #4]
   22a6e:	2b00      	cmp	r3, #0
   22a70:	d100      	bne.n	22a74 <xEventGroupSetBits+0x1c>
   22a72:	e7fe      	b.n	22a72 <xEventGroupSetBits+0x1a>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   22a74:	9b00      	ldr	r3, [sp, #0]
   22a76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   22a7a:	2b00      	cmp	r3, #0
   22a7c:	d000      	beq.n	22a80 <xEventGroupSetBits+0x28>
   22a7e:	e7fe      	b.n	22a7e <xEventGroupSetBits+0x26>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   22a80:	9b08      	ldr	r3, [sp, #32]
   22a82:	3304      	adds	r3, #4
   22a84:	9307      	str	r3, [sp, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   22a86:	9b07      	ldr	r3, [sp, #28]
   22a88:	3308      	adds	r3, #8
   22a8a:	9306      	str	r3, [sp, #24]
	vTaskSuspendAll();
   22a8c:	f000 fee6 	bl	2385c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   22a90:	9b07      	ldr	r3, [sp, #28]
   22a92:	68db      	ldr	r3, [r3, #12]
   22a94:	930b      	str	r3, [sp, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   22a96:	9b08      	ldr	r3, [sp, #32]
   22a98:	681a      	ldr	r2, [r3, #0]
   22a9a:	9b00      	ldr	r3, [sp, #0]
   22a9c:	431a      	orrs	r2, r3
   22a9e:	9b08      	ldr	r3, [sp, #32]
   22aa0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   22aa2:	e03c      	b.n	22b1e <xEventGroupSetBits+0xc6>
		{
			pxNext = listGET_NEXT( pxListItem );
   22aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22aa6:	685b      	ldr	r3, [r3, #4]
   22aa8:	9305      	str	r3, [sp, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   22aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22aac:	681b      	ldr	r3, [r3, #0]
   22aae:	9304      	str	r3, [sp, #16]
			xMatchFound = pdFALSE;
   22ab0:	2300      	movs	r3, #0
   22ab2:	9309      	str	r3, [sp, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   22ab4:	9b04      	ldr	r3, [sp, #16]
   22ab6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   22aba:	9303      	str	r3, [sp, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   22abc:	9b04      	ldr	r3, [sp, #16]
   22abe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   22ac2:	9304      	str	r3, [sp, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   22ac4:	9b03      	ldr	r3, [sp, #12]
   22ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   22aca:	2b00      	cmp	r3, #0
   22acc:	d108      	bne.n	22ae0 <xEventGroupSetBits+0x88>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   22ace:	9b08      	ldr	r3, [sp, #32]
   22ad0:	681a      	ldr	r2, [r3, #0]
   22ad2:	9b04      	ldr	r3, [sp, #16]
   22ad4:	4013      	ands	r3, r2
   22ad6:	2b00      	cmp	r3, #0
   22ad8:	d00b      	beq.n	22af2 <xEventGroupSetBits+0x9a>
				{
					xMatchFound = pdTRUE;
   22ada:	2301      	movs	r3, #1
   22adc:	9309      	str	r3, [sp, #36]	; 0x24
   22ade:	e008      	b.n	22af2 <xEventGroupSetBits+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   22ae0:	9b08      	ldr	r3, [sp, #32]
   22ae2:	681a      	ldr	r2, [r3, #0]
   22ae4:	9b04      	ldr	r3, [sp, #16]
   22ae6:	4013      	ands	r3, r2
   22ae8:	9a04      	ldr	r2, [sp, #16]
   22aea:	429a      	cmp	r2, r3
   22aec:	d101      	bne.n	22af2 <xEventGroupSetBits+0x9a>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   22aee:	2301      	movs	r3, #1
   22af0:	9309      	str	r3, [sp, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   22af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22af4:	2b00      	cmp	r3, #0
   22af6:	d010      	beq.n	22b1a <xEventGroupSetBits+0xc2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   22af8:	9b03      	ldr	r3, [sp, #12]
   22afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   22afe:	2b00      	cmp	r3, #0
   22b00:	d003      	beq.n	22b0a <xEventGroupSetBits+0xb2>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   22b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22b04:	9b04      	ldr	r3, [sp, #16]
   22b06:	4313      	orrs	r3, r2
   22b08:	930a      	str	r3, [sp, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   22b0a:	9b08      	ldr	r3, [sp, #32]
   22b0c:	681b      	ldr	r3, [r3, #0]
   22b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   22b12:	4619      	mov	r1, r3
   22b14:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22b16:	f001 f963 	bl	23de0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   22b1a:	9b05      	ldr	r3, [sp, #20]
   22b1c:	930b      	str	r3, [sp, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   22b1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22b20:	9b06      	ldr	r3, [sp, #24]
   22b22:	429a      	cmp	r2, r3
   22b24:	d1be      	bne.n	22aa4 <xEventGroupSetBits+0x4c>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   22b26:	9b08      	ldr	r3, [sp, #32]
   22b28:	681a      	ldr	r2, [r3, #0]
   22b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22b2c:	43db      	mvns	r3, r3
   22b2e:	401a      	ands	r2, r3
   22b30:	9b08      	ldr	r3, [sp, #32]
   22b32:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   22b34:	f000 fece 	bl	238d4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   22b38:	9b08      	ldr	r3, [sp, #32]
   22b3a:	681b      	ldr	r3, [r3, #0]
}
   22b3c:	4618      	mov	r0, r3
   22b3e:	b00d      	add	sp, #52	; 0x34
   22b40:	f85d fb04 	ldr.w	pc, [sp], #4

00022b44 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   22b44:	b500      	push	{lr}
   22b46:	b083      	sub	sp, #12
   22b48:	9001      	str	r0, [sp, #4]
   22b4a:	9100      	str	r1, [sp, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   22b4c:	9900      	ldr	r1, [sp, #0]
   22b4e:	9801      	ldr	r0, [sp, #4]
   22b50:	f7ff ff82 	bl	22a58 <xEventGroupSetBits>
}
   22b54:	bf00      	nop
   22b56:	b003      	add	sp, #12
   22b58:	f85d fb04 	ldr.w	pc, [sp], #4

00022b5c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   22b5c:	b086      	sub	sp, #24
   22b5e:	9003      	str	r0, [sp, #12]
   22b60:	9102      	str	r1, [sp, #8]
   22b62:	9201      	str	r2, [sp, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   22b64:	2300      	movs	r3, #0
   22b66:	9305      	str	r3, [sp, #20]

	if( xWaitForAllBits == pdFALSE )
   22b68:	9b01      	ldr	r3, [sp, #4]
   22b6a:	2b00      	cmp	r3, #0
   22b6c:	d107      	bne.n	22b7e <prvTestWaitCondition+0x22>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   22b6e:	9a03      	ldr	r2, [sp, #12]
   22b70:	9b02      	ldr	r3, [sp, #8]
   22b72:	4013      	ands	r3, r2
   22b74:	2b00      	cmp	r3, #0
   22b76:	d00a      	beq.n	22b8e <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
   22b78:	2301      	movs	r3, #1
   22b7a:	9305      	str	r3, [sp, #20]
   22b7c:	e007      	b.n	22b8e <prvTestWaitCondition+0x32>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   22b7e:	9a03      	ldr	r2, [sp, #12]
   22b80:	9b02      	ldr	r3, [sp, #8]
   22b82:	4013      	ands	r3, r2
   22b84:	9a02      	ldr	r2, [sp, #8]
   22b86:	429a      	cmp	r2, r3
   22b88:	d101      	bne.n	22b8e <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
   22b8a:	2301      	movs	r3, #1
   22b8c:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   22b8e:	9b05      	ldr	r3, [sp, #20]
}
   22b90:	4618      	mov	r0, r3
   22b92:	b006      	add	sp, #24
   22b94:	4770      	bx	lr

00022b96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   22b96:	b082      	sub	sp, #8
   22b98:	9001      	str	r0, [sp, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   22b9a:	9b01      	ldr	r3, [sp, #4]
   22b9c:	f103 0208 	add.w	r2, r3, #8
   22ba0:	9b01      	ldr	r3, [sp, #4]
   22ba2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   22ba4:	9b01      	ldr	r3, [sp, #4]
   22ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22baa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   22bac:	9b01      	ldr	r3, [sp, #4]
   22bae:	f103 0208 	add.w	r2, r3, #8
   22bb2:	9b01      	ldr	r3, [sp, #4]
   22bb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   22bb6:	9b01      	ldr	r3, [sp, #4]
   22bb8:	f103 0208 	add.w	r2, r3, #8
   22bbc:	9b01      	ldr	r3, [sp, #4]
   22bbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   22bc0:	9b01      	ldr	r3, [sp, #4]
   22bc2:	2200      	movs	r2, #0
   22bc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   22bc6:	bf00      	nop
   22bc8:	b002      	add	sp, #8
   22bca:	4770      	bx	lr

00022bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   22bcc:	b082      	sub	sp, #8
   22bce:	9001      	str	r0, [sp, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   22bd0:	9b01      	ldr	r3, [sp, #4]
   22bd2:	2200      	movs	r2, #0
   22bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   22bd6:	bf00      	nop
   22bd8:	b002      	add	sp, #8
   22bda:	4770      	bx	lr

00022bdc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   22bdc:	b084      	sub	sp, #16
   22bde:	9001      	str	r0, [sp, #4]
   22be0:	9100      	str	r1, [sp, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   22be2:	9b01      	ldr	r3, [sp, #4]
   22be4:	685b      	ldr	r3, [r3, #4]
   22be6:	9303      	str	r3, [sp, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   22be8:	9b00      	ldr	r3, [sp, #0]
   22bea:	9a03      	ldr	r2, [sp, #12]
   22bec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   22bee:	9b03      	ldr	r3, [sp, #12]
   22bf0:	689a      	ldr	r2, [r3, #8]
   22bf2:	9b00      	ldr	r3, [sp, #0]
   22bf4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   22bf6:	9b03      	ldr	r3, [sp, #12]
   22bf8:	689b      	ldr	r3, [r3, #8]
   22bfa:	9a00      	ldr	r2, [sp, #0]
   22bfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   22bfe:	9b03      	ldr	r3, [sp, #12]
   22c00:	9a00      	ldr	r2, [sp, #0]
   22c02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   22c04:	9b00      	ldr	r3, [sp, #0]
   22c06:	9a01      	ldr	r2, [sp, #4]
   22c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   22c0a:	9b01      	ldr	r3, [sp, #4]
   22c0c:	681b      	ldr	r3, [r3, #0]
   22c0e:	1c5a      	adds	r2, r3, #1
   22c10:	9b01      	ldr	r3, [sp, #4]
   22c12:	601a      	str	r2, [r3, #0]
}
   22c14:	bf00      	nop
   22c16:	b004      	add	sp, #16
   22c18:	4770      	bx	lr

00022c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   22c1a:	b084      	sub	sp, #16
   22c1c:	9001      	str	r0, [sp, #4]
   22c1e:	9100      	str	r1, [sp, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   22c20:	9b00      	ldr	r3, [sp, #0]
   22c22:	681b      	ldr	r3, [r3, #0]
   22c24:	9302      	str	r3, [sp, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   22c26:	9b02      	ldr	r3, [sp, #8]
   22c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22c2c:	d103      	bne.n	22c36 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   22c2e:	9b01      	ldr	r3, [sp, #4]
   22c30:	691b      	ldr	r3, [r3, #16]
   22c32:	9303      	str	r3, [sp, #12]
   22c34:	e00c      	b.n	22c50 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   22c36:	9b01      	ldr	r3, [sp, #4]
   22c38:	3308      	adds	r3, #8
   22c3a:	9303      	str	r3, [sp, #12]
   22c3c:	e002      	b.n	22c44 <vListInsert+0x2a>
   22c3e:	9b03      	ldr	r3, [sp, #12]
   22c40:	685b      	ldr	r3, [r3, #4]
   22c42:	9303      	str	r3, [sp, #12]
   22c44:	9b03      	ldr	r3, [sp, #12]
   22c46:	685b      	ldr	r3, [r3, #4]
   22c48:	681b      	ldr	r3, [r3, #0]
   22c4a:	9a02      	ldr	r2, [sp, #8]
   22c4c:	429a      	cmp	r2, r3
   22c4e:	d2f6      	bcs.n	22c3e <vListInsert+0x24>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   22c50:	9b03      	ldr	r3, [sp, #12]
   22c52:	685a      	ldr	r2, [r3, #4]
   22c54:	9b00      	ldr	r3, [sp, #0]
   22c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   22c58:	9b00      	ldr	r3, [sp, #0]
   22c5a:	685b      	ldr	r3, [r3, #4]
   22c5c:	9a00      	ldr	r2, [sp, #0]
   22c5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   22c60:	9b00      	ldr	r3, [sp, #0]
   22c62:	9a03      	ldr	r2, [sp, #12]
   22c64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   22c66:	9b03      	ldr	r3, [sp, #12]
   22c68:	9a00      	ldr	r2, [sp, #0]
   22c6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   22c6c:	9b00      	ldr	r3, [sp, #0]
   22c6e:	9a01      	ldr	r2, [sp, #4]
   22c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   22c72:	9b01      	ldr	r3, [sp, #4]
   22c74:	681b      	ldr	r3, [r3, #0]
   22c76:	1c5a      	adds	r2, r3, #1
   22c78:	9b01      	ldr	r3, [sp, #4]
   22c7a:	601a      	str	r2, [r3, #0]
}
   22c7c:	bf00      	nop
   22c7e:	b004      	add	sp, #16
   22c80:	4770      	bx	lr

00022c82 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   22c82:	b084      	sub	sp, #16
   22c84:	9001      	str	r0, [sp, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   22c86:	9b01      	ldr	r3, [sp, #4]
   22c88:	691b      	ldr	r3, [r3, #16]
   22c8a:	9303      	str	r3, [sp, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   22c8c:	9b01      	ldr	r3, [sp, #4]
   22c8e:	685b      	ldr	r3, [r3, #4]
   22c90:	9a01      	ldr	r2, [sp, #4]
   22c92:	6892      	ldr	r2, [r2, #8]
   22c94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   22c96:	9b01      	ldr	r3, [sp, #4]
   22c98:	689b      	ldr	r3, [r3, #8]
   22c9a:	9a01      	ldr	r2, [sp, #4]
   22c9c:	6852      	ldr	r2, [r2, #4]
   22c9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   22ca0:	9b03      	ldr	r3, [sp, #12]
   22ca2:	685b      	ldr	r3, [r3, #4]
   22ca4:	9a01      	ldr	r2, [sp, #4]
   22ca6:	429a      	cmp	r2, r3
   22ca8:	d103      	bne.n	22cb2 <uxListRemove+0x30>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   22caa:	9b01      	ldr	r3, [sp, #4]
   22cac:	689a      	ldr	r2, [r3, #8]
   22cae:	9b03      	ldr	r3, [sp, #12]
   22cb0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   22cb2:	9b01      	ldr	r3, [sp, #4]
   22cb4:	2200      	movs	r2, #0
   22cb6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   22cb8:	9b03      	ldr	r3, [sp, #12]
   22cba:	681b      	ldr	r3, [r3, #0]
   22cbc:	1e5a      	subs	r2, r3, #1
   22cbe:	9b03      	ldr	r3, [sp, #12]
   22cc0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   22cc2:	9b03      	ldr	r3, [sp, #12]
   22cc4:	681b      	ldr	r3, [r3, #0]
}
   22cc6:	4618      	mov	r0, r3
   22cc8:	b004      	add	sp, #16
   22cca:	4770      	bx	lr

00022ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   22ccc:	b500      	push	{lr}
   22cce:	b085      	sub	sp, #20
   22cd0:	9001      	str	r0, [sp, #4]
   22cd2:	9100      	str	r1, [sp, #0]
Queue_t * const pxQueue = xQueue;
   22cd4:	9b01      	ldr	r3, [sp, #4]
   22cd6:	9303      	str	r3, [sp, #12]

	configASSERT( pxQueue );
   22cd8:	9b03      	ldr	r3, [sp, #12]
   22cda:	2b00      	cmp	r3, #0
   22cdc:	d100      	bne.n	22ce0 <xQueueGenericReset+0x14>
   22cde:	e7fe      	b.n	22cde <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   22ce0:	f7f6 fb66 	bl	193b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   22ce4:	9b03      	ldr	r3, [sp, #12]
   22ce6:	681a      	ldr	r2, [r3, #0]
   22ce8:	9b03      	ldr	r3, [sp, #12]
   22cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22cec:	9903      	ldr	r1, [sp, #12]
   22cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
   22cf0:	fb01 f303 	mul.w	r3, r1, r3
   22cf4:	441a      	add	r2, r3
   22cf6:	9b03      	ldr	r3, [sp, #12]
   22cf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   22cfa:	9b03      	ldr	r3, [sp, #12]
   22cfc:	2200      	movs	r2, #0
   22cfe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   22d00:	9b03      	ldr	r3, [sp, #12]
   22d02:	681a      	ldr	r2, [r3, #0]
   22d04:	9b03      	ldr	r3, [sp, #12]
   22d06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   22d08:	9b03      	ldr	r3, [sp, #12]
   22d0a:	681a      	ldr	r2, [r3, #0]
   22d0c:	9b03      	ldr	r3, [sp, #12]
   22d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22d10:	3b01      	subs	r3, #1
   22d12:	9903      	ldr	r1, [sp, #12]
   22d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
   22d16:	fb01 f303 	mul.w	r3, r1, r3
   22d1a:	441a      	add	r2, r3
   22d1c:	9b03      	ldr	r3, [sp, #12]
   22d1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   22d20:	9b03      	ldr	r3, [sp, #12]
   22d22:	22ff      	movs	r2, #255	; 0xff
   22d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   22d28:	9b03      	ldr	r3, [sp, #12]
   22d2a:	22ff      	movs	r2, #255	; 0xff
   22d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   22d30:	9b00      	ldr	r3, [sp, #0]
   22d32:	2b00      	cmp	r3, #0
   22d34:	d114      	bne.n	22d60 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   22d36:	9b03      	ldr	r3, [sp, #12]
   22d38:	691b      	ldr	r3, [r3, #16]
   22d3a:	2b00      	cmp	r3, #0
   22d3c:	d01a      	beq.n	22d74 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   22d3e:	9b03      	ldr	r3, [sp, #12]
   22d40:	3310      	adds	r3, #16
   22d42:	4618      	mov	r0, r3
   22d44:	f000 fff2 	bl	23d2c <xTaskRemoveFromEventList>
   22d48:	4603      	mov	r3, r0
   22d4a:	2b00      	cmp	r3, #0
   22d4c:	d012      	beq.n	22d74 <xQueueGenericReset+0xa8>
				{
					queueYIELD_IF_USING_PREEMPTION();
   22d4e:	4b0d      	ldr	r3, [pc, #52]	; (22d84 <xQueueGenericReset+0xb8>)
   22d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22d54:	601a      	str	r2, [r3, #0]
   22d56:	f3bf 8f4f 	dsb	sy
   22d5a:	f3bf 8f6f 	isb	sy
   22d5e:	e009      	b.n	22d74 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   22d60:	9b03      	ldr	r3, [sp, #12]
   22d62:	3310      	adds	r3, #16
   22d64:	4618      	mov	r0, r3
   22d66:	f7ff ff16 	bl	22b96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   22d6a:	9b03      	ldr	r3, [sp, #12]
   22d6c:	3324      	adds	r3, #36	; 0x24
   22d6e:	4618      	mov	r0, r3
   22d70:	f7ff ff11 	bl	22b96 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   22d74:	f7f6 fb3e 	bl	193f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   22d78:	2301      	movs	r3, #1
}
   22d7a:	4618      	mov	r0, r3
   22d7c:	b005      	add	sp, #20
   22d7e:	f85d fb04 	ldr.w	pc, [sp], #4
   22d82:	bf00      	nop
   22d84:	e000ed04 	.word	0xe000ed04

00022d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   22d88:	b500      	push	{lr}
   22d8a:	b08b      	sub	sp, #44	; 0x2c
   22d8c:	9005      	str	r0, [sp, #20]
   22d8e:	9104      	str	r1, [sp, #16]
   22d90:	4613      	mov	r3, r2
   22d92:	f88d 300f 	strb.w	r3, [sp, #15]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   22d96:	9b05      	ldr	r3, [sp, #20]
   22d98:	2b00      	cmp	r3, #0
   22d9a:	d100      	bne.n	22d9e <xQueueGenericCreate+0x16>
   22d9c:	e7fe      	b.n	22d9c <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   22d9e:	9b04      	ldr	r3, [sp, #16]
   22da0:	2b00      	cmp	r3, #0
   22da2:	d102      	bne.n	22daa <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   22da4:	2300      	movs	r3, #0
   22da6:	9309      	str	r3, [sp, #36]	; 0x24
   22da8:	e004      	b.n	22db4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22daa:	9b05      	ldr	r3, [sp, #20]
   22dac:	9a04      	ldr	r2, [sp, #16]
   22dae:	fb02 f303 	mul.w	r3, r2, r3
   22db2:	9309      	str	r3, [sp, #36]	; 0x24
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   22db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22db6:	3348      	adds	r3, #72	; 0x48
   22db8:	4618      	mov	r0, r3
   22dba:	f001 fced 	bl	24798 <pvPortMalloc>
   22dbe:	9008      	str	r0, [sp, #32]

		if( pxNewQueue != NULL )
   22dc0:	9b08      	ldr	r3, [sp, #32]
   22dc2:	2b00      	cmp	r3, #0
   22dc4:	d00e      	beq.n	22de4 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   22dc6:	9b08      	ldr	r3, [sp, #32]
   22dc8:	9307      	str	r3, [sp, #28]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   22dca:	9b07      	ldr	r3, [sp, #28]
   22dcc:	3348      	adds	r3, #72	; 0x48
   22dce:	9307      	str	r3, [sp, #28]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   22dd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   22dd4:	9b08      	ldr	r3, [sp, #32]
   22dd6:	9300      	str	r3, [sp, #0]
   22dd8:	4613      	mov	r3, r2
   22dda:	9a07      	ldr	r2, [sp, #28]
   22ddc:	9904      	ldr	r1, [sp, #16]
   22dde:	9805      	ldr	r0, [sp, #20]
   22de0:	f000 f805 	bl	22dee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   22de4:	9b08      	ldr	r3, [sp, #32]
	}
   22de6:	4618      	mov	r0, r3
   22de8:	b00b      	add	sp, #44	; 0x2c
   22dea:	f85d fb04 	ldr.w	pc, [sp], #4

00022dee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   22dee:	b500      	push	{lr}
   22df0:	b085      	sub	sp, #20
   22df2:	9003      	str	r0, [sp, #12]
   22df4:	9102      	str	r1, [sp, #8]
   22df6:	9201      	str	r2, [sp, #4]
   22df8:	f88d 3003 	strb.w	r3, [sp, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   22dfc:	9b02      	ldr	r3, [sp, #8]
   22dfe:	2b00      	cmp	r3, #0
   22e00:	d103      	bne.n	22e0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   22e02:	9b06      	ldr	r3, [sp, #24]
   22e04:	9a06      	ldr	r2, [sp, #24]
   22e06:	601a      	str	r2, [r3, #0]
   22e08:	e002      	b.n	22e10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   22e0a:	9b06      	ldr	r3, [sp, #24]
   22e0c:	9a01      	ldr	r2, [sp, #4]
   22e0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   22e10:	9b06      	ldr	r3, [sp, #24]
   22e12:	9a03      	ldr	r2, [sp, #12]
   22e14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   22e16:	9b06      	ldr	r3, [sp, #24]
   22e18:	9a02      	ldr	r2, [sp, #8]
   22e1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   22e1c:	2101      	movs	r1, #1
   22e1e:	9806      	ldr	r0, [sp, #24]
   22e20:	f7ff ff54 	bl	22ccc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   22e24:	bf00      	nop
   22e26:	b005      	add	sp, #20
   22e28:	f85d fb04 	ldr.w	pc, [sp], #4

00022e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   22e2c:	b500      	push	{lr}
   22e2e:	b08b      	sub	sp, #44	; 0x2c
   22e30:	9003      	str	r0, [sp, #12]
   22e32:	9102      	str	r1, [sp, #8]
   22e34:	9201      	str	r2, [sp, #4]
   22e36:	9300      	str	r3, [sp, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   22e38:	2300      	movs	r3, #0
   22e3a:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   22e3c:	9b03      	ldr	r3, [sp, #12]
   22e3e:	9308      	str	r3, [sp, #32]

	configASSERT( pxQueue );
   22e40:	9b08      	ldr	r3, [sp, #32]
   22e42:	2b00      	cmp	r3, #0
   22e44:	d100      	bne.n	22e48 <xQueueGenericSend+0x1c>
   22e46:	e7fe      	b.n	22e46 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   22e48:	9b02      	ldr	r3, [sp, #8]
   22e4a:	2b00      	cmp	r3, #0
   22e4c:	d103      	bne.n	22e56 <xQueueGenericSend+0x2a>
   22e4e:	9b08      	ldr	r3, [sp, #32]
   22e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22e52:	2b00      	cmp	r3, #0
   22e54:	d101      	bne.n	22e5a <xQueueGenericSend+0x2e>
   22e56:	2301      	movs	r3, #1
   22e58:	e000      	b.n	22e5c <xQueueGenericSend+0x30>
   22e5a:	2300      	movs	r3, #0
   22e5c:	2b00      	cmp	r3, #0
   22e5e:	d100      	bne.n	22e62 <xQueueGenericSend+0x36>
   22e60:	e7fe      	b.n	22e60 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   22e62:	9b00      	ldr	r3, [sp, #0]
   22e64:	2b02      	cmp	r3, #2
   22e66:	d103      	bne.n	22e70 <xQueueGenericSend+0x44>
   22e68:	9b08      	ldr	r3, [sp, #32]
   22e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22e6c:	2b01      	cmp	r3, #1
   22e6e:	d101      	bne.n	22e74 <xQueueGenericSend+0x48>
   22e70:	2301      	movs	r3, #1
   22e72:	e000      	b.n	22e76 <xQueueGenericSend+0x4a>
   22e74:	2300      	movs	r3, #0
   22e76:	2b00      	cmp	r3, #0
   22e78:	d100      	bne.n	22e7c <xQueueGenericSend+0x50>
   22e7a:	e7fe      	b.n	22e7a <xQueueGenericSend+0x4e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   22e7c:	f001 f920 	bl	240c0 <xTaskGetSchedulerState>
   22e80:	4603      	mov	r3, r0
   22e82:	2b00      	cmp	r3, #0
   22e84:	d102      	bne.n	22e8c <xQueueGenericSend+0x60>
   22e86:	9b01      	ldr	r3, [sp, #4]
   22e88:	2b00      	cmp	r3, #0
   22e8a:	d101      	bne.n	22e90 <xQueueGenericSend+0x64>
   22e8c:	2301      	movs	r3, #1
   22e8e:	e000      	b.n	22e92 <xQueueGenericSend+0x66>
   22e90:	2300      	movs	r3, #0
   22e92:	2b00      	cmp	r3, #0
   22e94:	d100      	bne.n	22e98 <xQueueGenericSend+0x6c>
   22e96:	e7fe      	b.n	22e96 <xQueueGenericSend+0x6a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   22e98:	f7f6 fa8a 	bl	193b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   22e9c:	9b08      	ldr	r3, [sp, #32]
   22e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22ea0:	9b08      	ldr	r3, [sp, #32]
   22ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22ea4:	429a      	cmp	r2, r3
   22ea6:	d302      	bcc.n	22eae <xQueueGenericSend+0x82>
   22ea8:	9b00      	ldr	r3, [sp, #0]
   22eaa:	2b02      	cmp	r3, #2
   22eac:	d129      	bne.n	22f02 <xQueueGenericSend+0xd6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   22eae:	9a00      	ldr	r2, [sp, #0]
   22eb0:	9902      	ldr	r1, [sp, #8]
   22eb2:	9808      	ldr	r0, [sp, #32]
   22eb4:	f000 f9c6 	bl	23244 <prvCopyDataToQueue>
   22eb8:	9007      	str	r0, [sp, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   22eba:	9b08      	ldr	r3, [sp, #32]
   22ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22ebe:	2b00      	cmp	r3, #0
   22ec0:	d010      	beq.n	22ee4 <xQueueGenericSend+0xb8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   22ec2:	9b08      	ldr	r3, [sp, #32]
   22ec4:	3324      	adds	r3, #36	; 0x24
   22ec6:	4618      	mov	r0, r3
   22ec8:	f000 ff30 	bl	23d2c <xTaskRemoveFromEventList>
   22ecc:	4603      	mov	r3, r0
   22ece:	2b00      	cmp	r3, #0
   22ed0:	d013      	beq.n	22efa <xQueueGenericSend+0xce>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   22ed2:	4b3f      	ldr	r3, [pc, #252]	; (22fd0 <xQueueGenericSend+0x1a4>)
   22ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22ed8:	601a      	str	r2, [r3, #0]
   22eda:	f3bf 8f4f 	dsb	sy
   22ede:	f3bf 8f6f 	isb	sy
   22ee2:	e00a      	b.n	22efa <xQueueGenericSend+0xce>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   22ee4:	9b07      	ldr	r3, [sp, #28]
   22ee6:	2b00      	cmp	r3, #0
   22ee8:	d007      	beq.n	22efa <xQueueGenericSend+0xce>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   22eea:	4b39      	ldr	r3, [pc, #228]	; (22fd0 <xQueueGenericSend+0x1a4>)
   22eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22ef0:	601a      	str	r2, [r3, #0]
   22ef2:	f3bf 8f4f 	dsb	sy
   22ef6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   22efa:	f7f6 fa7b 	bl	193f4 <vPortExitCritical>
				return pdPASS;
   22efe:	2301      	movs	r3, #1
   22f00:	e061      	b.n	22fc6 <xQueueGenericSend+0x19a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   22f02:	9b01      	ldr	r3, [sp, #4]
   22f04:	2b00      	cmp	r3, #0
   22f06:	d103      	bne.n	22f10 <xQueueGenericSend+0xe4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   22f08:	f7f6 fa74 	bl	193f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   22f0c:	2300      	movs	r3, #0
   22f0e:	e05a      	b.n	22fc6 <xQueueGenericSend+0x19a>
				}
				else if( xEntryTimeSet == pdFALSE )
   22f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22f12:	2b00      	cmp	r3, #0
   22f14:	d105      	bne.n	22f22 <xQueueGenericSend+0xf6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   22f16:	ab05      	add	r3, sp, #20
   22f18:	4618      	mov	r0, r3
   22f1a:	f000 ffaf 	bl	23e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   22f1e:	2301      	movs	r3, #1
   22f20:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   22f22:	f7f6 fa67 	bl	193f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   22f26:	f000 fc99 	bl	2385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   22f2a:	f7f6 fa41 	bl	193b0 <vPortEnterCritical>
   22f2e:	9b08      	ldr	r3, [sp, #32]
   22f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   22f34:	b25b      	sxtb	r3, r3
   22f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22f3a:	d103      	bne.n	22f44 <xQueueGenericSend+0x118>
   22f3c:	9b08      	ldr	r3, [sp, #32]
   22f3e:	2200      	movs	r2, #0
   22f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   22f44:	9b08      	ldr	r3, [sp, #32]
   22f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   22f4a:	b25b      	sxtb	r3, r3
   22f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22f50:	d103      	bne.n	22f5a <xQueueGenericSend+0x12e>
   22f52:	9b08      	ldr	r3, [sp, #32]
   22f54:	2200      	movs	r2, #0
   22f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   22f5a:	f7f6 fa4b 	bl	193f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   22f5e:	aa01      	add	r2, sp, #4
   22f60:	ab05      	add	r3, sp, #20
   22f62:	4611      	mov	r1, r2
   22f64:	4618      	mov	r0, r3
   22f66:	f000 ff9b 	bl	23ea0 <xTaskCheckForTimeOut>
   22f6a:	4603      	mov	r3, r0
   22f6c:	2b00      	cmp	r3, #0
   22f6e:	d124      	bne.n	22fba <xQueueGenericSend+0x18e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   22f70:	9808      	ldr	r0, [sp, #32]
   22f72:	f000 fa53 	bl	2341c <prvIsQueueFull>
   22f76:	4603      	mov	r3, r0
   22f78:	2b00      	cmp	r3, #0
   22f7a:	d018      	beq.n	22fae <xQueueGenericSend+0x182>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   22f7c:	9b08      	ldr	r3, [sp, #32]
   22f7e:	3310      	adds	r3, #16
   22f80:	9a01      	ldr	r2, [sp, #4]
   22f82:	4611      	mov	r1, r2
   22f84:	4618      	mov	r0, r3
   22f86:	f000 fe6f 	bl	23c68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   22f8a:	9808      	ldr	r0, [sp, #32]
   22f8c:	f000 f9da 	bl	23344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   22f90:	f000 fca0 	bl	238d4 <xTaskResumeAll>
   22f94:	4603      	mov	r3, r0
   22f96:	2b00      	cmp	r3, #0
   22f98:	f47f af7e 	bne.w	22e98 <xQueueGenericSend+0x6c>
				{
					portYIELD_WITHIN_API();
   22f9c:	4b0c      	ldr	r3, [pc, #48]	; (22fd0 <xQueueGenericSend+0x1a4>)
   22f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22fa2:	601a      	str	r2, [r3, #0]
   22fa4:	f3bf 8f4f 	dsb	sy
   22fa8:	f3bf 8f6f 	isb	sy
   22fac:	e774      	b.n	22e98 <xQueueGenericSend+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   22fae:	9808      	ldr	r0, [sp, #32]
   22fb0:	f000 f9c8 	bl	23344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   22fb4:	f000 fc8e 	bl	238d4 <xTaskResumeAll>
   22fb8:	e76e      	b.n	22e98 <xQueueGenericSend+0x6c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   22fba:	9808      	ldr	r0, [sp, #32]
   22fbc:	f000 f9c2 	bl	23344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   22fc0:	f000 fc88 	bl	238d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   22fc4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   22fc6:	4618      	mov	r0, r3
   22fc8:	b00b      	add	sp, #44	; 0x2c
   22fca:	f85d fb04 	ldr.w	pc, [sp], #4
   22fce:	bf00      	nop
   22fd0:	e000ed04 	.word	0xe000ed04

00022fd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   22fd4:	b500      	push	{lr}
   22fd6:	b08d      	sub	sp, #52	; 0x34
   22fd8:	9003      	str	r0, [sp, #12]
   22fda:	9102      	str	r1, [sp, #8]
   22fdc:	9201      	str	r2, [sp, #4]
   22fde:	9300      	str	r3, [sp, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   22fe0:	9b03      	ldr	r3, [sp, #12]
   22fe2:	930a      	str	r3, [sp, #40]	; 0x28

	configASSERT( pxQueue );
   22fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22fe6:	2b00      	cmp	r3, #0
   22fe8:	d100      	bne.n	22fec <xQueueGenericSendFromISR+0x18>
   22fea:	e7fe      	b.n	22fea <xQueueGenericSendFromISR+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   22fec:	9b02      	ldr	r3, [sp, #8]
   22fee:	2b00      	cmp	r3, #0
   22ff0:	d103      	bne.n	22ffa <xQueueGenericSendFromISR+0x26>
   22ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22ff6:	2b00      	cmp	r3, #0
   22ff8:	d101      	bne.n	22ffe <xQueueGenericSendFromISR+0x2a>
   22ffa:	2301      	movs	r3, #1
   22ffc:	e000      	b.n	23000 <xQueueGenericSendFromISR+0x2c>
   22ffe:	2300      	movs	r3, #0
   23000:	2b00      	cmp	r3, #0
   23002:	d100      	bne.n	23006 <xQueueGenericSendFromISR+0x32>
   23004:	e7fe      	b.n	23004 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   23006:	9b00      	ldr	r3, [sp, #0]
   23008:	2b02      	cmp	r3, #2
   2300a:	d103      	bne.n	23014 <xQueueGenericSendFromISR+0x40>
   2300c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   23010:	2b01      	cmp	r3, #1
   23012:	d101      	bne.n	23018 <xQueueGenericSendFromISR+0x44>
   23014:	2301      	movs	r3, #1
   23016:	e000      	b.n	2301a <xQueueGenericSendFromISR+0x46>
   23018:	2300      	movs	r3, #0
   2301a:	2b00      	cmp	r3, #0
   2301c:	d100      	bne.n	23020 <xQueueGenericSendFromISR+0x4c>
   2301e:	e7fe      	b.n	2301e <xQueueGenericSendFromISR+0x4a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   23020:	f7f6 fa66 	bl	194f0 <vPortValidateInterruptPriority>
	__asm volatile
   23024:	f3ef 8211 	mrs	r2, BASEPRI
   23028:	f04f 0380 	mov.w	r3, #128	; 0x80
   2302c:	f383 8811 	msr	BASEPRI, r3
   23030:	f3bf 8f6f 	isb	sy
   23034:	f3bf 8f4f 	dsb	sy
   23038:	9207      	str	r2, [sp, #28]
   2303a:	9306      	str	r3, [sp, #24]
	return ulOriginalBASEPRI;
   2303c:	9b07      	ldr	r3, [sp, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2303e:	9309      	str	r3, [sp, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   23040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   23048:	429a      	cmp	r2, r3
   2304a:	d302      	bcc.n	23052 <xQueueGenericSendFromISR+0x7e>
   2304c:	9b00      	ldr	r3, [sp, #0]
   2304e:	2b02      	cmp	r3, #2
   23050:	d12c      	bne.n	230ac <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   23052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   23058:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   2305c:	9a00      	ldr	r2, [sp, #0]
   2305e:	9902      	ldr	r1, [sp, #8]
   23060:	980a      	ldr	r0, [sp, #40]	; 0x28
   23062:	f000 f8ef 	bl	23244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   23066:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
   2306a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2306e:	d112      	bne.n	23096 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   23070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23074:	2b00      	cmp	r3, #0
   23076:	d016      	beq.n	230a6 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   23078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2307a:	3324      	adds	r3, #36	; 0x24
   2307c:	4618      	mov	r0, r3
   2307e:	f000 fe55 	bl	23d2c <xTaskRemoveFromEventList>
   23082:	4603      	mov	r3, r0
   23084:	2b00      	cmp	r3, #0
   23086:	d00e      	beq.n	230a6 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   23088:	9b01      	ldr	r3, [sp, #4]
   2308a:	2b00      	cmp	r3, #0
   2308c:	d00b      	beq.n	230a6 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   2308e:	9b01      	ldr	r3, [sp, #4]
   23090:	2201      	movs	r2, #1
   23092:	601a      	str	r2, [r3, #0]
   23094:	e007      	b.n	230a6 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   23096:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2309a:	3301      	adds	r3, #1
   2309c:	b2db      	uxtb	r3, r3
   2309e:	b25a      	sxtb	r2, r3
   230a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   230a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   230a6:	2301      	movs	r3, #1
   230a8:	930b      	str	r3, [sp, #44]	; 0x2c
		{
   230aa:	e001      	b.n	230b0 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   230ac:	2300      	movs	r3, #0
   230ae:	930b      	str	r3, [sp, #44]	; 0x2c
   230b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   230b2:	9305      	str	r3, [sp, #20]
	__asm volatile
   230b4:	9b05      	ldr	r3, [sp, #20]
   230b6:	f383 8811 	msr	BASEPRI, r3
}
   230ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   230bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
   230be:	4618      	mov	r0, r3
   230c0:	b00d      	add	sp, #52	; 0x34
   230c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000230c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   230c8:	b500      	push	{lr}
   230ca:	b08b      	sub	sp, #44	; 0x2c
   230cc:	9003      	str	r0, [sp, #12]
   230ce:	9102      	str	r1, [sp, #8]
   230d0:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   230d2:	2300      	movs	r3, #0
   230d4:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   230d6:	9b03      	ldr	r3, [sp, #12]
   230d8:	9308      	str	r3, [sp, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   230da:	9b08      	ldr	r3, [sp, #32]
   230dc:	2b00      	cmp	r3, #0
   230de:	d100      	bne.n	230e2 <xQueueReceive+0x1a>
   230e0:	e7fe      	b.n	230e0 <xQueueReceive+0x18>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   230e2:	9b02      	ldr	r3, [sp, #8]
   230e4:	2b00      	cmp	r3, #0
   230e6:	d103      	bne.n	230f0 <xQueueReceive+0x28>
   230e8:	9b08      	ldr	r3, [sp, #32]
   230ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   230ec:	2b00      	cmp	r3, #0
   230ee:	d101      	bne.n	230f4 <xQueueReceive+0x2c>
   230f0:	2301      	movs	r3, #1
   230f2:	e000      	b.n	230f6 <xQueueReceive+0x2e>
   230f4:	2300      	movs	r3, #0
   230f6:	2b00      	cmp	r3, #0
   230f8:	d100      	bne.n	230fc <xQueueReceive+0x34>
   230fa:	e7fe      	b.n	230fa <xQueueReceive+0x32>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   230fc:	f000 ffe0 	bl	240c0 <xTaskGetSchedulerState>
   23100:	4603      	mov	r3, r0
   23102:	2b00      	cmp	r3, #0
   23104:	d102      	bne.n	2310c <xQueueReceive+0x44>
   23106:	9b01      	ldr	r3, [sp, #4]
   23108:	2b00      	cmp	r3, #0
   2310a:	d101      	bne.n	23110 <xQueueReceive+0x48>
   2310c:	2301      	movs	r3, #1
   2310e:	e000      	b.n	23112 <xQueueReceive+0x4a>
   23110:	2300      	movs	r3, #0
   23112:	2b00      	cmp	r3, #0
   23114:	d100      	bne.n	23118 <xQueueReceive+0x50>
   23116:	e7fe      	b.n	23116 <xQueueReceive+0x4e>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   23118:	f7f6 f94a 	bl	193b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   2311c:	9b08      	ldr	r3, [sp, #32]
   2311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   23120:	9307      	str	r3, [sp, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   23122:	9b07      	ldr	r3, [sp, #28]
   23124:	2b00      	cmp	r3, #0
   23126:	d01f      	beq.n	23168 <xQueueReceive+0xa0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   23128:	9902      	ldr	r1, [sp, #8]
   2312a:	9808      	ldr	r0, [sp, #32]
   2312c:	f000 f8e5 	bl	232fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   23130:	9b07      	ldr	r3, [sp, #28]
   23132:	1e5a      	subs	r2, r3, #1
   23134:	9b08      	ldr	r3, [sp, #32]
   23136:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   23138:	9b08      	ldr	r3, [sp, #32]
   2313a:	691b      	ldr	r3, [r3, #16]
   2313c:	2b00      	cmp	r3, #0
   2313e:	d00f      	beq.n	23160 <xQueueReceive+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   23140:	9b08      	ldr	r3, [sp, #32]
   23142:	3310      	adds	r3, #16
   23144:	4618      	mov	r0, r3
   23146:	f000 fdf1 	bl	23d2c <xTaskRemoveFromEventList>
   2314a:	4603      	mov	r3, r0
   2314c:	2b00      	cmp	r3, #0
   2314e:	d007      	beq.n	23160 <xQueueReceive+0x98>
					{
						queueYIELD_IF_USING_PREEMPTION();
   23150:	4b3b      	ldr	r3, [pc, #236]	; (23240 <xQueueReceive+0x178>)
   23152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23156:	601a      	str	r2, [r3, #0]
   23158:	f3bf 8f4f 	dsb	sy
   2315c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   23160:	f7f6 f948 	bl	193f4 <vPortExitCritical>
				return pdPASS;
   23164:	2301      	movs	r3, #1
   23166:	e067      	b.n	23238 <xQueueReceive+0x170>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   23168:	9b01      	ldr	r3, [sp, #4]
   2316a:	2b00      	cmp	r3, #0
   2316c:	d103      	bne.n	23176 <xQueueReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   2316e:	f7f6 f941 	bl	193f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   23172:	2300      	movs	r3, #0
   23174:	e060      	b.n	23238 <xQueueReceive+0x170>
				}
				else if( xEntryTimeSet == pdFALSE )
   23176:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23178:	2b00      	cmp	r3, #0
   2317a:	d105      	bne.n	23188 <xQueueReceive+0xc0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   2317c:	ab05      	add	r3, sp, #20
   2317e:	4618      	mov	r0, r3
   23180:	f000 fe7c 	bl	23e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   23184:	2301      	movs	r3, #1
   23186:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   23188:	f7f6 f934 	bl	193f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   2318c:	f000 fb66 	bl	2385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   23190:	f7f6 f90e 	bl	193b0 <vPortEnterCritical>
   23194:	9b08      	ldr	r3, [sp, #32]
   23196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   2319a:	b25b      	sxtb	r3, r3
   2319c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   231a0:	d103      	bne.n	231aa <xQueueReceive+0xe2>
   231a2:	9b08      	ldr	r3, [sp, #32]
   231a4:	2200      	movs	r2, #0
   231a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   231aa:	9b08      	ldr	r3, [sp, #32]
   231ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   231b0:	b25b      	sxtb	r3, r3
   231b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   231b6:	d103      	bne.n	231c0 <xQueueReceive+0xf8>
   231b8:	9b08      	ldr	r3, [sp, #32]
   231ba:	2200      	movs	r2, #0
   231bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   231c0:	f7f6 f918 	bl	193f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   231c4:	aa01      	add	r2, sp, #4
   231c6:	ab05      	add	r3, sp, #20
   231c8:	4611      	mov	r1, r2
   231ca:	4618      	mov	r0, r3
   231cc:	f000 fe68 	bl	23ea0 <xTaskCheckForTimeOut>
   231d0:	4603      	mov	r3, r0
   231d2:	2b00      	cmp	r3, #0
   231d4:	d123      	bne.n	2321e <xQueueReceive+0x156>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   231d6:	9808      	ldr	r0, [sp, #32]
   231d8:	f000 f90b 	bl	233f2 <prvIsQueueEmpty>
   231dc:	4603      	mov	r3, r0
   231de:	2b00      	cmp	r3, #0
   231e0:	d017      	beq.n	23212 <xQueueReceive+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   231e2:	9b08      	ldr	r3, [sp, #32]
   231e4:	3324      	adds	r3, #36	; 0x24
   231e6:	9a01      	ldr	r2, [sp, #4]
   231e8:	4611      	mov	r1, r2
   231ea:	4618      	mov	r0, r3
   231ec:	f000 fd3c 	bl	23c68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   231f0:	9808      	ldr	r0, [sp, #32]
   231f2:	f000 f8a7 	bl	23344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   231f6:	f000 fb6d 	bl	238d4 <xTaskResumeAll>
   231fa:	4603      	mov	r3, r0
   231fc:	2b00      	cmp	r3, #0
   231fe:	d18b      	bne.n	23118 <xQueueReceive+0x50>
				{
					portYIELD_WITHIN_API();
   23200:	4b0f      	ldr	r3, [pc, #60]	; (23240 <xQueueReceive+0x178>)
   23202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23206:	601a      	str	r2, [r3, #0]
   23208:	f3bf 8f4f 	dsb	sy
   2320c:	f3bf 8f6f 	isb	sy
   23210:	e782      	b.n	23118 <xQueueReceive+0x50>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   23212:	9808      	ldr	r0, [sp, #32]
   23214:	f000 f896 	bl	23344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   23218:	f000 fb5c 	bl	238d4 <xTaskResumeAll>
   2321c:	e77c      	b.n	23118 <xQueueReceive+0x50>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   2321e:	9808      	ldr	r0, [sp, #32]
   23220:	f000 f890 	bl	23344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   23224:	f000 fb56 	bl	238d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   23228:	9808      	ldr	r0, [sp, #32]
   2322a:	f000 f8e2 	bl	233f2 <prvIsQueueEmpty>
   2322e:	4603      	mov	r3, r0
   23230:	2b00      	cmp	r3, #0
   23232:	f43f af71 	beq.w	23118 <xQueueReceive+0x50>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   23236:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   23238:	4618      	mov	r0, r3
   2323a:	b00b      	add	sp, #44	; 0x2c
   2323c:	f85d fb04 	ldr.w	pc, [sp], #4
   23240:	e000ed04 	.word	0xe000ed04

00023244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   23244:	b500      	push	{lr}
   23246:	b087      	sub	sp, #28
   23248:	9003      	str	r0, [sp, #12]
   2324a:	9102      	str	r1, [sp, #8]
   2324c:	9201      	str	r2, [sp, #4]
BaseType_t xReturn = pdFALSE;
   2324e:	2300      	movs	r3, #0
   23250:	9304      	str	r3, [sp, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   23252:	9b03      	ldr	r3, [sp, #12]
   23254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   23256:	9305      	str	r3, [sp, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   23258:	9b03      	ldr	r3, [sp, #12]
   2325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2325c:	2b00      	cmp	r3, #0
   2325e:	d043      	beq.n	232e8 <prvCopyDataToQueue+0xa4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   23260:	9b01      	ldr	r3, [sp, #4]
   23262:	2b00      	cmp	r3, #0
   23264:	d119      	bne.n	2329a <prvCopyDataToQueue+0x56>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   23266:	9b03      	ldr	r3, [sp, #12]
   23268:	6858      	ldr	r0, [r3, #4]
   2326a:	9b03      	ldr	r3, [sp, #12]
   2326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2326e:	461a      	mov	r2, r3
   23270:	9902      	ldr	r1, [sp, #8]
   23272:	f7e8 ff45 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   23276:	9b03      	ldr	r3, [sp, #12]
   23278:	685a      	ldr	r2, [r3, #4]
   2327a:	9b03      	ldr	r3, [sp, #12]
   2327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2327e:	441a      	add	r2, r3
   23280:	9b03      	ldr	r3, [sp, #12]
   23282:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   23284:	9b03      	ldr	r3, [sp, #12]
   23286:	685a      	ldr	r2, [r3, #4]
   23288:	9b03      	ldr	r3, [sp, #12]
   2328a:	689b      	ldr	r3, [r3, #8]
   2328c:	429a      	cmp	r2, r3
   2328e:	d32b      	bcc.n	232e8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   23290:	9b03      	ldr	r3, [sp, #12]
   23292:	681a      	ldr	r2, [r3, #0]
   23294:	9b03      	ldr	r3, [sp, #12]
   23296:	605a      	str	r2, [r3, #4]
   23298:	e026      	b.n	232e8 <prvCopyDataToQueue+0xa4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   2329a:	9b03      	ldr	r3, [sp, #12]
   2329c:	68d8      	ldr	r0, [r3, #12]
   2329e:	9b03      	ldr	r3, [sp, #12]
   232a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   232a2:	461a      	mov	r2, r3
   232a4:	9902      	ldr	r1, [sp, #8]
   232a6:	f7e8 ff2b 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   232aa:	9b03      	ldr	r3, [sp, #12]
   232ac:	68da      	ldr	r2, [r3, #12]
   232ae:	9b03      	ldr	r3, [sp, #12]
   232b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   232b2:	425b      	negs	r3, r3
   232b4:	441a      	add	r2, r3
   232b6:	9b03      	ldr	r3, [sp, #12]
   232b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   232ba:	9b03      	ldr	r3, [sp, #12]
   232bc:	68da      	ldr	r2, [r3, #12]
   232be:	9b03      	ldr	r3, [sp, #12]
   232c0:	681b      	ldr	r3, [r3, #0]
   232c2:	429a      	cmp	r2, r3
   232c4:	d207      	bcs.n	232d6 <prvCopyDataToQueue+0x92>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   232c6:	9b03      	ldr	r3, [sp, #12]
   232c8:	689a      	ldr	r2, [r3, #8]
   232ca:	9b03      	ldr	r3, [sp, #12]
   232cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   232ce:	425b      	negs	r3, r3
   232d0:	441a      	add	r2, r3
   232d2:	9b03      	ldr	r3, [sp, #12]
   232d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   232d6:	9b01      	ldr	r3, [sp, #4]
   232d8:	2b02      	cmp	r3, #2
   232da:	d105      	bne.n	232e8 <prvCopyDataToQueue+0xa4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   232dc:	9b05      	ldr	r3, [sp, #20]
   232de:	2b00      	cmp	r3, #0
   232e0:	d002      	beq.n	232e8 <prvCopyDataToQueue+0xa4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   232e2:	9b05      	ldr	r3, [sp, #20]
   232e4:	3b01      	subs	r3, #1
   232e6:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   232e8:	9b05      	ldr	r3, [sp, #20]
   232ea:	1c5a      	adds	r2, r3, #1
   232ec:	9b03      	ldr	r3, [sp, #12]
   232ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   232f0:	9b04      	ldr	r3, [sp, #16]
}
   232f2:	4618      	mov	r0, r3
   232f4:	b007      	add	sp, #28
   232f6:	f85d fb04 	ldr.w	pc, [sp], #4

000232fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   232fa:	b500      	push	{lr}
   232fc:	b083      	sub	sp, #12
   232fe:	9001      	str	r0, [sp, #4]
   23300:	9100      	str	r1, [sp, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   23302:	9b01      	ldr	r3, [sp, #4]
   23304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23306:	2b00      	cmp	r3, #0
   23308:	d018      	beq.n	2333c <prvCopyDataFromQueue+0x42>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   2330a:	9b01      	ldr	r3, [sp, #4]
   2330c:	68da      	ldr	r2, [r3, #12]
   2330e:	9b01      	ldr	r3, [sp, #4]
   23310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23312:	441a      	add	r2, r3
   23314:	9b01      	ldr	r3, [sp, #4]
   23316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   23318:	9b01      	ldr	r3, [sp, #4]
   2331a:	68da      	ldr	r2, [r3, #12]
   2331c:	9b01      	ldr	r3, [sp, #4]
   2331e:	689b      	ldr	r3, [r3, #8]
   23320:	429a      	cmp	r2, r3
   23322:	d303      	bcc.n	2332c <prvCopyDataFromQueue+0x32>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   23324:	9b01      	ldr	r3, [sp, #4]
   23326:	681a      	ldr	r2, [r3, #0]
   23328:	9b01      	ldr	r3, [sp, #4]
   2332a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   2332c:	9b01      	ldr	r3, [sp, #4]
   2332e:	68d9      	ldr	r1, [r3, #12]
   23330:	9b01      	ldr	r3, [sp, #4]
   23332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23334:	461a      	mov	r2, r3
   23336:	9800      	ldr	r0, [sp, #0]
   23338:	f7e8 fee2 	bl	c100 <memcpy>
	}
}
   2333c:	bf00      	nop
   2333e:	b003      	add	sp, #12
   23340:	f85d fb04 	ldr.w	pc, [sp], #4

00023344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   23344:	b500      	push	{lr}
   23346:	b085      	sub	sp, #20
   23348:	9001      	str	r0, [sp, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   2334a:	f7f6 f831 	bl	193b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   2334e:	9b01      	ldr	r3, [sp, #4]
   23350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   23354:	f88d 300f 	strb.w	r3, [sp, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   23358:	e013      	b.n	23382 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2335a:	9b01      	ldr	r3, [sp, #4]
   2335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2335e:	2b00      	cmp	r3, #0
   23360:	d014      	beq.n	2338c <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   23362:	9b01      	ldr	r3, [sp, #4]
   23364:	3324      	adds	r3, #36	; 0x24
   23366:	4618      	mov	r0, r3
   23368:	f000 fce0 	bl	23d2c <xTaskRemoveFromEventList>
   2336c:	4603      	mov	r3, r0
   2336e:	2b00      	cmp	r3, #0
   23370:	d001      	beq.n	23376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   23372:	f000 fde3 	bl	23f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   23376:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2337a:	3b01      	subs	r3, #1
   2337c:	b2db      	uxtb	r3, r3
   2337e:	f88d 300f 	strb.w	r3, [sp, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   23382:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   23386:	2b00      	cmp	r3, #0
   23388:	dce7      	bgt.n	2335a <prvUnlockQueue+0x16>
   2338a:	e000      	b.n	2338e <prvUnlockQueue+0x4a>
					break;
   2338c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   2338e:	9b01      	ldr	r3, [sp, #4]
   23390:	22ff      	movs	r2, #255	; 0xff
   23392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   23396:	f7f6 f82d 	bl	193f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   2339a:	f7f6 f809 	bl	193b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   2339e:	9b01      	ldr	r3, [sp, #4]
   233a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   233a4:	f88d 300e 	strb.w	r3, [sp, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   233a8:	e013      	b.n	233d2 <prvUnlockQueue+0x8e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   233aa:	9b01      	ldr	r3, [sp, #4]
   233ac:	691b      	ldr	r3, [r3, #16]
   233ae:	2b00      	cmp	r3, #0
   233b0:	d014      	beq.n	233dc <prvUnlockQueue+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   233b2:	9b01      	ldr	r3, [sp, #4]
   233b4:	3310      	adds	r3, #16
   233b6:	4618      	mov	r0, r3
   233b8:	f000 fcb8 	bl	23d2c <xTaskRemoveFromEventList>
   233bc:	4603      	mov	r3, r0
   233be:	2b00      	cmp	r3, #0
   233c0:	d001      	beq.n	233c6 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
   233c2:	f000 fdbb 	bl	23f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   233c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   233ca:	3b01      	subs	r3, #1
   233cc:	b2db      	uxtb	r3, r3
   233ce:	f88d 300e 	strb.w	r3, [sp, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   233d2:	f99d 300e 	ldrsb.w	r3, [sp, #14]
   233d6:	2b00      	cmp	r3, #0
   233d8:	dce7      	bgt.n	233aa <prvUnlockQueue+0x66>
   233da:	e000      	b.n	233de <prvUnlockQueue+0x9a>
			}
			else
			{
				break;
   233dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   233de:	9b01      	ldr	r3, [sp, #4]
   233e0:	22ff      	movs	r2, #255	; 0xff
   233e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   233e6:	f7f6 f805 	bl	193f4 <vPortExitCritical>
}
   233ea:	bf00      	nop
   233ec:	b005      	add	sp, #20
   233ee:	f85d fb04 	ldr.w	pc, [sp], #4

000233f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   233f2:	b500      	push	{lr}
   233f4:	b085      	sub	sp, #20
   233f6:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   233f8:	f7f5 ffda 	bl	193b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   233fc:	9b01      	ldr	r3, [sp, #4]
   233fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   23400:	2b00      	cmp	r3, #0
   23402:	d102      	bne.n	2340a <prvIsQueueEmpty+0x18>
		{
			xReturn = pdTRUE;
   23404:	2301      	movs	r3, #1
   23406:	9303      	str	r3, [sp, #12]
   23408:	e001      	b.n	2340e <prvIsQueueEmpty+0x1c>
		}
		else
		{
			xReturn = pdFALSE;
   2340a:	2300      	movs	r3, #0
   2340c:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
   2340e:	f7f5 fff1 	bl	193f4 <vPortExitCritical>

	return xReturn;
   23412:	9b03      	ldr	r3, [sp, #12]
}
   23414:	4618      	mov	r0, r3
   23416:	b005      	add	sp, #20
   23418:	f85d fb04 	ldr.w	pc, [sp], #4

0002341c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   2341c:	b500      	push	{lr}
   2341e:	b085      	sub	sp, #20
   23420:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   23422:	f7f5 ffc5 	bl	193b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   23426:	9b01      	ldr	r3, [sp, #4]
   23428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2342a:	9b01      	ldr	r3, [sp, #4]
   2342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2342e:	429a      	cmp	r2, r3
   23430:	d102      	bne.n	23438 <prvIsQueueFull+0x1c>
		{
			xReturn = pdTRUE;
   23432:	2301      	movs	r3, #1
   23434:	9303      	str	r3, [sp, #12]
   23436:	e001      	b.n	2343c <prvIsQueueFull+0x20>
		}
		else
		{
			xReturn = pdFALSE;
   23438:	2300      	movs	r3, #0
   2343a:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
   2343c:	f7f5 ffda 	bl	193f4 <vPortExitCritical>

	return xReturn;
   23440:	9b03      	ldr	r3, [sp, #12]
}
   23442:	4618      	mov	r0, r3
   23444:	b005      	add	sp, #20
   23446:	f85d fb04 	ldr.w	pc, [sp], #4

0002344a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   2344a:	b500      	push	{lr}
   2344c:	b087      	sub	sp, #28
   2344e:	9003      	str	r0, [sp, #12]
   23450:	9102      	str	r1, [sp, #8]
   23452:	9201      	str	r2, [sp, #4]
	Queue_t * const pxQueue = xQueue;
   23454:	9b03      	ldr	r3, [sp, #12]
   23456:	9305      	str	r3, [sp, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   23458:	f7f5 ffaa 	bl	193b0 <vPortEnterCritical>
   2345c:	9b05      	ldr	r3, [sp, #20]
   2345e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   23462:	b25b      	sxtb	r3, r3
   23464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23468:	d103      	bne.n	23472 <vQueueWaitForMessageRestricted+0x28>
   2346a:	9b05      	ldr	r3, [sp, #20]
   2346c:	2200      	movs	r2, #0
   2346e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   23472:	9b05      	ldr	r3, [sp, #20]
   23474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   23478:	b25b      	sxtb	r3, r3
   2347a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2347e:	d103      	bne.n	23488 <vQueueWaitForMessageRestricted+0x3e>
   23480:	9b05      	ldr	r3, [sp, #20]
   23482:	2200      	movs	r2, #0
   23484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   23488:	f7f5 ffb4 	bl	193f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   2348c:	9b05      	ldr	r3, [sp, #20]
   2348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   23490:	2b00      	cmp	r3, #0
   23492:	d106      	bne.n	234a2 <vQueueWaitForMessageRestricted+0x58>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   23494:	9b05      	ldr	r3, [sp, #20]
   23496:	3324      	adds	r3, #36	; 0x24
   23498:	9a01      	ldr	r2, [sp, #4]
   2349a:	9902      	ldr	r1, [sp, #8]
   2349c:	4618      	mov	r0, r3
   2349e:	f000 fc25 	bl	23cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   234a2:	9805      	ldr	r0, [sp, #20]
   234a4:	f7ff ff4e 	bl	23344 <prvUnlockQueue>
	}
   234a8:	bf00      	nop
   234aa:	b007      	add	sp, #28
   234ac:	f85d fb04 	ldr.w	pc, [sp], #4

000234b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   234b0:	b500      	push	{lr}
   234b2:	b08d      	sub	sp, #52	; 0x34
   234b4:	9007      	str	r0, [sp, #28]
   234b6:	9106      	str	r1, [sp, #24]
   234b8:	9304      	str	r3, [sp, #16]
   234ba:	4613      	mov	r3, r2
   234bc:	f8ad 3016 	strh.w	r3, [sp, #22]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   234c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   234c4:	009b      	lsls	r3, r3, #2
   234c6:	4618      	mov	r0, r3
   234c8:	f001 f966 	bl	24798 <pvPortMalloc>
   234cc:	9009      	str	r0, [sp, #36]	; 0x24

			if( pxStack != NULL )
   234ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   234d0:	2b00      	cmp	r3, #0
   234d2:	d00e      	beq.n	234f2 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   234d4:	204c      	movs	r0, #76	; 0x4c
   234d6:	f001 f95f 	bl	24798 <pvPortMalloc>
   234da:	900b      	str	r0, [sp, #44]	; 0x2c

				if( pxNewTCB != NULL )
   234dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   234de:	2b00      	cmp	r3, #0
   234e0:	d003      	beq.n	234ea <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   234e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   234e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   234e6:	631a      	str	r2, [r3, #48]	; 0x30
   234e8:	e005      	b.n	234f6 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   234ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   234ec:	f001 f9e6 	bl	248bc <vPortFree>
   234f0:	e001      	b.n	234f6 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
   234f2:	2300      	movs	r3, #0
   234f4:	930b      	str	r3, [sp, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   234f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   234f8:	2b00      	cmp	r3, #0
   234fa:	d014      	beq.n	23526 <xTaskCreate+0x76>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   234fc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23500:	2300      	movs	r3, #0
   23502:	9303      	str	r3, [sp, #12]
   23504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23506:	9302      	str	r3, [sp, #8]
   23508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2350a:	9301      	str	r3, [sp, #4]
   2350c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2350e:	9300      	str	r3, [sp, #0]
   23510:	9b04      	ldr	r3, [sp, #16]
   23512:	9906      	ldr	r1, [sp, #24]
   23514:	9807      	ldr	r0, [sp, #28]
   23516:	f000 f80e 	bl	23536 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   2351a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2351c:	f000 f886 	bl	2362c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   23520:	2301      	movs	r3, #1
   23522:	930a      	str	r3, [sp, #40]	; 0x28
   23524:	e002      	b.n	2352c <xTaskCreate+0x7c>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   23526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2352a:	930a      	str	r3, [sp, #40]	; 0x28
		}

		return xReturn;
   2352c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	}
   2352e:	4618      	mov	r0, r3
   23530:	b00d      	add	sp, #52	; 0x34
   23532:	f85d fb04 	ldr.w	pc, [sp], #4

00023536 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   23536:	b500      	push	{lr}
   23538:	b087      	sub	sp, #28
   2353a:	9003      	str	r0, [sp, #12]
   2353c:	9102      	str	r1, [sp, #8]
   2353e:	9201      	str	r2, [sp, #4]
   23540:	9300      	str	r3, [sp, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   23542:	9b02      	ldr	r3, [sp, #8]
   23544:	2b00      	cmp	r3, #0
   23546:	d100      	bne.n	2354a <prvInitialiseNewTask+0x14>
   23548:	e7fe      	b.n	23548 <prvInitialiseNewTask+0x12>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   2354a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2354c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2354e:	9b01      	ldr	r3, [sp, #4]
   23550:	009b      	lsls	r3, r3, #2
   23552:	461a      	mov	r2, r3
   23554:	21a5      	movs	r1, #165	; 0xa5
   23556:	f004 ff71 	bl	2843c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   2355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2355c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2355e:	9b01      	ldr	r3, [sp, #4]
   23560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23564:	3b01      	subs	r3, #1
   23566:	009b      	lsls	r3, r3, #2
   23568:	4413      	add	r3, r2
   2356a:	9304      	str	r3, [sp, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   2356c:	9b04      	ldr	r3, [sp, #16]
   2356e:	f023 0307 	bic.w	r3, r3, #7
   23572:	9304      	str	r3, [sp, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   23574:	9b04      	ldr	r3, [sp, #16]
   23576:	f003 0307 	and.w	r3, r3, #7
   2357a:	2b00      	cmp	r3, #0
   2357c:	d000      	beq.n	23580 <prvInitialiseNewTask+0x4a>
   2357e:	e7fe      	b.n	2357e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   23580:	2300      	movs	r3, #0
   23582:	9305      	str	r3, [sp, #20]
   23584:	e012      	b.n	235ac <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   23586:	9a02      	ldr	r2, [sp, #8]
   23588:	9b05      	ldr	r3, [sp, #20]
   2358a:	4413      	add	r3, r2
   2358c:	7819      	ldrb	r1, [r3, #0]
   2358e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23590:	9b05      	ldr	r3, [sp, #20]
   23592:	4413      	add	r3, r2
   23594:	3334      	adds	r3, #52	; 0x34
   23596:	460a      	mov	r2, r1
   23598:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   2359a:	9a02      	ldr	r2, [sp, #8]
   2359c:	9b05      	ldr	r3, [sp, #20]
   2359e:	4413      	add	r3, r2
   235a0:	781b      	ldrb	r3, [r3, #0]
   235a2:	2b00      	cmp	r3, #0
   235a4:	d006      	beq.n	235b4 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   235a6:	9b05      	ldr	r3, [sp, #20]
   235a8:	3301      	adds	r3, #1
   235aa:	9305      	str	r3, [sp, #20]
   235ac:	9b05      	ldr	r3, [sp, #20]
   235ae:	2b0f      	cmp	r3, #15
   235b0:	d9e9      	bls.n	23586 <prvInitialiseNewTask+0x50>
   235b2:	e000      	b.n	235b6 <prvInitialiseNewTask+0x80>
		{
			break;
   235b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   235b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235b8:	2200      	movs	r2, #0
   235ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   235be:	9b08      	ldr	r3, [sp, #32]
   235c0:	2b03      	cmp	r3, #3
   235c2:	d901      	bls.n	235c8 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   235c4:	2303      	movs	r3, #3
   235c6:	9308      	str	r3, [sp, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   235c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235ca:	9a08      	ldr	r2, [sp, #32]
   235cc:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   235ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235d0:	3304      	adds	r3, #4
   235d2:	4618      	mov	r0, r3
   235d4:	f7ff fafa 	bl	22bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   235d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235da:	3318      	adds	r3, #24
   235dc:	4618      	mov	r0, r3
   235de:	f7ff faf5 	bl	22bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   235e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   235e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   235e8:	9b08      	ldr	r3, [sp, #32]
   235ea:	f1c3 0204 	rsb	r2, r3, #4
   235ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   235f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   235f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   235f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   235fa:	2200      	movs	r2, #0
   235fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   235fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23600:	2200      	movs	r2, #0
   23602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   23606:	9a00      	ldr	r2, [sp, #0]
   23608:	9903      	ldr	r1, [sp, #12]
   2360a:	9804      	ldr	r0, [sp, #16]
   2360c:	f7f5 fdcc 	bl	191a8 <pxPortInitialiseStack>
   23610:	4602      	mov	r2, r0
   23612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23614:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   23616:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23618:	2b00      	cmp	r3, #0
   2361a:	d002      	beq.n	23622 <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   2361c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2361e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   23622:	bf00      	nop
   23624:	b007      	add	sp, #28
   23626:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002362c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   2362c:	b500      	push	{lr}
   2362e:	b083      	sub	sp, #12
   23630:	9001      	str	r0, [sp, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   23632:	f7f5 febd 	bl	193b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   23636:	4b2b      	ldr	r3, [pc, #172]	; (236e4 <prvAddNewTaskToReadyList+0xb8>)
   23638:	681b      	ldr	r3, [r3, #0]
   2363a:	3301      	adds	r3, #1
   2363c:	4a29      	ldr	r2, [pc, #164]	; (236e4 <prvAddNewTaskToReadyList+0xb8>)
   2363e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   23640:	4b29      	ldr	r3, [pc, #164]	; (236e8 <prvAddNewTaskToReadyList+0xbc>)
   23642:	681b      	ldr	r3, [r3, #0]
   23644:	2b00      	cmp	r3, #0
   23646:	d109      	bne.n	2365c <prvAddNewTaskToReadyList+0x30>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   23648:	4a27      	ldr	r2, [pc, #156]	; (236e8 <prvAddNewTaskToReadyList+0xbc>)
   2364a:	9b01      	ldr	r3, [sp, #4]
   2364c:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   2364e:	4b25      	ldr	r3, [pc, #148]	; (236e4 <prvAddNewTaskToReadyList+0xb8>)
   23650:	681b      	ldr	r3, [r3, #0]
   23652:	2b01      	cmp	r3, #1
   23654:	d110      	bne.n	23678 <prvAddNewTaskToReadyList+0x4c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   23656:	f000 fcdb 	bl	24010 <prvInitialiseTaskLists>
   2365a:	e00d      	b.n	23678 <prvAddNewTaskToReadyList+0x4c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   2365c:	4b23      	ldr	r3, [pc, #140]	; (236ec <prvAddNewTaskToReadyList+0xc0>)
   2365e:	681b      	ldr	r3, [r3, #0]
   23660:	2b00      	cmp	r3, #0
   23662:	d109      	bne.n	23678 <prvAddNewTaskToReadyList+0x4c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   23664:	4b20      	ldr	r3, [pc, #128]	; (236e8 <prvAddNewTaskToReadyList+0xbc>)
   23666:	681b      	ldr	r3, [r3, #0]
   23668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2366a:	9b01      	ldr	r3, [sp, #4]
   2366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2366e:	429a      	cmp	r2, r3
   23670:	d802      	bhi.n	23678 <prvAddNewTaskToReadyList+0x4c>
				{
					pxCurrentTCB = pxNewTCB;
   23672:	4a1d      	ldr	r2, [pc, #116]	; (236e8 <prvAddNewTaskToReadyList+0xbc>)
   23674:	9b01      	ldr	r3, [sp, #4]
   23676:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   23678:	4b1d      	ldr	r3, [pc, #116]	; (236f0 <prvAddNewTaskToReadyList+0xc4>)
   2367a:	681b      	ldr	r3, [r3, #0]
   2367c:	3301      	adds	r3, #1
   2367e:	4a1c      	ldr	r2, [pc, #112]	; (236f0 <prvAddNewTaskToReadyList+0xc4>)
   23680:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   23682:	9b01      	ldr	r3, [sp, #4]
   23684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23686:	4b1b      	ldr	r3, [pc, #108]	; (236f4 <prvAddNewTaskToReadyList+0xc8>)
   23688:	681b      	ldr	r3, [r3, #0]
   2368a:	429a      	cmp	r2, r3
   2368c:	d903      	bls.n	23696 <prvAddNewTaskToReadyList+0x6a>
   2368e:	9b01      	ldr	r3, [sp, #4]
   23690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23692:	4a18      	ldr	r2, [pc, #96]	; (236f4 <prvAddNewTaskToReadyList+0xc8>)
   23694:	6013      	str	r3, [r2, #0]
   23696:	9b01      	ldr	r3, [sp, #4]
   23698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2369a:	4613      	mov	r3, r2
   2369c:	009b      	lsls	r3, r3, #2
   2369e:	4413      	add	r3, r2
   236a0:	009b      	lsls	r3, r3, #2
   236a2:	4a15      	ldr	r2, [pc, #84]	; (236f8 <prvAddNewTaskToReadyList+0xcc>)
   236a4:	441a      	add	r2, r3
   236a6:	9b01      	ldr	r3, [sp, #4]
   236a8:	3304      	adds	r3, #4
   236aa:	4619      	mov	r1, r3
   236ac:	4610      	mov	r0, r2
   236ae:	f7ff fa95 	bl	22bdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   236b2:	f7f5 fe9f 	bl	193f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   236b6:	4b0d      	ldr	r3, [pc, #52]	; (236ec <prvAddNewTaskToReadyList+0xc0>)
   236b8:	681b      	ldr	r3, [r3, #0]
   236ba:	2b00      	cmp	r3, #0
   236bc:	d00e      	beq.n	236dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   236be:	4b0a      	ldr	r3, [pc, #40]	; (236e8 <prvAddNewTaskToReadyList+0xbc>)
   236c0:	681b      	ldr	r3, [r3, #0]
   236c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   236c4:	9b01      	ldr	r3, [sp, #4]
   236c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   236c8:	429a      	cmp	r2, r3
   236ca:	d207      	bcs.n	236dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
   236cc:	4b0b      	ldr	r3, [pc, #44]	; (236fc <prvAddNewTaskToReadyList+0xd0>)
   236ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   236d2:	601a      	str	r2, [r3, #0]
   236d4:	f3bf 8f4f 	dsb	sy
   236d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   236dc:	bf00      	nop
   236de:	b003      	add	sp, #12
   236e0:	f85d fb04 	ldr.w	pc, [sp], #4
   236e4:	10004728 	.word	0x10004728
   236e8:	1000467c 	.word	0x1000467c
   236ec:	10004734 	.word	0x10004734
   236f0:	10004744 	.word	0x10004744
   236f4:	10004730 	.word	0x10004730
   236f8:	10004680 	.word	0x10004680
   236fc:	e000ed04 	.word	0xe000ed04

00023700 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   23700:	b500      	push	{lr}
   23702:	b085      	sub	sp, #20
   23704:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   23706:	f7f5 fe53 	bl	193b0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   2370a:	9b01      	ldr	r3, [sp, #4]
   2370c:	2b00      	cmp	r3, #0
   2370e:	d102      	bne.n	23716 <vTaskSuspend+0x16>
   23710:	4b2a      	ldr	r3, [pc, #168]	; (237bc <vTaskSuspend+0xbc>)
   23712:	681b      	ldr	r3, [r3, #0]
   23714:	e000      	b.n	23718 <vTaskSuspend+0x18>
   23716:	9b01      	ldr	r3, [sp, #4]
   23718:	9303      	str	r3, [sp, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2371a:	9b03      	ldr	r3, [sp, #12]
   2371c:	3304      	adds	r3, #4
   2371e:	4618      	mov	r0, r3
   23720:	f7ff faaf 	bl	22c82 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   23724:	9b03      	ldr	r3, [sp, #12]
   23726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23728:	2b00      	cmp	r3, #0
   2372a:	d004      	beq.n	23736 <vTaskSuspend+0x36>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2372c:	9b03      	ldr	r3, [sp, #12]
   2372e:	3318      	adds	r3, #24
   23730:	4618      	mov	r0, r3
   23732:	f7ff faa6 	bl	22c82 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   23736:	9b03      	ldr	r3, [sp, #12]
   23738:	3304      	adds	r3, #4
   2373a:	4619      	mov	r1, r3
   2373c:	4820      	ldr	r0, [pc, #128]	; (237c0 <vTaskSuspend+0xc0>)
   2373e:	f7ff fa4d 	bl	22bdc <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   23742:	9b03      	ldr	r3, [sp, #12]
   23744:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   23748:	b2db      	uxtb	r3, r3
   2374a:	2b01      	cmp	r3, #1
   2374c:	d103      	bne.n	23756 <vTaskSuspend+0x56>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   2374e:	9b03      	ldr	r3, [sp, #12]
   23750:	2200      	movs	r2, #0
   23752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   23756:	f7f5 fe4d 	bl	193f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   2375a:	4b1a      	ldr	r3, [pc, #104]	; (237c4 <vTaskSuspend+0xc4>)
   2375c:	681b      	ldr	r3, [r3, #0]
   2375e:	2b00      	cmp	r3, #0
   23760:	d005      	beq.n	2376e <vTaskSuspend+0x6e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   23762:	f7f5 fe25 	bl	193b0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   23766:	f000 fc8f 	bl	24088 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   2376a:	f7f5 fe43 	bl	193f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   2376e:	4b13      	ldr	r3, [pc, #76]	; (237bc <vTaskSuspend+0xbc>)
   23770:	681b      	ldr	r3, [r3, #0]
   23772:	9a03      	ldr	r2, [sp, #12]
   23774:	429a      	cmp	r2, r3
   23776:	d11d      	bne.n	237b4 <vTaskSuspend+0xb4>
		{
			if( xSchedulerRunning != pdFALSE )
   23778:	4b12      	ldr	r3, [pc, #72]	; (237c4 <vTaskSuspend+0xc4>)
   2377a:	681b      	ldr	r3, [r3, #0]
   2377c:	2b00      	cmp	r3, #0
   2377e:	d00d      	beq.n	2379c <vTaskSuspend+0x9c>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   23780:	4b11      	ldr	r3, [pc, #68]	; (237c8 <vTaskSuspend+0xc8>)
   23782:	681b      	ldr	r3, [r3, #0]
   23784:	2b00      	cmp	r3, #0
   23786:	d000      	beq.n	2378a <vTaskSuspend+0x8a>
   23788:	e7fe      	b.n	23788 <vTaskSuspend+0x88>
				portYIELD_WITHIN_API();
   2378a:	4b10      	ldr	r3, [pc, #64]	; (237cc <vTaskSuspend+0xcc>)
   2378c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23790:	601a      	str	r2, [r3, #0]
   23792:	f3bf 8f4f 	dsb	sy
   23796:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   2379a:	e00b      	b.n	237b4 <vTaskSuspend+0xb4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   2379c:	4b08      	ldr	r3, [pc, #32]	; (237c0 <vTaskSuspend+0xc0>)
   2379e:	681a      	ldr	r2, [r3, #0]
   237a0:	4b0b      	ldr	r3, [pc, #44]	; (237d0 <vTaskSuspend+0xd0>)
   237a2:	681b      	ldr	r3, [r3, #0]
   237a4:	429a      	cmp	r2, r3
   237a6:	d103      	bne.n	237b0 <vTaskSuspend+0xb0>
					pxCurrentTCB = NULL;
   237a8:	4b04      	ldr	r3, [pc, #16]	; (237bc <vTaskSuspend+0xbc>)
   237aa:	2200      	movs	r2, #0
   237ac:	601a      	str	r2, [r3, #0]
	}
   237ae:	e001      	b.n	237b4 <vTaskSuspend+0xb4>
					vTaskSwitchContext();
   237b0:	f000 f9e2 	bl	23b78 <vTaskSwitchContext>
	}
   237b4:	bf00      	nop
   237b6:	b005      	add	sp, #20
   237b8:	f85d fb04 	ldr.w	pc, [sp], #4
   237bc:	1000467c 	.word	0x1000467c
   237c0:	10004714 	.word	0x10004714
   237c4:	10004734 	.word	0x10004734
   237c8:	10004750 	.word	0x10004750
   237cc:	e000ed04 	.word	0xe000ed04
   237d0:	10004728 	.word	0x10004728

000237d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   237d4:	b500      	push	{lr}
   237d6:	b085      	sub	sp, #20
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   237d8:	4b1a      	ldr	r3, [pc, #104]	; (23844 <vTaskStartScheduler+0x70>)
   237da:	9301      	str	r3, [sp, #4]
   237dc:	2300      	movs	r3, #0
   237de:	9300      	str	r3, [sp, #0]
   237e0:	2300      	movs	r3, #0
   237e2:	f44f 7280 	mov.w	r2, #256	; 0x100
   237e6:	4918      	ldr	r1, [pc, #96]	; (23848 <vTaskStartScheduler+0x74>)
   237e8:	4818      	ldr	r0, [pc, #96]	; (2384c <vTaskStartScheduler+0x78>)
   237ea:	f7ff fe61 	bl	234b0 <xTaskCreate>
   237ee:	9003      	str	r0, [sp, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   237f0:	9b03      	ldr	r3, [sp, #12]
   237f2:	2b01      	cmp	r3, #1
   237f4:	d102      	bne.n	237fc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
   237f6:	f000 fce5 	bl	241c4 <xTimerCreateTimerTask>
   237fa:	9003      	str	r0, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   237fc:	9b03      	ldr	r3, [sp, #12]
   237fe:	2b01      	cmp	r3, #1
   23800:	d116      	bne.n	23830 <vTaskStartScheduler+0x5c>
	__asm volatile
   23802:	f04f 0380 	mov.w	r3, #128	; 0x80
   23806:	f383 8811 	msr	BASEPRI, r3
   2380a:	f3bf 8f6f 	isb	sy
   2380e:	f3bf 8f4f 	dsb	sy
   23812:	9302      	str	r3, [sp, #8]
}
   23814:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   23816:	4b0e      	ldr	r3, [pc, #56]	; (23850 <vTaskStartScheduler+0x7c>)
   23818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2381c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   2381e:	4b0d      	ldr	r3, [pc, #52]	; (23854 <vTaskStartScheduler+0x80>)
   23820:	2201      	movs	r2, #1
   23822:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   23824:	4b0c      	ldr	r3, [pc, #48]	; (23858 <vTaskStartScheduler+0x84>)
   23826:	2200      	movs	r2, #0
   23828:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   2382a:	f7f5 fd39 	bl	192a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   2382e:	e004      	b.n	2383a <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   23830:	9b03      	ldr	r3, [sp, #12]
   23832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23836:	d100      	bne.n	2383a <vTaskStartScheduler+0x66>
   23838:	e7fe      	b.n	23838 <vTaskStartScheduler+0x64>
}
   2383a:	bf00      	nop
   2383c:	b005      	add	sp, #20
   2383e:	f85d fb04 	ldr.w	pc, [sp], #4
   23842:	bf00      	nop
   23844:	1000474c 	.word	0x1000474c
   23848:	0002bf78 	.word	0x0002bf78
   2384c:	00023f4d 	.word	0x00023f4d
   23850:	10004748 	.word	0x10004748
   23854:	10004734 	.word	0x10004734
   23858:	1000472c 	.word	0x1000472c

0002385c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   2385c:	4b03      	ldr	r3, [pc, #12]	; (2386c <vTaskSuspendAll+0x10>)
   2385e:	681b      	ldr	r3, [r3, #0]
   23860:	3301      	adds	r3, #1
   23862:	4a02      	ldr	r2, [pc, #8]	; (2386c <vTaskSuspendAll+0x10>)
   23864:	6013      	str	r3, [r2, #0]
}
   23866:	bf00      	nop
   23868:	4770      	bx	lr
   2386a:	bf00      	nop
   2386c:	10004750 	.word	0x10004750

00023870 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   23870:	b082      	sub	sp, #8
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   23872:	2300      	movs	r3, #0
   23874:	9300      	str	r3, [sp, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   23876:	4b12      	ldr	r3, [pc, #72]	; (238c0 <prvGetExpectedIdleTime+0x50>)
   23878:	681b      	ldr	r3, [r3, #0]
   2387a:	2b00      	cmp	r3, #0
   2387c:	d001      	beq.n	23882 <prvGetExpectedIdleTime+0x12>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   2387e:	2301      	movs	r3, #1
   23880:	9300      	str	r3, [sp, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   23882:	4b10      	ldr	r3, [pc, #64]	; (238c4 <prvGetExpectedIdleTime+0x54>)
   23884:	681b      	ldr	r3, [r3, #0]
   23886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23888:	2b00      	cmp	r3, #0
   2388a:	d002      	beq.n	23892 <prvGetExpectedIdleTime+0x22>
		{
			xReturn = 0;
   2388c:	2300      	movs	r3, #0
   2388e:	9301      	str	r3, [sp, #4]
   23890:	e012      	b.n	238b8 <prvGetExpectedIdleTime+0x48>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   23892:	4b0d      	ldr	r3, [pc, #52]	; (238c8 <prvGetExpectedIdleTime+0x58>)
   23894:	681b      	ldr	r3, [r3, #0]
   23896:	2b01      	cmp	r3, #1
   23898:	d902      	bls.n	238a0 <prvGetExpectedIdleTime+0x30>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   2389a:	2300      	movs	r3, #0
   2389c:	9301      	str	r3, [sp, #4]
   2389e:	e00b      	b.n	238b8 <prvGetExpectedIdleTime+0x48>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   238a0:	9b00      	ldr	r3, [sp, #0]
   238a2:	2b00      	cmp	r3, #0
   238a4:	d002      	beq.n	238ac <prvGetExpectedIdleTime+0x3c>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   238a6:	2300      	movs	r3, #0
   238a8:	9301      	str	r3, [sp, #4]
   238aa:	e005      	b.n	238b8 <prvGetExpectedIdleTime+0x48>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   238ac:	4b07      	ldr	r3, [pc, #28]	; (238cc <prvGetExpectedIdleTime+0x5c>)
   238ae:	681a      	ldr	r2, [r3, #0]
   238b0:	4b07      	ldr	r3, [pc, #28]	; (238d0 <prvGetExpectedIdleTime+0x60>)
   238b2:	681b      	ldr	r3, [r3, #0]
   238b4:	1ad3      	subs	r3, r2, r3
   238b6:	9301      	str	r3, [sp, #4]
		}

		return xReturn;
   238b8:	9b01      	ldr	r3, [sp, #4]
	}
   238ba:	4618      	mov	r0, r3
   238bc:	b002      	add	sp, #8
   238be:	4770      	bx	lr
   238c0:	10004730 	.word	0x10004730
   238c4:	1000467c 	.word	0x1000467c
   238c8:	10004680 	.word	0x10004680
   238cc:	10004748 	.word	0x10004748
   238d0:	1000472c 	.word	0x1000472c

000238d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   238d4:	b500      	push	{lr}
   238d6:	b085      	sub	sp, #20
TCB_t *pxTCB = NULL;
   238d8:	2300      	movs	r3, #0
   238da:	9303      	str	r3, [sp, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   238dc:	2300      	movs	r3, #0
   238de:	9302      	str	r3, [sp, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   238e0:	4b3c      	ldr	r3, [pc, #240]	; (239d4 <xTaskResumeAll+0x100>)
   238e2:	681b      	ldr	r3, [r3, #0]
   238e4:	2b00      	cmp	r3, #0
   238e6:	d100      	bne.n	238ea <xTaskResumeAll+0x16>
   238e8:	e7fe      	b.n	238e8 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   238ea:	f7f5 fd61 	bl	193b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   238ee:	4b39      	ldr	r3, [pc, #228]	; (239d4 <xTaskResumeAll+0x100>)
   238f0:	681b      	ldr	r3, [r3, #0]
   238f2:	3b01      	subs	r3, #1
   238f4:	4a37      	ldr	r2, [pc, #220]	; (239d4 <xTaskResumeAll+0x100>)
   238f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   238f8:	4b36      	ldr	r3, [pc, #216]	; (239d4 <xTaskResumeAll+0x100>)
   238fa:	681b      	ldr	r3, [r3, #0]
   238fc:	2b00      	cmp	r3, #0
   238fe:	d162      	bne.n	239c6 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   23900:	4b35      	ldr	r3, [pc, #212]	; (239d8 <xTaskResumeAll+0x104>)
   23902:	681b      	ldr	r3, [r3, #0]
   23904:	2b00      	cmp	r3, #0
   23906:	d05e      	beq.n	239c6 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   23908:	e02f      	b.n	2396a <xTaskResumeAll+0x96>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2390a:	4b34      	ldr	r3, [pc, #208]	; (239dc <xTaskResumeAll+0x108>)
   2390c:	68db      	ldr	r3, [r3, #12]
   2390e:	68db      	ldr	r3, [r3, #12]
   23910:	9303      	str	r3, [sp, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   23912:	9b03      	ldr	r3, [sp, #12]
   23914:	3318      	adds	r3, #24
   23916:	4618      	mov	r0, r3
   23918:	f7ff f9b3 	bl	22c82 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2391c:	9b03      	ldr	r3, [sp, #12]
   2391e:	3304      	adds	r3, #4
   23920:	4618      	mov	r0, r3
   23922:	f7ff f9ae 	bl	22c82 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   23926:	9b03      	ldr	r3, [sp, #12]
   23928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2392a:	4b2d      	ldr	r3, [pc, #180]	; (239e0 <xTaskResumeAll+0x10c>)
   2392c:	681b      	ldr	r3, [r3, #0]
   2392e:	429a      	cmp	r2, r3
   23930:	d903      	bls.n	2393a <xTaskResumeAll+0x66>
   23932:	9b03      	ldr	r3, [sp, #12]
   23934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23936:	4a2a      	ldr	r2, [pc, #168]	; (239e0 <xTaskResumeAll+0x10c>)
   23938:	6013      	str	r3, [r2, #0]
   2393a:	9b03      	ldr	r3, [sp, #12]
   2393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2393e:	4613      	mov	r3, r2
   23940:	009b      	lsls	r3, r3, #2
   23942:	4413      	add	r3, r2
   23944:	009b      	lsls	r3, r3, #2
   23946:	4a27      	ldr	r2, [pc, #156]	; (239e4 <xTaskResumeAll+0x110>)
   23948:	441a      	add	r2, r3
   2394a:	9b03      	ldr	r3, [sp, #12]
   2394c:	3304      	adds	r3, #4
   2394e:	4619      	mov	r1, r3
   23950:	4610      	mov	r0, r2
   23952:	f7ff f943 	bl	22bdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   23956:	9b03      	ldr	r3, [sp, #12]
   23958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2395a:	4b23      	ldr	r3, [pc, #140]	; (239e8 <xTaskResumeAll+0x114>)
   2395c:	681b      	ldr	r3, [r3, #0]
   2395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23960:	429a      	cmp	r2, r3
   23962:	d302      	bcc.n	2396a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   23964:	4b21      	ldr	r3, [pc, #132]	; (239ec <xTaskResumeAll+0x118>)
   23966:	2201      	movs	r2, #1
   23968:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   2396a:	4b1c      	ldr	r3, [pc, #112]	; (239dc <xTaskResumeAll+0x108>)
   2396c:	681b      	ldr	r3, [r3, #0]
   2396e:	2b00      	cmp	r3, #0
   23970:	d1cb      	bne.n	2390a <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   23972:	9b03      	ldr	r3, [sp, #12]
   23974:	2b00      	cmp	r3, #0
   23976:	d001      	beq.n	2397c <xTaskResumeAll+0xa8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   23978:	f000 fb86 	bl	24088 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   2397c:	4b1c      	ldr	r3, [pc, #112]	; (239f0 <xTaskResumeAll+0x11c>)
   2397e:	681b      	ldr	r3, [r3, #0]
   23980:	9301      	str	r3, [sp, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   23982:	9b01      	ldr	r3, [sp, #4]
   23984:	2b00      	cmp	r3, #0
   23986:	d010      	beq.n	239aa <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   23988:	f000 f858 	bl	23a3c <xTaskIncrementTick>
   2398c:	4603      	mov	r3, r0
   2398e:	2b00      	cmp	r3, #0
   23990:	d002      	beq.n	23998 <xTaskResumeAll+0xc4>
							{
								xYieldPending = pdTRUE;
   23992:	4b16      	ldr	r3, [pc, #88]	; (239ec <xTaskResumeAll+0x118>)
   23994:	2201      	movs	r2, #1
   23996:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   23998:	9b01      	ldr	r3, [sp, #4]
   2399a:	3b01      	subs	r3, #1
   2399c:	9301      	str	r3, [sp, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   2399e:	9b01      	ldr	r3, [sp, #4]
   239a0:	2b00      	cmp	r3, #0
   239a2:	d1f1      	bne.n	23988 <xTaskResumeAll+0xb4>

						uxPendedTicks = 0;
   239a4:	4b12      	ldr	r3, [pc, #72]	; (239f0 <xTaskResumeAll+0x11c>)
   239a6:	2200      	movs	r2, #0
   239a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   239aa:	4b10      	ldr	r3, [pc, #64]	; (239ec <xTaskResumeAll+0x118>)
   239ac:	681b      	ldr	r3, [r3, #0]
   239ae:	2b00      	cmp	r3, #0
   239b0:	d009      	beq.n	239c6 <xTaskResumeAll+0xf2>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   239b2:	2301      	movs	r3, #1
   239b4:	9302      	str	r3, [sp, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   239b6:	4b0f      	ldr	r3, [pc, #60]	; (239f4 <xTaskResumeAll+0x120>)
   239b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   239bc:	601a      	str	r2, [r3, #0]
   239be:	f3bf 8f4f 	dsb	sy
   239c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   239c6:	f7f5 fd15 	bl	193f4 <vPortExitCritical>

	return xAlreadyYielded;
   239ca:	9b02      	ldr	r3, [sp, #8]
}
   239cc:	4618      	mov	r0, r3
   239ce:	b005      	add	sp, #20
   239d0:	f85d fb04 	ldr.w	pc, [sp], #4
   239d4:	10004750 	.word	0x10004750
   239d8:	10004728 	.word	0x10004728
   239dc:	10004700 	.word	0x10004700
   239e0:	10004730 	.word	0x10004730
   239e4:	10004680 	.word	0x10004680
   239e8:	1000467c 	.word	0x1000467c
   239ec:	1000473c 	.word	0x1000473c
   239f0:	10004738 	.word	0x10004738
   239f4:	e000ed04 	.word	0xe000ed04

000239f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   239f8:	b082      	sub	sp, #8
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   239fa:	4b03      	ldr	r3, [pc, #12]	; (23a08 <xTaskGetTickCount+0x10>)
   239fc:	681b      	ldr	r3, [r3, #0]
   239fe:	9301      	str	r3, [sp, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   23a00:	9b01      	ldr	r3, [sp, #4]
}
   23a02:	4618      	mov	r0, r3
   23a04:	b002      	add	sp, #8
   23a06:	4770      	bx	lr
   23a08:	1000472c 	.word	0x1000472c

00023a0c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   23a0c:	b082      	sub	sp, #8
   23a0e:	9001      	str	r0, [sp, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   23a10:	4b08      	ldr	r3, [pc, #32]	; (23a34 <vTaskStepTick+0x28>)
   23a12:	681a      	ldr	r2, [r3, #0]
   23a14:	9b01      	ldr	r3, [sp, #4]
   23a16:	441a      	add	r2, r3
   23a18:	4b07      	ldr	r3, [pc, #28]	; (23a38 <vTaskStepTick+0x2c>)
   23a1a:	681b      	ldr	r3, [r3, #0]
   23a1c:	429a      	cmp	r2, r3
   23a1e:	d900      	bls.n	23a22 <vTaskStepTick+0x16>
   23a20:	e7fe      	b.n	23a20 <vTaskStepTick+0x14>
		xTickCount += xTicksToJump;
   23a22:	4b04      	ldr	r3, [pc, #16]	; (23a34 <vTaskStepTick+0x28>)
   23a24:	681a      	ldr	r2, [r3, #0]
   23a26:	9b01      	ldr	r3, [sp, #4]
   23a28:	4413      	add	r3, r2
   23a2a:	4a02      	ldr	r2, [pc, #8]	; (23a34 <vTaskStepTick+0x28>)
   23a2c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   23a2e:	bf00      	nop
   23a30:	b002      	add	sp, #8
   23a32:	4770      	bx	lr
   23a34:	1000472c 	.word	0x1000472c
   23a38:	10004748 	.word	0x10004748

00023a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   23a3c:	b500      	push	{lr}
   23a3e:	b087      	sub	sp, #28
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   23a40:	2300      	movs	r3, #0
   23a42:	9305      	str	r3, [sp, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   23a44:	4b41      	ldr	r3, [pc, #260]	; (23b4c <xTaskIncrementTick+0x110>)
   23a46:	681b      	ldr	r3, [r3, #0]
   23a48:	2b00      	cmp	r3, #0
   23a4a:	d16f      	bne.n	23b2c <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   23a4c:	4b40      	ldr	r3, [pc, #256]	; (23b50 <xTaskIncrementTick+0x114>)
   23a4e:	681b      	ldr	r3, [r3, #0]
   23a50:	3301      	adds	r3, #1
   23a52:	9304      	str	r3, [sp, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   23a54:	4a3e      	ldr	r2, [pc, #248]	; (23b50 <xTaskIncrementTick+0x114>)
   23a56:	9b04      	ldr	r3, [sp, #16]
   23a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   23a5a:	9b04      	ldr	r3, [sp, #16]
   23a5c:	2b00      	cmp	r3, #0
   23a5e:	d116      	bne.n	23a8e <xTaskIncrementTick+0x52>
		{
			taskSWITCH_DELAYED_LISTS();
   23a60:	4b3c      	ldr	r3, [pc, #240]	; (23b54 <xTaskIncrementTick+0x118>)
   23a62:	681b      	ldr	r3, [r3, #0]
   23a64:	681b      	ldr	r3, [r3, #0]
   23a66:	2b00      	cmp	r3, #0
   23a68:	d000      	beq.n	23a6c <xTaskIncrementTick+0x30>
   23a6a:	e7fe      	b.n	23a6a <xTaskIncrementTick+0x2e>
   23a6c:	4b39      	ldr	r3, [pc, #228]	; (23b54 <xTaskIncrementTick+0x118>)
   23a6e:	681b      	ldr	r3, [r3, #0]
   23a70:	9303      	str	r3, [sp, #12]
   23a72:	4b39      	ldr	r3, [pc, #228]	; (23b58 <xTaskIncrementTick+0x11c>)
   23a74:	681b      	ldr	r3, [r3, #0]
   23a76:	4a37      	ldr	r2, [pc, #220]	; (23b54 <xTaskIncrementTick+0x118>)
   23a78:	6013      	str	r3, [r2, #0]
   23a7a:	4a37      	ldr	r2, [pc, #220]	; (23b58 <xTaskIncrementTick+0x11c>)
   23a7c:	9b03      	ldr	r3, [sp, #12]
   23a7e:	6013      	str	r3, [r2, #0]
   23a80:	4b36      	ldr	r3, [pc, #216]	; (23b5c <xTaskIncrementTick+0x120>)
   23a82:	681b      	ldr	r3, [r3, #0]
   23a84:	3301      	adds	r3, #1
   23a86:	4a35      	ldr	r2, [pc, #212]	; (23b5c <xTaskIncrementTick+0x120>)
   23a88:	6013      	str	r3, [r2, #0]
   23a8a:	f000 fafd 	bl	24088 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   23a8e:	4b34      	ldr	r3, [pc, #208]	; (23b60 <xTaskIncrementTick+0x124>)
   23a90:	681b      	ldr	r3, [r3, #0]
   23a92:	9a04      	ldr	r2, [sp, #16]
   23a94:	429a      	cmp	r2, r3
   23a96:	d34e      	bcc.n	23b36 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   23a98:	4b2e      	ldr	r3, [pc, #184]	; (23b54 <xTaskIncrementTick+0x118>)
   23a9a:	681b      	ldr	r3, [r3, #0]
   23a9c:	681b      	ldr	r3, [r3, #0]
   23a9e:	2b00      	cmp	r3, #0
   23aa0:	d104      	bne.n	23aac <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   23aa2:	4b2f      	ldr	r3, [pc, #188]	; (23b60 <xTaskIncrementTick+0x124>)
   23aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23aa8:	601a      	str	r2, [r3, #0]
					break;
   23aaa:	e044      	b.n	23b36 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   23aac:	4b29      	ldr	r3, [pc, #164]	; (23b54 <xTaskIncrementTick+0x118>)
   23aae:	681b      	ldr	r3, [r3, #0]
   23ab0:	68db      	ldr	r3, [r3, #12]
   23ab2:	68db      	ldr	r3, [r3, #12]
   23ab4:	9302      	str	r3, [sp, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   23ab6:	9b02      	ldr	r3, [sp, #8]
   23ab8:	685b      	ldr	r3, [r3, #4]
   23aba:	9301      	str	r3, [sp, #4]

					if( xConstTickCount < xItemValue )
   23abc:	9a04      	ldr	r2, [sp, #16]
   23abe:	9b01      	ldr	r3, [sp, #4]
   23ac0:	429a      	cmp	r2, r3
   23ac2:	d203      	bcs.n	23acc <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   23ac4:	4a26      	ldr	r2, [pc, #152]	; (23b60 <xTaskIncrementTick+0x124>)
   23ac6:	9b01      	ldr	r3, [sp, #4]
   23ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   23aca:	e034      	b.n	23b36 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   23acc:	9b02      	ldr	r3, [sp, #8]
   23ace:	3304      	adds	r3, #4
   23ad0:	4618      	mov	r0, r3
   23ad2:	f7ff f8d6 	bl	22c82 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   23ad6:	9b02      	ldr	r3, [sp, #8]
   23ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23ada:	2b00      	cmp	r3, #0
   23adc:	d004      	beq.n	23ae8 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   23ade:	9b02      	ldr	r3, [sp, #8]
   23ae0:	3318      	adds	r3, #24
   23ae2:	4618      	mov	r0, r3
   23ae4:	f7ff f8cd 	bl	22c82 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   23ae8:	9b02      	ldr	r3, [sp, #8]
   23aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23aec:	4b1d      	ldr	r3, [pc, #116]	; (23b64 <xTaskIncrementTick+0x128>)
   23aee:	681b      	ldr	r3, [r3, #0]
   23af0:	429a      	cmp	r2, r3
   23af2:	d903      	bls.n	23afc <xTaskIncrementTick+0xc0>
   23af4:	9b02      	ldr	r3, [sp, #8]
   23af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23af8:	4a1a      	ldr	r2, [pc, #104]	; (23b64 <xTaskIncrementTick+0x128>)
   23afa:	6013      	str	r3, [r2, #0]
   23afc:	9b02      	ldr	r3, [sp, #8]
   23afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23b00:	4613      	mov	r3, r2
   23b02:	009b      	lsls	r3, r3, #2
   23b04:	4413      	add	r3, r2
   23b06:	009b      	lsls	r3, r3, #2
   23b08:	4a17      	ldr	r2, [pc, #92]	; (23b68 <xTaskIncrementTick+0x12c>)
   23b0a:	441a      	add	r2, r3
   23b0c:	9b02      	ldr	r3, [sp, #8]
   23b0e:	3304      	adds	r3, #4
   23b10:	4619      	mov	r1, r3
   23b12:	4610      	mov	r0, r2
   23b14:	f7ff f862 	bl	22bdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   23b18:	9b02      	ldr	r3, [sp, #8]
   23b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23b1c:	4b13      	ldr	r3, [pc, #76]	; (23b6c <xTaskIncrementTick+0x130>)
   23b1e:	681b      	ldr	r3, [r3, #0]
   23b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23b22:	429a      	cmp	r2, r3
   23b24:	d3b8      	bcc.n	23a98 <xTaskIncrementTick+0x5c>
						{
							xSwitchRequired = pdTRUE;
   23b26:	2301      	movs	r3, #1
   23b28:	9305      	str	r3, [sp, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   23b2a:	e7b5      	b.n	23a98 <xTaskIncrementTick+0x5c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   23b2c:	4b10      	ldr	r3, [pc, #64]	; (23b70 <xTaskIncrementTick+0x134>)
   23b2e:	681b      	ldr	r3, [r3, #0]
   23b30:	3301      	adds	r3, #1
   23b32:	4a0f      	ldr	r2, [pc, #60]	; (23b70 <xTaskIncrementTick+0x134>)
   23b34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   23b36:	4b0f      	ldr	r3, [pc, #60]	; (23b74 <xTaskIncrementTick+0x138>)
   23b38:	681b      	ldr	r3, [r3, #0]
   23b3a:	2b00      	cmp	r3, #0
   23b3c:	d001      	beq.n	23b42 <xTaskIncrementTick+0x106>
		{
			xSwitchRequired = pdTRUE;
   23b3e:	2301      	movs	r3, #1
   23b40:	9305      	str	r3, [sp, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   23b42:	9b05      	ldr	r3, [sp, #20]
}
   23b44:	4618      	mov	r0, r3
   23b46:	b007      	add	sp, #28
   23b48:	f85d fb04 	ldr.w	pc, [sp], #4
   23b4c:	10004750 	.word	0x10004750
   23b50:	1000472c 	.word	0x1000472c
   23b54:	100046f8 	.word	0x100046f8
   23b58:	100046fc 	.word	0x100046fc
   23b5c:	10004740 	.word	0x10004740
   23b60:	10004748 	.word	0x10004748
   23b64:	10004730 	.word	0x10004730
   23b68:	10004680 	.word	0x10004680
   23b6c:	1000467c 	.word	0x1000467c
   23b70:	10004738 	.word	0x10004738
   23b74:	1000473c 	.word	0x1000473c

00023b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   23b78:	b500      	push	{lr}
   23b7a:	b085      	sub	sp, #20
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   23b7c:	4b35      	ldr	r3, [pc, #212]	; (23c54 <vTaskSwitchContext+0xdc>)
   23b7e:	681b      	ldr	r3, [r3, #0]
   23b80:	2b00      	cmp	r3, #0
   23b82:	d003      	beq.n	23b8c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   23b84:	4b34      	ldr	r3, [pc, #208]	; (23c58 <vTaskSwitchContext+0xe0>)
   23b86:	2201      	movs	r2, #1
   23b88:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   23b8a:	e05e      	b.n	23c4a <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
   23b8c:	4b32      	ldr	r3, [pc, #200]	; (23c58 <vTaskSwitchContext+0xe0>)
   23b8e:	2200      	movs	r2, #0
   23b90:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   23b92:	4b32      	ldr	r3, [pc, #200]	; (23c5c <vTaskSwitchContext+0xe4>)
   23b94:	681b      	ldr	r3, [r3, #0]
   23b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   23b98:	9302      	str	r3, [sp, #8]
   23b9a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   23b9e:	9301      	str	r3, [sp, #4]
   23ba0:	9b02      	ldr	r3, [sp, #8]
   23ba2:	681b      	ldr	r3, [r3, #0]
   23ba4:	9a01      	ldr	r2, [sp, #4]
   23ba6:	429a      	cmp	r2, r3
   23ba8:	d111      	bne.n	23bce <vTaskSwitchContext+0x56>
   23baa:	9b02      	ldr	r3, [sp, #8]
   23bac:	3304      	adds	r3, #4
   23bae:	681b      	ldr	r3, [r3, #0]
   23bb0:	9a01      	ldr	r2, [sp, #4]
   23bb2:	429a      	cmp	r2, r3
   23bb4:	d10b      	bne.n	23bce <vTaskSwitchContext+0x56>
   23bb6:	9b02      	ldr	r3, [sp, #8]
   23bb8:	3308      	adds	r3, #8
   23bba:	681b      	ldr	r3, [r3, #0]
   23bbc:	9a01      	ldr	r2, [sp, #4]
   23bbe:	429a      	cmp	r2, r3
   23bc0:	d105      	bne.n	23bce <vTaskSwitchContext+0x56>
   23bc2:	9b02      	ldr	r3, [sp, #8]
   23bc4:	330c      	adds	r3, #12
   23bc6:	681b      	ldr	r3, [r3, #0]
   23bc8:	9a01      	ldr	r2, [sp, #4]
   23bca:	429a      	cmp	r2, r3
   23bcc:	d008      	beq.n	23be0 <vTaskSwitchContext+0x68>
   23bce:	4b23      	ldr	r3, [pc, #140]	; (23c5c <vTaskSwitchContext+0xe4>)
   23bd0:	681a      	ldr	r2, [r3, #0]
   23bd2:	4b22      	ldr	r3, [pc, #136]	; (23c5c <vTaskSwitchContext+0xe4>)
   23bd4:	681b      	ldr	r3, [r3, #0]
   23bd6:	3334      	adds	r3, #52	; 0x34
   23bd8:	4619      	mov	r1, r3
   23bda:	4610      	mov	r0, r2
   23bdc:	f7e9 f92d 	bl	ce3a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   23be0:	4b1f      	ldr	r3, [pc, #124]	; (23c60 <vTaskSwitchContext+0xe8>)
   23be2:	681b      	ldr	r3, [r3, #0]
   23be4:	9303      	str	r3, [sp, #12]
   23be6:	e006      	b.n	23bf6 <vTaskSwitchContext+0x7e>
   23be8:	9b03      	ldr	r3, [sp, #12]
   23bea:	2b00      	cmp	r3, #0
   23bec:	d100      	bne.n	23bf0 <vTaskSwitchContext+0x78>
   23bee:	e7fe      	b.n	23bee <vTaskSwitchContext+0x76>
   23bf0:	9b03      	ldr	r3, [sp, #12]
   23bf2:	3b01      	subs	r3, #1
   23bf4:	9303      	str	r3, [sp, #12]
   23bf6:	491b      	ldr	r1, [pc, #108]	; (23c64 <vTaskSwitchContext+0xec>)
   23bf8:	9a03      	ldr	r2, [sp, #12]
   23bfa:	4613      	mov	r3, r2
   23bfc:	009b      	lsls	r3, r3, #2
   23bfe:	4413      	add	r3, r2
   23c00:	009b      	lsls	r3, r3, #2
   23c02:	440b      	add	r3, r1
   23c04:	681b      	ldr	r3, [r3, #0]
   23c06:	2b00      	cmp	r3, #0
   23c08:	d0ee      	beq.n	23be8 <vTaskSwitchContext+0x70>
   23c0a:	9a03      	ldr	r2, [sp, #12]
   23c0c:	4613      	mov	r3, r2
   23c0e:	009b      	lsls	r3, r3, #2
   23c10:	4413      	add	r3, r2
   23c12:	009b      	lsls	r3, r3, #2
   23c14:	4a13      	ldr	r2, [pc, #76]	; (23c64 <vTaskSwitchContext+0xec>)
   23c16:	4413      	add	r3, r2
   23c18:	9300      	str	r3, [sp, #0]
   23c1a:	9b00      	ldr	r3, [sp, #0]
   23c1c:	685b      	ldr	r3, [r3, #4]
   23c1e:	685a      	ldr	r2, [r3, #4]
   23c20:	9b00      	ldr	r3, [sp, #0]
   23c22:	605a      	str	r2, [r3, #4]
   23c24:	9b00      	ldr	r3, [sp, #0]
   23c26:	685a      	ldr	r2, [r3, #4]
   23c28:	9b00      	ldr	r3, [sp, #0]
   23c2a:	3308      	adds	r3, #8
   23c2c:	429a      	cmp	r2, r3
   23c2e:	d104      	bne.n	23c3a <vTaskSwitchContext+0xc2>
   23c30:	9b00      	ldr	r3, [sp, #0]
   23c32:	685b      	ldr	r3, [r3, #4]
   23c34:	685a      	ldr	r2, [r3, #4]
   23c36:	9b00      	ldr	r3, [sp, #0]
   23c38:	605a      	str	r2, [r3, #4]
   23c3a:	9b00      	ldr	r3, [sp, #0]
   23c3c:	685b      	ldr	r3, [r3, #4]
   23c3e:	68db      	ldr	r3, [r3, #12]
   23c40:	4a06      	ldr	r2, [pc, #24]	; (23c5c <vTaskSwitchContext+0xe4>)
   23c42:	6013      	str	r3, [r2, #0]
   23c44:	4a06      	ldr	r2, [pc, #24]	; (23c60 <vTaskSwitchContext+0xe8>)
   23c46:	9b03      	ldr	r3, [sp, #12]
   23c48:	6013      	str	r3, [r2, #0]
}
   23c4a:	bf00      	nop
   23c4c:	b005      	add	sp, #20
   23c4e:	f85d fb04 	ldr.w	pc, [sp], #4
   23c52:	bf00      	nop
   23c54:	10004750 	.word	0x10004750
   23c58:	1000473c 	.word	0x1000473c
   23c5c:	1000467c 	.word	0x1000467c
   23c60:	10004730 	.word	0x10004730
   23c64:	10004680 	.word	0x10004680

00023c68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   23c68:	b500      	push	{lr}
   23c6a:	b083      	sub	sp, #12
   23c6c:	9001      	str	r0, [sp, #4]
   23c6e:	9100      	str	r1, [sp, #0]
	configASSERT( pxEventList );
   23c70:	9b01      	ldr	r3, [sp, #4]
   23c72:	2b00      	cmp	r3, #0
   23c74:	d100      	bne.n	23c78 <vTaskPlaceOnEventList+0x10>
   23c76:	e7fe      	b.n	23c76 <vTaskPlaceOnEventList+0xe>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   23c78:	4b07      	ldr	r3, [pc, #28]	; (23c98 <vTaskPlaceOnEventList+0x30>)
   23c7a:	681b      	ldr	r3, [r3, #0]
   23c7c:	3318      	adds	r3, #24
   23c7e:	4619      	mov	r1, r3
   23c80:	9801      	ldr	r0, [sp, #4]
   23c82:	f7fe ffca 	bl	22c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   23c86:	2101      	movs	r1, #1
   23c88:	9800      	ldr	r0, [sp, #0]
   23c8a:	f000 fa47 	bl	2411c <prvAddCurrentTaskToDelayedList>
}
   23c8e:	bf00      	nop
   23c90:	b003      	add	sp, #12
   23c92:	f85d fb04 	ldr.w	pc, [sp], #4
   23c96:	bf00      	nop
   23c98:	1000467c 	.word	0x1000467c

00023c9c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   23c9c:	b500      	push	{lr}
   23c9e:	b085      	sub	sp, #20
   23ca0:	9003      	str	r0, [sp, #12]
   23ca2:	9102      	str	r1, [sp, #8]
   23ca4:	9201      	str	r2, [sp, #4]
	configASSERT( pxEventList );
   23ca6:	9b03      	ldr	r3, [sp, #12]
   23ca8:	2b00      	cmp	r3, #0
   23caa:	d100      	bne.n	23cae <vTaskPlaceOnUnorderedEventList+0x12>
   23cac:	e7fe      	b.n	23cac <vTaskPlaceOnUnorderedEventList+0x10>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   23cae:	4b0d      	ldr	r3, [pc, #52]	; (23ce4 <vTaskPlaceOnUnorderedEventList+0x48>)
   23cb0:	681b      	ldr	r3, [r3, #0]
   23cb2:	2b00      	cmp	r3, #0
   23cb4:	d100      	bne.n	23cb8 <vTaskPlaceOnUnorderedEventList+0x1c>
   23cb6:	e7fe      	b.n	23cb6 <vTaskPlaceOnUnorderedEventList+0x1a>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   23cb8:	4b0b      	ldr	r3, [pc, #44]	; (23ce8 <vTaskPlaceOnUnorderedEventList+0x4c>)
   23cba:	681b      	ldr	r3, [r3, #0]
   23cbc:	9a02      	ldr	r2, [sp, #8]
   23cbe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   23cc2:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   23cc4:	4b08      	ldr	r3, [pc, #32]	; (23ce8 <vTaskPlaceOnUnorderedEventList+0x4c>)
   23cc6:	681b      	ldr	r3, [r3, #0]
   23cc8:	3318      	adds	r3, #24
   23cca:	4619      	mov	r1, r3
   23ccc:	9803      	ldr	r0, [sp, #12]
   23cce:	f7fe ff85 	bl	22bdc <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   23cd2:	2101      	movs	r1, #1
   23cd4:	9801      	ldr	r0, [sp, #4]
   23cd6:	f000 fa21 	bl	2411c <prvAddCurrentTaskToDelayedList>
}
   23cda:	bf00      	nop
   23cdc:	b005      	add	sp, #20
   23cde:	f85d fb04 	ldr.w	pc, [sp], #4
   23ce2:	bf00      	nop
   23ce4:	10004750 	.word	0x10004750
   23ce8:	1000467c 	.word	0x1000467c

00023cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   23cec:	b500      	push	{lr}
   23cee:	b085      	sub	sp, #20
   23cf0:	9003      	str	r0, [sp, #12]
   23cf2:	9102      	str	r1, [sp, #8]
   23cf4:	9201      	str	r2, [sp, #4]
		configASSERT( pxEventList );
   23cf6:	9b03      	ldr	r3, [sp, #12]
   23cf8:	2b00      	cmp	r3, #0
   23cfa:	d100      	bne.n	23cfe <vTaskPlaceOnEventListRestricted+0x12>
   23cfc:	e7fe      	b.n	23cfc <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   23cfe:	4b0a      	ldr	r3, [pc, #40]	; (23d28 <vTaskPlaceOnEventListRestricted+0x3c>)
   23d00:	681b      	ldr	r3, [r3, #0]
   23d02:	3318      	adds	r3, #24
   23d04:	4619      	mov	r1, r3
   23d06:	9803      	ldr	r0, [sp, #12]
   23d08:	f7fe ff68 	bl	22bdc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   23d0c:	9b01      	ldr	r3, [sp, #4]
   23d0e:	2b00      	cmp	r3, #0
   23d10:	d002      	beq.n	23d18 <vTaskPlaceOnEventListRestricted+0x2c>
		{
			xTicksToWait = portMAX_DELAY;
   23d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23d16:	9302      	str	r3, [sp, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   23d18:	9901      	ldr	r1, [sp, #4]
   23d1a:	9802      	ldr	r0, [sp, #8]
   23d1c:	f000 f9fe 	bl	2411c <prvAddCurrentTaskToDelayedList>
	}
   23d20:	bf00      	nop
   23d22:	b005      	add	sp, #20
   23d24:	f85d fb04 	ldr.w	pc, [sp], #4
   23d28:	1000467c 	.word	0x1000467c

00023d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   23d2c:	b500      	push	{lr}
   23d2e:	b085      	sub	sp, #20
   23d30:	9001      	str	r0, [sp, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   23d32:	9b01      	ldr	r3, [sp, #4]
   23d34:	68db      	ldr	r3, [r3, #12]
   23d36:	68db      	ldr	r3, [r3, #12]
   23d38:	9302      	str	r3, [sp, #8]
	configASSERT( pxUnblockedTCB );
   23d3a:	9b02      	ldr	r3, [sp, #8]
   23d3c:	2b00      	cmp	r3, #0
   23d3e:	d100      	bne.n	23d42 <xTaskRemoveFromEventList+0x16>
   23d40:	e7fe      	b.n	23d40 <xTaskRemoveFromEventList+0x14>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   23d42:	9b02      	ldr	r3, [sp, #8]
   23d44:	3318      	adds	r3, #24
   23d46:	4618      	mov	r0, r3
   23d48:	f7fe ff9b 	bl	22c82 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   23d4c:	4b1e      	ldr	r3, [pc, #120]	; (23dc8 <xTaskRemoveFromEventList+0x9c>)
   23d4e:	681b      	ldr	r3, [r3, #0]
   23d50:	2b00      	cmp	r3, #0
   23d52:	d11d      	bne.n	23d90 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   23d54:	9b02      	ldr	r3, [sp, #8]
   23d56:	3304      	adds	r3, #4
   23d58:	4618      	mov	r0, r3
   23d5a:	f7fe ff92 	bl	22c82 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   23d5e:	9b02      	ldr	r3, [sp, #8]
   23d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23d62:	4b1a      	ldr	r3, [pc, #104]	; (23dcc <xTaskRemoveFromEventList+0xa0>)
   23d64:	681b      	ldr	r3, [r3, #0]
   23d66:	429a      	cmp	r2, r3
   23d68:	d903      	bls.n	23d72 <xTaskRemoveFromEventList+0x46>
   23d6a:	9b02      	ldr	r3, [sp, #8]
   23d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23d6e:	4a17      	ldr	r2, [pc, #92]	; (23dcc <xTaskRemoveFromEventList+0xa0>)
   23d70:	6013      	str	r3, [r2, #0]
   23d72:	9b02      	ldr	r3, [sp, #8]
   23d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23d76:	4613      	mov	r3, r2
   23d78:	009b      	lsls	r3, r3, #2
   23d7a:	4413      	add	r3, r2
   23d7c:	009b      	lsls	r3, r3, #2
   23d7e:	4a14      	ldr	r2, [pc, #80]	; (23dd0 <xTaskRemoveFromEventList+0xa4>)
   23d80:	441a      	add	r2, r3
   23d82:	9b02      	ldr	r3, [sp, #8]
   23d84:	3304      	adds	r3, #4
   23d86:	4619      	mov	r1, r3
   23d88:	4610      	mov	r0, r2
   23d8a:	f7fe ff27 	bl	22bdc <vListInsertEnd>
   23d8e:	e005      	b.n	23d9c <xTaskRemoveFromEventList+0x70>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   23d90:	9b02      	ldr	r3, [sp, #8]
   23d92:	3318      	adds	r3, #24
   23d94:	4619      	mov	r1, r3
   23d96:	480f      	ldr	r0, [pc, #60]	; (23dd4 <xTaskRemoveFromEventList+0xa8>)
   23d98:	f7fe ff20 	bl	22bdc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   23d9c:	9b02      	ldr	r3, [sp, #8]
   23d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23da0:	4b0d      	ldr	r3, [pc, #52]	; (23dd8 <xTaskRemoveFromEventList+0xac>)
   23da2:	681b      	ldr	r3, [r3, #0]
   23da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23da6:	429a      	cmp	r2, r3
   23da8:	d905      	bls.n	23db6 <xTaskRemoveFromEventList+0x8a>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   23daa:	2301      	movs	r3, #1
   23dac:	9303      	str	r3, [sp, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   23dae:	4b0b      	ldr	r3, [pc, #44]	; (23ddc <xTaskRemoveFromEventList+0xb0>)
   23db0:	2201      	movs	r2, #1
   23db2:	601a      	str	r2, [r3, #0]
   23db4:	e001      	b.n	23dba <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		xReturn = pdFALSE;
   23db6:	2300      	movs	r3, #0
   23db8:	9303      	str	r3, [sp, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   23dba:	f000 f965 	bl	24088 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   23dbe:	9b03      	ldr	r3, [sp, #12]
}
   23dc0:	4618      	mov	r0, r3
   23dc2:	b005      	add	sp, #20
   23dc4:	f85d fb04 	ldr.w	pc, [sp], #4
   23dc8:	10004750 	.word	0x10004750
   23dcc:	10004730 	.word	0x10004730
   23dd0:	10004680 	.word	0x10004680
   23dd4:	10004700 	.word	0x10004700
   23dd8:	1000467c 	.word	0x1000467c
   23ddc:	1000473c 	.word	0x1000473c

00023de0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   23de0:	b500      	push	{lr}
   23de2:	b085      	sub	sp, #20
   23de4:	9001      	str	r0, [sp, #4]
   23de6:	9100      	str	r1, [sp, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   23de8:	4b1f      	ldr	r3, [pc, #124]	; (23e68 <vTaskRemoveFromUnorderedEventList+0x88>)
   23dea:	681b      	ldr	r3, [r3, #0]
   23dec:	2b00      	cmp	r3, #0
   23dee:	d100      	bne.n	23df2 <vTaskRemoveFromUnorderedEventList+0x12>
   23df0:	e7fe      	b.n	23df0 <vTaskRemoveFromUnorderedEventList+0x10>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   23df2:	9b00      	ldr	r3, [sp, #0]
   23df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   23df8:	9b01      	ldr	r3, [sp, #4]
   23dfa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   23dfc:	9b01      	ldr	r3, [sp, #4]
   23dfe:	68db      	ldr	r3, [r3, #12]
   23e00:	9303      	str	r3, [sp, #12]
	configASSERT( pxUnblockedTCB );
   23e02:	9b03      	ldr	r3, [sp, #12]
   23e04:	2b00      	cmp	r3, #0
   23e06:	d100      	bne.n	23e0a <vTaskRemoveFromUnorderedEventList+0x2a>
   23e08:	e7fe      	b.n	23e08 <vTaskRemoveFromUnorderedEventList+0x28>
	( void ) uxListRemove( pxEventListItem );
   23e0a:	9801      	ldr	r0, [sp, #4]
   23e0c:	f7fe ff39 	bl	22c82 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   23e10:	9b03      	ldr	r3, [sp, #12]
   23e12:	3304      	adds	r3, #4
   23e14:	4618      	mov	r0, r3
   23e16:	f7fe ff34 	bl	22c82 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   23e1a:	9b03      	ldr	r3, [sp, #12]
   23e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23e1e:	4b13      	ldr	r3, [pc, #76]	; (23e6c <vTaskRemoveFromUnorderedEventList+0x8c>)
   23e20:	681b      	ldr	r3, [r3, #0]
   23e22:	429a      	cmp	r2, r3
   23e24:	d903      	bls.n	23e2e <vTaskRemoveFromUnorderedEventList+0x4e>
   23e26:	9b03      	ldr	r3, [sp, #12]
   23e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23e2a:	4a10      	ldr	r2, [pc, #64]	; (23e6c <vTaskRemoveFromUnorderedEventList+0x8c>)
   23e2c:	6013      	str	r3, [r2, #0]
   23e2e:	9b03      	ldr	r3, [sp, #12]
   23e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23e32:	4613      	mov	r3, r2
   23e34:	009b      	lsls	r3, r3, #2
   23e36:	4413      	add	r3, r2
   23e38:	009b      	lsls	r3, r3, #2
   23e3a:	4a0d      	ldr	r2, [pc, #52]	; (23e70 <vTaskRemoveFromUnorderedEventList+0x90>)
   23e3c:	441a      	add	r2, r3
   23e3e:	9b03      	ldr	r3, [sp, #12]
   23e40:	3304      	adds	r3, #4
   23e42:	4619      	mov	r1, r3
   23e44:	4610      	mov	r0, r2
   23e46:	f7fe fec9 	bl	22bdc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   23e4a:	9b03      	ldr	r3, [sp, #12]
   23e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23e4e:	4b09      	ldr	r3, [pc, #36]	; (23e74 <vTaskRemoveFromUnorderedEventList+0x94>)
   23e50:	681b      	ldr	r3, [r3, #0]
   23e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23e54:	429a      	cmp	r2, r3
   23e56:	d902      	bls.n	23e5e <vTaskRemoveFromUnorderedEventList+0x7e>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   23e58:	4b07      	ldr	r3, [pc, #28]	; (23e78 <vTaskRemoveFromUnorderedEventList+0x98>)
   23e5a:	2201      	movs	r2, #1
   23e5c:	601a      	str	r2, [r3, #0]
	}
}
   23e5e:	bf00      	nop
   23e60:	b005      	add	sp, #20
   23e62:	f85d fb04 	ldr.w	pc, [sp], #4
   23e66:	bf00      	nop
   23e68:	10004750 	.word	0x10004750
   23e6c:	10004730 	.word	0x10004730
   23e70:	10004680 	.word	0x10004680
   23e74:	1000467c 	.word	0x1000467c
   23e78:	1000473c 	.word	0x1000473c

00023e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   23e7c:	b082      	sub	sp, #8
   23e7e:	9001      	str	r0, [sp, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   23e80:	4b05      	ldr	r3, [pc, #20]	; (23e98 <vTaskInternalSetTimeOutState+0x1c>)
   23e82:	681a      	ldr	r2, [r3, #0]
   23e84:	9b01      	ldr	r3, [sp, #4]
   23e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   23e88:	4b04      	ldr	r3, [pc, #16]	; (23e9c <vTaskInternalSetTimeOutState+0x20>)
   23e8a:	681a      	ldr	r2, [r3, #0]
   23e8c:	9b01      	ldr	r3, [sp, #4]
   23e8e:	605a      	str	r2, [r3, #4]
}
   23e90:	bf00      	nop
   23e92:	b002      	add	sp, #8
   23e94:	4770      	bx	lr
   23e96:	bf00      	nop
   23e98:	10004740 	.word	0x10004740
   23e9c:	1000472c 	.word	0x1000472c

00023ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   23ea0:	b500      	push	{lr}
   23ea2:	b087      	sub	sp, #28
   23ea4:	9001      	str	r0, [sp, #4]
   23ea6:	9100      	str	r1, [sp, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   23ea8:	9b01      	ldr	r3, [sp, #4]
   23eaa:	2b00      	cmp	r3, #0
   23eac:	d100      	bne.n	23eb0 <xTaskCheckForTimeOut+0x10>
   23eae:	e7fe      	b.n	23eae <xTaskCheckForTimeOut+0xe>
	configASSERT( pxTicksToWait );
   23eb0:	9b00      	ldr	r3, [sp, #0]
   23eb2:	2b00      	cmp	r3, #0
   23eb4:	d100      	bne.n	23eb8 <xTaskCheckForTimeOut+0x18>
   23eb6:	e7fe      	b.n	23eb6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   23eb8:	f7f5 fa7a 	bl	193b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   23ebc:	4b1d      	ldr	r3, [pc, #116]	; (23f34 <xTaskCheckForTimeOut+0x94>)
   23ebe:	681b      	ldr	r3, [r3, #0]
   23ec0:	9304      	str	r3, [sp, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   23ec2:	9b01      	ldr	r3, [sp, #4]
   23ec4:	685b      	ldr	r3, [r3, #4]
   23ec6:	9a04      	ldr	r2, [sp, #16]
   23ec8:	1ad3      	subs	r3, r2, r3
   23eca:	9303      	str	r3, [sp, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   23ecc:	9b00      	ldr	r3, [sp, #0]
   23ece:	681b      	ldr	r3, [r3, #0]
   23ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23ed4:	d102      	bne.n	23edc <xTaskCheckForTimeOut+0x3c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   23ed6:	2300      	movs	r3, #0
   23ed8:	9305      	str	r3, [sp, #20]
   23eda:	e023      	b.n	23f24 <xTaskCheckForTimeOut+0x84>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   23edc:	9b01      	ldr	r3, [sp, #4]
   23ede:	681a      	ldr	r2, [r3, #0]
   23ee0:	4b15      	ldr	r3, [pc, #84]	; (23f38 <xTaskCheckForTimeOut+0x98>)
   23ee2:	681b      	ldr	r3, [r3, #0]
   23ee4:	429a      	cmp	r2, r3
   23ee6:	d007      	beq.n	23ef8 <xTaskCheckForTimeOut+0x58>
   23ee8:	9b01      	ldr	r3, [sp, #4]
   23eea:	685b      	ldr	r3, [r3, #4]
   23eec:	9a04      	ldr	r2, [sp, #16]
   23eee:	429a      	cmp	r2, r3
   23ef0:	d302      	bcc.n	23ef8 <xTaskCheckForTimeOut+0x58>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   23ef2:	2301      	movs	r3, #1
   23ef4:	9305      	str	r3, [sp, #20]
   23ef6:	e015      	b.n	23f24 <xTaskCheckForTimeOut+0x84>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   23ef8:	9b00      	ldr	r3, [sp, #0]
   23efa:	681b      	ldr	r3, [r3, #0]
   23efc:	9a03      	ldr	r2, [sp, #12]
   23efe:	429a      	cmp	r2, r3
   23f00:	d20b      	bcs.n	23f1a <xTaskCheckForTimeOut+0x7a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   23f02:	9b00      	ldr	r3, [sp, #0]
   23f04:	681a      	ldr	r2, [r3, #0]
   23f06:	9b03      	ldr	r3, [sp, #12]
   23f08:	1ad2      	subs	r2, r2, r3
   23f0a:	9b00      	ldr	r3, [sp, #0]
   23f0c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   23f0e:	9801      	ldr	r0, [sp, #4]
   23f10:	f7ff ffb4 	bl	23e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   23f14:	2300      	movs	r3, #0
   23f16:	9305      	str	r3, [sp, #20]
   23f18:	e004      	b.n	23f24 <xTaskCheckForTimeOut+0x84>
		}
		else
		{
			*pxTicksToWait = 0;
   23f1a:	9b00      	ldr	r3, [sp, #0]
   23f1c:	2200      	movs	r2, #0
   23f1e:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   23f20:	2301      	movs	r3, #1
   23f22:	9305      	str	r3, [sp, #20]
		}
	}
	taskEXIT_CRITICAL();
   23f24:	f7f5 fa66 	bl	193f4 <vPortExitCritical>

	return xReturn;
   23f28:	9b05      	ldr	r3, [sp, #20]
}
   23f2a:	4618      	mov	r0, r3
   23f2c:	b007      	add	sp, #28
   23f2e:	f85d fb04 	ldr.w	pc, [sp], #4
   23f32:	bf00      	nop
   23f34:	1000472c 	.word	0x1000472c
   23f38:	10004740 	.word	0x10004740

00023f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
   23f3c:	4b02      	ldr	r3, [pc, #8]	; (23f48 <vTaskMissedYield+0xc>)
   23f3e:	2201      	movs	r2, #1
   23f40:	601a      	str	r2, [r3, #0]
}
   23f42:	bf00      	nop
   23f44:	4770      	bx	lr
   23f46:	bf00      	nop
   23f48:	1000473c 	.word	0x1000473c

00023f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   23f4c:	b500      	push	{lr}
   23f4e:	b085      	sub	sp, #20
   23f50:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   23f52:	f000 f897 	bl	24084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   23f56:	4b13      	ldr	r3, [pc, #76]	; (23fa4 <prvIdleTask+0x58>)
   23f58:	681b      	ldr	r3, [r3, #0]
   23f5a:	2b01      	cmp	r3, #1
   23f5c:	d907      	bls.n	23f6e <prvIdleTask+0x22>
			{
				taskYIELD();
   23f5e:	4b12      	ldr	r3, [pc, #72]	; (23fa8 <prvIdleTask+0x5c>)
   23f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23f64:	601a      	str	r2, [r3, #0]
   23f66:	f3bf 8f4f 	dsb	sy
   23f6a:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   23f6e:	f7ff fc7f 	bl	23870 <prvGetExpectedIdleTime>
   23f72:	9003      	str	r0, [sp, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   23f74:	9b03      	ldr	r3, [sp, #12]
   23f76:	2b01      	cmp	r3, #1
   23f78:	d9eb      	bls.n	23f52 <prvIdleTask+0x6>
			{
				vTaskSuspendAll();
   23f7a:	f7ff fc6f 	bl	2385c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   23f7e:	4b0b      	ldr	r3, [pc, #44]	; (23fac <prvIdleTask+0x60>)
   23f80:	681a      	ldr	r2, [r3, #0]
   23f82:	4b0b      	ldr	r3, [pc, #44]	; (23fb0 <prvIdleTask+0x64>)
   23f84:	681b      	ldr	r3, [r3, #0]
   23f86:	429a      	cmp	r2, r3
   23f88:	d200      	bcs.n	23f8c <prvIdleTask+0x40>
   23f8a:	e7fe      	b.n	23f8a <prvIdleTask+0x3e>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   23f8c:	f7ff fc70 	bl	23870 <prvGetExpectedIdleTime>
   23f90:	9003      	str	r0, [sp, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   23f92:	9b03      	ldr	r3, [sp, #12]
   23f94:	2b01      	cmp	r3, #1
   23f96:	d902      	bls.n	23f9e <prvIdleTask+0x52>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   23f98:	9803      	ldr	r0, [sp, #12]
   23f9a:	f7f5 fad1 	bl	19540 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   23f9e:	f7ff fc99 	bl	238d4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   23fa2:	e7d6      	b.n	23f52 <prvIdleTask+0x6>
   23fa4:	10004680 	.word	0x10004680
   23fa8:	e000ed04 	.word	0xe000ed04
   23fac:	10004748 	.word	0x10004748
   23fb0:	1000472c 	.word	0x1000472c

00023fb4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   23fb4:	b082      	sub	sp, #8
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   23fb6:	2301      	movs	r3, #1
   23fb8:	9300      	str	r3, [sp, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   23fba:	2301      	movs	r3, #1
   23fbc:	f88d 3007 	strb.w	r3, [sp, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   23fc0:	4b0f      	ldr	r3, [pc, #60]	; (24000 <eTaskConfirmSleepModeStatus+0x4c>)
   23fc2:	681b      	ldr	r3, [r3, #0]
   23fc4:	2b00      	cmp	r3, #0
   23fc6:	d003      	beq.n	23fd0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   23fc8:	2300      	movs	r3, #0
   23fca:	f88d 3007 	strb.w	r3, [sp, #7]
   23fce:	e012      	b.n	23ff6 <eTaskConfirmSleepModeStatus+0x42>
		}
		else if( xYieldPending != pdFALSE )
   23fd0:	4b0c      	ldr	r3, [pc, #48]	; (24004 <eTaskConfirmSleepModeStatus+0x50>)
   23fd2:	681b      	ldr	r3, [r3, #0]
   23fd4:	2b00      	cmp	r3, #0
   23fd6:	d003      	beq.n	23fe0 <eTaskConfirmSleepModeStatus+0x2c>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   23fd8:	2300      	movs	r3, #0
   23fda:	f88d 3007 	strb.w	r3, [sp, #7]
   23fde:	e00a      	b.n	23ff6 <eTaskConfirmSleepModeStatus+0x42>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   23fe0:	4b09      	ldr	r3, [pc, #36]	; (24008 <eTaskConfirmSleepModeStatus+0x54>)
   23fe2:	681a      	ldr	r2, [r3, #0]
   23fe4:	4b09      	ldr	r3, [pc, #36]	; (2400c <eTaskConfirmSleepModeStatus+0x58>)
   23fe6:	6819      	ldr	r1, [r3, #0]
   23fe8:	9b00      	ldr	r3, [sp, #0]
   23fea:	1acb      	subs	r3, r1, r3
   23fec:	429a      	cmp	r2, r3
   23fee:	d102      	bne.n	23ff6 <eTaskConfirmSleepModeStatus+0x42>
			{
				eReturn = eNoTasksWaitingTimeout;
   23ff0:	2302      	movs	r3, #2
   23ff2:	f88d 3007 	strb.w	r3, [sp, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   23ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	}
   23ffa:	4618      	mov	r0, r3
   23ffc:	b002      	add	sp, #8
   23ffe:	4770      	bx	lr
   24000:	10004700 	.word	0x10004700
   24004:	1000473c 	.word	0x1000473c
   24008:	10004714 	.word	0x10004714
   2400c:	10004728 	.word	0x10004728

00024010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   24010:	b500      	push	{lr}
   24012:	b083      	sub	sp, #12
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   24014:	2300      	movs	r3, #0
   24016:	9301      	str	r3, [sp, #4]
   24018:	e00c      	b.n	24034 <prvInitialiseTaskLists+0x24>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   2401a:	9a01      	ldr	r2, [sp, #4]
   2401c:	4613      	mov	r3, r2
   2401e:	009b      	lsls	r3, r3, #2
   24020:	4413      	add	r3, r2
   24022:	009b      	lsls	r3, r3, #2
   24024:	4a10      	ldr	r2, [pc, #64]	; (24068 <prvInitialiseTaskLists+0x58>)
   24026:	4413      	add	r3, r2
   24028:	4618      	mov	r0, r3
   2402a:	f7fe fdb4 	bl	22b96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2402e:	9b01      	ldr	r3, [sp, #4]
   24030:	3301      	adds	r3, #1
   24032:	9301      	str	r3, [sp, #4]
   24034:	9b01      	ldr	r3, [sp, #4]
   24036:	2b03      	cmp	r3, #3
   24038:	d9ef      	bls.n	2401a <prvInitialiseTaskLists+0xa>
	}

	vListInitialise( &xDelayedTaskList1 );
   2403a:	480c      	ldr	r0, [pc, #48]	; (2406c <prvInitialiseTaskLists+0x5c>)
   2403c:	f7fe fdab 	bl	22b96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   24040:	480b      	ldr	r0, [pc, #44]	; (24070 <prvInitialiseTaskLists+0x60>)
   24042:	f7fe fda8 	bl	22b96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   24046:	480b      	ldr	r0, [pc, #44]	; (24074 <prvInitialiseTaskLists+0x64>)
   24048:	f7fe fda5 	bl	22b96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   2404c:	480a      	ldr	r0, [pc, #40]	; (24078 <prvInitialiseTaskLists+0x68>)
   2404e:	f7fe fda2 	bl	22b96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   24052:	4b0a      	ldr	r3, [pc, #40]	; (2407c <prvInitialiseTaskLists+0x6c>)
   24054:	4a05      	ldr	r2, [pc, #20]	; (2406c <prvInitialiseTaskLists+0x5c>)
   24056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   24058:	4b09      	ldr	r3, [pc, #36]	; (24080 <prvInitialiseTaskLists+0x70>)
   2405a:	4a05      	ldr	r2, [pc, #20]	; (24070 <prvInitialiseTaskLists+0x60>)
   2405c:	601a      	str	r2, [r3, #0]
}
   2405e:	bf00      	nop
   24060:	b003      	add	sp, #12
   24062:	f85d fb04 	ldr.w	pc, [sp], #4
   24066:	bf00      	nop
   24068:	10004680 	.word	0x10004680
   2406c:	100046d0 	.word	0x100046d0
   24070:	100046e4 	.word	0x100046e4
   24074:	10004700 	.word	0x10004700
   24078:	10004714 	.word	0x10004714
   2407c:	100046f8 	.word	0x100046f8
   24080:	100046fc 	.word	0x100046fc

00024084 <prvCheckTasksWaitingTermination>:

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   24084:	bf00      	nop
   24086:	4770      	bx	lr

00024088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   24088:	b082      	sub	sp, #8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2408a:	4b0b      	ldr	r3, [pc, #44]	; (240b8 <prvResetNextTaskUnblockTime+0x30>)
   2408c:	681b      	ldr	r3, [r3, #0]
   2408e:	681b      	ldr	r3, [r3, #0]
   24090:	2b00      	cmp	r3, #0
   24092:	d104      	bne.n	2409e <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   24094:	4b09      	ldr	r3, [pc, #36]	; (240bc <prvResetNextTaskUnblockTime+0x34>)
   24096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2409a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   2409c:	e008      	b.n	240b0 <prvResetNextTaskUnblockTime+0x28>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2409e:	4b06      	ldr	r3, [pc, #24]	; (240b8 <prvResetNextTaskUnblockTime+0x30>)
   240a0:	681b      	ldr	r3, [r3, #0]
   240a2:	68db      	ldr	r3, [r3, #12]
   240a4:	68db      	ldr	r3, [r3, #12]
   240a6:	9301      	str	r3, [sp, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   240a8:	9b01      	ldr	r3, [sp, #4]
   240aa:	685b      	ldr	r3, [r3, #4]
   240ac:	4a03      	ldr	r2, [pc, #12]	; (240bc <prvResetNextTaskUnblockTime+0x34>)
   240ae:	6013      	str	r3, [r2, #0]
}
   240b0:	bf00      	nop
   240b2:	b002      	add	sp, #8
   240b4:	4770      	bx	lr
   240b6:	bf00      	nop
   240b8:	100046f8 	.word	0x100046f8
   240bc:	10004748 	.word	0x10004748

000240c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   240c0:	b082      	sub	sp, #8
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   240c2:	4b0a      	ldr	r3, [pc, #40]	; (240ec <xTaskGetSchedulerState+0x2c>)
   240c4:	681b      	ldr	r3, [r3, #0]
   240c6:	2b00      	cmp	r3, #0
   240c8:	d102      	bne.n	240d0 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   240ca:	2301      	movs	r3, #1
   240cc:	9301      	str	r3, [sp, #4]
   240ce:	e008      	b.n	240e2 <xTaskGetSchedulerState+0x22>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   240d0:	4b07      	ldr	r3, [pc, #28]	; (240f0 <xTaskGetSchedulerState+0x30>)
   240d2:	681b      	ldr	r3, [r3, #0]
   240d4:	2b00      	cmp	r3, #0
   240d6:	d102      	bne.n	240de <xTaskGetSchedulerState+0x1e>
			{
				xReturn = taskSCHEDULER_RUNNING;
   240d8:	2302      	movs	r3, #2
   240da:	9301      	str	r3, [sp, #4]
   240dc:	e001      	b.n	240e2 <xTaskGetSchedulerState+0x22>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   240de:	2300      	movs	r3, #0
   240e0:	9301      	str	r3, [sp, #4]
			}
		}

		return xReturn;
   240e2:	9b01      	ldr	r3, [sp, #4]
	}
   240e4:	4618      	mov	r0, r3
   240e6:	b002      	add	sp, #8
   240e8:	4770      	bx	lr
   240ea:	bf00      	nop
   240ec:	10004734 	.word	0x10004734
   240f0:	10004750 	.word	0x10004750

000240f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   240f4:	b082      	sub	sp, #8
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   240f6:	4b08      	ldr	r3, [pc, #32]	; (24118 <uxTaskResetEventItemValue+0x24>)
   240f8:	681b      	ldr	r3, [r3, #0]
   240fa:	699b      	ldr	r3, [r3, #24]
   240fc:	9301      	str	r3, [sp, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   240fe:	4b06      	ldr	r3, [pc, #24]	; (24118 <uxTaskResetEventItemValue+0x24>)
   24100:	681b      	ldr	r3, [r3, #0]
   24102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24104:	4b04      	ldr	r3, [pc, #16]	; (24118 <uxTaskResetEventItemValue+0x24>)
   24106:	681b      	ldr	r3, [r3, #0]
   24108:	f1c2 0204 	rsb	r2, r2, #4
   2410c:	619a      	str	r2, [r3, #24]

	return uxReturn;
   2410e:	9b01      	ldr	r3, [sp, #4]
}
   24110:	4618      	mov	r0, r3
   24112:	b002      	add	sp, #8
   24114:	4770      	bx	lr
   24116:	bf00      	nop
   24118:	1000467c 	.word	0x1000467c

0002411c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   2411c:	b500      	push	{lr}
   2411e:	b085      	sub	sp, #20
   24120:	9001      	str	r0, [sp, #4]
   24122:	9100      	str	r1, [sp, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   24124:	4b21      	ldr	r3, [pc, #132]	; (241ac <prvAddCurrentTaskToDelayedList+0x90>)
   24126:	681b      	ldr	r3, [r3, #0]
   24128:	9303      	str	r3, [sp, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2412a:	4b21      	ldr	r3, [pc, #132]	; (241b0 <prvAddCurrentTaskToDelayedList+0x94>)
   2412c:	681b      	ldr	r3, [r3, #0]
   2412e:	3304      	adds	r3, #4
   24130:	4618      	mov	r0, r3
   24132:	f7fe fda6 	bl	22c82 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   24136:	9b01      	ldr	r3, [sp, #4]
   24138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2413c:	d10a      	bne.n	24154 <prvAddCurrentTaskToDelayedList+0x38>
   2413e:	9b00      	ldr	r3, [sp, #0]
   24140:	2b00      	cmp	r3, #0
   24142:	d007      	beq.n	24154 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   24144:	4b1a      	ldr	r3, [pc, #104]	; (241b0 <prvAddCurrentTaskToDelayedList+0x94>)
   24146:	681b      	ldr	r3, [r3, #0]
   24148:	3304      	adds	r3, #4
   2414a:	4619      	mov	r1, r3
   2414c:	4819      	ldr	r0, [pc, #100]	; (241b4 <prvAddCurrentTaskToDelayedList+0x98>)
   2414e:	f7fe fd45 	bl	22bdc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   24152:	e026      	b.n	241a2 <prvAddCurrentTaskToDelayedList+0x86>
			xTimeToWake = xConstTickCount + xTicksToWait;
   24154:	9a03      	ldr	r2, [sp, #12]
   24156:	9b01      	ldr	r3, [sp, #4]
   24158:	4413      	add	r3, r2
   2415a:	9302      	str	r3, [sp, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   2415c:	4b14      	ldr	r3, [pc, #80]	; (241b0 <prvAddCurrentTaskToDelayedList+0x94>)
   2415e:	681b      	ldr	r3, [r3, #0]
   24160:	9a02      	ldr	r2, [sp, #8]
   24162:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   24164:	9a02      	ldr	r2, [sp, #8]
   24166:	9b03      	ldr	r3, [sp, #12]
   24168:	429a      	cmp	r2, r3
   2416a:	d209      	bcs.n	24180 <prvAddCurrentTaskToDelayedList+0x64>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   2416c:	4b12      	ldr	r3, [pc, #72]	; (241b8 <prvAddCurrentTaskToDelayedList+0x9c>)
   2416e:	681a      	ldr	r2, [r3, #0]
   24170:	4b0f      	ldr	r3, [pc, #60]	; (241b0 <prvAddCurrentTaskToDelayedList+0x94>)
   24172:	681b      	ldr	r3, [r3, #0]
   24174:	3304      	adds	r3, #4
   24176:	4619      	mov	r1, r3
   24178:	4610      	mov	r0, r2
   2417a:	f7fe fd4e 	bl	22c1a <vListInsert>
}
   2417e:	e010      	b.n	241a2 <prvAddCurrentTaskToDelayedList+0x86>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   24180:	4b0e      	ldr	r3, [pc, #56]	; (241bc <prvAddCurrentTaskToDelayedList+0xa0>)
   24182:	681a      	ldr	r2, [r3, #0]
   24184:	4b0a      	ldr	r3, [pc, #40]	; (241b0 <prvAddCurrentTaskToDelayedList+0x94>)
   24186:	681b      	ldr	r3, [r3, #0]
   24188:	3304      	adds	r3, #4
   2418a:	4619      	mov	r1, r3
   2418c:	4610      	mov	r0, r2
   2418e:	f7fe fd44 	bl	22c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   24192:	4b0b      	ldr	r3, [pc, #44]	; (241c0 <prvAddCurrentTaskToDelayedList+0xa4>)
   24194:	681b      	ldr	r3, [r3, #0]
   24196:	9a02      	ldr	r2, [sp, #8]
   24198:	429a      	cmp	r2, r3
   2419a:	d202      	bcs.n	241a2 <prvAddCurrentTaskToDelayedList+0x86>
					xNextTaskUnblockTime = xTimeToWake;
   2419c:	4a08      	ldr	r2, [pc, #32]	; (241c0 <prvAddCurrentTaskToDelayedList+0xa4>)
   2419e:	9b02      	ldr	r3, [sp, #8]
   241a0:	6013      	str	r3, [r2, #0]
}
   241a2:	bf00      	nop
   241a4:	b005      	add	sp, #20
   241a6:	f85d fb04 	ldr.w	pc, [sp], #4
   241aa:	bf00      	nop
   241ac:	1000472c 	.word	0x1000472c
   241b0:	1000467c 	.word	0x1000467c
   241b4:	10004714 	.word	0x10004714
   241b8:	100046fc 	.word	0x100046fc
   241bc:	100046f8 	.word	0x100046f8
   241c0:	10004748 	.word	0x10004748

000241c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   241c4:	b500      	push	{lr}
   241c6:	b085      	sub	sp, #20
BaseType_t xReturn = pdFAIL;
   241c8:	2300      	movs	r3, #0
   241ca:	9303      	str	r3, [sp, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   241cc:	f000 fa9c 	bl	24708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   241d0:	4b0c      	ldr	r3, [pc, #48]	; (24204 <xTimerCreateTimerTask+0x40>)
   241d2:	681b      	ldr	r3, [r3, #0]
   241d4:	2b00      	cmp	r3, #0
   241d6:	d00b      	beq.n	241f0 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   241d8:	4b0b      	ldr	r3, [pc, #44]	; (24208 <xTimerCreateTimerTask+0x44>)
   241da:	9301      	str	r3, [sp, #4]
   241dc:	2303      	movs	r3, #3
   241de:	9300      	str	r3, [sp, #0]
   241e0:	2300      	movs	r3, #0
   241e2:	f44f 7280 	mov.w	r2, #256	; 0x100
   241e6:	4909      	ldr	r1, [pc, #36]	; (2420c <xTimerCreateTimerTask+0x48>)
   241e8:	4809      	ldr	r0, [pc, #36]	; (24210 <xTimerCreateTimerTask+0x4c>)
   241ea:	f7ff f961 	bl	234b0 <xTaskCreate>
   241ee:	9003      	str	r0, [sp, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   241f0:	9b03      	ldr	r3, [sp, #12]
   241f2:	2b00      	cmp	r3, #0
   241f4:	d100      	bne.n	241f8 <xTimerCreateTimerTask+0x34>
   241f6:	e7fe      	b.n	241f6 <xTimerCreateTimerTask+0x32>
	return xReturn;
   241f8:	9b03      	ldr	r3, [sp, #12]
}
   241fa:	4618      	mov	r0, r3
   241fc:	b005      	add	sp, #20
   241fe:	f85d fb04 	ldr.w	pc, [sp], #4
   24202:	bf00      	nop
   24204:	10004784 	.word	0x10004784
   24208:	10004788 	.word	0x10004788
   2420c:	0002bf80 	.word	0x0002bf80
   24210:	00024389 	.word	0x00024389

00024214 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   24214:	b500      	push	{lr}
   24216:	b089      	sub	sp, #36	; 0x24
   24218:	9005      	str	r0, [sp, #20]
   2421a:	9104      	str	r1, [sp, #16]
   2421c:	9203      	str	r2, [sp, #12]
   2421e:	9302      	str	r3, [sp, #8]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   24220:	2028      	movs	r0, #40	; 0x28
   24222:	f000 fab9 	bl	24798 <pvPortMalloc>
   24226:	9007      	str	r0, [sp, #28]

		if( pxNewTimer != NULL )
   24228:	9b07      	ldr	r3, [sp, #28]
   2422a:	2b00      	cmp	r3, #0
   2422c:	d009      	beq.n	24242 <xTimerCreate+0x2e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   2422e:	9b07      	ldr	r3, [sp, #28]
   24230:	9301      	str	r3, [sp, #4]
   24232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24234:	9300      	str	r3, [sp, #0]
   24236:	9b02      	ldr	r3, [sp, #8]
   24238:	9a03      	ldr	r2, [sp, #12]
   2423a:	9904      	ldr	r1, [sp, #16]
   2423c:	9805      	ldr	r0, [sp, #20]
   2423e:	f000 f805 	bl	2424c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   24242:	9b07      	ldr	r3, [sp, #28]
	}
   24244:	4618      	mov	r0, r3
   24246:	b009      	add	sp, #36	; 0x24
   24248:	f85d fb04 	ldr.w	pc, [sp], #4

0002424c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   2424c:	b500      	push	{lr}
   2424e:	b085      	sub	sp, #20
   24250:	9003      	str	r0, [sp, #12]
   24252:	9102      	str	r1, [sp, #8]
   24254:	9201      	str	r2, [sp, #4]
   24256:	9300      	str	r3, [sp, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   24258:	9b02      	ldr	r3, [sp, #8]
   2425a:	2b00      	cmp	r3, #0
   2425c:	d100      	bne.n	24260 <prvInitialiseNewTimer+0x14>
   2425e:	e7fe      	b.n	2425e <prvInitialiseNewTimer+0x12>

	if( pxNewTimer != NULL )
   24260:	9b07      	ldr	r3, [sp, #28]
   24262:	2b00      	cmp	r3, #0
   24264:	d015      	beq.n	24292 <prvInitialiseNewTimer+0x46>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   24266:	f000 fa4f 	bl	24708 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   2426a:	9b07      	ldr	r3, [sp, #28]
   2426c:	9a03      	ldr	r2, [sp, #12]
   2426e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   24270:	9b07      	ldr	r3, [sp, #28]
   24272:	9a02      	ldr	r2, [sp, #8]
   24274:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   24276:	9b07      	ldr	r3, [sp, #28]
   24278:	9a01      	ldr	r2, [sp, #4]
   2427a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   2427c:	9b07      	ldr	r3, [sp, #28]
   2427e:	9a00      	ldr	r2, [sp, #0]
   24280:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   24282:	9b07      	ldr	r3, [sp, #28]
   24284:	9a06      	ldr	r2, [sp, #24]
   24286:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   24288:	9b07      	ldr	r3, [sp, #28]
   2428a:	3304      	adds	r3, #4
   2428c:	4618      	mov	r0, r3
   2428e:	f7fe fc9d 	bl	22bcc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   24292:	bf00      	nop
   24294:	b005      	add	sp, #20
   24296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002429c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   2429c:	b500      	push	{lr}
   2429e:	b08b      	sub	sp, #44	; 0x2c
   242a0:	9003      	str	r0, [sp, #12]
   242a2:	9102      	str	r1, [sp, #8]
   242a4:	9201      	str	r2, [sp, #4]
   242a6:	9300      	str	r3, [sp, #0]
BaseType_t xReturn = pdFAIL;
   242a8:	2300      	movs	r3, #0
   242aa:	9309      	str	r3, [sp, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   242ac:	9b03      	ldr	r3, [sp, #12]
   242ae:	2b00      	cmp	r3, #0
   242b0:	d100      	bne.n	242b4 <xTimerGenericCommand+0x18>
   242b2:	e7fe      	b.n	242b2 <xTimerGenericCommand+0x16>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   242b4:	4b18      	ldr	r3, [pc, #96]	; (24318 <xTimerGenericCommand+0x7c>)
   242b6:	681b      	ldr	r3, [r3, #0]
   242b8:	2b00      	cmp	r3, #0
   242ba:	d027      	beq.n	2430c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   242bc:	9b02      	ldr	r3, [sp, #8]
   242be:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   242c0:	9b01      	ldr	r3, [sp, #4]
   242c2:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   242c4:	9b03      	ldr	r3, [sp, #12]
   242c6:	9307      	str	r3, [sp, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   242c8:	9b02      	ldr	r3, [sp, #8]
   242ca:	2b05      	cmp	r3, #5
   242cc:	dc16      	bgt.n	242fc <xTimerGenericCommand+0x60>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   242ce:	f7ff fef7 	bl	240c0 <xTaskGetSchedulerState>
   242d2:	4603      	mov	r3, r0
   242d4:	2b02      	cmp	r3, #2
   242d6:	d108      	bne.n	242ea <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   242d8:	4b0f      	ldr	r3, [pc, #60]	; (24318 <xTimerGenericCommand+0x7c>)
   242da:	6818      	ldr	r0, [r3, #0]
   242dc:	a905      	add	r1, sp, #20
   242de:	2300      	movs	r3, #0
   242e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   242e2:	f7fe fda3 	bl	22e2c <xQueueGenericSend>
   242e6:	9009      	str	r0, [sp, #36]	; 0x24
   242e8:	e010      	b.n	2430c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   242ea:	4b0b      	ldr	r3, [pc, #44]	; (24318 <xTimerGenericCommand+0x7c>)
   242ec:	6818      	ldr	r0, [r3, #0]
   242ee:	a905      	add	r1, sp, #20
   242f0:	2300      	movs	r3, #0
   242f2:	2200      	movs	r2, #0
   242f4:	f7fe fd9a 	bl	22e2c <xQueueGenericSend>
   242f8:	9009      	str	r0, [sp, #36]	; 0x24
   242fa:	e007      	b.n	2430c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   242fc:	4b06      	ldr	r3, [pc, #24]	; (24318 <xTimerGenericCommand+0x7c>)
   242fe:	6818      	ldr	r0, [r3, #0]
   24300:	a905      	add	r1, sp, #20
   24302:	2300      	movs	r3, #0
   24304:	9a00      	ldr	r2, [sp, #0]
   24306:	f7fe fe65 	bl	22fd4 <xQueueGenericSendFromISR>
   2430a:	9009      	str	r0, [sp, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   2430c:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
   2430e:	4618      	mov	r0, r3
   24310:	b00b      	add	sp, #44	; 0x2c
   24312:	f85d fb04 	ldr.w	pc, [sp], #4
   24316:	bf00      	nop
   24318:	10004784 	.word	0x10004784

0002431c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   2431c:	b500      	push	{lr}
   2431e:	b087      	sub	sp, #28
   24320:	9003      	str	r0, [sp, #12]
   24322:	9102      	str	r1, [sp, #8]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   24324:	4b17      	ldr	r3, [pc, #92]	; (24384 <prvProcessExpiredTimer+0x68>)
   24326:	681b      	ldr	r3, [r3, #0]
   24328:	68db      	ldr	r3, [r3, #12]
   2432a:	68db      	ldr	r3, [r3, #12]
   2432c:	9305      	str	r3, [sp, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2432e:	9b05      	ldr	r3, [sp, #20]
   24330:	3304      	adds	r3, #4
   24332:	4618      	mov	r0, r3
   24334:	f7fe fca5 	bl	22c82 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   24338:	9b05      	ldr	r3, [sp, #20]
   2433a:	69db      	ldr	r3, [r3, #28]
   2433c:	2b01      	cmp	r3, #1
   2433e:	d118      	bne.n	24372 <prvProcessExpiredTimer+0x56>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   24340:	9b05      	ldr	r3, [sp, #20]
   24342:	699a      	ldr	r2, [r3, #24]
   24344:	9b03      	ldr	r3, [sp, #12]
   24346:	18d1      	adds	r1, r2, r3
   24348:	9b03      	ldr	r3, [sp, #12]
   2434a:	9a02      	ldr	r2, [sp, #8]
   2434c:	9805      	ldr	r0, [sp, #20]
   2434e:	f000 f8b3 	bl	244b8 <prvInsertTimerInActiveList>
   24352:	4603      	mov	r3, r0
   24354:	2b00      	cmp	r3, #0
   24356:	d00c      	beq.n	24372 <prvProcessExpiredTimer+0x56>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   24358:	2300      	movs	r3, #0
   2435a:	9300      	str	r3, [sp, #0]
   2435c:	2300      	movs	r3, #0
   2435e:	9a03      	ldr	r2, [sp, #12]
   24360:	2100      	movs	r1, #0
   24362:	9805      	ldr	r0, [sp, #20]
   24364:	f7ff ff9a 	bl	2429c <xTimerGenericCommand>
   24368:	9004      	str	r0, [sp, #16]
			configASSERT( xResult );
   2436a:	9b04      	ldr	r3, [sp, #16]
   2436c:	2b00      	cmp	r3, #0
   2436e:	d100      	bne.n	24372 <prvProcessExpiredTimer+0x56>
   24370:	e7fe      	b.n	24370 <prvProcessExpiredTimer+0x54>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   24372:	9b05      	ldr	r3, [sp, #20]
   24374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24376:	9805      	ldr	r0, [sp, #20]
   24378:	4798      	blx	r3
}
   2437a:	bf00      	nop
   2437c:	b007      	add	sp, #28
   2437e:	f85d fb04 	ldr.w	pc, [sp], #4
   24382:	bf00      	nop
   24384:	1000477c 	.word	0x1000477c

00024388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   24388:	b500      	push	{lr}
   2438a:	b085      	sub	sp, #20
   2438c:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   2438e:	ab02      	add	r3, sp, #8
   24390:	4618      	mov	r0, r3
   24392:	f000 f855 	bl	24440 <prvGetNextExpireTime>
   24396:	9003      	str	r0, [sp, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   24398:	9b02      	ldr	r3, [sp, #8]
   2439a:	4619      	mov	r1, r3
   2439c:	9803      	ldr	r0, [sp, #12]
   2439e:	f000 f803 	bl	243a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   243a2:	f000 f8cb 	bl	2453c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   243a6:	e7f2      	b.n	2438e <prvTimerTask+0x6>

000243a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   243a8:	b500      	push	{lr}
   243aa:	b085      	sub	sp, #20
   243ac:	9001      	str	r0, [sp, #4]
   243ae:	9100      	str	r1, [sp, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   243b0:	f7ff fa54 	bl	2385c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   243b4:	ab02      	add	r3, sp, #8
   243b6:	4618      	mov	r0, r3
   243b8:	f000 f860 	bl	2447c <prvSampleTimeNow>
   243bc:	9003      	str	r0, [sp, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   243be:	9b02      	ldr	r3, [sp, #8]
   243c0:	2b00      	cmp	r3, #0
   243c2:	d130      	bne.n	24426 <prvProcessTimerOrBlockTask+0x7e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   243c4:	9b00      	ldr	r3, [sp, #0]
   243c6:	2b00      	cmp	r3, #0
   243c8:	d10a      	bne.n	243e0 <prvProcessTimerOrBlockTask+0x38>
   243ca:	9a01      	ldr	r2, [sp, #4]
   243cc:	9b03      	ldr	r3, [sp, #12]
   243ce:	429a      	cmp	r2, r3
   243d0:	d806      	bhi.n	243e0 <prvProcessTimerOrBlockTask+0x38>
			{
				( void ) xTaskResumeAll();
   243d2:	f7ff fa7f 	bl	238d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   243d6:	9903      	ldr	r1, [sp, #12]
   243d8:	9801      	ldr	r0, [sp, #4]
   243da:	f7ff ff9f 	bl	2431c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   243de:	e024      	b.n	2442a <prvProcessTimerOrBlockTask+0x82>
				if( xListWasEmpty != pdFALSE )
   243e0:	9b00      	ldr	r3, [sp, #0]
   243e2:	2b00      	cmp	r3, #0
   243e4:	d008      	beq.n	243f8 <prvProcessTimerOrBlockTask+0x50>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   243e6:	4b13      	ldr	r3, [pc, #76]	; (24434 <prvProcessTimerOrBlockTask+0x8c>)
   243e8:	681b      	ldr	r3, [r3, #0]
   243ea:	681b      	ldr	r3, [r3, #0]
   243ec:	2b00      	cmp	r3, #0
   243ee:	d101      	bne.n	243f4 <prvProcessTimerOrBlockTask+0x4c>
   243f0:	2301      	movs	r3, #1
   243f2:	e000      	b.n	243f6 <prvProcessTimerOrBlockTask+0x4e>
   243f4:	2300      	movs	r3, #0
   243f6:	9300      	str	r3, [sp, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   243f8:	4b0f      	ldr	r3, [pc, #60]	; (24438 <prvProcessTimerOrBlockTask+0x90>)
   243fa:	6818      	ldr	r0, [r3, #0]
   243fc:	9a01      	ldr	r2, [sp, #4]
   243fe:	9b03      	ldr	r3, [sp, #12]
   24400:	1ad3      	subs	r3, r2, r3
   24402:	9a00      	ldr	r2, [sp, #0]
   24404:	4619      	mov	r1, r3
   24406:	f7ff f820 	bl	2344a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   2440a:	f7ff fa63 	bl	238d4 <xTaskResumeAll>
   2440e:	4603      	mov	r3, r0
   24410:	2b00      	cmp	r3, #0
   24412:	d10a      	bne.n	2442a <prvProcessTimerOrBlockTask+0x82>
					portYIELD_WITHIN_API();
   24414:	4b09      	ldr	r3, [pc, #36]	; (2443c <prvProcessTimerOrBlockTask+0x94>)
   24416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2441a:	601a      	str	r2, [r3, #0]
   2441c:	f3bf 8f4f 	dsb	sy
   24420:	f3bf 8f6f 	isb	sy
}
   24424:	e001      	b.n	2442a <prvProcessTimerOrBlockTask+0x82>
			( void ) xTaskResumeAll();
   24426:	f7ff fa55 	bl	238d4 <xTaskResumeAll>
}
   2442a:	bf00      	nop
   2442c:	b005      	add	sp, #20
   2442e:	f85d fb04 	ldr.w	pc, [sp], #4
   24432:	bf00      	nop
   24434:	10004780 	.word	0x10004780
   24438:	10004784 	.word	0x10004784
   2443c:	e000ed04 	.word	0xe000ed04

00024440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   24440:	b084      	sub	sp, #16
   24442:	9001      	str	r0, [sp, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   24444:	4b0c      	ldr	r3, [pc, #48]	; (24478 <prvGetNextExpireTime+0x38>)
   24446:	681b      	ldr	r3, [r3, #0]
   24448:	681b      	ldr	r3, [r3, #0]
   2444a:	2b00      	cmp	r3, #0
   2444c:	d101      	bne.n	24452 <prvGetNextExpireTime+0x12>
   2444e:	2201      	movs	r2, #1
   24450:	e000      	b.n	24454 <prvGetNextExpireTime+0x14>
   24452:	2200      	movs	r2, #0
   24454:	9b01      	ldr	r3, [sp, #4]
   24456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   24458:	9b01      	ldr	r3, [sp, #4]
   2445a:	681b      	ldr	r3, [r3, #0]
   2445c:	2b00      	cmp	r3, #0
   2445e:	d105      	bne.n	2446c <prvGetNextExpireTime+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   24460:	4b05      	ldr	r3, [pc, #20]	; (24478 <prvGetNextExpireTime+0x38>)
   24462:	681b      	ldr	r3, [r3, #0]
   24464:	68db      	ldr	r3, [r3, #12]
   24466:	681b      	ldr	r3, [r3, #0]
   24468:	9303      	str	r3, [sp, #12]
   2446a:	e001      	b.n	24470 <prvGetNextExpireTime+0x30>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   2446c:	2300      	movs	r3, #0
   2446e:	9303      	str	r3, [sp, #12]
	}

	return xNextExpireTime;
   24470:	9b03      	ldr	r3, [sp, #12]
}
   24472:	4618      	mov	r0, r3
   24474:	b004      	add	sp, #16
   24476:	4770      	bx	lr
   24478:	1000477c 	.word	0x1000477c

0002447c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   2447c:	b500      	push	{lr}
   2447e:	b085      	sub	sp, #20
   24480:	9001      	str	r0, [sp, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   24482:	f7ff fab9 	bl	239f8 <xTaskGetTickCount>
   24486:	9003      	str	r0, [sp, #12]

	if( xTimeNow < xLastTime )
   24488:	4b0a      	ldr	r3, [pc, #40]	; (244b4 <prvSampleTimeNow+0x38>)
   2448a:	681b      	ldr	r3, [r3, #0]
   2448c:	9a03      	ldr	r2, [sp, #12]
   2448e:	429a      	cmp	r2, r3
   24490:	d205      	bcs.n	2449e <prvSampleTimeNow+0x22>
	{
		prvSwitchTimerLists();
   24492:	f000 f8e3 	bl	2465c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   24496:	9b01      	ldr	r3, [sp, #4]
   24498:	2201      	movs	r2, #1
   2449a:	601a      	str	r2, [r3, #0]
   2449c:	e002      	b.n	244a4 <prvSampleTimeNow+0x28>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2449e:	9b01      	ldr	r3, [sp, #4]
   244a0:	2200      	movs	r2, #0
   244a2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   244a4:	4a03      	ldr	r2, [pc, #12]	; (244b4 <prvSampleTimeNow+0x38>)
   244a6:	9b03      	ldr	r3, [sp, #12]
   244a8:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   244aa:	9b03      	ldr	r3, [sp, #12]
}
   244ac:	4618      	mov	r0, r3
   244ae:	b005      	add	sp, #20
   244b0:	f85d fb04 	ldr.w	pc, [sp], #4
   244b4:	1000478c 	.word	0x1000478c

000244b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   244b8:	b500      	push	{lr}
   244ba:	b087      	sub	sp, #28
   244bc:	9003      	str	r0, [sp, #12]
   244be:	9102      	str	r1, [sp, #8]
   244c0:	9201      	str	r2, [sp, #4]
   244c2:	9300      	str	r3, [sp, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   244c4:	2300      	movs	r3, #0
   244c6:	9305      	str	r3, [sp, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   244c8:	9b03      	ldr	r3, [sp, #12]
   244ca:	9a02      	ldr	r2, [sp, #8]
   244cc:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   244ce:	9b03      	ldr	r3, [sp, #12]
   244d0:	9a03      	ldr	r2, [sp, #12]
   244d2:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   244d4:	9a02      	ldr	r2, [sp, #8]
   244d6:	9b01      	ldr	r3, [sp, #4]
   244d8:	429a      	cmp	r2, r3
   244da:	d812      	bhi.n	24502 <prvInsertTimerInActiveList+0x4a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   244dc:	9a01      	ldr	r2, [sp, #4]
   244de:	9b00      	ldr	r3, [sp, #0]
   244e0:	1ad2      	subs	r2, r2, r3
   244e2:	9b03      	ldr	r3, [sp, #12]
   244e4:	699b      	ldr	r3, [r3, #24]
   244e6:	429a      	cmp	r2, r3
   244e8:	d302      	bcc.n	244f0 <prvInsertTimerInActiveList+0x38>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   244ea:	2301      	movs	r3, #1
   244ec:	9305      	str	r3, [sp, #20]
   244ee:	e01b      	b.n	24528 <prvInsertTimerInActiveList+0x70>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   244f0:	4b10      	ldr	r3, [pc, #64]	; (24534 <prvInsertTimerInActiveList+0x7c>)
   244f2:	681a      	ldr	r2, [r3, #0]
   244f4:	9b03      	ldr	r3, [sp, #12]
   244f6:	3304      	adds	r3, #4
   244f8:	4619      	mov	r1, r3
   244fa:	4610      	mov	r0, r2
   244fc:	f7fe fb8d 	bl	22c1a <vListInsert>
   24500:	e012      	b.n	24528 <prvInsertTimerInActiveList+0x70>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   24502:	9a01      	ldr	r2, [sp, #4]
   24504:	9b00      	ldr	r3, [sp, #0]
   24506:	429a      	cmp	r2, r3
   24508:	d206      	bcs.n	24518 <prvInsertTimerInActiveList+0x60>
   2450a:	9a02      	ldr	r2, [sp, #8]
   2450c:	9b00      	ldr	r3, [sp, #0]
   2450e:	429a      	cmp	r2, r3
   24510:	d302      	bcc.n	24518 <prvInsertTimerInActiveList+0x60>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   24512:	2301      	movs	r3, #1
   24514:	9305      	str	r3, [sp, #20]
   24516:	e007      	b.n	24528 <prvInsertTimerInActiveList+0x70>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   24518:	4b07      	ldr	r3, [pc, #28]	; (24538 <prvInsertTimerInActiveList+0x80>)
   2451a:	681a      	ldr	r2, [r3, #0]
   2451c:	9b03      	ldr	r3, [sp, #12]
   2451e:	3304      	adds	r3, #4
   24520:	4619      	mov	r1, r3
   24522:	4610      	mov	r0, r2
   24524:	f7fe fb79 	bl	22c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
   24528:	9b05      	ldr	r3, [sp, #20]
}
   2452a:	4618      	mov	r0, r3
   2452c:	b007      	add	sp, #28
   2452e:	f85d fb04 	ldr.w	pc, [sp], #4
   24532:	bf00      	nop
   24534:	10004780 	.word	0x10004780
   24538:	1000477c 	.word	0x1000477c

0002453c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   2453c:	b500      	push	{lr}
   2453e:	b08d      	sub	sp, #52	; 0x34
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   24540:	e079      	b.n	24636 <prvProcessReceivedCommands+0xfa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   24542:	9b04      	ldr	r3, [sp, #16]
   24544:	2b00      	cmp	r3, #0
   24546:	da0e      	bge.n	24566 <prvProcessReceivedCommands+0x2a>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   24548:	ab04      	add	r3, sp, #16
   2454a:	3304      	adds	r3, #4
   2454c:	930b      	str	r3, [sp, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   2454e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24550:	2b00      	cmp	r3, #0
   24552:	d100      	bne.n	24556 <prvProcessReceivedCommands+0x1a>
   24554:	e7fe      	b.n	24554 <prvProcessReceivedCommands+0x18>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   24556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24558:	681b      	ldr	r3, [r3, #0]
   2455a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2455c:	6850      	ldr	r0, [r2, #4]
   2455e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24560:	6892      	ldr	r2, [r2, #8]
   24562:	4611      	mov	r1, r2
   24564:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   24566:	9b04      	ldr	r3, [sp, #16]
   24568:	2b00      	cmp	r3, #0
   2456a:	db63      	blt.n	24634 <prvProcessReceivedCommands+0xf8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   2456c:	9b06      	ldr	r3, [sp, #24]
   2456e:	930a      	str	r3, [sp, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   24570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24572:	695b      	ldr	r3, [r3, #20]
   24574:	2b00      	cmp	r3, #0
   24576:	d004      	beq.n	24582 <prvProcessReceivedCommands+0x46>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   24578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2457a:	3304      	adds	r3, #4
   2457c:	4618      	mov	r0, r3
   2457e:	f7fe fb80 	bl	22c82 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   24582:	ab03      	add	r3, sp, #12
   24584:	4618      	mov	r0, r3
   24586:	f7ff ff79 	bl	2447c <prvSampleTimeNow>
   2458a:	9009      	str	r0, [sp, #36]	; 0x24

			switch( xMessage.xMessageID )
   2458c:	9b04      	ldr	r3, [sp, #16]
   2458e:	2b09      	cmp	r3, #9
   24590:	d851      	bhi.n	24636 <prvProcessReceivedCommands+0xfa>
   24592:	a201      	add	r2, pc, #4	; (adr r2, 24598 <prvProcessReceivedCommands+0x5c>)
   24594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24598:	000245c1 	.word	0x000245c1
   2459c:	000245c1 	.word	0x000245c1
   245a0:	000245c1 	.word	0x000245c1
   245a4:	00024637 	.word	0x00024637
   245a8:	00024609 	.word	0x00024609
   245ac:	0002462d 	.word	0x0002462d
   245b0:	000245c1 	.word	0x000245c1
   245b4:	000245c1 	.word	0x000245c1
   245b8:	00024637 	.word	0x00024637
   245bc:	00024609 	.word	0x00024609
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   245c0:	9a05      	ldr	r2, [sp, #20]
   245c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   245c4:	699b      	ldr	r3, [r3, #24]
   245c6:	18d1      	adds	r1, r2, r3
   245c8:	9b05      	ldr	r3, [sp, #20]
   245ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   245cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   245ce:	f7ff ff73 	bl	244b8 <prvInsertTimerInActiveList>
   245d2:	4603      	mov	r3, r0
   245d4:	2b00      	cmp	r3, #0
   245d6:	d02e      	beq.n	24636 <prvProcessReceivedCommands+0xfa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   245d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   245da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   245dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   245de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   245e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   245e2:	69db      	ldr	r3, [r3, #28]
   245e4:	2b01      	cmp	r3, #1
   245e6:	d126      	bne.n	24636 <prvProcessReceivedCommands+0xfa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   245e8:	9a05      	ldr	r2, [sp, #20]
   245ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   245ec:	699b      	ldr	r3, [r3, #24]
   245ee:	441a      	add	r2, r3
   245f0:	2300      	movs	r3, #0
   245f2:	9300      	str	r3, [sp, #0]
   245f4:	2300      	movs	r3, #0
   245f6:	2100      	movs	r1, #0
   245f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   245fa:	f7ff fe4f 	bl	2429c <xTimerGenericCommand>
   245fe:	9008      	str	r0, [sp, #32]
							configASSERT( xResult );
   24600:	9b08      	ldr	r3, [sp, #32]
   24602:	2b00      	cmp	r3, #0
   24604:	d117      	bne.n	24636 <prvProcessReceivedCommands+0xfa>
   24606:	e7fe      	b.n	24606 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   24608:	9a05      	ldr	r2, [sp, #20]
   2460a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2460c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   2460e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24610:	699b      	ldr	r3, [r3, #24]
   24612:	2b00      	cmp	r3, #0
   24614:	d100      	bne.n	24618 <prvProcessReceivedCommands+0xdc>
   24616:	e7fe      	b.n	24616 <prvProcessReceivedCommands+0xda>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   24618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2461a:	699a      	ldr	r2, [r3, #24]
   2461c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2461e:	18d1      	adds	r1, r2, r3
   24620:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24622:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24624:	980a      	ldr	r0, [sp, #40]	; 0x28
   24626:	f7ff ff47 	bl	244b8 <prvInsertTimerInActiveList>
					break;
   2462a:	e004      	b.n	24636 <prvProcessReceivedCommands+0xfa>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   2462c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2462e:	f000 f945 	bl	248bc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   24632:	e000      	b.n	24636 <prvProcessReceivedCommands+0xfa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
   24634:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   24636:	4b08      	ldr	r3, [pc, #32]	; (24658 <prvProcessReceivedCommands+0x11c>)
   24638:	681b      	ldr	r3, [r3, #0]
   2463a:	a904      	add	r1, sp, #16
   2463c:	2200      	movs	r2, #0
   2463e:	4618      	mov	r0, r3
   24640:	f7fe fd42 	bl	230c8 <xQueueReceive>
   24644:	4603      	mov	r3, r0
   24646:	2b00      	cmp	r3, #0
   24648:	f47f af7b 	bne.w	24542 <prvProcessReceivedCommands+0x6>
	}
}
   2464c:	bf00      	nop
   2464e:	bf00      	nop
   24650:	b00d      	add	sp, #52	; 0x34
   24652:	f85d fb04 	ldr.w	pc, [sp], #4
   24656:	bf00      	nop
   24658:	10004784 	.word	0x10004784

0002465c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   2465c:	b500      	push	{lr}
   2465e:	b089      	sub	sp, #36	; 0x24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   24660:	e03b      	b.n	246da <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   24662:	4b27      	ldr	r3, [pc, #156]	; (24700 <prvSwitchTimerLists+0xa4>)
   24664:	681b      	ldr	r3, [r3, #0]
   24666:	68db      	ldr	r3, [r3, #12]
   24668:	681b      	ldr	r3, [r3, #0]
   2466a:	9306      	str	r3, [sp, #24]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2466c:	4b24      	ldr	r3, [pc, #144]	; (24700 <prvSwitchTimerLists+0xa4>)
   2466e:	681b      	ldr	r3, [r3, #0]
   24670:	68db      	ldr	r3, [r3, #12]
   24672:	68db      	ldr	r3, [r3, #12]
   24674:	9305      	str	r3, [sp, #20]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   24676:	9b05      	ldr	r3, [sp, #20]
   24678:	3304      	adds	r3, #4
   2467a:	4618      	mov	r0, r3
   2467c:	f7fe fb01 	bl	22c82 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   24680:	9b05      	ldr	r3, [sp, #20]
   24682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24684:	9805      	ldr	r0, [sp, #20]
   24686:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   24688:	9b05      	ldr	r3, [sp, #20]
   2468a:	69db      	ldr	r3, [r3, #28]
   2468c:	2b01      	cmp	r3, #1
   2468e:	d124      	bne.n	246da <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   24690:	9b05      	ldr	r3, [sp, #20]
   24692:	699b      	ldr	r3, [r3, #24]
   24694:	9a06      	ldr	r2, [sp, #24]
   24696:	4413      	add	r3, r2
   24698:	9304      	str	r3, [sp, #16]
			if( xReloadTime > xNextExpireTime )
   2469a:	9a04      	ldr	r2, [sp, #16]
   2469c:	9b06      	ldr	r3, [sp, #24]
   2469e:	429a      	cmp	r2, r3
   246a0:	d90e      	bls.n	246c0 <prvSwitchTimerLists+0x64>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   246a2:	9b05      	ldr	r3, [sp, #20]
   246a4:	9a04      	ldr	r2, [sp, #16]
   246a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   246a8:	9b05      	ldr	r3, [sp, #20]
   246aa:	9a05      	ldr	r2, [sp, #20]
   246ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   246ae:	4b14      	ldr	r3, [pc, #80]	; (24700 <prvSwitchTimerLists+0xa4>)
   246b0:	681a      	ldr	r2, [r3, #0]
   246b2:	9b05      	ldr	r3, [sp, #20]
   246b4:	3304      	adds	r3, #4
   246b6:	4619      	mov	r1, r3
   246b8:	4610      	mov	r0, r2
   246ba:	f7fe faae 	bl	22c1a <vListInsert>
   246be:	e00c      	b.n	246da <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   246c0:	2300      	movs	r3, #0
   246c2:	9300      	str	r3, [sp, #0]
   246c4:	2300      	movs	r3, #0
   246c6:	9a06      	ldr	r2, [sp, #24]
   246c8:	2100      	movs	r1, #0
   246ca:	9805      	ldr	r0, [sp, #20]
   246cc:	f7ff fde6 	bl	2429c <xTimerGenericCommand>
   246d0:	9003      	str	r0, [sp, #12]
				configASSERT( xResult );
   246d2:	9b03      	ldr	r3, [sp, #12]
   246d4:	2b00      	cmp	r3, #0
   246d6:	d100      	bne.n	246da <prvSwitchTimerLists+0x7e>
   246d8:	e7fe      	b.n	246d8 <prvSwitchTimerLists+0x7c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   246da:	4b09      	ldr	r3, [pc, #36]	; (24700 <prvSwitchTimerLists+0xa4>)
   246dc:	681b      	ldr	r3, [r3, #0]
   246de:	681b      	ldr	r3, [r3, #0]
   246e0:	2b00      	cmp	r3, #0
   246e2:	d1be      	bne.n	24662 <prvSwitchTimerLists+0x6>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   246e4:	4b06      	ldr	r3, [pc, #24]	; (24700 <prvSwitchTimerLists+0xa4>)
   246e6:	681b      	ldr	r3, [r3, #0]
   246e8:	9307      	str	r3, [sp, #28]
	pxCurrentTimerList = pxOverflowTimerList;
   246ea:	4b06      	ldr	r3, [pc, #24]	; (24704 <prvSwitchTimerLists+0xa8>)
   246ec:	681b      	ldr	r3, [r3, #0]
   246ee:	4a04      	ldr	r2, [pc, #16]	; (24700 <prvSwitchTimerLists+0xa4>)
   246f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   246f2:	4a04      	ldr	r2, [pc, #16]	; (24704 <prvSwitchTimerLists+0xa8>)
   246f4:	9b07      	ldr	r3, [sp, #28]
   246f6:	6013      	str	r3, [r2, #0]
}
   246f8:	bf00      	nop
   246fa:	b009      	add	sp, #36	; 0x24
   246fc:	f85d fb04 	ldr.w	pc, [sp], #4
   24700:	1000477c 	.word	0x1000477c
   24704:	10004780 	.word	0x10004780

00024708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   24708:	b508      	push	{r3, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   2470a:	f7f4 fe51 	bl	193b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   2470e:	4b0e      	ldr	r3, [pc, #56]	; (24748 <prvCheckForValidListAndQueue+0x40>)
   24710:	681b      	ldr	r3, [r3, #0]
   24712:	2b00      	cmp	r3, #0
   24714:	d113      	bne.n	2473e <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
   24716:	480d      	ldr	r0, [pc, #52]	; (2474c <prvCheckForValidListAndQueue+0x44>)
   24718:	f7fe fa3d 	bl	22b96 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   2471c:	480c      	ldr	r0, [pc, #48]	; (24750 <prvCheckForValidListAndQueue+0x48>)
   2471e:	f7fe fa3a 	bl	22b96 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   24722:	4b0c      	ldr	r3, [pc, #48]	; (24754 <prvCheckForValidListAndQueue+0x4c>)
   24724:	4a09      	ldr	r2, [pc, #36]	; (2474c <prvCheckForValidListAndQueue+0x44>)
   24726:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   24728:	4b0b      	ldr	r3, [pc, #44]	; (24758 <prvCheckForValidListAndQueue+0x50>)
   2472a:	4a09      	ldr	r2, [pc, #36]	; (24750 <prvCheckForValidListAndQueue+0x48>)
   2472c:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   2472e:	2200      	movs	r2, #0
   24730:	2110      	movs	r1, #16
   24732:	2005      	movs	r0, #5
   24734:	f7fe fb28 	bl	22d88 <xQueueGenericCreate>
   24738:	4603      	mov	r3, r0
   2473a:	4a03      	ldr	r2, [pc, #12]	; (24748 <prvCheckForValidListAndQueue+0x40>)
   2473c:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   2473e:	f7f4 fe59 	bl	193f4 <vPortExitCritical>
}
   24742:	bf00      	nop
   24744:	bd08      	pop	{r3, pc}
   24746:	bf00      	nop
   24748:	10004784 	.word	0x10004784
   2474c:	10004754 	.word	0x10004754
   24750:	10004768 	.word	0x10004768
   24754:	1000477c 	.word	0x1000477c
   24758:	10004780 	.word	0x10004780

0002475c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   2475c:	b500      	push	{lr}
   2475e:	b08b      	sub	sp, #44	; 0x2c
   24760:	9003      	str	r0, [sp, #12]
   24762:	9102      	str	r1, [sp, #8]
   24764:	9201      	str	r2, [sp, #4]
   24766:	9300      	str	r3, [sp, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   24768:	f06f 0301 	mvn.w	r3, #1
   2476c:	9305      	str	r3, [sp, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   2476e:	9b03      	ldr	r3, [sp, #12]
   24770:	9306      	str	r3, [sp, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   24772:	9b02      	ldr	r3, [sp, #8]
   24774:	9307      	str	r3, [sp, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   24776:	9b01      	ldr	r3, [sp, #4]
   24778:	9308      	str	r3, [sp, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   2477a:	4b06      	ldr	r3, [pc, #24]	; (24794 <xTimerPendFunctionCallFromISR+0x38>)
   2477c:	6818      	ldr	r0, [r3, #0]
   2477e:	a905      	add	r1, sp, #20
   24780:	2300      	movs	r3, #0
   24782:	9a00      	ldr	r2, [sp, #0]
   24784:	f7fe fc26 	bl	22fd4 <xQueueGenericSendFromISR>
   24788:	9009      	str	r0, [sp, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   2478a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
   2478c:	4618      	mov	r0, r3
   2478e:	b00b      	add	sp, #44	; 0x2c
   24790:	f85d fb04 	ldr.w	pc, [sp], #4
   24794:	10004784 	.word	0x10004784

00024798 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   24798:	b500      	push	{lr}
   2479a:	b089      	sub	sp, #36	; 0x24
   2479c:	9001      	str	r0, [sp, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   2479e:	2300      	movs	r3, #0
   247a0:	9305      	str	r3, [sp, #20]

	vTaskSuspendAll();
   247a2:	f7ff f85b 	bl	2385c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   247a6:	4b41      	ldr	r3, [pc, #260]	; (248ac <pvPortMalloc+0x114>)
   247a8:	681b      	ldr	r3, [r3, #0]
   247aa:	2b00      	cmp	r3, #0
   247ac:	d104      	bne.n	247b8 <pvPortMalloc+0x20>
		{
			prvHeapInit();
   247ae:	f000 f8bd 	bl	2492c <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   247b2:	4b3e      	ldr	r3, [pc, #248]	; (248ac <pvPortMalloc+0x114>)
   247b4:	2201      	movs	r2, #1
   247b6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   247b8:	9b01      	ldr	r3, [sp, #4]
   247ba:	2b00      	cmp	r3, #0
   247bc:	d00e      	beq.n	247dc <pvPortMalloc+0x44>
		{
			xWantedSize += heapSTRUCT_SIZE;
   247be:	2308      	movs	r3, #8
   247c0:	461a      	mov	r2, r3
   247c2:	9b01      	ldr	r3, [sp, #4]
   247c4:	4413      	add	r3, r2
   247c6:	9301      	str	r3, [sp, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   247c8:	9b01      	ldr	r3, [sp, #4]
   247ca:	f003 0307 	and.w	r3, r3, #7
   247ce:	2b00      	cmp	r3, #0
   247d0:	d004      	beq.n	247dc <pvPortMalloc+0x44>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   247d2:	9b01      	ldr	r3, [sp, #4]
   247d4:	f023 0307 	bic.w	r3, r3, #7
   247d8:	3308      	adds	r3, #8
   247da:	9301      	str	r3, [sp, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   247dc:	9b01      	ldr	r3, [sp, #4]
   247de:	2b00      	cmp	r3, #0
   247e0:	d057      	beq.n	24892 <pvPortMalloc+0xfa>
   247e2:	9b01      	ldr	r3, [sp, #4]
   247e4:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   247e8:	4293      	cmp	r3, r2
   247ea:	d852      	bhi.n	24892 <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   247ec:	4b30      	ldr	r3, [pc, #192]	; (248b0 <pvPortMalloc+0x118>)
   247ee:	9306      	str	r3, [sp, #24]
			pxBlock = xStart.pxNextFreeBlock;
   247f0:	4b2f      	ldr	r3, [pc, #188]	; (248b0 <pvPortMalloc+0x118>)
   247f2:	681b      	ldr	r3, [r3, #0]
   247f4:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   247f6:	e004      	b.n	24802 <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
   247f8:	9b07      	ldr	r3, [sp, #28]
   247fa:	9306      	str	r3, [sp, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   247fc:	9b07      	ldr	r3, [sp, #28]
   247fe:	681b      	ldr	r3, [r3, #0]
   24800:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   24802:	9b07      	ldr	r3, [sp, #28]
   24804:	685b      	ldr	r3, [r3, #4]
   24806:	9a01      	ldr	r2, [sp, #4]
   24808:	429a      	cmp	r2, r3
   2480a:	d903      	bls.n	24814 <pvPortMalloc+0x7c>
   2480c:	9b07      	ldr	r3, [sp, #28]
   2480e:	681b      	ldr	r3, [r3, #0]
   24810:	2b00      	cmp	r3, #0
   24812:	d1f1      	bne.n	247f8 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   24814:	9b07      	ldr	r3, [sp, #28]
   24816:	4a27      	ldr	r2, [pc, #156]	; (248b4 <pvPortMalloc+0x11c>)
   24818:	4293      	cmp	r3, r2
   2481a:	d03a      	beq.n	24892 <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   2481c:	9b06      	ldr	r3, [sp, #24]
   2481e:	681b      	ldr	r3, [r3, #0]
   24820:	2208      	movs	r2, #8
   24822:	4413      	add	r3, r2
   24824:	9305      	str	r3, [sp, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   24826:	9b07      	ldr	r3, [sp, #28]
   24828:	681a      	ldr	r2, [r3, #0]
   2482a:	9b06      	ldr	r3, [sp, #24]
   2482c:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   2482e:	9b07      	ldr	r3, [sp, #28]
   24830:	685a      	ldr	r2, [r3, #4]
   24832:	9b01      	ldr	r3, [sp, #4]
   24834:	1ad3      	subs	r3, r2, r3
   24836:	2208      	movs	r2, #8
   24838:	0052      	lsls	r2, r2, #1
   2483a:	4293      	cmp	r3, r2
   2483c:	d922      	bls.n	24884 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   2483e:	9a07      	ldr	r2, [sp, #28]
   24840:	9b01      	ldr	r3, [sp, #4]
   24842:	4413      	add	r3, r2
   24844:	9303      	str	r3, [sp, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   24846:	9b07      	ldr	r3, [sp, #28]
   24848:	685a      	ldr	r2, [r3, #4]
   2484a:	9b01      	ldr	r3, [sp, #4]
   2484c:	1ad2      	subs	r2, r2, r3
   2484e:	9b03      	ldr	r3, [sp, #12]
   24850:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   24852:	9b07      	ldr	r3, [sp, #28]
   24854:	9a01      	ldr	r2, [sp, #4]
   24856:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   24858:	9b03      	ldr	r3, [sp, #12]
   2485a:	685b      	ldr	r3, [r3, #4]
   2485c:	9302      	str	r3, [sp, #8]
   2485e:	4b14      	ldr	r3, [pc, #80]	; (248b0 <pvPortMalloc+0x118>)
   24860:	9304      	str	r3, [sp, #16]
   24862:	e002      	b.n	2486a <pvPortMalloc+0xd2>
   24864:	9b04      	ldr	r3, [sp, #16]
   24866:	681b      	ldr	r3, [r3, #0]
   24868:	9304      	str	r3, [sp, #16]
   2486a:	9b04      	ldr	r3, [sp, #16]
   2486c:	681b      	ldr	r3, [r3, #0]
   2486e:	685b      	ldr	r3, [r3, #4]
   24870:	9a02      	ldr	r2, [sp, #8]
   24872:	429a      	cmp	r2, r3
   24874:	d8f6      	bhi.n	24864 <pvPortMalloc+0xcc>
   24876:	9b04      	ldr	r3, [sp, #16]
   24878:	681a      	ldr	r2, [r3, #0]
   2487a:	9b03      	ldr	r3, [sp, #12]
   2487c:	601a      	str	r2, [r3, #0]
   2487e:	9b04      	ldr	r3, [sp, #16]
   24880:	9a03      	ldr	r2, [sp, #12]
   24882:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   24884:	4b0c      	ldr	r3, [pc, #48]	; (248b8 <pvPortMalloc+0x120>)
   24886:	681a      	ldr	r2, [r3, #0]
   24888:	9b07      	ldr	r3, [sp, #28]
   2488a:	685b      	ldr	r3, [r3, #4]
   2488c:	1ad3      	subs	r3, r2, r3
   2488e:	4a0a      	ldr	r2, [pc, #40]	; (248b8 <pvPortMalloc+0x120>)
   24890:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   24892:	f7ff f81f 	bl	238d4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   24896:	9b05      	ldr	r3, [sp, #20]
   24898:	2b00      	cmp	r3, #0
   2489a:	d101      	bne.n	248a0 <pvPortMalloc+0x108>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   2489c:	f7e8 facc 	bl	ce38 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   248a0:	9b05      	ldr	r3, [sp, #20]
}
   248a2:	4618      	mov	r0, r3
   248a4:	b009      	add	sp, #36	; 0x24
   248a6:	f85d fb04 	ldr.w	pc, [sp], #4
   248aa:	bf00      	nop
   248ac:	100087a0 	.word	0x100087a0
   248b0:	10008790 	.word	0x10008790
   248b4:	10008798 	.word	0x10008798
   248b8:	10002bd8 	.word	0x10002bd8

000248bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   248bc:	b500      	push	{lr}
   248be:	b087      	sub	sp, #28
   248c0:	9001      	str	r0, [sp, #4]
uint8_t *puc = ( uint8_t * ) pv;
   248c2:	9b01      	ldr	r3, [sp, #4]
   248c4:	9304      	str	r3, [sp, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   248c6:	9b01      	ldr	r3, [sp, #4]
   248c8:	2b00      	cmp	r3, #0
   248ca:	d027      	beq.n	2491c <vPortFree+0x60>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   248cc:	2308      	movs	r3, #8
   248ce:	425b      	negs	r3, r3
   248d0:	9a04      	ldr	r2, [sp, #16]
   248d2:	4413      	add	r3, r2
   248d4:	9304      	str	r3, [sp, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   248d6:	9b04      	ldr	r3, [sp, #16]
   248d8:	9303      	str	r3, [sp, #12]

		vTaskSuspendAll();
   248da:	f7fe ffbf 	bl	2385c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   248de:	9b03      	ldr	r3, [sp, #12]
   248e0:	685b      	ldr	r3, [r3, #4]
   248e2:	9302      	str	r3, [sp, #8]
   248e4:	4b0f      	ldr	r3, [pc, #60]	; (24924 <vPortFree+0x68>)
   248e6:	9305      	str	r3, [sp, #20]
   248e8:	e002      	b.n	248f0 <vPortFree+0x34>
   248ea:	9b05      	ldr	r3, [sp, #20]
   248ec:	681b      	ldr	r3, [r3, #0]
   248ee:	9305      	str	r3, [sp, #20]
   248f0:	9b05      	ldr	r3, [sp, #20]
   248f2:	681b      	ldr	r3, [r3, #0]
   248f4:	685b      	ldr	r3, [r3, #4]
   248f6:	9a02      	ldr	r2, [sp, #8]
   248f8:	429a      	cmp	r2, r3
   248fa:	d8f6      	bhi.n	248ea <vPortFree+0x2e>
   248fc:	9b05      	ldr	r3, [sp, #20]
   248fe:	681a      	ldr	r2, [r3, #0]
   24900:	9b03      	ldr	r3, [sp, #12]
   24902:	601a      	str	r2, [r3, #0]
   24904:	9b05      	ldr	r3, [sp, #20]
   24906:	9a03      	ldr	r2, [sp, #12]
   24908:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   2490a:	9b03      	ldr	r3, [sp, #12]
   2490c:	685a      	ldr	r2, [r3, #4]
   2490e:	4b06      	ldr	r3, [pc, #24]	; (24928 <vPortFree+0x6c>)
   24910:	681b      	ldr	r3, [r3, #0]
   24912:	4413      	add	r3, r2
   24914:	4a04      	ldr	r2, [pc, #16]	; (24928 <vPortFree+0x6c>)
   24916:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   24918:	f7fe ffdc 	bl	238d4 <xTaskResumeAll>
	}
}
   2491c:	bf00      	nop
   2491e:	b007      	add	sp, #28
   24920:	f85d fb04 	ldr.w	pc, [sp], #4
   24924:	10008790 	.word	0x10008790
   24928:	10002bd8 	.word	0x10002bd8

0002492c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   2492c:	b082      	sub	sp, #8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   2492e:	4b0e      	ldr	r3, [pc, #56]	; (24968 <prvHeapInit+0x3c>)
   24930:	f023 0307 	bic.w	r3, r3, #7
   24934:	9301      	str	r3, [sp, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   24936:	4a0d      	ldr	r2, [pc, #52]	; (2496c <prvHeapInit+0x40>)
   24938:	9b01      	ldr	r3, [sp, #4]
   2493a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   2493c:	4b0b      	ldr	r3, [pc, #44]	; (2496c <prvHeapInit+0x40>)
   2493e:	2200      	movs	r2, #0
   24940:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   24942:	4b0b      	ldr	r3, [pc, #44]	; (24970 <prvHeapInit+0x44>)
   24944:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   24948:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   2494a:	4b09      	ldr	r3, [pc, #36]	; (24970 <prvHeapInit+0x44>)
   2494c:	2200      	movs	r2, #0
   2494e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   24950:	9b01      	ldr	r3, [sp, #4]
   24952:	9300      	str	r3, [sp, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   24954:	9b00      	ldr	r3, [sp, #0]
   24956:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   2495a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   2495c:	9b00      	ldr	r3, [sp, #0]
   2495e:	4a04      	ldr	r2, [pc, #16]	; (24970 <prvHeapInit+0x44>)
   24960:	601a      	str	r2, [r3, #0]
}
   24962:	bf00      	nop
   24964:	b002      	add	sp, #8
   24966:	4770      	bx	lr
   24968:	10004798 	.word	0x10004798
   2496c:	10008790 	.word	0x10008790
   24970:	10008798 	.word	0x10008798

00024974 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
   24974:	b500      	push	{lr}
   24976:	b083      	sub	sp, #12
   24978:	9001      	str	r0, [sp, #4]
    //
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   2497a:	9b01      	ldr	r3, [sp, #4]
   2497c:	681b      	ldr	r3, [r3, #0]
   2497e:	4a09      	ldr	r2, [pc, #36]	; (249a4 <am_devices_button_init+0x30>)
   24980:	6811      	ldr	r1, [r2, #0]
   24982:	4618      	mov	r0, r3
   24984:	f005 fc46 	bl	2a214 <am_hal_gpio_pinconfig>


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
   24988:	9b01      	ldr	r3, [sp, #4]
   2498a:	2200      	movs	r2, #0
   2498c:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
   2498e:	9b01      	ldr	r3, [sp, #4]
   24990:	2200      	movs	r2, #0
   24992:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
   24994:	9b01      	ldr	r3, [sp, #4]
   24996:	2200      	movs	r2, #0
   24998:	735a      	strb	r2, [r3, #13]
}
   2499a:	bf00      	nop
   2499c:	b003      	add	sp, #12
   2499e:	f85d fb04 	ldr.w	pc, [sp], #4
   249a2:	bf00      	nop
   249a4:	0002e9e8 	.word	0x0002e9e8

000249a8 <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   249a8:	b500      	push	{lr}
   249aa:	b085      	sub	sp, #20
   249ac:	9001      	str	r0, [sp, #4]
   249ae:	9100      	str	r1, [sp, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   249b0:	2300      	movs	r3, #0
   249b2:	9303      	str	r3, [sp, #12]
   249b4:	e009      	b.n	249ca <am_devices_button_array_init+0x22>
    {
        am_devices_button_init(psButtons + i);
   249b6:	9b03      	ldr	r3, [sp, #12]
   249b8:	011b      	lsls	r3, r3, #4
   249ba:	9a01      	ldr	r2, [sp, #4]
   249bc:	4413      	add	r3, r2
   249be:	4618      	mov	r0, r3
   249c0:	f7ff ffd8 	bl	24974 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
   249c4:	9b03      	ldr	r3, [sp, #12]
   249c6:	3301      	adds	r3, #1
   249c8:	9303      	str	r3, [sp, #12]
   249ca:	9a03      	ldr	r2, [sp, #12]
   249cc:	9b00      	ldr	r3, [sp, #0]
   249ce:	429a      	cmp	r2, r3
   249d0:	d3f1      	bcc.n	249b6 <am_devices_button_array_init+0xe>
    }
}
   249d2:	bf00      	nop
   249d4:	bf00      	nop
   249d6:	b005      	add	sp, #20
   249d8:	f85d fb04 	ldr.w	pc, [sp], #4

000249dc <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
   249dc:	b500      	push	{lr}
   249de:	b085      	sub	sp, #20
   249e0:	9001      	str	r0, [sp, #4]

    //
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   249e2:	9b01      	ldr	r3, [sp, #4]
   249e4:	681b      	ldr	r3, [r3, #0]
   249e6:	4a20      	ldr	r2, [pc, #128]	; (24a68 <am_devices_button_tick+0x8c>)
   249e8:	6811      	ldr	r1, [r2, #0]
   249ea:	4618      	mov	r0, r3
   249ec:	f005 fc12 	bl	2a214 <am_hal_gpio_pinconfig>
    //
    // Read the pin state. If the pin is in its normal (unpressed) state, set
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   249f0:	9b01      	ldr	r3, [sp, #4]
   249f2:	681b      	ldr	r3, [r3, #0]
   249f4:	aa02      	add	r2, sp, #8
   249f6:	2100      	movs	r1, #0
   249f8:	4618      	mov	r0, r3
   249fa:	f005 fd47 	bl	2a48c <am_hal_gpio_state_read>
#endif // AM_APOLLO3_GPIO

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   249fe:	9b01      	ldr	r3, [sp, #4]
   24a00:	685a      	ldr	r2, [r3, #4]
   24a02:	9b02      	ldr	r3, [sp, #8]
   24a04:	429a      	cmp	r2, r3
   24a06:	bf14      	ite	ne
   24a08:	2301      	movne	r3, #1
   24a0a:	2300      	moveq	r3, #0
   24a0c:	f88d 300f 	strb.w	r3, [sp, #15]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
   24a10:	9b01      	ldr	r3, [sp, #4]
   24a12:	7b1b      	ldrb	r3, [r3, #12]
   24a14:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24a18:	429a      	cmp	r2, r3
   24a1a:	d005      	beq.n	24a28 <am_devices_button_tick+0x4c>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
   24a1c:	9b01      	ldr	r3, [sp, #4]
   24a1e:	689b      	ldr	r3, [r3, #8]
   24a20:	1c5a      	adds	r2, r3, #1
   24a22:	9b01      	ldr	r3, [sp, #4]
   24a24:	609a      	str	r2, [r3, #8]
   24a26:	e002      	b.n	24a2e <am_devices_button_tick+0x52>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
   24a28:	9b01      	ldr	r3, [sp, #4]
   24a2a:	2200      	movs	r2, #0
   24a2c:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   24a2e:	9b01      	ldr	r3, [sp, #4]
   24a30:	689b      	ldr	r3, [r3, #8]
   24a32:	2b03      	cmp	r3, #3
   24a34:	d90a      	bls.n	24a4c <am_devices_button_tick+0x70>
    {
        psButton->bPressed = bRawButtonPressed;
   24a36:	9b01      	ldr	r3, [sp, #4]
   24a38:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24a3c:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
   24a3e:	9b01      	ldr	r3, [sp, #4]
   24a40:	2201      	movs	r2, #1
   24a42:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
   24a44:	9b01      	ldr	r3, [sp, #4]
   24a46:	2200      	movs	r2, #0
   24a48:	609a      	str	r2, [r3, #8]
   24a4a:	e002      	b.n	24a52 <am_devices_button_tick+0x76>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
   24a4c:	9b01      	ldr	r3, [sp, #4]
   24a4e:	2200      	movs	r2, #0
   24a50:	735a      	strb	r2, [r3, #13]

    //
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   24a52:	9b01      	ldr	r3, [sp, #4]
   24a54:	681b      	ldr	r3, [r3, #0]
   24a56:	4a05      	ldr	r2, [pc, #20]	; (24a6c <am_devices_button_tick+0x90>)
   24a58:	6811      	ldr	r1, [r2, #0]
   24a5a:	4618      	mov	r0, r3
   24a5c:	f005 fbda 	bl	2a214 <am_hal_gpio_pinconfig>
#else // AM_APOLLO3_GPIO
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
#endif // AM_APOLLO3_GPIO
}
   24a60:	bf00      	nop
   24a62:	b005      	add	sp, #20
   24a64:	f85d fb04 	ldr.w	pc, [sp], #4
   24a68:	0002e9ec 	.word	0x0002e9ec
   24a6c:	0002e9e8 	.word	0x0002e9e8

00024a70 <am_devices_button_array_tick>:
//
//*****************************************************************************
void
am_devices_button_array_tick(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   24a70:	b500      	push	{lr}
   24a72:	b085      	sub	sp, #20
   24a74:	9001      	str	r0, [sp, #4]
   24a76:	9100      	str	r1, [sp, #0]
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   24a78:	2300      	movs	r3, #0
   24a7a:	9303      	str	r3, [sp, #12]
   24a7c:	e009      	b.n	24a92 <am_devices_button_array_tick+0x22>
    {
        am_devices_button_tick(psButtons + i);
   24a7e:	9b03      	ldr	r3, [sp, #12]
   24a80:	011b      	lsls	r3, r3, #4
   24a82:	9a01      	ldr	r2, [sp, #4]
   24a84:	4413      	add	r3, r2
   24a86:	4618      	mov	r0, r3
   24a88:	f7ff ffa8 	bl	249dc <am_devices_button_tick>
    for ( i = 0; i < ui32NumButtons; i++ )
   24a8c:	9b03      	ldr	r3, [sp, #12]
   24a8e:	3301      	adds	r3, #1
   24a90:	9303      	str	r3, [sp, #12]
   24a92:	9a03      	ldr	r2, [sp, #12]
   24a94:	9b00      	ldr	r3, [sp, #0]
   24a96:	429a      	cmp	r2, r3
   24a98:	d3f1      	bcc.n	24a7e <am_devices_button_array_tick+0xe>
    }
}
   24a9a:	bf00      	nop
   24a9c:	bf00      	nop
   24a9e:	b005      	add	sp, #20
   24aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00024aa4 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   24aa4:	b508      	push	{r3, lr}
  AttsAddGroup(&svcGapGroup);
   24aa6:	4804      	ldr	r0, [pc, #16]	; (24ab8 <SvcCoreAddGroup+0x14>)
   24aa8:	f7ec fae4 	bl	11074 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   24aac:	4803      	ldr	r0, [pc, #12]	; (24abc <SvcCoreAddGroup+0x18>)
   24aae:	f7ec fae1 	bl	11074 <AttsAddGroup>
}
   24ab2:	bf00      	nop
   24ab4:	bd08      	pop	{r3, pc}
   24ab6:	bf00      	nop
   24ab8:	10002bdc 	.word	0x10002bdc
   24abc:	10002bf0 	.word	0x10002bf0

00024ac0 <SvcCoreGattCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGattCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   24ac0:	b082      	sub	sp, #8
   24ac2:	9001      	str	r0, [sp, #4]
   24ac4:	9100      	str	r1, [sp, #0]
  svcGattGroup.readCback = readCback;
   24ac6:	4a04      	ldr	r2, [pc, #16]	; (24ad8 <SvcCoreGattCbackRegister+0x18>)
   24ac8:	9b01      	ldr	r3, [sp, #4]
   24aca:	6093      	str	r3, [r2, #8]
  svcGattGroup.writeCback = writeCback;
   24acc:	4a02      	ldr	r2, [pc, #8]	; (24ad8 <SvcCoreGattCbackRegister+0x18>)
   24ace:	9b00      	ldr	r3, [sp, #0]
   24ad0:	60d3      	str	r3, [r2, #12]
}
   24ad2:	bf00      	nop
   24ad4:	b002      	add	sp, #8
   24ad6:	4770      	bx	lr
   24ad8:	10002bf0 	.word	0x10002bf0

00024adc <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   24adc:	b082      	sub	sp, #8
   24ade:	4603      	mov	r3, r0
   24ae0:	f88d 3007 	strb.w	r3, [sp, #7]
  gapValCar[0] = value;
   24ae4:	4a03      	ldr	r2, [pc, #12]	; (24af4 <SvcCoreGapCentAddrResUpdate+0x18>)
   24ae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24aea:	7013      	strb	r3, [r2, #0]
}
   24aec:	bf00      	nop
   24aee:	b002      	add	sp, #8
   24af0:	4770      	bx	lr
   24af2:	bf00      	nop
   24af4:	100087a8 	.word	0x100087a8

00024af8 <SvcCoreGapAddRpaoCh>:
 */
/*************************************************************************************************/
void SvcCoreGapAddRpaoCh(void)
{
  /* if RPAO characteristic not already in GAP service */
  if (svcGapGroup.endHandle < GAP_RPAO_HDL)
   24af8:	4b04      	ldr	r3, [pc, #16]	; (24b0c <SvcCoreGapAddRpaoCh+0x14>)
   24afa:	8a5b      	ldrh	r3, [r3, #18]
   24afc:	2b08      	cmp	r3, #8
   24afe:	d802      	bhi.n	24b06 <SvcCoreGapAddRpaoCh+0xe>
  {
    svcGapGroup.endHandle = GAP_RPAO_HDL;
   24b00:	4b02      	ldr	r3, [pc, #8]	; (24b0c <SvcCoreGapAddRpaoCh+0x14>)
   24b02:	2209      	movs	r2, #9
   24b04:	825a      	strh	r2, [r3, #18]
  }
}
   24b06:	bf00      	nop
   24b08:	4770      	bx	lr
   24b0a:	bf00      	nop
   24b0c:	10002bdc 	.word	0x10002bdc

00024b10 <SvcPxAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcPxAddGroup(void)
{
   24b10:	b508      	push	{r3, lr}
  /* add services */
  AttsAddGroup(&svcPxGroup);
   24b12:	4802      	ldr	r0, [pc, #8]	; (24b1c <SvcPxAddGroup+0xc>)
   24b14:	f7ec faae 	bl	11074 <AttsAddGroup>
}
   24b18:	bf00      	nop
   24b1a:	bd08      	pop	{r3, pc}
   24b1c:	10002c04 	.word	0x10002c04

00024b20 <SvcPxCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcPxCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   24b20:	b082      	sub	sp, #8
   24b22:	9001      	str	r0, [sp, #4]
   24b24:	9100      	str	r1, [sp, #0]
  svcPxGroup.readCback = readCback;
   24b26:	4a04      	ldr	r2, [pc, #16]	; (24b38 <SvcPxCbackRegister+0x18>)
   24b28:	9b01      	ldr	r3, [sp, #4]
   24b2a:	6093      	str	r3, [r2, #8]
  svcPxGroup.writeCback = writeCback;
   24b2c:	4a02      	ldr	r2, [pc, #8]	; (24b38 <SvcPxCbackRegister+0x18>)
   24b2e:	9b00      	ldr	r3, [sp, #0]
   24b30:	60d3      	str	r3, [r2, #12]
}
   24b32:	bf00      	nop
   24b34:	b002      	add	sp, #8
   24b36:	4770      	bx	lr
   24b38:	10002c04 	.word	0x10002c04

00024b3c <tagAlert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagAlert(uint8_t alert)
{
   24b3c:	b500      	push	{lr}
   24b3e:	b083      	sub	sp, #12
   24b40:	4603      	mov	r3, r0
   24b42:	f88d 3007 	strb.w	r3, [sp, #7]
  /* perform alert according to setting of alert alert */
  if (alert == CH_ALERT_LVL_NONE)
   24b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24b4a:	2b00      	cmp	r3, #0
   24b4c:	d103      	bne.n	24b56 <tagAlert+0x1a>
  {
    AppUiAction(APP_UI_ALERT_CANCEL);
   24b4e:	200f      	movs	r0, #15
   24b50:	f7ee ffa0 	bl	13a94 <AppUiAction>
  }
  else if (alert == CH_ALERT_LVL_HIGH)
  {
    AppUiAction(APP_UI_ALERT_HIGH);
  }
}
   24b54:	e00e      	b.n	24b74 <tagAlert+0x38>
  else if (alert == CH_ALERT_LVL_MILD)
   24b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24b5a:	2b01      	cmp	r3, #1
   24b5c:	d103      	bne.n	24b66 <tagAlert+0x2a>
    AppUiAction(APP_UI_ALERT_LOW);
   24b5e:	2010      	movs	r0, #16
   24b60:	f7ee ff98 	bl	13a94 <AppUiAction>
}
   24b64:	e006      	b.n	24b74 <tagAlert+0x38>
  else if (alert == CH_ALERT_LVL_HIGH)
   24b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24b6a:	2b02      	cmp	r3, #2
   24b6c:	d102      	bne.n	24b74 <tagAlert+0x38>
    AppUiAction(APP_UI_ALERT_HIGH);
   24b6e:	2011      	movs	r0, #17
   24b70:	f7ee ff90 	bl	13a94 <AppUiAction>
}
   24b74:	bf00      	nop
   24b76:	b003      	add	sp, #12
   24b78:	f85d fb04 	ldr.w	pc, [sp], #4

00024b7c <tagDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDmCback(dmEvt_t *pDmEvt)
{
   24b7c:	b500      	push	{lr}
   24b7e:	b085      	sub	sp, #20
   24b80:	9001      	str	r0, [sp, #4]
  dmEvt_t *pMsg;
  uint16_t  len;

  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   24b82:	9b01      	ldr	r3, [sp, #4]
   24b84:	789b      	ldrb	r3, [r3, #2]
   24b86:	2b34      	cmp	r3, #52	; 0x34
   24b88:	d105      	bne.n	24b96 <tagDmCback+0x1a>
  {
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
   24b8a:	9b01      	ldr	r3, [sp, #4]
   24b8c:	3304      	adds	r3, #4
   24b8e:	4618      	mov	r0, r3
   24b90:	f7f2 fb52 	bl	17238 <DmSecSetEccKey>
    {
      memcpy(pMsg, pDmEvt, len);
      WsfMsgSend(tagCb.handlerId, pMsg);
    }
  }
}
   24b94:	e01c      	b.n	24bd0 <tagDmCback+0x54>
    len = DmSizeOfEvt(pDmEvt);
   24b96:	9801      	ldr	r0, [sp, #4]
   24b98:	f7f1 fe7c 	bl	16894 <DmSizeOfEvt>
   24b9c:	4603      	mov	r3, r0
   24b9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((pMsg = WsfMsgAlloc(len)) != NULL)
   24ba2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   24ba6:	4618      	mov	r0, r3
   24ba8:	f7e8 fae4 	bl	d174 <WsfMsgAlloc>
   24bac:	9002      	str	r0, [sp, #8]
   24bae:	9b02      	ldr	r3, [sp, #8]
   24bb0:	2b00      	cmp	r3, #0
   24bb2:	d00d      	beq.n	24bd0 <tagDmCback+0x54>
      memcpy(pMsg, pDmEvt, len);
   24bb4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   24bb8:	461a      	mov	r2, r3
   24bba:	9901      	ldr	r1, [sp, #4]
   24bbc:	9802      	ldr	r0, [sp, #8]
   24bbe:	f7e7 fa9f 	bl	c100 <memcpy>
      WsfMsgSend(tagCb.handlerId, pMsg);
   24bc2:	4b05      	ldr	r3, [pc, #20]	; (24bd8 <tagDmCback+0x5c>)
   24bc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   24bc8:	9902      	ldr	r1, [sp, #8]
   24bca:	4618      	mov	r0, r3
   24bcc:	f7e8 faf6 	bl	d1bc <WsfMsgSend>
}
   24bd0:	bf00      	nop
   24bd2:	b005      	add	sp, #20
   24bd4:	f85d fb04 	ldr.w	pc, [sp], #4
   24bd8:	100087d4 	.word	0x100087d4

00024bdc <tagAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagAttCback(attEvt_t *pEvt)
{
   24bdc:	b500      	push	{lr}
   24bde:	b085      	sub	sp, #20
   24be0:	9001      	str	r0, [sp, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   24be2:	9b01      	ldr	r3, [sp, #4]
   24be4:	891b      	ldrh	r3, [r3, #8]
   24be6:	3310      	adds	r3, #16
   24be8:	b29b      	uxth	r3, r3
   24bea:	4618      	mov	r0, r3
   24bec:	f7e8 fac2 	bl	d174 <WsfMsgAlloc>
   24bf0:	9003      	str	r0, [sp, #12]
   24bf2:	9b03      	ldr	r3, [sp, #12]
   24bf4:	2b00      	cmp	r3, #0
   24bf6:	d01a      	beq.n	24c2e <tagAttCback+0x52>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   24bf8:	2210      	movs	r2, #16
   24bfa:	9901      	ldr	r1, [sp, #4]
   24bfc:	9803      	ldr	r0, [sp, #12]
   24bfe:	f7e7 fa7f 	bl	c100 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   24c02:	9b03      	ldr	r3, [sp, #12]
   24c04:	f103 0210 	add.w	r2, r3, #16
   24c08:	9b03      	ldr	r3, [sp, #12]
   24c0a:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   24c0c:	9b03      	ldr	r3, [sp, #12]
   24c0e:	6858      	ldr	r0, [r3, #4]
   24c10:	9b01      	ldr	r3, [sp, #4]
   24c12:	6859      	ldr	r1, [r3, #4]
   24c14:	9b01      	ldr	r3, [sp, #4]
   24c16:	891b      	ldrh	r3, [r3, #8]
   24c18:	461a      	mov	r2, r3
   24c1a:	f7e7 fa71 	bl	c100 <memcpy>
    WsfMsgSend(tagCb.handlerId, pMsg);
   24c1e:	4b06      	ldr	r3, [pc, #24]	; (24c38 <tagAttCback+0x5c>)
   24c20:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   24c24:	9903      	ldr	r1, [sp, #12]
   24c26:	4618      	mov	r0, r3
   24c28:	f7e8 fac8 	bl	d1bc <WsfMsgSend>
  }

  return;
   24c2c:	bf00      	nop
   24c2e:	bf00      	nop
}
   24c30:	b005      	add	sp, #20
   24c32:	f85d fb04 	ldr.w	pc, [sp], #4
   24c36:	bf00      	nop
   24c38:	100087d4 	.word	0x100087d4

00024c3c <tagCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagCccCback(attsCccEvt_t *pEvt)
{
   24c3c:	b500      	push	{lr}
   24c3e:	b085      	sub	sp, #20
   24c40:	9001      	str	r0, [sp, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;

  /* If CCC not set from initialization and there's a device record and currently bonded */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   24c42:	9b01      	ldr	r3, [sp, #4]
   24c44:	889b      	ldrh	r3, [r3, #4]
   24c46:	2b00      	cmp	r3, #0
   24c48:	d01b      	beq.n	24c82 <tagCccCback+0x46>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
   24c4a:	9b01      	ldr	r3, [sp, #4]
   24c4c:	881b      	ldrh	r3, [r3, #0]
   24c4e:	b2db      	uxtb	r3, r3
   24c50:	4618      	mov	r0, r3
   24c52:	f001 fd2b 	bl	266ac <AppDbGetHdl>
   24c56:	9003      	str	r0, [sp, #12]
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   24c58:	9b03      	ldr	r3, [sp, #12]
   24c5a:	2b00      	cmp	r3, #0
   24c5c:	d011      	beq.n	24c82 <tagCccCback+0x46>
      AppCheckBonded((dmConnId_t)pEvt->hdr.param))
   24c5e:	9b01      	ldr	r3, [sp, #4]
   24c60:	881b      	ldrh	r3, [r3, #0]
   24c62:	b2db      	uxtb	r3, r3
   24c64:	4618      	mov	r0, r3
   24c66:	f001 fc43 	bl	264f0 <AppCheckBonded>
   24c6a:	4603      	mov	r3, r0
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
   24c6c:	2b00      	cmp	r3, #0
   24c6e:	d008      	beq.n	24c82 <tagCccCback+0x46>
  {
    /* Store value in device database. */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   24c70:	9b01      	ldr	r3, [sp, #4]
   24c72:	7a1b      	ldrb	r3, [r3, #8]
   24c74:	b299      	uxth	r1, r3
   24c76:	9b01      	ldr	r3, [sp, #4]
   24c78:	88db      	ldrh	r3, [r3, #6]
   24c7a:	461a      	mov	r2, r3
   24c7c:	9803      	ldr	r0, [sp, #12]
   24c7e:	f7ee fe05 	bl	1388c <AppDbSetCccTblValue>
  }

  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   24c82:	200a      	movs	r0, #10
   24c84:	f7e8 fa76 	bl	d174 <WsfMsgAlloc>
   24c88:	9002      	str	r0, [sp, #8]
   24c8a:	9b02      	ldr	r3, [sp, #8]
   24c8c:	2b00      	cmp	r3, #0
   24c8e:	d00b      	beq.n	24ca8 <tagCccCback+0x6c>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   24c90:	220a      	movs	r2, #10
   24c92:	9901      	ldr	r1, [sp, #4]
   24c94:	9802      	ldr	r0, [sp, #8]
   24c96:	f7e7 fa33 	bl	c100 <memcpy>
    WsfMsgSend(tagCb.handlerId, pMsg);
   24c9a:	4b05      	ldr	r3, [pc, #20]	; (24cb0 <tagCccCback+0x74>)
   24c9c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   24ca0:	9902      	ldr	r1, [sp, #8]
   24ca2:	4618      	mov	r0, r3
   24ca4:	f7e8 fa8a 	bl	d1bc <WsfMsgSend>
  }
}
   24ca8:	bf00      	nop
   24caa:	b005      	add	sp, #20
   24cac:	f85d fb04 	ldr.w	pc, [sp], #4
   24cb0:	100087d4 	.word	0x100087d4

00024cb4 <tagIasWriteCback>:
 */
/*************************************************************************************************/
static uint8_t tagIasWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                                uint16_t offset, uint16_t len, uint8_t *pValue,
                                attsAttr_t *pAttr)
{
   24cb4:	b510      	push	{r4, lr}
   24cb6:	b082      	sub	sp, #8
   24cb8:	4604      	mov	r4, r0
   24cba:	4608      	mov	r0, r1
   24cbc:	4611      	mov	r1, r2
   24cbe:	461a      	mov	r2, r3
   24cc0:	4623      	mov	r3, r4
   24cc2:	f88d 3007 	strb.w	r3, [sp, #7]
   24cc6:	4603      	mov	r3, r0
   24cc8:	f8ad 3004 	strh.w	r3, [sp, #4]
   24ccc:	460b      	mov	r3, r1
   24cce:	f88d 3006 	strb.w	r3, [sp, #6]
   24cd2:	4613      	mov	r3, r2
   24cd4:	f8ad 3002 	strh.w	r3, [sp, #2]
  ATT_TRACE_INFO3("tagIasWriteCback connId:%d handle:0x%04x op:0x%02x",
   24cd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24cdc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   24ce0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24ce4:	4809      	ldr	r0, [pc, #36]	; (24d0c <tagIasWriteCback+0x58>)
   24ce6:	f7e8 feaf 	bl	da48 <WsfTrace>
                  connId, handle, operation);
  ATT_TRACE_INFO2("                 offset:0x%04x len:0x%04x", offset, len);
   24cea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   24cee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   24cf2:	4619      	mov	r1, r3
   24cf4:	4806      	ldr	r0, [pc, #24]	; (24d10 <tagIasWriteCback+0x5c>)
   24cf6:	f7e8 fea7 	bl	da48 <WsfTrace>

  tagAlert(*pValue);
   24cfa:	9b05      	ldr	r3, [sp, #20]
   24cfc:	781b      	ldrb	r3, [r3, #0]
   24cfe:	4618      	mov	r0, r3
   24d00:	f7ff ff1c 	bl	24b3c <tagAlert>

  return ATT_SUCCESS;
   24d04:	2300      	movs	r3, #0
}
   24d06:	4618      	mov	r0, r3
   24d08:	b002      	add	sp, #8
   24d0a:	bd10      	pop	{r4, pc}
   24d0c:	0002bf88 	.word	0x0002bf88
   24d10:	0002bfbc 	.word	0x0002bfbc

00024d14 <tagOpen>:
*
*  \return None.
*/
/*************************************************************************************************/
static void tagOpen(dmEvt_t *pMsg)
{
   24d14:	b500      	push	{lr}
   24d16:	b083      	sub	sp, #12
   24d18:	9001      	str	r0, [sp, #4]
  /* Update peer address info */
  tagCb.addrType = DmHostAddrType(pMsg->connOpen.addrType);
   24d1a:	9b01      	ldr	r3, [sp, #4]
   24d1c:	7a5b      	ldrb	r3, [r3, #9]
   24d1e:	4618      	mov	r0, r3
   24d20:	f7f1 fd96 	bl	16850 <DmHostAddrType>
   24d24:	4603      	mov	r3, r0
   24d26:	461a      	mov	r2, r3
   24d28:	4b06      	ldr	r3, [pc, #24]	; (24d44 <tagOpen+0x30>)
   24d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  BdaCpy(tagCb.peerAddr, pMsg->connOpen.peerAddr);
   24d2e:	9b01      	ldr	r3, [sp, #4]
   24d30:	330a      	adds	r3, #10
   24d32:	4619      	mov	r1, r3
   24d34:	4804      	ldr	r0, [pc, #16]	; (24d48 <tagOpen+0x34>)
   24d36:	f7ef fbb7 	bl	144a8 <BdaCpy>
}
   24d3a:	bf00      	nop
   24d3c:	b003      	add	sp, #12
   24d3e:	f85d fb04 	ldr.w	pc, [sp], #4
   24d42:	bf00      	nop
   24d44:	100087d4 	.word	0x100087d4
   24d48:	10008811 	.word	0x10008811

00024d4c <tagClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagClose(dmEvt_t *pMsg)
{
   24d4c:	b500      	push	{lr}
   24d4e:	b085      	sub	sp, #20
   24d50:	9001      	str	r0, [sp, #4]
  uint8_t   *pVal;
  uint16_t  len;

  /* perform alert according to setting of link loss alert */
  if (AttsGetAttr(LLS_AL_HDL, &len, &pVal) == ATT_SUCCESS)
   24d52:	aa03      	add	r2, sp, #12
   24d54:	f10d 030a 	add.w	r3, sp, #10
   24d58:	4619      	mov	r1, r3
   24d5a:	2052      	movs	r0, #82	; 0x52
   24d5c:	f7ec f9f8 	bl	11150 <AttsGetAttr>
   24d60:	4603      	mov	r3, r0
   24d62:	2b00      	cmp	r3, #0
   24d64:	d10c      	bne.n	24d80 <tagClose+0x34>
  {
    if (*pVal == CH_ALERT_LVL_MILD || *pVal == CH_ALERT_LVL_HIGH)
   24d66:	9b03      	ldr	r3, [sp, #12]
   24d68:	781b      	ldrb	r3, [r3, #0]
   24d6a:	2b01      	cmp	r3, #1
   24d6c:	d003      	beq.n	24d76 <tagClose+0x2a>
   24d6e:	9b03      	ldr	r3, [sp, #12]
   24d70:	781b      	ldrb	r3, [r3, #0]
   24d72:	2b02      	cmp	r3, #2
   24d74:	d104      	bne.n	24d80 <tagClose+0x34>
    {
      tagAlert(*pVal);
   24d76:	9b03      	ldr	r3, [sp, #12]
   24d78:	781b      	ldrb	r3, [r3, #0]
   24d7a:	4618      	mov	r0, r3
   24d7c:	f7ff fede 	bl	24b3c <tagAlert>
    }
  }

  /* if read RSSI in progress, stop timer */
  if (tagCb.inProgress)
   24d80:	4b07      	ldr	r3, [pc, #28]	; (24da0 <tagClose+0x54>)
   24d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   24d86:	2b00      	cmp	r3, #0
   24d88:	d006      	beq.n	24d98 <tagClose+0x4c>
  {
    tagCb.inProgress = FALSE;
   24d8a:	4b05      	ldr	r3, [pc, #20]	; (24da0 <tagClose+0x54>)
   24d8c:	2200      	movs	r2, #0
   24d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* stop timer */
    WsfTimerStop(&tagCb.rssiTimer);
   24d92:	4804      	ldr	r0, [pc, #16]	; (24da4 <tagClose+0x58>)
   24d94:	f7e8 fd94 	bl	d8c0 <WsfTimerStop>
  }
}
   24d98:	bf00      	nop
   24d9a:	b005      	add	sp, #20
   24d9c:	f85d fb04 	ldr.w	pc, [sp], #4
   24da0:	100087d4 	.word	0x100087d4
   24da4:	10008800 	.word	0x10008800

00024da8 <tagGetPeerKey>:
 *
 *  \return Pointer to peer key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
static dmSecKey_t *tagGetPeerKey(appDbHdl_t dbHdl)
{
   24da8:	b500      	push	{lr}
   24daa:	b083      	sub	sp, #12
   24dac:	9001      	str	r0, [sp, #4]
  /* if database record handle valid */
  if (dbHdl != APP_DB_HDL_NONE)
   24dae:	9b01      	ldr	r3, [sp, #4]
   24db0:	2b00      	cmp	r3, #0
   24db2:	d006      	beq.n	24dc2 <tagGetPeerKey+0x1a>
  {
    return AppDbGetKey(dbHdl, DM_KEY_IRK, NULL);
   24db4:	2200      	movs	r2, #0
   24db6:	2104      	movs	r1, #4
   24db8:	9801      	ldr	r0, [sp, #4]
   24dba:	f7ee fc6f 	bl	1369c <AppDbGetKey>
   24dbe:	4603      	mov	r3, r0
   24dc0:	e000      	b.n	24dc4 <tagGetPeerKey+0x1c>
  }

  return NULL;
   24dc2:	2300      	movs	r3, #0
}
   24dc4:	4618      	mov	r0, r3
   24dc6:	b003      	add	sp, #12
   24dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00024dcc <tagSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagSecPairCmpl(dmEvt_t *pMsg)
{
   24dcc:	b500      	push	{lr}
   24dce:	b083      	sub	sp, #12
   24dd0:	9001      	str	r0, [sp, #4]
  /* store database record handle for peer device */
  tagCb.dbHdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param);
   24dd2:	9b01      	ldr	r3, [sp, #4]
   24dd4:	881b      	ldrh	r3, [r3, #0]
   24dd6:	b2db      	uxtb	r3, r3
   24dd8:	4618      	mov	r0, r3
   24dda:	f001 fc67 	bl	266ac <AppDbGetHdl>
   24dde:	4603      	mov	r3, r0
   24de0:	4a02      	ldr	r2, [pc, #8]	; (24dec <tagSecPairCmpl+0x20>)
   24de2:	6453      	str	r3, [r2, #68]	; 0x44
}
   24de4:	bf00      	nop
   24de6:	b003      	add	sp, #12
   24de8:	f85d fb04 	ldr.w	pc, [sp], #4
   24dec:	100087d4 	.word	0x100087d4

00024df0 <tagPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagPrivAddDevToResListInd(dmEvt_t *pMsg)
{
   24df0:	b500      	push	{lr}
   24df2:	b085      	sub	sp, #20
   24df4:	9001      	str	r0, [sp, #4]
  dmSecKey_t *pPeerKey;

  /* if peer IRK present */
  if ((pPeerKey = tagGetPeerKey(AppDbGetHdl((dmConnId_t) pMsg->hdr.param))) != NULL)
   24df6:	9b01      	ldr	r3, [sp, #4]
   24df8:	881b      	ldrh	r3, [r3, #0]
   24dfa:	b2db      	uxtb	r3, r3
   24dfc:	4618      	mov	r0, r3
   24dfe:	f001 fc55 	bl	266ac <AppDbGetHdl>
   24e02:	4603      	mov	r3, r0
   24e04:	4618      	mov	r0, r3
   24e06:	f7ff ffcf 	bl	24da8 <tagGetPeerKey>
   24e0a:	9003      	str	r0, [sp, #12]
   24e0c:	9b03      	ldr	r3, [sp, #12]
   24e0e:	2b00      	cmp	r3, #0
   24e10:	d007      	beq.n	24e22 <tagPrivAddDevToResListInd+0x32>
  {
    /* set advertising peer address */
    AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   24e12:	9b03      	ldr	r3, [sp, #12]
   24e14:	7d9a      	ldrb	r2, [r3, #22]
   24e16:	9b03      	ldr	r3, [sp, #12]
   24e18:	3310      	adds	r3, #16
   24e1a:	4619      	mov	r1, r3
   24e1c:	4610      	mov	r0, r2
   24e1e:	f003 fa4d 	bl	282bc <AppSetAdvPeerAddr>
  }
}
   24e22:	bf00      	nop
   24e24:	b005      	add	sp, #20
   24e26:	f85d fb04 	ldr.w	pc, [sp], #4

00024e2a <tagPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagPrivRemDevFromResListInd(dmEvt_t *pMsg)
{
   24e2a:	b500      	push	{lr}
   24e2c:	b085      	sub	sp, #20
   24e2e:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   24e30:	9b01      	ldr	r3, [sp, #4]
   24e32:	78db      	ldrb	r3, [r3, #3]
   24e34:	2b00      	cmp	r3, #0
   24e36:	d112      	bne.n	24e5e <tagPrivRemDevFromResListInd+0x34>
  {
    if (AppDbGetHdl((dmConnId_t) pMsg->hdr.param) != APP_DB_HDL_NONE)
   24e38:	9b01      	ldr	r3, [sp, #4]
   24e3a:	881b      	ldrh	r3, [r3, #0]
   24e3c:	b2db      	uxtb	r3, r3
   24e3e:	4618      	mov	r0, r3
   24e40:	f001 fc34 	bl	266ac <AppDbGetHdl>
   24e44:	4603      	mov	r3, r0
   24e46:	2b00      	cmp	r3, #0
   24e48:	d009      	beq.n	24e5e <tagPrivRemDevFromResListInd+0x34>
    {
      uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   24e4a:	2300      	movs	r3, #0
   24e4c:	9302      	str	r3, [sp, #8]
   24e4e:	2300      	movs	r3, #0
   24e50:	f8ad 300c 	strh.w	r3, [sp, #12]

      /* clear advertising peer address and its type */
      AppSetAdvPeerAddr(HCI_ADDR_TYPE_PUBLIC, addrZeros);
   24e54:	ab02      	add	r3, sp, #8
   24e56:	4619      	mov	r1, r3
   24e58:	2000      	movs	r0, #0
   24e5a:	f003 fa2f 	bl	282bc <AppSetAdvPeerAddr>
    }
  }
}
   24e5e:	bf00      	nop
   24e60:	b005      	add	sp, #20
   24e62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024e68 <tagSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagSetup(dmEvt_t *pMsg)
{
   24e68:	b500      	push	{lr}
   24e6a:	b083      	sub	sp, #12
   24e6c:	9001      	str	r0, [sp, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(tagAdvDataDisc), (uint8_t *) tagAdvDataDisc);
   24e6e:	4a0d      	ldr	r2, [pc, #52]	; (24ea4 <tagSetup+0x3c>)
   24e70:	210b      	movs	r1, #11
   24e72:	2002      	movs	r0, #2
   24e74:	f003 f9b8 	bl	281e8 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(tagScanData), (uint8_t *) tagScanData);
   24e78:	4a0b      	ldr	r2, [pc, #44]	; (24ea8 <tagSetup+0x40>)
   24e7a:	2108      	movs	r1, #8
   24e7c:	2003      	movs	r0, #3
   24e7e:	f003 f9b3 	bl	281e8 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, 0, NULL);
   24e82:	2200      	movs	r2, #0
   24e84:	2100      	movs	r1, #0
   24e86:	2000      	movs	r0, #0
   24e88:	f003 f9ae 	bl	281e8 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(tagScanData), (uint8_t *) tagScanData);
   24e8c:	4a06      	ldr	r2, [pc, #24]	; (24ea8 <tagSetup+0x40>)
   24e8e:	2108      	movs	r1, #8
   24e90:	2001      	movs	r0, #1
   24e92:	f003 f9a9 	bl	281e8 <AppAdvSetData>

  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   24e96:	2002      	movs	r0, #2
   24e98:	f003 f9cc 	bl	28234 <AppAdvStart>
}
   24e9c:	bf00      	nop
   24e9e:	b003      	add	sp, #12
   24ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   24ea4:	0002cdf0 	.word	0x0002cdf0
   24ea8:	0002cdfc 	.word	0x0002cdfc

00024eac <tagValueUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagValueUpdate(attEvt_t *pMsg)
{
   24eac:	b500      	push	{lr}
   24eae:	b083      	sub	sp, #12
   24eb0:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.status == ATT_SUCCESS)
   24eb2:	9b01      	ldr	r3, [sp, #4]
   24eb4:	78db      	ldrb	r3, [r3, #3]
   24eb6:	2b00      	cmp	r3, #0
   24eb8:	d112      	bne.n	24ee0 <tagValueUpdate+0x34>
  {
    /* determine which profile the handle belongs to */

    /* GATT */
    if (GattValueUpdate(pTagGattHdlList, pMsg) == ATT_SUCCESS)
   24eba:	4b0b      	ldr	r3, [pc, #44]	; (24ee8 <tagValueUpdate+0x3c>)
   24ebc:	681b      	ldr	r3, [r3, #0]
   24ebe:	9901      	ldr	r1, [sp, #4]
   24ec0:	4618      	mov	r0, r3
   24ec2:	f7f2 fae1 	bl	17488 <GattValueUpdate>
   24ec6:	4603      	mov	r3, r0
   24ec8:	2b00      	cmp	r3, #0
   24eca:	d008      	beq.n	24ede <tagValueUpdate+0x32>
    {
      return;
    }

    /* GAP */
    if (GapValueUpdate(pTagGapHdlList, pMsg) == ATT_SUCCESS)
   24ecc:	4b07      	ldr	r3, [pc, #28]	; (24eec <tagValueUpdate+0x40>)
   24ece:	681b      	ldr	r3, [r3, #0]
   24ed0:	9901      	ldr	r1, [sp, #4]
   24ed2:	4618      	mov	r0, r3
   24ed4:	f7f2 fbde 	bl	17694 <GapValueUpdate>
   24ed8:	4603      	mov	r3, r0
   24eda:	2b00      	cmp	r3, #0
   24edc:	e000      	b.n	24ee0 <tagValueUpdate+0x34>
      return;
   24ede:	bf00      	nop
    {
      return;
    }
  }
}
   24ee0:	b003      	add	sp, #12
   24ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   24ee6:	bf00      	nop
   24ee8:	10002c2c 	.word	0x10002c2c
   24eec:	10002c30 	.word	0x10002c30

00024ef0 <tagDiscGapCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDiscGapCmpl(dmConnId_t connId)
{
   24ef0:	b500      	push	{lr}
   24ef2:	b085      	sub	sp, #20
   24ef4:	4603      	mov	r3, r0
   24ef6:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbHdl_t dbHdl;

  /* if RPA Only attribute found on peer device */
  if ((pTagGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
   24efa:	4b0b      	ldr	r3, [pc, #44]	; (24f28 <tagDiscGapCmpl+0x38>)
   24efc:	681b      	ldr	r3, [r3, #0]
   24efe:	3302      	adds	r3, #2
   24f00:	881b      	ldrh	r3, [r3, #0]
   24f02:	2b00      	cmp	r3, #0
   24f04:	d00c      	beq.n	24f20 <tagDiscGapCmpl+0x30>
      ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
   24f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24f0a:	4618      	mov	r0, r3
   24f0c:	f001 fbce 	bl	266ac <AppDbGetHdl>
   24f10:	9003      	str	r0, [sp, #12]
  if ((pTagGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
   24f12:	9b03      	ldr	r3, [sp, #12]
   24f14:	2b00      	cmp	r3, #0
   24f16:	d003      	beq.n	24f20 <tagDiscGapCmpl+0x30>
  {
    /* update DB */
    AppDbSetPeerRpao(dbHdl, TRUE);
   24f18:	2101      	movs	r1, #1
   24f1a:	9803      	ldr	r0, [sp, #12]
   24f1c:	f7ee fdad 	bl	13a7a <AppDbSetPeerRpao>
  }
}
   24f20:	bf00      	nop
   24f22:	b005      	add	sp, #20
   24f24:	f85d fb04 	ldr.w	pc, [sp], #4
   24f28:	10002c30 	.word	0x10002c30

00024f2c <tagProcRssiTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagProcRssiTimer(dmEvt_t *pMsg)
{
   24f2c:	b500      	push	{lr}
   24f2e:	b085      	sub	sp, #20
   24f30:	9001      	str	r0, [sp, #4]
  dmConnId_t  connId;

  /* if still connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   24f32:	f001 fb9b 	bl	2666c <AppConnIsOpen>
   24f36:	4603      	mov	r3, r0
   24f38:	f88d 300f 	strb.w	r3, [sp, #15]
   24f3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24f40:	2b00      	cmp	r3, #0
   24f42:	d008      	beq.n	24f56 <tagProcRssiTimer+0x2a>
  {
    /* read RSSI value for the active connection */
    DmConnReadRssi(connId);
   24f44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24f48:	4618      	mov	r0, r3
   24f4a:	f7f0 fe95 	bl	15c78 <DmConnReadRssi>

    /* restart timer */
    WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   24f4e:	2103      	movs	r1, #3
   24f50:	4803      	ldr	r0, [pc, #12]	; (24f60 <tagProcRssiTimer+0x34>)
   24f52:	f7e8 fc91 	bl	d878 <WsfTimerStartSec>
  }
}
   24f56:	bf00      	nop
   24f58:	b005      	add	sp, #20
   24f5a:	f85d fb04 	ldr.w	pc, [sp], #4
   24f5e:	bf00      	nop
   24f60:	10008800 	.word	0x10008800

00024f64 <tagBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagBtnCback(uint8_t btn)
{
   24f64:	b500      	push	{lr}
   24f66:	b087      	sub	sp, #28
   24f68:	4603      	mov	r3, r0
   24f6a:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnId_t  connId;

  /* button actions when connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   24f6e:	f001 fb7d 	bl	2666c <AppConnIsOpen>
   24f72:	4603      	mov	r3, r0
   24f74:	f88d 3017 	strb.w	r3, [sp, #23]
   24f78:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24f7c:	2b00      	cmp	r3, #0
   24f7e:	d069      	beq.n	25054 <tagBtnCback+0xf0>
  {
    switch (btn)
   24f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24f84:	3b02      	subs	r3, #2
   24f86:	2b06      	cmp	r3, #6
   24f88:	f200 80d0 	bhi.w	2512c <tagBtnCback+0x1c8>
   24f8c:	a201      	add	r2, pc, #4	; (adr r2, 24f94 <tagBtnCback+0x30>)
   24f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24f92:	bf00      	nop
   24f94:	00024fb1 	.word	0x00024fb1
   24f98:	00024fc5 	.word	0x00024fc5
   24f9c:	00024fd9 	.word	0x00024fd9
   24fa0:	0002512d 	.word	0x0002512d
   24fa4:	0002512d 	.word	0x0002512d
   24fa8:	00024fe5 	.word	0x00024fe5
   24fac:	0002501b 	.word	0x0002501b
    {
      case APP_UI_BTN_1_SHORT:
        /* send immediate alert, high */
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_HIGH);
   24fb0:	4b63      	ldr	r3, [pc, #396]	; (25140 <tagBtnCback+0x1dc>)
   24fb2:	681b      	ldr	r3, [r3, #0]
   24fb4:	8819      	ldrh	r1, [r3, #0]
   24fb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24fba:	2202      	movs	r2, #2
   24fbc:	4618      	mov	r0, r3
   24fbe:	f7e8 fd83 	bl	dac8 <FmplSendAlert>
        break;
   24fc2:	e0b8      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_1_MED:
        /* send immediate alert, none */
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_NONE);
   24fc4:	4b5e      	ldr	r3, [pc, #376]	; (25140 <tagBtnCback+0x1dc>)
   24fc6:	681b      	ldr	r3, [r3, #0]
   24fc8:	8819      	ldrh	r1, [r3, #0]
   24fca:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24fce:	2200      	movs	r2, #0
   24fd0:	4618      	mov	r0, r3
   24fd2:	f7e8 fd79 	bl	dac8 <FmplSendAlert>
        break;
   24fd6:	e0ae      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_1_LONG:
        /* disconnect */
        AppConnClose(connId);
   24fd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24fdc:	4618      	mov	r0, r3
   24fde:	f001 fb34 	bl	2664a <AppConnClose>
        break;
   24fe2:	e0a8      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_2_SHORT:
        /* if read RSSI in progress, stop timer */
        if (tagCb.inProgress)
   24fe4:	4b57      	ldr	r3, [pc, #348]	; (25144 <tagBtnCback+0x1e0>)
   24fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   24fea:	2b00      	cmp	r3, #0
   24fec:	d007      	beq.n	24ffe <tagBtnCback+0x9a>
        {
          tagCb.inProgress = FALSE;
   24fee:	4b55      	ldr	r3, [pc, #340]	; (25144 <tagBtnCback+0x1e0>)
   24ff0:	2200      	movs	r2, #0
   24ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          /* stop timer */
          WsfTimerStop(&tagCb.rssiTimer);
   24ff6:	4854      	ldr	r0, [pc, #336]	; (25148 <tagBtnCback+0x1e4>)
   24ff8:	f7e8 fc62 	bl	d8c0 <WsfTimerStop>
          DmConnReadRssi(connId);

          /* start timer */
          WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
        }
        break;
   24ffc:	e09b      	b.n	25136 <tagBtnCback+0x1d2>
          tagCb.inProgress = TRUE;
   24ffe:	4b51      	ldr	r3, [pc, #324]	; (25144 <tagBtnCback+0x1e0>)
   25000:	2201      	movs	r2, #1
   25002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          DmConnReadRssi(connId);
   25006:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2500a:	4618      	mov	r0, r3
   2500c:	f7f0 fe34 	bl	15c78 <DmConnReadRssi>
          WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   25010:	2103      	movs	r1, #3
   25012:	484d      	ldr	r0, [pc, #308]	; (25148 <tagBtnCback+0x1e4>)
   25014:	f7e8 fc30 	bl	d878 <WsfTimerStartSec>
        break;
   25018:	e08d      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_2_MED:
        {
          uint8_t addrType = DmConnPeerAddrType(connId);
   2501a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2501e:	4618      	mov	r0, r3
   25020:	f7f0 fee2 	bl	15de8 <DmConnPeerAddrType>
   25024:	4603      	mov	r3, r0
   25026:	f88d 300f 	strb.w	r3, [sp, #15]

          /* if peer is using a public address */
          if (addrType == DM_ADDR_PUBLIC)
   2502a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2502e:	2b00      	cmp	r3, #0
   25030:	d17e      	bne.n	25130 <tagBtnCback+0x1cc>
          {
            /* add peer to the white list */
            DmDevWhiteListAdd(addrType, DmConnPeerAddr(connId));
   25032:	f89d 3017 	ldrb.w	r3, [sp, #23]
   25036:	4618      	mov	r0, r3
   25038:	f7f0 feea 	bl	15e10 <DmConnPeerAddr>
   2503c:	4602      	mov	r2, r0
   2503e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25042:	4611      	mov	r1, r2
   25044:	4618      	mov	r0, r3
   25046:	f7f1 fa7d 	bl	16544 <DmDevWhiteListAdd>

            /* set Advertising filter policy to All */
            DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_ALL);
   2504a:	2103      	movs	r1, #3
   2504c:	2000      	movs	r0, #0
   2504e:	f7f1 faf9 	bl	16644 <DmDevSetFilterPolicy>
          }
        }
        break;
   25052:	e06d      	b.n	25130 <tagBtnCback+0x1cc>
    }
  }
  /* button actions when not connected */
  else
  {
    switch (btn)
   25054:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25058:	3b02      	subs	r3, #2
   2505a:	2b08      	cmp	r3, #8
   2505c:	d86a      	bhi.n	25134 <tagBtnCback+0x1d0>
   2505e:	a201      	add	r2, pc, #4	; (adr r2, 25064 <tagBtnCback+0x100>)
   25060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25064:	00025089 	.word	0x00025089
   25068:	00025091 	.word	0x00025091
   2506c:	0002509f 	.word	0x0002509f
   25070:	000250ab 	.word	0x000250ab
   25074:	00025135 	.word	0x00025135
   25078:	000250bf 	.word	0x000250bf
   2507c:	000250b1 	.word	0x000250b1
   25080:	000250c5 	.word	0x000250c5
   25084:	00025123 	.word	0x00025123
    {
      case APP_UI_BTN_1_SHORT:
        /* start or restart advertising */
        AppAdvStart(APP_MODE_AUTO_INIT);
   25088:	2002      	movs	r0, #2
   2508a:	f003 f8d3 	bl	28234 <AppAdvStart>
        break;
   2508e:	e052      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_1_MED:
        /* enter discoverable and bondable mode mode */
        AppSetBondable(TRUE);
   25090:	2001      	movs	r0, #1
   25092:	f002 ff83 	bl	27f9c <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
   25096:	2001      	movs	r0, #1
   25098:	f003 f8cc 	bl	28234 <AppAdvStart>
        break;
   2509c:	e04b      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_1_LONG:
        /* clear all bonding info */
        AppSlaveClearAllBondingInfo();
   2509e:	f002 ffc5 	bl	2802c <AppSlaveClearAllBondingInfo>

        /* restart advertising */
        AppAdvStart(APP_MODE_AUTO_INIT);
   250a2:	2002      	movs	r0, #2
   250a4:	f003 f8c6 	bl	28234 <AppAdvStart>
        break;
   250a8:	e045      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_1_EX_LONG:
        /* add RPAO characteristic to GAP service -- needed only when DM Privacy enabled */
        SvcCoreGapAddRpaoCh();
   250aa:	f7ff fd25 	bl	24af8 <SvcCoreGapAddRpaoCh>
        break;
   250ae:	e042      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_2_MED:
        /* clear the white list */
        DmDevWhiteListClear();
   250b0:	f7f1 fa58 	bl	16564 <DmDevWhiteListClear>

        /* set Advertising filter policy to None */
        DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_NONE);
   250b4:	2100      	movs	r1, #0
   250b6:	2000      	movs	r0, #0
   250b8:	f7f1 fac4 	bl	16644 <DmDevSetFilterPolicy>
        break;
   250bc:	e03b      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_2_SHORT:
        /* stop advertising */
        AppAdvStop();
   250be:	f003 f8e9 	bl	28294 <AppAdvStop>
        break;
   250c2:	e038      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_2_LONG:
        /* if LL Privacy has been enabled and peer address is RPA */
        if (DmLlPrivEnabled() && DM_RAND_ADDR_RPA(tagCb.peerAddr, tagCb.addrType))
   250c4:	f7f1 fb9c 	bl	16800 <DmLlPrivEnabled>
   250c8:	4603      	mov	r3, r0
   250ca:	2b00      	cmp	r3, #0
   250cc:	d01f      	beq.n	2510e <tagBtnCback+0x1aa>
   250ce:	4b1d      	ldr	r3, [pc, #116]	; (25144 <tagBtnCback+0x1e0>)
   250d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   250d4:	2b01      	cmp	r3, #1
   250d6:	d11a      	bne.n	2510e <tagBtnCback+0x1aa>
   250d8:	4b1a      	ldr	r3, [pc, #104]	; (25144 <tagBtnCback+0x1e0>)
   250da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   250de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   250e2:	2b40      	cmp	r3, #64	; 0x40
   250e4:	d113      	bne.n	2510e <tagBtnCback+0x1aa>
        {
          dmSecKey_t *pPeerKey;

          /* if peer key found */
          if ((pPeerKey = tagGetPeerKey(tagCb.dbHdl)) != NULL)
   250e6:	4b17      	ldr	r3, [pc, #92]	; (25144 <tagBtnCback+0x1e0>)
   250e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   250ea:	4618      	mov	r0, r3
   250ec:	f7ff fe5c 	bl	24da8 <tagGetPeerKey>
   250f0:	9004      	str	r0, [sp, #16]
   250f2:	9b04      	ldr	r3, [sp, #16]
   250f4:	2b00      	cmp	r3, #0
   250f6:	d00a      	beq.n	2510e <tagBtnCback+0x1aa>
          {
            /* store peer identity info */
            BdaCpy(tagCb.peerAddr, pPeerKey->irk.bdAddr);
   250f8:	9b04      	ldr	r3, [sp, #16]
   250fa:	3310      	adds	r3, #16
   250fc:	4619      	mov	r1, r3
   250fe:	4813      	ldr	r0, [pc, #76]	; (2514c <tagBtnCback+0x1e8>)
   25100:	f7ef f9d2 	bl	144a8 <BdaCpy>
            tagCb.addrType = pPeerKey->irk.addrType;
   25104:	9b04      	ldr	r3, [sp, #16]
   25106:	7d9a      	ldrb	r2, [r3, #22]
   25108:	4b0e      	ldr	r3, [pc, #56]	; (25144 <tagBtnCback+0x1e0>)
   2510a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
          }
        }

        /* start directed advertising using peer address */
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr, tagCb.dbHdl);
   2510e:	4b0d      	ldr	r3, [pc, #52]	; (25144 <tagBtnCback+0x1e0>)
   25110:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
   25114:	4b0b      	ldr	r3, [pc, #44]	; (25144 <tagBtnCback+0x1e0>)
   25116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   25118:	4a0c      	ldr	r2, [pc, #48]	; (2514c <tagBtnCback+0x1e8>)
   2511a:	2004      	movs	r0, #4
   2511c:	f003 f8e6 	bl	282ec <AppConnAccept>
        break;
   25120:	e009      	b.n	25136 <tagBtnCback+0x1d2>

      case APP_UI_BTN_2_EX_LONG:
        /* enable device privacy -- start generating local RPAs every 15 minutes */
        DmDevPrivStart(15 * 60);
   25122:	f44f 7061 	mov.w	r0, #900	; 0x384
   25126:	f7f1 fab1 	bl	1668c <DmDevPrivStart>
        break;
   2512a:	e004      	b.n	25136 <tagBtnCback+0x1d2>
        break;
   2512c:	bf00      	nop
   2512e:	e002      	b.n	25136 <tagBtnCback+0x1d2>
        break;
   25130:	bf00      	nop
   25132:	e000      	b.n	25136 <tagBtnCback+0x1d2>

      default:
        break;
   25134:	bf00      	nop
    }
  }
}
   25136:	bf00      	nop
   25138:	b007      	add	sp, #28
   2513a:	f85d fb04 	ldr.w	pc, [sp], #4
   2513e:	bf00      	nop
   25140:	10002c28 	.word	0x10002c28
   25144:	100087d4 	.word	0x100087d4
   25148:	10008800 	.word	0x10008800
   2514c:	10008811 	.word	0x10008811

00025150 <tagDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDiscCback(dmConnId_t connId, uint8_t status)
{
   25150:	b500      	push	{lr}
   25152:	b085      	sub	sp, #20
   25154:	4603      	mov	r3, r0
   25156:	460a      	mov	r2, r1
   25158:	f88d 300f 	strb.w	r3, [sp, #15]
   2515c:	4613      	mov	r3, r2
   2515e:	f88d 300e 	strb.w	r3, [sp, #14]
  switch(status)
   25162:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25166:	2b08      	cmp	r3, #8
   25168:	f200 8096 	bhi.w	25298 <tagDiscCback+0x148>
   2516c:	a201      	add	r2, pc, #4	; (adr r2, 25174 <tagDiscCback+0x24>)
   2516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25172:	bf00      	nop
   25174:	00025199 	.word	0x00025199
   25178:	000251a9 	.word	0x000251a9
   2517c:	000251b5 	.word	0x000251b5
   25180:	000251c1 	.word	0x000251c1
   25184:	000251fd 	.word	0x000251fd
   25188:	000251db 	.word	0x000251db
   2518c:	00025273 	.word	0x00025273
   25190:	00025299 	.word	0x00025299
   25194:	0002528b 	.word	0x0002528b
  {
    case APP_DISC_INIT:
      /* set handle list when initialization requested */
      AppDiscSetHdlList(connId, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
   25198:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2519c:	4a41      	ldr	r2, [pc, #260]	; (252a4 <tagDiscCback+0x154>)
   2519e:	2106      	movs	r1, #6
   251a0:	4618      	mov	r0, r3
   251a2:	f000 ff6d 	bl	26080 <AppDiscSetHdlList>
      break;
   251a6:	e078      	b.n	2529a <tagDiscCback+0x14a>

    case APP_DISC_READ_DATABASE_HASH:
      /* Read peer's database hash */
      AppDiscReadDatabaseHash(connId);
   251a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   251ac:	4618      	mov	r0, r3
   251ae:	f001 f92f 	bl	26410 <AppDiscReadDatabaseHash>
      break;
   251b2:	e072      	b.n	2529a <tagDiscCback+0x14a>

    case APP_DISC_SEC_REQUIRED:
      /* request security */
      AppSlaveSecurityReq(connId);
   251b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   251b8:	4618      	mov	r0, r3
   251ba:	f002 fefd 	bl	27fb8 <AppSlaveSecurityReq>
      break;
   251be:	e06c      	b.n	2529a <tagDiscCback+0x14a>

    case APP_DISC_START:
      /* initialize discovery state */
      tagCb.discState = TAG_DISC_IAS_SVC;
   251c0:	4b38      	ldr	r3, [pc, #224]	; (252a4 <tagDiscCback+0x154>)
   251c2:	2200      	movs	r2, #0
   251c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

      /* discover immediate alert service */
      FmplIasDiscover(connId, pTagIasHdlList);
   251c8:	4b37      	ldr	r3, [pc, #220]	; (252a8 <tagDiscCback+0x158>)
   251ca:	681a      	ldr	r2, [r3, #0]
   251cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   251d0:	4611      	mov	r1, r2
   251d2:	4618      	mov	r0, r3
   251d4:	f7e8 fc5e 	bl	da94 <FmplIasDiscover>
      break;
   251d8:	e05f      	b.n	2529a <tagDiscCback+0x14a>

    case APP_DISC_FAILED:
      if (pAppCfg->abortDisc)
   251da:	4b34      	ldr	r3, [pc, #208]	; (252ac <tagDiscCback+0x15c>)
   251dc:	681b      	ldr	r3, [r3, #0]
   251de:	781b      	ldrb	r3, [r3, #0]
   251e0:	2b00      	cmp	r3, #0
   251e2:	d00b      	beq.n	251fc <tagDiscCback+0xac>
      {
        /* if immediate alert service not found */
        if (tagCb.discState == TAG_DISC_IAS_SVC)
   251e4:	4b2f      	ldr	r3, [pc, #188]	; (252a4 <tagDiscCback+0x154>)
   251e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   251ea:	2b00      	cmp	r3, #0
   251ec:	d106      	bne.n	251fc <tagDiscCback+0xac>
        {
          /* discovery failed */
          AppDiscComplete(connId, APP_DISC_FAILED);
   251ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   251f2:	2105      	movs	r1, #5
   251f4:	4618      	mov	r0, r3
   251f6:	f000 ff5f 	bl	260b8 <AppDiscComplete>
          break;
   251fa:	e04e      	b.n	2529a <tagDiscCback+0x14a>
      }
      /* Else falls through. */

    case APP_DISC_CMPL:
      /* next discovery state */
      tagCb.discState++;
   251fc:	4b29      	ldr	r3, [pc, #164]	; (252a4 <tagDiscCback+0x154>)
   251fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   25202:	3301      	adds	r3, #1
   25204:	b2da      	uxtb	r2, r3
   25206:	4b27      	ldr	r3, [pc, #156]	; (252a4 <tagDiscCback+0x154>)
   25208:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

      if (tagCb.discState == TAG_DISC_GATT_SVC)
   2520c:	4b25      	ldr	r3, [pc, #148]	; (252a4 <tagDiscCback+0x154>)
   2520e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   25212:	2b01      	cmp	r3, #1
   25214:	d108      	bne.n	25228 <tagDiscCback+0xd8>
      {
        /* discover GATT service */
        GattDiscover(connId, pTagGattHdlList);
   25216:	4b26      	ldr	r3, [pc, #152]	; (252b0 <tagDiscCback+0x160>)
   25218:	681a      	ldr	r2, [r3, #0]
   2521a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2521e:	4611      	mov	r1, r2
   25220:	4618      	mov	r0, r3
   25222:	f7f2 f917 	bl	17454 <GattDiscover>

        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
                         (attcDiscCfg_t *) tagDiscCfgList, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
      }
      break;
   25226:	e038      	b.n	2529a <tagDiscCback+0x14a>
      else if (tagCb.discState == TAG_DISC_GAP_SVC)
   25228:	4b1e      	ldr	r3, [pc, #120]	; (252a4 <tagDiscCback+0x154>)
   2522a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   2522e:	2b02      	cmp	r3, #2
   25230:	d108      	bne.n	25244 <tagDiscCback+0xf4>
        GapDiscover(connId, pTagGapHdlList);
   25232:	4b20      	ldr	r3, [pc, #128]	; (252b4 <tagDiscCback+0x164>)
   25234:	681a      	ldr	r2, [r3, #0]
   25236:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2523a:	4611      	mov	r1, r2
   2523c:	4618      	mov	r0, r3
   2523e:	f7f2 fa0f 	bl	17660 <GapDiscover>
      break;
   25242:	e02a      	b.n	2529a <tagDiscCback+0x14a>
        AppDiscComplete(connId, APP_DISC_CMPL);
   25244:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25248:	2104      	movs	r1, #4
   2524a:	4618      	mov	r0, r3
   2524c:	f000 ff34 	bl	260b8 <AppDiscComplete>
        tagDiscGapCmpl(connId);
   25250:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25254:	4618      	mov	r0, r3
   25256:	f7ff fe4b 	bl	24ef0 <tagDiscGapCmpl>
        AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
   2525a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   2525e:	4b11      	ldr	r3, [pc, #68]	; (252a4 <tagDiscCback+0x154>)
   25260:	9301      	str	r3, [sp, #4]
   25262:	2306      	movs	r3, #6
   25264:	9300      	str	r3, [sp, #0]
   25266:	4b14      	ldr	r3, [pc, #80]	; (252b8 <tagDiscCback+0x168>)
   25268:	2203      	movs	r2, #3
   2526a:	2106      	movs	r1, #6
   2526c:	f000 ffee 	bl	2624c <AppDiscConfigure>
      break;
   25270:	e013      	b.n	2529a <tagDiscCback+0x14a>

    case APP_DISC_CFG_START:
      /* start configuration */
      AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
   25272:	f89d 000f 	ldrb.w	r0, [sp, #15]
   25276:	4b0b      	ldr	r3, [pc, #44]	; (252a4 <tagDiscCback+0x154>)
   25278:	9301      	str	r3, [sp, #4]
   2527a:	2306      	movs	r3, #6
   2527c:	9300      	str	r3, [sp, #0]
   2527e:	4b0e      	ldr	r3, [pc, #56]	; (252b8 <tagDiscCback+0x168>)
   25280:	2203      	movs	r2, #3
   25282:	2106      	movs	r1, #6
   25284:	f000 ffe2 	bl	2624c <AppDiscConfigure>
                       (attcDiscCfg_t *) tagDiscCfgList, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
      break;
   25288:	e007      	b.n	2529a <tagDiscCback+0x14a>

    case APP_DISC_CFG_CMPL:
      AppDiscComplete(connId, APP_DISC_CFG_CMPL);
   2528a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2528e:	2108      	movs	r1, #8
   25290:	4618      	mov	r0, r3
   25292:	f000 ff11 	bl	260b8 <AppDiscComplete>
      break;
   25296:	e000      	b.n	2529a <tagDiscCback+0x14a>
    case APP_DISC_CFG_CONN_START:
      /* no connection setup configuration for this application */
      break;

    default:
      break;
   25298:	bf00      	nop
  }
}
   2529a:	bf00      	nop
   2529c:	b005      	add	sp, #20
   2529e:	f85d fb04 	ldr.w	pc, [sp], #4
   252a2:	bf00      	nop
   252a4:	100087d4 	.word	0x100087d4
   252a8:	10002c28 	.word	0x10002c28
   252ac:	10009830 	.word	0x10009830
   252b0:	10002c2c 	.word	0x10002c2c
   252b4:	10002c30 	.word	0x10002c30
   252b8:	0002ce0c 	.word	0x0002ce0c

000252bc <tagProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagProcMsg(dmEvt_t *pMsg)
{
   252bc:	b500      	push	{lr}
   252be:	b085      	sub	sp, #20
   252c0:	9001      	str	r0, [sp, #4]
  uint8_t uiEvent = APP_UI_NONE;
   252c2:	2300      	movs	r3, #0
   252c4:	f88d 300f 	strb.w	r3, [sp, #15]

  switch(pMsg->hdr.event)
   252c8:	9b01      	ldr	r3, [sp, #4]
   252ca:	789b      	ldrb	r3, [r3, #2]
   252cc:	3b05      	subs	r3, #5
   252ce:	2b9b      	cmp	r3, #155	; 0x9b
   252d0:	f200 81a7 	bhi.w	25622 <tagProcMsg+0x366>
   252d4:	a201      	add	r2, pc, #4	; (adr r2, 252dc <tagProcMsg+0x20>)
   252d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   252da:	bf00      	nop
   252dc:	0002554d 	.word	0x0002554d
   252e0:	00025623 	.word	0x00025623
   252e4:	00025623 	.word	0x00025623
   252e8:	00025623 	.word	0x00025623
   252ec:	00025623 	.word	0x00025623
   252f0:	00025623 	.word	0x00025623
   252f4:	00025623 	.word	0x00025623
   252f8:	00025623 	.word	0x00025623
   252fc:	00025623 	.word	0x00025623
   25300:	0002554d 	.word	0x0002554d
   25304:	00025623 	.word	0x00025623
   25308:	00025623 	.word	0x00025623
   2530c:	00025623 	.word	0x00025623
   25310:	00025555 	.word	0x00025555
   25314:	00025623 	.word	0x00025623
   25318:	00025623 	.word	0x00025623
   2531c:	00025623 	.word	0x00025623
   25320:	00025623 	.word	0x00025623
   25324:	00025623 	.word	0x00025623
   25328:	00025623 	.word	0x00025623
   2532c:	00025623 	.word	0x00025623
   25330:	00025623 	.word	0x00025623
   25334:	00025623 	.word	0x00025623
   25338:	00025623 	.word	0x00025623
   2533c:	00025623 	.word	0x00025623
   25340:	00025623 	.word	0x00025623
   25344:	00025623 	.word	0x00025623
   25348:	00025563 	.word	0x00025563
   2534c:	00025579 	.word	0x00025579
   25350:	00025581 	.word	0x00025581
   25354:	00025623 	.word	0x00025623
   25358:	00025623 	.word	0x00025623
   2535c:	00025623 	.word	0x00025623
   25360:	00025623 	.word	0x00025623
   25364:	00025589 	.word	0x00025589
   25368:	00025597 	.word	0x00025597
   2536c:	00025623 	.word	0x00025623
   25370:	000255a5 	.word	0x000255a5
   25374:	000255b7 	.word	0x000255b7
   25378:	000255c3 	.word	0x000255c3
   2537c:	000255cb 	.word	0x000255cb
   25380:	000255d3 	.word	0x000255d3
   25384:	00025623 	.word	0x00025623
   25388:	00025623 	.word	0x00025623
   2538c:	00025623 	.word	0x00025623
   25390:	00025623 	.word	0x00025623
   25394:	00025623 	.word	0x00025623
   25398:	00025623 	.word	0x00025623
   2539c:	000255dd 	.word	0x000255dd
   253a0:	00025623 	.word	0x00025623
   253a4:	00025623 	.word	0x00025623
   253a8:	00025623 	.word	0x00025623
   253ac:	000255ff 	.word	0x000255ff
   253b0:	000255e7 	.word	0x000255e7
   253b4:	000255ef 	.word	0x000255ef
   253b8:	00025615 	.word	0x00025615
   253bc:	00025623 	.word	0x00025623
   253c0:	00025623 	.word	0x00025623
   253c4:	00025623 	.word	0x00025623
   253c8:	00025623 	.word	0x00025623
   253cc:	00025623 	.word	0x00025623
   253d0:	00025623 	.word	0x00025623
   253d4:	00025623 	.word	0x00025623
   253d8:	00025623 	.word	0x00025623
   253dc:	00025623 	.word	0x00025623
   253e0:	00025623 	.word	0x00025623
   253e4:	00025623 	.word	0x00025623
   253e8:	00025623 	.word	0x00025623
   253ec:	00025623 	.word	0x00025623
   253f0:	00025623 	.word	0x00025623
   253f4:	00025623 	.word	0x00025623
   253f8:	00025623 	.word	0x00025623
   253fc:	00025623 	.word	0x00025623
   25400:	00025623 	.word	0x00025623
   25404:	00025623 	.word	0x00025623
   25408:	00025623 	.word	0x00025623
   2540c:	00025623 	.word	0x00025623
   25410:	00025623 	.word	0x00025623
   25414:	00025623 	.word	0x00025623
   25418:	00025623 	.word	0x00025623
   2541c:	00025623 	.word	0x00025623
   25420:	00025623 	.word	0x00025623
   25424:	00025623 	.word	0x00025623
   25428:	00025623 	.word	0x00025623
   2542c:	00025623 	.word	0x00025623
   25430:	00025623 	.word	0x00025623
   25434:	00025623 	.word	0x00025623
   25438:	00025623 	.word	0x00025623
   2543c:	00025623 	.word	0x00025623
   25440:	00025623 	.word	0x00025623
   25444:	00025623 	.word	0x00025623
   25448:	00025623 	.word	0x00025623
   2544c:	00025623 	.word	0x00025623
   25450:	00025623 	.word	0x00025623
   25454:	00025623 	.word	0x00025623
   25458:	00025623 	.word	0x00025623
   2545c:	00025623 	.word	0x00025623
   25460:	00025623 	.word	0x00025623
   25464:	00025623 	.word	0x00025623
   25468:	00025623 	.word	0x00025623
   2546c:	00025623 	.word	0x00025623
   25470:	00025623 	.word	0x00025623
   25474:	00025623 	.word	0x00025623
   25478:	00025623 	.word	0x00025623
   2547c:	00025623 	.word	0x00025623
   25480:	00025623 	.word	0x00025623
   25484:	00025623 	.word	0x00025623
   25488:	00025623 	.word	0x00025623
   2548c:	00025623 	.word	0x00025623
   25490:	00025623 	.word	0x00025623
   25494:	00025623 	.word	0x00025623
   25498:	00025623 	.word	0x00025623
   2549c:	00025623 	.word	0x00025623
   254a0:	00025623 	.word	0x00025623
   254a4:	00025623 	.word	0x00025623
   254a8:	00025623 	.word	0x00025623
   254ac:	00025623 	.word	0x00025623
   254b0:	00025623 	.word	0x00025623
   254b4:	00025623 	.word	0x00025623
   254b8:	00025623 	.word	0x00025623
   254bc:	00025623 	.word	0x00025623
   254c0:	00025623 	.word	0x00025623
   254c4:	00025623 	.word	0x00025623
   254c8:	00025623 	.word	0x00025623
   254cc:	00025623 	.word	0x00025623
   254d0:	00025623 	.word	0x00025623
   254d4:	00025623 	.word	0x00025623
   254d8:	00025623 	.word	0x00025623
   254dc:	00025623 	.word	0x00025623
   254e0:	00025623 	.word	0x00025623
   254e4:	00025623 	.word	0x00025623
   254e8:	00025623 	.word	0x00025623
   254ec:	00025623 	.word	0x00025623
   254f0:	00025623 	.word	0x00025623
   254f4:	00025623 	.word	0x00025623
   254f8:	00025623 	.word	0x00025623
   254fc:	00025623 	.word	0x00025623
   25500:	00025623 	.word	0x00025623
   25504:	00025623 	.word	0x00025623
   25508:	00025623 	.word	0x00025623
   2550c:	00025623 	.word	0x00025623
   25510:	00025623 	.word	0x00025623
   25514:	00025623 	.word	0x00025623
   25518:	00025623 	.word	0x00025623
   2551c:	00025623 	.word	0x00025623
   25520:	00025623 	.word	0x00025623
   25524:	00025623 	.word	0x00025623
   25528:	00025623 	.word	0x00025623
   2552c:	00025623 	.word	0x00025623
   25530:	00025623 	.word	0x00025623
   25534:	00025623 	.word	0x00025623
   25538:	00025623 	.word	0x00025623
   2553c:	00025623 	.word	0x00025623
   25540:	00025623 	.word	0x00025623
   25544:	00025623 	.word	0x00025623
   25548:	000255f7 	.word	0x000255f7
  {
    case ATTC_READ_RSP:
    case ATTC_HANDLE_VALUE_IND:
      tagValueUpdate((attEvt_t *) pMsg);
   2554c:	9801      	ldr	r0, [sp, #4]
   2554e:	f7ff fcad 	bl	24eac <tagValueUpdate>
      break;
   25552:	e069      	b.n	25628 <tagProcMsg+0x36c>

    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   25554:	9b01      	ldr	r3, [sp, #4]
   25556:	89db      	ldrh	r3, [r3, #14]
   25558:	4619      	mov	r1, r3
   2555a:	483a      	ldr	r0, [pc, #232]	; (25644 <tagProcMsg+0x388>)
   2555c:	f7e8 fa74 	bl	da48 <WsfTrace>
      break;  
   25560:	e062      	b.n	25628 <tagProcMsg+0x36c>

    case DM_RESET_CMPL_IND:
      AttsCalculateDbHash();
   25562:	f7eb fcab 	bl	10ebc <AttsCalculateDbHash>
      DmSecGenerateEccKeyReq();
   25566:	f7f1 fe5b 	bl	17220 <DmSecGenerateEccKeyReq>
      tagSetup(pMsg);
   2556a:	9801      	ldr	r0, [sp, #4]
   2556c:	f7ff fc7c 	bl	24e68 <tagSetup>
      uiEvent = APP_UI_RESET_CMPL;
   25570:	2301      	movs	r3, #1
   25572:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   25576:	e057      	b.n	25628 <tagProcMsg+0x36c>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   25578:	2303      	movs	r3, #3
   2557a:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   2557e:	e053      	b.n	25628 <tagProcMsg+0x36c>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   25580:	2304      	movs	r3, #4
   25582:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   25586:	e04f      	b.n	25628 <tagProcMsg+0x36c>

    case DM_CONN_OPEN_IND:
      tagOpen(pMsg);
   25588:	9801      	ldr	r0, [sp, #4]
   2558a:	f7ff fbc3 	bl	24d14 <tagOpen>
      uiEvent = APP_UI_CONN_OPEN;
   2558e:	2308      	movs	r3, #8
   25590:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   25594:	e048      	b.n	25628 <tagProcMsg+0x36c>

    case DM_CONN_CLOSE_IND:
      tagClose(pMsg);
   25596:	9801      	ldr	r0, [sp, #4]
   25598:	f7ff fbd8 	bl	24d4c <tagClose>
      uiEvent = APP_UI_CONN_CLOSE;
   2559c:	2309      	movs	r3, #9
   2559e:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   255a2:	e041      	b.n	25628 <tagProcMsg+0x36c>

    case DM_SEC_PAIR_CMPL_IND:
      tagSecPairCmpl(pMsg);
   255a4:	9801      	ldr	r0, [sp, #4]
   255a6:	f7ff fc11 	bl	24dcc <tagSecPairCmpl>
      DmSecGenerateEccKeyReq();
   255aa:	f7f1 fe39 	bl	17220 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   255ae:	230a      	movs	r3, #10
   255b0:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   255b4:	e038      	b.n	25628 <tagProcMsg+0x36c>

    case DM_SEC_PAIR_FAIL_IND:
      DmSecGenerateEccKeyReq();
   255b6:	f7f1 fe33 	bl	17220 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   255ba:	230b      	movs	r3, #11
   255bc:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   255c0:	e032      	b.n	25628 <tagProcMsg+0x36c>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   255c2:	230c      	movs	r3, #12
   255c4:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   255c8:	e02e      	b.n	25628 <tagProcMsg+0x36c>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   255ca:	230d      	movs	r3, #13
   255cc:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   255d0:	e02a      	b.n	25628 <tagProcMsg+0x36c>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->authReq);
   255d2:	9b01      	ldr	r3, [sp, #4]
   255d4:	4618      	mov	r0, r3
   255d6:	f000 ffe5 	bl	265a4 <AppHandlePasskey>
      break;
   255da:	e025      	b.n	25628 <tagProcMsg+0x36c>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->cnfInd);
   255dc:	9b01      	ldr	r3, [sp, #4]
   255de:	4618      	mov	r0, r3
   255e0:	f001 f81c 	bl	2661c <AppHandleNumericComparison>
      break;
   255e4:	e020      	b.n	25628 <tagProcMsg+0x36c>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      tagPrivAddDevToResListInd(pMsg);
   255e6:	9801      	ldr	r0, [sp, #4]
   255e8:	f7ff fc02 	bl	24df0 <tagPrivAddDevToResListInd>
      break;
   255ec:	e01c      	b.n	25628 <tagProcMsg+0x36c>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      tagPrivRemDevFromResListInd(pMsg);
   255ee:	9801      	ldr	r0, [sp, #4]
   255f0:	f7ff fc1b 	bl	24e2a <tagPrivRemDevFromResListInd>
      break;
   255f4:	e018      	b.n	25628 <tagProcMsg+0x36c>

    case DM_ADV_NEW_ADDR_IND:
      break;

    case TAG_RSSI_TIMER_IND:
      tagProcRssiTimer(pMsg);
   255f6:	9801      	ldr	r0, [sp, #4]
   255f8:	f7ff fc98 	bl	24f2c <tagProcRssiTimer>
      break;
   255fc:	e014      	b.n	25628 <tagProcMsg+0x36c>

    case DM_CONN_READ_RSSI_IND:
      /* if successful */
      if (pMsg->hdr.status == HCI_SUCCESS)
   255fe:	9b01      	ldr	r3, [sp, #4]
   25600:	78db      	ldrb	r3, [r3, #3]
   25602:	2b00      	cmp	r3, #0
   25604:	d10f      	bne.n	25626 <tagProcMsg+0x36a>
      {
        /* display RSSI value */
        AppUiDisplayRssi(pMsg->readRssi.rssi);
   25606:	9b01      	ldr	r3, [sp, #4]
   25608:	f993 3008 	ldrsb.w	r3, [r3, #8]
   2560c:	4618      	mov	r0, r3
   2560e:	f7ee fb49 	bl	13ca4 <AppUiDisplayRssi>
      }
      break;
   25612:	e008      	b.n	25626 <tagProcMsg+0x36a>

    case DM_PRIV_CLEAR_RES_LIST_IND:
      APP_TRACE_INFO1("Clear resolving list status 0x%02x", pMsg->hdr.status);
   25614:	9b01      	ldr	r3, [sp, #4]
   25616:	78db      	ldrb	r3, [r3, #3]
   25618:	4619      	mov	r1, r3
   2561a:	480b      	ldr	r0, [pc, #44]	; (25648 <tagProcMsg+0x38c>)
   2561c:	f7e8 fa14 	bl	da48 <WsfTrace>
      break;
   25620:	e002      	b.n	25628 <tagProcMsg+0x36c>
        #endif
      }
      break;
	  
    default:
      break;
   25622:	bf00      	nop
   25624:	e000      	b.n	25628 <tagProcMsg+0x36c>
      break;
   25626:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   25628:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2562c:	2b00      	cmp	r3, #0
   2562e:	d004      	beq.n	2563a <tagProcMsg+0x37e>
  {
    AppUiAction(uiEvent);
   25630:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25634:	4618      	mov	r0, r3
   25636:	f7ee fa2d 	bl	13a94 <AppUiAction>
  }
}
   2563a:	bf00      	nop
   2563c:	b005      	add	sp, #20
   2563e:	f85d fb04 	ldr.w	pc, [sp], #4
   25642:	bf00      	nop
   25644:	0002bfe8 	.word	0x0002bfe8
   25648:	0002bffc 	.word	0x0002bffc

0002564c <TagHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagHandlerInit(wsfHandlerId_t handlerId)
{
   2564c:	b500      	push	{lr}
   2564e:	b083      	sub	sp, #12
   25650:	4603      	mov	r3, r0
   25652:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_TRACE_INFO0("TagHandlerInit");
   25656:	481b      	ldr	r0, [pc, #108]	; (256c4 <TagHandlerInit+0x78>)
   25658:	f7e8 f9f6 	bl	da48 <WsfTrace>

  /* store handler ID */
  tagCb.handlerId = handlerId;
   2565c:	4a1a      	ldr	r2, [pc, #104]	; (256c8 <TagHandlerInit+0x7c>)
   2565e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25662:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

  /* initialize control block */
  tagCb.rssiTimer.handlerId = handlerId;
   25666:	4a18      	ldr	r2, [pc, #96]	; (256c8 <TagHandlerInit+0x7c>)
   25668:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2566c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  tagCb.rssiTimer.msg.event = TAG_RSSI_TIMER_IND;
   25670:	4b15      	ldr	r3, [pc, #84]	; (256c8 <TagHandlerInit+0x7c>)
   25672:	22a0      	movs	r2, #160	; 0xa0
   25674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  tagCb.inProgress = FALSE;
   25678:	4b13      	ldr	r3, [pc, #76]	; (256c8 <TagHandlerInit+0x7c>)
   2567a:	2200      	movs	r2, #0
   2567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set configuration pointers */
  pAppSlaveCfg = (appSlaveCfg_t *) &tagSlaveCfg;
   25680:	4b12      	ldr	r3, [pc, #72]	; (256cc <TagHandlerInit+0x80>)
   25682:	4a13      	ldr	r2, [pc, #76]	; (256d0 <TagHandlerInit+0x84>)
   25684:	601a      	str	r2, [r3, #0]
  pAppAdvCfg = (appAdvCfg_t *) &tagAdvCfg;
   25686:	4b13      	ldr	r3, [pc, #76]	; (256d4 <TagHandlerInit+0x88>)
   25688:	4a13      	ldr	r2, [pc, #76]	; (256d8 <TagHandlerInit+0x8c>)
   2568a:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &tagSecCfg;
   2568c:	4b13      	ldr	r3, [pc, #76]	; (256dc <TagHandlerInit+0x90>)
   2568e:	4a14      	ldr	r2, [pc, #80]	; (256e0 <TagHandlerInit+0x94>)
   25690:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &tagUpdateCfg;
   25692:	4b14      	ldr	r3, [pc, #80]	; (256e4 <TagHandlerInit+0x98>)
   25694:	4a14      	ldr	r2, [pc, #80]	; (256e8 <TagHandlerInit+0x9c>)
   25696:	601a      	str	r2, [r3, #0]
  pAppDiscCfg = (appDiscCfg_t *) &tagDiscCfg;
   25698:	4b14      	ldr	r3, [pc, #80]	; (256ec <TagHandlerInit+0xa0>)
   2569a:	4a15      	ldr	r2, [pc, #84]	; (256f0 <TagHandlerInit+0xa4>)
   2569c:	601a      	str	r2, [r3, #0]
  pAppCfg = (appCfg_t *) &tagAppCfg;
   2569e:	4b15      	ldr	r3, [pc, #84]	; (256f4 <TagHandlerInit+0xa8>)
   256a0:	4a15      	ldr	r2, [pc, #84]	; (256f8 <TagHandlerInit+0xac>)
   256a2:	601a      	str	r2, [r3, #0]

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *)&tagSmpCfg;
   256a4:	4b15      	ldr	r3, [pc, #84]	; (256fc <TagHandlerInit+0xb0>)
   256a6:	4a16      	ldr	r2, [pc, #88]	; (25700 <TagHandlerInit+0xb4>)
   256a8:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   256aa:	f002 f83f 	bl	2772c <AppSlaveInit>
  AppDiscInit();
   256ae:	f000 fcb9 	bl	26024 <AppDiscInit>
  AppServerInit();
   256b2:	f001 fa13 	bl	26adc <AppServerInit>

  /* Set IRK for the local device */
  DmSecSetLocalIrk(localIrk);
   256b6:	4813      	ldr	r0, [pc, #76]	; (25704 <TagHandlerInit+0xb8>)
   256b8:	f7f1 fd4e 	bl	17158 <DmSecSetLocalIrk>
}
   256bc:	bf00      	nop
   256be:	b003      	add	sp, #12
   256c0:	f85d fb04 	ldr.w	pc, [sp], #4
   256c4:	0002c020 	.word	0x0002c020
   256c8:	100087d4 	.word	0x100087d4
   256cc:	10009814 	.word	0x10009814
   256d0:	0002cdb4 	.word	0x0002cdb4
   256d4:	10009838 	.word	0x10009838
   256d8:	0002cda8 	.word	0x0002cda8
   256dc:	1000982c 	.word	0x1000982c
   256e0:	0002cdb8 	.word	0x0002cdb8
   256e4:	10009810 	.word	0x10009810
   256e8:	0002cdc0 	.word	0x0002cdc0
   256ec:	10009820 	.word	0x10009820
   256f0:	0002cdd0 	.word	0x0002cdd0
   256f4:	10009830 	.word	0x10009830
   256f8:	0002cdec 	.word	0x0002cdec
   256fc:	10002bd0 	.word	0x10002bd0
   25700:	0002cdd4 	.word	0x0002cdd4
   25704:	10002c18 	.word	0x10002c18

00025708 <TagHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   25708:	b500      	push	{lr}
   2570a:	b083      	sub	sp, #12
   2570c:	4603      	mov	r3, r0
   2570e:	9100      	str	r1, [sp, #0]
   25710:	f88d 3007 	strb.w	r3, [sp, #7]
  if (pMsg != NULL)
   25714:	9b00      	ldr	r3, [sp, #0]
   25716:	2b00      	cmp	r3, #0
   25718:	d020      	beq.n	2575c <TagHandler+0x54>
  {
    APP_TRACE_INFO1("Tag got evt %d", pMsg->event);
   2571a:	9b00      	ldr	r3, [sp, #0]
   2571c:	789b      	ldrb	r3, [r3, #2]
   2571e:	4619      	mov	r1, r3
   25720:	4810      	ldr	r0, [pc, #64]	; (25764 <TagHandler+0x5c>)
   25722:	f7e8 f991 	bl	da48 <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
   25726:	9b00      	ldr	r3, [sp, #0]
   25728:	789b      	ldrb	r3, [r3, #2]
   2572a:	2b12      	cmp	r3, #18
   2572c:	d806      	bhi.n	2573c <TagHandler+0x34>
    {
      /* process discovery-related ATT messages */
      AppDiscProcAttMsg((attEvt_t *) pMsg);
   2572e:	9800      	ldr	r0, [sp, #0]
   25730:	f000 fb0a 	bl	25d48 <AppDiscProcAttMsg>

      /* process server-related ATT messages */
      AppServerProcAttMsg(pMsg);
   25734:	9800      	ldr	r0, [sp, #0]
   25736:	f001 f9ba 	bl	26aae <AppServerProcAttMsg>
   2573a:	e00c      	b.n	25756 <TagHandler+0x4e>
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
   2573c:	9b00      	ldr	r3, [sp, #0]
   2573e:	789b      	ldrb	r3, [r3, #2]
   25740:	2b67      	cmp	r3, #103	; 0x67
   25742:	d808      	bhi.n	25756 <TagHandler+0x4e>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   25744:	9800      	ldr	r0, [sp, #0]
   25746:	f002 f841 	bl	277cc <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   2574a:	9800      	ldr	r0, [sp, #0]
   2574c:	f002 fba4 	bl	27e98 <AppSlaveSecProcDmMsg>

      /* process discovery-related messages */
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
   25750:	9800      	ldr	r0, [sp, #0]
   25752:	f000 fac7 	bl	25ce4 <AppDiscProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    tagProcMsg((dmEvt_t *) pMsg);
   25756:	9800      	ldr	r0, [sp, #0]
   25758:	f7ff fdb0 	bl	252bc <tagProcMsg>
  }
}
   2575c:	bf00      	nop
   2575e:	b003      	add	sp, #12
   25760:	f85d fb04 	ldr.w	pc, [sp], #4
   25764:	0002c030 	.word	0x0002c030

00025768 <TagStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagStart(void)
{
   25768:	b508      	push	{r3, lr}
  /* Register for stack callbacks */
  DmRegister(tagDmCback);
   2576a:	4815      	ldr	r0, [pc, #84]	; (257c0 <TagStart+0x58>)
   2576c:	f7f0 ffe6 	bl	1673c <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, tagDmCback);
   25770:	4913      	ldr	r1, [pc, #76]	; (257c0 <TagStart+0x58>)
   25772:	2003      	movs	r0, #3
   25774:	f7f0 f9aa 	bl	15acc <DmConnRegister>
  AttRegister(tagAttCback);
   25778:	4812      	ldr	r0, [pc, #72]	; (257c4 <TagStart+0x5c>)
   2577a:	f7ed fd09 	bl	13190 <AttRegister>
  AttConnRegister(AppServerConnCback);
   2577e:	4812      	ldr	r0, [pc, #72]	; (257c8 <TagStart+0x60>)
   25780:	f7ed fd26 	bl	131d0 <AttConnRegister>
  AttsCccRegister(TAG_NUM_CCC_IDX, (attsCccSet_t *) tagCccSet, tagCccCback);
   25784:	4a11      	ldr	r2, [pc, #68]	; (257cc <TagStart+0x64>)
   25786:	4912      	ldr	r1, [pc, #72]	; (257d0 <TagStart+0x68>)
   25788:	2001      	movs	r0, #1
   2578a:	f7ea fa21 	bl	fbd0 <AttsCccRegister>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(tagBtnCback);
   2578e:	4811      	ldr	r0, [pc, #68]	; (257d4 <TagStart+0x6c>)
   25790:	f7ee faae 	bl	13cf0 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(tagDiscCback);
   25794:	4810      	ldr	r0, [pc, #64]	; (257d8 <TagStart+0x70>)
   25796:	f000 fc69 	bl	2606c <AppDiscRegister>

  /* Initialize attribute server database */
  SvcCoreGattCbackRegister(GattReadCback, GattWriteCback);
   2579a:	4910      	ldr	r1, [pc, #64]	; (257dc <TagStart+0x74>)
   2579c:	4810      	ldr	r0, [pc, #64]	; (257e0 <TagStart+0x78>)
   2579e:	f7ff f98f 	bl	24ac0 <SvcCoreGattCbackRegister>
  SvcCoreAddGroup();
   257a2:	f7ff f97f 	bl	24aa4 <SvcCoreAddGroup>
  SvcPxCbackRegister(NULL, tagIasWriteCback);
   257a6:	490f      	ldr	r1, [pc, #60]	; (257e4 <TagStart+0x7c>)
   257a8:	2000      	movs	r0, #0
   257aa:	f7ff f9b9 	bl	24b20 <SvcPxCbackRegister>
  SvcPxAddGroup();
   257ae:	f7ff f9af 	bl	24b10 <SvcPxAddGroup>

  /* Set Service Changed CCCD index. */
  GattSetSvcChangedIdx(TAG_GATT_SC_CCC_IDX);
   257b2:	2000      	movs	r0, #0
   257b4:	f7f1 fe82 	bl	174bc <GattSetSvcChangedIdx>

  /* Reset the device */
  DmDevReset();
   257b8:	f7f0 feac 	bl	16514 <DmDevReset>
}
   257bc:	bf00      	nop
   257be:	bd08      	pop	{r3, pc}
   257c0:	00024b7d 	.word	0x00024b7d
   257c4:	00024bdd 	.word	0x00024bdd
   257c8:	0002681b 	.word	0x0002681b
   257cc:	00024c3d 	.word	0x00024c3d
   257d0:	0002ce24 	.word	0x0002ce24
   257d4:	00024f65 	.word	0x00024f65
   257d8:	00025151 	.word	0x00025151
   257dc:	00017609 	.word	0x00017609
   257e0:	000175b9 	.word	0x000175b9
   257e4:	00024cb5 	.word	0x00024cb5

000257e8 <appDiscCfgStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscCfgStart(dmConnId_t connId, uint8_t status)
{
   257e8:	b500      	push	{lr}
   257ea:	b085      	sub	sp, #20
   257ec:	4603      	mov	r3, r0
   257ee:	460a      	mov	r2, r1
   257f0:	f88d 3007 	strb.w	r3, [sp, #7]
   257f4:	4613      	mov	r3, r2
   257f6:	f88d 3006 	strb.w	r3, [sp, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   257fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   257fe:	3b01      	subs	r3, #1
   25800:	011b      	lsls	r3, r3, #4
   25802:	4a11      	ldr	r2, [pc, #68]	; (25848 <appDiscCfgStart+0x60>)
   25804:	4413      	add	r3, r2
   25806:	9303      	str	r3, [sp, #12]

  /* if configuration not complete */
  if (status < APP_DISC_CFG_CMPL)
   25808:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2580c:	2b07      	cmp	r3, #7
   2580e:	d807      	bhi.n	25820 <appDiscCfgStart+0x38>
  {
    /* notify application to start configuration */
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   25810:	4b0e      	ldr	r3, [pc, #56]	; (2584c <appDiscCfgStart+0x64>)
   25812:	681b      	ldr	r3, [r3, #0]
   25814:	f89d 2007 	ldrb.w	r2, [sp, #7]
   25818:	2106      	movs	r1, #6
   2581a:	4610      	mov	r0, r2
   2581c:	4798      	blx	r3
  /* else if configuration complete start connection setup configuration */
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
  {
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
  }
}
   2581e:	e00e      	b.n	2583e <appDiscCfgStart+0x56>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   25820:	f89d 3006 	ldrb.w	r3, [sp, #6]
   25824:	2b08      	cmp	r3, #8
   25826:	d10a      	bne.n	2583e <appDiscCfgStart+0x56>
   25828:	9b03      	ldr	r3, [sp, #12]
   2582a:	7a1b      	ldrb	r3, [r3, #8]
   2582c:	2b00      	cmp	r3, #0
   2582e:	d106      	bne.n	2583e <appDiscCfgStart+0x56>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   25830:	4b06      	ldr	r3, [pc, #24]	; (2584c <appDiscCfgStart+0x64>)
   25832:	681b      	ldr	r3, [r3, #0]
   25834:	f89d 2007 	ldrb.w	r2, [sp, #7]
   25838:	2107      	movs	r1, #7
   2583a:	4610      	mov	r0, r2
   2583c:	4798      	blx	r3
}
   2583e:	bf00      	nop
   25840:	b005      	add	sp, #20
   25842:	f85d fb04 	ldr.w	pc, [sp], #4
   25846:	bf00      	nop
   25848:	1000881c 	.word	0x1000881c
   2584c:	1000884c 	.word	0x1000884c

00025850 <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   25850:	b510      	push	{r4, lr}
   25852:	b088      	sub	sp, #32
   25854:	4603      	mov	r3, r0
   25856:	f88d 300f 	strb.w	r3, [sp, #15]
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   2585a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2585e:	3b01      	subs	r3, #1
   25860:	011b      	lsls	r3, r3, #4
   25862:	4a3b      	ldr	r2, [pc, #236]	; (25950 <appDiscStart+0x100>)
   25864:	4413      	add	r3, r2
   25866:	9306      	str	r3, [sp, #24]

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   25868:	9b06      	ldr	r3, [sp, #24]
   2586a:	7adb      	ldrb	r3, [r3, #11]
   2586c:	2b00      	cmp	r3, #0
   2586e:	d16d      	bne.n	2594c <appDiscStart+0xfc>
  {
    /* get discovery status */
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   25870:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25874:	4618      	mov	r0, r3
   25876:	f000 ff19 	bl	266ac <AppDbGetHdl>
   2587a:	9005      	str	r0, [sp, #20]
   2587c:	9b05      	ldr	r3, [sp, #20]
   2587e:	2b00      	cmp	r3, #0
   25880:	d006      	beq.n	25890 <appDiscStart+0x40>
    {
      status = AppDbGetDiscStatus(hdl);
   25882:	9805      	ldr	r0, [sp, #20]
   25884:	f7ee f88a 	bl	1399c <AppDbGetDiscStatus>
   25888:	4603      	mov	r3, r0
   2588a:	f88d 301f 	strb.w	r3, [sp, #31]
   2588e:	e003      	b.n	25898 <appDiscStart+0x48>
    }
    else
    {
      status = pAppDiscCb->cmplStatus;
   25890:	9b06      	ldr	r3, [sp, #24]
   25892:	7a5b      	ldrb	r3, [r3, #9]
   25894:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    /* if discovery not complete */
    if (status < APP_DISC_CMPL)
   25898:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2589c:	2b03      	cmp	r3, #3
   2589e:	d81f      	bhi.n	258e0 <appDiscStart+0x90>
    {
      /* Read database hash first if not bonded or if secure but without bond. */
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   258a0:	9b06      	ldr	r3, [sp, #24]
   258a2:	7b1b      	ldrb	r3, [r3, #12]
   258a4:	2b00      	cmp	r3, #0
   258a6:	d00b      	beq.n	258c0 <appDiscStart+0x70>
   258a8:	9b06      	ldr	r3, [sp, #24]
   258aa:	7b1b      	ldrb	r3, [r3, #12]
   258ac:	2b00      	cmp	r3, #0
   258ae:	d00f      	beq.n	258d0 <appDiscStart+0x80>
   258b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   258b4:	4618      	mov	r0, r3
   258b6:	f000 fe1b 	bl	264f0 <AppCheckBonded>
   258ba:	4603      	mov	r3, r0
   258bc:	2b00      	cmp	r3, #0
   258be:	d107      	bne.n	258d0 <appDiscStart+0x80>
      {
        /* notify application to start discovery */
        (*appDiscCback)(connId, APP_DISC_READ_DATABASE_HASH);
   258c0:	4b24      	ldr	r3, [pc, #144]	; (25954 <appDiscStart+0x104>)
   258c2:	681b      	ldr	r3, [r3, #0]
   258c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   258c8:	2101      	movs	r1, #1
   258ca:	4610      	mov	r0, r2
   258cc:	4798      	blx	r3
   258ce:	e03d      	b.n	2594c <appDiscStart+0xfc>
      }
      else
      {
        /* notify application to start discovery */
        (*appDiscCback)(connId, APP_DISC_START);
   258d0:	4b20      	ldr	r3, [pc, #128]	; (25954 <appDiscStart+0x104>)
   258d2:	681b      	ldr	r3, [r3, #0]
   258d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   258d8:	2103      	movs	r1, #3
   258da:	4610      	mov	r0, r2
   258dc:	4798      	blx	r3
   258de:	e035      	b.n	2594c <appDiscStart+0xfc>
      }
    }
    /* else if discovery was completed successfully */
    else if (status != APP_DISC_FAILED)
   258e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   258e4:	2b05      	cmp	r3, #5
   258e6:	d031      	beq.n	2594c <appDiscStart+0xfc>
    {
      /* get stored handle list if present */
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   258e8:	9b05      	ldr	r3, [sp, #20]
   258ea:	2b00      	cmp	r3, #0
   258ec:	d026      	beq.n	2593c <appDiscStart+0xec>
   258ee:	9b06      	ldr	r3, [sp, #24]
   258f0:	685b      	ldr	r3, [r3, #4]
   258f2:	2b00      	cmp	r3, #0
   258f4:	d022      	beq.n	2593c <appDiscStart+0xec>
      {
        /* Read hash before using handles */
        if (AppDbIsCacheCheckedByHash(hdl))
   258f6:	9805      	ldr	r0, [sp, #20]
   258f8:	f7ed ffac 	bl	13854 <AppDbIsCacheCheckedByHash>
   258fc:	4603      	mov	r3, r0
   258fe:	2b00      	cmp	r3, #0
   25900:	d00f      	beq.n	25922 <appDiscStart+0xd2>
        {
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   25902:	9b06      	ldr	r3, [sp, #24]
   25904:	2203      	movs	r2, #3
   25906:	72da      	strb	r2, [r3, #11]

          /* Read the database hash. */
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   25908:	f89d 000f 	ldrb.w	r0, [sp, #15]
   2590c:	2300      	movs	r3, #0
   2590e:	9301      	str	r3, [sp, #4]
   25910:	4b11      	ldr	r3, [pc, #68]	; (25958 <appDiscStart+0x108>)
   25912:	9300      	str	r3, [sp, #0]
   25914:	2302      	movs	r3, #2
   25916:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2591a:	2101      	movs	r1, #1
   2591c:	f7e9 ff04 	bl	f728 <AttcReadByTypeReq>
                            (uint8_t *)attGattDbhChUuid, FALSE);

          return;
   25920:	e014      	b.n	2594c <appDiscStart+0xfc>
        }
        else
        {
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   25922:	9b06      	ldr	r3, [sp, #24]
   25924:	685c      	ldr	r4, [r3, #4]
   25926:	9805      	ldr	r0, [sp, #20]
   25928:	f7ee f84d 	bl	139c6 <AppDbGetHdlList>
   2592c:	4601      	mov	r1, r0
   2592e:	9b06      	ldr	r3, [sp, #24]
   25930:	7a9b      	ldrb	r3, [r3, #10]
   25932:	005b      	lsls	r3, r3, #1
   25934:	461a      	mov	r2, r3
   25936:	4620      	mov	r0, r4
   25938:	f7e6 fbe2 	bl	c100 <memcpy>
        }
      }

      appDiscCfgStart(connId, status);
   2593c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   25940:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25944:	4611      	mov	r1, r2
   25946:	4618      	mov	r0, r3
   25948:	f7ff ff4e 	bl	257e8 <appDiscCfgStart>
    }
  }
}
   2594c:	b008      	add	sp, #32
   2594e:	bd10      	pop	{r4, pc}
   25950:	1000881c 	.word	0x1000881c
   25954:	1000884c 	.word	0x1000884c
   25958:	0002c23c 	.word	0x0002c23c

0002595c <appDiscRestartDiscovery>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscRestartDiscovery(dmConnId_t connId)
{
   2595c:	b500      	push	{lr}
   2595e:	b085      	sub	sp, #20
   25960:	4603      	mov	r3, r0
   25962:	f88d 3007 	strb.w	r3, [sp, #7]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   25966:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2596a:	3b01      	subs	r3, #1
   2596c:	011b      	lsls	r3, r3, #4
   2596e:	4a24      	ldr	r2, [pc, #144]	; (25a00 <appDiscRestartDiscovery+0xa4>)
   25970:	4413      	add	r3, r2
   25972:	9303      	str	r3, [sp, #12]
  appDbHdl_t  dbHdl;

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   25974:	9b03      	ldr	r3, [sp, #12]
   25976:	2200      	movs	r2, #0
   25978:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   2597a:	9b03      	ldr	r3, [sp, #12]
   2597c:	2200      	movs	r2, #0
   2597e:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   25980:	9b03      	ldr	r3, [sp, #12]
   25982:	2200      	movs	r2, #0
   25984:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   25986:	9b03      	ldr	r3, [sp, #12]
   25988:	2200      	movs	r2, #0
   2598a:	739a      	strb	r2, [r3, #14]

  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   2598c:	9b03      	ldr	r3, [sp, #12]
   2598e:	685b      	ldr	r3, [r3, #4]
   25990:	2b00      	cmp	r3, #0
   25992:	d01b      	beq.n	259cc <appDiscRestartDiscovery+0x70>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   25994:	9b03      	ldr	r3, [sp, #12]
   25996:	6858      	ldr	r0, [r3, #4]
   25998:	9b03      	ldr	r3, [sp, #12]
   2599a:	7a9b      	ldrb	r3, [r3, #10]
   2599c:	005b      	lsls	r3, r3, #1
   2599e:	461a      	mov	r2, r3
   259a0:	2100      	movs	r1, #0
   259a2:	f002 fd4b 	bl	2843c <memset>

    /* clear stored discovery status and handle list */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   259a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   259aa:	4618      	mov	r0, r3
   259ac:	f000 fe7e 	bl	266ac <AppDbGetHdl>
   259b0:	9002      	str	r0, [sp, #8]
   259b2:	9b02      	ldr	r3, [sp, #8]
   259b4:	2b00      	cmp	r3, #0
   259b6:	d009      	beq.n	259cc <appDiscRestartDiscovery+0x70>
    {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   259b8:	2100      	movs	r1, #0
   259ba:	9802      	ldr	r0, [sp, #8]
   259bc:	f7ed fff6 	bl	139ac <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   259c0:	9b03      	ldr	r3, [sp, #12]
   259c2:	685b      	ldr	r3, [r3, #4]
   259c4:	4619      	mov	r1, r3
   259c6:	9802      	ldr	r0, [sp, #8]
   259c8:	f7ee f804 	bl	139d4 <AppDbSetHdlList>
    }
  }

  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   259cc:	9b03      	ldr	r3, [sp, #12]
   259ce:	7adb      	ldrb	r3, [r3, #11]
   259d0:	2b02      	cmp	r3, #2
   259d2:	d103      	bne.n	259dc <appDiscRestartDiscovery+0x80>
  {
    /* set pending status to set up abort of configuration */
    pAppDiscCb->scPending = TRUE;
   259d4:	9b03      	ldr	r3, [sp, #12]
   259d6:	2201      	movs	r2, #1
   259d8:	739a      	strb	r2, [r3, #14]
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
    {
      appDiscStart(connId);
    }
  }
}
   259da:	e00d      	b.n	259f8 <appDiscRestartDiscovery+0x9c>
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   259dc:	4b09      	ldr	r3, [pc, #36]	; (25a04 <appDiscRestartDiscovery+0xa8>)
   259de:	681b      	ldr	r3, [r3, #0]
   259e0:	781b      	ldrb	r3, [r3, #0]
   259e2:	2b00      	cmp	r3, #0
   259e4:	d003      	beq.n	259ee <appDiscRestartDiscovery+0x92>
   259e6:	9b03      	ldr	r3, [sp, #12]
   259e8:	7b1b      	ldrb	r3, [r3, #12]
   259ea:	2b00      	cmp	r3, #0
   259ec:	d004      	beq.n	259f8 <appDiscRestartDiscovery+0x9c>
      appDiscStart(connId);
   259ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   259f2:	4618      	mov	r0, r3
   259f4:	f7ff ff2c 	bl	25850 <appDiscStart>
}
   259f8:	bf00      	nop
   259fa:	b005      	add	sp, #20
   259fc:	f85d fb04 	ldr.w	pc, [sp], #4
   25a00:	1000881c 	.word	0x1000881c
   25a04:	10009820 	.word	0x10009820

00025a08 <appDiscConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnOpen(dmEvt_t *pMsg)
{
   25a08:	b500      	push	{lr}
   25a0a:	b085      	sub	sp, #20
   25a0c:	9001      	str	r0, [sp, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   25a0e:	9b01      	ldr	r3, [sp, #4]
   25a10:	881b      	ldrh	r3, [r3, #0]
   25a12:	b2db      	uxtb	r3, r3
   25a14:	3b01      	subs	r3, #1
   25a16:	011b      	lsls	r3, r3, #4
   25a18:	4a1a      	ldr	r2, [pc, #104]	; (25a84 <appDiscConnOpen+0x7c>)
   25a1a:	4413      	add	r3, r2
   25a1c:	9303      	str	r3, [sp, #12]

  pAppDiscCb->alreadySecure = FALSE;
   25a1e:	9b03      	ldr	r3, [sp, #12]
   25a20:	2200      	movs	r2, #0
   25a22:	731a      	strb	r2, [r3, #12]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   25a24:	9b03      	ldr	r3, [sp, #12]
   25a26:	2200      	movs	r2, #0
   25a28:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   25a2a:	9b03      	ldr	r3, [sp, #12]
   25a2c:	2200      	movs	r2, #0
   25a2e:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   25a30:	9b03      	ldr	r3, [sp, #12]
   25a32:	2200      	movs	r2, #0
   25a34:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   25a36:	9b03      	ldr	r3, [sp, #12]
   25a38:	2200      	movs	r2, #0
   25a3a:	739a      	strb	r2, [r3, #14]

  /* tell app to set up handle list */
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   25a3c:	4b12      	ldr	r3, [pc, #72]	; (25a88 <appDiscConnOpen+0x80>)
   25a3e:	681b      	ldr	r3, [r3, #0]
   25a40:	9a01      	ldr	r2, [sp, #4]
   25a42:	8812      	ldrh	r2, [r2, #0]
   25a44:	b2d2      	uxtb	r2, r2
   25a46:	2100      	movs	r1, #0
   25a48:	4610      	mov	r0, r2
   25a4a:	4798      	blx	r3

  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   25a4c:	9b03      	ldr	r3, [sp, #12]
   25a4e:	685b      	ldr	r3, [r3, #4]
   25a50:	2b00      	cmp	r3, #0
   25a52:	d008      	beq.n	25a66 <appDiscConnOpen+0x5e>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   25a54:	9b03      	ldr	r3, [sp, #12]
   25a56:	6858      	ldr	r0, [r3, #4]
   25a58:	9b03      	ldr	r3, [sp, #12]
   25a5a:	7a9b      	ldrb	r3, [r3, #10]
   25a5c:	005b      	lsls	r3, r3, #1
   25a5e:	461a      	mov	r2, r3
   25a60:	2100      	movs	r1, #0
   25a62:	f002 fceb 	bl	2843c <memset>
  }

  /* if not waiting for security start discovery/configuration */
  if (!pAppDiscCfg->waitForSec)
   25a66:	4b09      	ldr	r3, [pc, #36]	; (25a8c <appDiscConnOpen+0x84>)
   25a68:	681b      	ldr	r3, [r3, #0]
   25a6a:	781b      	ldrb	r3, [r3, #0]
   25a6c:	2b00      	cmp	r3, #0
   25a6e:	d105      	bne.n	25a7c <appDiscConnOpen+0x74>
  {
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   25a70:	9b01      	ldr	r3, [sp, #4]
   25a72:	881b      	ldrh	r3, [r3, #0]
   25a74:	b2db      	uxtb	r3, r3
   25a76:	4618      	mov	r0, r3
   25a78:	f7ff feea 	bl	25850 <appDiscStart>
  }
}
   25a7c:	bf00      	nop
   25a7e:	b005      	add	sp, #20
   25a80:	f85d fb04 	ldr.w	pc, [sp], #4
   25a84:	1000881c 	.word	0x1000881c
   25a88:	1000884c 	.word	0x1000884c
   25a8c:	10009820 	.word	0x10009820

00025a90 <appDiscConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnClose(dmEvt_t *pMsg)
{
   25a90:	b500      	push	{lr}
   25a92:	b085      	sub	sp, #20
   25a94:	9001      	str	r0, [sp, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   25a96:	9b01      	ldr	r3, [sp, #4]
   25a98:	881b      	ldrh	r3, [r3, #0]
   25a9a:	b2db      	uxtb	r3, r3
   25a9c:	3b01      	subs	r3, #1
   25a9e:	011b      	lsls	r3, r3, #4
   25aa0:	4a11      	ldr	r2, [pc, #68]	; (25ae8 <appDiscConnClose+0x58>)
   25aa2:	4413      	add	r3, r2
   25aa4:	9303      	str	r3, [sp, #12]

  pAppDiscCb->inProgress = APP_DISC_IDLE;
   25aa6:	9b03      	ldr	r3, [sp, #12]
   25aa8:	2200      	movs	r2, #0
   25aaa:	72da      	strb	r2, [r3, #11]

  appDbHdl_t  hdl;
  
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   25aac:	9b01      	ldr	r3, [sp, #4]
   25aae:	881b      	ldrh	r3, [r3, #0]
   25ab0:	b2db      	uxtb	r3, r3
   25ab2:	4618      	mov	r0, r3
   25ab4:	f000 fdfa 	bl	266ac <AppDbGetHdl>
   25ab8:	9002      	str	r0, [sp, #8]
   25aba:	9b02      	ldr	r3, [sp, #8]
   25abc:	2b00      	cmp	r3, #0
   25abe:	d003      	beq.n	25ac8 <appDiscConnClose+0x38>
  {
    // reset discovery status
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   25ac0:	2100      	movs	r1, #0
   25ac2:	9802      	ldr	r0, [sp, #8]
   25ac4:	f7ed ff72 	bl	139ac <AppDbSetDiscStatus>
  }


  if (pAppDiscCb->pDiscCb != NULL)
   25ac8:	9b03      	ldr	r3, [sp, #12]
   25aca:	681b      	ldr	r3, [r3, #0]
   25acc:	2b00      	cmp	r3, #0
   25ace:	d007      	beq.n	25ae0 <appDiscConnClose+0x50>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   25ad0:	9b03      	ldr	r3, [sp, #12]
   25ad2:	681b      	ldr	r3, [r3, #0]
   25ad4:	4618      	mov	r0, r3
   25ad6:	f7e7 fafd 	bl	d0d4 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   25ada:	9b03      	ldr	r3, [sp, #12]
   25adc:	2200      	movs	r2, #0
   25ade:	601a      	str	r2, [r3, #0]
  }
}
   25ae0:	bf00      	nop
   25ae2:	b005      	add	sp, #20
   25ae4:	f85d fb04 	ldr.w	pc, [sp], #4
   25ae8:	1000881c 	.word	0x1000881c

00025aec <appDiscPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscPairCmpl(dmEvt_t *pMsg)
{
   25aec:	b500      	push	{lr}
   25aee:	b085      	sub	sp, #20
   25af0:	9001      	str	r0, [sp, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   25af2:	9b01      	ldr	r3, [sp, #4]
   25af4:	881b      	ldrh	r3, [r3, #0]
   25af6:	b2db      	uxtb	r3, r3
   25af8:	3b01      	subs	r3, #1
   25afa:	011b      	lsls	r3, r3, #4
   25afc:	4a3e      	ldr	r2, [pc, #248]	; (25bf8 <appDiscPairCmpl+0x10c>)
   25afe:	4413      	add	r3, r2
   25b00:	9303      	str	r3, [sp, #12]
  appDbHdl_t hdl;

  /* procedures triggered by security are only executed once */
  if (pAppDiscCb->alreadySecure)
   25b02:	9b03      	ldr	r3, [sp, #12]
   25b04:	7b1b      	ldrb	r3, [r3, #12]
   25b06:	2b00      	cmp	r3, #0
   25b08:	d171      	bne.n	25bee <appDiscPairCmpl+0x102>
  {
    return;
  }

  /* if bonded, disable hash check on cache if not already disabled */
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   25b0a:	9b01      	ldr	r3, [sp, #4]
   25b0c:	881b      	ldrh	r3, [r3, #0]
   25b0e:	b2db      	uxtb	r3, r3
   25b10:	4618      	mov	r0, r3
   25b12:	f000 fdcb 	bl	266ac <AppDbGetHdl>
   25b16:	9002      	str	r0, [sp, #8]
   25b18:	9b02      	ldr	r3, [sp, #8]
   25b1a:	2b00      	cmp	r3, #0
   25b1c:	d019      	beq.n	25b52 <appDiscPairCmpl+0x66>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   25b1e:	9b01      	ldr	r3, [sp, #4]
   25b20:	881b      	ldrh	r3, [r3, #0]
   25b22:	b2db      	uxtb	r3, r3
   25b24:	4618      	mov	r0, r3
   25b26:	f000 fce3 	bl	264f0 <AppCheckBonded>
   25b2a:	4603      	mov	r3, r0
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   25b2c:	2b00      	cmp	r3, #0
   25b2e:	d010      	beq.n	25b52 <appDiscPairCmpl+0x66>
      AppDbIsCacheCheckedByHash(hdl))
   25b30:	9802      	ldr	r0, [sp, #8]
   25b32:	f7ed fe8f 	bl	13854 <AppDbIsCacheCheckedByHash>
   25b36:	4603      	mov	r3, r0
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   25b38:	2b00      	cmp	r3, #0
   25b3a:	d00a      	beq.n	25b52 <appDiscPairCmpl+0x66>
  {
    AppDbSetCacheByHash(appConnCb[pMsg->hdr.param - 1].dbHdl, FALSE);
   25b3c:	9b01      	ldr	r3, [sp, #4]
   25b3e:	881b      	ldrh	r3, [r3, #0]
   25b40:	3b01      	subs	r3, #1
   25b42:	4a2e      	ldr	r2, [pc, #184]	; (25bfc <appDiscPairCmpl+0x110>)
   25b44:	015b      	lsls	r3, r3, #5
   25b46:	4413      	add	r3, r2
   25b48:	681b      	ldr	r3, [r3, #0]
   25b4a:	2100      	movs	r1, #0
   25b4c:	4618      	mov	r0, r3
   25b4e:	f7ed fe89 	bl	13864 <AppDbSetCacheByHash>
  }


  /* if we are now bonded and discovery/configuration was performed before bonding */
  if (AppCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   25b52:	9b01      	ldr	r3, [sp, #4]
   25b54:	881b      	ldrh	r3, [r3, #0]
   25b56:	b2db      	uxtb	r3, r3
   25b58:	4618      	mov	r0, r3
   25b5a:	f000 fcc9 	bl	264f0 <AppCheckBonded>
   25b5e:	4603      	mov	r3, r0
   25b60:	2b00      	cmp	r3, #0
   25b62:	d033      	beq.n	25bcc <appDiscPairCmpl+0xe0>
   25b64:	9b03      	ldr	r3, [sp, #12]
   25b66:	7a5b      	ldrb	r3, [r3, #9]
   25b68:	2b00      	cmp	r3, #0
   25b6a:	d02f      	beq.n	25bcc <appDiscPairCmpl+0xe0>
  {
    if (hdl != APP_DB_HDL_NONE)
   25b6c:	9b02      	ldr	r3, [sp, #8]
   25b6e:	2b00      	cmp	r3, #0
   25b70:	d017      	beq.n	25ba2 <appDiscPairCmpl+0xb6>
    {
      /* store discovery status */
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   25b72:	9b03      	ldr	r3, [sp, #12]
   25b74:	7a5b      	ldrb	r3, [r3, #9]
   25b76:	4619      	mov	r1, r3
   25b78:	9802      	ldr	r0, [sp, #8]
   25b7a:	f7ed ff17 	bl	139ac <AppDbSetDiscStatus>

      /* store handle list */
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   25b7e:	9b03      	ldr	r3, [sp, #12]
   25b80:	7a5b      	ldrb	r3, [r3, #9]
   25b82:	2b04      	cmp	r3, #4
   25b84:	d003      	beq.n	25b8e <appDiscPairCmpl+0xa2>
   25b86:	9b03      	ldr	r3, [sp, #12]
   25b88:	7a5b      	ldrb	r3, [r3, #9]
   25b8a:	2b08      	cmp	r3, #8
   25b8c:	d109      	bne.n	25ba2 <appDiscPairCmpl+0xb6>
      {
        if (pAppDiscCb->pHdlList != NULL)
   25b8e:	9b03      	ldr	r3, [sp, #12]
   25b90:	685b      	ldr	r3, [r3, #4]
   25b92:	2b00      	cmp	r3, #0
   25b94:	d005      	beq.n	25ba2 <appDiscPairCmpl+0xb6>
        {
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   25b96:	9b03      	ldr	r3, [sp, #12]
   25b98:	685b      	ldr	r3, [r3, #4]
   25b9a:	4619      	mov	r1, r3
   25b9c:	9802      	ldr	r0, [sp, #8]
   25b9e:	f7ed ff19 	bl	139d4 <AppDbSetHdlList>
        }
      }
    }

    /* if configuration was waiting for security */
    if (pAppDiscCb->secRequired)
   25ba2:	9b03      	ldr	r3, [sp, #12]
   25ba4:	7b5b      	ldrb	r3, [r3, #13]
   25ba6:	2b00      	cmp	r3, #0
   25ba8:	d01c      	beq.n	25be4 <appDiscPairCmpl+0xf8>
    {
      pAppDiscCb->secRequired = FALSE;
   25baa:	9b03      	ldr	r3, [sp, #12]
   25bac:	2200      	movs	r2, #0
   25bae:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   25bb0:	9b03      	ldr	r3, [sp, #12]
   25bb2:	681b      	ldr	r3, [r3, #0]
   25bb4:	2b00      	cmp	r3, #0
   25bb6:	d015      	beq.n	25be4 <appDiscPairCmpl+0xf8>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   25bb8:	9b01      	ldr	r3, [sp, #4]
   25bba:	881b      	ldrh	r3, [r3, #0]
   25bbc:	b2da      	uxtb	r2, r3
   25bbe:	9b03      	ldr	r3, [sp, #12]
   25bc0:	681b      	ldr	r3, [r3, #0]
   25bc2:	4619      	mov	r1, r3
   25bc4:	4610      	mov	r0, r2
   25bc6:	f7e8 fbac 	bl	e322 <AttcDiscConfigResume>
    if (pAppDiscCb->secRequired)
   25bca:	e00b      	b.n	25be4 <appDiscPairCmpl+0xf8>
    }
  }
  else {

  /* if waiting for security start discovery now that connection is secure */
  if (pAppDiscCfg->waitForSec)
   25bcc:	4b0c      	ldr	r3, [pc, #48]	; (25c00 <appDiscPairCmpl+0x114>)
   25bce:	681b      	ldr	r3, [r3, #0]
   25bd0:	781b      	ldrb	r3, [r3, #0]
   25bd2:	2b00      	cmp	r3, #0
   25bd4:	d007      	beq.n	25be6 <appDiscPairCmpl+0xfa>
  {
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   25bd6:	9b01      	ldr	r3, [sp, #4]
   25bd8:	881b      	ldrh	r3, [r3, #0]
   25bda:	b2db      	uxtb	r3, r3
   25bdc:	4618      	mov	r0, r3
   25bde:	f7ff fe37 	bl	25850 <appDiscStart>
   25be2:	e000      	b.n	25be6 <appDiscPairCmpl+0xfa>
    if (pAppDiscCb->secRequired)
   25be4:	bf00      	nop
  }
  }  


  pAppDiscCb->alreadySecure = TRUE;
   25be6:	9b03      	ldr	r3, [sp, #12]
   25be8:	2201      	movs	r2, #1
   25bea:	731a      	strb	r2, [r3, #12]
   25bec:	e000      	b.n	25bf0 <appDiscPairCmpl+0x104>
    return;
   25bee:	bf00      	nop
}
   25bf0:	b005      	add	sp, #20
   25bf2:	f85d fb04 	ldr.w	pc, [sp], #4
   25bf6:	bf00      	nop
   25bf8:	1000881c 	.word	0x1000881c
   25bfc:	1000983c 	.word	0x1000983c
   25c00:	10009820 	.word	0x10009820

00025c04 <appDiscEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscEncryptInd(dmEvt_t *pMsg)
{
   25c04:	b500      	push	{lr}
   25c06:	b085      	sub	sp, #20
   25c08:	9001      	str	r0, [sp, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   25c0a:	9b01      	ldr	r3, [sp, #4]
   25c0c:	881b      	ldrh	r3, [r3, #0]
   25c0e:	b2db      	uxtb	r3, r3
   25c10:	3b01      	subs	r3, #1
   25c12:	011b      	lsls	r3, r3, #4
   25c14:	4a19      	ldr	r2, [pc, #100]	; (25c7c <appDiscEncryptInd+0x78>)
   25c16:	4413      	add	r3, r2
   25c18:	9303      	str	r3, [sp, #12]

  /* if encrypted with ltk */
  if (pMsg->encryptInd.usingLtk)
   25c1a:	9b01      	ldr	r3, [sp, #4]
   25c1c:	791b      	ldrb	r3, [r3, #4]
   25c1e:	2b00      	cmp	r3, #0
   25c20:	d028      	beq.n	25c74 <appDiscEncryptInd+0x70>
  {
    /* procedures triggered by security are only executed once */
    if (pAppDiscCb->alreadySecure)
   25c22:	9b03      	ldr	r3, [sp, #12]
   25c24:	7b1b      	ldrb	r3, [r3, #12]
   25c26:	2b00      	cmp	r3, #0
   25c28:	d123      	bne.n	25c72 <appDiscEncryptInd+0x6e>
    {
      return;
    }

    /* if we waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   25c2a:	4b15      	ldr	r3, [pc, #84]	; (25c80 <appDiscEncryptInd+0x7c>)
   25c2c:	681b      	ldr	r3, [r3, #0]
   25c2e:	781b      	ldrb	r3, [r3, #0]
   25c30:	2b00      	cmp	r3, #0
   25c32:	d006      	beq.n	25c42 <appDiscEncryptInd+0x3e>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   25c34:	9b01      	ldr	r3, [sp, #4]
   25c36:	881b      	ldrh	r3, [r3, #0]
   25c38:	b2db      	uxtb	r3, r3
   25c3a:	4618      	mov	r0, r3
   25c3c:	f7ff fe08 	bl	25850 <appDiscStart>
   25c40:	e013      	b.n	25c6a <appDiscEncryptInd+0x66>
    }
    /* else if configuration was waiting for security */
    else if (pAppDiscCb->secRequired)
   25c42:	9b03      	ldr	r3, [sp, #12]
   25c44:	7b5b      	ldrb	r3, [r3, #13]
   25c46:	2b00      	cmp	r3, #0
   25c48:	d00f      	beq.n	25c6a <appDiscEncryptInd+0x66>
    {
      pAppDiscCb->secRequired = FALSE;
   25c4a:	9b03      	ldr	r3, [sp, #12]
   25c4c:	2200      	movs	r2, #0
   25c4e:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   25c50:	9b03      	ldr	r3, [sp, #12]
   25c52:	681b      	ldr	r3, [r3, #0]
   25c54:	2b00      	cmp	r3, #0
   25c56:	d008      	beq.n	25c6a <appDiscEncryptInd+0x66>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   25c58:	9b01      	ldr	r3, [sp, #4]
   25c5a:	881b      	ldrh	r3, [r3, #0]
   25c5c:	b2da      	uxtb	r2, r3
   25c5e:	9b03      	ldr	r3, [sp, #12]
   25c60:	681b      	ldr	r3, [r3, #0]
   25c62:	4619      	mov	r1, r3
   25c64:	4610      	mov	r0, r2
   25c66:	f7e8 fb5c 	bl	e322 <AttcDiscConfigResume>
      }
    }

    pAppDiscCb->alreadySecure = TRUE;
   25c6a:	9b03      	ldr	r3, [sp, #12]
   25c6c:	2201      	movs	r2, #1
   25c6e:	731a      	strb	r2, [r3, #12]
   25c70:	e000      	b.n	25c74 <appDiscEncryptInd+0x70>
      return;
   25c72:	bf00      	nop
  }
}
   25c74:	b005      	add	sp, #20
   25c76:	f85d fb04 	ldr.w	pc, [sp], #4
   25c7a:	bf00      	nop
   25c7c:	1000881c 	.word	0x1000881c
   25c80:	10009820 	.word	0x10009820

00025c84 <appDiscPairFail>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appDiscPairFail(dmEvt_t *pMsg)
{
   25c84:	b500      	push	{lr}
   25c86:	b087      	sub	sp, #28
   25c88:	9003      	str	r0, [sp, #12]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   25c8a:	9b03      	ldr	r3, [sp, #12]
   25c8c:	881b      	ldrh	r3, [r3, #0]
   25c8e:	b2db      	uxtb	r3, r3
   25c90:	3b01      	subs	r3, #1
   25c92:	011b      	lsls	r3, r3, #4
   25c94:	4a10      	ldr	r2, [pc, #64]	; (25cd8 <appDiscPairFail+0x54>)
   25c96:	4413      	add	r3, r2
   25c98:	9305      	str	r3, [sp, #20]

  /* Procedures triggered by security are only executed once. */
  if (pAppDiscCb->alreadySecure)
   25c9a:	9b05      	ldr	r3, [sp, #20]
   25c9c:	7b1b      	ldrb	r3, [r3, #12]
   25c9e:	2b00      	cmp	r3, #0
   25ca0:	d115      	bne.n	25cce <appDiscPairFail+0x4a>
  {
    return;
  }

  /* Fall back to relying on database hash to verify handles if configured to do so. */
  if (pAppDiscCfg->readDbHash)
   25ca2:	4b0e      	ldr	r3, [pc, #56]	; (25cdc <appDiscPairFail+0x58>)
   25ca4:	681b      	ldr	r3, [r3, #0]
   25ca6:	785b      	ldrb	r3, [r3, #1]
   25ca8:	2b00      	cmp	r3, #0
   25caa:	d011      	beq.n	25cd0 <appDiscPairFail+0x4c>
  {
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   25cac:	9b05      	ldr	r3, [sp, #20]
   25cae:	2203      	movs	r2, #3
   25cb0:	72da      	strb	r2, [r3, #11]

    /* Read the database hash instead of re-performing service discovery. */
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   25cb2:	9b03      	ldr	r3, [sp, #12]
   25cb4:	881b      	ldrh	r3, [r3, #0]
   25cb6:	b2d8      	uxtb	r0, r3
   25cb8:	2300      	movs	r3, #0
   25cba:	9301      	str	r3, [sp, #4]
   25cbc:	4b08      	ldr	r3, [pc, #32]	; (25ce0 <appDiscPairFail+0x5c>)
   25cbe:	9300      	str	r3, [sp, #0]
   25cc0:	2302      	movs	r3, #2
   25cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25cc6:	2101      	movs	r1, #1
   25cc8:	f7e9 fd2e 	bl	f728 <AttcReadByTypeReq>
   25ccc:	e000      	b.n	25cd0 <appDiscPairFail+0x4c>
    return;
   25cce:	bf00      	nop
                      (uint8_t *) attGattDbhChUuid, FALSE);
  }
}
   25cd0:	b007      	add	sp, #28
   25cd2:	f85d fb04 	ldr.w	pc, [sp], #4
   25cd6:	bf00      	nop
   25cd8:	1000881c 	.word	0x1000881c
   25cdc:	10009820 	.word	0x10009820
   25ce0:	0002c23c 	.word	0x0002c23c

00025ce4 <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   25ce4:	b500      	push	{lr}
   25ce6:	b083      	sub	sp, #12
   25ce8:	9001      	str	r0, [sp, #4]
  switch(pMsg->hdr.event)
   25cea:	9b01      	ldr	r3, [sp, #4]
   25cec:	789b      	ldrb	r3, [r3, #2]
   25cee:	3b27      	subs	r3, #39	; 0x27
   25cf0:	2b05      	cmp	r3, #5
   25cf2:	d823      	bhi.n	25d3c <AppDiscProcDmMsg+0x58>
   25cf4:	a201      	add	r2, pc, #4	; (adr r2, 25cfc <AppDiscProcDmMsg+0x18>)
   25cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25cfa:	bf00      	nop
   25cfc:	00025d15 	.word	0x00025d15
   25d00:	00025d1d 	.word	0x00025d1d
   25d04:	00025d3d 	.word	0x00025d3d
   25d08:	00025d25 	.word	0x00025d25
   25d0c:	00025d2d 	.word	0x00025d2d
   25d10:	00025d35 	.word	0x00025d35
  {
    case DM_CONN_OPEN_IND:
      appDiscConnOpen(pMsg);
   25d14:	9801      	ldr	r0, [sp, #4]
   25d16:	f7ff fe77 	bl	25a08 <appDiscConnOpen>
      break;
   25d1a:	e010      	b.n	25d3e <AppDiscProcDmMsg+0x5a>

    case DM_CONN_CLOSE_IND:
      appDiscConnClose(pMsg);
   25d1c:	9801      	ldr	r0, [sp, #4]
   25d1e:	f7ff feb7 	bl	25a90 <appDiscConnClose>
      break;
   25d22:	e00c      	b.n	25d3e <AppDiscProcDmMsg+0x5a>

    case DM_SEC_PAIR_CMPL_IND:
      appDiscPairCmpl(pMsg);
   25d24:	9801      	ldr	r0, [sp, #4]
   25d26:	f7ff fee1 	bl	25aec <appDiscPairCmpl>
      break;
   25d2a:	e008      	b.n	25d3e <AppDiscProcDmMsg+0x5a>

    case DM_SEC_PAIR_FAIL_IND:
      appDiscPairFail(pMsg);
   25d2c:	9801      	ldr	r0, [sp, #4]
   25d2e:	f7ff ffa9 	bl	25c84 <appDiscPairFail>
      break;
   25d32:	e004      	b.n	25d3e <AppDiscProcDmMsg+0x5a>

    case DM_SEC_ENCRYPT_IND:
      appDiscEncryptInd(pMsg);
   25d34:	9801      	ldr	r0, [sp, #4]
   25d36:	f7ff ff65 	bl	25c04 <appDiscEncryptInd>
      break;
   25d3a:	e000      	b.n	25d3e <AppDiscProcDmMsg+0x5a>

    default:
      break;
   25d3c:	bf00      	nop
  }
}
   25d3e:	bf00      	nop
   25d40:	b003      	add	sp, #12
   25d42:	f85d fb04 	ldr.w	pc, [sp], #4
   25d46:	bf00      	nop

00025d48 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   25d48:	b570      	push	{r4, r5, r6, lr}
   25d4a:	b086      	sub	sp, #24
   25d4c:	9001      	str	r0, [sp, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   25d4e:	9b01      	ldr	r3, [sp, #4]
   25d50:	881b      	ldrh	r3, [r3, #0]
   25d52:	b2db      	uxtb	r3, r3
   25d54:	3b01      	subs	r3, #1
   25d56:	011b      	lsls	r3, r3, #4
   25d58:	4aac      	ldr	r2, [pc, #688]	; (2600c <AppDiscProcAttMsg+0x2c4>)
   25d5a:	4413      	add	r3, r2
   25d5c:	9304      	str	r3, [sp, #16]
  uint8_t status;

  /* Check status */
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   25d5e:	9b01      	ldr	r3, [sp, #4]
   25d60:	78db      	ldrb	r3, [r3, #3]
   25d62:	2b12      	cmp	r3, #18
   25d64:	d105      	bne.n	25d72 <AppDiscProcAttMsg+0x2a>
  {
    /* Restart discovery as cached handle list is out of sync with server's database. */
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
   25d66:	9b01      	ldr	r3, [sp, #4]
   25d68:	881b      	ldrh	r3, [r3, #0]
   25d6a:	b2db      	uxtb	r3, r3
   25d6c:	4618      	mov	r0, r3
   25d6e:	f7ff fdf5 	bl	2595c <appDiscRestartDiscovery>
  }

  if (pAppDiscCb->inProgress == APP_DISC_READ_DBH_IN_PROGRESS)
   25d72:	9b04      	ldr	r3, [sp, #16]
   25d74:	7adb      	ldrb	r3, [r3, #11]
   25d76:	2b03      	cmp	r3, #3
   25d78:	f040 8087 	bne.w	25e8a <AppDiscProcAttMsg+0x142>
  {
    if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP)
   25d7c:	9b01      	ldr	r3, [sp, #4]
   25d7e:	789b      	ldrb	r3, [r3, #2]
   25d80:	2b04      	cmp	r3, #4
   25d82:	f040 813f 	bne.w	26004 <AppDiscProcAttMsg+0x2bc>
    {
      dmConnId_t connId = (dmConnId_t)pMsg->hdr.param;
   25d86:	9b01      	ldr	r3, [sp, #4]
   25d88:	881b      	ldrh	r3, [r3, #0]
   25d8a:	f88d 300e 	strb.w	r3, [sp, #14]

      if (pMsg->hdr.status != ATT_SUCCESS)
   25d8e:	9b01      	ldr	r3, [sp, #4]
   25d90:	78db      	ldrb	r3, [r3, #3]
   25d92:	2b00      	cmp	r3, #0
   25d94:	d007      	beq.n	25da6 <AppDiscProcAttMsg+0x5e>
      {
        /* No Database hash found on peer, notify application to start discovery */
        (*appDiscCback)(connId, APP_DISC_START);
   25d96:	4b9e      	ldr	r3, [pc, #632]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25d98:	681b      	ldr	r3, [r3, #0]
   25d9a:	f89d 200e 	ldrb.w	r2, [sp, #14]
   25d9e:	2103      	movs	r1, #3
   25da0:	4610      	mov	r0, r2
   25da2:	4798      	blx	r3
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   25da4:	e12e      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
        pAppDiscCb->inProgress = APP_DISC_IDLE;
   25da6:	9b04      	ldr	r3, [sp, #16]
   25da8:	2200      	movs	r2, #0
   25daa:	72da      	strb	r2, [r3, #11]
        if ((hdl = AppDbGetHdl(connId)) == APP_DB_HDL_NONE)
   25dac:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25db0:	4618      	mov	r0, r3
   25db2:	f000 fc7b 	bl	266ac <AppDbGetHdl>
   25db6:	9005      	str	r0, [sp, #20]
   25db8:	9b05      	ldr	r3, [sp, #20]
   25dba:	2b00      	cmp	r3, #0
   25dbc:	d129      	bne.n	25e12 <AppDiscProcAttMsg+0xca>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   25dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25dc2:	4618      	mov	r0, r3
   25dc4:	f7f0 f810 	bl	15de8 <DmConnPeerAddrType>
   25dc8:	4603      	mov	r3, r0
   25dca:	461e      	mov	r6, r3
   25dcc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25dd0:	4618      	mov	r0, r3
   25dd2:	f7f0 f81d 	bl	15e10 <DmConnPeerAddr>
   25dd6:	4605      	mov	r5, r0
                                                             (DmConnRole(connId)==DM_ROLE_MASTER)?TRUE:FALSE);
   25dd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25ddc:	4618      	mov	r0, r3
   25dde:	f7f0 f91b 	bl	16018 <DmConnRole>
   25de2:	4603      	mov	r3, r0
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   25de4:	2b00      	cmp	r3, #0
   25de6:	bf0c      	ite	eq
   25de8:	2301      	moveq	r3, #1
   25dea:	2300      	movne	r3, #0
   25dec:	b2db      	uxtb	r3, r3
   25dee:	461a      	mov	r2, r3
   25df0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25df4:	1e5c      	subs	r4, r3, #1
   25df6:	4629      	mov	r1, r5
   25df8:	4630      	mov	r0, r6
   25dfa:	f7ed faaf 	bl	1335c <AppDbNewRecord>
   25dfe:	4602      	mov	r2, r0
   25e00:	4984      	ldr	r1, [pc, #528]	; (26014 <AppDiscProcAttMsg+0x2cc>)
   25e02:	0163      	lsls	r3, r4, #5
   25e04:	440b      	add	r3, r1
   25e06:	601a      	str	r2, [r3, #0]
   25e08:	4a82      	ldr	r2, [pc, #520]	; (26014 <AppDiscProcAttMsg+0x2cc>)
   25e0a:	0163      	lsls	r3, r4, #5
   25e0c:	4413      	add	r3, r2
   25e0e:	681b      	ldr	r3, [r3, #0]
   25e10:	9305      	str	r3, [sp, #20]
        if (memcmp(AppDbGetPeerDbHash(hdl), pMsg->pValue + 3, ATT_DATABASE_HASH_LEN))
   25e12:	9805      	ldr	r0, [sp, #20]
   25e14:	f7ed fd08 	bl	13828 <AppDbGetPeerDbHash>
   25e18:	9b01      	ldr	r3, [sp, #4]
   25e1a:	685b      	ldr	r3, [r3, #4]
   25e1c:	3303      	adds	r3, #3
   25e1e:	2210      	movs	r2, #16
   25e20:	4619      	mov	r1, r3
   25e22:	f002 fadb 	bl	283dc <memcmp>
   25e26:	4603      	mov	r3, r0
   25e28:	2b00      	cmp	r3, #0
   25e2a:	d012      	beq.n	25e52 <AppDiscProcAttMsg+0x10a>
          AppDbSetPeerDbHash(hdl, pMsg->pValue + 3);
   25e2c:	9b01      	ldr	r3, [sp, #4]
   25e2e:	685b      	ldr	r3, [r3, #4]
   25e30:	3303      	adds	r3, #3
   25e32:	4619      	mov	r1, r3
   25e34:	9805      	ldr	r0, [sp, #20]
   25e36:	f7ed fcfe 	bl	13836 <AppDbSetPeerDbHash>
          AppDbSetCacheByHash(hdl, TRUE);
   25e3a:	2101      	movs	r1, #1
   25e3c:	9805      	ldr	r0, [sp, #20]
   25e3e:	f7ed fd11 	bl	13864 <AppDbSetCacheByHash>
          (*appDiscCback)(connId, APP_DISC_START);
   25e42:	4b73      	ldr	r3, [pc, #460]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25e44:	681b      	ldr	r3, [r3, #0]
   25e46:	f89d 200e 	ldrb.w	r2, [sp, #14]
   25e4a:	2103      	movs	r1, #3
   25e4c:	4610      	mov	r0, r2
   25e4e:	4798      	blx	r3
}
   25e50:	e0d8      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl),
   25e52:	9b04      	ldr	r3, [sp, #16]
   25e54:	685c      	ldr	r4, [r3, #4]
   25e56:	9805      	ldr	r0, [sp, #20]
   25e58:	f7ed fdb5 	bl	139c6 <AppDbGetHdlList>
   25e5c:	4601      	mov	r1, r0
                 (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   25e5e:	9b04      	ldr	r3, [sp, #16]
   25e60:	7a9b      	ldrb	r3, [r3, #10]
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl),
   25e62:	005b      	lsls	r3, r3, #1
   25e64:	461a      	mov	r2, r3
   25e66:	4620      	mov	r0, r4
   25e68:	f7e6 f94a 	bl	c100 <memcpy>
          status = AppDbGetDiscStatus(hdl);
   25e6c:	9805      	ldr	r0, [sp, #20]
   25e6e:	f7ed fd95 	bl	1399c <AppDbGetDiscStatus>
   25e72:	4603      	mov	r3, r0
   25e74:	f88d 300f 	strb.w	r3, [sp, #15]
          appDiscCfgStart(connId, status);
   25e78:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25e7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25e80:	4611      	mov	r1, r2
   25e82:	4618      	mov	r0, r3
   25e84:	f7ff fcb0 	bl	257e8 <appDiscCfgStart>
}
   25e88:	e0bc      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
  else if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   25e8a:	9b04      	ldr	r3, [sp, #16]
   25e8c:	7adb      	ldrb	r3, [r3, #11]
   25e8e:	2b01      	cmp	r3, #1
   25e90:	d160      	bne.n	25f54 <AppDiscProcAttMsg+0x20c>
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   25e92:	9b01      	ldr	r3, [sp, #4]
   25e94:	789b      	ldrb	r3, [r3, #2]
   25e96:	2b03      	cmp	r3, #3
   25e98:	d12a      	bne.n	25ef0 <AppDiscProcAttMsg+0x1a8>
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   25e9a:	9b04      	ldr	r3, [sp, #16]
   25e9c:	681b      	ldr	r3, [r3, #0]
   25e9e:	9901      	ldr	r1, [sp, #4]
   25ea0:	4618      	mov	r0, r3
   25ea2:	f7e8 f961 	bl	e168 <AttcDiscServiceCmpl>
   25ea6:	4603      	mov	r3, r0
   25ea8:	f88d 300f 	strb.w	r3, [sp, #15]
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   25eac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25eb0:	4619      	mov	r1, r3
   25eb2:	4859      	ldr	r0, [pc, #356]	; (26018 <AppDiscProcAttMsg+0x2d0>)
   25eb4:	f7e7 fdc8 	bl	da48 <WsfTrace>
      if (status == ATT_SUCCESS)
   25eb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25ebc:	2b00      	cmp	r3, #0
   25ebe:	d109      	bne.n	25ed4 <AppDiscProcAttMsg+0x18c>
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   25ec0:	9b01      	ldr	r3, [sp, #4]
   25ec2:	881b      	ldrh	r3, [r3, #0]
   25ec4:	b2da      	uxtb	r2, r3
   25ec6:	9b04      	ldr	r3, [sp, #16]
   25ec8:	681b      	ldr	r3, [r3, #0]
   25eca:	4619      	mov	r1, r3
   25ecc:	4610      	mov	r0, r2
   25ece:	f7e8 f99d 	bl	e20c <AttcDiscCharStart>
}
   25ed2:	e097      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
      else if (status != ATT_CONTINUING)
   25ed4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25ed8:	2b78      	cmp	r3, #120	; 0x78
   25eda:	f000 8093 	beq.w	26004 <AppDiscProcAttMsg+0x2bc>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   25ede:	4b4c      	ldr	r3, [pc, #304]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25ee0:	681b      	ldr	r3, [r3, #0]
   25ee2:	9a01      	ldr	r2, [sp, #4]
   25ee4:	8812      	ldrh	r2, [r2, #0]
   25ee6:	b2d2      	uxtb	r2, r2
   25ee8:	2105      	movs	r1, #5
   25eea:	4610      	mov	r0, r2
   25eec:	4798      	blx	r3
}
   25eee:	e089      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   25ef0:	9b01      	ldr	r3, [sp, #4]
   25ef2:	789b      	ldrb	r3, [r3, #2]
   25ef4:	2b04      	cmp	r3, #4
   25ef6:	d004      	beq.n	25f02 <AppDiscProcAttMsg+0x1ba>
             pMsg->hdr.event == ATTC_FIND_INFO_RSP)
   25ef8:	9b01      	ldr	r3, [sp, #4]
   25efa:	789b      	ldrb	r3, [r3, #2]
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   25efc:	2b02      	cmp	r3, #2
   25efe:	f040 8081 	bne.w	26004 <AppDiscProcAttMsg+0x2bc>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   25f02:	9b04      	ldr	r3, [sp, #16]
   25f04:	681b      	ldr	r3, [r3, #0]
   25f06:	9901      	ldr	r1, [sp, #4]
   25f08:	4618      	mov	r0, r3
   25f0a:	f7e8 f99f 	bl	e24c <AttcDiscCharCmpl>
   25f0e:	4603      	mov	r3, r0
   25f10:	f88d 300f 	strb.w	r3, [sp, #15]
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   25f14:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25f18:	4619      	mov	r1, r3
   25f1a:	4840      	ldr	r0, [pc, #256]	; (2601c <AppDiscProcAttMsg+0x2d4>)
   25f1c:	f7e7 fd94 	bl	da48 <WsfTrace>
      if (status == ATT_SUCCESS)
   25f20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25f24:	2b00      	cmp	r3, #0
   25f26:	d108      	bne.n	25f3a <AppDiscProcAttMsg+0x1f2>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   25f28:	4b39      	ldr	r3, [pc, #228]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25f2a:	681b      	ldr	r3, [r3, #0]
   25f2c:	9a01      	ldr	r2, [sp, #4]
   25f2e:	8812      	ldrh	r2, [r2, #0]
   25f30:	b2d2      	uxtb	r2, r2
   25f32:	2104      	movs	r1, #4
   25f34:	4610      	mov	r0, r2
   25f36:	4798      	blx	r3
}
   25f38:	e064      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
      else if (status != ATT_CONTINUING)
   25f3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25f3e:	2b78      	cmp	r3, #120	; 0x78
   25f40:	d060      	beq.n	26004 <AppDiscProcAttMsg+0x2bc>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   25f42:	4b33      	ldr	r3, [pc, #204]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25f44:	681b      	ldr	r3, [r3, #0]
   25f46:	9a01      	ldr	r2, [sp, #4]
   25f48:	8812      	ldrh	r2, [r2, #0]
   25f4a:	b2d2      	uxtb	r2, r2
   25f4c:	2105      	movs	r1, #5
   25f4e:	4610      	mov	r0, r2
   25f50:	4798      	blx	r3
}
   25f52:	e057      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   25f54:	9b04      	ldr	r3, [sp, #16]
   25f56:	7adb      	ldrb	r3, [r3, #11]
   25f58:	2b02      	cmp	r3, #2
   25f5a:	d153      	bne.n	26004 <AppDiscProcAttMsg+0x2bc>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   25f5c:	9b01      	ldr	r3, [sp, #4]
   25f5e:	789b      	ldrb	r3, [r3, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   25f60:	2b05      	cmp	r3, #5
   25f62:	d003      	beq.n	25f6c <AppDiscProcAttMsg+0x224>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   25f64:	9b01      	ldr	r3, [sp, #4]
   25f66:	789b      	ldrb	r3, [r3, #2]
   25f68:	2b09      	cmp	r3, #9
   25f6a:	d14b      	bne.n	26004 <AppDiscProcAttMsg+0x2bc>
    if (pAppDiscCb->scPending)
   25f6c:	9b04      	ldr	r3, [sp, #16]
   25f6e:	7b9b      	ldrb	r3, [r3, #14]
   25f70:	2b00      	cmp	r3, #0
   25f72:	d00c      	beq.n	25f8e <AppDiscProcAttMsg+0x246>
      pAppDiscCb->scPending = FALSE;
   25f74:	9b04      	ldr	r3, [sp, #16]
   25f76:	2200      	movs	r2, #0
   25f78:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   25f7a:	9b04      	ldr	r3, [sp, #16]
   25f7c:	2200      	movs	r2, #0
   25f7e:	72da      	strb	r2, [r3, #11]
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   25f80:	9b01      	ldr	r3, [sp, #4]
   25f82:	881b      	ldrh	r3, [r3, #0]
   25f84:	b2db      	uxtb	r3, r3
   25f86:	4618      	mov	r0, r3
   25f88:	f7ff fc62 	bl	25850 <appDiscStart>
}
   25f8c:	e03a      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   25f8e:	9b01      	ldr	r3, [sp, #4]
   25f90:	78db      	ldrb	r3, [r3, #3]
   25f92:	2b05      	cmp	r3, #5
   25f94:	d003      	beq.n	25f9e <AppDiscProcAttMsg+0x256>
   25f96:	9b01      	ldr	r3, [sp, #4]
   25f98:	78db      	ldrb	r3, [r3, #3]
   25f9a:	2b0f      	cmp	r3, #15
   25f9c:	d114      	bne.n	25fc8 <AppDiscProcAttMsg+0x280>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   25f9e:	9b01      	ldr	r3, [sp, #4]
   25fa0:	881b      	ldrh	r3, [r3, #0]
   25fa2:	b2db      	uxtb	r3, r3
   25fa4:	4618      	mov	r0, r3
   25fa6:	f7ef ff95 	bl	15ed4 <DmConnSecLevel>
   25faa:	4603      	mov	r3, r0
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   25fac:	2b00      	cmp	r3, #0
   25fae:	d10b      	bne.n	25fc8 <AppDiscProcAttMsg+0x280>
      pAppDiscCb->secRequired = TRUE;
   25fb0:	9b04      	ldr	r3, [sp, #16]
   25fb2:	2201      	movs	r2, #1
   25fb4:	735a      	strb	r2, [r3, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   25fb6:	4b16      	ldr	r3, [pc, #88]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25fb8:	681b      	ldr	r3, [r3, #0]
   25fba:	9a01      	ldr	r2, [sp, #4]
   25fbc:	8812      	ldrh	r2, [r2, #0]
   25fbe:	b2d2      	uxtb	r2, r2
   25fc0:	2102      	movs	r1, #2
   25fc2:	4610      	mov	r0, r2
   25fc4:	4798      	blx	r3
}
   25fc6:	e01d      	b.n	26004 <AppDiscProcAttMsg+0x2bc>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   25fc8:	9b01      	ldr	r3, [sp, #4]
   25fca:	881b      	ldrh	r3, [r3, #0]
   25fcc:	b2da      	uxtb	r2, r3
   25fce:	9b04      	ldr	r3, [sp, #16]
   25fd0:	681b      	ldr	r3, [r3, #0]
   25fd2:	4619      	mov	r1, r3
   25fd4:	4610      	mov	r0, r2
   25fd6:	f7e8 f98d 	bl	e2f4 <AttcDiscConfigCmpl>
   25fda:	4603      	mov	r3, r0
   25fdc:	f88d 300f 	strb.w	r3, [sp, #15]
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   25fe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25fe4:	4619      	mov	r1, r3
   25fe6:	480e      	ldr	r0, [pc, #56]	; (26020 <AppDiscProcAttMsg+0x2d8>)
   25fe8:	f7e7 fd2e 	bl	da48 <WsfTrace>
      if (status != ATT_CONTINUING)
   25fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25ff0:	2b78      	cmp	r3, #120	; 0x78
   25ff2:	d007      	beq.n	26004 <AppDiscProcAttMsg+0x2bc>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   25ff4:	4b06      	ldr	r3, [pc, #24]	; (26010 <AppDiscProcAttMsg+0x2c8>)
   25ff6:	681b      	ldr	r3, [r3, #0]
   25ff8:	9a01      	ldr	r2, [sp, #4]
   25ffa:	8812      	ldrh	r2, [r2, #0]
   25ffc:	b2d2      	uxtb	r2, r2
   25ffe:	2108      	movs	r1, #8
   26000:	4610      	mov	r0, r2
   26002:	4798      	blx	r3
}
   26004:	bf00      	nop
   26006:	b006      	add	sp, #24
   26008:	bd70      	pop	{r4, r5, r6, pc}
   2600a:	bf00      	nop
   2600c:	1000881c 	.word	0x1000881c
   26010:	1000884c 	.word	0x1000884c
   26014:	1000983c 	.word	0x1000983c
   26018:	0002c040 	.word	0x0002c040
   2601c:	0002c064 	.word	0x0002c064
   26020:	0002c084 	.word	0x0002c084

00026024 <AppDiscInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscInit(void)
{
   26024:	b082      	sub	sp, #8
  uint8_t i;

  for (i = 0; i < DM_CONN_MAX; i++)
   26026:	2300      	movs	r3, #0
   26028:	f88d 3007 	strb.w	r3, [sp, #7]
   2602c:	e013      	b.n	26056 <AppDiscInit+0x32>
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   2602e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26032:	4a0d      	ldr	r2, [pc, #52]	; (26068 <AppDiscInit+0x44>)
   26034:	011b      	lsls	r3, r3, #4
   26036:	4413      	add	r3, r2
   26038:	330b      	adds	r3, #11
   2603a:	2200      	movs	r2, #0
   2603c:	701a      	strb	r2, [r3, #0]
    appDiscCb[i].pDiscCb = NULL;
   2603e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26042:	4a09      	ldr	r2, [pc, #36]	; (26068 <AppDiscInit+0x44>)
   26044:	011b      	lsls	r3, r3, #4
   26046:	4413      	add	r3, r2
   26048:	2200      	movs	r2, #0
   2604a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   2604c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26050:	3301      	adds	r3, #1
   26052:	f88d 3007 	strb.w	r3, [sp, #7]
   26056:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2605a:	2b02      	cmp	r3, #2
   2605c:	d9e7      	bls.n	2602e <AppDiscInit+0xa>
  }
}
   2605e:	bf00      	nop
   26060:	bf00      	nop
   26062:	b002      	add	sp, #8
   26064:	4770      	bx	lr
   26066:	bf00      	nop
   26068:	1000881c 	.word	0x1000881c

0002606c <AppDiscRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
   2606c:	b082      	sub	sp, #8
   2606e:	9001      	str	r0, [sp, #4]
  appDiscCback = cback;
   26070:	4a02      	ldr	r2, [pc, #8]	; (2607c <AppDiscRegister+0x10>)
   26072:	9b01      	ldr	r3, [sp, #4]
   26074:	6013      	str	r3, [r2, #0]
}
   26076:	bf00      	nop
   26078:	b002      	add	sp, #8
   2607a:	4770      	bx	lr
   2607c:	1000884c 	.word	0x1000884c

00026080 <AppDiscSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
   26080:	b084      	sub	sp, #16
   26082:	4603      	mov	r3, r0
   26084:	9200      	str	r2, [sp, #0]
   26086:	f88d 3007 	strb.w	r3, [sp, #7]
   2608a:	460b      	mov	r3, r1
   2608c:	f88d 3006 	strb.w	r3, [sp, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   26090:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26094:	3b01      	subs	r3, #1
   26096:	011b      	lsls	r3, r3, #4
   26098:	4a06      	ldr	r2, [pc, #24]	; (260b4 <AppDiscSetHdlList+0x34>)
   2609a:	4413      	add	r3, r2
   2609c:	9303      	str	r3, [sp, #12]

  pAppDiscCb->hdlListLen = hdlListLen;
   2609e:	9b03      	ldr	r3, [sp, #12]
   260a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   260a4:	729a      	strb	r2, [r3, #10]
  pAppDiscCb->pHdlList = pHdlList;
   260a6:	9b03      	ldr	r3, [sp, #12]
   260a8:	9a00      	ldr	r2, [sp, #0]
   260aa:	605a      	str	r2, [r3, #4]
}
   260ac:	bf00      	nop
   260ae:	b004      	add	sp, #16
   260b0:	4770      	bx	lr
   260b2:	bf00      	nop
   260b4:	1000881c 	.word	0x1000881c

000260b8 <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   260b8:	b500      	push	{lr}
   260ba:	b087      	sub	sp, #28
   260bc:	4603      	mov	r3, r0
   260be:	460a      	mov	r2, r1
   260c0:	f88d 3007 	strb.w	r3, [sp, #7]
   260c4:	4613      	mov	r3, r2
   260c6:	f88d 3006 	strb.w	r3, [sp, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   260ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   260ce:	3b01      	subs	r3, #1
   260d0:	011b      	lsls	r3, r3, #4
   260d2:	4a38      	ldr	r2, [pc, #224]	; (261b4 <AppDiscComplete+0xfc>)
   260d4:	4413      	add	r3, r2
   260d6:	9305      	str	r3, [sp, #20]
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   260d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   260dc:	2200      	movs	r2, #0
   260de:	2108      	movs	r1, #8
   260e0:	4618      	mov	r0, r3
   260e2:	f7ef ff0b 	bl	15efc <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   260e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   260ea:	2b08      	cmp	r3, #8
   260ec:	d103      	bne.n	260f6 <AppDiscComplete+0x3e>
   260ee:	9b05      	ldr	r3, [sp, #20]
   260f0:	7a1b      	ldrb	r3, [r3, #8]
   260f2:	2b07      	cmp	r3, #7
   260f4:	d003      	beq.n	260fe <AppDiscComplete+0x46>
  {
    pAppDiscCb->cmplStatus = status;
   260f6:	9b05      	ldr	r3, [sp, #20]
   260f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   260fc:	725a      	strb	r2, [r3, #9]
  }

  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   260fe:	9b05      	ldr	r3, [sp, #20]
   26100:	2200      	movs	r2, #0
   26102:	72da      	strb	r2, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   26104:	9b05      	ldr	r3, [sp, #20]
   26106:	681b      	ldr	r3, [r3, #0]
   26108:	2b00      	cmp	r3, #0
   2610a:	d007      	beq.n	2611c <AppDiscComplete+0x64>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   2610c:	9b05      	ldr	r3, [sp, #20]
   2610e:	681b      	ldr	r3, [r3, #0]
   26110:	4618      	mov	r0, r3
   26112:	f7e6 ffdf 	bl	d0d4 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   26116:	9b05      	ldr	r3, [sp, #20]
   26118:	2200      	movs	r2, #0
   2611a:	601a      	str	r2, [r3, #0]
  }

  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   2611c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26120:	4618      	mov	r0, r3
   26122:	f000 fac3 	bl	266ac <AppDbGetHdl>
   26126:	9004      	str	r0, [sp, #16]
   26128:	9b04      	ldr	r3, [sp, #16]
   2612a:	2b00      	cmp	r3, #0
   2612c:	d02e      	beq.n	2618c <AppDiscComplete+0xd4>
  {
    /* Don't store configuration complete if not bonded - it must be re-done on reconnection. */
    uint8_t discComplete = AppCheckBonded(connId) ? APP_DISC_CFG_CMPL : APP_DISC_CMPL;
   2612e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26132:	4618      	mov	r0, r3
   26134:	f000 f9dc 	bl	264f0 <AppCheckBonded>
   26138:	4603      	mov	r3, r0
   2613a:	2b00      	cmp	r3, #0
   2613c:	d001      	beq.n	26142 <AppDiscComplete+0x8a>
   2613e:	2308      	movs	r3, #8
   26140:	e000      	b.n	26144 <AppDiscComplete+0x8c>
   26142:	2304      	movs	r3, #4
   26144:	f88d 300f 	strb.w	r3, [sp, #15]

    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   26148:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2614c:	2b08      	cmp	r3, #8
   2614e:	d103      	bne.n	26158 <AppDiscComplete+0xa0>
   26150:	9b05      	ldr	r3, [sp, #20]
   26152:	7a1b      	ldrb	r3, [r3, #8]
   26154:	2b07      	cmp	r3, #7
   26156:	d00b      	beq.n	26170 <AppDiscComplete+0xb8>
   26158:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2615c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26160:	429a      	cmp	r2, r3
   26162:	d805      	bhi.n	26170 <AppDiscComplete+0xb8>
    {
      AppDbSetDiscStatus(hdl, status);
   26164:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26168:	4619      	mov	r1, r3
   2616a:	9804      	ldr	r0, [sp, #16]
   2616c:	f7ed fc1e 	bl	139ac <AppDbSetDiscStatus>
    }

    if (pAppDiscCb->pHdlList != NULL)
   26170:	9b05      	ldr	r3, [sp, #20]
   26172:	685b      	ldr	r3, [r3, #4]
   26174:	2b00      	cmp	r3, #0
   26176:	d009      	beq.n	2618c <AppDiscComplete+0xd4>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   26178:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2617c:	2b04      	cmp	r3, #4
   2617e:	d105      	bne.n	2618c <AppDiscComplete+0xd4>
      {
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   26180:	9b05      	ldr	r3, [sp, #20]
   26182:	685b      	ldr	r3, [r3, #4]
   26184:	4619      	mov	r1, r3
   26186:	9804      	ldr	r0, [sp, #16]
   26188:	f7ed fc24 	bl	139d4 <AppDbSetHdlList>
  }

  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   2618c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26190:	2b08      	cmp	r3, #8
   26192:	d102      	bne.n	2619a <AppDiscComplete+0xe2>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   26194:	9b05      	ldr	r3, [sp, #20]
   26196:	2208      	movs	r2, #8
   26198:	721a      	strb	r2, [r3, #8]
  }

  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   2619a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2619e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   261a2:	4619      	mov	r1, r3
   261a4:	4804      	ldr	r0, [pc, #16]	; (261b8 <AppDiscComplete+0x100>)
   261a6:	f7e7 fc4f 	bl	da48 <WsfTrace>
}
   261aa:	bf00      	nop
   261ac:	b007      	add	sp, #28
   261ae:	f85d fb04 	ldr.w	pc, [sp], #4
   261b2:	bf00      	nop
   261b4:	1000881c 	.word	0x1000881c
   261b8:	0002c0a8 	.word	0x0002c0a8

000261bc <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   261bc:	b500      	push	{lr}
   261be:	b085      	sub	sp, #20
   261c0:	9200      	str	r2, [sp, #0]
   261c2:	461a      	mov	r2, r3
   261c4:	4603      	mov	r3, r0
   261c6:	f88d 3007 	strb.w	r3, [sp, #7]
   261ca:	460b      	mov	r3, r1
   261cc:	f88d 3006 	strb.w	r3, [sp, #6]
   261d0:	4613      	mov	r3, r2
   261d2:	f88d 3005 	strb.w	r3, [sp, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   261d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   261da:	3b01      	subs	r3, #1
   261dc:	011b      	lsls	r3, r3, #4
   261de:	4a1a      	ldr	r2, [pc, #104]	; (26248 <AppDiscFindService+0x8c>)
   261e0:	4413      	add	r3, r2
   261e2:	9303      	str	r3, [sp, #12]

  if (pAppDiscCb->pDiscCb == NULL)
   261e4:	9b03      	ldr	r3, [sp, #12]
   261e6:	681b      	ldr	r3, [r3, #0]
   261e8:	2b00      	cmp	r3, #0
   261ea:	d105      	bne.n	261f8 <AppDiscFindService+0x3c>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   261ec:	2014      	movs	r0, #20
   261ee:	f7e6 ff2b 	bl	d048 <WsfBufAlloc>
   261f2:	4602      	mov	r2, r0
   261f4:	9b03      	ldr	r3, [sp, #12]
   261f6:	601a      	str	r2, [r3, #0]
  }

  if (pAppDiscCb->pDiscCb != NULL)
   261f8:	9b03      	ldr	r3, [sp, #12]
   261fa:	681b      	ldr	r3, [r3, #0]
   261fc:	2b00      	cmp	r3, #0
   261fe:	d01f      	beq.n	26240 <AppDiscFindService+0x84>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   26200:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26204:	2201      	movs	r2, #1
   26206:	2108      	movs	r1, #8
   26208:	4618      	mov	r0, r3
   2620a:	f7ef fe77 	bl	15efc <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   2620e:	9b03      	ldr	r3, [sp, #12]
   26210:	2201      	movs	r2, #1
   26212:	72da      	strb	r2, [r3, #11]

    pAppDiscCb->pDiscCb->pCharList = pCharList;
   26214:	9b03      	ldr	r3, [sp, #12]
   26216:	681b      	ldr	r3, [r3, #0]
   26218:	9a06      	ldr	r2, [sp, #24]
   2621a:	601a      	str	r2, [r3, #0]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   2621c:	9b03      	ldr	r3, [sp, #12]
   2621e:	681b      	ldr	r3, [r3, #0]
   26220:	9a07      	ldr	r2, [sp, #28]
   26222:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   26224:	9b03      	ldr	r3, [sp, #12]
   26226:	681b      	ldr	r3, [r3, #0]
   26228:	f89d 2005 	ldrb.w	r2, [sp, #5]
   2622c:	731a      	strb	r2, [r3, #12]
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   2622e:	9b03      	ldr	r3, [sp, #12]
   26230:	6819      	ldr	r1, [r3, #0]
   26232:	f89d 2006 	ldrb.w	r2, [sp, #6]
   26236:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2623a:	9b00      	ldr	r3, [sp, #0]
   2623c:	f7e7 ff74 	bl	e128 <AttcDiscService>
  }
}
   26240:	bf00      	nop
   26242:	b005      	add	sp, #20
   26244:	f85d fb04 	ldr.w	pc, [sp], #4
   26248:	1000881c 	.word	0x1000881c

0002624c <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   2624c:	b500      	push	{lr}
   2624e:	b085      	sub	sp, #20
   26250:	9300      	str	r3, [sp, #0]
   26252:	4603      	mov	r3, r0
   26254:	f88d 3007 	strb.w	r3, [sp, #7]
   26258:	460b      	mov	r3, r1
   2625a:	f88d 3006 	strb.w	r3, [sp, #6]
   2625e:	4613      	mov	r3, r2
   26260:	f88d 3005 	strb.w	r3, [sp, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   26264:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26268:	3b01      	subs	r3, #1
   2626a:	011b      	lsls	r3, r3, #4
   2626c:	4a26      	ldr	r2, [pc, #152]	; (26308 <AppDiscConfigure+0xbc>)
   2626e:	4413      	add	r3, r2
   26270:	9303      	str	r3, [sp, #12]
  uint8_t ret;

  if (pAppDiscCb->pDiscCb == NULL)
   26272:	9b03      	ldr	r3, [sp, #12]
   26274:	681b      	ldr	r3, [r3, #0]
   26276:	2b00      	cmp	r3, #0
   26278:	d105      	bne.n	26286 <AppDiscConfigure+0x3a>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   2627a:	2014      	movs	r0, #20
   2627c:	f7e6 fee4 	bl	d048 <WsfBufAlloc>
   26280:	4602      	mov	r2, r0
   26282:	9b03      	ldr	r3, [sp, #12]
   26284:	601a      	str	r2, [r3, #0]
  }

  if (pAppDiscCb->pDiscCb != NULL)
   26286:	9b03      	ldr	r3, [sp, #12]
   26288:	681b      	ldr	r3, [r3, #0]
   2628a:	2b00      	cmp	r3, #0
   2628c:	d038      	beq.n	26300 <AppDiscConfigure+0xb4>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   2628e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26292:	2201      	movs	r2, #1
   26294:	2108      	movs	r1, #8
   26296:	4618      	mov	r0, r3
   26298:	f7ef fe30 	bl	15efc <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   2629c:	9b03      	ldr	r3, [sp, #12]
   2629e:	2202      	movs	r2, #2
   262a0:	72da      	strb	r2, [r3, #11]

    if (status == APP_DISC_CFG_CONN_START)
   262a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   262a6:	2b07      	cmp	r3, #7
   262a8:	d102      	bne.n	262b0 <AppDiscConfigure+0x64>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   262aa:	9b03      	ldr	r3, [sp, #12]
   262ac:	2207      	movs	r2, #7
   262ae:	721a      	strb	r2, [r3, #8]
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   262b0:	9b03      	ldr	r3, [sp, #12]
   262b2:	681b      	ldr	r3, [r3, #0]
   262b4:	9a00      	ldr	r2, [sp, #0]
   262b6:	609a      	str	r2, [r3, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   262b8:	9b03      	ldr	r3, [sp, #12]
   262ba:	681b      	ldr	r3, [r3, #0]
   262bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
   262c0:	735a      	strb	r2, [r3, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   262c2:	9b03      	ldr	r3, [sp, #12]
   262c4:	681b      	ldr	r3, [r3, #0]
   262c6:	9a07      	ldr	r2, [sp, #28]
   262c8:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   262ca:	9b03      	ldr	r3, [sp, #12]
   262cc:	681b      	ldr	r3, [r3, #0]
   262ce:	f89d 2018 	ldrb.w	r2, [sp, #24]
   262d2:	731a      	strb	r2, [r3, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   262d4:	9b03      	ldr	r3, [sp, #12]
   262d6:	681a      	ldr	r2, [r3, #0]
   262d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   262dc:	4611      	mov	r1, r2
   262de:	4618      	mov	r0, r3
   262e0:	f7e7 fff4 	bl	e2cc <AttcDiscConfigStart>
   262e4:	4603      	mov	r3, r0
   262e6:	f88d 300b 	strb.w	r3, [sp, #11]

    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   262ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
   262ee:	2b00      	cmp	r3, #0
   262f0:	d106      	bne.n	26300 <AppDiscConfigure+0xb4>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   262f2:	4b06      	ldr	r3, [pc, #24]	; (2630c <AppDiscConfigure+0xc0>)
   262f4:	681b      	ldr	r3, [r3, #0]
   262f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   262fa:	2108      	movs	r1, #8
   262fc:	4610      	mov	r0, r2
   262fe:	4798      	blx	r3
    }
  }
}
   26300:	bf00      	nop
   26302:	b005      	add	sp, #20
   26304:	f85d fb04 	ldr.w	pc, [sp], #4
   26308:	1000881c 	.word	0x1000881c
   2630c:	1000884c 	.word	0x1000884c

00026310 <AppDiscServiceChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscServiceChanged(attEvt_t *pMsg)
{
   26310:	b500      	push	{lr}
   26312:	b089      	sub	sp, #36	; 0x24
   26314:	9001      	str	r0, [sp, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   26316:	9b01      	ldr	r3, [sp, #4]
   26318:	881b      	ldrh	r3, [r3, #0]
   2631a:	3b01      	subs	r3, #1
   2631c:	011b      	lsls	r3, r3, #4
   2631e:	4a3b      	ldr	r2, [pc, #236]	; (2640c <AppDiscServiceChanged+0xfc>)
   26320:	4413      	add	r3, r2
   26322:	9305      	str	r3, [sp, #20]
  uint16_t    *pHdl;
  uint8_t     i;
  bool_t      foundHdl;

  /* verify characteristic length */
  if (pMsg->valueLen != CH_SC_LEN)
   26324:	9b01      	ldr	r3, [sp, #4]
   26326:	891b      	ldrh	r3, [r3, #8]
   26328:	2b04      	cmp	r3, #4
   2632a:	d164      	bne.n	263f6 <AppDiscServiceChanged+0xe6>
  {
    return;
  }

  /* parse and verify handles */
  p = pMsg->pValue;
   2632c:	9b01      	ldr	r3, [sp, #4]
   2632e:	685b      	ldr	r3, [r3, #4]
   26330:	9304      	str	r3, [sp, #16]
  BSTREAM_TO_UINT16(startHdl, p);
   26332:	9b04      	ldr	r3, [sp, #16]
   26334:	781b      	ldrb	r3, [r3, #0]
   26336:	b29a      	uxth	r2, r3
   26338:	9b04      	ldr	r3, [sp, #16]
   2633a:	3301      	adds	r3, #1
   2633c:	781b      	ldrb	r3, [r3, #0]
   2633e:	b29b      	uxth	r3, r3
   26340:	021b      	lsls	r3, r3, #8
   26342:	b29b      	uxth	r3, r3
   26344:	4413      	add	r3, r2
   26346:	f8ad 300e 	strh.w	r3, [sp, #14]
   2634a:	9b04      	ldr	r3, [sp, #16]
   2634c:	3302      	adds	r3, #2
   2634e:	9304      	str	r3, [sp, #16]
  BSTREAM_TO_UINT16(endHdl, p);
   26350:	9b04      	ldr	r3, [sp, #16]
   26352:	781b      	ldrb	r3, [r3, #0]
   26354:	b29a      	uxth	r2, r3
   26356:	9b04      	ldr	r3, [sp, #16]
   26358:	3301      	adds	r3, #1
   2635a:	781b      	ldrb	r3, [r3, #0]
   2635c:	b29b      	uxth	r3, r3
   2635e:	021b      	lsls	r3, r3, #8
   26360:	b29b      	uxth	r3, r3
   26362:	4413      	add	r3, r2
   26364:	f8ad 300c 	strh.w	r3, [sp, #12]
   26368:	9b04      	ldr	r3, [sp, #16]
   2636a:	3302      	adds	r3, #2
   2636c:	9304      	str	r3, [sp, #16]
  if (startHdl == 0 || endHdl < startHdl)
   2636e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   26372:	2b00      	cmp	r3, #0
   26374:	d041      	beq.n	263fa <AppDiscServiceChanged+0xea>
   26376:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   2637a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2637e:	429a      	cmp	r2, r3
   26380:	d33b      	bcc.n	263fa <AppDiscServiceChanged+0xea>
  {
    return;
  }

  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
   26382:	2300      	movs	r3, #0
   26384:	f88d 301a 	strb.w	r3, [sp, #26]
  if (pAppDiscCb->pHdlList != NULL)
   26388:	9b05      	ldr	r3, [sp, #20]
   2638a:	685b      	ldr	r3, [r3, #4]
   2638c:	2b00      	cmp	r3, #0
   2638e:	d023      	beq.n	263d8 <AppDiscServiceChanged+0xc8>
  {
    pHdl = pAppDiscCb->pHdlList;
   26390:	9b05      	ldr	r3, [sp, #20]
   26392:	685b      	ldr	r3, [r3, #4]
   26394:	9307      	str	r3, [sp, #28]
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   26396:	9b05      	ldr	r3, [sp, #20]
   26398:	7a9b      	ldrb	r3, [r3, #10]
   2639a:	f88d 301b 	strb.w	r3, [sp, #27]
   2639e:	e017      	b.n	263d0 <AppDiscServiceChanged+0xc0>
    {
      if (*pHdl >= startHdl && *pHdl <= endHdl)
   263a0:	9b07      	ldr	r3, [sp, #28]
   263a2:	881b      	ldrh	r3, [r3, #0]
   263a4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   263a8:	429a      	cmp	r2, r3
   263aa:	d809      	bhi.n	263c0 <AppDiscServiceChanged+0xb0>
   263ac:	9b07      	ldr	r3, [sp, #28]
   263ae:	881b      	ldrh	r3, [r3, #0]
   263b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   263b4:	429a      	cmp	r2, r3
   263b6:	d303      	bcc.n	263c0 <AppDiscServiceChanged+0xb0>
      {
        foundHdl = TRUE;
   263b8:	2301      	movs	r3, #1
   263ba:	f88d 301a 	strb.w	r3, [sp, #26]
        break;
   263be:	e00b      	b.n	263d8 <AppDiscServiceChanged+0xc8>
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   263c0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   263c4:	3b01      	subs	r3, #1
   263c6:	f88d 301b 	strb.w	r3, [sp, #27]
   263ca:	9b07      	ldr	r3, [sp, #28]
   263cc:	3302      	adds	r3, #2
   263ce:	9307      	str	r3, [sp, #28]
   263d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   263d4:	2b00      	cmp	r3, #0
   263d6:	d1e3      	bne.n	263a0 <AppDiscServiceChanged+0x90>
      }
    }
  }
  if (foundHdl == FALSE)
   263d8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   263dc:	2b00      	cmp	r3, #0
   263de:	d00e      	beq.n	263fe <AppDiscServiceChanged+0xee>
  {
    return;
  }

  /* if discovery procedure already in progress */
  if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   263e0:	9b05      	ldr	r3, [sp, #20]
   263e2:	7adb      	ldrb	r3, [r3, #11]
   263e4:	2b01      	cmp	r3, #1
   263e6:	d00c      	beq.n	26402 <AppDiscServiceChanged+0xf2>
    /* ignore service changed */
    return;
  }

  /* Prepare to restart service discovery*/
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
   263e8:	9b01      	ldr	r3, [sp, #4]
   263ea:	881b      	ldrh	r3, [r3, #0]
   263ec:	b2db      	uxtb	r3, r3
   263ee:	4618      	mov	r0, r3
   263f0:	f7ff fab4 	bl	2595c <appDiscRestartDiscovery>
   263f4:	e006      	b.n	26404 <AppDiscServiceChanged+0xf4>
    return;
   263f6:	bf00      	nop
   263f8:	e004      	b.n	26404 <AppDiscServiceChanged+0xf4>
    return;
   263fa:	bf00      	nop
   263fc:	e002      	b.n	26404 <AppDiscServiceChanged+0xf4>
    return;
   263fe:	bf00      	nop
   26400:	e000      	b.n	26404 <AppDiscServiceChanged+0xf4>
    return;
   26402:	bf00      	nop
}
   26404:	b009      	add	sp, #36	; 0x24
   26406:	f85d fb04 	ldr.w	pc, [sp], #4
   2640a:	bf00      	nop
   2640c:	1000881c 	.word	0x1000881c

00026410 <AppDiscReadDatabaseHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscReadDatabaseHash(dmConnId_t connId)
{
   26410:	b500      	push	{lr}
   26412:	b087      	sub	sp, #28
   26414:	4603      	mov	r3, r0
   26416:	f88d 300f 	strb.w	r3, [sp, #15]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   2641a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2641e:	3b01      	subs	r3, #1
   26420:	011b      	lsls	r3, r3, #4
   26422:	4a0b      	ldr	r2, [pc, #44]	; (26450 <AppDiscReadDatabaseHash+0x40>)
   26424:	4413      	add	r3, r2
   26426:	9305      	str	r3, [sp, #20]

  /* Security/bonding not used, rely on database hash for cached handles. */
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   26428:	9b05      	ldr	r3, [sp, #20]
   2642a:	2203      	movs	r2, #3
   2642c:	72da      	strb	r2, [r3, #11]

  /* Read the database hash. */
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   2642e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   26432:	2300      	movs	r3, #0
   26434:	9301      	str	r3, [sp, #4]
   26436:	4b07      	ldr	r3, [pc, #28]	; (26454 <AppDiscReadDatabaseHash+0x44>)
   26438:	9300      	str	r3, [sp, #0]
   2643a:	2302      	movs	r3, #2
   2643c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26440:	2101      	movs	r1, #1
   26442:	f7e9 f971 	bl	f728 <AttcReadByTypeReq>
                    (uint8_t *)attGattDbhChUuid, FALSE);
}
   26446:	bf00      	nop
   26448:	b007      	add	sp, #28
   2644a:	f85d fb04 	ldr.w	pc, [sp], #4
   2644e:	bf00      	nop
   26450:	1000881c 	.word	0x1000881c
   26454:	0002c23c 	.word	0x0002c23c

00026458 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   26458:	b500      	push	{lr}
   2645a:	b083      	sub	sp, #12
   2645c:	9001      	str	r0, [sp, #4]
  switch(pMsg->event)
   2645e:	9b01      	ldr	r3, [sp, #4]
   26460:	789b      	ldrb	r3, [r3, #2]
   26462:	2b00      	cmp	r3, #0
   26464:	d002      	beq.n	2646c <appProcMsg+0x14>
   26466:	2b01      	cmp	r3, #1
   26468:	d003      	beq.n	26472 <appProcMsg+0x1a>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;

    default:
      break;
   2646a:	e006      	b.n	2647a <appProcMsg+0x22>
      appUiBtnPoll();
   2646c:	f7ed fc32 	bl	13cd4 <appUiBtnPoll>
      break;
   26470:	e003      	b.n	2647a <appProcMsg+0x22>
      appUiTimerExpired(pMsg);
   26472:	9801      	ldr	r0, [sp, #4]
   26474:	f7ed fc28 	bl	13cc8 <appUiTimerExpired>
      break;
   26478:	bf00      	nop
  }
}
   2647a:	bf00      	nop
   2647c:	b003      	add	sp, #12
   2647e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00026484 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   26484:	b500      	push	{lr}
   26486:	b085      	sub	sp, #20
   26488:	4603      	mov	r3, r0
   2648a:	f88d 3007 	strb.w	r3, [sp, #7]
  appConnCb_t   *pCcb = appConnCb;
   2648e:	4b17      	ldr	r3, [pc, #92]	; (264ec <appNumConns+0x68>)
   26490:	9303      	str	r3, [sp, #12]
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   26492:	2303      	movs	r3, #3
   26494:	f88d 300b 	strb.w	r3, [sp, #11]
   26498:	2300      	movs	r3, #0
   2649a:	f88d 300a 	strb.w	r3, [sp, #10]
   2649e:	e01b      	b.n	264d8 <appNumConns+0x54>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   264a0:	9b03      	ldr	r3, [sp, #12]
   264a2:	791b      	ldrb	r3, [r3, #4]
   264a4:	2b00      	cmp	r3, #0
   264a6:	d00f      	beq.n	264c8 <appNumConns+0x44>
   264a8:	9b03      	ldr	r3, [sp, #12]
   264aa:	791b      	ldrb	r3, [r3, #4]
   264ac:	4618      	mov	r0, r3
   264ae:	f7ef fdb3 	bl	16018 <DmConnRole>
   264b2:	4603      	mov	r3, r0
   264b4:	461a      	mov	r2, r3
   264b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   264ba:	4293      	cmp	r3, r2
   264bc:	d104      	bne.n	264c8 <appNumConns+0x44>
    {
      j++;
   264be:	f89d 300a 	ldrb.w	r3, [sp, #10]
   264c2:	3301      	adds	r3, #1
   264c4:	f88d 300a 	strb.w	r3, [sp, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   264c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   264cc:	3b01      	subs	r3, #1
   264ce:	f88d 300b 	strb.w	r3, [sp, #11]
   264d2:	9b03      	ldr	r3, [sp, #12]
   264d4:	3320      	adds	r3, #32
   264d6:	9303      	str	r3, [sp, #12]
   264d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   264dc:	2b00      	cmp	r3, #0
   264de:	d1df      	bne.n	264a0 <appNumConns+0x1c>
    }
  }

  return j;
   264e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
}
   264e4:	4618      	mov	r0, r3
   264e6:	b005      	add	sp, #20
   264e8:	f85d fb04 	ldr.w	pc, [sp], #4
   264ec:	1000983c 	.word	0x1000983c

000264f0 <AppCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t AppCheckBonded(dmConnId_t connId)
{
   264f0:	b082      	sub	sp, #8
   264f2:	4603      	mov	r3, r0
   264f4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return appConnCb[connId - 1].bonded;
   264f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   264fc:	3b01      	subs	r3, #1
   264fe:	4a04      	ldr	r2, [pc, #16]	; (26510 <AppCheckBonded+0x20>)
   26500:	015b      	lsls	r3, r3, #5
   26502:	4413      	add	r3, r2
   26504:	3305      	adds	r3, #5
   26506:	781b      	ldrb	r3, [r3, #0]
}
   26508:	4618      	mov	r0, r3
   2650a:	b002      	add	sp, #8
   2650c:	4770      	bx	lr
   2650e:	bf00      	nop
   26510:	1000983c 	.word	0x1000983c

00026514 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   26514:	b500      	push	{lr}
   26516:	b083      	sub	sp, #12
   26518:	4603      	mov	r3, r0
   2651a:	f88d 3007 	strb.w	r3, [sp, #7]
  appHandlerId = handlerId;
   2651e:	4a05      	ldr	r2, [pc, #20]	; (26534 <AppHandlerInit+0x20>)
   26520:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26524:	7013      	strb	r3, [r2, #0]

  AppDbInit();
   26526:	f7ec ff17 	bl	13358 <AppDbInit>
}
   2652a:	bf00      	nop
   2652c:	b003      	add	sp, #12
   2652e:	f85d fb04 	ldr.w	pc, [sp], #4
   26532:	bf00      	nop
   26534:	10009828 	.word	0x10009828

00026538 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   26538:	b500      	push	{lr}
   2653a:	b083      	sub	sp, #12
   2653c:	4603      	mov	r3, r0
   2653e:	9100      	str	r1, [sp, #0]
   26540:	f88d 3007 	strb.w	r3, [sp, #7]
  if (pMsg != NULL)
   26544:	9b00      	ldr	r3, [sp, #0]
   26546:	2b00      	cmp	r3, #0
   26548:	d01b      	beq.n	26582 <AppHandler+0x4a>
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
   2654a:	9b00      	ldr	r3, [sp, #0]
   2654c:	789b      	ldrb	r3, [r3, #2]
   2654e:	4619      	mov	r1, r3
   26550:	4812      	ldr	r0, [pc, #72]	; (2659c <AppHandler+0x64>)
   26552:	f7e7 fa79 	bl	da48 <WsfTrace>

    if (pMsg->event >= APP_MASTER_MSG_START)
   26556:	9b00      	ldr	r3, [sp, #0]
   26558:	789b      	ldrb	r3, [r3, #2]
   2655a:	2b1f      	cmp	r3, #31
   2655c:	d904      	bls.n	26568 <AppHandler+0x30>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   2655e:	4b10      	ldr	r3, [pc, #64]	; (265a0 <AppHandler+0x68>)
   26560:	685b      	ldr	r3, [r3, #4]
   26562:	9800      	ldr	r0, [sp, #0]
   26564:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   26566:	e014      	b.n	26592 <AppHandler+0x5a>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   26568:	9b00      	ldr	r3, [sp, #0]
   2656a:	789b      	ldrb	r3, [r3, #2]
   2656c:	2b0f      	cmp	r3, #15
   2656e:	d904      	bls.n	2657a <AppHandler+0x42>
      (*appCb.slaveCback)(pMsg);
   26570:	4b0b      	ldr	r3, [pc, #44]	; (265a0 <AppHandler+0x68>)
   26572:	681b      	ldr	r3, [r3, #0]
   26574:	9800      	ldr	r0, [sp, #0]
   26576:	4798      	blx	r3
}
   26578:	e00b      	b.n	26592 <AppHandler+0x5a>
      appProcMsg(pMsg);
   2657a:	9800      	ldr	r0, [sp, #0]
   2657c:	f7ff ff6c 	bl	26458 <appProcMsg>
}
   26580:	e007      	b.n	26592 <AppHandler+0x5a>
    if (event & APP_BTN_DOWN_EVT)
   26582:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26586:	f003 0310 	and.w	r3, r3, #16
   2658a:	2b00      	cmp	r3, #0
   2658c:	d001      	beq.n	26592 <AppHandler+0x5a>
      AppUiBtnPressed();
   2658e:	f7ed fbad 	bl	13cec <AppUiBtnPressed>
}
   26592:	bf00      	nop
   26594:	b003      	add	sp, #12
   26596:	f85d fb04 	ldr.w	pc, [sp], #4
   2659a:	bf00      	nop
   2659c:	0002c0d0 	.word	0x0002c0d0
   265a0:	10009818 	.word	0x10009818

000265a4 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   265a4:	b500      	push	{lr}
   265a6:	b085      	sub	sp, #20
   265a8:	9001      	str	r0, [sp, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];

  if (pAuthReq->display)
   265aa:	9b01      	ldr	r3, [sp, #4]
   265ac:	795b      	ldrb	r3, [r3, #5]
   265ae:	2b00      	cmp	r3, #0
   265b0:	d029      	beq.n	26606 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   265b2:	ab03      	add	r3, sp, #12
   265b4:	2104      	movs	r1, #4
   265b6:	4618      	mov	r0, r3
   265b8:	f7f3 fc30 	bl	19e1c <SecRand>
    passkey %= 1000000;
   265bc:	9a03      	ldr	r2, [sp, #12]
   265be:	4b15      	ldr	r3, [pc, #84]	; (26614 <AppHandlePasskey+0x70>)
   265c0:	fba3 1302 	umull	r1, r3, r3, r2
   265c4:	0c9b      	lsrs	r3, r3, #18
   265c6:	4914      	ldr	r1, [pc, #80]	; (26618 <AppHandlePasskey+0x74>)
   265c8:	fb01 f303 	mul.w	r3, r1, r3
   265cc:	1ad3      	subs	r3, r2, r3
   265ce:	9303      	str	r3, [sp, #12]

    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   265d0:	9b03      	ldr	r3, [sp, #12]
   265d2:	b2db      	uxtb	r3, r3
   265d4:	f88d 3008 	strb.w	r3, [sp, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   265d8:	9b03      	ldr	r3, [sp, #12]
   265da:	0a1b      	lsrs	r3, r3, #8
   265dc:	b2db      	uxtb	r3, r3
   265de:	f88d 3009 	strb.w	r3, [sp, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   265e2:	9b03      	ldr	r3, [sp, #12]
   265e4:	0c1b      	lsrs	r3, r3, #16
   265e6:	b2db      	uxtb	r3, r3
   265e8:	f88d 300a 	strb.w	r3, [sp, #10]

    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   265ec:	9b01      	ldr	r3, [sp, #4]
   265ee:	881b      	ldrh	r3, [r3, #0]
   265f0:	b2db      	uxtb	r3, r3
   265f2:	aa02      	add	r2, sp, #8
   265f4:	2103      	movs	r1, #3
   265f6:	4618      	mov	r0, r3
   265f8:	f7f0 fd6b 	bl	170d2 <DmSecAuthRsp>

    /* display passkey */
    AppUiDisplayPasskey(passkey);
   265fc:	9b03      	ldr	r3, [sp, #12]
   265fe:	4618      	mov	r0, r3
   26600:	f7ed fb34 	bl	13c6c <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  }
}
   26604:	e002      	b.n	2660c <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   26606:	200e      	movs	r0, #14
   26608:	f7ed fa44 	bl	13a94 <AppUiAction>
}
   2660c:	bf00      	nop
   2660e:	b005      	add	sp, #20
   26610:	f85d fb04 	ldr.w	pc, [sp], #4
   26614:	431bde83 	.word	0x431bde83
   26618:	000f4240 	.word	0x000f4240

0002661c <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   2661c:	b500      	push	{lr}
   2661e:	b085      	sub	sp, #20
   26620:	9001      	str	r0, [sp, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   26622:	9b01      	ldr	r3, [sp, #4]
   26624:	3304      	adds	r3, #4
   26626:	4618      	mov	r0, r3
   26628:	f7f0 fe4a 	bl	172c0 <DmSecGetCompareValue>
   2662c:	9003      	str	r0, [sp, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   2662e:	9803      	ldr	r0, [sp, #12]
   26630:	f7ed fb2a 	bl	13c88 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   26634:	9b01      	ldr	r3, [sp, #4]
   26636:	881b      	ldrh	r3, [r3, #0]
   26638:	b2db      	uxtb	r3, r3
   2663a:	2101      	movs	r1, #1
   2663c:	4618      	mov	r0, r3
   2663e:	f7f0 fe13 	bl	17268 <DmSecCompareRsp>
}
   26642:	bf00      	nop
   26644:	b005      	add	sp, #20
   26646:	f85d fb04 	ldr.w	pc, [sp], #4

0002664a <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   2664a:	b500      	push	{lr}
   2664c:	b083      	sub	sp, #12
   2664e:	4603      	mov	r3, r0
   26650:	f88d 3007 	strb.w	r3, [sp, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   26654:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26658:	2213      	movs	r2, #19
   2665a:	4619      	mov	r1, r3
   2665c:	2003      	movs	r0, #3
   2665e:	f7ef fa4d 	bl	15afc <DmConnClose>
}
   26662:	bf00      	nop
   26664:	b003      	add	sp, #12
   26666:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002666c <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   2666c:	b082      	sub	sp, #8
  appConnCb_t   *pCcb = appConnCb;
   2666e:	4b0e      	ldr	r3, [pc, #56]	; (266a8 <AppConnIsOpen+0x3c>)
   26670:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   26672:	2303      	movs	r3, #3
   26674:	f88d 3003 	strb.w	r3, [sp, #3]
   26678:	e00e      	b.n	26698 <AppConnIsOpen+0x2c>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   2667a:	9b01      	ldr	r3, [sp, #4]
   2667c:	791b      	ldrb	r3, [r3, #4]
   2667e:	2b00      	cmp	r3, #0
   26680:	d002      	beq.n	26688 <AppConnIsOpen+0x1c>
    {
      return pCcb->connId;
   26682:	9b01      	ldr	r3, [sp, #4]
   26684:	791b      	ldrb	r3, [r3, #4]
   26686:	e00c      	b.n	266a2 <AppConnIsOpen+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   26688:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2668c:	3b01      	subs	r3, #1
   2668e:	f88d 3003 	strb.w	r3, [sp, #3]
   26692:	9b01      	ldr	r3, [sp, #4]
   26694:	3320      	adds	r3, #32
   26696:	9301      	str	r3, [sp, #4]
   26698:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2669c:	2b00      	cmp	r3, #0
   2669e:	d1ec      	bne.n	2667a <AppConnIsOpen+0xe>
    }
  }

  return DM_CONN_ID_NONE;
   266a0:	2300      	movs	r3, #0
}
   266a2:	4618      	mov	r0, r3
   266a4:	b002      	add	sp, #8
   266a6:	4770      	bx	lr
   266a8:	1000983c 	.word	0x1000983c

000266ac <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   266ac:	b082      	sub	sp, #8
   266ae:	4603      	mov	r3, r0
   266b0:	f88d 3007 	strb.w	r3, [sp, #7]
  return appConnCb[connId-1].dbHdl;
   266b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   266b8:	3b01      	subs	r3, #1
   266ba:	4a03      	ldr	r2, [pc, #12]	; (266c8 <AppDbGetHdl+0x1c>)
   266bc:	015b      	lsls	r3, r3, #5
   266be:	4413      	add	r3, r2
   266c0:	681b      	ldr	r3, [r3, #0]
}
   266c2:	4618      	mov	r0, r3
   266c4:	b002      	add	sp, #8
   266c6:	4770      	bx	lr
   266c8:	1000983c 	.word	0x1000983c

000266cc <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   266cc:	b570      	push	{r4, r5, r6, lr}
   266ce:	b086      	sub	sp, #24
   266d0:	9003      	str	r0, [sp, #12]
   266d2:	460b      	mov	r3, r1
   266d4:	f88d 300b 	strb.w	r3, [sp, #11]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   266d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   266dc:	3b01      	subs	r3, #1
   266de:	4a15      	ldr	r2, [pc, #84]	; (26734 <AppAddDevToResList+0x68>)
   266e0:	015b      	lsls	r3, r3, #5
   266e2:	4413      	add	r3, r2
   266e4:	681b      	ldr	r3, [r3, #0]
   266e6:	9305      	str	r3, [sp, #20]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   266e8:	f7f8 ff56 	bl	1f598 <HciLlPrivacySupported>
   266ec:	4603      	mov	r3, r0
   266ee:	2b00      	cmp	r3, #0
   266f0:	d01c      	beq.n	2672c <AppAddDevToResList+0x60>
   266f2:	2200      	movs	r2, #0
   266f4:	2104      	movs	r1, #4
   266f6:	9805      	ldr	r0, [sp, #20]
   266f8:	f7ec ffd0 	bl	1369c <AppDbGetKey>
   266fc:	9004      	str	r0, [sp, #16]
   266fe:	9b04      	ldr	r3, [sp, #16]
   26700:	2b00      	cmp	r3, #0
   26702:	d013      	beq.n	2672c <AppAddDevToResList+0x60>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   26704:	9b04      	ldr	r3, [sp, #16]
   26706:	7d9c      	ldrb	r4, [r3, #22]
   26708:	9b04      	ldr	r3, [sp, #16]
   2670a:	f103 0510 	add.w	r5, r3, #16
   2670e:	9e04      	ldr	r6, [sp, #16]
   26710:	f7f0 fd38 	bl	17184 <DmSecGetLocalIrk>
   26714:	4602      	mov	r2, r0
   26716:	9b03      	ldr	r3, [sp, #12]
   26718:	881b      	ldrh	r3, [r3, #0]
   2671a:	9301      	str	r3, [sp, #4]
   2671c:	2301      	movs	r3, #1
   2671e:	9300      	str	r3, [sp, #0]
   26720:	4613      	mov	r3, r2
   26722:	4632      	mov	r2, r6
   26724:	4629      	mov	r1, r5
   26726:	4620      	mov	r0, r4
   26728:	f7f0 fb04 	bl	16d34 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   2672c:	bf00      	nop
   2672e:	b006      	add	sp, #24
   26730:	bd70      	pop	{r4, r5, r6, pc}
   26732:	bf00      	nop
   26734:	1000983c 	.word	0x1000983c

00026738 <AppClearAllBondingInfo>:
 *
 *          Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppClearAllBondingInfo(void)
{
   26738:	b508      	push	{r3, lr}
  APP_TRACE_INFO0("Clear bonding info");
   2673a:	480b      	ldr	r0, [pc, #44]	; (26768 <AppClearAllBondingInfo+0x30>)
   2673c:	f7e7 f984 	bl	da48 <WsfTrace>

  /* clear bonded device info */
  AppDbDeleteAllRecords();
   26740:	f7ec ff1a 	bl	13578 <AppDbDeleteAllRecords>

  /* if LL Privacy is supported */
  if (HciLlPrivacySupported())
   26744:	f7f8 ff28 	bl	1f598 <HciLlPrivacySupported>
   26748:	4603      	mov	r3, r0
   2674a:	2b00      	cmp	r3, #0
   2674c:	d009      	beq.n	26762 <AppClearAllBondingInfo+0x2a>
  {
    /* if LL Privacy has been enabled */
    if (DmLlPrivEnabled())
   2674e:	f7f0 f857 	bl	16800 <DmLlPrivEnabled>
   26752:	4603      	mov	r3, r0
   26754:	2b00      	cmp	r3, #0
   26756:	d002      	beq.n	2675e <AppClearAllBondingInfo+0x26>
    {
      /* make sure LL Privacy is disabled before clearing resolving list */
      DmPrivSetAddrResEnable(FALSE);
   26758:	2000      	movs	r0, #0
   2675a:	f7f0 fb41 	bl	16de0 <DmPrivSetAddrResEnable>
    }

    /* clear resolving list */
    DmPrivClearResList();
   2675e:	f7f0 fb27 	bl	16db0 <DmPrivClearResList>
  }
}
   26762:	bf00      	nop
   26764:	bd08      	pop	{r3, pc}
   26766:	bf00      	nop
   26768:	0002c0e0 	.word	0x0002c0e0

0002676c <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   2676c:	b500      	push	{lr}
   2676e:	b085      	sub	sp, #20
   26770:	9001      	str	r0, [sp, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   26772:	9b01      	ldr	r3, [sp, #4]
   26774:	2b00      	cmp	r3, #0
   26776:	d020      	beq.n	267ba <AppUpdatePrivacyMode+0x4e>
   26778:	9801      	ldr	r0, [sp, #4]
   2677a:	f7ed f961 	bl	13a40 <AppDbGetPeerAddedToRl>
   2677e:	4603      	mov	r3, r0
   26780:	2b00      	cmp	r3, #0
   26782:	d01a      	beq.n	267ba <AppUpdatePrivacyMode+0x4e>
   26784:	9801      	ldr	r0, [sp, #4]
   26786:	f7ed f970 	bl	13a6a <AppDbGetPeerRpao>
   2678a:	4603      	mov	r3, r0
   2678c:	2b00      	cmp	r3, #0
   2678e:	d114      	bne.n	267ba <AppUpdatePrivacyMode+0x4e>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   26790:	2200      	movs	r2, #0
   26792:	2104      	movs	r1, #4
   26794:	9801      	ldr	r0, [sp, #4]
   26796:	f7ec ff81 	bl	1369c <AppDbGetKey>
   2679a:	9003      	str	r0, [sp, #12]
    if (pPeerKey != NULL)
   2679c:	9b03      	ldr	r3, [sp, #12]
   2679e:	2b00      	cmp	r3, #0
   267a0:	d00b      	beq.n	267ba <AppUpdatePrivacyMode+0x4e>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   267a2:	9b03      	ldr	r3, [sp, #12]
   267a4:	7d98      	ldrb	r0, [r3, #22]
   267a6:	9b03      	ldr	r3, [sp, #12]
   267a8:	3310      	adds	r3, #16
   267aa:	2201      	movs	r2, #1
   267ac:	4619      	mov	r1, r3
   267ae:	f7f0 fb39 	bl	16e24 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   267b2:	2100      	movs	r1, #0
   267b4:	9801      	ldr	r0, [sp, #4]
   267b6:	f7ed f94b 	bl	13a50 <AppDbSetPeerAddedToRl>
    }
  }
}
   267ba:	bf00      	nop
   267bc:	b005      	add	sp, #20
   267be:	f85d fb04 	ldr.w	pc, [sp], #4

000267c2 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   267c2:	b500      	push	{lr}
   267c4:	b085      	sub	sp, #20
   267c6:	4603      	mov	r3, r0
   267c8:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   267cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   267d0:	4618      	mov	r0, r3
   267d2:	f7ff ff6b 	bl	266ac <AppDbGetHdl>
   267d6:	9003      	str	r0, [sp, #12]
   267d8:	9b03      	ldr	r3, [sp, #12]
   267da:	2b00      	cmp	r3, #0
   267dc:	d019      	beq.n	26812 <appServerSetSigningInfo+0x50>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
   267de:	2200      	movs	r2, #0
   267e0:	2108      	movs	r1, #8
   267e2:	9803      	ldr	r0, [sp, #12]
   267e4:	f7ec ff5a 	bl	1369c <AppDbGetKey>
   267e8:	9002      	str	r0, [sp, #8]
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   267ea:	9b02      	ldr	r3, [sp, #8]
   267ec:	2b00      	cmp	r3, #0
   267ee:	d010      	beq.n	26812 <appServerSetSigningInfo+0x50>
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key, FALSE);
   267f0:	9902      	ldr	r1, [sp, #8]
   267f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   267f6:	2200      	movs	r2, #0
   267f8:	4618      	mov	r0, r3
   267fa:	f7eb ff93 	bl	12724 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   267fe:	9803      	ldr	r0, [sp, #12]
   26800:	f7ed f90c 	bl	13a1c <AppDbGetPeerSignCounter>
   26804:	4602      	mov	r2, r0
   26806:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2680a:	4611      	mov	r1, r2
   2680c:	4618      	mov	r0, r3
   2680e:	f7eb ffa7 	bl	12760 <AttsSetSignCounter>
  }
}
   26812:	bf00      	nop
   26814:	b005      	add	sp, #20
   26816:	f85d fb04 	ldr.w	pc, [sp], #4

0002681a <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   2681a:	b500      	push	{lr}
   2681c:	b089      	sub	sp, #36	; 0x24
   2681e:	9001      	str	r0, [sp, #4]
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   26820:	9b01      	ldr	r3, [sp, #4]
   26822:	881b      	ldrh	r3, [r3, #0]
   26824:	f88d 301e 	strb.w	r3, [sp, #30]

  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   26828:	9b01      	ldr	r3, [sp, #4]
   2682a:	789b      	ldrb	r3, [r3, #2]
   2682c:	2b27      	cmp	r3, #39	; 0x27
   2682e:	d141      	bne.n	268b4 <AppServerConnCback+0x9a>
  {
    /* apply the peer's CCC table - values are persistant across connection when bonded */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   26830:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26834:	4618      	mov	r0, r3
   26836:	f7ff ff39 	bl	266ac <AppDbGetHdl>
   2683a:	9006      	str	r0, [sp, #24]
   2683c:	9b06      	ldr	r3, [sp, #24]
   2683e:	2b00      	cmp	r3, #0
   26840:	d025      	beq.n	2688e <AppServerConnCback+0x74>
    {
      uint8_t changeAwareState;
      uint8_t *pCsf;

      AppDbGetCsfRecord(dbHdl, &changeAwareState, &pCsf);
   26842:	aa03      	add	r2, sp, #12
   26844:	f10d 0313 	add.w	r3, sp, #19
   26848:	4619      	mov	r1, r3
   2684a:	9806      	ldr	r0, [sp, #24]
   2684c:	f7ed f832 	bl	138b4 <AppDbGetCsfRecord>

      /* Apply peer's client supported features. */
      AttsCsfConnOpen(connId, changeAwareState, pCsf);
   26850:	f89d 1013 	ldrb.w	r1, [sp, #19]
   26854:	9a03      	ldr	r2, [sp, #12]
   26856:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2685a:	4618      	mov	r0, r3
   2685c:	f7e9 fbf6 	bl	1004c <AttsCsfConnOpen>

      AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   26860:	9806      	ldr	r0, [sp, #24]
   26862:	f7ed f80c 	bl	1387e <AppDbGetCccTbl>
   26866:	4602      	mov	r2, r0
   26868:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2686c:	4611      	mov	r1, r2
   2686e:	4618      	mov	r0, r3
   26870:	f7e9 f9ca 	bl	fc08 <AttsCccInitTable>

      /* If database has changed and peer configured service indications, send one now. */
      if (changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   26874:	f89d 3013 	ldrb.w	r3, [sp, #19]
   26878:	2b03      	cmp	r3, #3
   2687a:	d115      	bne.n	268a8 <AppServerConnCback+0x8e>
      {
        GattSendServiceChangedInd(connId, ATT_HANDLE_START, ATT_HANDLE_MAX);
   2687c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26880:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26884:	2101      	movs	r1, #1
   26886:	4618      	mov	r0, r3
   26888:	f7f0 fe28 	bl	174dc <GattSendServiceChangedInd>
   2688c:	e00c      	b.n	268a8 <AppServerConnCback+0x8e>
      }
    }
    else
    {
      /* set up CCC table with uninitialized (all zero) values. */
      AttsCccInitTable(connId, NULL);
   2688e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26892:	2100      	movs	r1, #0
   26894:	4618      	mov	r0, r3
   26896:	f7e9 f9b7 	bl	fc08 <AttsCccInitTable>

      /* set CSF values to default */
      AttsCsfConnOpen(connId, TRUE, NULL);
   2689a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2689e:	2200      	movs	r2, #0
   268a0:	2101      	movs	r1, #1
   268a2:	4618      	mov	r0, r3
   268a4:	f7e9 fbd2 	bl	1004c <AttsCsfConnOpen>
    }

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   268a8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   268ac:	4618      	mov	r0, r3
   268ae:	f7ff ff88 	bl	267c2 <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   268b2:	e084      	b.n	269be <AppServerConnCback+0x1a4>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   268b4:	9b01      	ldr	r3, [sp, #4]
   268b6:	789b      	ldrb	r3, [r3, #2]
   268b8:	2b2a      	cmp	r3, #42	; 0x2a
   268ba:	d164      	bne.n	26986 <AppServerConnCback+0x16c>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   268bc:	9b01      	ldr	r3, [sp, #4]
   268be:	791b      	ldrb	r3, [r3, #4]
   268c0:	f003 0301 	and.w	r3, r3, #1
   268c4:	2b00      	cmp	r3, #0
   268c6:	bf14      	ite	ne
   268c8:	2301      	movne	r3, #1
   268ca:	2300      	moveq	r3, #0
   268cc:	b2db      	uxtb	r3, r3
   268ce:	f88d 3017 	strb.w	r3, [sp, #23]
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   268d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   268d6:	2b00      	cmp	r3, #0
   268d8:	d04f      	beq.n	2697a <AppServerConnCback+0x160>
   268da:	f89d 301e 	ldrb.w	r3, [sp, #30]
   268de:	4618      	mov	r0, r3
   268e0:	f7ff fe06 	bl	264f0 <AppCheckBonded>
   268e4:	4603      	mov	r3, r0
   268e6:	2b00      	cmp	r3, #0
   268e8:	d147      	bne.n	2697a <AppServerConnCback+0x160>
        ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
   268ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
   268ee:	4618      	mov	r0, r3
   268f0:	f7ff fedc 	bl	266ac <AppDbGetHdl>
   268f4:	9006      	str	r0, [sp, #24]
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   268f6:	9b06      	ldr	r3, [sp, #24]
   268f8:	2b00      	cmp	r3, #0
   268fa:	d03e      	beq.n	2697a <AppServerConnCback+0x160>
      tableLen = AttsGetCccTableLen();
   268fc:	f7e9 fa36 	bl	fd6c <AttsGetCccTableLen>
   26900:	4603      	mov	r3, r0
   26902:	f88d 3016 	strb.w	r3, [sp, #22]
      for (idx = 0; idx < tableLen; idx++)
   26906:	2300      	movs	r3, #0
   26908:	f88d 301f 	strb.w	r3, [sp, #31]
   2690c:	e01c      	b.n	26948 <AppServerConnCback+0x12e>
        if ((cccValue = AttsCccGet(connId, idx)) != 0)
   2690e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   26912:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26916:	4611      	mov	r1, r2
   26918:	4618      	mov	r0, r3
   2691a:	f7e9 f9db 	bl	fcd4 <AttsCccGet>
   2691e:	4603      	mov	r3, r0
   26920:	f8ad 3014 	strh.w	r3, [sp, #20]
   26924:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   26928:	2b00      	cmp	r3, #0
   2692a:	d008      	beq.n	2693e <AppServerConnCback+0x124>
          AppDbSetCccTblValue(dbHdl, idx, cccValue);
   2692c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   26930:	b29b      	uxth	r3, r3
   26932:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   26936:	4619      	mov	r1, r3
   26938:	9806      	ldr	r0, [sp, #24]
   2693a:	f7ec ffa7 	bl	1388c <AppDbSetCccTblValue>
      for (idx = 0; idx < tableLen; idx++)
   2693e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   26942:	3301      	adds	r3, #1
   26944:	f88d 301f 	strb.w	r3, [sp, #31]
   26948:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2694c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   26950:	429a      	cmp	r2, r3
   26952:	d3dc      	bcc.n	2690e <AppServerConnCback+0xf4>
      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   26954:	a902      	add	r1, sp, #8
   26956:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2695a:	2201      	movs	r2, #1
   2695c:	4618      	mov	r0, r3
   2695e:	f7e9 fbf9 	bl	10154 <AttsCsfGetFeatures>
      AppDbSetCsfRecord(dbHdl, AttsCsfGetChangeAwareState(connId), csf);
   26962:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26966:	4618      	mov	r0, r3
   26968:	f7e9 fc14 	bl	10194 <AttsCsfGetChangeAwareState>
   2696c:	4603      	mov	r3, r0
   2696e:	4619      	mov	r1, r3
   26970:	ab02      	add	r3, sp, #8
   26972:	461a      	mov	r2, r3
   26974:	9806      	ldr	r0, [sp, #24]
   26976:	f7ec ffae 	bl	138d6 <AppDbSetCsfRecord>
    appServerSetSigningInfo(connId);
   2697a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2697e:	4618      	mov	r0, r3
   26980:	f7ff ff1f 	bl	267c2 <appServerSetSigningInfo>
}
   26984:	e01b      	b.n	269be <AppServerConnCback+0x1a4>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   26986:	9b01      	ldr	r3, [sp, #4]
   26988:	789b      	ldrb	r3, [r3, #2]
   2698a:	2b28      	cmp	r3, #40	; 0x28
   2698c:	d117      	bne.n	269be <AppServerConnCback+0x1a4>
    AttsCccClearTable(connId);
   2698e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26992:	4618      	mov	r0, r3
   26994:	f7e9 f988 	bl	fca8 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   26998:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2699c:	4618      	mov	r0, r3
   2699e:	f7ff fe85 	bl	266ac <AppDbGetHdl>
   269a2:	9006      	str	r0, [sp, #24]
   269a4:	9b06      	ldr	r3, [sp, #24]
   269a6:	2b00      	cmp	r3, #0
   269a8:	d009      	beq.n	269be <AppServerConnCback+0x1a4>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   269aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
   269ae:	4618      	mov	r0, r3
   269b0:	f7eb fee8 	bl	12784 <AttsGetSignCounter>
   269b4:	4603      	mov	r3, r0
   269b6:	4619      	mov	r1, r3
   269b8:	9806      	ldr	r0, [sp, #24]
   269ba:	f7ed f837 	bl	13a2c <AppDbSetPeerSignCounter>
}
   269be:	bf00      	nop
   269c0:	b009      	add	sp, #36	; 0x24
   269c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000269c8 <appServerHandleDbHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerHandleDbHashUpdate(attEvt_t *pMsg)
{
   269c8:	b500      	push	{lr}
   269ca:	b085      	sub	sp, #20
   269cc:	9001      	str	r0, [sp, #4]
  uint8_t *pCurrentHash = AppDbGetDbHash();
   269ce:	f7ec ffc5 	bl	1395c <AppDbGetDbHash>
   269d2:	9003      	str	r0, [sp, #12]

  /* Compare new hash with old. */
  if (pCurrentHash != NULL)
   269d4:	9b03      	ldr	r3, [sp, #12]
   269d6:	2b00      	cmp	r3, #0
   269d8:	d00b      	beq.n	269f2 <appServerHandleDbHashUpdate+0x2a>
  {
    if (memcmp(pMsg->pValue, pCurrentHash, ATT_DATABASE_HASH_LEN))
   269da:	9b01      	ldr	r3, [sp, #4]
   269dc:	685b      	ldr	r3, [r3, #4]
   269de:	2210      	movs	r2, #16
   269e0:	9903      	ldr	r1, [sp, #12]
   269e2:	4618      	mov	r0, r3
   269e4:	f001 fcfa 	bl	283dc <memcmp>
   269e8:	4603      	mov	r3, r0
   269ea:	2b00      	cmp	r3, #0
   269ec:	d001      	beq.n	269f2 <appServerHandleDbHashUpdate+0x2a>
    {
      /* hash has changed, set to NULL. */
      pCurrentHash = NULL;
   269ee:	2300      	movs	r3, #0
   269f0:	9303      	str	r3, [sp, #12]
    }
  }

  if (pCurrentHash == NULL)
   269f2:	9b03      	ldr	r3, [sp, #12]
   269f4:	2b00      	cmp	r3, #0
   269f6:	d115      	bne.n	26a24 <appServerHandleDbHashUpdate+0x5c>
  {
    /* Update App database. */
    AppDbSetDbHash(pMsg->pValue);
   269f8:	9b01      	ldr	r3, [sp, #4]
   269fa:	685b      	ldr	r3, [r3, #4]
   269fc:	4618      	mov	r0, r3
   269fe:	f7ec ffb3 	bl	13968 <AppDbSetDbHash>

    /* Make all bonded clients change-unaware. */
    AppDbSetClientsChangeAwareState(APP_DB_HDL_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   26a02:	2103      	movs	r1, #3
   26a04:	2000      	movs	r0, #0
   26a06:	f7ec ff7f 	bl	13908 <AppDbSetClientsChangeAwareState>

    /* Make all active clients change-unaware. */
    AttsCsfSetClientsChangeAwarenessState(DM_CONN_ID_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   26a0a:	2103      	movs	r1, #3
   26a0c:	2000      	movs	r0, #0
   26a0e:	f7e9 fad1 	bl	ffb4 <AttsCsfSetClientsChangeAwarenessState>

    APP_TRACE_INFO0("Database hash updated");
   26a12:	4806      	ldr	r0, [pc, #24]	; (26a2c <appServerHandleDbHashUpdate+0x64>)
   26a14:	f7e7 f818 	bl	da48 <WsfTrace>

    /* Send all connect clients configured to receive Service Changed Indications one now. */
    GattSendServiceChangedInd(DM_CONN_ID_NONE, ATT_HANDLE_START, ATT_HANDLE_MAX);
   26a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26a1c:	2101      	movs	r1, #1
   26a1e:	2000      	movs	r0, #0
   26a20:	f7f0 fd5c 	bl	174dc <GattSendServiceChangedInd>
  }
}
   26a24:	bf00      	nop
   26a26:	b005      	add	sp, #20
   26a28:	f85d fb04 	ldr.w	pc, [sp], #4
   26a2c:	0002c0f4 	.word	0x0002c0f4

00026a30 <appServerHandleSvcChangeCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerHandleSvcChangeCnf(attEvt_t *pMsg)
{
   26a30:	b500      	push	{lr}
   26a32:	b085      	sub	sp, #20
   26a34:	9001      	str	r0, [sp, #4]
  /* Check if this is a confirmation on the Service Changed Indication. */
  if (pMsg->handle == GATT_SC_HDL)
   26a36:	9b01      	ldr	r3, [sp, #4]
   26a38:	895b      	ldrh	r3, [r3, #10]
   26a3a:	2b12      	cmp	r3, #18
   26a3c:	d116      	bne.n	26a6c <appServerHandleSvcChangeCnf+0x3c>
  {
    appDbHdl_t  dbHdl;
    dmConnId_t  connId = (dmConnId_t)pMsg->hdr.param;
   26a3e:	9b01      	ldr	r3, [sp, #4]
   26a40:	881b      	ldrh	r3, [r3, #0]
   26a42:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   26a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26a4a:	4618      	mov	r0, r3
   26a4c:	f7ff fe2e 	bl	266ac <AppDbGetHdl>
   26a50:	9002      	str	r0, [sp, #8]
   26a52:	9b02      	ldr	r3, [sp, #8]
   26a54:	2b00      	cmp	r3, #0
   26a56:	d003      	beq.n	26a60 <appServerHandleSvcChangeCnf+0x30>
    {
      /* store update in device database */
      AppDbSetClientsChangeAwareState(dbHdl, ATTS_CLIENT_CHANGE_AWARE);
   26a58:	2100      	movs	r1, #0
   26a5a:	9802      	ldr	r0, [sp, #8]
   26a5c:	f7ec ff54 	bl	13908 <AppDbSetClientsChangeAwareState>
    }

    /* Client is now change-aware. */
    AttsCsfSetClientsChangeAwarenessState(connId, ATTS_CLIENT_CHANGE_AWARE);
   26a60:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26a64:	2100      	movs	r1, #0
   26a66:	4618      	mov	r0, r3
   26a68:	f7e9 faa4 	bl	ffb4 <AttsCsfSetClientsChangeAwarenessState>
  }
}
   26a6c:	bf00      	nop
   26a6e:	b005      	add	sp, #20
   26a70:	f85d fb04 	ldr.w	pc, [sp], #4

00026a74 <appServerCsfWriteCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerCsfWriteCback(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
   26a74:	b500      	push	{lr}
   26a76:	b085      	sub	sp, #20
   26a78:	4603      	mov	r3, r0
   26a7a:	9200      	str	r2, [sp, #0]
   26a7c:	f88d 3007 	strb.w	r3, [sp, #7]
   26a80:	460b      	mov	r3, r1
   26a82:	f88d 3006 	strb.w	r3, [sp, #6]
  appDbHdl_t dbHdl;

  if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   26a86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26a8a:	4618      	mov	r0, r3
   26a8c:	f7ff fe0e 	bl	266ac <AppDbGetHdl>
   26a90:	9003      	str	r0, [sp, #12]
   26a92:	9b03      	ldr	r3, [sp, #12]
   26a94:	2b00      	cmp	r3, #0
   26a96:	d006      	beq.n	26aa6 <appServerCsfWriteCback+0x32>
  {
    /* store update in device database */
    AppDbSetCsfRecord(dbHdl,  changeAwareState, pCsf);
   26a98:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26a9c:	9a00      	ldr	r2, [sp, #0]
   26a9e:	4619      	mov	r1, r3
   26aa0:	9803      	ldr	r0, [sp, #12]
   26aa2:	f7ec ff18 	bl	138d6 <AppDbSetCsfRecord>
  }
}
   26aa6:	bf00      	nop
   26aa8:	b005      	add	sp, #20
   26aaa:	f85d fb04 	ldr.w	pc, [sp], #4

00026aae <AppServerProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerProcAttMsg(wsfMsgHdr_t *pMsg)
{
   26aae:	b500      	push	{lr}
   26ab0:	b083      	sub	sp, #12
   26ab2:	9001      	str	r0, [sp, #4]
  switch(pMsg->event)
   26ab4:	9b01      	ldr	r3, [sp, #4]
   26ab6:	789b      	ldrb	r3, [r3, #2]
   26ab8:	2b0f      	cmp	r3, #15
   26aba:	d005      	beq.n	26ac8 <AppServerProcAttMsg+0x1a>
   26abc:	2b11      	cmp	r3, #17
   26abe:	d107      	bne.n	26ad0 <AppServerProcAttMsg+0x22>
  {
    case ATTS_DB_HASH_CALC_CMPL_IND:
      appServerHandleDbHashUpdate((attEvt_t *)pMsg);
   26ac0:	9801      	ldr	r0, [sp, #4]
   26ac2:	f7ff ff81 	bl	269c8 <appServerHandleDbHashUpdate>
      break;
   26ac6:	e004      	b.n	26ad2 <AppServerProcAttMsg+0x24>

    case ATTS_HANDLE_VALUE_CNF:
      appServerHandleSvcChangeCnf((attEvt_t *)pMsg);
   26ac8:	9801      	ldr	r0, [sp, #4]
   26aca:	f7ff ffb1 	bl	26a30 <appServerHandleSvcChangeCnf>
      break;
   26ace:	e000      	b.n	26ad2 <AppServerProcAttMsg+0x24>

    default:
      break;
   26ad0:	bf00      	nop
  }
}
   26ad2:	bf00      	nop
   26ad4:	b003      	add	sp, #12
   26ad6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00026adc <AppServerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerInit(void)
{
   26adc:	b508      	push	{r3, lr}
  /* register callback with caching state machine */
  AttsCsfRegister(appServerCsfWriteCback);
   26ade:	4802      	ldr	r0, [pc, #8]	; (26ae8 <AppServerInit+0xc>)
   26ae0:	f7e9 fae4 	bl	100ac <AttsCsfRegister>
}
   26ae4:	bf00      	nop
   26ae6:	bd08      	pop	{r3, pc}
   26ae8:	00026a75 	.word	0x00026a75

00026aec <appSlaveAdvModeInit>:
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   26aec:	4b03      	ldr	r3, [pc, #12]	; (26afc <appSlaveAdvModeInit+0x10>)
   26aee:	2200      	movs	r2, #0
   26af0:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   26af2:	4b02      	ldr	r3, [pc, #8]	; (26afc <appSlaveAdvModeInit+0x10>)
   26af4:	2200      	movs	r2, #0
   26af6:	645a      	str	r2, [r3, #68]	; 0x44
}
   26af8:	bf00      	nop
   26afa:	4770      	bx	lr
   26afc:	1000989c 	.word	0x1000989c

00026b00 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   26b00:	b084      	sub	sp, #16
   26b02:	4603      	mov	r3, r0
   26b04:	9100      	str	r1, [sp, #0]
   26b06:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   26b0a:	2300      	movs	r3, #0
   26b0c:	f88d 300f 	strb.w	r3, [sp, #15]
   26b10:	e034      	b.n	26b7c <appSlaveConnectableAdv+0x7c>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   26b12:	2300      	movs	r3, #0
   26b14:	f88d 300e 	strb.w	r3, [sp, #14]
   26b18:	e027      	b.n	26b6a <appSlaveConnectableAdv+0x6a>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                                  &&
   26b1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26b1e:	9a00      	ldr	r2, [sp, #0]
   26b20:	4413      	add	r3, r2
   26b22:	781b      	ldrb	r3, [r3, #0]
   26b24:	f89d 200e 	ldrb.w	r2, [sp, #14]
   26b28:	429a      	cmp	r2, r3
   26b2a:	d119      	bne.n	26b60 <appSlaveConnectableAdv+0x60>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   26b2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26b30:	4a17      	ldr	r2, [pc, #92]	; (26b90 <appSlaveConnectableAdv+0x90>)
   26b32:	4413      	add	r3, r2
   26b34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                                  &&
   26b38:	2b00      	cmp	r3, #0
   26b3a:	d00f      	beq.n	26b5c <appSlaveConnectableAdv+0x5c>
           (appSlaveCb.advType[j] == DM_ADV_CONN_DIRECT_LO_DUTY) ||
   26b3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26b40:	4a13      	ldr	r2, [pc, #76]	; (26b90 <appSlaveConnectableAdv+0x90>)
   26b42:	4413      	add	r3, r2
   26b44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   26b48:	2b04      	cmp	r3, #4
   26b4a:	d007      	beq.n	26b5c <appSlaveConnectableAdv+0x5c>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   26b4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26b50:	4a0f      	ldr	r2, [pc, #60]	; (26b90 <appSlaveConnectableAdv+0x90>)
   26b52:	4413      	add	r3, r2
   26b54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
           (appSlaveCb.advType[j] == DM_ADV_CONN_DIRECT_LO_DUTY) ||
   26b58:	2b05      	cmp	r3, #5
   26b5a:	d101      	bne.n	26b60 <appSlaveConnectableAdv+0x60>
      {
        return TRUE;
   26b5c:	2301      	movs	r3, #1
   26b5e:	e014      	b.n	26b8a <appSlaveConnectableAdv+0x8a>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   26b60:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26b64:	3301      	adds	r3, #1
   26b66:	f88d 300e 	strb.w	r3, [sp, #14]
   26b6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26b6e:	2b00      	cmp	r3, #0
   26b70:	d0d3      	beq.n	26b1a <appSlaveConnectableAdv+0x1a>
  for (i = 0; i < numSets; i++)
   26b72:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26b76:	3301      	adds	r3, #1
   26b78:	f88d 300f 	strb.w	r3, [sp, #15]
   26b7c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26b84:	429a      	cmp	r2, r3
   26b86:	d3c4      	bcc.n	26b12 <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   26b88:	2300      	movs	r3, #0
}
   26b8a:	4618      	mov	r0, r3
   26b8c:	b004      	add	sp, #16
   26b8e:	4770      	bx	lr
   26b90:	1000989c 	.word	0x1000989c

00026b94 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   26b94:	b084      	sub	sp, #16
   26b96:	4603      	mov	r3, r0
   26b98:	460a      	mov	r2, r1
   26b9a:	f88d 3007 	strb.w	r3, [sp, #7]
   26b9e:	4613      	mov	r3, r2
   26ba0:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   26ba4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26ba8:	005b      	lsls	r3, r3, #1
   26baa:	f88d 300f 	strb.w	r3, [sp, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   26bae:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26bb2:	005b      	lsls	r3, r3, #1
   26bb4:	b2db      	uxtb	r3, r3
   26bb6:	3301      	adds	r3, #1
   26bb8:	f88d 300e 	strb.w	r3, [sp, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   26bbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26bc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26bc4:	490d      	ldr	r1, [pc, #52]	; (26bfc <appSlaveForceAdvDataSync+0x68>)
   26bc6:	0092      	lsls	r2, r2, #2
   26bc8:	4413      	add	r3, r2
   26bca:	3310      	adds	r3, #16
   26bcc:	2200      	movs	r2, #0
   26bce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   26bd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26bd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26bda:	4908      	ldr	r1, [pc, #32]	; (26bfc <appSlaveForceAdvDataSync+0x68>)
   26bdc:	0092      	lsls	r2, r2, #2
   26bde:	4413      	add	r3, r2
   26be0:	3310      	adds	r3, #16
   26be2:	2200      	movs	r2, #0
   26be4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   26be8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26bec:	4a03      	ldr	r2, [pc, #12]	; (26bfc <appSlaveForceAdvDataSync+0x68>)
   26bee:	4413      	add	r3, r2
   26bf0:	2200      	movs	r2, #0
   26bf2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   26bf6:	bf00      	nop
   26bf8:	b004      	add	sp, #16
   26bfa:	4770      	bx	lr
   26bfc:	1000989c 	.word	0x1000989c

00026c00 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   26c00:	b530      	push	{r4, r5, lr}
   26c02:	b089      	sub	sp, #36	; 0x24
   26c04:	4603      	mov	r3, r0
   26c06:	460a      	mov	r2, r1
   26c08:	f88d 300f 	strb.w	r3, [sp, #15]
   26c0c:	4613      	mov	r3, r2
   26c0e:	f88d 300e 	strb.w	r3, [sp, #14]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   26c12:	2301      	movs	r3, #1
   26c14:	f88d 3019 	strb.w	r3, [sp, #25]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   26c18:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26c1c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26c20:	494b      	ldr	r1, [pc, #300]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26c22:	0092      	lsls	r2, r2, #2
   26c24:	4413      	add	r3, r2
   26c26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   26c2a:	9305      	str	r3, [sp, #20]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   26c2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26c30:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26c34:	4946      	ldr	r1, [pc, #280]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26c36:	0092      	lsls	r2, r2, #2
   26c38:	4413      	add	r3, r2
   26c3a:	3308      	adds	r3, #8
   26c3c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   26c40:	f89d 100f 	ldrb.w	r1, [sp, #15]
   26c44:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26c48:	4841      	ldr	r0, [pc, #260]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26c4a:	0089      	lsls	r1, r1, #2
   26c4c:	440b      	add	r3, r1
   26c4e:	3310      	adds	r3, #16
   26c50:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   26c54:	1ad3      	subs	r3, r2, r3
   26c56:	f8ad 301a 	strh.w	r3, [sp, #26]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   26c5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26c5e:	4a3c      	ldr	r2, [pc, #240]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26c60:	3314      	adds	r3, #20
   26c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   26c66:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   26c6a:	429a      	cmp	r2, r3
   26c6c:	d967      	bls.n	26d3e <appSetAdvScanDataFrag+0x13e>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   26c6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26c72:	4a37      	ldr	r2, [pc, #220]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26c74:	3314      	adds	r3, #20
   26c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   26c7a:	f8ad 301a 	strh.w	r3, [sp, #26]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   26c7e:	e05e      	b.n	26d3e <appSetAdvScanDataFrag+0x13e>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   26c80:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   26c84:	2bfb      	cmp	r3, #251	; 0xfb
   26c86:	d90c      	bls.n	26ca2 <appSetAdvScanDataFrag+0xa2>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   26c88:	23fb      	movs	r3, #251	; 0xfb
   26c8a:	f8ad 301c 	strh.w	r3, [sp, #28]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   26c8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   26c92:	2b00      	cmp	r3, #0
   26c94:	bf14      	ite	ne
   26c96:	2301      	movne	r3, #1
   26c98:	2300      	moveq	r3, #0
   26c9a:	b2db      	uxtb	r3, r3
   26c9c:	f88d 301f 	strb.w	r3, [sp, #31]
   26ca0:	e00c      	b.n	26cbc <appSetAdvScanDataFrag+0xbc>

    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   26ca2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   26ca6:	f8ad 301c 	strh.w	r3, [sp, #28]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   26caa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   26cae:	2b00      	cmp	r3, #0
   26cb0:	d001      	beq.n	26cb6 <appSetAdvScanDataFrag+0xb6>
   26cb2:	2303      	movs	r3, #3
   26cb4:	e000      	b.n	26cb8 <appSetAdvScanDataFrag+0xb8>
   26cb6:	2302      	movs	r3, #2
   26cb8:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   26cbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26cc0:	f003 0301 	and.w	r3, r3, #1
   26cc4:	b2dc      	uxtb	r4, r3
   26cc6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   26cca:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   26ccc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26cd0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26cd4:	491e      	ldr	r1, [pc, #120]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26cd6:	0092      	lsls	r2, r2, #2
   26cd8:	4413      	add	r3, r2
   26cda:	3310      	adds	r3, #16
   26cdc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   26ce0:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   26ce2:	9b05      	ldr	r3, [sp, #20]
   26ce4:	4413      	add	r3, r2
   26ce6:	f89d 101f 	ldrb.w	r1, [sp, #31]
   26cea:	f89d 000f 	ldrb.w	r0, [sp, #15]
   26cee:	9300      	str	r3, [sp, #0]
   26cf0:	462b      	mov	r3, r5
   26cf2:	4622      	mov	r2, r4
   26cf4:	f7ed fd88 	bl	14808 <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   26cf8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26cfc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26d00:	4913      	ldr	r1, [pc, #76]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26d02:	0092      	lsls	r2, r2, #2
   26d04:	4413      	add	r3, r2
   26d06:	3310      	adds	r3, #16
   26d08:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   26d0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26d10:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26d14:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   26d18:	4401      	add	r1, r0
   26d1a:	b288      	uxth	r0, r1
   26d1c:	490c      	ldr	r1, [pc, #48]	; (26d50 <appSetAdvScanDataFrag+0x150>)
   26d1e:	0092      	lsls	r2, r2, #2
   26d20:	4413      	add	r3, r2
   26d22:	3310      	adds	r3, #16
   26d24:	4602      	mov	r2, r0
   26d26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   26d2a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   26d2e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   26d32:	1ad3      	subs	r3, r2, r3
   26d34:	f8ad 301a 	strh.w	r3, [sp, #26]
    firstFrag = FALSE;
   26d38:	2300      	movs	r3, #0
   26d3a:	f88d 3019 	strb.w	r3, [sp, #25]
  while (remainLen > 0)
   26d3e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   26d42:	2b00      	cmp	r3, #0
   26d44:	d19c      	bne.n	26c80 <appSetAdvScanDataFrag+0x80>
  }
}
   26d46:	bf00      	nop
   26d48:	bf00      	nop
   26d4a:	b009      	add	sp, #36	; 0x24
   26d4c:	bd30      	pop	{r4, r5, pc}
   26d4e:	bf00      	nop
   26d50:	1000989c 	.word	0x1000989c

00026d54 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   26d54:	b500      	push	{lr}
   26d56:	b085      	sub	sp, #20
   26d58:	4603      	mov	r3, r0
   26d5a:	460a      	mov	r2, r1
   26d5c:	f88d 3007 	strb.w	r3, [sp, #7]
   26d60:	4613      	mov	r3, r2
   26d62:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   26d66:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26d6a:	005b      	lsls	r3, r3, #1
   26d6c:	f88d 300f 	strb.w	r3, [sp, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   26d70:	f89d 3006 	ldrb.w	r3, [sp, #6]
   26d74:	005b      	lsls	r3, r3, #1
   26d76:	b2db      	uxtb	r3, r3
   26d78:	3301      	adds	r3, #1
   26d7a:	f88d 300e 	strb.w	r3, [sp, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   26d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26d82:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26d86:	4937      	ldr	r1, [pc, #220]	; (26e64 <appSetAdvScanData+0x110>)
   26d88:	0092      	lsls	r2, r2, #2
   26d8a:	4413      	add	r3, r2
   26d8c:	3310      	adds	r3, #16
   26d8e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   26d92:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26d96:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26d9a:	4832      	ldr	r0, [pc, #200]	; (26e64 <appSetAdvScanData+0x110>)
   26d9c:	0089      	lsls	r1, r1, #2
   26d9e:	440b      	add	r3, r1
   26da0:	3308      	adds	r3, #8
   26da2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   26da6:	429a      	cmp	r2, r3
   26da8:	d207      	bcs.n	26dba <appSetAdvScanData+0x66>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   26daa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26dae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26db2:	4611      	mov	r1, r2
   26db4:	4618      	mov	r0, r3
   26db6:	f7ff ff23 	bl	26c00 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   26dba:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26dc2:	4928      	ldr	r1, [pc, #160]	; (26e64 <appSetAdvScanData+0x110>)
   26dc4:	0092      	lsls	r2, r2, #2
   26dc6:	4413      	add	r3, r2
   26dc8:	3310      	adds	r3, #16
   26dca:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   26dce:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26dd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26dd6:	4823      	ldr	r0, [pc, #140]	; (26e64 <appSetAdvScanData+0x110>)
   26dd8:	0089      	lsls	r1, r1, #2
   26dda:	440b      	add	r3, r1
   26ddc:	3308      	adds	r3, #8
   26dde:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   26de2:	429a      	cmp	r2, r3
   26de4:	d207      	bcs.n	26df6 <appSetAdvScanData+0xa2>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   26de6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   26dea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26dee:	4611      	mov	r1, r2
   26df0:	4618      	mov	r0, r3
   26df2:	f7ff ff05 	bl	26c00 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   26df6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26dfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26dfe:	4919      	ldr	r1, [pc, #100]	; (26e64 <appSetAdvScanData+0x110>)
   26e00:	0092      	lsls	r2, r2, #2
   26e02:	4413      	add	r3, r2
   26e04:	3310      	adds	r3, #16
   26e06:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   26e0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26e0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26e12:	4814      	ldr	r0, [pc, #80]	; (26e64 <appSetAdvScanData+0x110>)
   26e14:	0089      	lsls	r1, r1, #2
   26e16:	440b      	add	r3, r1
   26e18:	3308      	adds	r3, #8
   26e1a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   26e1e:	429a      	cmp	r2, r3
   26e20:	d31c      	bcc.n	26e5c <appSetAdvScanData+0x108>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   26e22:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26e26:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26e2a:	490e      	ldr	r1, [pc, #56]	; (26e64 <appSetAdvScanData+0x110>)
   26e2c:	0092      	lsls	r2, r2, #2
   26e2e:	4413      	add	r3, r2
   26e30:	3310      	adds	r3, #16
   26e32:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   26e36:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26e3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26e3e:	4809      	ldr	r0, [pc, #36]	; (26e64 <appSetAdvScanData+0x110>)
   26e40:	0089      	lsls	r1, r1, #2
   26e42:	440b      	add	r3, r1
   26e44:	3308      	adds	r3, #8
   26e46:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   26e4a:	429a      	cmp	r2, r3
   26e4c:	d306      	bcc.n	26e5c <appSetAdvScanData+0x108>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   26e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26e52:	4a04      	ldr	r2, [pc, #16]	; (26e64 <appSetAdvScanData+0x110>)
   26e54:	4413      	add	r3, r2
   26e56:	2201      	movs	r2, #1
   26e58:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   26e5c:	bf00      	nop
   26e5e:	b005      	add	sp, #20
   26e60:	f85d fb04 	ldr.w	pc, [sp], #4
   26e64:	1000989c 	.word	0x1000989c

00026e68 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   26e68:	b500      	push	{lr}
   26e6a:	b085      	sub	sp, #20
   26e6c:	4603      	mov	r3, r0
   26e6e:	f88d 3007 	strb.w	r3, [sp, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   26e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26e76:	3b01      	subs	r3, #1
   26e78:	015b      	lsls	r3, r3, #5
   26e7a:	4a0e      	ldr	r2, [pc, #56]	; (26eb4 <appConnUpdateTimerStart+0x4c>)
   26e7c:	4413      	add	r3, r2
   26e7e:	9303      	str	r3, [sp, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   26e80:	4b0d      	ldr	r3, [pc, #52]	; (26eb8 <appConnUpdateTimerStart+0x50>)
   26e82:	781a      	ldrb	r2, [r3, #0]
   26e84:	9b03      	ldr	r3, [sp, #12]
   26e86:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   26e88:	9b03      	ldr	r3, [sp, #12]
   26e8a:	2210      	movs	r2, #16
   26e8c:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   26e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26e92:	b29a      	uxth	r2, r3
   26e94:	9b03      	ldr	r3, [sp, #12]
   26e96:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   26e98:	9b03      	ldr	r3, [sp, #12]
   26e9a:	f103 0210 	add.w	r2, r3, #16
   26e9e:	4b07      	ldr	r3, [pc, #28]	; (26ebc <appConnUpdateTimerStart+0x54>)
   26ea0:	681b      	ldr	r3, [r3, #0]
   26ea2:	681b      	ldr	r3, [r3, #0]
   26ea4:	4619      	mov	r1, r3
   26ea6:	4610      	mov	r0, r2
   26ea8:	f7e6 fcf6 	bl	d898 <WsfTimerStartMs>
}
   26eac:	bf00      	nop
   26eae:	b005      	add	sp, #20
   26eb0:	f85d fb04 	ldr.w	pc, [sp], #4
   26eb4:	1000983c 	.word	0x1000983c
   26eb8:	10009828 	.word	0x10009828
   26ebc:	10009810 	.word	0x10009810

00026ec0 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   26ec0:	b500      	push	{lr}
   26ec2:	b083      	sub	sp, #12
   26ec4:	9001      	str	r0, [sp, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   26ec6:	4b07      	ldr	r3, [pc, #28]	; (26ee4 <appConnUpdateTimerStop+0x24>)
   26ec8:	681b      	ldr	r3, [r3, #0]
   26eca:	681b      	ldr	r3, [r3, #0]
   26ecc:	2b00      	cmp	r3, #0
   26ece:	d004      	beq.n	26eda <appConnUpdateTimerStop+0x1a>
  {
    WsfTimerStop(&pCb->updateTimer);
   26ed0:	9b01      	ldr	r3, [sp, #4]
   26ed2:	3310      	adds	r3, #16
   26ed4:	4618      	mov	r0, r3
   26ed6:	f7e6 fcf3 	bl	d8c0 <WsfTimerStop>
  }
}
   26eda:	bf00      	nop
   26edc:	b003      	add	sp, #12
   26ede:	f85d fb04 	ldr.w	pc, [sp], #4
   26ee2:	bf00      	nop
   26ee4:	10009810 	.word	0x10009810

00026ee8 <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   26ee8:	b500      	push	{lr}
   26eea:	b085      	sub	sp, #20
   26eec:	9001      	str	r0, [sp, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   26eee:	4b17      	ldr	r3, [pc, #92]	; (26f4c <appSlaveResolveAddr+0x64>)
   26ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   26ef4:	2b00      	cmp	r3, #0
   26ef6:	d124      	bne.n	26f42 <appSlaveResolveAddr+0x5a>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   26ef8:	2000      	movs	r0, #0
   26efa:	f7ec fa8f 	bl	1341c <AppDbGetNextRecord>
   26efe:	9003      	str	r0, [sp, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   26f00:	9b03      	ldr	r3, [sp, #12]
   26f02:	2b00      	cmp	r3, #0
   26f04:	d01e      	beq.n	26f44 <appSlaveResolveAddr+0x5c>
   26f06:	2200      	movs	r2, #0
   26f08:	2104      	movs	r1, #4
   26f0a:	9803      	ldr	r0, [sp, #12]
   26f0c:	f7ec fbc6 	bl	1369c <AppDbGetKey>
   26f10:	9002      	str	r0, [sp, #8]
   26f12:	9b02      	ldr	r3, [sp, #8]
   26f14:	2b00      	cmp	r3, #0
   26f16:	d015      	beq.n	26f44 <appSlaveResolveAddr+0x5c>
  {
    /* resolve advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   26f18:	9b01      	ldr	r3, [sp, #4]
   26f1a:	f103 000a 	add.w	r0, r3, #10
   26f1e:	9902      	ldr	r1, [sp, #8]
   26f20:	9b01      	ldr	r3, [sp, #4]
   26f22:	881b      	ldrh	r3, [r3, #0]
   26f24:	461a      	mov	r2, r3
   26f26:	f7ef fed7 	bl	16cd8 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   26f2a:	4a08      	ldr	r2, [pc, #32]	; (26f4c <appSlaveResolveAddr+0x64>)
   26f2c:	9b03      	ldr	r3, [sp, #12]
   26f2e:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   26f30:	4b06      	ldr	r3, [pc, #24]	; (26f4c <appSlaveResolveAddr+0x64>)
   26f32:	2201      	movs	r2, #1
   26f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   26f38:	4b04      	ldr	r3, [pc, #16]	; (26f4c <appSlaveResolveAddr+0x64>)
   26f3a:	2200      	movs	r2, #0
   26f3c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   26f40:	e000      	b.n	26f44 <appSlaveResolveAddr+0x5c>
    return;
   26f42:	bf00      	nop
  }
}
   26f44:	b005      	add	sp, #20
   26f46:	f85d fb04 	ldr.w	pc, [sp], #4
   26f4a:	bf00      	nop
   26f4c:	1000989c 	.word	0x1000989c

00026f50 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   26f50:	b500      	push	{lr}
   26f52:	b085      	sub	sp, #20
   26f54:	9001      	str	r0, [sp, #4]
  dmSecKey_t  *pKey = NULL;
   26f56:	2300      	movs	r3, #0
   26f58:	9303      	str	r3, [sp, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   26f5a:	9b01      	ldr	r3, [sp, #4]
   26f5c:	681b      	ldr	r3, [r3, #0]
   26f5e:	2b00      	cmp	r3, #0
   26f60:	d008      	beq.n	26f74 <appSecRspLtk+0x24>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   26f62:	9b01      	ldr	r3, [sp, #4]
   26f64:	681b      	ldr	r3, [r3, #0]
   26f66:	f10d 020b 	add.w	r2, sp, #11
   26f6a:	2101      	movs	r1, #1
   26f6c:	4618      	mov	r0, r3
   26f6e:	f7ec fb95 	bl	1369c <AppDbGetKey>
   26f72:	9003      	str	r0, [sp, #12]
  }

  if (pKey != NULL)
   26f74:	9b03      	ldr	r3, [sp, #12]
   26f76:	2b00      	cmp	r3, #0
   26f78:	d012      	beq.n	26fa0 <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   26f7a:	9b01      	ldr	r3, [sp, #4]
   26f7c:	795b      	ldrb	r3, [r3, #5]
   26f7e:	2b00      	cmp	r3, #0
   26f80:	bf0c      	ite	eq
   26f82:	2301      	moveq	r3, #1
   26f84:	2300      	movne	r3, #0
   26f86:	b2db      	uxtb	r3, r3
   26f88:	461a      	mov	r2, r3
   26f8a:	9b01      	ldr	r3, [sp, #4]
   26f8c:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   26f8e:	9b01      	ldr	r3, [sp, #4]
   26f90:	7918      	ldrb	r0, [r3, #4]
   26f92:	f89d 200b 	ldrb.w	r2, [sp, #11]
   26f96:	9b03      	ldr	r3, [sp, #12]
   26f98:	2101      	movs	r1, #1
   26f9a:	f7f0 fa21 	bl	173e0 <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   26f9e:	e009      	b.n	26fb4 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   26fa0:	9b01      	ldr	r3, [sp, #4]
   26fa2:	2200      	movs	r2, #0
   26fa4:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   26fa6:	9b01      	ldr	r3, [sp, #4]
   26fa8:	7918      	ldrb	r0, [r3, #4]
   26faa:	2300      	movs	r3, #0
   26fac:	2200      	movs	r2, #0
   26fae:	2100      	movs	r1, #0
   26fb0:	f7f0 fa16 	bl	173e0 <DmSecLtkRsp>
}
   26fb4:	bf00      	nop
   26fb6:	b005      	add	sp, #20
   26fb8:	f85d fb04 	ldr.w	pc, [sp], #4

00026fbc <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   26fbc:	b500      	push	{lr}
   26fbe:	b083      	sub	sp, #12
   26fc0:	9001      	str	r0, [sp, #4]
   26fc2:	9100      	str	r1, [sp, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   26fc4:	9900      	ldr	r1, [sp, #0]
   26fc6:	9801      	ldr	r0, [sp, #4]
   26fc8:	f000 f830 	bl	2702c <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   26fcc:	4b08      	ldr	r3, [pc, #32]	; (26ff0 <appSlaveConnOpen+0x34>)
   26fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   26fd0:	2b00      	cmp	r3, #0
   26fd2:	d003      	beq.n	26fdc <appSlaveConnOpen+0x20>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   26fd4:	4b06      	ldr	r3, [pc, #24]	; (26ff0 <appSlaveConnOpen+0x34>)
   26fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   26fd8:	9801      	ldr	r0, [sp, #4]
   26fda:	4798      	blx	r3
  }

  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   26fdc:	9b01      	ldr	r3, [sp, #4]
   26fde:	881b      	ldrh	r3, [r3, #0]
   26fe0:	b2db      	uxtb	r3, r3
   26fe2:	4618      	mov	r0, r3
   26fe4:	f7ee fdbc 	bl	15b60 <DmReadRemoteFeatures>
}
   26fe8:	bf00      	nop
   26fea:	b003      	add	sp, #12
   26fec:	f85d fb04 	ldr.w	pc, [sp], #4
   26ff0:	1000989c 	.word	0x1000989c

00026ff4 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   26ff4:	b500      	push	{lr}
   26ff6:	b083      	sub	sp, #12
   26ff8:	9001      	str	r0, [sp, #4]
   26ffa:	9100      	str	r1, [sp, #0]
  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   26ffc:	9b00      	ldr	r3, [sp, #0]
   26ffe:	681b      	ldr	r3, [r3, #0]
   27000:	4618      	mov	r0, r3
   27002:	f7ff fbb3 	bl	2676c <AppUpdatePrivacyMode>

  /* process connection close event */
  appSlaveProcConnClose(pMsg, pCb);
   27006:	9900      	ldr	r1, [sp, #0]
   27008:	9801      	ldr	r0, [sp, #4]
   2700a:	f000 f84b 	bl	270a4 <appSlaveProcConnClose>

  if (appSlaveCb.advRestartCback != NULL)
   2700e:	4b06      	ldr	r3, [pc, #24]	; (27028 <appSlaveConnClose+0x34>)
   27010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   27012:	2b00      	cmp	r3, #0
   27014:	d003      	beq.n	2701e <appSlaveConnClose+0x2a>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   27016:	4b04      	ldr	r3, [pc, #16]	; (27028 <appSlaveConnClose+0x34>)
   27018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2701a:	9801      	ldr	r0, [sp, #4]
   2701c:	4798      	blx	r3
  }
}
   2701e:	bf00      	nop
   27020:	b003      	add	sp, #12
   27022:	f85d fb04 	ldr.w	pc, [sp], #4
   27026:	bf00      	nop
   27028:	1000989c 	.word	0x1000989c

0002702c <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   2702c:	b500      	push	{lr}
   2702e:	b083      	sub	sp, #12
   27030:	9001      	str	r0, [sp, #4]
   27032:	9100      	str	r1, [sp, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   27034:	9b01      	ldr	r3, [sp, #4]
   27036:	881b      	ldrh	r3, [r3, #0]
   27038:	b2da      	uxtb	r2, r3
   2703a:	9b00      	ldr	r3, [sp, #0]
   2703c:	711a      	strb	r2, [r3, #4]

  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   2703e:	4b18      	ldr	r3, [pc, #96]	; (270a0 <appSlaveProcConnOpen+0x74>)
   27040:	681b      	ldr	r3, [r3, #0]
   27042:	681b      	ldr	r3, [r3, #0]
   27044:	2b00      	cmp	r3, #0
   27046:	d026      	beq.n	27096 <appSlaveProcConnOpen+0x6a>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   27048:	9b01      	ldr	r3, [sp, #4]
   2704a:	8a1a      	ldrh	r2, [r3, #16]
   2704c:	4b14      	ldr	r3, [pc, #80]	; (270a0 <appSlaveProcConnOpen+0x74>)
   2704e:	681b      	ldr	r3, [r3, #0]
   27050:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   27052:	429a      	cmp	r2, r3
   27054:	d314      	bcc.n	27080 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   27056:	9b01      	ldr	r3, [sp, #4]
   27058:	8a1a      	ldrh	r2, [r3, #16]
   2705a:	4b11      	ldr	r3, [pc, #68]	; (270a0 <appSlaveProcConnOpen+0x74>)
   2705c:	681b      	ldr	r3, [r3, #0]
   2705e:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   27060:	429a      	cmp	r2, r3
   27062:	d80d      	bhi.n	27080 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   27064:	9b01      	ldr	r3, [sp, #4]
   27066:	8a5a      	ldrh	r2, [r3, #18]
   27068:	4b0d      	ldr	r3, [pc, #52]	; (270a0 <appSlaveProcConnOpen+0x74>)
   2706a:	681b      	ldr	r3, [r3, #0]
   2706c:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   2706e:	429a      	cmp	r2, r3
   27070:	d106      	bne.n	27080 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   27072:	9b01      	ldr	r3, [sp, #4]
   27074:	8a9a      	ldrh	r2, [r3, #20]
   27076:	4b0a      	ldr	r3, [pc, #40]	; (270a0 <appSlaveProcConnOpen+0x74>)
   27078:	681b      	ldr	r3, [r3, #0]
   2707a:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   2707c:	429a      	cmp	r2, r3
   2707e:	d00a      	beq.n	27096 <appSlaveProcConnOpen+0x6a>
  {
    pCb->connWasIdle = FALSE;
   27080:	9b00      	ldr	r3, [sp, #0]
   27082:	2200      	movs	r2, #0
   27084:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   27086:	9b00      	ldr	r3, [sp, #0]
   27088:	2200      	movs	r2, #0
   2708a:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   2708c:	9b00      	ldr	r3, [sp, #0]
   2708e:	791b      	ldrb	r3, [r3, #4]
   27090:	4618      	mov	r0, r3
   27092:	f7ff fee9 	bl	26e68 <appConnUpdateTimerStart>
  }
}
   27096:	bf00      	nop
   27098:	b003      	add	sp, #12
   2709a:	f85d fb04 	ldr.w	pc, [sp], #4
   2709e:	bf00      	nop
   270a0:	10009810 	.word	0x10009810

000270a4 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   270a4:	b500      	push	{lr}
   270a6:	b085      	sub	sp, #20
   270a8:	9001      	str	r0, [sp, #4]
   270aa:	9100      	str	r1, [sp, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   270ac:	9800      	ldr	r0, [sp, #0]
   270ae:	f7ff ff07 	bl	26ec0 <appConnUpdateTimerStop>

  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   270b2:	9b00      	ldr	r3, [sp, #0]
   270b4:	2200      	movs	r2, #0
   270b6:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   270b8:	9b00      	ldr	r3, [sp, #0]
   270ba:	2200      	movs	r2, #0
   270bc:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   270be:	4b13      	ldr	r3, [pc, #76]	; (2710c <appSlaveProcConnClose+0x68>)
   270c0:	2200      	movs	r2, #0
   270c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   270c6:	9b00      	ldr	r3, [sp, #0]
   270c8:	7a5b      	ldrb	r3, [r3, #9]
   270ca:	2b00      	cmp	r3, #0
   270cc:	d019      	beq.n	27102 <appSlaveProcConnClose+0x5e>
  {
    pCb->setConnectable = FALSE;
   270ce:	9b00      	ldr	r3, [sp, #0]
   270d0:	2200      	movs	r2, #0
   270d2:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   270d4:	4b0d      	ldr	r3, [pc, #52]	; (2710c <appSlaveProcConnClose+0x68>)
   270d6:	2200      	movs	r2, #0
   270d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   270dc:	2300      	movs	r3, #0
   270de:	f88d 300f 	strb.w	r3, [sp, #15]
   270e2:	e00a      	b.n	270fa <appSlaveProcConnClose+0x56>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   270e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   270e8:	2100      	movs	r1, #0
   270ea:	4618      	mov	r0, r3
   270ec:	f7ff fd52 	bl	26b94 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   270f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   270f4:	3301      	adds	r3, #1
   270f6:	f88d 300f 	strb.w	r3, [sp, #15]
   270fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   270fe:	2b00      	cmp	r3, #0
   27100:	d0f0      	beq.n	270e4 <appSlaveProcConnClose+0x40>
    }
  }
}
   27102:	bf00      	nop
   27104:	b005      	add	sp, #20
   27106:	f85d fb04 	ldr.w	pc, [sp], #4
   2710a:	bf00      	nop
   2710c:	1000989c 	.word	0x1000989c

00027110 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27110:	b500      	push	{lr}
   27112:	b083      	sub	sp, #12
   27114:	9001      	str	r0, [sp, #4]
   27116:	9100      	str	r1, [sp, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   27118:	4b1a      	ldr	r3, [pc, #104]	; (27184 <appSlaveConnUpdate+0x74>)
   2711a:	681b      	ldr	r3, [r3, #0]
   2711c:	681b      	ldr	r3, [r3, #0]
   2711e:	2b00      	cmp	r3, #0
   27120:	d02b      	beq.n	2717a <appSlaveConnUpdate+0x6a>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   27122:	9b01      	ldr	r3, [sp, #4]
   27124:	78db      	ldrb	r3, [r3, #3]
   27126:	2b00      	cmp	r3, #0
   27128:	d117      	bne.n	2715a <appSlaveConnUpdate+0x4a>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   2712a:	4b16      	ldr	r3, [pc, #88]	; (27184 <appSlaveConnUpdate+0x74>)
   2712c:	681b      	ldr	r3, [r3, #0]
   2712e:	889a      	ldrh	r2, [r3, #4]
   27130:	9b01      	ldr	r3, [sp, #4]
   27132:	891b      	ldrh	r3, [r3, #8]
   27134:	429a      	cmp	r2, r3
   27136:	d80a      	bhi.n	2714e <appSlaveConnUpdate+0x3e>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   27138:	4b12      	ldr	r3, [pc, #72]	; (27184 <appSlaveConnUpdate+0x74>)
   2713a:	681b      	ldr	r3, [r3, #0]
   2713c:	88da      	ldrh	r2, [r3, #6]
   2713e:	9b01      	ldr	r3, [sp, #4]
   27140:	891b      	ldrh	r3, [r3, #8]
   27142:	429a      	cmp	r2, r3
   27144:	d303      	bcc.n	2714e <appSlaveConnUpdate+0x3e>
      {
        appConnUpdateTimerStop(pCb);
   27146:	9800      	ldr	r0, [sp, #0]
   27148:	f7ff feba 	bl	26ec0 <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   2714c:	e015      	b.n	2717a <appSlaveConnUpdate+0x6a>
        appConnUpdateTimerStart(pCb->connId);
   2714e:	9b00      	ldr	r3, [sp, #0]
   27150:	791b      	ldrb	r3, [r3, #4]
   27152:	4618      	mov	r0, r3
   27154:	f7ff fe88 	bl	26e68 <appConnUpdateTimerStart>
}
   27158:	e00f      	b.n	2717a <appSlaveConnUpdate+0x6a>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   2715a:	9b01      	ldr	r3, [sp, #4]
   2715c:	78db      	ldrb	r3, [r3, #3]
   2715e:	2b0c      	cmp	r3, #12
   27160:	d00b      	beq.n	2717a <appSlaveConnUpdate+0x6a>
   27162:	9b00      	ldr	r3, [sp, #0]
   27164:	7b1a      	ldrb	r2, [r3, #12]
   27166:	4b07      	ldr	r3, [pc, #28]	; (27184 <appSlaveConnUpdate+0x74>)
   27168:	681b      	ldr	r3, [r3, #0]
   2716a:	7b1b      	ldrb	r3, [r3, #12]
   2716c:	429a      	cmp	r2, r3
   2716e:	d204      	bcs.n	2717a <appSlaveConnUpdate+0x6a>
      appConnUpdateTimerStart(pCb->connId);
   27170:	9b00      	ldr	r3, [sp, #0]
   27172:	791b      	ldrb	r3, [r3, #4]
   27174:	4618      	mov	r0, r3
   27176:	f7ff fe77 	bl	26e68 <appConnUpdateTimerStart>
}
   2717a:	bf00      	nop
   2717c:	b003      	add	sp, #12
   2717e:	f85d fb04 	ldr.w	pc, [sp], #4
   27182:	bf00      	nop
   27184:	10009810 	.word	0x10009810

00027188 <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27188:	b500      	push	{lr}
   2718a:	b085      	sub	sp, #20
   2718c:	9001      	str	r0, [sp, #4]
   2718e:	9100      	str	r1, [sp, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   27190:	4b26      	ldr	r3, [pc, #152]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   27192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   27196:	2b00      	cmp	r3, #0
   27198:	d044      	beq.n	27224 <appSlaveResolvedAddrInd+0x9c>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   2719a:	9b01      	ldr	r3, [sp, #4]
   2719c:	78db      	ldrb	r3, [r3, #3]
   2719e:	2b00      	cmp	r3, #0
   271a0:	d110      	bne.n	271c4 <appSlaveResolvedAddrInd+0x3c>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   271a2:	4b22      	ldr	r3, [pc, #136]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   271a6:	9b00      	ldr	r3, [sp, #0]
   271a8:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   271aa:	4b20      	ldr	r3, [pc, #128]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271ac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   271b0:	2b00      	cmp	r3, #0
   271b2:	d032      	beq.n	2721a <appSlaveResolvedAddrInd+0x92>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   271b4:	9800      	ldr	r0, [sp, #0]
   271b6:	f7ff fecb 	bl	26f50 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   271ba:	4b1c      	ldr	r3, [pc, #112]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271bc:	2200      	movs	r2, #0
   271be:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   271c2:	e02a      	b.n	2721a <appSlaveResolvedAddrInd+0x92>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   271c4:	9b01      	ldr	r3, [sp, #4]
   271c6:	78db      	ldrb	r3, [r3, #3]
   271c8:	2b05      	cmp	r3, #5
   271ca:	d126      	bne.n	2721a <appSlaveResolvedAddrInd+0x92>
   271cc:	4b17      	ldr	r3, [pc, #92]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   271d0:	2b00      	cmp	r3, #0
   271d2:	d022      	beq.n	2721a <appSlaveResolvedAddrInd+0x92>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   271d4:	4b15      	ldr	r3, [pc, #84]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   271d8:	4618      	mov	r0, r3
   271da:	f7ec f91f 	bl	1341c <AppDbGetNextRecord>
   271de:	4603      	mov	r3, r0
   271e0:	4a12      	ldr	r2, [pc, #72]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   271e4:	4b11      	ldr	r3, [pc, #68]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   271e8:	2b00      	cmp	r3, #0
   271ea:	d016      	beq.n	2721a <appSlaveResolvedAddrInd+0x92>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   271ec:	4b0f      	ldr	r3, [pc, #60]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   271ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   271f0:	2200      	movs	r2, #0
   271f2:	2104      	movs	r1, #4
   271f4:	4618      	mov	r0, r3
   271f6:	f7ec fa51 	bl	1369c <AppDbGetKey>
   271fa:	9003      	str	r0, [sp, #12]
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   271fc:	9b03      	ldr	r3, [sp, #12]
   271fe:	2b00      	cmp	r3, #0
   27200:	d00b      	beq.n	2721a <appSlaveResolvedAddrInd+0x92>
    {
      /* resolve RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   27202:	9b00      	ldr	r3, [sp, #0]
   27204:	791b      	ldrb	r3, [r3, #4]
   27206:	4618      	mov	r0, r3
   27208:	f7ee fe02 	bl	15e10 <DmConnPeerAddr>
   2720c:	9903      	ldr	r1, [sp, #12]
   2720e:	9b01      	ldr	r3, [sp, #4]
   27210:	881b      	ldrh	r3, [r3, #0]
   27212:	461a      	mov	r2, r3
   27214:	f7ef fd60 	bl	16cd8 <DmPrivResolveAddr>

      /* not done yet */
      return;
   27218:	e005      	b.n	27226 <appSlaveResolvedAddrInd+0x9e>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   2721a:	4b04      	ldr	r3, [pc, #16]	; (2722c <appSlaveResolvedAddrInd+0xa4>)
   2721c:	2200      	movs	r2, #0
   2721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   27222:	e000      	b.n	27226 <appSlaveResolvedAddrInd+0x9e>
    return;
   27224:	bf00      	nop
}
   27226:	b005      	add	sp, #20
   27228:	f85d fb04 	ldr.w	pc, [sp], #4
   2722c:	1000989c 	.word	0x1000989c

00027230 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27230:	b500      	push	{lr}
   27232:	b087      	sub	sp, #28
   27234:	9001      	str	r0, [sp, #4]
   27236:	9100      	str	r1, [sp, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   27238:	4b19      	ldr	r3, [pc, #100]	; (272a0 <appSlaveRemoteConnParamReq+0x70>)
   2723a:	681b      	ldr	r3, [r3, #0]
   2723c:	781b      	ldrb	r3, [r3, #0]
   2723e:	2b00      	cmp	r3, #0
   27240:	d11e      	bne.n	27280 <appSlaveRemoteConnParamReq+0x50>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   27242:	9b01      	ldr	r3, [sp, #4]
   27244:	88db      	ldrh	r3, [r3, #6]
   27246:	f8ad 300c 	strh.w	r3, [sp, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   2724a:	9b01      	ldr	r3, [sp, #4]
   2724c:	891b      	ldrh	r3, [r3, #8]
   2724e:	f8ad 300e 	strh.w	r3, [sp, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   27252:	9b01      	ldr	r3, [sp, #4]
   27254:	895b      	ldrh	r3, [r3, #10]
   27256:	f8ad 3010 	strh.w	r3, [sp, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   2725a:	9b01      	ldr	r3, [sp, #4]
   2725c:	899b      	ldrh	r3, [r3, #12]
   2725e:	f8ad 3012 	strh.w	r3, [sp, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   27262:	2300      	movs	r3, #0
   27264:	f8ad 3016 	strh.w	r3, [sp, #22]
   27268:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2726c:	f8ad 3014 	strh.w	r3, [sp, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   27270:	9b00      	ldr	r3, [sp, #0]
   27272:	791b      	ldrb	r3, [r3, #4]
   27274:	aa03      	add	r2, sp, #12
   27276:	4611      	mov	r1, r2
   27278:	4618      	mov	r0, r3
   2727a:	f7ee fd1d 	bl	15cb8 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   2727e:	e00a      	b.n	27296 <appSlaveRemoteConnParamReq+0x66>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   27280:	4b07      	ldr	r3, [pc, #28]	; (272a0 <appSlaveRemoteConnParamReq+0x70>)
   27282:	681b      	ldr	r3, [r3, #0]
   27284:	781b      	ldrb	r3, [r3, #0]
   27286:	2b01      	cmp	r3, #1
   27288:	d105      	bne.n	27296 <appSlaveRemoteConnParamReq+0x66>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   2728a:	9b00      	ldr	r3, [sp, #0]
   2728c:	791b      	ldrb	r3, [r3, #4]
   2728e:	2111      	movs	r1, #17
   27290:	4618      	mov	r0, r3
   27292:	f7ee fd39 	bl	15d08 <DmRemoteConnParamReqNegReply>
}
   27296:	bf00      	nop
   27298:	b007      	add	sp, #28
   2729a:	f85d fb04 	ldr.w	pc, [sp], #4
   2729e:	bf00      	nop
   272a0:	10002c34 	.word	0x10002c34

000272a4 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   272a4:	b500      	push	{lr}
   272a6:	b083      	sub	sp, #12
   272a8:	9001      	str	r0, [sp, #4]
   272aa:	9100      	str	r1, [sp, #0]
  /* initialize state variables */
  // don't reset bonded flag which will overwrite saved bonded status.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   272ac:	9b00      	ldr	r3, [sp, #0]
   272ae:	2200      	movs	r2, #0
   272b0:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   272b2:	9b00      	ldr	r3, [sp, #0]
   272b4:	2200      	movs	r2, #0
   272b6:	71da      	strb	r2, [r3, #7]

  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   272b8:	9b01      	ldr	r3, [sp, #4]
   272ba:	7a5a      	ldrb	r2, [r3, #9]
   272bc:	9b01      	ldr	r3, [sp, #4]
   272be:	330a      	adds	r3, #10
   272c0:	4619      	mov	r1, r3
   272c2:	4610      	mov	r0, r2
   272c4:	f7ec f976 	bl	135b4 <AppDbFindByAddr>
   272c8:	4602      	mov	r2, r0
   272ca:	9b00      	ldr	r3, [sp, #0]
   272cc:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   272ce:	9b00      	ldr	r3, [sp, #0]
   272d0:	681b      	ldr	r3, [r3, #0]
   272d2:	2b00      	cmp	r3, #0
   272d4:	d10c      	bne.n	272f0 <appSlaveSecConnOpen+0x4c>
   272d6:	9b01      	ldr	r3, [sp, #4]
   272d8:	7a5b      	ldrb	r3, [r3, #9]
   272da:	2b01      	cmp	r3, #1
   272dc:	d108      	bne.n	272f0 <appSlaveSecConnOpen+0x4c>
   272de:	9b01      	ldr	r3, [sp, #4]
   272e0:	7bdb      	ldrb	r3, [r3, #15]
   272e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   272e6:	2b40      	cmp	r3, #64	; 0x40
   272e8:	d102      	bne.n	272f0 <appSlaveSecConnOpen+0x4c>
  {
    /* resolve master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   272ea:	9801      	ldr	r0, [sp, #4]
   272ec:	f7ff fdfc 	bl	26ee8 <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   272f0:	4b0b      	ldr	r3, [pc, #44]	; (27320 <appSlaveSecConnOpen+0x7c>)
   272f2:	681b      	ldr	r3, [r3, #0]
   272f4:	791b      	ldrb	r3, [r3, #4]
   272f6:	2b00      	cmp	r3, #0
   272f8:	d00e      	beq.n	27318 <appSlaveSecConnOpen+0x74>
   272fa:	f7ec f917 	bl	1352c <AppDbCheckBonded>
   272fe:	4603      	mov	r3, r0
   27300:	2b00      	cmp	r3, #0
   27302:	d009      	beq.n	27318 <appSlaveSecConnOpen+0x74>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   27304:	9b01      	ldr	r3, [sp, #4]
   27306:	881b      	ldrh	r3, [r3, #0]
   27308:	b2da      	uxtb	r2, r3
   2730a:	4b05      	ldr	r3, [pc, #20]	; (27320 <appSlaveSecConnOpen+0x7c>)
   2730c:	681b      	ldr	r3, [r3, #0]
   2730e:	781b      	ldrb	r3, [r3, #0]
   27310:	4619      	mov	r1, r3
   27312:	4610      	mov	r0, r2
   27314:	f7f0 f841 	bl	1739a <DmSecSlaveReq>
  }
}
   27318:	bf00      	nop
   2731a:	b003      	add	sp, #12
   2731c:	f85d fb04 	ldr.w	pc, [sp], #4
   27320:	1000982c 	.word	0x1000982c

00027324 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27324:	b500      	push	{lr}
   27326:	b083      	sub	sp, #12
   27328:	9001      	str	r0, [sp, #4]
   2732a:	9100      	str	r1, [sp, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   2732c:	9b00      	ldr	r3, [sp, #0]
   2732e:	681b      	ldr	r3, [r3, #0]
   27330:	2b00      	cmp	r3, #0
   27332:	d004      	beq.n	2733e <appSecConnClose+0x1a>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   27334:	9b00      	ldr	r3, [sp, #0]
   27336:	681b      	ldr	r3, [r3, #0]
   27338:	4618      	mov	r0, r3
   2733a:	f7ec f8bd 	bl	134b8 <AppDbCheckValidRecord>
  }
}
   2733e:	bf00      	nop
   27340:	b003      	add	sp, #12
   27342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00027348 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27348:	b510      	push	{r4, lr}
   2734a:	b086      	sub	sp, #24
   2734c:	9003      	str	r0, [sp, #12]
   2734e:	9102      	str	r1, [sp, #8]
  uint8_t rKeyDist;

  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   27350:	4b44      	ldr	r3, [pc, #272]	; (27464 <appSecPairInd+0x11c>)
   27352:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   27356:	2b00      	cmp	r3, #0
   27358:	d111      	bne.n	2737e <appSecPairInd+0x36>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   2735a:	9b03      	ldr	r3, [sp, #12]
   2735c:	791b      	ldrb	r3, [r3, #4]
   2735e:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   27362:	2b00      	cmp	r3, #0
   27364:	d00b      	beq.n	2737e <appSecPairInd+0x36>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   27366:	9b02      	ldr	r3, [sp, #8]
   27368:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   2736a:	2b00      	cmp	r3, #0
   2736c:	d06f      	beq.n	2744e <appSecPairInd+0x106>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   2736e:	9b02      	ldr	r3, [sp, #8]
   27370:	791b      	ldrb	r3, [r3, #4]
   27372:	4618      	mov	r0, r3
   27374:	f7ee fdae 	bl	15ed4 <DmConnSecLevel>
   27378:	4603      	mov	r3, r0
   2737a:	2b00      	cmp	r3, #0
   2737c:	d167      	bne.n	2744e <appSecPairInd+0x106>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   2737e:	9b03      	ldr	r3, [sp, #12]
   27380:	791a      	ldrb	r2, [r3, #4]
   27382:	4b39      	ldr	r3, [pc, #228]	; (27468 <appSecPairInd+0x120>)
   27384:	681b      	ldr	r3, [r3, #0]
   27386:	781b      	ldrb	r3, [r3, #0]
   27388:	4013      	ands	r3, r2
   2738a:	b2db      	uxtb	r3, r3
   2738c:	f003 0301 	and.w	r3, r3, #1
   27390:	2b00      	cmp	r3, #0
   27392:	bf14      	ite	ne
   27394:	2301      	movne	r3, #1
   27396:	2300      	moveq	r3, #0
   27398:	b2db      	uxtb	r3, r3
   2739a:	461a      	mov	r2, r3
   2739c:	9b02      	ldr	r3, [sp, #8]
   2739e:	71da      	strb	r2, [r3, #7]

    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   273a0:	9b02      	ldr	r3, [sp, #8]
   273a2:	79db      	ldrb	r3, [r3, #7]
   273a4:	2b00      	cmp	r3, #0
   273a6:	d018      	beq.n	273da <appSecPairInd+0x92>
   273a8:	9b02      	ldr	r3, [sp, #8]
   273aa:	681b      	ldr	r3, [r3, #0]
   273ac:	2b00      	cmp	r3, #0
   273ae:	d114      	bne.n	273da <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   273b0:	9b02      	ldr	r3, [sp, #8]
   273b2:	791b      	ldrb	r3, [r3, #4]
   273b4:	4618      	mov	r0, r3
   273b6:	f7ee fd17 	bl	15de8 <DmConnPeerAddrType>
   273ba:	4603      	mov	r3, r0
   273bc:	461c      	mov	r4, r3
   273be:	9b02      	ldr	r3, [sp, #8]
   273c0:	791b      	ldrb	r3, [r3, #4]
   273c2:	4618      	mov	r0, r3
   273c4:	f7ee fd24 	bl	15e10 <DmConnPeerAddr>
   273c8:	4603      	mov	r3, r0
   273ca:	2200      	movs	r2, #0
   273cc:	4619      	mov	r1, r3
   273ce:	4620      	mov	r0, r4
   273d0:	f7eb ffc4 	bl	1335c <AppDbNewRecord>
   273d4:	4602      	mov	r2, r0
   273d6:	9b02      	ldr	r3, [sp, #8]
   273d8:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   273da:	9b02      	ldr	r3, [sp, #8]
   273dc:	2200      	movs	r2, #0
   273de:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   273e0:	4b21      	ldr	r3, [pc, #132]	; (27468 <appSecPairInd+0x120>)
   273e2:	681b      	ldr	r3, [r3, #0]
   273e4:	789b      	ldrb	r3, [r3, #2]
   273e6:	f88d 3016 	strb.w	r3, [sp, #22]
    iKeyDist = pAppSecCfg->iKeyDist;
   273ea:	4b1f      	ldr	r3, [pc, #124]	; (27468 <appSecPairInd+0x120>)
   273ec:	681b      	ldr	r3, [r3, #0]
   273ee:	785b      	ldrb	r3, [r3, #1]
   273f0:	f88d 3017 	strb.w	r3, [sp, #23]

    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   273f4:	9b02      	ldr	r3, [sp, #8]
   273f6:	791b      	ldrb	r3, [r3, #4]
   273f8:	4618      	mov	r0, r3
   273fa:	f7ee fcf5 	bl	15de8 <DmConnPeerAddrType>
   273fe:	4603      	mov	r3, r0
   27400:	2b01      	cmp	r3, #1
   27402:	d105      	bne.n	27410 <appSecPairInd+0xc8>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   27404:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27408:	f043 0302 	orr.w	r3, r3, #2
   2740c:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   27410:	9b03      	ldr	r3, [sp, #12]
   27412:	79da      	ldrb	r2, [r3, #7]
   27414:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27418:	4013      	ands	r3, r2
   2741a:	f88d 3016 	strb.w	r3, [sp, #22]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   2741e:	9b03      	ldr	r3, [sp, #12]
   27420:	799a      	ldrb	r2, [r3, #6]
   27422:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27426:	4013      	ands	r3, r2
   27428:	f88d 3017 	strb.w	r3, [sp, #23]

    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   2742c:	9b02      	ldr	r3, [sp, #8]
   2742e:	7918      	ldrb	r0, [r3, #4]
   27430:	4b0d      	ldr	r3, [pc, #52]	; (27468 <appSecPairInd+0x120>)
   27432:	681b      	ldr	r3, [r3, #0]
   27434:	78d9      	ldrb	r1, [r3, #3]
   27436:	4b0c      	ldr	r3, [pc, #48]	; (27468 <appSecPairInd+0x120>)
   27438:	681b      	ldr	r3, [r3, #0]
   2743a:	781a      	ldrb	r2, [r3, #0]
   2743c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   27440:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27444:	9300      	str	r3, [sp, #0]
   27446:	4623      	mov	r3, r4
   27448:	f7ef ff6a 	bl	17320 <DmSecPairRsp>
   2744c:	e006      	b.n	2745c <appSecPairInd+0x114>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   2744e:	9b02      	ldr	r3, [sp, #8]
   27450:	791b      	ldrb	r3, [r3, #4]
   27452:	2105      	movs	r1, #5
   27454:	4618      	mov	r0, r3
   27456:	f7ef fe19 	bl	1708c <DmSecCancelReq>
  }
}
   2745a:	bf00      	nop
   2745c:	bf00      	nop
   2745e:	b006      	add	sp, #24
   27460:	bd10      	pop	{r4, pc}
   27462:	bf00      	nop
   27464:	1000989c 	.word	0x1000989c
   27468:	1000982c 	.word	0x1000982c

0002746c <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   2746c:	b500      	push	{lr}
   2746e:	b083      	sub	sp, #12
   27470:	9001      	str	r0, [sp, #4]
   27472:	9100      	str	r1, [sp, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   27474:	9b00      	ldr	r3, [sp, #0]
   27476:	79db      	ldrb	r3, [r3, #7]
   27478:	2b00      	cmp	r3, #0
   2747a:	d012      	beq.n	274a2 <appSecStoreKey+0x36>
   2747c:	9b00      	ldr	r3, [sp, #0]
   2747e:	681b      	ldr	r3, [r3, #0]
   27480:	2b00      	cmp	r3, #0
   27482:	d00e      	beq.n	274a2 <appSecStoreKey+0x36>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   27484:	9b00      	ldr	r3, [sp, #0]
   27486:	7ada      	ldrb	r2, [r3, #11]
   27488:	9b01      	ldr	r3, [sp, #4]
   2748a:	7f9b      	ldrb	r3, [r3, #30]
   2748c:	4313      	orrs	r3, r2
   2748e:	b2da      	uxtb	r2, r3
   27490:	9b00      	ldr	r3, [sp, #0]
   27492:	72da      	strb	r2, [r3, #11]

    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   27494:	9b00      	ldr	r3, [sp, #0]
   27496:	681b      	ldr	r3, [r3, #0]
   27498:	9a01      	ldr	r2, [sp, #4]
   2749a:	4611      	mov	r1, r2
   2749c:	4618      	mov	r0, r3
   2749e:	f7ec f949 	bl	13734 <AppDbSetKey>
  }
}
   274a2:	bf00      	nop
   274a4:	b003      	add	sp, #12
   274a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000274ac <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   274ac:	b500      	push	{lr}
   274ae:	b083      	sub	sp, #12
   274b0:	9001      	str	r0, [sp, #4]
   274b2:	9100      	str	r1, [sp, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   274b4:	9b00      	ldr	r3, [sp, #0]
   274b6:	79db      	ldrb	r3, [r3, #7]
   274b8:	2b00      	cmp	r3, #0
   274ba:	d023      	beq.n	27504 <appSecPairCmpl+0x58>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   274bc:	9b00      	ldr	r3, [sp, #0]
   274be:	2201      	movs	r2, #1
   274c0:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   274c2:	9b00      	ldr	r3, [sp, #0]
   274c4:	681b      	ldr	r3, [r3, #0]
   274c6:	2b00      	cmp	r3, #0
   274c8:	d007      	beq.n	274da <appSecPairCmpl+0x2e>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   274ca:	9b00      	ldr	r3, [sp, #0]
   274cc:	681a      	ldr	r2, [r3, #0]
   274ce:	9b00      	ldr	r3, [sp, #0]
   274d0:	7adb      	ldrb	r3, [r3, #11]
   274d2:	4619      	mov	r1, r3
   274d4:	4610      	mov	r0, r2
   274d6:	f7eb ffde 	bl	13496 <AppDbValidateRecord>
    }

    /* if bonded clear bondable mode */
    AppSetBondable(FALSE);
   274da:	2000      	movs	r0, #0
   274dc:	f000 fd5e 	bl	27f9c <AppSetBondable>

    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   274e0:	4b0a      	ldr	r3, [pc, #40]	; (2750c <appSecPairCmpl+0x60>)
   274e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   274e6:	2b01      	cmp	r3, #1
   274e8:	d102      	bne.n	274f0 <appSecPairCmpl+0x44>
    {
      pCb->setConnectable = TRUE;
   274ea:	9b00      	ldr	r3, [sp, #0]
   274ec:	2201      	movs	r2, #1
   274ee:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   274f0:	9b00      	ldr	r3, [sp, #0]
   274f2:	681b      	ldr	r3, [r3, #0]
   274f4:	2b00      	cmp	r3, #0
   274f6:	d005      	beq.n	27504 <appSecPairCmpl+0x58>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   274f8:	9b00      	ldr	r3, [sp, #0]
   274fa:	791b      	ldrb	r3, [r3, #4]
   274fc:	4619      	mov	r1, r3
   274fe:	9801      	ldr	r0, [sp, #4]
   27500:	f7ff f8e4 	bl	266cc <AppAddDevToResList>
    }
  }
}
   27504:	bf00      	nop
   27506:	b003      	add	sp, #12
   27508:	f85d fb04 	ldr.w	pc, [sp], #4
   2750c:	1000989c 	.word	0x1000989c

00027510 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27510:	b082      	sub	sp, #8
   27512:	9001      	str	r0, [sp, #4]
   27514:	9100      	str	r1, [sp, #0]
  return;
   27516:	bf00      	nop
}
   27518:	b002      	add	sp, #8
   2751a:	4770      	bx	lr

0002751c <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   2751c:	b082      	sub	sp, #8
   2751e:	9001      	str	r0, [sp, #4]
   27520:	9100      	str	r1, [sp, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   27522:	9b00      	ldr	r3, [sp, #0]
   27524:	799b      	ldrb	r3, [r3, #6]
   27526:	2b00      	cmp	r3, #0
   27528:	d009      	beq.n	2753e <appSecEncryptInd+0x22>
   2752a:	9b01      	ldr	r3, [sp, #4]
   2752c:	791b      	ldrb	r3, [r3, #4]
   2752e:	2b00      	cmp	r3, #0
   27530:	d005      	beq.n	2753e <appSecEncryptInd+0x22>
  {
    pCb->bonded = TRUE;
   27532:	9b00      	ldr	r3, [sp, #0]
   27534:	2201      	movs	r2, #1
   27536:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   27538:	9b00      	ldr	r3, [sp, #0]
   2753a:	2200      	movs	r2, #0
   2753c:	719a      	strb	r2, [r3, #6]
  }
}
   2753e:	bf00      	nop
   27540:	b002      	add	sp, #8
   27542:	4770      	bx	lr

00027544 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   27544:	b500      	push	{lr}
   27546:	b083      	sub	sp, #12
   27548:	9001      	str	r0, [sp, #4]
   2754a:	9100      	str	r1, [sp, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   2754c:	9b00      	ldr	r3, [sp, #0]
   2754e:	681b      	ldr	r3, [r3, #0]
   27550:	2b00      	cmp	r3, #0
   27552:	d12b      	bne.n	275ac <appSecFindLtk+0x68>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   27554:	9b01      	ldr	r3, [sp, #4]
   27556:	89db      	ldrh	r3, [r3, #14]
   27558:	2b00      	cmp	r3, #0
   2755a:	d109      	bne.n	27570 <appSecFindLtk+0x2c>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   2755c:	9b01      	ldr	r3, [sp, #4]
   2755e:	3306      	adds	r3, #6
   27560:	2208      	movs	r2, #8
   27562:	4915      	ldr	r1, [pc, #84]	; (275b8 <appSecFindLtk+0x74>)
   27564:	4618      	mov	r0, r3
   27566:	f000 ff39 	bl	283dc <memcmp>
   2756a:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   2756c:	2b00      	cmp	r3, #0
   2756e:	d013      	beq.n	27598 <appSecFindLtk+0x54>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   27570:	9b01      	ldr	r3, [sp, #4]
   27572:	89da      	ldrh	r2, [r3, #14]
   27574:	9b01      	ldr	r3, [sp, #4]
   27576:	3306      	adds	r3, #6
   27578:	4619      	mov	r1, r3
   2757a:	4610      	mov	r0, r2
   2757c:	f7ec f856 	bl	1362c <AppDbFindByLtkReq>
   27580:	4602      	mov	r2, r0
   27582:	9b00      	ldr	r3, [sp, #0]
   27584:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   27586:	9b00      	ldr	r3, [sp, #0]
   27588:	681b      	ldr	r3, [r3, #0]
   2758a:	2b00      	cmp	r3, #0
   2758c:	d00e      	beq.n	275ac <appSecFindLtk+0x68>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   2758e:	4b0b      	ldr	r3, [pc, #44]	; (275bc <appSecFindLtk+0x78>)
   27590:	2200      	movs	r2, #0
   27592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   27596:	e009      	b.n	275ac <appSecFindLtk+0x68>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   27598:	4b08      	ldr	r3, [pc, #32]	; (275bc <appSecFindLtk+0x78>)
   2759a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   2759e:	2b00      	cmp	r3, #0
   275a0:	d004      	beq.n	275ac <appSecFindLtk+0x68>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   275a2:	4b06      	ldr	r3, [pc, #24]	; (275bc <appSecFindLtk+0x78>)
   275a4:	2201      	movs	r2, #1
   275a6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   275aa:	e002      	b.n	275b2 <appSecFindLtk+0x6e>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   275ac:	9800      	ldr	r0, [sp, #0]
   275ae:	f7ff fccf 	bl	26f50 <appSecRspLtk>
}
   275b2:	b003      	add	sp, #12
   275b4:	f85d fb04 	ldr.w	pc, [sp], #4
   275b8:	0002c240 	.word	0x0002c240
   275bc:	1000989c 	.word	0x1000989c

000275c0 <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   275c0:	b500      	push	{lr}
   275c2:	b083      	sub	sp, #12
   275c4:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   275c6:	9b01      	ldr	r3, [sp, #4]
   275c8:	78db      	ldrb	r3, [r3, #3]
   275ca:	2b00      	cmp	r3, #0
   275cc:	d105      	bne.n	275da <appPrivSetAddrResEnableInd+0x1a>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   275ce:	f7ef f917 	bl	16800 <DmLlPrivEnabled>
   275d2:	4603      	mov	r3, r0
   275d4:	4618      	mov	r0, r3
   275d6:	f7fd fa81 	bl	24adc <SvcCoreGapCentAddrResUpdate>
  }
}
   275da:	bf00      	nop
   275dc:	b003      	add	sp, #12
   275de:	f85d fb04 	ldr.w	pc, [sp], #4

000275e2 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   275e2:	b500      	push	{lr}
   275e4:	b083      	sub	sp, #12
   275e6:	9001      	str	r0, [sp, #4]
   275e8:	9100      	str	r1, [sp, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   275ea:	9b01      	ldr	r3, [sp, #4]
   275ec:	78db      	ldrb	r3, [r3, #3]
   275ee:	2b00      	cmp	r3, #0
   275f0:	d109      	bne.n	27606 <appPrivAddDevToResListInd+0x24>
   275f2:	9b00      	ldr	r3, [sp, #0]
   275f4:	681b      	ldr	r3, [r3, #0]
   275f6:	2b00      	cmp	r3, #0
   275f8:	d005      	beq.n	27606 <appPrivAddDevToResListInd+0x24>
  {
    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   275fa:	9b00      	ldr	r3, [sp, #0]
   275fc:	681b      	ldr	r3, [r3, #0]
   275fe:	2101      	movs	r1, #1
   27600:	4618      	mov	r0, r3
   27602:	f7ec fa25 	bl	13a50 <AppDbSetPeerAddedToRl>
  }
}
   27606:	bf00      	nop
   27608:	b003      	add	sp, #12
   2760a:	f85d fb04 	ldr.w	pc, [sp], #4

0002760e <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   2760e:	b500      	push	{lr}
   27610:	b083      	sub	sp, #12
   27612:	9001      	str	r0, [sp, #4]
   27614:	9100      	str	r1, [sp, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   27616:	9b01      	ldr	r3, [sp, #4]
   27618:	78db      	ldrb	r3, [r3, #3]
   2761a:	2b00      	cmp	r3, #0
   2761c:	d109      	bne.n	27632 <appPrivRemDevFromResListInd+0x24>
   2761e:	9b00      	ldr	r3, [sp, #0]
   27620:	681b      	ldr	r3, [r3, #0]
   27622:	2b00      	cmp	r3, #0
   27624:	d005      	beq.n	27632 <appPrivRemDevFromResListInd+0x24>
  {
    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   27626:	9b00      	ldr	r3, [sp, #0]
   27628:	681b      	ldr	r3, [r3, #0]
   2762a:	2100      	movs	r1, #0
   2762c:	4618      	mov	r0, r3
   2762e:	f7ec fa0f 	bl	13a50 <AppDbSetPeerAddedToRl>
  }
}
   27632:	bf00      	nop
   27634:	b003      	add	sp, #12
   27636:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002763c <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   2763c:	b500      	push	{lr}
   2763e:	b087      	sub	sp, #28
   27640:	9001      	str	r0, [sp, #4]
   27642:	9100      	str	r1, [sp, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;

  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   27644:	9b00      	ldr	r3, [sp, #0]
   27646:	2202      	movs	r2, #2
   27648:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   2764a:	9b00      	ldr	r3, [sp, #0]
   2764c:	791b      	ldrb	r3, [r3, #4]
   2764e:	4618      	mov	r0, r3
   27650:	f7ee fcc4 	bl	15fdc <DmConnCheckIdle>
   27654:	4603      	mov	r3, r0
   27656:	2b00      	cmp	r3, #0
   27658:	bf0c      	ite	eq
   2765a:	2301      	moveq	r3, #1
   2765c:	2300      	movne	r3, #0
   2765e:	b2db      	uxtb	r3, r3
   27660:	f88d 3017 	strb.w	r3, [sp, #23]

  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   27664:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27668:	2b00      	cmp	r3, #0
   2766a:	d02c      	beq.n	276c6 <appSlaveConnUpdateTimeout+0x8a>
   2766c:	9b00      	ldr	r3, [sp, #0]
   2766e:	7a9b      	ldrb	r3, [r3, #10]
   27670:	2b00      	cmp	r3, #0
   27672:	d028      	beq.n	276c6 <appSlaveConnUpdateTimeout+0x8a>
  {
    /* do update */
    pCb->attempts++;
   27674:	9b00      	ldr	r3, [sp, #0]
   27676:	7b1b      	ldrb	r3, [r3, #12]
   27678:	3301      	adds	r3, #1
   2767a:	b2da      	uxtb	r2, r3
   2767c:	9b00      	ldr	r3, [sp, #0]
   2767e:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   27680:	4b18      	ldr	r3, [pc, #96]	; (276e4 <appSlaveConnUpdateTimeout+0xa8>)
   27682:	681b      	ldr	r3, [r3, #0]
   27684:	889b      	ldrh	r3, [r3, #4]
   27686:	f8ad 3008 	strh.w	r3, [sp, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   2768a:	4b16      	ldr	r3, [pc, #88]	; (276e4 <appSlaveConnUpdateTimeout+0xa8>)
   2768c:	681b      	ldr	r3, [r3, #0]
   2768e:	88db      	ldrh	r3, [r3, #6]
   27690:	f8ad 300a 	strh.w	r3, [sp, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   27694:	4b13      	ldr	r3, [pc, #76]	; (276e4 <appSlaveConnUpdateTimeout+0xa8>)
   27696:	681b      	ldr	r3, [r3, #0]
   27698:	891b      	ldrh	r3, [r3, #8]
   2769a:	f8ad 300c 	strh.w	r3, [sp, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   2769e:	4b11      	ldr	r3, [pc, #68]	; (276e4 <appSlaveConnUpdateTimeout+0xa8>)
   276a0:	681b      	ldr	r3, [r3, #0]
   276a2:	895b      	ldrh	r3, [r3, #10]
   276a4:	f8ad 300e 	strh.w	r3, [sp, #14]
    connSpec.minCeLen = 0;
   276a8:	2300      	movs	r3, #0
   276aa:	f8ad 3010 	strh.w	r3, [sp, #16]
    connSpec.maxCeLen = 0xffff;
   276ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   276b2:	f8ad 3012 	strh.w	r3, [sp, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   276b6:	9b00      	ldr	r3, [sp, #0]
   276b8:	791b      	ldrb	r3, [r3, #4]
   276ba:	aa02      	add	r2, sp, #8
   276bc:	4611      	mov	r1, r2
   276be:	4618      	mov	r0, r3
   276c0:	f7ee faa8 	bl	15c14 <DmConnUpdate>
   276c4:	e009      	b.n	276da <appSlaveConnUpdateTimeout+0x9e>
  }
  else
  {
    pCb->connWasIdle = idle;
   276c6:	9b00      	ldr	r3, [sp, #0]
   276c8:	f89d 2017 	ldrb.w	r2, [sp, #23]
   276cc:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   276ce:	9b00      	ldr	r3, [sp, #0]
   276d0:	791b      	ldrb	r3, [r3, #4]
   276d2:	4618      	mov	r0, r3
   276d4:	f7ff fbc8 	bl	26e68 <appConnUpdateTimerStart>
  }
}
   276d8:	bf00      	nop
   276da:	bf00      	nop
   276dc:	b007      	add	sp, #28
   276de:	f85d fb04 	ldr.w	pc, [sp], #4
   276e2:	bf00      	nop
   276e4:	10009810 	.word	0x10009810

000276e8 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   276e8:	b500      	push	{lr}
   276ea:	b085      	sub	sp, #20
   276ec:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   276ee:	9b01      	ldr	r3, [sp, #4]
   276f0:	881b      	ldrh	r3, [r3, #0]
   276f2:	3b01      	subs	r3, #1
   276f4:	015b      	lsls	r3, r3, #5
   276f6:	4a0c      	ldr	r2, [pc, #48]	; (27728 <appSlaveProcMsg+0x40>)
   276f8:	4413      	add	r3, r2
   276fa:	9303      	str	r3, [sp, #12]

  switch(pMsg->event)
   276fc:	9b01      	ldr	r3, [sp, #4]
   276fe:	789b      	ldrb	r3, [r3, #2]
   27700:	2b10      	cmp	r3, #16
   27702:	d10c      	bne.n	2771e <appSlaveProcMsg+0x36>
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      /* Check state to determine if read remote features is needed */
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   27704:	9b03      	ldr	r3, [sp, #12]
   27706:	7b5b      	ldrb	r3, [r3, #13]
   27708:	2b02      	cmp	r3, #2
   2770a:	d104      	bne.n	27716 <appSlaveProcMsg+0x2e>
      {
        appSlaveConnUpdateTimeout(pMsg, pCb);
   2770c:	9903      	ldr	r1, [sp, #12]
   2770e:	9801      	ldr	r0, [sp, #4]
   27710:	f7ff ff94 	bl	2763c <appSlaveConnUpdateTimeout>
      }
      else
      {
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
      }
      break;
   27714:	e004      	b.n	27720 <appSlaveProcMsg+0x38>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   27716:	9b03      	ldr	r3, [sp, #12]
   27718:	2201      	movs	r2, #1
   2771a:	735a      	strb	r2, [r3, #13]
      break;
   2771c:	e000      	b.n	27720 <appSlaveProcMsg+0x38>

    default:
      break;
   2771e:	bf00      	nop
  }
}
   27720:	bf00      	nop
   27722:	b005      	add	sp, #20
   27724:	f85d fb04 	ldr.w	pc, [sp], #4
   27728:	1000983c 	.word	0x1000983c

0002772c <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   2772c:	b500      	push	{lr}
   2772e:	b083      	sub	sp, #12
  uint8_t i;

  /* for each advertising set */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   27730:	2300      	movs	r3, #0
   27732:	f88d 3007 	strb.w	r3, [sp, #7]
   27736:	e02e      	b.n	27796 <AppSlaveInit+0x6a>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   27738:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2773c:	4a20      	ldr	r2, [pc, #128]	; (277c0 <AppSlaveInit+0x94>)
   2773e:	4413      	add	r3, r2
   27740:	2203      	movs	r2, #3
   27742:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   27746:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2774a:	4a1d      	ldr	r2, [pc, #116]	; (277c0 <AppSlaveInit+0x94>)
   2774c:	4413      	add	r3, r2
   2774e:	2200      	movs	r2, #0
   27750:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   27754:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27758:	4a19      	ldr	r2, [pc, #100]	; (277c0 <AppSlaveInit+0x94>)
   2775a:	4413      	add	r3, r2
   2775c:	2200      	movs	r2, #0
   2775e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* initialize peer address */
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
   27762:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27766:	4a16      	ldr	r2, [pc, #88]	; (277c0 <AppSlaveInit+0x94>)
   27768:	4413      	add	r3, r2
   2776a:	2200      	movs	r2, #0
   2776c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   27770:	f89d 2007 	ldrb.w	r2, [sp, #7]
   27774:	4613      	mov	r3, r2
   27776:	005b      	lsls	r3, r3, #1
   27778:	4413      	add	r3, r2
   2777a:	005b      	lsls	r3, r3, #1
   2777c:	3330      	adds	r3, #48	; 0x30
   2777e:	4a10      	ldr	r2, [pc, #64]	; (277c0 <AppSlaveInit+0x94>)
   27780:	4413      	add	r3, r2
   27782:	2206      	movs	r2, #6
   27784:	2100      	movs	r1, #0
   27786:	4618      	mov	r0, r3
   27788:	f000 fe58 	bl	2843c <memset>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   2778c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27790:	3301      	adds	r3, #1
   27792:	f88d 3007 	strb.w	r3, [sp, #7]
   27796:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2779a:	2b00      	cmp	r3, #0
   2779c:	d0cc      	beq.n	27738 <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   2779e:	4b08      	ldr	r3, [pc, #32]	; (277c0 <AppSlaveInit+0x94>)
   277a0:	22ff      	movs	r2, #255	; 0xff
   277a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   277a6:	f7ff f9a1 	bl	26aec <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   277aa:	4b05      	ldr	r3, [pc, #20]	; (277c0 <AppSlaveInit+0x94>)
   277ac:	2200      	movs	r2, #0
   277ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   277b2:	4b04      	ldr	r3, [pc, #16]	; (277c4 <AppSlaveInit+0x98>)
   277b4:	4a04      	ldr	r2, [pc, #16]	; (277c8 <AppSlaveInit+0x9c>)
   277b6:	601a      	str	r2, [r3, #0]
}
   277b8:	bf00      	nop
   277ba:	b003      	add	sp, #12
   277bc:	f85d fb04 	ldr.w	pc, [sp], #4
   277c0:	1000989c 	.word	0x1000989c
   277c4:	10009818 	.word	0x10009818
   277c8:	000276e9 	.word	0x000276e9

000277cc <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   277cc:	b500      	push	{lr}
   277ce:	b085      	sub	sp, #20
   277d0:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb = NULL;
   277d2:	2300      	movs	r3, #0
   277d4:	9303      	str	r3, [sp, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   277d6:	9b01      	ldr	r3, [sp, #4]
   277d8:	789b      	ldrb	r3, [r3, #2]
   277da:	2b22      	cmp	r3, #34	; 0x22
   277dc:	d00a      	beq.n	277f4 <AppSlaveProcDmMsg+0x28>
      (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   277de:	9b01      	ldr	r3, [sp, #4]
   277e0:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   277e2:	2b48      	cmp	r3, #72	; 0x48
   277e4:	d006      	beq.n	277f4 <AppSlaveProcDmMsg+0x28>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   277e6:	9b01      	ldr	r3, [sp, #4]
   277e8:	881b      	ldrh	r3, [r3, #0]
   277ea:	3b01      	subs	r3, #1
   277ec:	015b      	lsls	r3, r3, #5
   277ee:	4a6c      	ldr	r2, [pc, #432]	; (279a0 <AppSlaveProcDmMsg+0x1d4>)
   277f0:	4413      	add	r3, r2
   277f2:	9303      	str	r3, [sp, #12]
  }

  switch (pMsg->hdr.event)
   277f4:	9b01      	ldr	r3, [sp, #4]
   277f6:	789b      	ldrb	r3, [r3, #2]
   277f8:	3b20      	subs	r3, #32
   277fa:	2b45      	cmp	r3, #69	; 0x45
   277fc:	f200 80c8 	bhi.w	27990 <AppSlaveProcDmMsg+0x1c4>
   27800:	a201      	add	r2, pc, #4	; (adr r2, 27808 <AppSlaveProcDmMsg+0x3c>)
   27802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27806:	bf00      	nop
   27808:	00027921 	.word	0x00027921
   2780c:	00027991 	.word	0x00027991
   27810:	00027927 	.word	0x00027927
   27814:	00027991 	.word	0x00027991
   27818:	00027991 	.word	0x00027991
   2781c:	00027991 	.word	0x00027991
   27820:	00027991 	.word	0x00027991
   27824:	00027939 	.word	0x00027939
   27828:	00027943 	.word	0x00027943
   2782c:	0002794d 	.word	0x0002794d
   27830:	00027991 	.word	0x00027991
   27834:	00027991 	.word	0x00027991
   27838:	00027991 	.word	0x00027991
   2783c:	00027991 	.word	0x00027991
   27840:	00027991 	.word	0x00027991
   27844:	00027991 	.word	0x00027991
   27848:	00027991 	.word	0x00027991
   2784c:	00027991 	.word	0x00027991
   27850:	00027991 	.word	0x00027991
   27854:	00027991 	.word	0x00027991
   27858:	00027991 	.word	0x00027991
   2785c:	00027991 	.word	0x00027991
   27860:	00027991 	.word	0x00027991
   27864:	00027957 	.word	0x00027957
   27868:	00027991 	.word	0x00027991
   2786c:	00027991 	.word	0x00027991
   27870:	00027991 	.word	0x00027991
   27874:	00027991 	.word	0x00027991
   27878:	00027991 	.word	0x00027991
   2787c:	00027991 	.word	0x00027991
   27880:	00027991 	.word	0x00027991
   27884:	00027991 	.word	0x00027991
   27888:	00027961 	.word	0x00027961
   2788c:	00027991 	.word	0x00027991
   27890:	00027991 	.word	0x00027991
   27894:	00027991 	.word	0x00027991
   27898:	00027991 	.word	0x00027991
   2789c:	00027991 	.word	0x00027991
   278a0:	00027991 	.word	0x00027991
   278a4:	00027991 	.word	0x00027991
   278a8:	00027927 	.word	0x00027927
   278ac:	00027991 	.word	0x00027991
   278b0:	00027991 	.word	0x00027991
   278b4:	00027991 	.word	0x00027991
   278b8:	00027991 	.word	0x00027991
   278bc:	00027991 	.word	0x00027991
   278c0:	00027991 	.word	0x00027991
   278c4:	00027991 	.word	0x00027991
   278c8:	00027991 	.word	0x00027991
   278cc:	00027991 	.word	0x00027991
   278d0:	00027991 	.word	0x00027991
   278d4:	00027991 	.word	0x00027991
   278d8:	00027991 	.word	0x00027991
   278dc:	00027991 	.word	0x00027991
   278e0:	00027991 	.word	0x00027991
   278e4:	0002796b 	.word	0x0002796b
   278e8:	00027991 	.word	0x00027991
   278ec:	00027991 	.word	0x00027991
   278f0:	00027991 	.word	0x00027991
   278f4:	00027991 	.word	0x00027991
   278f8:	00027991 	.word	0x00027991
   278fc:	00027991 	.word	0x00027991
   27900:	00027991 	.word	0x00027991
   27904:	00027991 	.word	0x00027991
   27908:	00027991 	.word	0x00027991
   2790c:	00027991 	.word	0x00027991
   27910:	00027991 	.word	0x00027991
   27914:	00027991 	.word	0x00027991
   27918:	00027991 	.word	0x00027991
   2791c:	00027985 	.word	0x00027985
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   27920:	f7ff f8e4 	bl	26aec <appSlaveAdvModeInit>
      break;
   27924:	e037      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   27926:	4b1f      	ldr	r3, [pc, #124]	; (279a4 <AppSlaveProcDmMsg+0x1d8>)
   27928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2792a:	2b00      	cmp	r3, #0
   2792c:	d032      	beq.n	27994 <AppSlaveProcDmMsg+0x1c8>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   2792e:	4b1d      	ldr	r3, [pc, #116]	; (279a4 <AppSlaveProcDmMsg+0x1d8>)
   27930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   27932:	9801      	ldr	r0, [sp, #4]
   27934:	4798      	blx	r3
      }
      break;
   27936:	e02d      	b.n	27994 <AppSlaveProcDmMsg+0x1c8>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   27938:	9903      	ldr	r1, [sp, #12]
   2793a:	9801      	ldr	r0, [sp, #4]
   2793c:	f7ff fb3e 	bl	26fbc <appSlaveConnOpen>
      break;
   27940:	e029      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   27942:	9903      	ldr	r1, [sp, #12]
   27944:	9801      	ldr	r0, [sp, #4]
   27946:	f7ff fb55 	bl	26ff4 <appSlaveConnClose>
      break;
   2794a:	e024      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   2794c:	9903      	ldr	r1, [sp, #12]
   2794e:	9801      	ldr	r0, [sp, #4]
   27950:	f7ff fbde 	bl	27110 <appSlaveConnUpdate>
      break;
   27954:	e01f      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   27956:	9903      	ldr	r1, [sp, #12]
   27958:	9801      	ldr	r0, [sp, #4]
   2795a:	f7ff fc15 	bl	27188 <appSlaveResolvedAddrInd>
      break;
   2795e:	e01a      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   27960:	9903      	ldr	r1, [sp, #12]
   27962:	9801      	ldr	r0, [sp, #4]
   27964:	f7ff fc64 	bl	27230 <appSlaveRemoteConnParamReq>
      break;
   27968:	e015      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   2796a:	9b03      	ldr	r3, [sp, #12]
   2796c:	7b5b      	ldrb	r3, [r3, #13]
   2796e:	2b01      	cmp	r3, #1
   27970:	d104      	bne.n	2797c <AppSlaveProcDmMsg+0x1b0>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   27972:	9903      	ldr	r1, [sp, #12]
   27974:	9801      	ldr	r0, [sp, #4]
   27976:	f7ff fe61 	bl	2763c <appSlaveConnUpdateTimeout>
      }
      else
      {
        pCb->updateState = APP_CU_STATE_UPDATING;
      }
      break;
   2797a:	e00c      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>
        pCb->updateState = APP_CU_STATE_UPDATING;
   2797c:	9b03      	ldr	r3, [sp, #12]
   2797e:	2202      	movs	r2, #2
   27980:	735a      	strb	r2, [r3, #13]
      break;
   27982:	e008      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>

    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   27984:	2000      	movs	r0, #0
   27986:	f7ec fa2b 	bl	13de0 <HciDrvRadioBoot>
      DmDevReset();
   2798a:	f7ee fdc3 	bl	16514 <DmDevReset>
	  break;
   2798e:	e002      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>
	  
    default:
      break;
   27990:	bf00      	nop
   27992:	e000      	b.n	27996 <AppSlaveProcDmMsg+0x1ca>
      break;
   27994:	bf00      	nop
  }
}
   27996:	bf00      	nop
   27998:	b005      	add	sp, #20
   2799a:	f85d fb04 	ldr.w	pc, [sp], #4
   2799e:	bf00      	nop
   279a0:	1000983c 	.word	0x1000983c
   279a4:	1000989c 	.word	0x1000989c

000279a8 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   279a8:	b500      	push	{lr}
   279aa:	b083      	sub	sp, #12
   279ac:	9300      	str	r3, [sp, #0]
   279ae:	4603      	mov	r3, r0
   279b0:	f88d 3007 	strb.w	r3, [sp, #7]
   279b4:	460b      	mov	r3, r1
   279b6:	f88d 3006 	strb.w	r3, [sp, #6]
   279ba:	4613      	mov	r3, r2
   279bc:	f8ad 3004 	strh.w	r3, [sp, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   279c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   279c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   279c8:	4930      	ldr	r1, [pc, #192]	; (27a8c <appAdvSetData+0xe4>)
   279ca:	0092      	lsls	r2, r2, #2
   279cc:	4413      	add	r3, r2
   279ce:	9a00      	ldr	r2, [sp, #0]
   279d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   279d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   279d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   279dc:	492b      	ldr	r1, [pc, #172]	; (27a8c <appAdvSetData+0xe4>)
   279de:	0092      	lsls	r2, r2, #2
   279e0:	4413      	add	r3, r2
   279e2:	3308      	adds	r3, #8
   279e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   279e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   279ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
   279f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   279f4:	4925      	ldr	r1, [pc, #148]	; (27a8c <appAdvSetData+0xe4>)
   279f6:	0092      	lsls	r2, r2, #2
   279f8:	4413      	add	r3, r2
   279fa:	330c      	adds	r3, #12
   279fc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   27a00:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   27a04:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27a08:	4920      	ldr	r1, [pc, #128]	; (27a8c <appAdvSetData+0xe4>)
   27a0a:	3314      	adds	r3, #20
   27a0c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   27a10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   27a14:	f89d 2007 	ldrb.w	r2, [sp, #7]
   27a18:	f89d 3006 	ldrb.w	r3, [sp, #6]
   27a1c:	491b      	ldr	r1, [pc, #108]	; (27a8c <appAdvSetData+0xe4>)
   27a1e:	0092      	lsls	r2, r2, #2
   27a20:	4413      	add	r3, r2
   27a22:	3310      	adds	r3, #16
   27a24:	2200      	movs	r2, #0
   27a26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   27a2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27a2e:	4a17      	ldr	r2, [pc, #92]	; (27a8c <appAdvSetData+0xe4>)
   27a30:	4413      	add	r3, r2
   27a32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   27a36:	2b03      	cmp	r3, #3
   27a38:	d01b      	beq.n	27a72 <appAdvSetData+0xca>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   27a3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   27a3e:	085b      	lsrs	r3, r3, #1
   27a40:	b2da      	uxtb	r2, r3
   27a42:	4b12      	ldr	r3, [pc, #72]	; (27a8c <appAdvSetData+0xe4>)
   27a44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   27a48:	429a      	cmp	r2, r3
   27a4a:	d112      	bne.n	27a72 <appAdvSetData+0xca>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   27a4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   27a50:	2bfb      	cmp	r3, #251	; 0xfb
   27a52:	d80e      	bhi.n	27a72 <appAdvSetData+0xca>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   27a54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   27a58:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27a5c:	429a      	cmp	r2, r3
   27a5e:	d808      	bhi.n	27a72 <appAdvSetData+0xca>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   27a60:	f89d 2006 	ldrb.w	r2, [sp, #6]
   27a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27a68:	4611      	mov	r1, r2
   27a6a:	4618      	mov	r0, r3
   27a6c:	f7ff f8c8 	bl	26c00 <appSetAdvScanDataFrag>
   27a70:	e007      	b.n	27a82 <appAdvSetData+0xda>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   27a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27a76:	4a05      	ldr	r2, [pc, #20]	; (27a8c <appAdvSetData+0xe4>)
   27a78:	4413      	add	r3, r2
   27a7a:	2200      	movs	r2, #0
   27a7c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   27a80:	bf00      	nop
   27a82:	bf00      	nop
   27a84:	b003      	add	sp, #12
   27a86:	f85d fb04 	ldr.w	pc, [sp], #4
   27a8a:	bf00      	nop
   27a8c:	1000989c 	.word	0x1000989c

00027a90 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   27a90:	b510      	push	{r4, lr}
   27a92:	b086      	sub	sp, #24
   27a94:	9102      	str	r1, [sp, #8]
   27a96:	9201      	str	r2, [sp, #4]
   27a98:	9300      	str	r3, [sp, #0]
   27a9a:	4603      	mov	r3, r0
   27a9c:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   27aa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27aa4:	9902      	ldr	r1, [sp, #8]
   27aa6:	4618      	mov	r0, r3
   27aa8:	f7ff f82a 	bl	26b00 <appSlaveConnectableAdv>
   27aac:	4603      	mov	r3, r0
   27aae:	2b00      	cmp	r3, #0
   27ab0:	d009      	beq.n	27ac6 <appAdvStart+0x36>
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   27ab2:	2001      	movs	r0, #1
   27ab4:	f7fe fce6 	bl	26484 <appNumConns>
   27ab8:	4603      	mov	r3, r0
   27aba:	461a      	mov	r2, r3
   27abc:	4b48      	ldr	r3, [pc, #288]	; (27be0 <appAdvStart+0x150>)
   27abe:	681b      	ldr	r3, [r3, #0]
   27ac0:	781b      	ldrb	r3, [r3, #0]
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   27ac2:	429a      	cmp	r2, r3
   27ac4:	d26f      	bcs.n	27ba6 <appAdvStart+0x116>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   27ac6:	2300      	movs	r3, #0
   27ac8:	f88d 3017 	strb.w	r3, [sp, #23]
   27acc:	e05d      	b.n	27b8a <appAdvStart+0xfa>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   27ace:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   27ad2:	2b00      	cmp	r3, #0
   27ad4:	d03c      	beq.n	27b50 <appAdvStart+0xc0>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   27ad6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27ada:	9a02      	ldr	r2, [sp, #8]
   27adc:	4413      	add	r3, r2
   27ade:	7818      	ldrb	r0, [r3, #0]
   27ae0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27ae4:	005b      	lsls	r3, r3, #1
   27ae6:	9a01      	ldr	r2, [sp, #4]
   27ae8:	4413      	add	r3, r2
   27aea:	8819      	ldrh	r1, [r3, #0]
   27aec:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27af0:	005b      	lsls	r3, r3, #1
   27af2:	9a01      	ldr	r2, [sp, #4]
   27af4:	4413      	add	r3, r2
   27af6:	881b      	ldrh	r3, [r3, #0]
   27af8:	461a      	mov	r2, r3
   27afa:	f7ec ff57 	bl	149ac <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   27afe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b02:	9a02      	ldr	r2, [sp, #8]
   27b04:	4413      	add	r3, r2
   27b06:	7818      	ldrb	r0, [r3, #0]
   27b08:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b0c:	9a02      	ldr	r2, [sp, #8]
   27b0e:	4413      	add	r3, r2
   27b10:	781b      	ldrb	r3, [r3, #0]
   27b12:	461a      	mov	r2, r3
   27b14:	4b33      	ldr	r3, [pc, #204]	; (27be4 <appAdvStart+0x154>)
   27b16:	4413      	add	r3, r2
   27b18:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   27b1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b20:	9a02      	ldr	r2, [sp, #8]
   27b22:	4413      	add	r3, r2
   27b24:	781b      	ldrb	r3, [r3, #0]
   27b26:	461a      	mov	r2, r3
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   27b28:	4b2e      	ldr	r3, [pc, #184]	; (27be4 <appAdvStart+0x154>)
   27b2a:	4413      	add	r3, r2
   27b2c:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   27b30:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b34:	9a02      	ldr	r2, [sp, #8]
   27b36:	4413      	add	r3, r2
   27b38:	781b      	ldrb	r3, [r3, #0]
   27b3a:	461a      	mov	r2, r3
   27b3c:	4613      	mov	r3, r2
   27b3e:	005b      	lsls	r3, r3, #1
   27b40:	4413      	add	r3, r2
   27b42:	005b      	lsls	r3, r3, #1
   27b44:	3330      	adds	r3, #48	; 0x30
   27b46:	4a27      	ldr	r2, [pc, #156]	; (27be4 <appAdvStart+0x154>)
   27b48:	4413      	add	r3, r2
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   27b4a:	4622      	mov	r2, r4
   27b4c:	f7ec fe28 	bl	147a0 <DmAdvConfig>
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   27b50:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b54:	9a02      	ldr	r2, [sp, #8]
   27b56:	4413      	add	r3, r2
   27b58:	781b      	ldrb	r3, [r3, #0]
   27b5a:	461a      	mov	r2, r3
   27b5c:	4b21      	ldr	r3, [pc, #132]	; (27be4 <appAdvStart+0x154>)
   27b5e:	4413      	add	r3, r2
   27b60:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   27b64:	2b00      	cmp	r3, #0
   27b66:	d10b      	bne.n	27b80 <appAdvStart+0xf0>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   27b68:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b6c:	9a02      	ldr	r2, [sp, #8]
   27b6e:	4413      	add	r3, r2
   27b70:	781b      	ldrb	r3, [r3, #0]
   27b72:	4a1c      	ldr	r2, [pc, #112]	; (27be4 <appAdvStart+0x154>)
   27b74:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
   27b78:	4611      	mov	r1, r2
   27b7a:	4618      	mov	r0, r3
   27b7c:	f7ff f8ea 	bl	26d54 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   27b80:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27b84:	3301      	adds	r3, #1
   27b86:	f88d 3017 	strb.w	r3, [sp, #23]
   27b8a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   27b8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27b92:	429a      	cmp	r2, r3
   27b94:	d39b      	bcc.n	27ace <appAdvStart+0x3e>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   27b96:	f89d 000f 	ldrb.w	r0, [sp, #15]
   27b9a:	9b08      	ldr	r3, [sp, #32]
   27b9c:	9a00      	ldr	r2, [sp, #0]
   27b9e:	9902      	ldr	r1, [sp, #8]
   27ba0:	f7ec fe76 	bl	14890 <DmAdvStart>

    return;
   27ba4:	e019      	b.n	27bda <appAdvStart+0x14a>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   27ba6:	2300      	movs	r3, #0
   27ba8:	f88d 3017 	strb.w	r3, [sp, #23]
   27bac:	e00f      	b.n	27bce <appAdvStart+0x13e>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   27bae:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27bb2:	9a02      	ldr	r2, [sp, #8]
   27bb4:	4413      	add	r3, r2
   27bb6:	781b      	ldrb	r3, [r3, #0]
   27bb8:	461a      	mov	r2, r3
   27bba:	4b0a      	ldr	r3, [pc, #40]	; (27be4 <appAdvStart+0x154>)
   27bbc:	4413      	add	r3, r2
   27bbe:	2203      	movs	r2, #3
   27bc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   27bc4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27bc8:	3301      	adds	r3, #1
   27bca:	f88d 3017 	strb.w	r3, [sp, #23]
   27bce:	f89d 2017 	ldrb.w	r2, [sp, #23]
   27bd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27bd6:	429a      	cmp	r2, r3
   27bd8:	d3e9      	bcc.n	27bae <appAdvStart+0x11e>
  }
}
   27bda:	b006      	add	sp, #24
   27bdc:	bd10      	pop	{r4, pc}
   27bde:	bf00      	nop
   27be0:	10009814 	.word	0x10009814
   27be4:	1000989c 	.word	0x1000989c

00027be8 <appAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   27be8:	b500      	push	{lr}
   27bea:	b085      	sub	sp, #20
   27bec:	4603      	mov	r3, r0
   27bee:	9100      	str	r1, [sp, #0]
   27bf0:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t i;

  /* if number of advertising sets is 0 */
  if (numSets == 0)
   27bf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27bf8:	2b00      	cmp	r3, #0
   27bfa:	d114      	bne.n	27c26 <appAdvStop+0x3e>
  {
    /* stop all advertising sets */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   27bfc:	2300      	movs	r3, #0
   27bfe:	f88d 300f 	strb.w	r3, [sp, #15]
   27c02:	e00b      	b.n	27c1c <appAdvStop+0x34>
    {
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   27c04:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27c08:	4a1d      	ldr	r2, [pc, #116]	; (27c80 <appAdvStop+0x98>)
   27c0a:	4413      	add	r3, r2
   27c0c:	2203      	movs	r2, #3
   27c0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   27c12:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27c16:	3301      	adds	r3, #1
   27c18:	f88d 300f 	strb.w	r3, [sp, #15]
   27c1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27c20:	2b00      	cmp	r3, #0
   27c22:	d0ef      	beq.n	27c04 <appAdvStop+0x1c>
   27c24:	e019      	b.n	27c5a <appAdvStop+0x72>
    }
  }
  else
  {
    for (i = 0; i < numSets; i++)
   27c26:	2300      	movs	r3, #0
   27c28:	f88d 300f 	strb.w	r3, [sp, #15]
   27c2c:	e00f      	b.n	27c4e <appAdvStop+0x66>
    {
      WSF_ASSERT(pAdvHandles[i] < DM_NUM_ADV_SETS);

      /* stop advertising */
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   27c2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27c32:	9a00      	ldr	r2, [sp, #0]
   27c34:	4413      	add	r3, r2
   27c36:	781b      	ldrb	r3, [r3, #0]
   27c38:	461a      	mov	r2, r3
   27c3a:	4b11      	ldr	r3, [pc, #68]	; (27c80 <appAdvStop+0x98>)
   27c3c:	4413      	add	r3, r2
   27c3e:	2203      	movs	r2, #3
   27c40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < numSets; i++)
   27c44:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27c48:	3301      	adds	r3, #1
   27c4a:	f88d 300f 	strb.w	r3, [sp, #15]
   27c4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   27c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27c56:	429a      	cmp	r2, r3
   27c58:	d3e9      	bcc.n	27c2e <appAdvStop+0x46>
    }
  }

  /* if no advertising set is active */
  if (!AppSlaveIsAdvertising())
   27c5a:	f000 f9c9 	bl	27ff0 <AppSlaveIsAdvertising>
   27c5e:	4603      	mov	r3, r0
   27c60:	2b00      	cmp	r3, #0
   27c62:	d103      	bne.n	27c6c <appAdvStop+0x84>
  {
    appSlaveCb.discMode = APP_MODE_NONE;
   27c64:	4b06      	ldr	r3, [pc, #24]	; (27c80 <appAdvStop+0x98>)
   27c66:	22ff      	movs	r2, #255	; 0xff
   27c68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }

  DmAdvStop(numSets, pAdvHandles);
   27c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27c70:	9900      	ldr	r1, [sp, #0]
   27c72:	4618      	mov	r0, r3
   27c74:	f7ec fe60 	bl	14938 <DmAdvStop>
}
   27c78:	bf00      	nop
   27c7a:	b005      	add	sp, #20
   27c7c:	f85d fb04 	ldr.w	pc, [sp], #4
   27c80:	1000989c 	.word	0x1000989c

00027c84 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   27c84:	b500      	push	{lr}
   27c86:	b089      	sub	sp, #36	; 0x24
   27c88:	9104      	str	r1, [sp, #16]
   27c8a:	9203      	str	r2, [sp, #12]
   27c8c:	9302      	str	r3, [sp, #8]
   27c8e:	4603      	mov	r3, r0
   27c90:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   27c94:	4b29      	ldr	r3, [pc, #164]	; (27d3c <appSlaveAdvStart+0xb8>)
   27c96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   27c9a:	f88d 301e 	strb.w	r3, [sp, #30]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   27c9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   27ca2:	2b02      	cmp	r3, #2
   27ca4:	d114      	bne.n	27cd0 <appSlaveAdvStart+0x4c>
  {
    if (AppDbCheckBonded() == FALSE)
   27ca6:	f7eb fc41 	bl	1352c <AppDbCheckBonded>
   27caa:	4603      	mov	r3, r0
   27cac:	2b00      	cmp	r3, #0
   27cae:	d107      	bne.n	27cc0 <appSlaveAdvStart+0x3c>
    {
      AppSetBondable(TRUE);
   27cb0:	2001      	movs	r0, #1
   27cb2:	f000 f973 	bl	27f9c <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   27cb6:	4b21      	ldr	r3, [pc, #132]	; (27d3c <appSlaveAdvStart+0xb8>)
   27cb8:	2201      	movs	r2, #1
   27cba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   27cbe:	e00c      	b.n	27cda <appSlaveAdvStart+0x56>
    }
    else
    {
      AppSetBondable(FALSE);
   27cc0:	2000      	movs	r0, #0
   27cc2:	f000 f96b 	bl	27f9c <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   27cc6:	4b1d      	ldr	r3, [pc, #116]	; (27d3c <appSlaveAdvStart+0xb8>)
   27cc8:	2200      	movs	r2, #0
   27cca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   27cce:	e004      	b.n	27cda <appSlaveAdvStart+0x56>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   27cd0:	4a1a      	ldr	r2, [pc, #104]	; (27d3c <appSlaveAdvStart+0xb8>)
   27cd2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   27cd6:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   27cda:	4b18      	ldr	r3, [pc, #96]	; (27d3c <appSlaveAdvStart+0xb8>)
   27cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   27ce0:	f89d 201e 	ldrb.w	r2, [sp, #30]
   27ce4:	429a      	cmp	r2, r3
   27ce6:	d01a      	beq.n	27d1e <appSlaveAdvStart+0x9a>
  {
    for (i = 0; i < numSets; i++)
   27ce8:	2300      	movs	r3, #0
   27cea:	f88d 301f 	strb.w	r3, [sp, #31]
   27cee:	e010      	b.n	27d12 <appSlaveAdvStart+0x8e>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   27cf0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27cf4:	9a04      	ldr	r2, [sp, #16]
   27cf6:	4413      	add	r3, r2
   27cf8:	781b      	ldrb	r3, [r3, #0]
   27cfa:	4a10      	ldr	r2, [pc, #64]	; (27d3c <appSlaveAdvStart+0xb8>)
   27cfc:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
   27d00:	4611      	mov	r1, r2
   27d02:	4618      	mov	r0, r3
   27d04:	f7fe ff46 	bl	26b94 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   27d08:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27d0c:	3301      	adds	r3, #1
   27d0e:	f88d 301f 	strb.w	r3, [sp, #31]
   27d12:	f89d 201f 	ldrb.w	r2, [sp, #31]
   27d16:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27d1a:	429a      	cmp	r2, r3
   27d1c:	d3e8      	bcc.n	27cf0 <appSlaveAdvStart+0x6c>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   27d1e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   27d22:	2301      	movs	r3, #1
   27d24:	9301      	str	r3, [sp, #4]
   27d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d28:	9300      	str	r3, [sp, #0]
   27d2a:	9b02      	ldr	r3, [sp, #8]
   27d2c:	9a03      	ldr	r2, [sp, #12]
   27d2e:	9904      	ldr	r1, [sp, #16]
   27d30:	f7ff feae 	bl	27a90 <appAdvStart>
}
   27d34:	bf00      	nop
   27d36:	b009      	add	sp, #36	; 0x24
   27d38:	f85d fb04 	ldr.w	pc, [sp], #4
   27d3c:	1000989c 	.word	0x1000989c

00027d40 <appConnAccept>:
 */
/*************************************************************************************************/
dmConnId_t appConnAccept(uint8_t advHandle, uint8_t advType, uint16_t interval, uint16_t duration,
                         uint8_t maxEaEvents, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl,
                         bool_t cfgAdvData)
{
   27d40:	b510      	push	{r4, lr}
   27d42:	b086      	sub	sp, #24
   27d44:	4604      	mov	r4, r0
   27d46:	4608      	mov	r0, r1
   27d48:	4611      	mov	r1, r2
   27d4a:	461a      	mov	r2, r3
   27d4c:	4623      	mov	r3, r4
   27d4e:	f88d 3017 	strb.w	r3, [sp, #23]
   27d52:	4603      	mov	r3, r0
   27d54:	f88d 3016 	strb.w	r3, [sp, #22]
   27d58:	460b      	mov	r3, r1
   27d5a:	f8ad 3014 	strh.w	r3, [sp, #20]
   27d5e:	4613      	mov	r3, r2
   27d60:	f8ad 3012 	strh.w	r3, [sp, #18]
  /* if not already advertising and asked to enter direct connectable mode */
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   27d64:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27d68:	4a4a      	ldr	r2, [pc, #296]	; (27e94 <appConnAccept+0x154>)
   27d6a:	4413      	add	r3, r2
   27d6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   27d70:	2b02      	cmp	r3, #2
   27d72:	f240 808b 	bls.w	27e8c <appConnAccept+0x14c>
   27d76:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27d7a:	2b01      	cmp	r3, #1
   27d7c:	d004      	beq.n	27d88 <appConnAccept+0x48>
      ((advType == DM_ADV_CONN_DIRECT)                    ||
   27d7e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27d82:	2b04      	cmp	r3, #4
   27d84:	f040 8082 	bne.w	27e8c <appConnAccept+0x14c>
       (advType == DM_ADV_CONN_DIRECT_LO_DUTY)))
  {
    /* if this advertising state is being used or high duty cycle directed advertising */
    if ((interval > 0) || (advType == DM_ADV_CONN_DIRECT))
   27d88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27d8c:	2b00      	cmp	r3, #0
   27d8e:	d103      	bne.n	27d98 <appConnAccept+0x58>
   27d90:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27d94:	2b01      	cmp	r3, #1
   27d96:	d179      	bne.n	27e8c <appConnAccept+0x14c>
    {
      /* if LL Privacy has been enabled or peer address is RPA */
      if (DmLlPrivEnabled() || DM_RAND_ADDR_RPA(pAddr, addrType))
   27d98:	f7ee fd32 	bl	16800 <DmLlPrivEnabled>
   27d9c:	4603      	mov	r3, r0
   27d9e:	2b00      	cmp	r3, #0
   27da0:	d10a      	bne.n	27db8 <appConnAccept+0x78>
   27da2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   27da6:	2b01      	cmp	r3, #1
   27da8:	d111      	bne.n	27dce <appConnAccept+0x8e>
   27daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27dac:	3305      	adds	r3, #5
   27dae:	781b      	ldrb	r3, [r3, #0]
   27db0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27db4:	2b40      	cmp	r3, #64	; 0x40
   27db6:	d10a      	bne.n	27dce <appConnAccept+0x8e>
      {
        /* if LL address resolution is not supported on peer device */
        if ((dbHdl == APP_DB_HDL_NONE) || !AppDbGetPeerAddrRes(dbHdl))
   27db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27dba:	2b00      	cmp	r3, #0
   27dbc:	d005      	beq.n	27dca <appConnAccept+0x8a>
   27dbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27dc0:	f7eb fe17 	bl	139f2 <AppDbGetPeerAddrRes>
   27dc4:	4603      	mov	r3, r0
   27dc6:	2b00      	cmp	r3, #0
   27dc8:	d101      	bne.n	27dce <appConnAccept+0x8e>
        {
          /* refuse directed advertising */
          return DM_CONN_ID_NONE;
   27dca:	2300      	movs	r3, #0
   27dcc:	e05f      	b.n	27e8e <appConnAccept+0x14e>
        }
      }

      /* if high duty cycle directed advertising */
      if (advType == DM_ADV_CONN_DIRECT)
   27dce:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27dd2:	2b01      	cmp	r3, #1
   27dd4:	d10d      	bne.n	27df2 <appConnAccept+0xb2>
      {
        /* for high duty cycle directed advertising (<= 3.75 ms advertising interval):
         * - min and max advertising intervals are not used
         * - duration must be less than or equal to 1.28 seconds and cannot be 0
         */
        if ((duration > HCI_ADV_DIRECTED_MAX_DURATION) || (duration == 0))
   27dd6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   27dda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   27dde:	d803      	bhi.n	27de8 <appConnAccept+0xa8>
   27de0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   27de4:	2b00      	cmp	r3, #0
   27de6:	d10d      	bne.n	27e04 <appConnAccept+0xc4>
        {
          duration = HCI_ADV_DIRECTED_MAX_DURATION;
   27de8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   27dec:	f8ad 3012 	strh.w	r3, [sp, #18]
   27df0:	e008      	b.n	27e04 <appConnAccept+0xc4>
        }
      }
      else
      {
        /* set min and max advertising intervals */
        DmAdvSetInterval(advHandle, interval, interval);
   27df2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   27df6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   27dfa:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27dfe:	4618      	mov	r0, r3
   27e00:	f7ec fdd4 	bl	149ac <DmAdvSetInterval>
      }

      /* set advertising parameters */
      DmAdvConfig(advHandle, advType, addrType, pAddr);
   27e04:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   27e08:	f89d 1016 	ldrb.w	r1, [sp, #22]
   27e0c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   27e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27e12:	f7ec fcc5 	bl	147a0 <DmAdvConfig>

      /* if advertising data to be configured but hasn't been synced */
      if (cfgAdvData && !appSlaveCb.advDataSynced[advHandle])
   27e16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   27e1a:	2b00      	cmp	r3, #0
   27e1c:	d022      	beq.n	27e64 <appConnAccept+0x124>
   27e1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27e22:	4a1c      	ldr	r2, [pc, #112]	; (27e94 <appConnAccept+0x154>)
   27e24:	4413      	add	r3, r2
   27e26:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   27e2a:	2b00      	cmp	r3, #0
   27e2c:	d11a      	bne.n	27e64 <appConnAccept+0x124>
      {
        /* set extended connectable directed advertising data */
        appSetAdvScanData(advHandle, APP_MODE_CONNECTABLE);
   27e2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27e32:	2100      	movs	r1, #0
   27e34:	4618      	mov	r0, r3
   27e36:	f7fe ff8d 	bl	26d54 <appSetAdvScanData>

        /* if maximum connectable advertising data allowed by Controller has been sent */
        if (appSlaveCb.advDataOffset[advHandle][APP_MODE_2_ADV_LOC(APP_MODE_CONNECTABLE)] >=
   27e3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27e3e:	4a15      	ldr	r2, [pc, #84]	; (27e94 <appConnAccept+0x154>)
   27e40:	3304      	adds	r3, #4
   27e42:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
            appSlaveCb.maxAdvDataLen[advHandle])
   27e46:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27e4a:	4912      	ldr	r1, [pc, #72]	; (27e94 <appConnAccept+0x154>)
   27e4c:	3314      	adds	r3, #20
   27e4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
        if (appSlaveCb.advDataOffset[advHandle][APP_MODE_2_ADV_LOC(APP_MODE_CONNECTABLE)] >=
   27e52:	429a      	cmp	r2, r3
   27e54:	d306      	bcc.n	27e64 <appConnAccept+0x124>
        {
          appSlaveCb.advDataSynced[advHandle] = TRUE;
   27e56:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27e5a:	4a0e      	ldr	r2, [pc, #56]	; (27e94 <appConnAccept+0x154>)
   27e5c:	4413      	add	r3, r2
   27e5e:	2201      	movs	r2, #1
   27e60:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        }
      }

      /* accept connection */
      return DmConnAccept(DM_CLIENT_ID_APP, advHandle, advType, duration, maxEaEvents, addrType,
   27e64:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   27e68:	f89d 2016 	ldrb.w	r2, [sp, #22]
   27e6c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   27e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27e72:	9302      	str	r3, [sp, #8]
   27e74:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   27e78:	9301      	str	r3, [sp, #4]
   27e7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   27e7e:	9300      	str	r3, [sp, #0]
   27e80:	4603      	mov	r3, r0
   27e82:	2003      	movs	r0, #3
   27e84:	f7ee f994 	bl	161b0 <DmConnAccept>
   27e88:	4603      	mov	r3, r0
   27e8a:	e000      	b.n	27e8e <appConnAccept+0x14e>
                          pAddr);
    }
  }

  return DM_CONN_ID_NONE;
   27e8c:	2300      	movs	r3, #0
}
   27e8e:	4618      	mov	r0, r3
   27e90:	b006      	add	sp, #24
   27e92:	bd10      	pop	{r4, pc}
   27e94:	1000989c 	.word	0x1000989c

00027e98 <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   27e98:	b500      	push	{lr}
   27e9a:	b085      	sub	sp, #20
   27e9c:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   27e9e:	9b01      	ldr	r3, [sp, #4]
   27ea0:	881b      	ldrh	r3, [r3, #0]
   27ea2:	3b01      	subs	r3, #1
   27ea4:	015b      	lsls	r3, r3, #5
   27ea6:	4a3c      	ldr	r2, [pc, #240]	; (27f98 <AppSlaveSecProcDmMsg+0x100>)
   27ea8:	4413      	add	r3, r2
   27eaa:	9303      	str	r3, [sp, #12]

  switch(pMsg->hdr.event)
   27eac:	9b01      	ldr	r3, [sp, #4]
   27eae:	789b      	ldrb	r3, [r3, #2]
   27eb0:	3b27      	subs	r3, #39	; 0x27
   27eb2:	2b18      	cmp	r3, #24
   27eb4:	d86a      	bhi.n	27f8c <AppSlaveSecProcDmMsg+0xf4>
   27eb6:	a201      	add	r2, pc, #4	; (adr r2, 27ebc <AppSlaveSecProcDmMsg+0x24>)
   27eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27ebc:	00027f21 	.word	0x00027f21
   27ec0:	00027f2b 	.word	0x00027f2b
   27ec4:	00027f8d 	.word	0x00027f8d
   27ec8:	00027f35 	.word	0x00027f35
   27ecc:	00027f3f 	.word	0x00027f3f
   27ed0:	00027f49 	.word	0x00027f49
   27ed4:	00027f8d 	.word	0x00027f8d
   27ed8:	00027f8d 	.word	0x00027f8d
   27edc:	00027f53 	.word	0x00027f53
   27ee0:	00027f67 	.word	0x00027f67
   27ee4:	00027f5d 	.word	0x00027f5d
   27ee8:	00027f8d 	.word	0x00027f8d
   27eec:	00027f8d 	.word	0x00027f8d
   27ef0:	00027f8d 	.word	0x00027f8d
   27ef4:	00027f8d 	.word	0x00027f8d
   27ef8:	00027f8d 	.word	0x00027f8d
   27efc:	00027f8d 	.word	0x00027f8d
   27f00:	00027f8d 	.word	0x00027f8d
   27f04:	00027f8d 	.word	0x00027f8d
   27f08:	00027f79 	.word	0x00027f79
   27f0c:	00027f83 	.word	0x00027f83
   27f10:	00027f8d 	.word	0x00027f8d
   27f14:	00027f8d 	.word	0x00027f8d
   27f18:	00027f8d 	.word	0x00027f8d
   27f1c:	00027f71 	.word	0x00027f71
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   27f20:	9903      	ldr	r1, [sp, #12]
   27f22:	9801      	ldr	r0, [sp, #4]
   27f24:	f7ff f9be 	bl	272a4 <appSlaveSecConnOpen>
      break;
   27f28:	e031      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   27f2a:	9903      	ldr	r1, [sp, #12]
   27f2c:	9801      	ldr	r0, [sp, #4]
   27f2e:	f7ff f9f9 	bl	27324 <appSecConnClose>
      break;
   27f32:	e02c      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   27f34:	9903      	ldr	r1, [sp, #12]
   27f36:	9801      	ldr	r0, [sp, #4]
   27f38:	f7ff fab8 	bl	274ac <appSecPairCmpl>
      break;
   27f3c:	e027      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   27f3e:	9903      	ldr	r1, [sp, #12]
   27f40:	9801      	ldr	r0, [sp, #4]
   27f42:	f7ff fae5 	bl	27510 <appSecPairFailed>
      break;
   27f46:	e022      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   27f48:	9903      	ldr	r1, [sp, #12]
   27f4a:	9801      	ldr	r0, [sp, #4]
   27f4c:	f7ff fae6 	bl	2751c <appSecEncryptInd>
      break;
   27f50:	e01d      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   27f52:	9903      	ldr	r1, [sp, #12]
   27f54:	9801      	ldr	r0, [sp, #4]
   27f56:	f7ff fa89 	bl	2746c <appSecStoreKey>
      break;
   27f5a:	e018      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   27f5c:	9903      	ldr	r1, [sp, #12]
   27f5e:	9801      	ldr	r0, [sp, #4]
   27f60:	f7ff f9f2 	bl	27348 <appSecPairInd>
      break;
   27f64:	e013      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   27f66:	9903      	ldr	r1, [sp, #12]
   27f68:	9801      	ldr	r0, [sp, #4]
   27f6a:	f7ff faeb 	bl	27544 <appSecFindLtk>
      break;
   27f6e:	e00e      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   27f70:	9801      	ldr	r0, [sp, #4]
   27f72:	f7ff fb25 	bl	275c0 <appPrivSetAddrResEnableInd>
      break;
   27f76:	e00a      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   27f78:	9903      	ldr	r1, [sp, #12]
   27f7a:	9801      	ldr	r0, [sp, #4]
   27f7c:	f7ff fb31 	bl	275e2 <appPrivAddDevToResListInd>
      break;
   27f80:	e005      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   27f82:	9903      	ldr	r1, [sp, #12]
   27f84:	9801      	ldr	r0, [sp, #4]
   27f86:	f7ff fb42 	bl	2760e <appPrivRemDevFromResListInd>
      break;
   27f8a:	e000      	b.n	27f8e <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   27f8c:	bf00      	nop
  }
}
   27f8e:	bf00      	nop
   27f90:	b005      	add	sp, #20
   27f92:	f85d fb04 	ldr.w	pc, [sp], #4
   27f96:	bf00      	nop
   27f98:	1000983c 	.word	0x1000983c

00027f9c <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   27f9c:	b082      	sub	sp, #8
   27f9e:	4603      	mov	r3, r0
   27fa0:	f88d 3007 	strb.w	r3, [sp, #7]
  appSlaveCb.bondable = bondable;
   27fa4:	4a03      	ldr	r2, [pc, #12]	; (27fb4 <AppSetBondable+0x18>)
   27fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27faa:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   27fae:	bf00      	nop
   27fb0:	b002      	add	sp, #8
   27fb2:	4770      	bx	lr
   27fb4:	1000989c 	.word	0x1000989c

00027fb8 <AppSlaveSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecurityReq(dmConnId_t connId)
{
   27fb8:	b500      	push	{lr}
   27fba:	b083      	sub	sp, #12
   27fbc:	4603      	mov	r3, r0
   27fbe:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE)
   27fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27fc6:	4618      	mov	r0, r3
   27fc8:	f7ed ff84 	bl	15ed4 <DmConnSecLevel>
   27fcc:	4603      	mov	r3, r0
   27fce:	2b00      	cmp	r3, #0
   27fd0:	d108      	bne.n	27fe4 <AppSlaveSecurityReq+0x2c>
  {
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   27fd2:	4b06      	ldr	r3, [pc, #24]	; (27fec <AppSlaveSecurityReq+0x34>)
   27fd4:	681b      	ldr	r3, [r3, #0]
   27fd6:	781a      	ldrb	r2, [r3, #0]
   27fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27fdc:	4611      	mov	r1, r2
   27fde:	4618      	mov	r0, r3
   27fe0:	f7ef f9db 	bl	1739a <DmSecSlaveReq>
  }
}
   27fe4:	bf00      	nop
   27fe6:	b003      	add	sp, #12
   27fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   27fec:	1000982c 	.word	0x1000982c

00027ff0 <AppSlaveIsAdvertising>:
 *
 *  \return TRUE if device's advertising. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppSlaveIsAdvertising(void)
{
   27ff0:	b082      	sub	sp, #8
  uint8_t i;

  /* for each advertising set */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   27ff2:	2300      	movs	r3, #0
   27ff4:	f88d 3007 	strb.w	r3, [sp, #7]
   27ff8:	e00e      	b.n	28018 <AppSlaveIsAdvertising+0x28>
  {
    /* if advertising */
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   27ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27ffe:	4a0a      	ldr	r2, [pc, #40]	; (28028 <AppSlaveIsAdvertising+0x38>)
   28000:	4413      	add	r3, r2
   28002:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   28006:	2b02      	cmp	r3, #2
   28008:	d801      	bhi.n	2800e <AppSlaveIsAdvertising+0x1e>
    {
      return TRUE;
   2800a:	2301      	movs	r3, #1
   2800c:	e009      	b.n	28022 <AppSlaveIsAdvertising+0x32>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   2800e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28012:	3301      	adds	r3, #1
   28014:	f88d 3007 	strb.w	r3, [sp, #7]
   28018:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2801c:	2b00      	cmp	r3, #0
   2801e:	d0ec      	beq.n	27ffa <AppSlaveIsAdvertising+0xa>
    }
  }

  return FALSE;
   28020:	2300      	movs	r3, #0
}
   28022:	4618      	mov	r0, r3
   28024:	b002      	add	sp, #8
   28026:	4770      	bx	lr
   28028:	1000989c 	.word	0x1000989c

0002802c <AppSlaveClearAllBondingInfo>:
 *  \Note   This API should not be used when Advertising (other than periodic advertising) is
 *          enabled. Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppSlaveClearAllBondingInfo(void)
{
   2802c:	b508      	push	{r3, lr}
  /* clear all bonding info */
  AppClearAllBondingInfo();
   2802e:	f7fe fb83 	bl	26738 <AppClearAllBondingInfo>

  /* make device bondable */
  AppSetBondable(TRUE);
   28032:	2001      	movs	r0, #1
   28034:	f7ff ffb2 	bl	27f9c <AppSetBondable>
}
   28038:	bf00      	nop
   2803a:	bd08      	pop	{r3, pc}

0002803c <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   2803c:	b500      	push	{lr}
   2803e:	b085      	sub	sp, #20
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   28040:	4b17      	ldr	r3, [pc, #92]	; (280a0 <appSlaveLegAdvStart+0x64>)
   28042:	681a      	ldr	r2, [r3, #0]
   28044:	4b17      	ldr	r3, [pc, #92]	; (280a4 <appSlaveLegAdvStart+0x68>)
   28046:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2804a:	005b      	lsls	r3, r3, #1
   2804c:	4413      	add	r3, r2
   2804e:	88db      	ldrh	r3, [r3, #6]
   28050:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* if this advertising state is being used */
  if (interval > 0)
   28054:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28058:	2b00      	cmp	r3, #0
   2805a:	d019      	beq.n	28090 <appSlaveLegAdvStart+0x54>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2805c:	2300      	movs	r3, #0
   2805e:	f88d 300f 	strb.w	r3, [sp, #15]
    maxEaEvents = 0;
   28062:	2300      	movs	r3, #0
   28064:	f88d 300e 	strb.w	r3, [sp, #14]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   28068:	4b0d      	ldr	r3, [pc, #52]	; (280a0 <appSlaveLegAdvStart+0x64>)
   2806a:	681a      	ldr	r2, [r3, #0]
   2806c:	4b0d      	ldr	r3, [pc, #52]	; (280a4 <appSlaveLegAdvStart+0x68>)
   2806e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   28072:	005b      	lsls	r3, r3, #1
   28074:	18d0      	adds	r0, r2, r3
   28076:	aa03      	add	r2, sp, #12
   28078:	f10d 010f 	add.w	r1, sp, #15
   2807c:	2301      	movs	r3, #1
   2807e:	9301      	str	r3, [sp, #4]
   28080:	f10d 030e 	add.w	r3, sp, #14
   28084:	9300      	str	r3, [sp, #0]
   28086:	4603      	mov	r3, r0
   28088:	2001      	movs	r0, #1
   2808a:	f7ff fd01 	bl	27a90 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   2808e:	e003      	b.n	28098 <appSlaveLegAdvStart+0x5c>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   28090:	4b04      	ldr	r3, [pc, #16]	; (280a4 <appSlaveLegAdvStart+0x68>)
   28092:	2203      	movs	r2, #3
   28094:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   28098:	bf00      	nop
   2809a:	b005      	add	sp, #20
   2809c:	f85d fb04 	ldr.w	pc, [sp], #4
   280a0:	10009838 	.word	0x10009838
   280a4:	1000989c 	.word	0x1000989c

000280a8 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   280a8:	b500      	push	{lr}
   280aa:	b083      	sub	sp, #12
   280ac:	9001      	str	r0, [sp, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   280ae:	4b07      	ldr	r3, [pc, #28]	; (280cc <appSlaveLegAdvTypeChanged+0x24>)
   280b0:	2200      	movs	r2, #0
   280b2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   280b6:	4b05      	ldr	r3, [pc, #20]	; (280cc <appSlaveLegAdvTypeChanged+0x24>)
   280b8:	2200      	movs	r2, #0
   280ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   280be:	f7ff ffbd 	bl	2803c <appSlaveLegAdvStart>
}
   280c2:	bf00      	nop
   280c4:	b003      	add	sp, #12
   280c6:	f85d fb04 	ldr.w	pc, [sp], #4
   280ca:	bf00      	nop
   280cc:	1000989c 	.word	0x1000989c

000280d0 <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   280d0:	b500      	push	{lr}
   280d2:	b083      	sub	sp, #12
   280d4:	9001      	str	r0, [sp, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   280d6:	4b09      	ldr	r3, [pc, #36]	; (280fc <appSlaveNextLegAdvState+0x2c>)
   280d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   280dc:	3301      	adds	r3, #1
   280de:	b2da      	uxtb	r2, r3
   280e0:	4b06      	ldr	r3, [pc, #24]	; (280fc <appSlaveNextLegAdvState+0x2c>)
   280e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   280e6:	4b05      	ldr	r3, [pc, #20]	; (280fc <appSlaveNextLegAdvState+0x2c>)
   280e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   280ec:	2b02      	cmp	r3, #2
   280ee:	d801      	bhi.n	280f4 <appSlaveNextLegAdvState+0x24>
  {
    appSlaveLegAdvStart();
   280f0:	f7ff ffa4 	bl	2803c <appSlaveLegAdvStart>
  }
}
   280f4:	bf00      	nop
   280f6:	b003      	add	sp, #12
   280f8:	f85d fb04 	ldr.w	pc, [sp], #4
   280fc:	1000989c 	.word	0x1000989c

00028100 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   28100:	b500      	push	{lr}
   28102:	b083      	sub	sp, #12
   28104:	9001      	str	r0, [sp, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   28106:	9b01      	ldr	r3, [sp, #4]
   28108:	789b      	ldrb	r3, [r3, #2]
   2810a:	2b48      	cmp	r3, #72	; 0x48
   2810c:	d103      	bne.n	28116 <appSlaveLegAdvStop+0x16>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   2810e:	9b01      	ldr	r3, [sp, #4]
   28110:	791b      	ldrb	r3, [r3, #4]
   28112:	2b00      	cmp	r3, #0
   28114:	d00c      	beq.n	28130 <appSlaveLegAdvStop+0x30>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   28116:	4b08      	ldr	r3, [pc, #32]	; (28138 <appSlaveLegAdvStop+0x38>)
   28118:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   2811c:	2b00      	cmp	r3, #0
   2811e:	d003      	beq.n	28128 <appSlaveLegAdvStop+0x28>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   28120:	9801      	ldr	r0, [sp, #4]
   28122:	f7ff ffc1 	bl	280a8 <appSlaveLegAdvTypeChanged>
   28126:	e004      	b.n	28132 <appSlaveLegAdvStop+0x32>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   28128:	9801      	ldr	r0, [sp, #4]
   2812a:	f7ff ffd1 	bl	280d0 <appSlaveNextLegAdvState>
   2812e:	e000      	b.n	28132 <appSlaveLegAdvStop+0x32>
      return;
   28130:	bf00      	nop
  }
}
   28132:	b003      	add	sp, #12
   28134:	f85d fb04 	ldr.w	pc, [sp], #4
   28138:	1000989c 	.word	0x1000989c

0002813c <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   2813c:	b500      	push	{lr}
   2813e:	b083      	sub	sp, #12
   28140:	9001      	str	r0, [sp, #4]
  /* if connection closed */
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   28142:	9b01      	ldr	r3, [sp, #4]
   28144:	789b      	ldrb	r3, [r3, #2]
   28146:	2b28      	cmp	r3, #40	; 0x28
   28148:	d109      	bne.n	2815e <appSlaveLegAdvRestart+0x22>
  {
    /* if connectable directed advertising failed to establish connection or was cancelled */
    if (appSlaveCb.advDirected)
   2814a:	4b15      	ldr	r3, [pc, #84]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   2814c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   28150:	2b00      	cmp	r3, #0
   28152:	d016      	beq.n	28182 <appSlaveLegAdvRestart+0x46>
    {
      appSlaveCb.advDirected = FALSE;
   28154:	4b12      	ldr	r3, [pc, #72]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   28156:	2200      	movs	r2, #0
   28158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return;
   2815c:	e01c      	b.n	28198 <appSlaveLegAdvRestart+0x5c>
    }
  }
  /* else if connection opened */
  else if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   2815e:	9b01      	ldr	r3, [sp, #4]
   28160:	789b      	ldrb	r3, [r3, #2]
   28162:	2b27      	cmp	r3, #39	; 0x27
   28164:	d10d      	bne.n	28182 <appSlaveLegAdvRestart+0x46>
  {
    /* if connectable directed advertising */
    if (appSlaveCb.advDirected)
   28166:	4b0e      	ldr	r3, [pc, #56]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   28168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   2816c:	2b00      	cmp	r3, #0
   2816e:	d004      	beq.n	2817a <appSlaveLegAdvRestart+0x3e>
    {
      appSlaveCb.advDirected = FALSE;
   28170:	4b0b      	ldr	r3, [pc, #44]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   28172:	2200      	movs	r2, #0
   28174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return;
   28178:	e00e      	b.n	28198 <appSlaveLegAdvRestart+0x5c>
    }

    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   2817a:	4b09      	ldr	r3, [pc, #36]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   2817c:	2203      	movs	r2, #3
   2817e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   28182:	4b07      	ldr	r3, [pc, #28]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   28184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   28188:	2b03      	cmp	r3, #3
   2818a:	d105      	bne.n	28198 <appSlaveLegAdvRestart+0x5c>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   2818c:	4b04      	ldr	r3, [pc, #16]	; (281a0 <appSlaveLegAdvRestart+0x64>)
   2818e:	2200      	movs	r2, #0
   28190:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   28194:	f7ff ff52 	bl	2803c <appSlaveLegAdvStart>
  }
}
   28198:	b003      	add	sp, #12
   2819a:	f85d fb04 	ldr.w	pc, [sp], #4
   2819e:	bf00      	nop
   281a0:	1000989c 	.word	0x1000989c

000281a4 <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   281a4:	b508      	push	{r3, lr}
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   281a6:	4b0c      	ldr	r3, [pc, #48]	; (281d8 <appSlaveAdvMode+0x34>)
   281a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   281aa:	2b00      	cmp	r3, #0
   281ac:	d107      	bne.n	281be <appSlaveAdvMode+0x1a>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   281ae:	4b0a      	ldr	r3, [pc, #40]	; (281d8 <appSlaveAdvMode+0x34>)
   281b0:	4a0a      	ldr	r2, [pc, #40]	; (281dc <appSlaveAdvMode+0x38>)
   281b2:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   281b4:	4b08      	ldr	r3, [pc, #32]	; (281d8 <appSlaveAdvMode+0x34>)
   281b6:	4a0a      	ldr	r2, [pc, #40]	; (281e0 <appSlaveAdvMode+0x3c>)
   281b8:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   281ba:	2301      	movs	r3, #1
   281bc:	e00a      	b.n	281d4 <appSlaveAdvMode+0x30>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   281be:	4b06      	ldr	r3, [pc, #24]	; (281d8 <appSlaveAdvMode+0x34>)
   281c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   281c2:	4a06      	ldr	r2, [pc, #24]	; (281dc <appSlaveAdvMode+0x38>)
   281c4:	4293      	cmp	r3, r2
   281c6:	d101      	bne.n	281cc <appSlaveAdvMode+0x28>
  {
    return TRUE;
   281c8:	2301      	movs	r3, #1
   281ca:	e003      	b.n	281d4 <appSlaveAdvMode+0x30>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   281cc:	4805      	ldr	r0, [pc, #20]	; (281e4 <appSlaveAdvMode+0x40>)
   281ce:	f7e5 fc3b 	bl	da48 <WsfTrace>

  return FALSE;
   281d2:	2300      	movs	r3, #0
}
   281d4:	4618      	mov	r0, r3
   281d6:	bd08      	pop	{r3, pc}
   281d8:	1000989c 	.word	0x1000989c
   281dc:	00028101 	.word	0x00028101
   281e0:	0002813d 	.word	0x0002813d
   281e4:	0002c10c 	.word	0x0002c10c

000281e8 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   281e8:	b500      	push	{lr}
   281ea:	b085      	sub	sp, #20
   281ec:	4603      	mov	r3, r0
   281ee:	9202      	str	r2, [sp, #8]
   281f0:	f88d 300f 	strb.w	r3, [sp, #15]
   281f4:	460b      	mov	r3, r1
   281f6:	f88d 300e 	strb.w	r3, [sp, #14]
  if (appSlaveAdvMode())
   281fa:	f7ff ffd3 	bl	281a4 <appSlaveAdvMode>
   281fe:	4603      	mov	r3, r0
   28200:	2b00      	cmp	r3, #0
   28202:	d013      	beq.n	2822c <AppAdvSetData+0x44>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   28204:	f89d 300e 	ldrb.w	r3, [sp, #14]
   28208:	2b1f      	cmp	r3, #31
   2820a:	d902      	bls.n	28212 <AppAdvSetData+0x2a>
    {
      len = HCI_ADV_DATA_LEN;
   2820c:	231f      	movs	r3, #31
   2820e:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   28212:	f89d 300e 	ldrb.w	r3, [sp, #14]
   28216:	b29a      	uxth	r2, r3
   28218:	f89d 100f 	ldrb.w	r1, [sp, #15]
   2821c:	231f      	movs	r3, #31
   2821e:	9301      	str	r3, [sp, #4]
   28220:	231f      	movs	r3, #31
   28222:	9300      	str	r3, [sp, #0]
   28224:	9b02      	ldr	r3, [sp, #8]
   28226:	2000      	movs	r0, #0
   28228:	f7ff fbbe 	bl	279a8 <appAdvSetData>
  }
}
   2822c:	bf00      	nop
   2822e:	b005      	add	sp, #20
   28230:	f85d fb04 	ldr.w	pc, [sp], #4

00028234 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   28234:	b500      	push	{lr}
   28236:	b089      	sub	sp, #36	; 0x24
   28238:	4603      	mov	r3, r0
   2823a:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   2823e:	f7ff ffb1 	bl	281a4 <appSlaveAdvMode>
   28242:	4603      	mov	r3, r0
   28244:	2b00      	cmp	r3, #0
   28246:	d01d      	beq.n	28284 <AppAdvStart+0x50>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   28248:	2300      	movs	r3, #0
   2824a:	f88d 301f 	strb.w	r3, [sp, #31]
    maxEaEvents = 0;
   2824e:	2300      	movs	r3, #0
   28250:	f88d 301e 	strb.w	r3, [sp, #30]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   28254:	4b0d      	ldr	r3, [pc, #52]	; (2828c <AppAdvStart+0x58>)
   28256:	2200      	movs	r2, #0
   28258:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   2825c:	4b0c      	ldr	r3, [pc, #48]	; (28290 <AppAdvStart+0x5c>)
   2825e:	681b      	ldr	r3, [r3, #0]
   28260:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   28262:	4b0b      	ldr	r3, [pc, #44]	; (28290 <AppAdvStart+0x5c>)
   28264:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   28266:	4618      	mov	r0, r3
   28268:	f10d 011f 	add.w	r1, sp, #31
   2826c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   28270:	9302      	str	r3, [sp, #8]
   28272:	2301      	movs	r3, #1
   28274:	9301      	str	r3, [sp, #4]
   28276:	f10d 031e 	add.w	r3, sp, #30
   2827a:	9300      	str	r3, [sp, #0]
   2827c:	4603      	mov	r3, r0
   2827e:	2001      	movs	r0, #1
   28280:	f7ff fd00 	bl	27c84 <appSlaveAdvStart>
  }
}
   28284:	bf00      	nop
   28286:	b009      	add	sp, #36	; 0x24
   28288:	f85d fb04 	ldr.w	pc, [sp], #4
   2828c:	1000989c 	.word	0x1000989c
   28290:	10009838 	.word	0x10009838

00028294 <AppAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStop(void)
{
   28294:	b500      	push	{lr}
   28296:	b083      	sub	sp, #12
  uint8_t advHandle;

  if (appSlaveAdvMode())
   28298:	f7ff ff84 	bl	281a4 <appSlaveAdvMode>
   2829c:	4603      	mov	r3, r0
   2829e:	2b00      	cmp	r3, #0
   282a0:	d008      	beq.n	282b4 <AppAdvStop+0x20>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   282a2:	2300      	movs	r3, #0
   282a4:	f88d 3007 	strb.w	r3, [sp, #7]

    appAdvStop(1, &advHandle);
   282a8:	f10d 0307 	add.w	r3, sp, #7
   282ac:	4619      	mov	r1, r3
   282ae:	2001      	movs	r0, #1
   282b0:	f7ff fc9a 	bl	27be8 <appAdvStop>
  }
}
   282b4:	bf00      	nop
   282b6:	b003      	add	sp, #12
   282b8:	f85d fb04 	ldr.w	pc, [sp], #4

000282bc <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   282bc:	b500      	push	{lr}
   282be:	b083      	sub	sp, #12
   282c0:	4603      	mov	r3, r0
   282c2:	9100      	str	r1, [sp, #0]
   282c4:	f88d 3007 	strb.w	r3, [sp, #7]
  appSlaveCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = peerAddrType;
   282c8:	4a06      	ldr	r2, [pc, #24]	; (282e4 <AppSetAdvPeerAddr+0x28>)
   282ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   282ce:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pPeerAddr);
   282d2:	9900      	ldr	r1, [sp, #0]
   282d4:	4804      	ldr	r0, [pc, #16]	; (282e8 <AppSetAdvPeerAddr+0x2c>)
   282d6:	f7ec f8e7 	bl	144a8 <BdaCpy>
}
   282da:	bf00      	nop
   282dc:	b003      	add	sp, #12
   282de:	f85d fb04 	ldr.w	pc, [sp], #4
   282e2:	bf00      	nop
   282e4:	1000989c 	.word	0x1000989c
   282e8:	100098cc 	.word	0x100098cc

000282ec <AppConnAccept>:
 *
 *  \return Connection identifier.
 */
 /************************************************************************************************/
dmConnId_t AppConnAccept(uint8_t advType, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   282ec:	b500      	push	{lr}
   282ee:	b08d      	sub	sp, #52	; 0x34
   282f0:	9208      	str	r2, [sp, #32]
   282f2:	9307      	str	r3, [sp, #28]
   282f4:	4603      	mov	r3, r0
   282f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   282fa:	460b      	mov	r3, r1
   282fc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dmConnId_t  connId;

  if (appSlaveAdvMode())
   28300:	f7ff ff50 	bl	281a4 <appSlaveAdvMode>
   28304:	4603      	mov	r3, r0
   28306:	2b00      	cmp	r3, #0
   28308:	d022      	beq.n	28350 <AppConnAccept+0x64>
  {
    /* advertising data is not supported with legacy directed advertising */
    connId = appConnAccept(DM_ADV_HANDLE_DEFAULT, advType, pAppAdvCfg->advInterval[APP_ADV_STATE1],
   2830a:	4b16      	ldr	r3, [pc, #88]	; (28364 <AppConnAccept+0x78>)
   2830c:	681b      	ldr	r3, [r3, #0]
   2830e:	88da      	ldrh	r2, [r3, #6]
                           pAppAdvCfg->advDuration[APP_ADV_STATE1], 0, addrType, pAddr, dbHdl,
   28310:	4b14      	ldr	r3, [pc, #80]	; (28364 <AppConnAccept+0x78>)
   28312:	681b      	ldr	r3, [r3, #0]
    connId = appConnAccept(DM_ADV_HANDLE_DEFAULT, advType, pAppAdvCfg->advInterval[APP_ADV_STATE1],
   28314:	8818      	ldrh	r0, [r3, #0]
   28316:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   2831a:	2300      	movs	r3, #0
   2831c:	9304      	str	r3, [sp, #16]
   2831e:	9b07      	ldr	r3, [sp, #28]
   28320:	9303      	str	r3, [sp, #12]
   28322:	9b08      	ldr	r3, [sp, #32]
   28324:	9302      	str	r3, [sp, #8]
   28326:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   2832a:	9301      	str	r3, [sp, #4]
   2832c:	2300      	movs	r3, #0
   2832e:	9300      	str	r3, [sp, #0]
   28330:	4603      	mov	r3, r0
   28332:	2000      	movs	r0, #0
   28334:	f7ff fd04 	bl	27d40 <appConnAccept>
   28338:	4603      	mov	r3, r0
   2833a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                           FALSE);
    if (connId != DM_CONN_ID_NONE)
   2833e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   28342:	2b00      	cmp	r3, #0
   28344:	d007      	beq.n	28356 <AppConnAccept+0x6a>
    {
      appSlaveCb.advDirected = TRUE;
   28346:	4b08      	ldr	r3, [pc, #32]	; (28368 <AppConnAccept+0x7c>)
   28348:	2201      	movs	r2, #1
   2834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   2834e:	e002      	b.n	28356 <AppConnAccept+0x6a>
    }
  }
  else
  {
    /* wrong advertising mode */
    connId = DM_CONN_ID_NONE;
   28350:	2300      	movs	r3, #0
   28352:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  }

  return connId;
   28356:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
}
   2835a:	4618      	mov	r0, r3
   2835c:	b00d      	add	sp, #52	; 0x34
   2835e:	f85d fb04 	ldr.w	pc, [sp], #4
   28362:	bf00      	nop
   28364:	10009838 	.word	0x10009838
   28368:	1000989c 	.word	0x1000989c

0002836c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   2836c:	4811      	ldr	r0, [pc, #68]	; (283b4 <zero_loop+0x12>)
   2836e:	4912      	ldr	r1, [pc, #72]	; (283b8 <zero_loop+0x16>)
   28370:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   28372:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   28376:	4811      	ldr	r0, [pc, #68]	; (283bc <zero_loop+0x1a>)
   28378:	6801      	ldr	r1, [r0, #0]
   2837a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   2837e:	6001      	str	r1, [r0, #0]
   28380:	f3bf 8f4f 	dsb	sy
   28384:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   28388:	480d      	ldr	r0, [pc, #52]	; (283c0 <zero_loop+0x1e>)
   2838a:	490e      	ldr	r1, [pc, #56]	; (283c4 <zero_loop+0x22>)
   2838c:	4a0e      	ldr	r2, [pc, #56]	; (283c8 <zero_loop+0x26>)

0002838e <copy_loop>:
   2838e:	f850 3b04 	ldr.w	r3, [r0], #4
   28392:	f841 3b04 	str.w	r3, [r1], #4
   28396:	4291      	cmp	r1, r2
   28398:	dbf9      	blt.n	2838e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   2839a:	480c      	ldr	r0, [pc, #48]	; (283cc <zero_loop+0x2a>)
   2839c:	490c      	ldr	r1, [pc, #48]	; (283d0 <zero_loop+0x2e>)
   2839e:	f04f 0200 	mov.w	r2, #0

000283a2 <zero_loop>:
   283a2:	4288      	cmp	r0, r1
   283a4:	bfb8      	it	lt
   283a6:	f840 2b04 	strlt.w	r2, [r0], #4
   283aa:	dbfa      	blt.n	283a2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   283ac:	f7e4 fb7a 	bl	caa4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   283b0:	be00      	bkpt	0x0000
}
   283b2:	bf00      	nop
   283b4:	e000ed08 	.word	0xe000ed08
   283b8:	0000c000 	.word	0x0000c000
   283bc:	e000ed88 	.word	0xe000ed88
   283c0:	0002eb60 	.word	0x0002eb60
   283c4:	10002b00 	.word	0x10002b00
   283c8:	100035e8 	.word	0x100035e8
   283cc:	100035e8 	.word	0x100035e8
   283d0:	100099b0 	.word	0x100099b0

000283d4 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   283d4:	e7fe      	b.n	283d4 <NMI_Handler>

000283d6 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   283d6:	e7fe      	b.n	283d6 <BusFault_Handler>

000283d8 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   283d8:	e7fe      	b.n	283d8 <DebugMon_Handler>
	...

000283dc <memcmp>:
   283dc:	2a03      	cmp	r2, #3
   283de:	b470      	push	{r4, r5, r6}
   283e0:	d912      	bls.n	28408 <memcmp+0x2c>
   283e2:	ea40 0501 	orr.w	r5, r0, r1
   283e6:	07ad      	lsls	r5, r5, #30
   283e8:	4604      	mov	r4, r0
   283ea:	460b      	mov	r3, r1
   283ec:	d11e      	bne.n	2842c <memcmp+0x50>
   283ee:	4619      	mov	r1, r3
   283f0:	4620      	mov	r0, r4
   283f2:	f853 5b04 	ldr.w	r5, [r3], #4
   283f6:	f854 6b04 	ldr.w	r6, [r4], #4
   283fa:	42ae      	cmp	r6, r5
   283fc:	d116      	bne.n	2842c <memcmp+0x50>
   283fe:	3a04      	subs	r2, #4
   28400:	2a03      	cmp	r2, #3
   28402:	4620      	mov	r0, r4
   28404:	4619      	mov	r1, r3
   28406:	d8f2      	bhi.n	283ee <memcmp+0x12>
   28408:	1e56      	subs	r6, r2, #1
   2840a:	b1a2      	cbz	r2, 28436 <memcmp+0x5a>
   2840c:	3901      	subs	r1, #1
   2840e:	1e44      	subs	r4, r0, #1
   28410:	e001      	b.n	28416 <memcmp+0x3a>
   28412:	18c3      	adds	r3, r0, r3
   28414:	d00c      	beq.n	28430 <memcmp+0x54>
   28416:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   2841a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2841e:	4295      	cmp	r5, r2
   28420:	eba6 0304 	sub.w	r3, r6, r4
   28424:	d0f5      	beq.n	28412 <memcmp+0x36>
   28426:	1aa8      	subs	r0, r5, r2
   28428:	bc70      	pop	{r4, r5, r6}
   2842a:	4770      	bx	lr
   2842c:	1e56      	subs	r6, r2, #1
   2842e:	e7ed      	b.n	2840c <memcmp+0x30>
   28430:	4618      	mov	r0, r3
   28432:	bc70      	pop	{r4, r5, r6}
   28434:	4770      	bx	lr
   28436:	4610      	mov	r0, r2
   28438:	e7f6      	b.n	28428 <memcmp+0x4c>
   2843a:	bf00      	nop

0002843c <memset>:
   2843c:	b4f0      	push	{r4, r5, r6, r7}
   2843e:	0786      	lsls	r6, r0, #30
   28440:	d046      	beq.n	284d0 <memset+0x94>
   28442:	1e54      	subs	r4, r2, #1
   28444:	2a00      	cmp	r2, #0
   28446:	d03c      	beq.n	284c2 <memset+0x86>
   28448:	b2ca      	uxtb	r2, r1
   2844a:	4603      	mov	r3, r0
   2844c:	e001      	b.n	28452 <memset+0x16>
   2844e:	3c01      	subs	r4, #1
   28450:	d337      	bcc.n	284c2 <memset+0x86>
   28452:	f803 2b01 	strb.w	r2, [r3], #1
   28456:	079d      	lsls	r5, r3, #30
   28458:	d1f9      	bne.n	2844e <memset+0x12>
   2845a:	2c03      	cmp	r4, #3
   2845c:	d92a      	bls.n	284b4 <memset+0x78>
   2845e:	b2cd      	uxtb	r5, r1
   28460:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   28464:	2c0f      	cmp	r4, #15
   28466:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2846a:	d934      	bls.n	284d6 <memset+0x9a>
   2846c:	f1a4 0210 	sub.w	r2, r4, #16
   28470:	f022 0c0f 	bic.w	ip, r2, #15
   28474:	f103 0720 	add.w	r7, r3, #32
   28478:	0916      	lsrs	r6, r2, #4
   2847a:	4467      	add	r7, ip
   2847c:	f103 0210 	add.w	r2, r3, #16
   28480:	e942 5504 	strd	r5, r5, [r2, #-16]
   28484:	e942 5502 	strd	r5, r5, [r2, #-8]
   28488:	3210      	adds	r2, #16
   2848a:	42ba      	cmp	r2, r7
   2848c:	d1f8      	bne.n	28480 <memset+0x44>
   2848e:	1c72      	adds	r2, r6, #1
   28490:	f014 0f0c 	tst.w	r4, #12
   28494:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   28498:	f004 060f 	and.w	r6, r4, #15
   2849c:	d013      	beq.n	284c6 <memset+0x8a>
   2849e:	1f33      	subs	r3, r6, #4
   284a0:	f023 0303 	bic.w	r3, r3, #3
   284a4:	3304      	adds	r3, #4
   284a6:	4413      	add	r3, r2
   284a8:	f842 5b04 	str.w	r5, [r2], #4
   284ac:	4293      	cmp	r3, r2
   284ae:	d1fb      	bne.n	284a8 <memset+0x6c>
   284b0:	f006 0403 	and.w	r4, r6, #3
   284b4:	b12c      	cbz	r4, 284c2 <memset+0x86>
   284b6:	b2ca      	uxtb	r2, r1
   284b8:	441c      	add	r4, r3
   284ba:	f803 2b01 	strb.w	r2, [r3], #1
   284be:	429c      	cmp	r4, r3
   284c0:	d1fb      	bne.n	284ba <memset+0x7e>
   284c2:	bcf0      	pop	{r4, r5, r6, r7}
   284c4:	4770      	bx	lr
   284c6:	4634      	mov	r4, r6
   284c8:	4613      	mov	r3, r2
   284ca:	2c00      	cmp	r4, #0
   284cc:	d1f3      	bne.n	284b6 <memset+0x7a>
   284ce:	e7f8      	b.n	284c2 <memset+0x86>
   284d0:	4614      	mov	r4, r2
   284d2:	4603      	mov	r3, r0
   284d4:	e7c1      	b.n	2845a <memset+0x1e>
   284d6:	461a      	mov	r2, r3
   284d8:	4626      	mov	r6, r4
   284da:	e7e0      	b.n	2849e <memset+0x62>

000284dc <am_hal_ble_blocking_transfer.part.7>:
   284dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284e0:	4db7      	ldr	r5, [pc, #732]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   284e2:	f8d5 7220 	ldr.w	r7, [r5, #544]	; 0x220
   284e6:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   284ea:	f36f 13c7 	bfc	r3, #7, #1
   284ee:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   284f2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   284f6:	f36f 2308 	bfc	r3, #8, #1
   284fa:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   284fe:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   28502:	f36f 0300 	bfc	r3, #0, #1
   28506:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2850a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2850e:	f36f 0341 	bfc	r3, #1, #1
   28512:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   28516:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   2851a:	f043 0301 	orr.w	r3, r3, #1
   2851e:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   28522:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   28526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2852a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   2852e:	7a8b      	ldrb	r3, [r1, #10]
   28530:	2b01      	cmp	r3, #1
   28532:	b085      	sub	sp, #20
   28534:	460e      	mov	r6, r1
   28536:	4604      	mov	r4, r0
   28538:	d00a      	beq.n	28550 <am_hal_ble_blocking_transfer.part.7+0x74>
   2853a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2853e:	0618      	lsls	r0, r3, #24
   28540:	f100 8130 	bmi.w	287a4 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   28544:	489f      	ldr	r0, [pc, #636]	; (287c4 <am_hal_ble_blocking_transfer.part.7+0x2e8>)
   28546:	f8c5 7220 	str.w	r7, [r5, #544]	; 0x220
   2854a:	b005      	add	sp, #20
   2854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28550:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   28554:	2b00      	cmp	r3, #0
   28556:	f000 80f3 	beq.w	28740 <am_hal_ble_blocking_transfer.part.7+0x264>
   2855a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   2855e:	2b00      	cmp	r3, #0
   28560:	f000 8213 	beq.w	2898a <am_hal_ble_blocking_transfer.part.7+0x4ae>
   28564:	2200      	movs	r2, #0
   28566:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   2856a:	b1ab      	cbz	r3, 28598 <am_hal_ble_blocking_transfer.part.7+0xbc>
   2856c:	f8df 9250 	ldr.w	r9, [pc, #592]	; 287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>
   28570:	f240 152d 	movw	r5, #301	; 0x12d
   28574:	f04f 0800 	mov.w	r8, #0
   28578:	e006      	b.n	28588 <am_hal_ble_blocking_transfer.part.7+0xac>
   2857a:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
   2857e:	20a0      	movs	r0, #160	; 0xa0
   28580:	f001 fdf4 	bl	2a16c <am_hal_flash_delay>
   28584:	3d01      	subs	r5, #1
   28586:	d007      	beq.n	28598 <am_hal_ble_blocking_transfer.part.7+0xbc>
   28588:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   2858c:	2b00      	cmp	r3, #0
   2858e:	d1f4      	bne.n	2857a <am_hal_ble_blocking_transfer.part.7+0x9e>
   28590:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   28594:	0718      	lsls	r0, r3, #28
   28596:	d4f2      	bmi.n	2857e <am_hal_ble_blocking_transfer.part.7+0xa2>
   28598:	4a89      	ldr	r2, [pc, #548]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   2859a:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   2859e:	f043 0302 	orr.w	r3, r3, #2
   285a2:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   285a6:	2050      	movs	r0, #80	; 0x50
   285a8:	f001 fde0 	bl	2a16c <am_hal_flash_delay>
   285ac:	6823      	ldr	r3, [r4, #0]
   285ae:	4a86      	ldr	r2, [pc, #536]	; (287c8 <am_hal_ble_blocking_transfer.part.7+0x2ec>)
   285b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   285b4:	4293      	cmp	r3, r2
   285b6:	f000 81fa 	beq.w	289ae <am_hal_ble_blocking_transfer.part.7+0x4d2>
   285ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   285be:	f8df 9200 	ldr.w	r9, [pc, #512]	; 287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>
   285c2:	2500      	movs	r5, #0
   285c4:	46aa      	mov	sl, r5
   285c6:	2b00      	cmp	r3, #0
   285c8:	f040 80d2 	bne.w	28770 <am_hal_ble_blocking_transfer.part.7+0x294>
   285cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   285d0:	2b00      	cmp	r3, #0
   285d2:	f040 80b8 	bne.w	28746 <am_hal_ble_blocking_transfer.part.7+0x26a>
   285d6:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   285da:	0719      	lsls	r1, r3, #28
   285dc:	f140 80b8 	bpl.w	28750 <am_hal_ble_blocking_transfer.part.7+0x274>
   285e0:	f001 ffca 	bl	2a578 <am_hal_interrupt_master_disable>
   285e4:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
   285e8:	9002      	str	r0, [sp, #8]
   285ea:	9802      	ldr	r0, [sp, #8]
   285ec:	f1b8 0f00 	cmp.w	r8, #0
   285f0:	f040 80c1 	bne.w	28776 <am_hal_ble_blocking_transfer.part.7+0x29a>
   285f4:	2301      	movs	r3, #1
   285f6:	6463      	str	r3, [r4, #68]	; 0x44
   285f8:	f001 ffc2 	bl	2a580 <am_hal_interrupt_master_set>
   285fc:	4b70      	ldr	r3, [pc, #448]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   285fe:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   28602:	f368 0241 	bfi	r2, r8, #1, #1
   28606:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   2860a:	7b33      	ldrb	r3, [r6, #12]
   2860c:	2b00      	cmp	r3, #0
   2860e:	f000 80df 	beq.w	287d0 <am_hal_ble_blocking_transfer.part.7+0x2f4>
   28612:	2301      	movs	r3, #1
   28614:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   28618:	f104 080c 	add.w	r8, r4, #12
   2861c:	6833      	ldr	r3, [r6, #0]
   2861e:	6872      	ldr	r2, [r6, #4]
   28620:	68b0      	ldr	r0, [r6, #8]
   28622:	68f1      	ldr	r1, [r6, #12]
   28624:	60e3      	str	r3, [r4, #12]
   28626:	f8c8 2004 	str.w	r2, [r8, #4]
   2862a:	f8c8 0008 	str.w	r0, [r8, #8]
   2862e:	f8c8 100c 	str.w	r1, [r8, #12]
   28632:	6933      	ldr	r3, [r6, #16]
   28634:	6972      	ldr	r2, [r6, #20]
   28636:	f8c8 2014 	str.w	r2, [r8, #20]
   2863a:	f8c8 3010 	str.w	r3, [r8, #16]
   2863e:	f001 ff9b 	bl	2a578 <am_hal_interrupt_master_disable>
   28642:	9001      	str	r0, [sp, #4]
   28644:	6823      	ldr	r3, [r4, #0]
   28646:	4a60      	ldr	r2, [pc, #384]	; (287c8 <am_hal_ble_blocking_transfer.part.7+0x2ec>)
   28648:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2864c:	4293      	cmp	r3, r2
   2864e:	f000 81d2 	beq.w	289f6 <am_hal_ble_blocking_transfer.part.7+0x51a>
   28652:	7ab3      	ldrb	r3, [r6, #10]
   28654:	2b01      	cmp	r3, #1
   28656:	f000 81b2 	beq.w	289be <am_hal_ble_blocking_transfer.part.7+0x4e2>
   2865a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   2865c:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   28660:	f8df c164 	ldr.w	ip, [pc, #356]	; 287c8 <am_hal_ble_blocking_transfer.part.7+0x2ec>
   28664:	4956      	ldr	r1, [pc, #344]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   28666:	f04f 0e00 	mov.w	lr, #0
   2866a:	45a9      	cmp	r9, r5
   2866c:	d926      	bls.n	286bc <am_hal_ble_blocking_transfer.part.7+0x1e0>
   2866e:	6823      	ldr	r3, [r4, #0]
   28670:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28674:	4563      	cmp	r3, ip
   28676:	d1f8      	bne.n	2866a <am_hal_ble_blocking_transfer.part.7+0x18e>
   28678:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   2867c:	f3c0 4007 	ubfx	r0, r0, #16, #8
   28680:	2803      	cmp	r0, #3
   28682:	d9f2      	bls.n	2866a <am_hal_ble_blocking_transfer.part.7+0x18e>
   28684:	4581      	cmp	r9, r0
   28686:	bf94      	ite	ls
   28688:	ebc5 0009 	rsbls	r0, r5, r9
   2868c:	f020 0003 	bichi.w	r0, r0, #3
   28690:	68e2      	ldr	r2, [r4, #12]
   28692:	f025 0303 	bic.w	r3, r5, #3
   28696:	b168      	cbz	r0, 286b4 <am_hal_ble_blocking_transfer.part.7+0x1d8>
   28698:	441a      	add	r2, r3
   2869a:	2300      	movs	r3, #0
   2869c:	3304      	adds	r3, #4
   2869e:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   286a2:	f842 5b04 	str.w	r5, [r2], #4
   286a6:	4283      	cmp	r3, r0
   286a8:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   286ac:	d3f6      	bcc.n	2869c <am_hal_ble_blocking_transfer.part.7+0x1c0>
   286ae:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   286b0:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   286b4:	4405      	add	r5, r0
   286b6:	45a9      	cmp	r9, r5
   286b8:	63e5      	str	r5, [r4, #60]	; 0x3c
   286ba:	d8d8      	bhi.n	2866e <am_hal_ble_blocking_transfer.part.7+0x192>
   286bc:	9801      	ldr	r0, [sp, #4]
   286be:	f001 ff5f 	bl	2a580 <am_hal_interrupt_master_set>
   286c2:	4b3f      	ldr	r3, [pc, #252]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   286c4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   286c8:	07d0      	lsls	r0, r2, #31
   286ca:	d40d      	bmi.n	286e8 <am_hal_ble_blocking_transfer.part.7+0x20c>
   286cc:	4699      	mov	r9, r3
   286ce:	f242 7510 	movw	r5, #10000	; 0x2710
   286d2:	e002      	b.n	286da <am_hal_ble_blocking_transfer.part.7+0x1fe>
   286d4:	3d01      	subs	r5, #1
   286d6:	f000 8176 	beq.w	289c6 <am_hal_ble_blocking_transfer.part.7+0x4ea>
   286da:	2010      	movs	r0, #16
   286dc:	f001 fd46 	bl	2a16c <am_hal_flash_delay>
   286e0:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   286e4:	07d9      	lsls	r1, r3, #31
   286e6:	d5f5      	bpl.n	286d4 <am_hal_ble_blocking_transfer.part.7+0x1f8>
   286e8:	4a35      	ldr	r2, [pc, #212]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   286ea:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   286ee:	f043 0301 	orr.w	r3, r3, #1
   286f2:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   286f6:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   286fa:	2300      	movs	r3, #0
   286fc:	f041 0102 	orr.w	r1, r1, #2
   28700:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   28704:	f8c8 3000 	str.w	r3, [r8]
   28708:	f8c8 3004 	str.w	r3, [r8, #4]
   2870c:	f8c8 3008 	str.w	r3, [r8, #8]
   28710:	f8c8 300c 	str.w	r3, [r8, #12]
   28714:	f8c8 3010 	str.w	r3, [r8, #16]
   28718:	f8c8 3014 	str.w	r3, [r8, #20]
   2871c:	63e3      	str	r3, [r4, #60]	; 0x3c
   2871e:	7ab3      	ldrb	r3, [r6, #10]
   28720:	2b01      	cmp	r3, #1
   28722:	f000 8139 	beq.w	28998 <am_hal_ble_blocking_transfer.part.7+0x4bc>
   28726:	2b02      	cmp	r3, #2
   28728:	f000 8126 	beq.w	28978 <am_hal_ble_blocking_transfer.part.7+0x49c>
   2872c:	2300      	movs	r3, #0
   2872e:	4a24      	ldr	r2, [pc, #144]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   28730:	4618      	mov	r0, r3
   28732:	f8c2 7220 	str.w	r7, [r2, #544]	; 0x220
   28736:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   2873a:	b005      	add	sp, #20
   2873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28740:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   28744:	e711      	b.n	2856a <am_hal_ble_blocking_transfer.part.7+0x8e>
   28746:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   2874a:	05da      	lsls	r2, r3, #23
   2874c:	f53f af48 	bmi.w	285e0 <am_hal_ble_blocking_transfer.part.7+0x104>
   28750:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   28754:	d012      	beq.n	2877c <am_hal_ble_blocking_transfer.part.7+0x2a0>
   28756:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   2875a:	061b      	lsls	r3, r3, #24
   2875c:	d40e      	bmi.n	2877c <am_hal_ble_blocking_transfer.part.7+0x2a0>
   2875e:	20a0      	movs	r0, #160	; 0xa0
   28760:	f001 fd04 	bl	2a16c <am_hal_flash_delay>
   28764:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   28768:	3501      	adds	r5, #1
   2876a:	2b00      	cmp	r3, #0
   2876c:	f43f af2e 	beq.w	285cc <am_hal_ble_blocking_transfer.part.7+0xf0>
   28770:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   28774:	e734      	b.n	285e0 <am_hal_ble_blocking_transfer.part.7+0x104>
   28776:	f001 ff03 	bl	2a580 <am_hal_interrupt_master_set>
   2877a:	e7f0      	b.n	2875e <am_hal_ble_blocking_transfer.part.7+0x282>
   2877c:	6823      	ldr	r3, [r4, #0]
   2877e:	4a12      	ldr	r2, [pc, #72]	; (287c8 <am_hal_ble_blocking_transfer.part.7+0x2ec>)
   28780:	4812      	ldr	r0, [pc, #72]	; (287cc <am_hal_ble_blocking_transfer.part.7+0x2f0>)
   28782:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28786:	4293      	cmp	r3, r2
   28788:	4b0d      	ldr	r3, [pc, #52]	; (287c0 <am_hal_ble_blocking_transfer.part.7+0x2e4>)
   2878a:	f000 811e 	beq.w	289ca <am_hal_ble_blocking_transfer.part.7+0x4ee>
   2878e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   28792:	f36f 0241 	bfc	r2, #1, #1
   28796:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   2879a:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   2879e:	b005      	add	sp, #20
   287a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   287a4:	f001 fee8 	bl	2a578 <am_hal_interrupt_master_disable>
   287a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   287ac:	9003      	str	r0, [sp, #12]
   287ae:	9803      	ldr	r0, [sp, #12]
   287b0:	2b00      	cmp	r3, #0
   287b2:	f040 8083 	bne.w	288bc <am_hal_ble_blocking_transfer.part.7+0x3e0>
   287b6:	2301      	movs	r3, #1
   287b8:	6463      	str	r3, [r4, #68]	; 0x44
   287ba:	f001 fee1 	bl	2a580 <am_hal_interrupt_master_set>
   287be:	e724      	b.n	2860a <am_hal_ble_blocking_transfer.part.7+0x12e>
   287c0:	5000c000 	.word	0x5000c000
   287c4:	08000001 	.word	0x08000001
   287c8:	01775230 	.word	0x01775230
   287cc:	08000002 	.word	0x08000002
   287d0:	f104 080c 	add.w	r8, r4, #12
   287d4:	6833      	ldr	r3, [r6, #0]
   287d6:	6872      	ldr	r2, [r6, #4]
   287d8:	68b0      	ldr	r0, [r6, #8]
   287da:	68f1      	ldr	r1, [r6, #12]
   287dc:	60e3      	str	r3, [r4, #12]
   287de:	f8c8 2004 	str.w	r2, [r8, #4]
   287e2:	f8c8 0008 	str.w	r0, [r8, #8]
   287e6:	f8c8 100c 	str.w	r1, [r8, #12]
   287ea:	6933      	ldr	r3, [r6, #16]
   287ec:	6972      	ldr	r2, [r6, #20]
   287ee:	f8c8 2014 	str.w	r2, [r8, #20]
   287f2:	f8c8 3010 	str.w	r3, [r8, #16]
   287f6:	f001 febf 	bl	2a578 <am_hal_interrupt_master_disable>
   287fa:	9001      	str	r0, [sp, #4]
   287fc:	2c00      	cmp	r4, #0
   287fe:	f47f af21 	bne.w	28644 <am_hal_ble_blocking_transfer.part.7+0x168>
   28802:	7ab3      	ldrb	r3, [r6, #10]
   28804:	2b01      	cmp	r3, #1
   28806:	f47f af28 	bne.w	2865a <am_hal_ble_blocking_transfer.part.7+0x17e>
   2880a:	6823      	ldr	r3, [r4, #0]
   2880c:	4a8f      	ldr	r2, [pc, #572]	; (28a4c <am_hal_ble_blocking_transfer.part.7+0x570>)
   2880e:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   28812:	68e5      	ldr	r5, [r4, #12]
   28814:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28818:	4293      	cmp	r3, r2
   2881a:	d075      	beq.n	28908 <am_hal_ble_blocking_transfer.part.7+0x42c>
   2881c:	f1bb 0f00 	cmp.w	fp, #0
   28820:	d029      	beq.n	28876 <am_hal_ble_blocking_transfer.part.7+0x39a>
   28822:	f8df a22c 	ldr.w	sl, [pc, #556]	; 28a50 <am_hal_ble_blocking_transfer.part.7+0x574>
   28826:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   2882a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2882e:	2b03      	cmp	r3, #3
   28830:	d816      	bhi.n	28860 <am_hal_ble_blocking_transfer.part.7+0x384>
   28832:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   28836:	07da      	lsls	r2, r3, #31
   28838:	d41d      	bmi.n	28876 <am_hal_ble_blocking_transfer.part.7+0x39a>
   2883a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 28a5c <am_hal_ble_blocking_transfer.part.7+0x580>
   2883e:	e006      	b.n	2884e <am_hal_ble_blocking_transfer.part.7+0x372>
   28840:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   28844:	07d9      	lsls	r1, r3, #31
   28846:	d416      	bmi.n	28876 <am_hal_ble_blocking_transfer.part.7+0x39a>
   28848:	f1b9 0901 	subs.w	r9, r9, #1
   2884c:	d013      	beq.n	28876 <am_hal_ble_blocking_transfer.part.7+0x39a>
   2884e:	2010      	movs	r0, #16
   28850:	f001 fc8c 	bl	2a16c <am_hal_flash_delay>
   28854:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   28858:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2885c:	2b03      	cmp	r3, #3
   2885e:	d9ef      	bls.n	28840 <am_hal_ble_blocking_transfer.part.7+0x364>
   28860:	f855 2b04 	ldr.w	r2, [r5], #4
   28864:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   28868:	f1bb 0f03 	cmp.w	fp, #3
   2886c:	f1a3 0304 	sub.w	r3, r3, #4
   28870:	f1ab 0b04 	sub.w	fp, fp, #4
   28874:	d879      	bhi.n	2896a <am_hal_ble_blocking_transfer.part.7+0x48e>
   28876:	4b76      	ldr	r3, [pc, #472]	; (28a50 <am_hal_ble_blocking_transfer.part.7+0x574>)
   28878:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   2887c:	07d2      	lsls	r2, r2, #31
   2887e:	d40d      	bmi.n	2889c <am_hal_ble_blocking_transfer.part.7+0x3c0>
   28880:	461d      	mov	r5, r3
   28882:	f44f 69fa 	mov.w	r9, #2000	; 0x7d0
   28886:	e002      	b.n	2888e <am_hal_ble_blocking_transfer.part.7+0x3b2>
   28888:	f1b9 0901 	subs.w	r9, r9, #1
   2888c:	d006      	beq.n	2889c <am_hal_ble_blocking_transfer.part.7+0x3c0>
   2888e:	2010      	movs	r0, #16
   28890:	f001 fc6c 	bl	2a16c <am_hal_flash_delay>
   28894:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
   28898:	07db      	lsls	r3, r3, #31
   2889a:	d5f5      	bpl.n	28888 <am_hal_ble_blocking_transfer.part.7+0x3ac>
   2889c:	6823      	ldr	r3, [r4, #0]
   2889e:	4a6b      	ldr	r2, [pc, #428]	; (28a4c <am_hal_ble_blocking_transfer.part.7+0x570>)
   288a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   288a4:	4293      	cmp	r3, r2
   288a6:	f47f af09 	bne.w	286bc <am_hal_ble_blocking_transfer.part.7+0x1e0>
   288aa:	4b69      	ldr	r3, [pc, #420]	; (28a50 <am_hal_ble_blocking_transfer.part.7+0x574>)
   288ac:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   288b0:	2102      	movs	r1, #2
   288b2:	f361 0283 	bfi	r2, r1, #2, #2
   288b6:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   288ba:	e6ff      	b.n	286bc <am_hal_ble_blocking_transfer.part.7+0x1e0>
   288bc:	f001 fe60 	bl	2a580 <am_hal_interrupt_master_set>
   288c0:	f8c5 7220 	str.w	r7, [r5, #544]	; 0x220
   288c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   288c8:	e63f      	b.n	2854a <am_hal_ble_blocking_transfer.part.7+0x6e>
   288ca:	2000      	movs	r0, #0
   288cc:	4602      	mov	r2, r0
   288ce:	f896 c00c 	ldrb.w	ip, [r6, #12]
   288d2:	f896 e00a 	ldrb.w	lr, [r6, #10]
   288d6:	8935      	ldrh	r5, [r6, #8]
   288d8:	495e      	ldr	r1, [pc, #376]	; (28a54 <am_hal_ble_blocking_transfer.part.7+0x578>)
   288da:	015b      	lsls	r3, r3, #5
   288dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
   288e0:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   288e4:	022d      	lsls	r5, r5, #8
   288e6:	4029      	ands	r1, r5
   288e8:	ea4e 0303 	orr.w	r3, lr, r3
   288ec:	430b      	orrs	r3, r1
   288ee:	4958      	ldr	r1, [pc, #352]	; (28a50 <am_hal_ble_blocking_transfer.part.7+0x574>)
   288f0:	4313      	orrs	r3, r2
   288f2:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   288f6:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   288fa:	7ab3      	ldrb	r3, [r6, #10]
   288fc:	2b01      	cmp	r3, #1
   288fe:	f47f aeac 	bne.w	2865a <am_hal_ble_blocking_transfer.part.7+0x17e>
   28902:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   28906:	68e5      	ldr	r5, [r4, #12]
   28908:	79f2      	ldrb	r2, [r6, #7]
   2890a:	2a03      	cmp	r2, #3
   2890c:	d886      	bhi.n	2881c <am_hal_ble_blocking_transfer.part.7+0x340>
   2890e:	e8df f002 	tbb	[pc, r2]
   28912:	2802      	.short	0x2802
   28914:	1e24      	.short	0x1e24
   28916:	2100      	movs	r1, #0
   28918:	460b      	mov	r3, r1
   2891a:	f896 e00c 	ldrb.w	lr, [r6, #12]
   2891e:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   28922:	484c      	ldr	r0, [pc, #304]	; (28a54 <am_hal_ble_blocking_transfer.part.7+0x578>)
   28924:	0152      	lsls	r2, r2, #5
   28926:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   2892a:	f002 0260 	and.w	r2, r2, #96	; 0x60
   2892e:	f04e 0e01 	orr.w	lr, lr, #1
   28932:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   28936:	ea0c 0000 	and.w	r0, ip, r0
   2893a:	ea4e 0202 	orr.w	r2, lr, r2
   2893e:	4302      	orrs	r2, r0
   28940:	4843      	ldr	r0, [pc, #268]	; (28a50 <am_hal_ble_blocking_transfer.part.7+0x574>)
   28942:	4313      	orrs	r3, r2
   28944:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   28948:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   2894c:	e766      	b.n	2881c <am_hal_ble_blocking_transfer.part.7+0x340>
   2894e:	88b1      	ldrh	r1, [r6, #4]
   28950:	79b3      	ldrb	r3, [r6, #6]
   28952:	ba49      	rev16	r1, r1
   28954:	b289      	uxth	r1, r1
   28956:	061b      	lsls	r3, r3, #24
   28958:	e7df      	b.n	2891a <am_hal_ble_blocking_transfer.part.7+0x43e>
   2895a:	7973      	ldrb	r3, [r6, #5]
   2895c:	7931      	ldrb	r1, [r6, #4]
   2895e:	061b      	lsls	r3, r3, #24
   28960:	e7db      	b.n	2891a <am_hal_ble_blocking_transfer.part.7+0x43e>
   28962:	7933      	ldrb	r3, [r6, #4]
   28964:	2100      	movs	r1, #0
   28966:	061b      	lsls	r3, r3, #24
   28968:	e7d7      	b.n	2891a <am_hal_ble_blocking_transfer.part.7+0x43e>
   2896a:	2b03      	cmp	r3, #3
   2896c:	d968      	bls.n	28a40 <am_hal_ble_blocking_transfer.part.7+0x564>
   2896e:	f1bb 0f00 	cmp.w	fp, #0
   28972:	f47f af75 	bne.w	28860 <am_hal_ble_blocking_transfer.part.7+0x384>
   28976:	e77e      	b.n	28876 <am_hal_ble_blocking_transfer.part.7+0x39a>
   28978:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   2897c:	2b00      	cmp	r3, #0
   2897e:	f43f aed5 	beq.w	2872c <am_hal_ble_blocking_transfer.part.7+0x250>
   28982:	2300      	movs	r3, #0
   28984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   28988:	e6d0      	b.n	2872c <am_hal_ble_blocking_transfer.part.7+0x250>
   2898a:	f64b 3080 	movw	r0, #48000	; 0xbb80
   2898e:	f001 fbed 	bl	2a16c <am_hal_flash_delay>
   28992:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   28996:	e5e5      	b.n	28564 <am_hal_ble_blocking_transfer.part.7+0x88>
   28998:	6823      	ldr	r3, [r4, #0]
   2899a:	492c      	ldr	r1, [pc, #176]	; (28a4c <am_hal_ble_blocking_transfer.part.7+0x570>)
   2899c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   289a0:	428b      	cmp	r3, r1
   289a2:	d045      	beq.n	28a30 <am_hal_ble_blocking_transfer.part.7+0x554>
   289a4:	2301      	movs	r3, #1
   289a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   289aa:	7ab3      	ldrb	r3, [r6, #10]
   289ac:	e6bb      	b.n	28726 <am_hal_ble_blocking_transfer.part.7+0x24a>
   289ae:	4a28      	ldr	r2, [pc, #160]	; (28a50 <am_hal_ble_blocking_transfer.part.7+0x574>)
   289b0:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   289b4:	f043 030c 	orr.w	r3, r3, #12
   289b8:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   289bc:	e5fd      	b.n	285ba <am_hal_ble_blocking_transfer.part.7+0xde>
   289be:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   289c2:	68e5      	ldr	r5, [r4, #12]
   289c4:	e72a      	b.n	2881c <am_hal_ble_blocking_transfer.part.7+0x340>
   289c6:	4824      	ldr	r0, [pc, #144]	; (28a58 <am_hal_ble_blocking_transfer.part.7+0x57c>)
   289c8:	e5bf      	b.n	2854a <am_hal_ble_blocking_transfer.part.7+0x6e>
   289ca:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   289ce:	2102      	movs	r1, #2
   289d0:	f361 0283 	bfi	r2, r1, #2, #2
   289d4:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   289d8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   289dc:	f36f 0241 	bfc	r2, #1, #1
   289e0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   289e4:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   289e8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   289ec:	f361 0283 	bfi	r2, r1, #2, #2
   289f0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   289f4:	e5a9      	b.n	2854a <am_hal_ble_blocking_transfer.part.7+0x6e>
   289f6:	79f3      	ldrb	r3, [r6, #7]
   289f8:	2b03      	cmp	r3, #3
   289fa:	f63f af02 	bhi.w	28802 <am_hal_ble_blocking_transfer.part.7+0x326>
   289fe:	a201      	add	r2, pc, #4	; (adr r2, 28a04 <am_hal_ble_blocking_transfer.part.7+0x528>)
   28a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28a04:	000288cb 	.word	0x000288cb
   28a08:	00028a29 	.word	0x00028a29
   28a0c:	00028a21 	.word	0x00028a21
   28a10:	00028a15 	.word	0x00028a15
   28a14:	88b0      	ldrh	r0, [r6, #4]
   28a16:	79b2      	ldrb	r2, [r6, #6]
   28a18:	ba40      	rev16	r0, r0
   28a1a:	b280      	uxth	r0, r0
   28a1c:	0612      	lsls	r2, r2, #24
   28a1e:	e756      	b.n	288ce <am_hal_ble_blocking_transfer.part.7+0x3f2>
   28a20:	7972      	ldrb	r2, [r6, #5]
   28a22:	7930      	ldrb	r0, [r6, #4]
   28a24:	0612      	lsls	r2, r2, #24
   28a26:	e752      	b.n	288ce <am_hal_ble_blocking_transfer.part.7+0x3f2>
   28a28:	7932      	ldrb	r2, [r6, #4]
   28a2a:	2000      	movs	r0, #0
   28a2c:	0612      	lsls	r2, r2, #24
   28a2e:	e74e      	b.n	288ce <am_hal_ble_blocking_transfer.part.7+0x3f2>
   28a30:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   28a34:	2102      	movs	r1, #2
   28a36:	f361 0383 	bfi	r3, r1, #2, #2
   28a3a:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   28a3e:	e7b1      	b.n	289a4 <am_hal_ble_blocking_transfer.part.7+0x4c8>
   28a40:	f1bb 0f00 	cmp.w	fp, #0
   28a44:	f47f aeef 	bne.w	28826 <am_hal_ble_blocking_transfer.part.7+0x34a>
   28a48:	e715      	b.n	28876 <am_hal_ble_blocking_transfer.part.7+0x39a>
   28a4a:	bf00      	nop
   28a4c:	01775230 	.word	0x01775230
   28a50:	5000c000 	.word	0x5000c000
   28a54:	000fff00 	.word	0x000fff00
   28a58:	08000009 	.word	0x08000009
   28a5c:	0007a120 	.word	0x0007a120

00028a60 <am_hal_ble_initialize>:
   28a60:	b108      	cbz	r0, 28a66 <am_hal_ble_initialize+0x6>
   28a62:	2005      	movs	r0, #5
   28a64:	4770      	bx	lr
   28a66:	b149      	cbz	r1, 28a7c <am_hal_ble_initialize+0x1c>
   28a68:	b4f0      	push	{r4, r5, r6, r7}
   28a6a:	4b19      	ldr	r3, [pc, #100]	; (28ad0 <am_hal_ble_initialize+0x70>)
   28a6c:	78dc      	ldrb	r4, [r3, #3]
   28a6e:	f3c4 0200 	ubfx	r2, r4, #0, #1
   28a72:	b2d0      	uxtb	r0, r2
   28a74:	b120      	cbz	r0, 28a80 <am_hal_ble_initialize+0x20>
   28a76:	2007      	movs	r0, #7
   28a78:	bcf0      	pop	{r4, r5, r6, r7}
   28a7a:	4770      	bx	lr
   28a7c:	2006      	movs	r0, #6
   28a7e:	4770      	bx	lr
   28a80:	f044 0401 	orr.w	r4, r4, #1
   28a84:	70dc      	strb	r4, [r3, #3]
   28a86:	681e      	ldr	r6, [r3, #0]
   28a88:	4f12      	ldr	r7, [pc, #72]	; (28ad4 <am_hal_ble_initialize+0x74>)
   28a8a:	60d8      	str	r0, [r3, #12]
   28a8c:	f367 0617 	bfi	r6, r7, #0, #24
   28a90:	6258      	str	r0, [r3, #36]	; 0x24
   28a92:	6058      	str	r0, [r3, #4]
   28a94:	63d8      	str	r0, [r3, #60]	; 0x3c
   28a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   28a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   28a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   28aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   28aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   28aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   28aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   28ab2:	721a      	strb	r2, [r3, #8]
   28ab4:	601e      	str	r6, [r3, #0]
   28ab6:	6118      	str	r0, [r3, #16]
   28ab8:	6158      	str	r0, [r3, #20]
   28aba:	6198      	str	r0, [r3, #24]
   28abc:	61d8      	str	r0, [r3, #28]
   28abe:	6218      	str	r0, [r3, #32]
   28ac0:	6298      	str	r0, [r3, #40]	; 0x28
   28ac2:	62d8      	str	r0, [r3, #44]	; 0x2c
   28ac4:	6318      	str	r0, [r3, #48]	; 0x30
   28ac6:	6358      	str	r0, [r3, #52]	; 0x34
   28ac8:	6398      	str	r0, [r3, #56]	; 0x38
   28aca:	600b      	str	r3, [r1, #0]
   28acc:	e7d4      	b.n	28a78 <am_hal_ble_initialize+0x18>
   28ace:	bf00      	nop
   28ad0:	100098e4 	.word	0x100098e4
   28ad4:	00775230 	.word	0x00775230

00028ad8 <am_hal_ble_deinitialize>:
   28ad8:	b128      	cbz	r0, 28ae6 <am_hal_ble_deinitialize+0xe>
   28ada:	6803      	ldr	r3, [r0, #0]
   28adc:	4a13      	ldr	r2, [pc, #76]	; (28b2c <am_hal_ble_deinitialize+0x54>)
   28ade:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28ae2:	4293      	cmp	r3, r2
   28ae4:	d001      	beq.n	28aea <am_hal_ble_deinitialize+0x12>
   28ae6:	2002      	movs	r0, #2
   28ae8:	4770      	bx	lr
   28aea:	78c2      	ldrb	r2, [r0, #3]
   28aec:	2300      	movs	r3, #0
   28aee:	f363 0200 	bfi	r2, r3, #0, #1
   28af2:	70c2      	strb	r2, [r0, #3]
   28af4:	6802      	ldr	r2, [r0, #0]
   28af6:	60c3      	str	r3, [r0, #12]
   28af8:	f363 0217 	bfi	r2, r3, #0, #24
   28afc:	6103      	str	r3, [r0, #16]
   28afe:	6143      	str	r3, [r0, #20]
   28b00:	6183      	str	r3, [r0, #24]
   28b02:	61c3      	str	r3, [r0, #28]
   28b04:	6203      	str	r3, [r0, #32]
   28b06:	6043      	str	r3, [r0, #4]
   28b08:	63c3      	str	r3, [r0, #60]	; 0x3c
   28b0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   28b0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   28b12:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   28b16:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   28b1a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   28b1e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   28b22:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   28b26:	6002      	str	r2, [r0, #0]
   28b28:	4618      	mov	r0, r3
   28b2a:	4770      	bx	lr
   28b2c:	01775230 	.word	0x01775230

00028b30 <am_hal_ble_config>:
   28b30:	b128      	cbz	r0, 28b3e <am_hal_ble_config+0xe>
   28b32:	6803      	ldr	r3, [r0, #0]
   28b34:	4a3c      	ldr	r2, [pc, #240]	; (28c28 <am_hal_ble_config+0xf8>)
   28b36:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28b3a:	4293      	cmp	r3, r2
   28b3c:	d001      	beq.n	28b42 <am_hal_ble_config+0x12>
   28b3e:	2002      	movs	r0, #2
   28b40:	4770      	bx	lr
   28b42:	b4f0      	push	{r4, r5, r6, r7}
   28b44:	4b39      	ldr	r3, [pc, #228]	; (28c2c <am_hal_ble_config+0xfc>)
   28b46:	6844      	ldr	r4, [r0, #4]
   28b48:	4d38      	ldr	r5, [pc, #224]	; (28c2c <am_hal_ble_config+0xfc>)
   28b4a:	2203      	movs	r2, #3
   28b4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   28b50:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   28b54:	f36f 4251 	bfc	r2, #17, #1
   28b58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   28b5c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   28b60:	f36f 4210 	bfc	r2, #16, #1
   28b64:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   28b68:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   28b6c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   28b70:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   28b74:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   28b78:	6888      	ldr	r0, [r1, #8]
   28b7a:	f360 220d 	bfi	r2, r0, #8, #6
   28b7e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   28b82:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   28b86:	6848      	ldr	r0, [r1, #4]
   28b88:	f360 0205 	bfi	r2, r0, #0, #6
   28b8c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   28b90:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   28b94:	f042 0201 	orr.w	r2, r2, #1
   28b98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   28b9c:	680b      	ldr	r3, [r1, #0]
   28b9e:	68c8      	ldr	r0, [r1, #12]
   28ba0:	4a23      	ldr	r2, [pc, #140]	; (28c30 <am_hal_ble_config+0x100>)
   28ba2:	021b      	lsls	r3, r3, #8
   28ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   28ba8:	2802      	cmp	r0, #2
   28baa:	bf08      	it	eq
   28bac:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   28bb0:	f043 0301 	orr.w	r3, r3, #1
   28bb4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   28bb8:	68d3      	ldr	r3, [r2, #12]
   28bba:	b2db      	uxtb	r3, r3
   28bbc:	2b12      	cmp	r3, #18
   28bbe:	d009      	beq.n	28bd4 <am_hal_ble_config+0xa4>
   28bc0:	4b1c      	ldr	r3, [pc, #112]	; (28c34 <am_hal_ble_config+0x104>)
   28bc2:	7e8a      	ldrb	r2, [r1, #26]
   28bc4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   28bc8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   28bcc:	2000      	movs	r0, #0
   28bce:	7222      	strb	r2, [r4, #8]
   28bd0:	bcf0      	pop	{r4, r5, r6, r7}
   28bd2:	4770      	bx	lr
   28bd4:	4f18      	ldr	r7, [pc, #96]	; (28c38 <am_hal_ble_config+0x108>)
   28bd6:	68fa      	ldr	r2, [r7, #12]
   28bd8:	687b      	ldr	r3, [r7, #4]
   28bda:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   28bde:	6908      	ldr	r0, [r1, #16]
   28be0:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   28be4:	6908      	ldr	r0, [r1, #16]
   28be6:	0a00      	lsrs	r0, r0, #8
   28be8:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   28bec:	6948      	ldr	r0, [r1, #20]
   28bee:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   28bf2:	6948      	ldr	r0, [r1, #20]
   28bf4:	0a00      	lsrs	r0, r0, #8
   28bf6:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   28bfa:	7e48      	ldrb	r0, [r1, #25]
   28bfc:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   28c00:	7e08      	ldrb	r0, [r1, #24]
   28c02:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   28c06:	b16b      	cbz	r3, 28c24 <am_hal_ble_config+0xf4>
   28c08:	4e0c      	ldr	r6, [pc, #48]	; (28c3c <am_hal_ble_config+0x10c>)
   28c0a:	18d5      	adds	r5, r2, r3
   28c0c:	2300      	movs	r3, #0
   28c0e:	f812 0b01 	ldrb.w	r0, [r2], #1
   28c12:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   28c16:	4295      	cmp	r5, r2
   28c18:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   28c1c:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   28c20:	b29b      	uxth	r3, r3
   28c22:	d1f4      	bne.n	28c0e <am_hal_ble_config+0xde>
   28c24:	60bb      	str	r3, [r7, #8]
   28c26:	e7cb      	b.n	28bc0 <am_hal_ble_config+0x90>
   28c28:	01775230 	.word	0x01775230
   28c2c:	5000c000 	.word	0x5000c000
   28c30:	40020000 	.word	0x40020000
   28c34:	100098e4 	.word	0x100098e4
   28c38:	10002c4c 	.word	0x10002c4c
   28c3c:	0002ce30 	.word	0x0002ce30

00028c40 <am_hal_ble_power_control>:
   28c40:	b538      	push	{r3, r4, r5, lr}
   28c42:	4604      	mov	r4, r0
   28c44:	460d      	mov	r5, r1
   28c46:	f001 fe43 	bl	2a8d0 <am_hal_pwrctrl_blebuck_trim>
   28c4a:	b12c      	cbz	r4, 28c58 <am_hal_ble_power_control+0x18>
   28c4c:	6823      	ldr	r3, [r4, #0]
   28c4e:	4a4d      	ldr	r2, [pc, #308]	; (28d84 <am_hal_ble_power_control+0x144>)
   28c50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28c54:	4293      	cmp	r3, r2
   28c56:	d002      	beq.n	28c5e <am_hal_ble_power_control+0x1e>
   28c58:	2402      	movs	r4, #2
   28c5a:	4620      	mov	r0, r4
   28c5c:	bd38      	pop	{r3, r4, r5, pc}
   28c5e:	b9fd      	cbnz	r5, 28ca0 <am_hal_ble_power_control+0x60>
   28c60:	4b49      	ldr	r3, [pc, #292]	; (28d88 <am_hal_ble_power_control+0x148>)
   28c62:	699b      	ldr	r3, [r3, #24]
   28c64:	05db      	lsls	r3, r3, #23
   28c66:	d454      	bmi.n	28d12 <am_hal_ble_power_control+0xd2>
   28c68:	4d48      	ldr	r5, [pc, #288]	; (28d8c <am_hal_ble_power_control+0x14c>)
   28c6a:	69ab      	ldr	r3, [r5, #24]
   28c6c:	f043 0301 	orr.w	r3, r3, #1
   28c70:	61ab      	str	r3, [r5, #24]
   28c72:	69ab      	ldr	r3, [r5, #24]
   28c74:	f003 0307 	and.w	r3, r3, #7
   28c78:	2b07      	cmp	r3, #7
   28c7a:	d00b      	beq.n	28c94 <am_hal_ble_power_control+0x54>
   28c7c:	4c44      	ldr	r4, [pc, #272]	; (28d90 <am_hal_ble_power_control+0x150>)
   28c7e:	e001      	b.n	28c84 <am_hal_ble_power_control+0x44>
   28c80:	3c01      	subs	r4, #1
   28c82:	d06b      	beq.n	28d5c <am_hal_ble_power_control+0x11c>
   28c84:	2010      	movs	r0, #16
   28c86:	f001 fa71 	bl	2a16c <am_hal_flash_delay>
   28c8a:	69ab      	ldr	r3, [r5, #24]
   28c8c:	f003 0307 	and.w	r3, r3, #7
   28c90:	2b07      	cmp	r3, #7
   28c92:	d1f5      	bne.n	28c80 <am_hal_ble_power_control+0x40>
   28c94:	200e      	movs	r0, #14
   28c96:	f001 fd0d 	bl	2a6b4 <am_hal_pwrctrl_periph_enable>
   28c9a:	b128      	cbz	r0, 28ca8 <am_hal_ble_power_control+0x68>
   28c9c:	4c3d      	ldr	r4, [pc, #244]	; (28d94 <am_hal_ble_power_control+0x154>)
   28c9e:	e7dc      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28ca0:	2d01      	cmp	r5, #1
   28ca2:	d038      	beq.n	28d16 <am_hal_ble_power_control+0xd6>
   28ca4:	2407      	movs	r4, #7
   28ca6:	e7d8      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28ca8:	4b3b      	ldr	r3, [pc, #236]	; (28d98 <am_hal_ble_power_control+0x158>)
   28caa:	4938      	ldr	r1, [pc, #224]	; (28d8c <am_hal_ble_power_control+0x14c>)
   28cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   28cb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   28cb4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   28cb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   28cbc:	f360 02df 	bfi	r2, r0, #3, #29
   28cc0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   28cc4:	68cb      	ldr	r3, [r1, #12]
   28cc6:	b2db      	uxtb	r3, r3
   28cc8:	2b11      	cmp	r3, #17
   28cca:	d949      	bls.n	28d60 <am_hal_ble_power_control+0x120>
   28ccc:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   28cd0:	f043 0320 	orr.w	r3, r3, #32
   28cd4:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   28cd8:	4d2f      	ldr	r5, [pc, #188]	; (28d98 <am_hal_ble_power_control+0x158>)
   28cda:	4830      	ldr	r0, [pc, #192]	; (28d9c <am_hal_ble_power_control+0x15c>)
   28cdc:	f001 fa46 	bl	2a16c <am_hal_flash_delay>
   28ce0:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   28ce4:	f043 0301 	orr.w	r3, r3, #1
   28ce8:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   28cec:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   28cf0:	f3c3 2302 	ubfx	r3, r3, #8, #3
   28cf4:	2b03      	cmp	r3, #3
   28cf6:	d00c      	beq.n	28d12 <am_hal_ble_power_control+0xd2>
   28cf8:	4c29      	ldr	r4, [pc, #164]	; (28da0 <am_hal_ble_power_control+0x160>)
   28cfa:	e001      	b.n	28d00 <am_hal_ble_power_control+0xc0>
   28cfc:	3c01      	subs	r4, #1
   28cfe:	d039      	beq.n	28d74 <am_hal_ble_power_control+0x134>
   28d00:	2010      	movs	r0, #16
   28d02:	f001 fa33 	bl	2a16c <am_hal_flash_delay>
   28d06:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   28d0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
   28d0e:	2b03      	cmp	r3, #3
   28d10:	d1f4      	bne.n	28cfc <am_hal_ble_power_control+0xbc>
   28d12:	2400      	movs	r4, #0
   28d14:	e7a1      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28d16:	4b20      	ldr	r3, [pc, #128]	; (28d98 <am_hal_ble_power_control+0x158>)
   28d18:	481c      	ldr	r0, [pc, #112]	; (28d8c <am_hal_ble_power_control+0x14c>)
   28d1a:	2200      	movs	r2, #0
   28d1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   28d20:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   28d24:	f362 01df 	bfi	r1, r2, #3, #29
   28d28:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   28d2c:	68c3      	ldr	r3, [r0, #12]
   28d2e:	b2db      	uxtb	r3, r3
   28d30:	2b11      	cmp	r3, #17
   28d32:	d919      	bls.n	28d68 <am_hal_ble_power_control+0x128>
   28d34:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   28d38:	f362 1345 	bfi	r3, r2, #5, #1
   28d3c:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   28d40:	4b15      	ldr	r3, [pc, #84]	; (28d98 <am_hal_ble_power_control+0x158>)
   28d42:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   28d46:	f36f 0200 	bfc	r2, #0, #1
   28d4a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   28d4e:	200e      	movs	r0, #14
   28d50:	f001 fcda 	bl	2a708 <am_hal_pwrctrl_periph_disable>
   28d54:	4604      	mov	r4, r0
   28d56:	b178      	cbz	r0, 28d78 <am_hal_ble_power_control+0x138>
   28d58:	4c12      	ldr	r4, [pc, #72]	; (28da4 <am_hal_ble_power_control+0x164>)
   28d5a:	e77e      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28d5c:	4c12      	ldr	r4, [pc, #72]	; (28da8 <am_hal_ble_power_control+0x168>)
   28d5e:	e77c      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28d60:	4b12      	ldr	r3, [pc, #72]	; (28dac <am_hal_ble_power_control+0x16c>)
   28d62:	2204      	movs	r2, #4
   28d64:	601a      	str	r2, [r3, #0]
   28d66:	e7b7      	b.n	28cd8 <am_hal_ble_power_control+0x98>
   28d68:	4a10      	ldr	r2, [pc, #64]	; (28dac <am_hal_ble_power_control+0x16c>)
   28d6a:	6813      	ldr	r3, [r2, #0]
   28d6c:	f023 0304 	bic.w	r3, r3, #4
   28d70:	6013      	str	r3, [r2, #0]
   28d72:	e7e5      	b.n	28d40 <am_hal_ble_power_control+0x100>
   28d74:	4c0e      	ldr	r4, [pc, #56]	; (28db0 <am_hal_ble_power_control+0x170>)
   28d76:	e770      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28d78:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   28d7c:	f001 f9f6 	bl	2a16c <am_hal_flash_delay>
   28d80:	e76b      	b.n	28c5a <am_hal_ble_power_control+0x1a>
   28d82:	bf00      	nop
   28d84:	01775230 	.word	0x01775230
   28d88:	40021000 	.word	0x40021000
   28d8c:	40020000 	.word	0x40020000
   28d90:	000186a0 	.word	0x000186a0
   28d94:	08000007 	.word	0x08000007
   28d98:	5000c000 	.word	0x5000c000
   28d9c:	00013880 	.word	0x00013880
   28da0:	000f4240 	.word	0x000f4240
   28da4:	08000006 	.word	0x08000006
   28da8:	08000005 	.word	0x08000005
   28dac:	40020198 	.word	0x40020198
   28db0:	08000008 	.word	0x08000008

00028db4 <am_hal_ble_patch_copy_end_apply>:
   28db4:	b128      	cbz	r0, 28dc2 <am_hal_ble_patch_copy_end_apply+0xe>
   28db6:	6803      	ldr	r3, [r0, #0]
   28db8:	4a46      	ldr	r2, [pc, #280]	; (28ed4 <am_hal_ble_patch_copy_end_apply+0x120>)
   28dba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28dbe:	4293      	cmp	r3, r2
   28dc0:	d001      	beq.n	28dc6 <am_hal_ble_patch_copy_end_apply+0x12>
   28dc2:	2002      	movs	r0, #2
   28dc4:	4770      	bx	lr
   28dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28dca:	b092      	sub	sp, #72	; 0x48
   28dcc:	2501      	movs	r5, #1
   28dce:	2400      	movs	r4, #0
   28dd0:	4606      	mov	r6, r0
   28dd2:	21f1      	movs	r1, #241	; 0xf1
   28dd4:	20ee      	movs	r0, #238	; 0xee
   28dd6:	2202      	movs	r2, #2
   28dd8:	f88d 5000 	strb.w	r5, [sp]
   28ddc:	f88d 0001 	strb.w	r0, [sp, #1]
   28de0:	f88d 1002 	strb.w	r1, [sp, #2]
   28de4:	f88d 2003 	strb.w	r2, [sp, #3]
   28de8:	f88d 4004 	strb.w	r4, [sp, #4]
   28dec:	f88d 4005 	strb.w	r4, [sp, #5]
   28df0:	f241 3588 	movw	r5, #5000	; 0x1388
   28df4:	f04f 0806 	mov.w	r8, #6
   28df8:	461f      	mov	r7, r3
   28dfa:	2201      	movs	r2, #1
   28dfc:	42bb      	cmp	r3, r7
   28dfe:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   28e02:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   28e06:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   28e0a:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   28e0e:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   28e12:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   28e16:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   28e1a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   28e1e:	940e      	str	r4, [sp, #56]	; 0x38
   28e20:	940f      	str	r4, [sp, #60]	; 0x3c
   28e22:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   28e26:	d029      	beq.n	28e7c <am_hal_ble_patch_copy_end_apply+0xc8>
   28e28:	4b2b      	ldr	r3, [pc, #172]	; (28ed8 <am_hal_ble_patch_copy_end_apply+0x124>)
   28e2a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   28e2e:	0612      	lsls	r2, r2, #24
   28e30:	d40c      	bmi.n	28e4c <am_hal_ble_patch_copy_end_apply+0x98>
   28e32:	4d2a      	ldr	r5, [pc, #168]	; (28edc <am_hal_ble_patch_copy_end_apply+0x128>)
   28e34:	461c      	mov	r4, r3
   28e36:	2010      	movs	r0, #16
   28e38:	f001 f998 	bl	2a16c <am_hal_flash_delay>
   28e3c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   28e40:	0619      	lsls	r1, r3, #24
   28e42:	d403      	bmi.n	28e4c <am_hal_ble_patch_copy_end_apply+0x98>
   28e44:	3d01      	subs	r5, #1
   28e46:	d1f6      	bne.n	28e36 <am_hal_ble_patch_copy_end_apply+0x82>
   28e48:	4825      	ldr	r0, [pc, #148]	; (28ee0 <am_hal_ble_patch_copy_end_apply+0x12c>)
   28e4a:	e014      	b.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28e4c:	6832      	ldr	r2, [r6, #0]
   28e4e:	4921      	ldr	r1, [pc, #132]	; (28ed4 <am_hal_ble_patch_copy_end_apply+0x120>)
   28e50:	f8cd d010 	str.w	sp, [sp, #16]
   28e54:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   28e58:	2300      	movs	r3, #0
   28e5a:	2402      	movs	r4, #2
   28e5c:	2005      	movs	r0, #5
   28e5e:	428a      	cmp	r2, r1
   28e60:	9306      	str	r3, [sp, #24]
   28e62:	9305      	str	r3, [sp, #20]
   28e64:	9307      	str	r3, [sp, #28]
   28e66:	9308      	str	r3, [sp, #32]
   28e68:	9309      	str	r3, [sp, #36]	; 0x24
   28e6a:	f88d 401a 	strb.w	r4, [sp, #26]
   28e6e:	f8ad 0018 	strh.w	r0, [sp, #24]
   28e72:	d00f      	beq.n	28e94 <am_hal_ble_patch_copy_end_apply+0xe0>
   28e74:	2002      	movs	r0, #2
   28e76:	b012      	add	sp, #72	; 0x48
   28e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28e7c:	a90a      	add	r1, sp, #40	; 0x28
   28e7e:	4630      	mov	r0, r6
   28e80:	f7ff fb2c 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   28e84:	2800      	cmp	r0, #0
   28e86:	d0cf      	beq.n	28e28 <am_hal_ble_patch_copy_end_apply+0x74>
   28e88:	3d01      	subs	r5, #1
   28e8a:	d0f4      	beq.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28e8c:	6833      	ldr	r3, [r6, #0]
   28e8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   28e92:	e7b2      	b.n	28dfa <am_hal_ble_patch_copy_end_apply+0x46>
   28e94:	a904      	add	r1, sp, #16
   28e96:	4630      	mov	r0, r6
   28e98:	f7ff fb20 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   28e9c:	2800      	cmp	r0, #0
   28e9e:	d1ea      	bne.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28ea0:	f89d 3000 	ldrb.w	r3, [sp]
   28ea4:	2b04      	cmp	r3, #4
   28ea6:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   28eaa:	f04f 0001 	mov.w	r0, #1
   28eae:	d1e2      	bne.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28eb0:	f89d 3001 	ldrb.w	r3, [sp, #1]
   28eb4:	2bee      	cmp	r3, #238	; 0xee
   28eb6:	d1de      	bne.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28eb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   28ebc:	429a      	cmp	r2, r3
   28ebe:	d1da      	bne.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28ec0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   28ec4:	4283      	cmp	r3, r0
   28ec6:	d1d6      	bne.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28ec8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   28ecc:	3000      	adds	r0, #0
   28ece:	bf18      	it	ne
   28ed0:	2001      	movne	r0, #1
   28ed2:	e7d0      	b.n	28e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   28ed4:	01775230 	.word	0x01775230
   28ed8:	5000c000 	.word	0x5000c000
   28edc:	000f4240 	.word	0x000f4240
   28ee0:	08000004 	.word	0x08000004

00028ee4 <am_hal_ble_blocking_hci_write>:
   28ee4:	b530      	push	{r4, r5, lr}
   28ee6:	b087      	sub	sp, #28
   28ee8:	2400      	movs	r4, #0
   28eea:	b29b      	uxth	r3, r3
   28eec:	2501      	movs	r5, #1
   28eee:	f88d 1004 	strb.w	r1, [sp, #4]
   28ef2:	f8ad 3008 	strh.w	r3, [sp, #8]
   28ef6:	9200      	str	r2, [sp, #0]
   28ef8:	f88d 4005 	strb.w	r4, [sp, #5]
   28efc:	f88d 4006 	strb.w	r4, [sp, #6]
   28f00:	f88d 4007 	strb.w	r4, [sp, #7]
   28f04:	f88d 400b 	strb.w	r4, [sp, #11]
   28f08:	f88d 400c 	strb.w	r4, [sp, #12]
   28f0c:	9404      	str	r4, [sp, #16]
   28f0e:	9405      	str	r4, [sp, #20]
   28f10:	f88d 500a 	strb.w	r5, [sp, #10]
   28f14:	b128      	cbz	r0, 28f22 <am_hal_ble_blocking_hci_write+0x3e>
   28f16:	6802      	ldr	r2, [r0, #0]
   28f18:	4c09      	ldr	r4, [pc, #36]	; (28f40 <am_hal_ble_blocking_hci_write+0x5c>)
   28f1a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   28f1e:	42a2      	cmp	r2, r4
   28f20:	d002      	beq.n	28f28 <am_hal_ble_blocking_hci_write+0x44>
   28f22:	2000      	movs	r0, #0
   28f24:	b007      	add	sp, #28
   28f26:	bd30      	pop	{r4, r5, pc}
   28f28:	b939      	cbnz	r1, 28f3a <am_hal_ble_blocking_hci_write+0x56>
   28f2a:	2b00      	cmp	r3, #0
   28f2c:	d0f9      	beq.n	28f22 <am_hal_ble_blocking_hci_write+0x3e>
   28f2e:	4669      	mov	r1, sp
   28f30:	f7ff fad4 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   28f34:	2800      	cmp	r0, #0
   28f36:	d0f4      	beq.n	28f22 <am_hal_ble_blocking_hci_write+0x3e>
   28f38:	e7f4      	b.n	28f24 <am_hal_ble_blocking_hci_write+0x40>
   28f3a:	f88d 5007 	strb.w	r5, [sp, #7]
   28f3e:	e7f4      	b.n	28f2a <am_hal_ble_blocking_hci_write+0x46>
   28f40:	01775230 	.word	0x01775230

00028f44 <am_hal_ble_blocking_hci_read>:
   28f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f48:	b089      	sub	sp, #36	; 0x24
   28f4a:	2300      	movs	r3, #0
   28f4c:	2502      	movs	r5, #2
   28f4e:	ac01      	add	r4, sp, #4
   28f50:	9402      	str	r4, [sp, #8]
   28f52:	f88d 300c 	strb.w	r3, [sp, #12]
   28f56:	f88d 300d 	strb.w	r3, [sp, #13]
   28f5a:	f88d 300e 	strb.w	r3, [sp, #14]
   28f5e:	f88d 300f 	strb.w	r3, [sp, #15]
   28f62:	f88d 3013 	strb.w	r3, [sp, #19]
   28f66:	f88d 3014 	strb.w	r3, [sp, #20]
   28f6a:	9306      	str	r3, [sp, #24]
   28f6c:	9307      	str	r3, [sp, #28]
   28f6e:	f8ad 5010 	strh.w	r5, [sp, #16]
   28f72:	f88d 5012 	strb.w	r5, [sp, #18]
   28f76:	b128      	cbz	r0, 28f84 <am_hal_ble_blocking_hci_read+0x40>
   28f78:	6804      	ldr	r4, [r0, #0]
   28f7a:	4e1f      	ldr	r6, [pc, #124]	; (28ff8 <am_hal_ble_blocking_hci_read+0xb4>)
   28f7c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   28f80:	42b4      	cmp	r4, r6
   28f82:	d003      	beq.n	28f8c <am_hal_ble_blocking_hci_read+0x48>
   28f84:	2000      	movs	r0, #0
   28f86:	b009      	add	sp, #36	; 0x24
   28f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28f8c:	460f      	mov	r7, r1
   28f8e:	491b      	ldr	r1, [pc, #108]	; (28ffc <am_hal_ble_blocking_hci_read+0xb8>)
   28f90:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   28f94:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   28f98:	4681      	mov	r9, r0
   28f9a:	4690      	mov	r8, r2
   28f9c:	b92e      	cbnz	r6, 28faa <am_hal_ble_blocking_hci_read+0x66>
   28f9e:	f1b8 0f00 	cmp.w	r8, #0
   28fa2:	d0ef      	beq.n	28f84 <am_hal_ble_blocking_hci_read+0x40>
   28fa4:	f8c8 6000 	str.w	r6, [r8]
   28fa8:	e7ec      	b.n	28f84 <am_hal_ble_blocking_hci_read+0x40>
   28faa:	a902      	add	r1, sp, #8
   28fac:	f7ff fa96 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   28fb0:	2800      	cmp	r0, #0
   28fb2:	d1e8      	bne.n	28f86 <am_hal_ble_blocking_hci_read+0x42>
   28fb4:	f89d 0005 	ldrb.w	r0, [sp, #5]
   28fb8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   28fbc:	9702      	str	r7, [sp, #8]
   28fbe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   28fc2:	b289      	uxth	r1, r1
   28fc4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   28fc8:	f8ad 1010 	strh.w	r1, [sp, #16]
   28fcc:	d901      	bls.n	28fd2 <am_hal_ble_blocking_hci_read+0x8e>
   28fce:	2005      	movs	r0, #5
   28fd0:	e7d9      	b.n	28f86 <am_hal_ble_blocking_hci_read+0x42>
   28fd2:	f8d9 0000 	ldr.w	r0, [r9]
   28fd6:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   28fda:	42a0      	cmp	r0, r4
   28fdc:	d001      	beq.n	28fe2 <am_hal_ble_blocking_hci_read+0x9e>
   28fde:	4628      	mov	r0, r5
   28fe0:	e7d1      	b.n	28f86 <am_hal_ble_blocking_hci_read+0x42>
   28fe2:	b129      	cbz	r1, 28ff0 <am_hal_ble_blocking_hci_read+0xac>
   28fe4:	a902      	add	r1, sp, #8
   28fe6:	4648      	mov	r0, r9
   28fe8:	f7ff fa78 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   28fec:	2800      	cmp	r0, #0
   28fee:	d1ca      	bne.n	28f86 <am_hal_ble_blocking_hci_read+0x42>
   28ff0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   28ff4:	e7d3      	b.n	28f9e <am_hal_ble_blocking_hci_read+0x5a>
   28ff6:	bf00      	nop
   28ff8:	01775230 	.word	0x01775230
   28ffc:	5000c000 	.word	0x5000c000

00029000 <am_hal_ble_blocking_transfer>:
   29000:	b128      	cbz	r0, 2900e <am_hal_ble_blocking_transfer+0xe>
   29002:	6803      	ldr	r3, [r0, #0]
   29004:	4a08      	ldr	r2, [pc, #32]	; (29028 <am_hal_ble_blocking_transfer+0x28>)
   29006:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2900a:	4293      	cmp	r3, r2
   2900c:	d001      	beq.n	29012 <am_hal_ble_blocking_transfer+0x12>
   2900e:	2002      	movs	r0, #2
   29010:	4770      	bx	lr
   29012:	890b      	ldrh	r3, [r1, #8]
   29014:	b410      	push	{r4}
   29016:	b11b      	cbz	r3, 29020 <am_hal_ble_blocking_transfer+0x20>
   29018:	f85d 4b04 	ldr.w	r4, [sp], #4
   2901c:	f7ff ba5e 	b.w	284dc <am_hal_ble_blocking_transfer.part.7>
   29020:	4618      	mov	r0, r3
   29022:	f85d 4b04 	ldr.w	r4, [sp], #4
   29026:	4770      	bx	lr
   29028:	01775230 	.word	0x01775230

0002902c <am_hal_ble_patch_apply>:
   2902c:	b128      	cbz	r0, 2903a <am_hal_ble_patch_apply+0xe>
   2902e:	6803      	ldr	r3, [r0, #0]
   29030:	4aae      	ldr	r2, [pc, #696]	; (292ec <am_hal_ble_patch_apply+0x2c0>)
   29032:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29036:	4293      	cmp	r3, r2
   29038:	d002      	beq.n	29040 <am_hal_ble_patch_apply+0x14>
   2903a:	2302      	movs	r3, #2
   2903c:	4618      	mov	r0, r3
   2903e:	4770      	bx	lr
   29040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29044:	684a      	ldr	r2, [r1, #4]
   29046:	680d      	ldr	r5, [r1, #0]
   29048:	b095      	sub	sp, #84	; 0x54
   2904a:	2701      	movs	r7, #1
   2904c:	4604      	mov	r4, r0
   2904e:	460e      	mov	r6, r1
   29050:	f88d 200c 	strb.w	r2, [sp, #12]
   29054:	20f1      	movs	r0, #241	; 0xf1
   29056:	0a12      	lsrs	r2, r2, #8
   29058:	2102      	movs	r1, #2
   2905a:	f88d 7008 	strb.w	r7, [sp, #8]
   2905e:	f88d 5009 	strb.w	r5, [sp, #9]
   29062:	f88d 200d 	strb.w	r2, [sp, #13]
   29066:	f88d 000a 	strb.w	r0, [sp, #10]
   2906a:	f88d 100b 	strb.w	r1, [sp, #11]
   2906e:	f241 3788 	movw	r7, #5000	; 0x1388
   29072:	2500      	movs	r5, #0
   29074:	f04f 0906 	mov.w	r9, #6
   29078:	4698      	mov	r8, r3
   2907a:	2201      	movs	r2, #1
   2907c:	a902      	add	r1, sp, #8
   2907e:	4543      	cmp	r3, r8
   29080:	910c      	str	r1, [sp, #48]	; 0x30
   29082:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   29086:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   2908a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   2908e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   29092:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   29096:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   2909a:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   2909e:	9510      	str	r5, [sp, #64]	; 0x40
   290a0:	9511      	str	r5, [sp, #68]	; 0x44
   290a2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   290a6:	d02b      	beq.n	29100 <am_hal_ble_patch_apply+0xd4>
   290a8:	4b91      	ldr	r3, [pc, #580]	; (292f0 <am_hal_ble_patch_apply+0x2c4>)
   290aa:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   290ae:	0612      	lsls	r2, r2, #24
   290b0:	d40c      	bmi.n	290cc <am_hal_ble_patch_apply+0xa0>
   290b2:	4f90      	ldr	r7, [pc, #576]	; (292f4 <am_hal_ble_patch_apply+0x2c8>)
   290b4:	461d      	mov	r5, r3
   290b6:	2010      	movs	r0, #16
   290b8:	f001 f858 	bl	2a16c <am_hal_flash_delay>
   290bc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   290c0:	061b      	lsls	r3, r3, #24
   290c2:	d403      	bmi.n	290cc <am_hal_ble_patch_apply+0xa0>
   290c4:	3f01      	subs	r7, #1
   290c6:	d1f6      	bne.n	290b6 <am_hal_ble_patch_apply+0x8a>
   290c8:	4b8b      	ldr	r3, [pc, #556]	; (292f8 <am_hal_ble_patch_apply+0x2cc>)
   290ca:	e015      	b.n	290f8 <am_hal_ble_patch_apply+0xcc>
   290cc:	6825      	ldr	r5, [r4, #0]
   290ce:	4a87      	ldr	r2, [pc, #540]	; (292ec <am_hal_ble_patch_apply+0x2c0>)
   290d0:	ab02      	add	r3, sp, #8
   290d2:	9306      	str	r3, [sp, #24]
   290d4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   290d8:	2300      	movs	r3, #0
   290da:	9308      	str	r3, [sp, #32]
   290dc:	2102      	movs	r1, #2
   290de:	9307      	str	r3, [sp, #28]
   290e0:	9309      	str	r3, [sp, #36]	; 0x24
   290e2:	930a      	str	r3, [sp, #40]	; 0x28
   290e4:	930b      	str	r3, [sp, #44]	; 0x2c
   290e6:	4295      	cmp	r5, r2
   290e8:	f04f 0305 	mov.w	r3, #5
   290ec:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   290f0:	f8ad 3020 	strh.w	r3, [sp, #32]
   290f4:	d011      	beq.n	2911a <am_hal_ble_patch_apply+0xee>
   290f6:	2302      	movs	r3, #2
   290f8:	4618      	mov	r0, r3
   290fa:	b015      	add	sp, #84	; 0x54
   290fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29100:	a90c      	add	r1, sp, #48	; 0x30
   29102:	4620      	mov	r0, r4
   29104:	f7ff f9ea 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29108:	4603      	mov	r3, r0
   2910a:	2800      	cmp	r0, #0
   2910c:	d0cc      	beq.n	290a8 <am_hal_ble_patch_apply+0x7c>
   2910e:	3f01      	subs	r7, #1
   29110:	d0f2      	beq.n	290f8 <am_hal_ble_patch_apply+0xcc>
   29112:	6823      	ldr	r3, [r4, #0]
   29114:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29118:	e7af      	b.n	2907a <am_hal_ble_patch_apply+0x4e>
   2911a:	a906      	add	r1, sp, #24
   2911c:	4620      	mov	r0, r4
   2911e:	f7ff f9dd 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29122:	4603      	mov	r3, r0
   29124:	2800      	cmp	r0, #0
   29126:	d1e7      	bne.n	290f8 <am_hal_ble_patch_apply+0xcc>
   29128:	2304      	movs	r3, #4
   2912a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2912e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   29132:	23f1      	movs	r3, #241	; 0xf1
   29134:	7832      	ldrb	r2, [r6, #0]
   29136:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   2913a:	2904      	cmp	r1, #4
   2913c:	f04f 0301 	mov.w	r3, #1
   29140:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   29144:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   29148:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2914c:	f040 811a 	bne.w	29384 <am_hal_ble_patch_apply+0x358>
   29150:	f89d 1009 	ldrb.w	r1, [sp, #9]
   29154:	b2d3      	uxtb	r3, r2
   29156:	4299      	cmp	r1, r3
   29158:	f040 8114 	bne.w	29384 <am_hal_ble_patch_apply+0x358>
   2915c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   29160:	2bf1      	cmp	r3, #241	; 0xf1
   29162:	f040 810f 	bne.w	29384 <am_hal_ble_patch_apply+0x358>
   29166:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2916a:	2b01      	cmp	r3, #1
   2916c:	f040 810a 	bne.w	29384 <am_hal_ble_patch_apply+0x358>
   29170:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29174:	2b00      	cmp	r3, #0
   29176:	f040 8105 	bne.w	29384 <am_hal_ble_patch_apply+0x358>
   2917a:	f8d6 a004 	ldr.w	sl, [r6, #4]
   2917e:	f1ba 0f00 	cmp.w	sl, #0
   29182:	f000 8091 	beq.w	292a8 <am_hal_ble_patch_apply+0x27c>
   29186:	f8df 9178 	ldr.w	r9, [pc, #376]	; 29300 <am_hal_ble_patch_apply+0x2d4>
   2918a:	4f59      	ldr	r7, [pc, #356]	; (292f0 <am_hal_ble_patch_apply+0x2c4>)
   2918c:	9501      	str	r5, [sp, #4]
   2918e:	469b      	mov	fp, r3
   29190:	2201      	movs	r2, #1
   29192:	f889 2000 	strb.w	r2, [r9]
   29196:	6833      	ldr	r3, [r6, #0]
   29198:	f889 3001 	strb.w	r3, [r9, #1]
   2919c:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   291a0:	46d0      	mov	r8, sl
   291a2:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   291a6:	bf28      	it	cs
   291a8:	f04f 0880 	movcs.w	r8, #128	; 0x80
   291ac:	f889 3002 	strb.w	r3, [r9, #2]
   291b0:	f889 8003 	strb.w	r8, [r9, #3]
   291b4:	68f1      	ldr	r1, [r6, #12]
   291b6:	4851      	ldr	r0, [pc, #324]	; (292fc <am_hal_ble_patch_apply+0x2d0>)
   291b8:	f8cd 9018 	str.w	r9, [sp, #24]
   291bc:	2300      	movs	r3, #0
   291be:	f02b 0503 	bic.w	r5, fp, #3
   291c2:	9308      	str	r3, [sp, #32]
   291c4:	4429      	add	r1, r5
   291c6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   291ca:	f108 0504 	add.w	r5, r8, #4
   291ce:	4642      	mov	r2, r8
   291d0:	9307      	str	r3, [sp, #28]
   291d2:	9309      	str	r3, [sp, #36]	; 0x24
   291d4:	930a      	str	r3, [sp, #40]	; 0x28
   291d6:	930b      	str	r3, [sp, #44]	; 0x2c
   291d8:	f8ad 5020 	strh.w	r5, [sp, #32]
   291dc:	f7e2 ff90 	bl	c100 <memcpy>
   291e0:	6823      	ldr	r3, [r4, #0]
   291e2:	9a01      	ldr	r2, [sp, #4]
   291e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   291e8:	4293      	cmp	r3, r2
   291ea:	d184      	bne.n	290f6 <am_hal_ble_patch_apply+0xca>
   291ec:	a906      	add	r1, sp, #24
   291ee:	4620      	mov	r0, r4
   291f0:	f7ff f974 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   291f4:	4603      	mov	r3, r0
   291f6:	2800      	cmp	r0, #0
   291f8:	f47f af7e 	bne.w	290f8 <am_hal_ble_patch_apply+0xcc>
   291fc:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   29200:	061d      	lsls	r5, r3, #24
   29202:	d40b      	bmi.n	2921c <am_hal_ble_patch_apply+0x1f0>
   29204:	4d3b      	ldr	r5, [pc, #236]	; (292f4 <am_hal_ble_patch_apply+0x2c8>)
   29206:	e002      	b.n	2920e <am_hal_ble_patch_apply+0x1e2>
   29208:	3d01      	subs	r5, #1
   2920a:	f43f af5d 	beq.w	290c8 <am_hal_ble_patch_apply+0x9c>
   2920e:	2010      	movs	r0, #16
   29210:	f000 ffac 	bl	2a16c <am_hal_flash_delay>
   29214:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   29218:	0618      	lsls	r0, r3, #24
   2921a:	d5f5      	bpl.n	29208 <am_hal_ble_patch_apply+0x1dc>
   2921c:	ab02      	add	r3, sp, #8
   2921e:	9306      	str	r3, [sp, #24]
   29220:	2300      	movs	r3, #0
   29222:	9308      	str	r3, [sp, #32]
   29224:	6822      	ldr	r2, [r4, #0]
   29226:	9307      	str	r3, [sp, #28]
   29228:	9309      	str	r3, [sp, #36]	; 0x24
   2922a:	930a      	str	r3, [sp, #40]	; 0x28
   2922c:	930b      	str	r3, [sp, #44]	; 0x2c
   2922e:	2305      	movs	r3, #5
   29230:	f8ad 3020 	strh.w	r3, [sp, #32]
   29234:	9b01      	ldr	r3, [sp, #4]
   29236:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2923a:	2102      	movs	r1, #2
   2923c:	429a      	cmp	r2, r3
   2923e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   29242:	f47f af58 	bne.w	290f6 <am_hal_ble_patch_apply+0xca>
   29246:	a906      	add	r1, sp, #24
   29248:	4620      	mov	r0, r4
   2924a:	f7ff f947 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   2924e:	4603      	mov	r3, r0
   29250:	2800      	cmp	r0, #0
   29252:	f47f af51 	bne.w	290f8 <am_hal_ble_patch_apply+0xcc>
   29256:	2304      	movs	r3, #4
   29258:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2925c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   29260:	23f2      	movs	r3, #242	; 0xf2
   29262:	7832      	ldrb	r2, [r6, #0]
   29264:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   29268:	2904      	cmp	r1, #4
   2926a:	f04f 0301 	mov.w	r3, #1
   2926e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   29272:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   29276:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2927a:	f040 8083 	bne.w	29384 <am_hal_ble_patch_apply+0x358>
   2927e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   29282:	4293      	cmp	r3, r2
   29284:	d17e      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   29286:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2928a:	2bf2      	cmp	r3, #242	; 0xf2
   2928c:	d17a      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   2928e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   29292:	2b01      	cmp	r3, #1
   29294:	d176      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   29296:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2929a:	2b00      	cmp	r3, #0
   2929c:	d172      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   2929e:	ebba 0a08 	subs.w	sl, sl, r8
   292a2:	44c3      	add	fp, r8
   292a4:	f47f af74 	bne.w	29190 <am_hal_ble_patch_apply+0x164>
   292a8:	68b3      	ldr	r3, [r6, #8]
   292aa:	f88d 2009 	strb.w	r2, [sp, #9]
   292ae:	2101      	movs	r1, #1
   292b0:	0a1a      	lsrs	r2, r3, #8
   292b2:	20f3      	movs	r0, #243	; 0xf3
   292b4:	f88d 300c 	strb.w	r3, [sp, #12]
   292b8:	f88d 200d 	strb.w	r2, [sp, #13]
   292bc:	2306      	movs	r3, #6
   292be:	f88d 1008 	strb.w	r1, [sp, #8]
   292c2:	f88d 000a 	strb.w	r0, [sp, #10]
   292c6:	2502      	movs	r5, #2
   292c8:	aa02      	add	r2, sp, #8
   292ca:	2100      	movs	r1, #0
   292cc:	4620      	mov	r0, r4
   292ce:	f88d 500b 	strb.w	r5, [sp, #11]
   292d2:	f7ff fe07 	bl	28ee4 <am_hal_ble_blocking_hci_write>
   292d6:	4603      	mov	r3, r0
   292d8:	2800      	cmp	r0, #0
   292da:	d153      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   292dc:	4f04      	ldr	r7, [pc, #16]	; (292f0 <am_hal_ble_patch_apply+0x2c4>)
   292de:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   292e2:	0611      	lsls	r1, r2, #24
   292e4:	d41b      	bmi.n	2931e <am_hal_ble_patch_apply+0x2f2>
   292e6:	4d03      	ldr	r5, [pc, #12]	; (292f4 <am_hal_ble_patch_apply+0x2c8>)
   292e8:	e00f      	b.n	2930a <am_hal_ble_patch_apply+0x2de>
   292ea:	bf00      	nop
   292ec:	01775230 	.word	0x01775230
   292f0:	5000c000 	.word	0x5000c000
   292f4:	000f4240 	.word	0x000f4240
   292f8:	08000004 	.word	0x08000004
   292fc:	10009930 	.word	0x10009930
   29300:	1000992c 	.word	0x1000992c
   29304:	3d01      	subs	r5, #1
   29306:	f43f aedf 	beq.w	290c8 <am_hal_ble_patch_apply+0x9c>
   2930a:	2010      	movs	r0, #16
   2930c:	9301      	str	r3, [sp, #4]
   2930e:	f000 ff2d 	bl	2a16c <am_hal_flash_delay>
   29312:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   29316:	9b01      	ldr	r3, [sp, #4]
   29318:	f012 0f80 	tst.w	r2, #128	; 0x80
   2931c:	d0f2      	beq.n	29304 <am_hal_ble_patch_apply+0x2d8>
   2931e:	2200      	movs	r2, #0
   29320:	9301      	str	r3, [sp, #4]
   29322:	4620      	mov	r0, r4
   29324:	ab02      	add	r3, sp, #8
   29326:	a906      	add	r1, sp, #24
   29328:	2502      	movs	r5, #2
   2932a:	2405      	movs	r4, #5
   2932c:	9208      	str	r2, [sp, #32]
   2932e:	9306      	str	r3, [sp, #24]
   29330:	9207      	str	r2, [sp, #28]
   29332:	9209      	str	r2, [sp, #36]	; 0x24
   29334:	920a      	str	r2, [sp, #40]	; 0x28
   29336:	920b      	str	r2, [sp, #44]	; 0x2c
   29338:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   2933c:	f8ad 4020 	strh.w	r4, [sp, #32]
   29340:	f7ff fe5e 	bl	29000 <am_hal_ble_blocking_transfer>
   29344:	9b01      	ldr	r3, [sp, #4]
   29346:	b9f8      	cbnz	r0, 29388 <am_hal_ble_patch_apply+0x35c>
   29348:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2934c:	6831      	ldr	r1, [r6, #0]
   2934e:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   29352:	2a04      	cmp	r2, #4
   29354:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   29358:	f04f 0101 	mov.w	r1, #1
   2935c:	d112      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   2935e:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   29362:	f89d 2009 	ldrb.w	r2, [sp, #9]
   29366:	4294      	cmp	r4, r2
   29368:	d10c      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   2936a:	f89d 200a 	ldrb.w	r2, [sp, #10]
   2936e:	4290      	cmp	r0, r2
   29370:	d108      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   29372:	f89d 200b 	ldrb.w	r2, [sp, #11]
   29376:	4291      	cmp	r1, r2
   29378:	d104      	bne.n	29384 <am_hal_ble_patch_apply+0x358>
   2937a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2937e:	2a00      	cmp	r2, #0
   29380:	f43f aeba 	beq.w	290f8 <am_hal_ble_patch_apply+0xcc>
   29384:	2301      	movs	r3, #1
   29386:	e6b7      	b.n	290f8 <am_hal_ble_patch_apply+0xcc>
   29388:	4603      	mov	r3, r0
   2938a:	e6b5      	b.n	290f8 <am_hal_ble_patch_apply+0xcc>

0002938c <am_hal_ble_int_enable>:
   2938c:	b128      	cbz	r0, 2939a <am_hal_ble_int_enable+0xe>
   2938e:	6803      	ldr	r3, [r0, #0]
   29390:	4a0c      	ldr	r2, [pc, #48]	; (293c4 <am_hal_ble_int_enable+0x38>)
   29392:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29396:	4293      	cmp	r3, r2
   29398:	d001      	beq.n	2939e <am_hal_ble_int_enable+0x12>
   2939a:	2002      	movs	r0, #2
   2939c:	4770      	bx	lr
   2939e:	b510      	push	{r4, lr}
   293a0:	b082      	sub	sp, #8
   293a2:	460c      	mov	r4, r1
   293a4:	f001 f8e8 	bl	2a578 <am_hal_interrupt_master_disable>
   293a8:	4b07      	ldr	r3, [pc, #28]	; (293c8 <am_hal_ble_int_enable+0x3c>)
   293aa:	9001      	str	r0, [sp, #4]
   293ac:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   293b0:	4321      	orrs	r1, r4
   293b2:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   293b6:	9801      	ldr	r0, [sp, #4]
   293b8:	f001 f8e2 	bl	2a580 <am_hal_interrupt_master_set>
   293bc:	2000      	movs	r0, #0
   293be:	b002      	add	sp, #8
   293c0:	bd10      	pop	{r4, pc}
   293c2:	bf00      	nop
   293c4:	01775230 	.word	0x01775230
   293c8:	5000c000 	.word	0x5000c000

000293cc <am_hal_ble_int_status>:
   293cc:	4b05      	ldr	r3, [pc, #20]	; (293e4 <am_hal_ble_int_status+0x18>)
   293ce:	b911      	cbnz	r1, 293d6 <am_hal_ble_int_status+0xa>
   293d0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   293d4:	4770      	bx	lr
   293d6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   293da:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   293de:	4018      	ands	r0, r3
   293e0:	4770      	bx	lr
   293e2:	bf00      	nop
   293e4:	5000c000 	.word	0x5000c000

000293e8 <am_hal_ble_int_clear>:
   293e8:	b128      	cbz	r0, 293f6 <am_hal_ble_int_clear+0xe>
   293ea:	6803      	ldr	r3, [r0, #0]
   293ec:	4a05      	ldr	r2, [pc, #20]	; (29404 <am_hal_ble_int_clear+0x1c>)
   293ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   293f2:	4293      	cmp	r3, r2
   293f4:	d001      	beq.n	293fa <am_hal_ble_int_clear+0x12>
   293f6:	2002      	movs	r0, #2
   293f8:	4770      	bx	lr
   293fa:	4b03      	ldr	r3, [pc, #12]	; (29408 <am_hal_ble_int_clear+0x20>)
   293fc:	2000      	movs	r0, #0
   293fe:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   29402:	4770      	bx	lr
   29404:	01775230 	.word	0x01775230
   29408:	5000c000 	.word	0x5000c000

0002940c <am_hal_ble_plf_reg_read>:
   2940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29410:	b092      	sub	sp, #72	; 0x48
   29412:	0a0e      	lsrs	r6, r1, #8
   29414:	0c0d      	lsrs	r5, r1, #16
   29416:	2300      	movs	r3, #0
   29418:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   2941c:	f88d 100c 	strb.w	r1, [sp, #12]
   29420:	f88d 600d 	strb.w	r6, [sp, #13]
   29424:	f88d 500e 	strb.w	r5, [sp, #14]
   29428:	2401      	movs	r4, #1
   2942a:	2702      	movs	r7, #2
   2942c:	26fd      	movs	r6, #253	; 0xfd
   2942e:	2504      	movs	r5, #4
   29430:	4952      	ldr	r1, [pc, #328]	; (2957c <am_hal_ble_plf_reg_read+0x170>)
   29432:	f88d e00f 	strb.w	lr, [sp, #15]
   29436:	f88d 7009 	strb.w	r7, [sp, #9]
   2943a:	f88d 500b 	strb.w	r5, [sp, #11]
   2943e:	930a      	str	r3, [sp, #40]	; 0x28
   29440:	930b      	str	r3, [sp, #44]	; 0x2c
   29442:	930c      	str	r3, [sp, #48]	; 0x30
   29444:	f88d 4008 	strb.w	r4, [sp, #8]
   29448:	f88d 600a 	strb.w	r6, [sp, #10]
   2944c:	f10d 0e08 	add.w	lr, sp, #8
   29450:	2508      	movs	r5, #8
   29452:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   29456:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2945a:	4617      	mov	r7, r2
   2945c:	f88d 3014 	strb.w	r3, [sp, #20]
   29460:	f88d 3015 	strb.w	r3, [sp, #21]
   29464:	f88d 3016 	strb.w	r3, [sp, #22]
   29468:	f88d 3017 	strb.w	r3, [sp, #23]
   2946c:	f88d 401a 	strb.w	r4, [sp, #26]
   29470:	f88d 301b 	strb.w	r3, [sp, #27]
   29474:	f88d 301c 	strb.w	r3, [sp, #28]
   29478:	9308      	str	r3, [sp, #32]
   2947a:	9309      	str	r3, [sp, #36]	; 0x24
   2947c:	f8cd e010 	str.w	lr, [sp, #16]
   29480:	f8ad 5018 	strh.w	r5, [sp, #24]
   29484:	4680      	mov	r8, r0
   29486:	b128      	cbz	r0, 29494 <am_hal_ble_plf_reg_read+0x88>
   29488:	6803      	ldr	r3, [r0, #0]
   2948a:	4a3d      	ldr	r2, [pc, #244]	; (29580 <am_hal_ble_plf_reg_read+0x174>)
   2948c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29490:	4293      	cmp	r3, r2
   29492:	d06e      	beq.n	29572 <am_hal_ble_plf_reg_read+0x166>
   29494:	4d39      	ldr	r5, [pc, #228]	; (2957c <am_hal_ble_plf_reg_read+0x170>)
   29496:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2949a:	f043 0302 	orr.w	r3, r3, #2
   2949e:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   294a2:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   294a6:	0619      	lsls	r1, r3, #24
   294a8:	d40a      	bmi.n	294c0 <am_hal_ble_plf_reg_read+0xb4>
   294aa:	4c36      	ldr	r4, [pc, #216]	; (29584 <am_hal_ble_plf_reg_read+0x178>)
   294ac:	e001      	b.n	294b2 <am_hal_ble_plf_reg_read+0xa6>
   294ae:	3c01      	subs	r4, #1
   294b0:	d05b      	beq.n	2956a <am_hal_ble_plf_reg_read+0x15e>
   294b2:	2010      	movs	r0, #16
   294b4:	f000 fe5a 	bl	2a16c <am_hal_flash_delay>
   294b8:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   294bc:	061a      	lsls	r2, r3, #24
   294be:	d5f6      	bpl.n	294ae <am_hal_ble_plf_reg_read+0xa2>
   294c0:	2300      	movs	r3, #0
   294c2:	2202      	movs	r2, #2
   294c4:	a901      	add	r1, sp, #4
   294c6:	9104      	str	r1, [sp, #16]
   294c8:	f88d 3014 	strb.w	r3, [sp, #20]
   294cc:	f88d 3015 	strb.w	r3, [sp, #21]
   294d0:	f88d 3016 	strb.w	r3, [sp, #22]
   294d4:	f88d 3017 	strb.w	r3, [sp, #23]
   294d8:	f88d 301b 	strb.w	r3, [sp, #27]
   294dc:	f88d 301c 	strb.w	r3, [sp, #28]
   294e0:	9308      	str	r3, [sp, #32]
   294e2:	9309      	str	r3, [sp, #36]	; 0x24
   294e4:	f8ad 2018 	strh.w	r2, [sp, #24]
   294e8:	f88d 201a 	strb.w	r2, [sp, #26]
   294ec:	f1b8 0f00 	cmp.w	r8, #0
   294f0:	d006      	beq.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   294f2:	f8d8 4000 	ldr.w	r4, [r8]
   294f6:	4b22      	ldr	r3, [pc, #136]	; (29580 <am_hal_ble_plf_reg_read+0x174>)
   294f8:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   294fc:	429c      	cmp	r4, r3
   294fe:	d00e      	beq.n	2951e <am_hal_ble_plf_reg_read+0x112>
   29500:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   29504:	990c      	ldr	r1, [sp, #48]	; 0x30
   29506:	4a1d      	ldr	r2, [pc, #116]	; (2957c <am_hal_ble_plf_reg_read+0x170>)
   29508:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2950c:	2000      	movs	r0, #0
   2950e:	603b      	str	r3, [r7, #0]
   29510:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   29514:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   29518:	b012      	add	sp, #72	; 0x48
   2951a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2951e:	4b17      	ldr	r3, [pc, #92]	; (2957c <am_hal_ble_plf_reg_read+0x170>)
   29520:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   29524:	061b      	lsls	r3, r3, #24
   29526:	d5eb      	bpl.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   29528:	a904      	add	r1, sp, #16
   2952a:	4640      	mov	r0, r8
   2952c:	f7fe ffd6 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29530:	2800      	cmp	r0, #0
   29532:	d1e5      	bne.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   29534:	f89d 2005 	ldrb.w	r2, [sp, #5]
   29538:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2953c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   29540:	b29b      	uxth	r3, r3
   29542:	aa0a      	add	r2, sp, #40	; 0x28
   29544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   29548:	f8ad 3018 	strh.w	r3, [sp, #24]
   2954c:	9204      	str	r2, [sp, #16]
   2954e:	d8d7      	bhi.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   29550:	f8d8 2000 	ldr.w	r2, [r8]
   29554:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   29558:	42a2      	cmp	r2, r4
   2955a:	d1d1      	bne.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   2955c:	2b00      	cmp	r3, #0
   2955e:	d0cf      	beq.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   29560:	a904      	add	r1, sp, #16
   29562:	4640      	mov	r0, r8
   29564:	f7fe ffba 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29568:	e7ca      	b.n	29500 <am_hal_ble_plf_reg_read+0xf4>
   2956a:	4807      	ldr	r0, [pc, #28]	; (29588 <am_hal_ble_plf_reg_read+0x17c>)
   2956c:	b012      	add	sp, #72	; 0x48
   2956e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29572:	a904      	add	r1, sp, #16
   29574:	f7fe ffb2 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29578:	e78c      	b.n	29494 <am_hal_ble_plf_reg_read+0x88>
   2957a:	bf00      	nop
   2957c:	5000c000 	.word	0x5000c000
   29580:	01775230 	.word	0x01775230
   29584:	0007a120 	.word	0x0007a120
   29588:	08000004 	.word	0x08000004

0002958c <am_hal_ble_plf_reg_write>:
   2958c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2958e:	b091      	sub	sp, #68	; 0x44
   29590:	0c0f      	lsrs	r7, r1, #16
   29592:	0e0e      	lsrs	r6, r1, #24
   29594:	0c14      	lsrs	r4, r2, #16
   29596:	0e13      	lsrs	r3, r2, #24
   29598:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   2959c:	0a15      	lsrs	r5, r2, #8
   2959e:	f88d 2008 	strb.w	r2, [sp, #8]
   295a2:	f88d 6007 	strb.w	r6, [sp, #7]
   295a6:	f88d 400a 	strb.w	r4, [sp, #10]
   295aa:	f88d 300b 	strb.w	r3, [sp, #11]
   295ae:	f88d 1004 	strb.w	r1, [sp, #4]
   295b2:	f88d e005 	strb.w	lr, [sp, #5]
   295b6:	f88d 7006 	strb.w	r7, [sp, #6]
   295ba:	f88d 5009 	strb.w	r5, [sp, #9]
   295be:	ab01      	add	r3, sp, #4
   295c0:	4606      	mov	r6, r0
   295c2:	e893 0003 	ldmia.w	r3, {r0, r1}
   295c6:	ab04      	add	r3, sp, #16
   295c8:	e883 0003 	stmia.w	r3, {r0, r1}
   295cc:	4a47      	ldr	r2, [pc, #284]	; (296ec <am_hal_ble_plf_reg_write+0x160>)
   295ce:	4b48      	ldr	r3, [pc, #288]	; (296f0 <am_hal_ble_plf_reg_write+0x164>)
   295d0:	9303      	str	r3, [sp, #12]
   295d2:	ac03      	add	r4, sp, #12
   295d4:	2300      	movs	r3, #0
   295d6:	200c      	movs	r0, #12
   295d8:	2101      	movs	r1, #1
   295da:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   295de:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   295e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   295e6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   295ea:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   295ee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   295f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   295f6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   295fa:	930e      	str	r3, [sp, #56]	; 0x38
   295fc:	930f      	str	r3, [sp, #60]	; 0x3c
   295fe:	940a      	str	r4, [sp, #40]	; 0x28
   29600:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   29604:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   29608:	b12e      	cbz	r6, 29616 <am_hal_ble_plf_reg_write+0x8a>
   2960a:	6833      	ldr	r3, [r6, #0]
   2960c:	4a39      	ldr	r2, [pc, #228]	; (296f4 <am_hal_ble_plf_reg_write+0x168>)
   2960e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29612:	4293      	cmp	r3, r2
   29614:	d064      	beq.n	296e0 <am_hal_ble_plf_reg_write+0x154>
   29616:	4d35      	ldr	r5, [pc, #212]	; (296ec <am_hal_ble_plf_reg_write+0x160>)
   29618:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2961c:	f043 0302 	orr.w	r3, r3, #2
   29620:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   29624:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   29628:	0619      	lsls	r1, r3, #24
   2962a:	bf58      	it	pl
   2962c:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   29630:	d502      	bpl.n	29638 <am_hal_ble_plf_reg_write+0xac>
   29632:	e008      	b.n	29646 <am_hal_ble_plf_reg_write+0xba>
   29634:	3c01      	subs	r4, #1
   29636:	d050      	beq.n	296da <am_hal_ble_plf_reg_write+0x14e>
   29638:	2010      	movs	r0, #16
   2963a:	f000 fd97 	bl	2a16c <am_hal_flash_delay>
   2963e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   29642:	061a      	lsls	r2, r3, #24
   29644:	d5f6      	bpl.n	29634 <am_hal_ble_plf_reg_write+0xa8>
   29646:	2300      	movs	r3, #0
   29648:	2202      	movs	r2, #2
   2964a:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   2964e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   29652:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   29656:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   2965a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   2965e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   29662:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   29666:	930e      	str	r3, [sp, #56]	; 0x38
   29668:	930f      	str	r3, [sp, #60]	; 0x3c
   2966a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   2966e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   29672:	b12e      	cbz	r6, 29680 <am_hal_ble_plf_reg_write+0xf4>
   29674:	6834      	ldr	r4, [r6, #0]
   29676:	4b1f      	ldr	r3, [pc, #124]	; (296f4 <am_hal_ble_plf_reg_write+0x168>)
   29678:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   2967c:	429c      	cmp	r4, r3
   2967e:	d007      	beq.n	29690 <am_hal_ble_plf_reg_write+0x104>
   29680:	4b1a      	ldr	r3, [pc, #104]	; (296ec <am_hal_ble_plf_reg_write+0x160>)
   29682:	2000      	movs	r0, #0
   29684:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   29688:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   2968c:	b011      	add	sp, #68	; 0x44
   2968e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29690:	4b16      	ldr	r3, [pc, #88]	; (296ec <am_hal_ble_plf_reg_write+0x160>)
   29692:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   29696:	061b      	lsls	r3, r3, #24
   29698:	d5f2      	bpl.n	29680 <am_hal_ble_plf_reg_write+0xf4>
   2969a:	a90a      	add	r1, sp, #40	; 0x28
   2969c:	4630      	mov	r0, r6
   2969e:	f7fe ff1d 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   296a2:	2800      	cmp	r0, #0
   296a4:	d1ec      	bne.n	29680 <am_hal_ble_plf_reg_write+0xf4>
   296a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
   296aa:	f89d 3000 	ldrb.w	r3, [sp]
   296ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   296b2:	b29b      	uxth	r3, r3
   296b4:	aa06      	add	r2, sp, #24
   296b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   296ba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   296be:	920a      	str	r2, [sp, #40]	; 0x28
   296c0:	d8de      	bhi.n	29680 <am_hal_ble_plf_reg_write+0xf4>
   296c2:	6832      	ldr	r2, [r6, #0]
   296c4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   296c8:	42a2      	cmp	r2, r4
   296ca:	d1d9      	bne.n	29680 <am_hal_ble_plf_reg_write+0xf4>
   296cc:	2b00      	cmp	r3, #0
   296ce:	d0d7      	beq.n	29680 <am_hal_ble_plf_reg_write+0xf4>
   296d0:	a90a      	add	r1, sp, #40	; 0x28
   296d2:	4630      	mov	r0, r6
   296d4:	f7fe ff02 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   296d8:	e7d2      	b.n	29680 <am_hal_ble_plf_reg_write+0xf4>
   296da:	4807      	ldr	r0, [pc, #28]	; (296f8 <am_hal_ble_plf_reg_write+0x16c>)
   296dc:	b011      	add	sp, #68	; 0x44
   296de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   296e0:	a90a      	add	r1, sp, #40	; 0x28
   296e2:	4630      	mov	r0, r6
   296e4:	f7fe fefa 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   296e8:	e795      	b.n	29616 <am_hal_ble_plf_reg_write+0x8a>
   296ea:	bf00      	nop
   296ec:	5000c000 	.word	0x5000c000
   296f0:	08fd0301 	.word	0x08fd0301
   296f4:	01775230 	.word	0x01775230
   296f8:	08000004 	.word	0x08000004

000296fc <am_hal_ble_transmitter_modex_set>:
   296fc:	b530      	push	{r4, r5, lr}
   296fe:	b085      	sub	sp, #20
   29700:	4604      	mov	r4, r0
   29702:	2300      	movs	r3, #0
   29704:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   29708:	466a      	mov	r2, sp
   2970a:	4927      	ldr	r1, [pc, #156]	; (297a8 <am_hal_ble_transmitter_modex_set+0xac>)
   2970c:	9303      	str	r3, [sp, #12]
   2970e:	f7ff fe7d 	bl	2940c <am_hal_ble_plf_reg_read>
   29712:	4620      	mov	r0, r4
   29714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29718:	4923      	ldr	r1, [pc, #140]	; (297a8 <am_hal_ble_transmitter_modex_set+0xac>)
   2971a:	f7ff ff37 	bl	2958c <am_hal_ble_plf_reg_write>
   2971e:	aa03      	add	r2, sp, #12
   29720:	4620      	mov	r0, r4
   29722:	4922      	ldr	r1, [pc, #136]	; (297ac <am_hal_ble_transmitter_modex_set+0xb0>)
   29724:	f7ff fe72 	bl	2940c <am_hal_ble_plf_reg_read>
   29728:	9b03      	ldr	r3, [sp, #12]
   2972a:	aa02      	add	r2, sp, #8
   2972c:	f043 0308 	orr.w	r3, r3, #8
   29730:	4620      	mov	r0, r4
   29732:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   29736:	9303      	str	r3, [sp, #12]
   29738:	f7ff fe68 	bl	2940c <am_hal_ble_plf_reg_read>
   2973c:	9b02      	ldr	r3, [sp, #8]
   2973e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   29742:	461a      	mov	r2, r3
   29744:	4620      	mov	r0, r4
   29746:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2974a:	9302      	str	r3, [sp, #8]
   2974c:	f7ff ff1e 	bl	2958c <am_hal_ble_plf_reg_write>
   29750:	aa01      	add	r2, sp, #4
   29752:	4620      	mov	r0, r4
   29754:	4916      	ldr	r1, [pc, #88]	; (297b0 <am_hal_ble_transmitter_modex_set+0xb4>)
   29756:	f7ff fe59 	bl	2940c <am_hal_ble_plf_reg_read>
   2975a:	9a01      	ldr	r2, [sp, #4]
   2975c:	4914      	ldr	r1, [pc, #80]	; (297b0 <am_hal_ble_transmitter_modex_set+0xb4>)
   2975e:	4620      	mov	r0, r4
   29760:	f042 0208 	orr.w	r2, r2, #8
   29764:	f7ff ff12 	bl	2958c <am_hal_ble_plf_reg_write>
   29768:	006a      	lsls	r2, r5, #1
   2976a:	f042 0201 	orr.w	r2, r2, #1
   2976e:	4620      	mov	r0, r4
   29770:	4910      	ldr	r1, [pc, #64]	; (297b4 <am_hal_ble_transmitter_modex_set+0xb8>)
   29772:	f7ff ff0b 	bl	2958c <am_hal_ble_plf_reg_write>
   29776:	490d      	ldr	r1, [pc, #52]	; (297ac <am_hal_ble_transmitter_modex_set+0xb0>)
   29778:	9a03      	ldr	r2, [sp, #12]
   2977a:	4620      	mov	r0, r4
   2977c:	f7ff ff06 	bl	2958c <am_hal_ble_plf_reg_write>
   29780:	4b0d      	ldr	r3, [pc, #52]	; (297b8 <am_hal_ble_transmitter_modex_set+0xbc>)
   29782:	68db      	ldr	r3, [r3, #12]
   29784:	b2db      	uxtb	r3, r3
   29786:	2b21      	cmp	r3, #33	; 0x21
   29788:	bf0c      	ite	eq
   2978a:	490c      	ldreq	r1, [pc, #48]	; (297bc <am_hal_ble_transmitter_modex_set+0xc0>)
   2978c:	490c      	ldrne	r1, [pc, #48]	; (297c0 <am_hal_ble_transmitter_modex_set+0xc4>)
   2978e:	462a      	mov	r2, r5
   29790:	4620      	mov	r0, r4
   29792:	f7ff fefb 	bl	2958c <am_hal_ble_plf_reg_write>
   29796:	4620      	mov	r0, r4
   29798:	9a00      	ldr	r2, [sp, #0]
   2979a:	4903      	ldr	r1, [pc, #12]	; (297a8 <am_hal_ble_transmitter_modex_set+0xac>)
   2979c:	f7ff fef6 	bl	2958c <am_hal_ble_plf_reg_write>
   297a0:	2000      	movs	r0, #0
   297a2:	b005      	add	sp, #20
   297a4:	bd30      	pop	{r4, r5, pc}
   297a6:	bf00      	nop
   297a8:	43000004 	.word	0x43000004
   297ac:	52000008 	.word	0x52000008
   297b0:	45800070 	.word	0x45800070
   297b4:	52000014 	.word	0x52000014
   297b8:	40020000 	.word	0x40020000
   297bc:	20006874 	.word	0x20006874
   297c0:	20006070 	.word	0x20006070

000297c4 <am_hal_ble_patch_complete.part.10>:
   297c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   297c8:	b08c      	sub	sp, #48	; 0x30
   297ca:	2300      	movs	r3, #0
   297cc:	9308      	str	r3, [sp, #32]
   297ce:	2201      	movs	r2, #1
   297d0:	2506      	movs	r5, #6
   297d2:	24ee      	movs	r4, #238	; 0xee
   297d4:	21f1      	movs	r1, #241	; 0xf1
   297d6:	9307      	str	r3, [sp, #28]
   297d8:	9309      	str	r3, [sp, #36]	; 0x24
   297da:	930a      	str	r3, [sp, #40]	; 0x28
   297dc:	930b      	str	r3, [sp, #44]	; 0x2c
   297de:	f88d 3004 	strb.w	r3, [sp, #4]
   297e2:	f88d 3005 	strb.w	r3, [sp, #5]
   297e6:	2302      	movs	r3, #2
   297e8:	f8ad 5020 	strh.w	r5, [sp, #32]
   297ec:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   297f0:	f88d 2000 	strb.w	r2, [sp]
   297f4:	f8cd d018 	str.w	sp, [sp, #24]
   297f8:	f88d 4001 	strb.w	r4, [sp, #1]
   297fc:	f88d 1002 	strb.w	r1, [sp, #2]
   29800:	f88d 3003 	strb.w	r3, [sp, #3]
   29804:	4605      	mov	r5, r0
   29806:	2800      	cmp	r0, #0
   29808:	f000 80e4 	beq.w	299d4 <am_hal_ble_patch_complete.part.10+0x210>
   2980c:	4e7d      	ldr	r6, [pc, #500]	; (29a04 <am_hal_ble_patch_complete.part.10+0x240>)
   2980e:	f241 3488 	movw	r4, #5000	; 0x1388
   29812:	e001      	b.n	29818 <am_hal_ble_patch_complete.part.10+0x54>
   29814:	3c01      	subs	r4, #1
   29816:	d00d      	beq.n	29834 <am_hal_ble_patch_complete.part.10+0x70>
   29818:	682b      	ldr	r3, [r5, #0]
   2981a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2981e:	42b3      	cmp	r3, r6
   29820:	d1f8      	bne.n	29814 <am_hal_ble_patch_complete.part.10+0x50>
   29822:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   29826:	a906      	add	r1, sp, #24
   29828:	4628      	mov	r0, r5
   2982a:	b11b      	cbz	r3, 29834 <am_hal_ble_patch_complete.part.10+0x70>
   2982c:	f7fe fe56 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29830:	2800      	cmp	r0, #0
   29832:	d1ef      	bne.n	29814 <am_hal_ble_patch_complete.part.10+0x50>
   29834:	4b74      	ldr	r3, [pc, #464]	; (29a08 <am_hal_ble_patch_complete.part.10+0x244>)
   29836:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2983a:	061b      	lsls	r3, r3, #24
   2983c:	f100 80d1 	bmi.w	299e2 <am_hal_ble_patch_complete.part.10+0x21e>
   29840:	4c72      	ldr	r4, [pc, #456]	; (29a0c <am_hal_ble_patch_complete.part.10+0x248>)
   29842:	4e71      	ldr	r6, [pc, #452]	; (29a08 <am_hal_ble_patch_complete.part.10+0x244>)
   29844:	e001      	b.n	2984a <am_hal_ble_patch_complete.part.10+0x86>
   29846:	3c01      	subs	r4, #1
   29848:	d019      	beq.n	2987e <am_hal_ble_patch_complete.part.10+0xba>
   2984a:	2010      	movs	r0, #16
   2984c:	f000 fc8e 	bl	2a16c <am_hal_flash_delay>
   29850:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   29854:	061f      	lsls	r7, r3, #24
   29856:	d5f6      	bpl.n	29846 <am_hal_ble_patch_complete.part.10+0x82>
   29858:	2302      	movs	r3, #2
   2985a:	af03      	add	r7, sp, #12
   2985c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   29860:	f8ad 3020 	strh.w	r3, [sp, #32]
   29864:	9706      	str	r7, [sp, #24]
   29866:	b12d      	cbz	r5, 29874 <am_hal_ble_patch_complete.part.10+0xb0>
   29868:	682e      	ldr	r6, [r5, #0]
   2986a:	4b66      	ldr	r3, [pc, #408]	; (29a04 <am_hal_ble_patch_complete.part.10+0x240>)
   2986c:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   29870:	429e      	cmp	r6, r3
   29872:	d009      	beq.n	29888 <am_hal_ble_patch_complete.part.10+0xc4>
   29874:	2402      	movs	r4, #2
   29876:	4620      	mov	r0, r4
   29878:	b00c      	add	sp, #48	; 0x30
   2987a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2987e:	4c64      	ldr	r4, [pc, #400]	; (29a10 <am_hal_ble_patch_complete.part.10+0x24c>)
   29880:	4620      	mov	r0, r4
   29882:	b00c      	add	sp, #48	; 0x30
   29884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29888:	a906      	add	r1, sp, #24
   2988a:	4628      	mov	r0, r5
   2988c:	f7fe fe26 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29890:	4604      	mov	r4, r0
   29892:	2800      	cmp	r0, #0
   29894:	d1ef      	bne.n	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   29896:	f89d 100d 	ldrb.w	r1, [sp, #13]
   2989a:	29ee      	cmp	r1, #238	; 0xee
   2989c:	d01a      	beq.n	298d4 <am_hal_ble_patch_complete.part.10+0x110>
   2989e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   298a2:	682a      	ldr	r2, [r5, #0]
   298a4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   298a8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   298ac:	b29b      	uxth	r3, r3
   298ae:	42b2      	cmp	r2, r6
   298b0:	f8ad 3020 	strh.w	r3, [sp, #32]
   298b4:	d1de      	bne.n	29874 <am_hal_ble_patch_complete.part.10+0xb0>
   298b6:	b133      	cbz	r3, 298c6 <am_hal_ble_patch_complete.part.10+0x102>
   298b8:	a906      	add	r1, sp, #24
   298ba:	4628      	mov	r0, r5
   298bc:	f7fe fe0e 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   298c0:	b108      	cbz	r0, 298c6 <am_hal_ble_patch_complete.part.10+0x102>
   298c2:	4604      	mov	r4, r0
   298c4:	e7d7      	b.n	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   298c6:	2301      	movs	r3, #1
   298c8:	4620      	mov	r0, r4
   298ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   298ce:	b00c      	add	sp, #48	; 0x30
   298d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   298d4:	682b      	ldr	r3, [r5, #0]
   298d6:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   298da:	2203      	movs	r2, #3
   298dc:	45b0      	cmp	r8, r6
   298de:	f8ad 2020 	strh.w	r2, [sp, #32]
   298e2:	d1c7      	bne.n	29874 <am_hal_ble_patch_complete.part.10+0xb0>
   298e4:	a906      	add	r1, sp, #24
   298e6:	4628      	mov	r0, r5
   298e8:	f7fe fdf8 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   298ec:	4604      	mov	r4, r0
   298ee:	2800      	cmp	r0, #0
   298f0:	d1c1      	bne.n	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   298f2:	2301      	movs	r3, #1
   298f4:	2005      	movs	r0, #5
   298f6:	2104      	movs	r1, #4
   298f8:	22fd      	movs	r2, #253	; 0xfd
   298fa:	9408      	str	r4, [sp, #32]
   298fc:	9407      	str	r4, [sp, #28]
   298fe:	9409      	str	r4, [sp, #36]	; 0x24
   29900:	940a      	str	r4, [sp, #40]	; 0x28
   29902:	940b      	str	r4, [sp, #44]	; 0x2c
   29904:	f8cd d018 	str.w	sp, [sp, #24]
   29908:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2990c:	f88d 3000 	strb.w	r3, [sp]
   29910:	f88d 3003 	strb.w	r3, [sp, #3]
   29914:	f88d 3004 	strb.w	r3, [sp, #4]
   29918:	f8ad 0020 	strh.w	r0, [sp, #32]
   2991c:	f88d 1001 	strb.w	r1, [sp, #1]
   29920:	f88d 2002 	strb.w	r2, [sp, #2]
   29924:	f241 3688 	movw	r6, #5000	; 0x1388
   29928:	e002      	b.n	29930 <am_hal_ble_patch_complete.part.10+0x16c>
   2992a:	2402      	movs	r4, #2
   2992c:	3e01      	subs	r6, #1
   2992e:	d0a2      	beq.n	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   29930:	682b      	ldr	r3, [r5, #0]
   29932:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29936:	4543      	cmp	r3, r8
   29938:	d1f7      	bne.n	2992a <am_hal_ble_patch_complete.part.10+0x166>
   2993a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2993e:	a906      	add	r1, sp, #24
   29940:	4628      	mov	r0, r5
   29942:	b123      	cbz	r3, 2994e <am_hal_ble_patch_complete.part.10+0x18a>
   29944:	f7fe fdca 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29948:	4604      	mov	r4, r0
   2994a:	2800      	cmp	r0, #0
   2994c:	d1ee      	bne.n	2992c <am_hal_ble_patch_complete.part.10+0x168>
   2994e:	4e2e      	ldr	r6, [pc, #184]	; (29a08 <am_hal_ble_patch_complete.part.10+0x244>)
   29950:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   29954:	0619      	lsls	r1, r3, #24
   29956:	d40a      	bmi.n	2996e <am_hal_ble_patch_complete.part.10+0x1aa>
   29958:	4c2c      	ldr	r4, [pc, #176]	; (29a0c <am_hal_ble_patch_complete.part.10+0x248>)
   2995a:	e001      	b.n	29960 <am_hal_ble_patch_complete.part.10+0x19c>
   2995c:	3c01      	subs	r4, #1
   2995e:	d08e      	beq.n	2987e <am_hal_ble_patch_complete.part.10+0xba>
   29960:	2010      	movs	r0, #16
   29962:	f000 fc03 	bl	2a16c <am_hal_flash_delay>
   29966:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2996a:	0618      	lsls	r0, r3, #24
   2996c:	d5f6      	bpl.n	2995c <am_hal_ble_patch_complete.part.10+0x198>
   2996e:	682e      	ldr	r6, [r5, #0]
   29970:	4b24      	ldr	r3, [pc, #144]	; (29a04 <am_hal_ble_patch_complete.part.10+0x240>)
   29972:	9706      	str	r7, [sp, #24]
   29974:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   29978:	2702      	movs	r7, #2
   2997a:	2209      	movs	r2, #9
   2997c:	429e      	cmp	r6, r3
   2997e:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   29982:	f8ad 2020 	strh.w	r2, [sp, #32]
   29986:	f47f af75 	bne.w	29874 <am_hal_ble_patch_complete.part.10+0xb0>
   2998a:	a906      	add	r1, sp, #24
   2998c:	4628      	mov	r0, r5
   2998e:	f7fe fda5 	bl	284dc <am_hal_ble_blocking_transfer.part.7>
   29992:	4604      	mov	r4, r0
   29994:	2800      	cmp	r0, #0
   29996:	f47f af6e 	bne.w	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   2999a:	682b      	ldr	r3, [r5, #0]
   2999c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   299a0:	42b3      	cmp	r3, r6
   299a2:	d026      	beq.n	299f2 <am_hal_ble_patch_complete.part.10+0x22e>
   299a4:	2301      	movs	r3, #1
   299a6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   299aa:	481a      	ldr	r0, [pc, #104]	; (29a14 <am_hal_ble_patch_complete.part.10+0x250>)
   299ac:	f000 fbde 	bl	2a16c <am_hal_flash_delay>
   299b0:	4a19      	ldr	r2, [pc, #100]	; (29a18 <am_hal_ble_patch_complete.part.10+0x254>)
   299b2:	4b1a      	ldr	r3, [pc, #104]	; (29a1c <am_hal_ble_patch_complete.part.10+0x258>)
   299b4:	6811      	ldr	r1, [r2, #0]
   299b6:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   299ba:	429a      	cmp	r2, r3
   299bc:	f47f af5b 	bne.w	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   299c0:	b2c9      	uxtb	r1, r1
   299c2:	f1a1 0320 	sub.w	r3, r1, #32
   299c6:	2b20      	cmp	r3, #32
   299c8:	f63f af55 	bhi.w	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   299cc:	4628      	mov	r0, r5
   299ce:	f7ff fe95 	bl	296fc <am_hal_ble_transmitter_modex_set>
   299d2:	e750      	b.n	29876 <am_hal_ble_patch_complete.part.10+0xb2>
   299d4:	4b0c      	ldr	r3, [pc, #48]	; (29a08 <am_hal_ble_patch_complete.part.10+0x244>)
   299d6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   299da:	061a      	lsls	r2, r3, #24
   299dc:	f57f af30 	bpl.w	29840 <am_hal_ble_patch_complete.part.10+0x7c>
   299e0:	e748      	b.n	29874 <am_hal_ble_patch_complete.part.10+0xb0>
   299e2:	2302      	movs	r3, #2
   299e4:	af03      	add	r7, sp, #12
   299e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   299ea:	f8ad 3020 	strh.w	r3, [sp, #32]
   299ee:	9706      	str	r7, [sp, #24]
   299f0:	e73a      	b.n	29868 <am_hal_ble_patch_complete.part.10+0xa4>
   299f2:	4b05      	ldr	r3, [pc, #20]	; (29a08 <am_hal_ble_patch_complete.part.10+0x244>)
   299f4:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   299f8:	f367 0283 	bfi	r2, r7, #2, #2
   299fc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   29a00:	e7d0      	b.n	299a4 <am_hal_ble_patch_complete.part.10+0x1e0>
   29a02:	bf00      	nop
   29a04:	01775230 	.word	0x01775230
   29a08:	5000c000 	.word	0x5000c000
   29a0c:	000186a0 	.word	0x000186a0
   29a10:	08000004 	.word	0x08000004
   29a14:	007a1200 	.word	0x007a1200
   29a18:	50023808 	.word	0x50023808
   29a1c:	18240600 	.word	0x18240600

00029a20 <am_hal_ble_boot>:
   29a20:	b128      	cbz	r0, 29a2e <am_hal_ble_boot+0xe>
   29a22:	6803      	ldr	r3, [r0, #0]
   29a24:	4a59      	ldr	r2, [pc, #356]	; (29b8c <am_hal_ble_boot+0x16c>)
   29a26:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29a2a:	4293      	cmp	r3, r2
   29a2c:	d001      	beq.n	29a32 <am_hal_ble_boot+0x12>
   29a2e:	2002      	movs	r0, #2
   29a30:	4770      	bx	lr
   29a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a36:	7a03      	ldrb	r3, [r0, #8]
   29a38:	b082      	sub	sp, #8
   29a3a:	4604      	mov	r4, r0
   29a3c:	2b00      	cmp	r3, #0
   29a3e:	d065      	beq.n	29b0c <am_hal_ble_boot+0xec>
   29a40:	4a53      	ldr	r2, [pc, #332]	; (29b90 <am_hal_ble_boot+0x170>)
   29a42:	68d3      	ldr	r3, [r2, #12]
   29a44:	b2db      	uxtb	r3, r3
   29a46:	2b11      	cmp	r3, #17
   29a48:	d076      	beq.n	29b38 <am_hal_ble_boot+0x118>
   29a4a:	68d3      	ldr	r3, [r2, #12]
   29a4c:	b2db      	uxtb	r3, r3
   29a4e:	2b12      	cmp	r3, #18
   29a50:	d072      	beq.n	29b38 <am_hal_ble_boot+0x118>
   29a52:	4b4f      	ldr	r3, [pc, #316]	; (29b90 <am_hal_ble_boot+0x170>)
   29a54:	68db      	ldr	r3, [r3, #12]
   29a56:	b2db      	uxtb	r3, r3
   29a58:	2b21      	cmp	r3, #33	; 0x21
   29a5a:	f000 808d 	beq.w	29b78 <am_hal_ble_boot+0x158>
   29a5e:	4b4d      	ldr	r3, [pc, #308]	; (29b94 <am_hal_ble_boot+0x174>)
   29a60:	68da      	ldr	r2, [r3, #12]
   29a62:	4b4d      	ldr	r3, [pc, #308]	; (29b98 <am_hal_ble_boot+0x178>)
   29a64:	681b      	ldr	r3, [r3, #0]
   29a66:	ba1b      	rev	r3, r3
   29a68:	1c5d      	adds	r5, r3, #1
   29a6a:	bf18      	it	ne
   29a6c:	6093      	strne	r3, [r2, #8]
   29a6e:	4b4b      	ldr	r3, [pc, #300]	; (29b9c <am_hal_ble_boot+0x17c>)
   29a70:	681b      	ldr	r3, [r3, #0]
   29a72:	1c58      	adds	r0, r3, #1
   29a74:	d009      	beq.n	29a8a <am_hal_ble_boot+0x6a>
   29a76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29a7a:	ba1b      	rev	r3, r3
   29a7c:	1c59      	adds	r1, r3, #1
   29a7e:	d004      	beq.n	29a8a <am_hal_ble_boot+0x6a>
   29a80:	68d1      	ldr	r1, [r2, #12]
   29a82:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   29a86:	430b      	orrs	r3, r1
   29a88:	60d3      	str	r3, [r2, #12]
   29a8a:	4a41      	ldr	r2, [pc, #260]	; (29b90 <am_hal_ble_boot+0x170>)
   29a8c:	68d3      	ldr	r3, [r2, #12]
   29a8e:	b2db      	uxtb	r3, r3
   29a90:	2b11      	cmp	r3, #17
   29a92:	d031      	beq.n	29af8 <am_hal_ble_boot+0xd8>
   29a94:	68d3      	ldr	r3, [r2, #12]
   29a96:	b2db      	uxtb	r3, r3
   29a98:	2b12      	cmp	r3, #18
   29a9a:	d02d      	beq.n	29af8 <am_hal_ble_boot+0xd8>
   29a9c:	4a40      	ldr	r2, [pc, #256]	; (29ba0 <am_hal_ble_boot+0x180>)
   29a9e:	4b41      	ldr	r3, [pc, #260]	; (29ba4 <am_hal_ble_boot+0x184>)
   29aa0:	6816      	ldr	r6, [r2, #0]
   29aa2:	681b      	ldr	r3, [r3, #0]
   29aa4:	b1f6      	cbz	r6, 29ae4 <am_hal_ble_boot+0xc4>
   29aa6:	4d40      	ldr	r5, [pc, #256]	; (29ba8 <am_hal_ble_boot+0x188>)
   29aa8:	f1a3 0804 	sub.w	r8, r3, #4
   29aac:	2700      	movs	r7, #0
   29aae:	f858 1f04 	ldr.w	r1, [r8, #4]!
   29ab2:	684b      	ldr	r3, [r1, #4]
   29ab4:	68c8      	ldr	r0, [r1, #12]
   29ab6:	b16b      	cbz	r3, 29ad4 <am_hal_ble_boot+0xb4>
   29ab8:	eb00 0e03 	add.w	lr, r0, r3
   29abc:	2300      	movs	r3, #0
   29abe:	f810 2b01 	ldrb.w	r2, [r0], #1
   29ac2:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   29ac6:	4570      	cmp	r0, lr
   29ac8:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   29acc:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   29ad0:	b29b      	uxth	r3, r3
   29ad2:	d1f4      	bne.n	29abe <am_hal_ble_boot+0x9e>
   29ad4:	608b      	str	r3, [r1, #8]
   29ad6:	4620      	mov	r0, r4
   29ad8:	f7ff faa8 	bl	2902c <am_hal_ble_patch_apply>
   29adc:	b948      	cbnz	r0, 29af2 <am_hal_ble_boot+0xd2>
   29ade:	3701      	adds	r7, #1
   29ae0:	42b7      	cmp	r7, r6
   29ae2:	d1e4      	bne.n	29aae <am_hal_ble_boot+0x8e>
   29ae4:	6823      	ldr	r3, [r4, #0]
   29ae6:	4a29      	ldr	r2, [pc, #164]	; (29b8c <am_hal_ble_boot+0x16c>)
   29ae8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   29aec:	4293      	cmp	r3, r2
   29aee:	d008      	beq.n	29b02 <am_hal_ble_boot+0xe2>
   29af0:	2002      	movs	r0, #2
   29af2:	b002      	add	sp, #8
   29af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29af8:	4a2c      	ldr	r2, [pc, #176]	; (29bac <am_hal_ble_boot+0x18c>)
   29afa:	4b2d      	ldr	r3, [pc, #180]	; (29bb0 <am_hal_ble_boot+0x190>)
   29afc:	6816      	ldr	r6, [r2, #0]
   29afe:	681b      	ldr	r3, [r3, #0]
   29b00:	e7d0      	b.n	29aa4 <am_hal_ble_boot+0x84>
   29b02:	4620      	mov	r0, r4
   29b04:	f7ff fe5e 	bl	297c4 <am_hal_ble_patch_complete.part.10>
   29b08:	2800      	cmp	r0, #0
   29b0a:	d1f2      	bne.n	29af2 <am_hal_ble_boot+0xd2>
   29b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29b10:	4b1f      	ldr	r3, [pc, #124]	; (29b90 <am_hal_ble_boot+0x170>)
   29b12:	9201      	str	r2, [sp, #4]
   29b14:	68db      	ldr	r3, [r3, #12]
   29b16:	b2db      	uxtb	r3, r3
   29b18:	2b21      	cmp	r3, #33	; 0x21
   29b1a:	d030      	beq.n	29b7e <am_hal_ble_boot+0x15e>
   29b1c:	4620      	mov	r0, r4
   29b1e:	aa01      	add	r2, sp, #4
   29b20:	4924      	ldr	r1, [pc, #144]	; (29bb4 <am_hal_ble_boot+0x194>)
   29b22:	f7ff fc73 	bl	2940c <am_hal_ble_plf_reg_read>
   29b26:	9b01      	ldr	r3, [sp, #4]
   29b28:	4823      	ldr	r0, [pc, #140]	; (29bb8 <am_hal_ble_boot+0x198>)
   29b2a:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   29b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   29b32:	bf98      	it	ls
   29b34:	2000      	movls	r0, #0
   29b36:	e7dc      	b.n	29af2 <am_hal_ble_boot+0xd2>
   29b38:	4b20      	ldr	r3, [pc, #128]	; (29bbc <am_hal_ble_boot+0x19c>)
   29b3a:	681b      	ldr	r3, [r3, #0]
   29b3c:	6819      	ldr	r1, [r3, #0]
   29b3e:	684b      	ldr	r3, [r1, #4]
   29b40:	68c8      	ldr	r0, [r1, #12]
   29b42:	b16b      	cbz	r3, 29b60 <am_hal_ble_boot+0x140>
   29b44:	4e18      	ldr	r6, [pc, #96]	; (29ba8 <am_hal_ble_boot+0x188>)
   29b46:	18c5      	adds	r5, r0, r3
   29b48:	2300      	movs	r3, #0
   29b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
   29b4e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   29b52:	4285      	cmp	r5, r0
   29b54:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   29b58:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   29b5c:	b29b      	uxth	r3, r3
   29b5e:	d1f4      	bne.n	29b4a <am_hal_ble_boot+0x12a>
   29b60:	608b      	str	r3, [r1, #8]
   29b62:	4620      	mov	r0, r4
   29b64:	f7ff fa62 	bl	2902c <am_hal_ble_patch_apply>
   29b68:	2800      	cmp	r0, #0
   29b6a:	d1c2      	bne.n	29af2 <am_hal_ble_boot+0xd2>
   29b6c:	4620      	mov	r0, r4
   29b6e:	f7ff f921 	bl	28db4 <am_hal_ble_patch_copy_end_apply>
   29b72:	2800      	cmp	r0, #0
   29b74:	d1bd      	bne.n	29af2 <am_hal_ble_boot+0xd2>
   29b76:	e76c      	b.n	29a52 <am_hal_ble_boot+0x32>
   29b78:	4b11      	ldr	r3, [pc, #68]	; (29bc0 <am_hal_ble_boot+0x1a0>)
   29b7a:	68da      	ldr	r2, [r3, #12]
   29b7c:	e771      	b.n	29a62 <am_hal_ble_boot+0x42>
   29b7e:	4620      	mov	r0, r4
   29b80:	aa01      	add	r2, sp, #4
   29b82:	4910      	ldr	r1, [pc, #64]	; (29bc4 <am_hal_ble_boot+0x1a4>)
   29b84:	f7ff fc42 	bl	2940c <am_hal_ble_plf_reg_read>
   29b88:	e7cd      	b.n	29b26 <am_hal_ble_boot+0x106>
   29b8a:	bf00      	nop
   29b8c:	01775230 	.word	0x01775230
   29b90:	40020000 	.word	0x40020000
   29b94:	10002c5c 	.word	0x10002c5c
   29b98:	50023800 	.word	0x50023800
   29b9c:	50023804 	.word	0x50023804
   29ba0:	0002e680 	.word	0x0002e680
   29ba4:	10003598 	.word	0x10003598
   29ba8:	0002ce30 	.word	0x0002ce30
   29bac:	0002dd68 	.word	0x0002dd68
   29bb0:	10002d80 	.word	0x10002d80
   29bb4:	20006054 	.word	0x20006054
   29bb8:	0800000b 	.word	0x0800000b
   29bbc:	10002c48 	.word	0x10002c48
   29bc0:	1000359c 	.word	0x1000359c
   29bc4:	20006858 	.word	0x20006858

00029bc8 <am_hal_ble_tx_power_set>:
   29bc8:	b570      	push	{r4, r5, r6, lr}
   29bca:	b082      	sub	sp, #8
   29bcc:	4605      	mov	r5, r0
   29bce:	2300      	movs	r3, #0
   29bd0:	460e      	mov	r6, r1
   29bd2:	466a      	mov	r2, sp
   29bd4:	040c      	lsls	r4, r1, #16
   29bd6:	4919      	ldr	r1, [pc, #100]	; (29c3c <am_hal_ble_tx_power_set+0x74>)
   29bd8:	9301      	str	r3, [sp, #4]
   29bda:	f7ff fc17 	bl	2940c <am_hal_ble_plf_reg_read>
   29bde:	4917      	ldr	r1, [pc, #92]	; (29c3c <am_hal_ble_tx_power_set+0x74>)
   29be0:	4628      	mov	r0, r5
   29be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29be6:	f7ff fcd1 	bl	2958c <am_hal_ble_plf_reg_write>
   29bea:	4b15      	ldr	r3, [pc, #84]	; (29c40 <am_hal_ble_tx_power_set+0x78>)
   29bec:	68db      	ldr	r3, [r3, #12]
   29bee:	b2db      	uxtb	r3, r3
   29bf0:	2b21      	cmp	r3, #33	; 0x21
   29bf2:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   29bf6:	bf0c      	ite	eq
   29bf8:	4912      	ldreq	r1, [pc, #72]	; (29c44 <am_hal_ble_tx_power_set+0x7c>)
   29bfa:	4913      	ldrne	r1, [pc, #76]	; (29c48 <am_hal_ble_tx_power_set+0x80>)
   29bfc:	aa01      	add	r2, sp, #4
   29bfe:	f044 0408 	orr.w	r4, r4, #8
   29c02:	4628      	mov	r0, r5
   29c04:	f7ff fc02 	bl	2940c <am_hal_ble_plf_reg_read>
   29c08:	4910      	ldr	r1, [pc, #64]	; (29c4c <am_hal_ble_tx_power_set+0x84>)
   29c0a:	f88d 6004 	strb.w	r6, [sp, #4]
   29c0e:	4622      	mov	r2, r4
   29c10:	4628      	mov	r0, r5
   29c12:	f7ff fcbb 	bl	2958c <am_hal_ble_plf_reg_write>
   29c16:	4b0a      	ldr	r3, [pc, #40]	; (29c40 <am_hal_ble_tx_power_set+0x78>)
   29c18:	9a01      	ldr	r2, [sp, #4]
   29c1a:	68db      	ldr	r3, [r3, #12]
   29c1c:	b2db      	uxtb	r3, r3
   29c1e:	2b21      	cmp	r3, #33	; 0x21
   29c20:	bf0c      	ite	eq
   29c22:	4908      	ldreq	r1, [pc, #32]	; (29c44 <am_hal_ble_tx_power_set+0x7c>)
   29c24:	4908      	ldrne	r1, [pc, #32]	; (29c48 <am_hal_ble_tx_power_set+0x80>)
   29c26:	4628      	mov	r0, r5
   29c28:	f7ff fcb0 	bl	2958c <am_hal_ble_plf_reg_write>
   29c2c:	4628      	mov	r0, r5
   29c2e:	9a00      	ldr	r2, [sp, #0]
   29c30:	4902      	ldr	r1, [pc, #8]	; (29c3c <am_hal_ble_tx_power_set+0x74>)
   29c32:	f7ff fcab 	bl	2958c <am_hal_ble_plf_reg_write>
   29c36:	2000      	movs	r0, #0
   29c38:	b002      	add	sp, #8
   29c3a:	bd70      	pop	{r4, r5, r6, pc}
   29c3c:	43000004 	.word	0x43000004
   29c40:	40020000 	.word	0x40020000
   29c44:	20006838 	.word	0x20006838
   29c48:	20006038 	.word	0x20006038
   29c4c:	52400018 	.word	0x52400018

00029c50 <am_hal_cachectrl_config>:
   29c50:	b530      	push	{r4, r5, lr}
   29c52:	b083      	sub	sp, #12
   29c54:	4605      	mov	r5, r0
   29c56:	f000 fc8f 	bl	2a578 <am_hal_interrupt_master_disable>
   29c5a:	4c0f      	ldr	r4, [pc, #60]	; (29c98 <am_hal_cachectrl_config+0x48>)
   29c5c:	9001      	str	r0, [sp, #4]
   29c5e:	6823      	ldr	r3, [r4, #0]
   29c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   29c64:	6023      	str	r3, [r4, #0]
   29c66:	9801      	ldr	r0, [sp, #4]
   29c68:	f000 fc8a 	bl	2a580 <am_hal_interrupt_master_set>
   29c6c:	78ab      	ldrb	r3, [r5, #2]
   29c6e:	782a      	ldrb	r2, [r5, #0]
   29c70:	7869      	ldrb	r1, [r5, #1]
   29c72:	005b      	lsls	r3, r3, #1
   29c74:	0112      	lsls	r2, r2, #4
   29c76:	b2d2      	uxtb	r2, r2
   29c78:	f003 0302 	and.w	r3, r3, #2
   29c7c:	4313      	orrs	r3, r2
   29c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   29c82:	020a      	lsls	r2, r1, #8
   29c84:	f402 7240 	and.w	r2, r2, #768	; 0x300
   29c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   29c8c:	4313      	orrs	r3, r2
   29c8e:	2000      	movs	r0, #0
   29c90:	6023      	str	r3, [r4, #0]
   29c92:	b003      	add	sp, #12
   29c94:	bd30      	pop	{r4, r5, pc}
   29c96:	bf00      	nop
   29c98:	40018000 	.word	0x40018000

00029c9c <am_hal_cachectrl_enable>:
   29c9c:	4a03      	ldr	r2, [pc, #12]	; (29cac <am_hal_cachectrl_enable+0x10>)
   29c9e:	6813      	ldr	r3, [r2, #0]
   29ca0:	f043 0301 	orr.w	r3, r3, #1
   29ca4:	6013      	str	r3, [r2, #0]
   29ca6:	2000      	movs	r0, #0
   29ca8:	4770      	bx	lr
   29caa:	bf00      	nop
   29cac:	40018000 	.word	0x40018000

00029cb0 <am_hal_cachectrl_control>:
   29cb0:	b510      	push	{r4, lr}
   29cb2:	3801      	subs	r0, #1
   29cb4:	b08e      	sub	sp, #56	; 0x38
   29cb6:	2810      	cmp	r0, #16
   29cb8:	f200 8143 	bhi.w	29f42 <am_hal_cachectrl_control+0x292>
   29cbc:	e8df f010 	tbh	[pc, r0, lsl #1]
   29cc0:	01380136 	.word	0x01380136
   29cc4:	0011013e 	.word	0x0011013e
   29cc8:	001a0018 	.word	0x001a0018
   29ccc:	001f001c 	.word	0x001f001c
   29cd0:	00300022 	.word	0x00300022
   29cd4:	0074003c 	.word	0x0074003c
   29cd8:	00e400ac 	.word	0x00e400ac
   29cdc:	011a00ff 	.word	0x011a00ff
   29ce0:	0120      	.short	0x0120
   29ce2:	f44f 7208 	mov.w	r2, #544	; 0x220
   29ce6:	4ba8      	ldr	r3, [pc, #672]	; (29f88 <am_hal_cachectrl_control+0x2d8>)
   29ce8:	2000      	movs	r0, #0
   29cea:	609a      	str	r2, [r3, #8]
   29cec:	b00e      	add	sp, #56	; 0x38
   29cee:	bd10      	pop	{r4, pc}
   29cf0:	2240      	movs	r2, #64	; 0x40
   29cf2:	e7f8      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29cf4:	2220      	movs	r2, #32
   29cf6:	e7f6      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29cfc:	e7f3      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
   29d02:	e7f0      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29d04:	f000 fc38 	bl	2a578 <am_hal_interrupt_master_disable>
   29d08:	4a9f      	ldr	r2, [pc, #636]	; (29f88 <am_hal_cachectrl_control+0x2d8>)
   29d0a:	9000      	str	r0, [sp, #0]
   29d0c:	6813      	ldr	r3, [r2, #0]
   29d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   29d12:	6013      	str	r3, [r2, #0]
   29d14:	9800      	ldr	r0, [sp, #0]
   29d16:	f000 fc33 	bl	2a580 <am_hal_interrupt_master_set>
   29d1a:	2000      	movs	r0, #0
   29d1c:	b00e      	add	sp, #56	; 0x38
   29d1e:	bd10      	pop	{r4, pc}
   29d20:	f000 fc2a 	bl	2a578 <am_hal_interrupt_master_disable>
   29d24:	4a98      	ldr	r2, [pc, #608]	; (29f88 <am_hal_cachectrl_control+0x2d8>)
   29d26:	9001      	str	r0, [sp, #4]
   29d28:	6813      	ldr	r3, [r2, #0]
   29d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   29d2e:	6013      	str	r3, [r2, #0]
   29d30:	9801      	ldr	r0, [sp, #4]
   29d32:	f000 fc25 	bl	2a580 <am_hal_interrupt_master_set>
   29d36:	e7f0      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29d38:	f000 fc1e 	bl	2a578 <am_hal_interrupt_master_disable>
   29d3c:	4603      	mov	r3, r0
   29d3e:	4893      	ldr	r0, [pc, #588]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29d40:	9302      	str	r3, [sp, #8]
   29d42:	f000 fa5d 	bl	2a200 <am_hal_flash_load_ui32>
   29d46:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   29d4a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   29d4e:	488f      	ldr	r0, [pc, #572]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29d50:	f000 fa5a 	bl	2a208 <am_hal_flash_store_ui32>
   29d54:	9802      	ldr	r0, [sp, #8]
   29d56:	f000 fc13 	bl	2a580 <am_hal_interrupt_master_set>
   29d5a:	f000 fc0d 	bl	2a578 <am_hal_interrupt_master_disable>
   29d5e:	4603      	mov	r3, r0
   29d60:	488a      	ldr	r0, [pc, #552]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29d62:	9303      	str	r3, [sp, #12]
   29d64:	f000 fa4c 	bl	2a200 <am_hal_flash_load_ui32>
   29d68:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   29d6c:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
   29d70:	4886      	ldr	r0, [pc, #536]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29d72:	f000 fa49 	bl	2a208 <am_hal_flash_store_ui32>
   29d76:	9803      	ldr	r0, [sp, #12]
   29d78:	f000 fc02 	bl	2a580 <am_hal_interrupt_master_set>
   29d7c:	f000 fbfc 	bl	2a578 <am_hal_interrupt_master_disable>
   29d80:	4603      	mov	r3, r0
   29d82:	4882      	ldr	r0, [pc, #520]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29d84:	9304      	str	r3, [sp, #16]
   29d86:	f000 fa3b 	bl	2a200 <am_hal_flash_load_ui32>
   29d8a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   29d8e:	f021 010f 	bic.w	r1, r1, #15
   29d92:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   29d96:	f041 0103 	orr.w	r1, r1, #3
   29d9a:	487c      	ldr	r0, [pc, #496]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29d9c:	f000 fa34 	bl	2a208 <am_hal_flash_store_ui32>
   29da0:	9804      	ldr	r0, [sp, #16]
   29da2:	f000 fbed 	bl	2a580 <am_hal_interrupt_master_set>
   29da6:	e7b8      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29da8:	f000 fbe6 	bl	2a578 <am_hal_interrupt_master_disable>
   29dac:	4603      	mov	r3, r0
   29dae:	4877      	ldr	r0, [pc, #476]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29db0:	9305      	str	r3, [sp, #20]
   29db2:	f000 fa25 	bl	2a200 <am_hal_flash_load_ui32>
   29db6:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   29dba:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   29dbe:	4873      	ldr	r0, [pc, #460]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29dc0:	f000 fa22 	bl	2a208 <am_hal_flash_store_ui32>
   29dc4:	9805      	ldr	r0, [sp, #20]
   29dc6:	f000 fbdb 	bl	2a580 <am_hal_interrupt_master_set>
   29dca:	f000 fbd5 	bl	2a578 <am_hal_interrupt_master_disable>
   29dce:	4603      	mov	r3, r0
   29dd0:	486e      	ldr	r0, [pc, #440]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29dd2:	9306      	str	r3, [sp, #24]
   29dd4:	f000 fa14 	bl	2a200 <am_hal_flash_load_ui32>
   29dd8:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   29ddc:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
   29de0:	486a      	ldr	r0, [pc, #424]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29de2:	f000 fa11 	bl	2a208 <am_hal_flash_store_ui32>
   29de6:	9806      	ldr	r0, [sp, #24]
   29de8:	f000 fbca 	bl	2a580 <am_hal_interrupt_master_set>
   29dec:	f000 fbc4 	bl	2a578 <am_hal_interrupt_master_disable>
   29df0:	4603      	mov	r3, r0
   29df2:	4866      	ldr	r0, [pc, #408]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29df4:	9307      	str	r3, [sp, #28]
   29df6:	f000 fa03 	bl	2a200 <am_hal_flash_load_ui32>
   29dfa:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   29dfe:	f021 010f 	bic.w	r1, r1, #15
   29e02:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   29e06:	f041 0101 	orr.w	r1, r1, #1
   29e0a:	4860      	ldr	r0, [pc, #384]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e0c:	f000 f9fc 	bl	2a208 <am_hal_flash_store_ui32>
   29e10:	9807      	ldr	r0, [sp, #28]
   29e12:	f000 fbb5 	bl	2a580 <am_hal_interrupt_master_set>
   29e16:	e780      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29e18:	f000 fbae 	bl	2a578 <am_hal_interrupt_master_disable>
   29e1c:	4603      	mov	r3, r0
   29e1e:	485b      	ldr	r0, [pc, #364]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e20:	9308      	str	r3, [sp, #32]
   29e22:	f000 f9ed 	bl	2a200 <am_hal_flash_load_ui32>
   29e26:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   29e2a:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   29e2e:	4857      	ldr	r0, [pc, #348]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e30:	f000 f9ea 	bl	2a208 <am_hal_flash_store_ui32>
   29e34:	9808      	ldr	r0, [sp, #32]
   29e36:	f000 fba3 	bl	2a580 <am_hal_interrupt_master_set>
   29e3a:	f000 fb9d 	bl	2a578 <am_hal_interrupt_master_disable>
   29e3e:	4603      	mov	r3, r0
   29e40:	4852      	ldr	r0, [pc, #328]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e42:	9309      	str	r3, [sp, #36]	; 0x24
   29e44:	f000 f9dc 	bl	2a200 <am_hal_flash_load_ui32>
   29e48:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   29e4c:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
   29e50:	484e      	ldr	r0, [pc, #312]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e52:	f000 f9d9 	bl	2a208 <am_hal_flash_store_ui32>
   29e56:	9809      	ldr	r0, [sp, #36]	; 0x24
   29e58:	f000 fb92 	bl	2a580 <am_hal_interrupt_master_set>
   29e5c:	f000 fb8c 	bl	2a578 <am_hal_interrupt_master_disable>
   29e60:	4603      	mov	r3, r0
   29e62:	484a      	ldr	r0, [pc, #296]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e64:	930a      	str	r3, [sp, #40]	; 0x28
   29e66:	f000 f9cb 	bl	2a200 <am_hal_flash_load_ui32>
   29e6a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   29e6e:	f021 010f 	bic.w	r1, r1, #15
   29e72:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   29e76:	f041 0101 	orr.w	r1, r1, #1
   29e7a:	4844      	ldr	r0, [pc, #272]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e7c:	f000 f9c4 	bl	2a208 <am_hal_flash_store_ui32>
   29e80:	980a      	ldr	r0, [sp, #40]	; 0x28
   29e82:	f000 fb7d 	bl	2a580 <am_hal_interrupt_master_set>
   29e86:	e748      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29e88:	2900      	cmp	r1, #0
   29e8a:	d05a      	beq.n	29f42 <am_hal_cachectrl_control+0x292>
   29e8c:	680c      	ldr	r4, [r1, #0]
   29e8e:	2c03      	cmp	r4, #3
   29e90:	d834      	bhi.n	29efc <am_hal_cachectrl_control+0x24c>
   29e92:	f000 fb71 	bl	2a578 <am_hal_interrupt_master_disable>
   29e96:	4603      	mov	r3, r0
   29e98:	483c      	ldr	r0, [pc, #240]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29e9a:	930b      	str	r3, [sp, #44]	; 0x2c
   29e9c:	f000 f9b0 	bl	2a200 <am_hal_flash_load_ui32>
   29ea0:	0323      	lsls	r3, r4, #12
   29ea2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   29ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   29eaa:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   29eae:	4319      	orrs	r1, r3
   29eb0:	4836      	ldr	r0, [pc, #216]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29eb2:	f000 f9a9 	bl	2a208 <am_hal_flash_store_ui32>
   29eb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   29eb8:	f000 fb62 	bl	2a580 <am_hal_interrupt_master_set>
   29ebc:	e72d      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29ebe:	2900      	cmp	r1, #0
   29ec0:	d03f      	beq.n	29f42 <am_hal_cachectrl_control+0x292>
   29ec2:	680c      	ldr	r4, [r1, #0]
   29ec4:	2c07      	cmp	r4, #7
   29ec6:	d819      	bhi.n	29efc <am_hal_cachectrl_control+0x24c>
   29ec8:	f000 fb56 	bl	2a578 <am_hal_interrupt_master_disable>
   29ecc:	4603      	mov	r3, r0
   29ece:	482f      	ldr	r0, [pc, #188]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29ed0:	930c      	str	r3, [sp, #48]	; 0x30
   29ed2:	f000 f995 	bl	2a200 <am_hal_flash_load_ui32>
   29ed6:	0123      	lsls	r3, r4, #4
   29ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   29edc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   29ee0:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   29ee4:	4319      	orrs	r1, r3
   29ee6:	4829      	ldr	r0, [pc, #164]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29ee8:	f000 f98e 	bl	2a208 <am_hal_flash_store_ui32>
   29eec:	980c      	ldr	r0, [sp, #48]	; 0x30
   29eee:	f000 fb47 	bl	2a580 <am_hal_interrupt_master_set>
   29ef2:	e712      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29ef4:	b329      	cbz	r1, 29f42 <am_hal_cachectrl_control+0x292>
   29ef6:	680c      	ldr	r4, [r1, #0]
   29ef8:	2c0f      	cmp	r4, #15
   29efa:	d926      	bls.n	29f4a <am_hal_cachectrl_control+0x29a>
   29efc:	2001      	movs	r0, #1
   29efe:	e6f5      	b.n	29cec <am_hal_cachectrl_control+0x3c>
   29f00:	b1f9      	cbz	r1, 29f42 <am_hal_cachectrl_control+0x292>
   29f02:	684a      	ldr	r2, [r1, #4]
   29f04:	4b22      	ldr	r3, [pc, #136]	; (29f90 <am_hal_cachectrl_control+0x2e0>)
   29f06:	4013      	ands	r3, r2
   29f08:	b9db      	cbnz	r3, 29f42 <am_hal_cachectrl_control+0x292>
   29f0a:	688b      	ldr	r3, [r1, #8]
   29f0c:	4820      	ldr	r0, [pc, #128]	; (29f90 <am_hal_cachectrl_control+0x2e0>)
   29f0e:	4018      	ands	r0, r3
   29f10:	b9b8      	cbnz	r0, 29f42 <am_hal_cachectrl_control+0x292>
   29f12:	780c      	ldrb	r4, [r1, #0]
   29f14:	b374      	cbz	r4, 29f74 <am_hal_cachectrl_control+0x2c4>
   29f16:	2c01      	cmp	r4, #1
   29f18:	d113      	bne.n	29f42 <am_hal_cachectrl_control+0x292>
   29f1a:	4c1b      	ldr	r4, [pc, #108]	; (29f88 <am_hal_cachectrl_control+0x2d8>)
   29f1c:	61a2      	str	r2, [r4, #24]
   29f1e:	61e3      	str	r3, [r4, #28]
   29f20:	784a      	ldrb	r2, [r1, #1]
   29f22:	6823      	ldr	r3, [r4, #0]
   29f24:	f362 03c3 	bfi	r3, r2, #3, #1
   29f28:	6023      	str	r3, [r4, #0]
   29f2a:	e6df      	b.n	29cec <am_hal_cachectrl_control+0x3c>
   29f2c:	2201      	movs	r2, #1
   29f2e:	e6da      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29f30:	4b15      	ldr	r3, [pc, #84]	; (29f88 <am_hal_cachectrl_control+0x2d8>)
   29f32:	681b      	ldr	r3, [r3, #0]
   29f34:	01db      	lsls	r3, r3, #7
   29f36:	d406      	bmi.n	29f46 <am_hal_cachectrl_control+0x296>
   29f38:	2007      	movs	r0, #7
   29f3a:	e6d7      	b.n	29cec <am_hal_cachectrl_control+0x3c>
   29f3c:	f44f 6288 	mov.w	r2, #1088	; 0x440
   29f40:	e6d1      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29f42:	2006      	movs	r0, #6
   29f44:	e6d2      	b.n	29cec <am_hal_cachectrl_control+0x3c>
   29f46:	2202      	movs	r2, #2
   29f48:	e6cd      	b.n	29ce6 <am_hal_cachectrl_control+0x36>
   29f4a:	f000 fb15 	bl	2a578 <am_hal_interrupt_master_disable>
   29f4e:	4603      	mov	r3, r0
   29f50:	480e      	ldr	r0, [pc, #56]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29f52:	930d      	str	r3, [sp, #52]	; 0x34
   29f54:	f000 f954 	bl	2a200 <am_hal_flash_load_ui32>
   29f58:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   29f5c:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   29f60:	f021 010f 	bic.w	r1, r1, #15
   29f64:	4321      	orrs	r1, r4
   29f66:	4809      	ldr	r0, [pc, #36]	; (29f8c <am_hal_cachectrl_control+0x2dc>)
   29f68:	f000 f94e 	bl	2a208 <am_hal_flash_store_ui32>
   29f6c:	980d      	ldr	r0, [sp, #52]	; 0x34
   29f6e:	f000 fb07 	bl	2a580 <am_hal_interrupt_master_set>
   29f72:	e6d2      	b.n	29d1a <am_hal_cachectrl_control+0x6a>
   29f74:	4c04      	ldr	r4, [pc, #16]	; (29f88 <am_hal_cachectrl_control+0x2d8>)
   29f76:	6122      	str	r2, [r4, #16]
   29f78:	6163      	str	r3, [r4, #20]
   29f7a:	784a      	ldrb	r2, [r1, #1]
   29f7c:	6823      	ldr	r3, [r4, #0]
   29f7e:	f362 0382 	bfi	r3, r2, #2, #1
   29f82:	6023      	str	r3, [r4, #0]
   29f84:	e6b2      	b.n	29cec <am_hal_cachectrl_control+0x3c>
   29f86:	bf00      	nop
   29f88:	40018000 	.word	0x40018000
   29f8c:	40018004 	.word	0x40018004
   29f90:	f800000f 	.word	0xf800000f

00029f94 <am_hal_clkgen_control>:
   29f94:	4b42      	ldr	r3, [pc, #264]	; (2a0a0 <am_hal_clkgen_control+0x10c>)
   29f96:	681a      	ldr	r2, [r3, #0]
   29f98:	b912      	cbnz	r2, 29fa0 <am_hal_clkgen_control+0xc>
   29f9a:	4a42      	ldr	r2, [pc, #264]	; (2a0a4 <am_hal_clkgen_control+0x110>)
   29f9c:	6812      	ldr	r2, [r2, #0]
   29f9e:	601a      	str	r2, [r3, #0]
   29fa0:	2809      	cmp	r0, #9
   29fa2:	d87a      	bhi.n	2a09a <am_hal_clkgen_control+0x106>
   29fa4:	e8df f000 	tbb	[pc, r0]
   29fa8:	261e160d 	.word	0x261e160d
   29fac:	544c423a 	.word	0x544c423a
   29fb0:	055c      	.short	0x055c
   29fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   29fb6:	2000      	movs	r0, #0
   29fb8:	6a1a      	ldr	r2, [r3, #32]
   29fba:	f36f 0200 	bfc	r2, #0, #1
   29fbe:	621a      	str	r2, [r3, #32]
   29fc0:	4770      	bx	lr
   29fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   29fc6:	2200      	movs	r2, #0
   29fc8:	2147      	movs	r1, #71	; 0x47
   29fca:	6159      	str	r1, [r3, #20]
   29fcc:	4610      	mov	r0, r2
   29fce:	619a      	str	r2, [r3, #24]
   29fd0:	615a      	str	r2, [r3, #20]
   29fd2:	4770      	bx	lr
   29fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   29fd8:	2000      	movs	r0, #0
   29fda:	899a      	ldrh	r2, [r3, #12]
   29fdc:	f36f 0200 	bfc	r2, #0, #1
   29fe0:	819a      	strh	r2, [r3, #12]
   29fe2:	4770      	bx	lr
   29fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   29fe8:	2000      	movs	r0, #0
   29fea:	899a      	ldrh	r2, [r3, #12]
   29fec:	f36f 0241 	bfc	r2, #1, #1
   29ff0:	819a      	strh	r2, [r3, #12]
   29ff2:	4770      	bx	lr
   29ff4:	4a2c      	ldr	r2, [pc, #176]	; (2a0a8 <am_hal_clkgen_control+0x114>)
   29ff6:	68d3      	ldr	r3, [r2, #12]
   29ff8:	b2db      	uxtb	r3, r3
   29ffa:	2b21      	cmp	r3, #33	; 0x21
   29ffc:	d106      	bne.n	2a00c <am_hal_clkgen_control+0x78>
   29ffe:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   2a002:	2101      	movs	r1, #1
   2a004:	f361 2309 	bfi	r3, r1, #8, #2
   2a008:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   2a00c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2a010:	2000      	movs	r0, #0
   2a012:	8993      	ldrh	r3, [r2, #12]
   2a014:	f043 0301 	orr.w	r3, r3, #1
   2a018:	8193      	strh	r3, [r2, #12]
   2a01a:	4770      	bx	lr
   2a01c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2a020:	2000      	movs	r0, #0
   2a022:	8993      	ldrh	r3, [r2, #12]
   2a024:	f043 0302 	orr.w	r3, r3, #2
   2a028:	8193      	strh	r3, [r2, #12]
   2a02a:	4770      	bx	lr
   2a02c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a030:	2200      	movs	r2, #0
   2a032:	2047      	movs	r0, #71	; 0x47
   2a034:	2101      	movs	r1, #1
   2a036:	6158      	str	r0, [r3, #20]
   2a038:	6199      	str	r1, [r3, #24]
   2a03a:	4610      	mov	r0, r2
   2a03c:	615a      	str	r2, [r3, #20]
   2a03e:	4770      	bx	lr
   2a040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a044:	2000      	movs	r0, #0
   2a046:	899a      	ldrh	r2, [r3, #12]
   2a048:	f36f 12c7 	bfc	r2, #7, #1
   2a04c:	819a      	strh	r2, [r3, #12]
   2a04e:	4770      	bx	lr
   2a050:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2a054:	2000      	movs	r0, #0
   2a056:	8993      	ldrh	r3, [r2, #12]
   2a058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2a05c:	8193      	strh	r3, [r2, #12]
   2a05e:	4770      	bx	lr
   2a060:	b510      	push	{r4, lr}
   2a062:	4a11      	ldr	r2, [pc, #68]	; (2a0a8 <am_hal_clkgen_control+0x114>)
   2a064:	68d3      	ldr	r3, [r2, #12]
   2a066:	b2db      	uxtb	r3, r3
   2a068:	2b21      	cmp	r3, #33	; 0x21
   2a06a:	460c      	mov	r4, r1
   2a06c:	d008      	beq.n	2a080 <am_hal_clkgen_control+0xec>
   2a06e:	b194      	cbz	r4, 2a096 <am_hal_clkgen_control+0x102>
   2a070:	6823      	ldr	r3, [r4, #0]
   2a072:	f043 0301 	orr.w	r3, r3, #1
   2a076:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2a07a:	2000      	movs	r0, #0
   2a07c:	6213      	str	r3, [r2, #32]
   2a07e:	bd10      	pop	{r4, pc}
   2a080:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   2a084:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   2a088:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   2a08c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   2a090:	f000 f86c 	bl	2a16c <am_hal_flash_delay>
   2a094:	e7eb      	b.n	2a06e <am_hal_clkgen_control+0xda>
   2a096:	4b05      	ldr	r3, [pc, #20]	; (2a0ac <am_hal_clkgen_control+0x118>)
   2a098:	e7ed      	b.n	2a076 <am_hal_clkgen_control+0xe2>
   2a09a:	2006      	movs	r0, #6
   2a09c:	4770      	bx	lr
   2a09e:	bf00      	nop
   2a0a0:	100088d0 	.word	0x100088d0
   2a0a4:	4ffff000 	.word	0x4ffff000
   2a0a8:	40020000 	.word	0x40020000
   2a0ac:	0025b801 	.word	0x0025b801

0002a0b0 <am_hal_clkgen_status_get>:
   2a0b0:	b1a8      	cbz	r0, 2a0de <am_hal_clkgen_status_get+0x2e>
   2a0b2:	b410      	push	{r4}
   2a0b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2a0b8:	490a      	ldr	r1, [pc, #40]	; (2a0e4 <am_hal_clkgen_status_get+0x34>)
   2a0ba:	6994      	ldr	r4, [r2, #24]
   2a0bc:	4b0a      	ldr	r3, [pc, #40]	; (2a0e8 <am_hal_clkgen_status_get+0x38>)
   2a0be:	f014 0f01 	tst.w	r4, #1
   2a0c2:	bf08      	it	eq
   2a0c4:	460b      	moveq	r3, r1
   2a0c6:	6003      	str	r3, [r0, #0]
   2a0c8:	69d3      	ldr	r3, [r2, #28]
   2a0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a0ce:	f003 0201 	and.w	r2, r3, #1
   2a0d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2a0d6:	6042      	str	r2, [r0, #4]
   2a0d8:	7203      	strb	r3, [r0, #8]
   2a0da:	2000      	movs	r0, #0
   2a0dc:	4770      	bx	lr
   2a0de:	2006      	movs	r0, #6
   2a0e0:	4770      	bx	lr
   2a0e2:	bf00      	nop
   2a0e4:	02dc6c00 	.word	0x02dc6c00
   2a0e8:	016e3600 	.word	0x016e3600

0002a0ec <am_hal_ctimer_int_service>:
   2a0ec:	b198      	cbz	r0, 2a116 <am_hal_ctimer_int_service+0x2a>
   2a0ee:	b570      	push	{r4, r5, r6, lr}
   2a0f0:	4e09      	ldr	r6, [pc, #36]	; (2a118 <am_hal_ctimer_int_service+0x2c>)
   2a0f2:	4604      	mov	r4, r0
   2a0f4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   2a0f8:	fab4 f384 	clz	r3, r4
   2a0fc:	f1c3 021f 	rsb	r2, r3, #31
   2a100:	fa25 f303 	lsr.w	r3, r5, r3
   2a104:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   2a108:	ea24 0403 	bic.w	r4, r4, r3
   2a10c:	b102      	cbz	r2, 2a110 <am_hal_ctimer_int_service+0x24>
   2a10e:	4790      	blx	r2
   2a110:	2c00      	cmp	r4, #0
   2a112:	d1f1      	bne.n	2a0f8 <am_hal_ctimer_int_service+0xc>
   2a114:	bd70      	pop	{r4, r5, r6, pc}
   2a116:	4770      	bx	lr
   2a118:	10008850 	.word	0x10008850

0002a11c <am_hal_ctimer_int_clear>:
   2a11c:	b510      	push	{r4, lr}
   2a11e:	b082      	sub	sp, #8
   2a120:	4604      	mov	r4, r0
   2a122:	f000 fa29 	bl	2a578 <am_hal_interrupt_master_disable>
   2a126:	4b04      	ldr	r3, [pc, #16]	; (2a138 <am_hal_ctimer_int_clear+0x1c>)
   2a128:	9001      	str	r0, [sp, #4]
   2a12a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   2a12e:	9801      	ldr	r0, [sp, #4]
   2a130:	f000 fa26 	bl	2a580 <am_hal_interrupt_master_set>
   2a134:	b002      	add	sp, #8
   2a136:	bd10      	pop	{r4, pc}
   2a138:	40008000 	.word	0x40008000

0002a13c <am_hal_ctimer_int_status_get>:
   2a13c:	b510      	push	{r4, lr}
   2a13e:	b082      	sub	sp, #8
   2a140:	4604      	mov	r4, r0
   2a142:	f000 fa19 	bl	2a578 <am_hal_interrupt_master_disable>
   2a146:	4b08      	ldr	r3, [pc, #32]	; (2a168 <am_hal_ctimer_int_status_get+0x2c>)
   2a148:	9001      	str	r0, [sp, #4]
   2a14a:	b93c      	cbnz	r4, 2a15c <am_hal_ctimer_int_status_get+0x20>
   2a14c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   2a150:	9801      	ldr	r0, [sp, #4]
   2a152:	f000 fa15 	bl	2a580 <am_hal_interrupt_master_set>
   2a156:	4620      	mov	r0, r4
   2a158:	b002      	add	sp, #8
   2a15a:	bd10      	pop	{r4, pc}
   2a15c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   2a160:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2a164:	401c      	ands	r4, r3
   2a166:	e7f3      	b.n	2a150 <am_hal_ctimer_int_status_get+0x14>
   2a168:	40008000 	.word	0x40008000

0002a16c <am_hal_flash_delay>:
   2a16c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a172:	075b      	lsls	r3, r3, #29
   2a174:	bf46      	itte	mi
   2a176:	0040      	lslmi	r0, r0, #1
   2a178:	230e      	movmi	r3, #14
   2a17a:	230b      	movpl	r3, #11
   2a17c:	4298      	cmp	r0, r3
   2a17e:	d800      	bhi.n	2a182 <am_hal_flash_delay+0x16>
   2a180:	4770      	bx	lr
   2a182:	1ac0      	subs	r0, r0, r3
   2a184:	4b00      	ldr	r3, [pc, #0]	; (2a188 <am_hal_flash_delay+0x1c>)
   2a186:	4718      	bx	r3
   2a188:	0800009d 	.word	0x0800009d

0002a18c <am_hal_flash_delay_status_check>:
   2a18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a190:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2a194:	460d      	mov	r5, r1
   2a196:	4616      	mov	r6, r2
   2a198:	461f      	mov	r7, r3
   2a19a:	b1b4      	cbz	r4, 2a1ca <am_hal_flash_delay_status_check+0x3e>
   2a19c:	4604      	mov	r4, r0
   2a19e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   2a1a2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2a1fc <am_hal_flash_delay_status_check+0x70>
   2a1a6:	e009      	b.n	2a1bc <am_hal_flash_delay_status_check+0x30>
   2a1a8:	b324      	cbz	r4, 2a1f4 <am_hal_flash_delay_status_check+0x68>
   2a1aa:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   2a1ae:	f013 0f04 	tst.w	r3, #4
   2a1b2:	bf14      	ite	ne
   2a1b4:	2012      	movne	r0, #18
   2a1b6:	2005      	moveq	r0, #5
   2a1b8:	3c01      	subs	r4, #1
   2a1ba:	47c0      	blx	r8
   2a1bc:	682b      	ldr	r3, [r5, #0]
   2a1be:	4033      	ands	r3, r6
   2a1c0:	429f      	cmp	r7, r3
   2a1c2:	d1f1      	bne.n	2a1a8 <am_hal_flash_delay_status_check+0x1c>
   2a1c4:	2000      	movs	r0, #0
   2a1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a1ca:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2a1fc <am_hal_flash_delay_status_check+0x70>
   2a1ce:	4604      	mov	r4, r0
   2a1d0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   2a1d4:	e009      	b.n	2a1ea <am_hal_flash_delay_status_check+0x5e>
   2a1d6:	b16c      	cbz	r4, 2a1f4 <am_hal_flash_delay_status_check+0x68>
   2a1d8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   2a1dc:	f013 0f04 	tst.w	r3, #4
   2a1e0:	bf14      	ite	ne
   2a1e2:	2012      	movne	r0, #18
   2a1e4:	2005      	moveq	r0, #5
   2a1e6:	3c01      	subs	r4, #1
   2a1e8:	47c0      	blx	r8
   2a1ea:	682b      	ldr	r3, [r5, #0]
   2a1ec:	4033      	ands	r3, r6
   2a1ee:	429f      	cmp	r7, r3
   2a1f0:	d0f1      	beq.n	2a1d6 <am_hal_flash_delay_status_check+0x4a>
   2a1f2:	e7e7      	b.n	2a1c4 <am_hal_flash_delay_status_check+0x38>
   2a1f4:	2004      	movs	r0, #4
   2a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a1fa:	bf00      	nop
   2a1fc:	0800009d 	.word	0x0800009d

0002a200 <am_hal_flash_load_ui32>:
   2a200:	4b00      	ldr	r3, [pc, #0]	; (2a204 <am_hal_flash_load_ui32+0x4>)
   2a202:	4718      	bx	r3
   2a204:	08000075 	.word	0x08000075

0002a208 <am_hal_flash_store_ui32>:
   2a208:	4b01      	ldr	r3, [pc, #4]	; (2a210 <am_hal_flash_store_ui32+0x8>)
   2a20a:	f043 0301 	orr.w	r3, r3, #1
   2a20e:	4718      	bx	r3
   2a210:	100035ac 	.word	0x100035ac

0002a214 <am_hal_gpio_pinconfig>:
   2a214:	2831      	cmp	r0, #49	; 0x31
   2a216:	d901      	bls.n	2a21c <am_hal_gpio_pinconfig+0x8>
   2a218:	2006      	movs	r0, #6
   2a21a:	4770      	bx	lr
   2a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a220:	f001 0307 	and.w	r3, r1, #7
   2a224:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   2a228:	b085      	sub	sp, #20
   2a22a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   2a22e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   2a232:	d014      	beq.n	2a25e <am_hal_gpio_pinconfig+0x4a>
   2a234:	f3c1 1742 	ubfx	r7, r1, #5, #3
   2a238:	1dbd      	adds	r5, r7, #6
   2a23a:	f005 0507 	and.w	r5, r5, #7
   2a23e:	2d03      	cmp	r5, #3
   2a240:	f042 0201 	orr.w	r2, r2, #1
   2a244:	f200 80a7 	bhi.w	2a396 <am_hal_gpio_pinconfig+0x182>
   2a248:	4d82      	ldr	r5, [pc, #520]	; (2a454 <am_hal_gpio_pinconfig+0x240>)
   2a24a:	5c2d      	ldrb	r5, [r5, r0]
   2a24c:	07ee      	lsls	r6, r5, #31
   2a24e:	d403      	bmi.n	2a258 <am_hal_gpio_pinconfig+0x44>
   2a250:	4881      	ldr	r0, [pc, #516]	; (2a458 <am_hal_gpio_pinconfig+0x244>)
   2a252:	b005      	add	sp, #20
   2a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a258:	3f02      	subs	r7, #2
   2a25a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   2a25e:	2c00      	cmp	r4, #0
   2a260:	f040 8091 	bne.w	2a386 <am_hal_gpio_pinconfig+0x172>
   2a264:	4c7d      	ldr	r4, [pc, #500]	; (2a45c <am_hal_gpio_pinconfig+0x248>)
   2a266:	4d7e      	ldr	r5, [pc, #504]	; (2a460 <am_hal_gpio_pinconfig+0x24c>)
   2a268:	5c24      	ldrb	r4, [r4, r0]
   2a26a:	5c2d      	ldrb	r5, [r5, r0]
   2a26c:	411c      	asrs	r4, r3
   2a26e:	f014 0f01 	tst.w	r4, #1
   2a272:	bf0c      	ite	eq
   2a274:	2400      	moveq	r4, #0
   2a276:	2402      	movne	r4, #2
   2a278:	42ab      	cmp	r3, r5
   2a27a:	ea42 0204 	orr.w	r2, r2, r4
   2a27e:	f000 8096 	beq.w	2a3ae <am_hal_gpio_pinconfig+0x19a>
   2a282:	f3c1 3341 	ubfx	r3, r1, #13, #2
   2a286:	105d      	asrs	r5, r3, #1
   2a288:	f3c1 2681 	ubfx	r6, r1, #10, #2
   2a28c:	00db      	lsls	r3, r3, #3
   2a28e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   2a292:	f003 0408 	and.w	r4, r3, #8
   2a296:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   2a29a:	f00e 060c 	and.w	r6, lr, #12
   2a29e:	f3c1 3500 	ubfx	r5, r1, #12, #1
   2a2a2:	2e04      	cmp	r6, #4
   2a2a4:	ea43 0304 	orr.w	r3, r3, r4
   2a2a8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   2a2ac:	462c      	mov	r4, r5
   2a2ae:	f000 808b 	beq.w	2a3c8 <am_hal_gpio_pinconfig+0x1b4>
   2a2b2:	4c6c      	ldr	r4, [pc, #432]	; (2a464 <am_hal_gpio_pinconfig+0x250>)
   2a2b4:	6827      	ldr	r7, [r4, #0]
   2a2b6:	1bcf      	subs	r7, r1, r7
   2a2b8:	fab7 f787 	clz	r7, r7
   2a2bc:	097f      	lsrs	r7, r7, #5
   2a2be:	f01e 0f60 	tst.w	lr, #96	; 0x60
   2a2c2:	bf04      	itt	eq
   2a2c4:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   2a2c8:	f364 0300 	bfieq	r3, r4, #0, #1
   2a2cc:	0084      	lsls	r4, r0, #2
   2a2ce:	f3c1 2101 	ubfx	r1, r1, #8, #2
   2a2d2:	2902      	cmp	r1, #2
   2a2d4:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   2a2d8:	d078      	beq.n	2a3cc <am_hal_gpio_pinconfig+0x1b8>
   2a2da:	d87f      	bhi.n	2a3dc <am_hal_gpio_pinconfig+0x1c8>
   2a2dc:	2901      	cmp	r1, #1
   2a2de:	f04f 0100 	mov.w	r1, #0
   2a2e2:	bf08      	it	eq
   2a2e4:	f042 0204 	orreq.w	r2, r2, #4
   2a2e8:	f005 0518 	and.w	r5, r5, #24
   2a2ec:	9101      	str	r1, [sp, #4]
   2a2ee:	f004 041c 	and.w	r4, r4, #28
   2a2f2:	f020 0a03 	bic.w	sl, r0, #3
   2a2f6:	f04f 090f 	mov.w	r9, #15
   2a2fa:	fa09 f904 	lsl.w	r9, r9, r4
   2a2fe:	0841      	lsrs	r1, r0, #1
   2a300:	26ff      	movs	r6, #255	; 0xff
   2a302:	fa03 f404 	lsl.w	r4, r3, r4
   2a306:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   2a30a:	40ae      	lsls	r6, r5
   2a30c:	9300      	str	r3, [sp, #0]
   2a30e:	fa02 f505 	lsl.w	r5, r2, r5
   2a312:	4683      	mov	fp, r0
   2a314:	f021 0803 	bic.w	r8, r1, #3
   2a318:	f000 f92e 	bl	2a578 <am_hal_interrupt_master_disable>
   2a31c:	9b00      	ldr	r3, [sp, #0]
   2a31e:	9003      	str	r0, [sp, #12]
   2a320:	ea6f 0909 	mvn.w	r9, r9
   2a324:	43f6      	mvns	r6, r6
   2a326:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2a32a:	f8df e15c 	ldr.w	lr, [pc, #348]	; 2a488 <am_hal_gpio_pinconfig+0x274>
   2a32e:	4a4e      	ldr	r2, [pc, #312]	; (2a468 <am_hal_gpio_pinconfig+0x254>)
   2a330:	b15f      	cbz	r7, 2a34a <am_hal_gpio_pinconfig+0x136>
   2a332:	ea4f 07db 	mov.w	r7, fp, lsr #3
   2a336:	f00b 001f 	and.w	r0, fp, #31
   2a33a:	f007 0704 	and.w	r7, r7, #4
   2a33e:	f04f 0b01 	mov.w	fp, #1
   2a342:	494a      	ldr	r1, [pc, #296]	; (2a46c <am_hal_gpio_pinconfig+0x258>)
   2a344:	fa0b f000 	lsl.w	r0, fp, r0
   2a348:	5078      	str	r0, [r7, r1]
   2a34a:	4849      	ldr	r0, [pc, #292]	; (2a470 <am_hal_gpio_pinconfig+0x25c>)
   2a34c:	2773      	movs	r7, #115	; 0x73
   2a34e:	6607      	str	r7, [r0, #96]	; 0x60
   2a350:	681f      	ldr	r7, [r3, #0]
   2a352:	4037      	ands	r7, r6
   2a354:	433d      	orrs	r5, r7
   2a356:	601d      	str	r5, [r3, #0]
   2a358:	f858 300e 	ldr.w	r3, [r8, lr]
   2a35c:	ea09 0303 	and.w	r3, r9, r3
   2a360:	4323      	orrs	r3, r4
   2a362:	f848 300e 	str.w	r3, [r8, lr]
   2a366:	f85a 3002 	ldr.w	r3, [sl, r2]
   2a36a:	401e      	ands	r6, r3
   2a36c:	9b01      	ldr	r3, [sp, #4]
   2a36e:	2400      	movs	r4, #0
   2a370:	431e      	orrs	r6, r3
   2a372:	f84a 6002 	str.w	r6, [sl, r2]
   2a376:	6604      	str	r4, [r0, #96]	; 0x60
   2a378:	9803      	ldr	r0, [sp, #12]
   2a37a:	f000 f901 	bl	2a580 <am_hal_interrupt_master_set>
   2a37e:	4620      	mov	r0, r4
   2a380:	b005      	add	sp, #20
   2a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a386:	2c01      	cmp	r4, #1
   2a388:	d017      	beq.n	2a3ba <am_hal_gpio_pinconfig+0x1a6>
   2a38a:	2c02      	cmp	r4, #2
   2a38c:	d035      	beq.n	2a3fa <am_hal_gpio_pinconfig+0x1e6>
   2a38e:	4839      	ldr	r0, [pc, #228]	; (2a474 <am_hal_gpio_pinconfig+0x260>)
   2a390:	b005      	add	sp, #20
   2a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a396:	2ec0      	cmp	r6, #192	; 0xc0
   2a398:	d02a      	beq.n	2a3f0 <am_hal_gpio_pinconfig+0x1dc>
   2a39a:	2e20      	cmp	r6, #32
   2a39c:	f47f af5f 	bne.w	2a25e <am_hal_gpio_pinconfig+0x4a>
   2a3a0:	2814      	cmp	r0, #20
   2a3a2:	f43f af55 	beq.w	2a250 <am_hal_gpio_pinconfig+0x3c>
   2a3a6:	2c00      	cmp	r4, #0
   2a3a8:	f43f af5c 	beq.w	2a264 <am_hal_gpio_pinconfig+0x50>
   2a3ac:	e7eb      	b.n	2a386 <am_hal_gpio_pinconfig+0x172>
   2a3ae:	f3c1 4402 	ubfx	r4, r1, #16, #3
   2a3b2:	2c07      	cmp	r4, #7
   2a3b4:	d128      	bne.n	2a408 <am_hal_gpio_pinconfig+0x1f4>
   2a3b6:	4830      	ldr	r0, [pc, #192]	; (2a478 <am_hal_gpio_pinconfig+0x264>)
   2a3b8:	e74b      	b.n	2a252 <am_hal_gpio_pinconfig+0x3e>
   2a3ba:	4c26      	ldr	r4, [pc, #152]	; (2a454 <am_hal_gpio_pinconfig+0x240>)
   2a3bc:	5c24      	ldrb	r4, [r4, r0]
   2a3be:	07a5      	lsls	r5, r4, #30
   2a3c0:	d5e5      	bpl.n	2a38e <am_hal_gpio_pinconfig+0x17a>
   2a3c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2a3c6:	e74d      	b.n	2a264 <am_hal_gpio_pinconfig+0x50>
   2a3c8:	2701      	movs	r7, #1
   2a3ca:	e778      	b.n	2a2be <am_hal_gpio_pinconfig+0xaa>
   2a3cc:	f005 0518 	and.w	r5, r5, #24
   2a3d0:	f04f 0801 	mov.w	r8, #1
   2a3d4:	fa08 f105 	lsl.w	r1, r8, r5
   2a3d8:	9101      	str	r1, [sp, #4]
   2a3da:	e788      	b.n	2a2ee <am_hal_gpio_pinconfig+0xda>
   2a3dc:	f005 0518 	and.w	r5, r5, #24
   2a3e0:	f04f 0801 	mov.w	r8, #1
   2a3e4:	fa08 f105 	lsl.w	r1, r8, r5
   2a3e8:	f042 0204 	orr.w	r2, r2, #4
   2a3ec:	9101      	str	r1, [sp, #4]
   2a3ee:	e77e      	b.n	2a2ee <am_hal_gpio_pinconfig+0xda>
   2a3f0:	2814      	cmp	r0, #20
   2a3f2:	f43f af34 	beq.w	2a25e <am_hal_gpio_pinconfig+0x4a>
   2a3f6:	4821      	ldr	r0, [pc, #132]	; (2a47c <am_hal_gpio_pinconfig+0x268>)
   2a3f8:	e72b      	b.n	2a252 <am_hal_gpio_pinconfig+0x3e>
   2a3fa:	4c16      	ldr	r4, [pc, #88]	; (2a454 <am_hal_gpio_pinconfig+0x240>)
   2a3fc:	5c24      	ldrb	r4, [r4, r0]
   2a3fe:	0764      	lsls	r4, r4, #29
   2a400:	d5c5      	bpl.n	2a38e <am_hal_gpio_pinconfig+0x17a>
   2a402:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2a406:	e72d      	b.n	2a264 <am_hal_gpio_pinconfig+0x50>
   2a408:	4d1d      	ldr	r5, [pc, #116]	; (2a480 <am_hal_gpio_pinconfig+0x26c>)
   2a40a:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   2a40e:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   2a412:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   2a416:	429e      	cmp	r6, r3
   2a418:	d00c      	beq.n	2a434 <am_hal_gpio_pinconfig+0x220>
   2a41a:	0084      	lsls	r4, r0, #2
   2a41c:	4425      	add	r5, r4
   2a41e:	786e      	ldrb	r6, [r5, #1]
   2a420:	429e      	cmp	r6, r3
   2a422:	d012      	beq.n	2a44a <am_hal_gpio_pinconfig+0x236>
   2a424:	78ae      	ldrb	r6, [r5, #2]
   2a426:	429e      	cmp	r6, r3
   2a428:	d00d      	beq.n	2a446 <am_hal_gpio_pinconfig+0x232>
   2a42a:	78ed      	ldrb	r5, [r5, #3]
   2a42c:	429d      	cmp	r5, r3
   2a42e:	d00e      	beq.n	2a44e <am_hal_gpio_pinconfig+0x23a>
   2a430:	4814      	ldr	r0, [pc, #80]	; (2a484 <am_hal_gpio_pinconfig+0x270>)
   2a432:	e70e      	b.n	2a252 <am_hal_gpio_pinconfig+0x3e>
   2a434:	2300      	movs	r3, #0
   2a436:	0084      	lsls	r4, r0, #2
   2a438:	005b      	lsls	r3, r3, #1
   2a43a:	f3c1 5540 	ubfx	r5, r1, #21, #1
   2a43e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   2a442:	2700      	movs	r7, #0
   2a444:	e743      	b.n	2a2ce <am_hal_gpio_pinconfig+0xba>
   2a446:	2302      	movs	r3, #2
   2a448:	e7f6      	b.n	2a438 <am_hal_gpio_pinconfig+0x224>
   2a44a:	2301      	movs	r3, #1
   2a44c:	e7f4      	b.n	2a438 <am_hal_gpio_pinconfig+0x224>
   2a44e:	2303      	movs	r3, #3
   2a450:	e7f2      	b.n	2a438 <am_hal_gpio_pinconfig+0x224>
   2a452:	bf00      	nop
   2a454:	0002e8b8 	.word	0x0002e8b8
   2a458:	08000100 	.word	0x08000100
   2a45c:	0002e9b4 	.word	0x0002e9b4
   2a460:	0002e9f4 	.word	0x0002e9f4
   2a464:	0002e9e8 	.word	0x0002e9e8
   2a468:	400100e0 	.word	0x400100e0
   2a46c:	400100b4 	.word	0x400100b4
   2a470:	40010000 	.word	0x40010000
   2a474:	08000102 	.word	0x08000102
   2a478:	08000103 	.word	0x08000103
   2a47c:	08000101 	.word	0x08000101
   2a480:	0002e8ec 	.word	0x0002e8ec
   2a484:	08000104 	.word	0x08000104
   2a488:	40010040 	.word	0x40010040

0002a48c <am_hal_gpio_state_read>:
   2a48c:	b1ca      	cbz	r2, 2a4c2 <am_hal_gpio_state_read+0x36>
   2a48e:	2831      	cmp	r0, #49	; 0x31
   2a490:	d904      	bls.n	2a49c <am_hal_gpio_state_read+0x10>
   2a492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a496:	6013      	str	r3, [r2, #0]
   2a498:	2005      	movs	r0, #5
   2a49a:	4770      	bx	lr
   2a49c:	08c3      	lsrs	r3, r0, #3
   2a49e:	2901      	cmp	r1, #1
   2a4a0:	f003 0304 	and.w	r3, r3, #4
   2a4a4:	f000 001f 	and.w	r0, r0, #31
   2a4a8:	d00d      	beq.n	2a4c6 <am_hal_gpio_state_read+0x3a>
   2a4aa:	d313      	bcc.n	2a4d4 <am_hal_gpio_state_read+0x48>
   2a4ac:	2902      	cmp	r1, #2
   2a4ae:	d108      	bne.n	2a4c2 <am_hal_gpio_state_read+0x36>
   2a4b0:	490c      	ldr	r1, [pc, #48]	; (2a4e4 <am_hal_gpio_state_read+0x58>)
   2a4b2:	585b      	ldr	r3, [r3, r1]
   2a4b4:	fa23 f000 	lsr.w	r0, r3, r0
   2a4b8:	f000 0001 	and.w	r0, r0, #1
   2a4bc:	6010      	str	r0, [r2, #0]
   2a4be:	2000      	movs	r0, #0
   2a4c0:	4770      	bx	lr
   2a4c2:	2006      	movs	r0, #6
   2a4c4:	4770      	bx	lr
   2a4c6:	4908      	ldr	r1, [pc, #32]	; (2a4e8 <am_hal_gpio_state_read+0x5c>)
   2a4c8:	585b      	ldr	r3, [r3, r1]
   2a4ca:	fa23 f000 	lsr.w	r0, r3, r0
   2a4ce:	f000 0001 	and.w	r0, r0, #1
   2a4d2:	e7f3      	b.n	2a4bc <am_hal_gpio_state_read+0x30>
   2a4d4:	4905      	ldr	r1, [pc, #20]	; (2a4ec <am_hal_gpio_state_read+0x60>)
   2a4d6:	585b      	ldr	r3, [r3, r1]
   2a4d8:	fa23 f000 	lsr.w	r0, r3, r0
   2a4dc:	f000 0001 	and.w	r0, r0, #1
   2a4e0:	e7ec      	b.n	2a4bc <am_hal_gpio_state_read+0x30>
   2a4e2:	bf00      	nop
   2a4e4:	400100a0 	.word	0x400100a0
   2a4e8:	40010088 	.word	0x40010088
   2a4ec:	40010080 	.word	0x40010080

0002a4f0 <am_hal_gpio_state_write>:
   2a4f0:	2831      	cmp	r0, #49	; 0x31
   2a4f2:	d901      	bls.n	2a4f8 <am_hal_gpio_state_write+0x8>
   2a4f4:	2005      	movs	r0, #5
   2a4f6:	4770      	bx	lr
   2a4f8:	2905      	cmp	r1, #5
   2a4fa:	d901      	bls.n	2a500 <am_hal_gpio_state_write+0x10>
   2a4fc:	2006      	movs	r0, #6
   2a4fe:	4770      	bx	lr
   2a500:	b570      	push	{r4, r5, r6, lr}
   2a502:	f000 031f 	and.w	r3, r0, #31
   2a506:	b082      	sub	sp, #8
   2a508:	08c0      	lsrs	r0, r0, #3
   2a50a:	2201      	movs	r2, #1
   2a50c:	460d      	mov	r5, r1
   2a50e:	f000 0404 	and.w	r4, r0, #4
   2a512:	fa02 f603 	lsl.w	r6, r2, r3
   2a516:	f000 f82f 	bl	2a578 <am_hal_interrupt_master_disable>
   2a51a:	1e69      	subs	r1, r5, #1
   2a51c:	9001      	str	r0, [sp, #4]
   2a51e:	2904      	cmp	r1, #4
   2a520:	d817      	bhi.n	2a552 <am_hal_gpio_state_write+0x62>
   2a522:	e8df f001 	tbb	[pc, r1]
   2a526:	0e13      	.short	0x0e13
   2a528:	030b      	.short	0x030b
   2a52a:	19          	.byte	0x19
   2a52b:	00          	.byte	0x00
   2a52c:	4b0d      	ldr	r3, [pc, #52]	; (2a564 <am_hal_gpio_state_write+0x74>)
   2a52e:	50e6      	str	r6, [r4, r3]
   2a530:	9801      	ldr	r0, [sp, #4]
   2a532:	f000 f825 	bl	2a580 <am_hal_interrupt_master_set>
   2a536:	2000      	movs	r0, #0
   2a538:	b002      	add	sp, #8
   2a53a:	bd70      	pop	{r4, r5, r6, pc}
   2a53c:	4b0a      	ldr	r3, [pc, #40]	; (2a568 <am_hal_gpio_state_write+0x78>)
   2a53e:	50e6      	str	r6, [r4, r3]
   2a540:	e7f6      	b.n	2a530 <am_hal_gpio_state_write+0x40>
   2a542:	4a0a      	ldr	r2, [pc, #40]	; (2a56c <am_hal_gpio_state_write+0x7c>)
   2a544:	58a3      	ldr	r3, [r4, r2]
   2a546:	4073      	eors	r3, r6
   2a548:	50a3      	str	r3, [r4, r2]
   2a54a:	e7f1      	b.n	2a530 <am_hal_gpio_state_write+0x40>
   2a54c:	4b08      	ldr	r3, [pc, #32]	; (2a570 <am_hal_gpio_state_write+0x80>)
   2a54e:	50e6      	str	r6, [r4, r3]
   2a550:	e7ee      	b.n	2a530 <am_hal_gpio_state_write+0x40>
   2a552:	4b08      	ldr	r3, [pc, #32]	; (2a574 <am_hal_gpio_state_write+0x84>)
   2a554:	50e6      	str	r6, [r4, r3]
   2a556:	e7eb      	b.n	2a530 <am_hal_gpio_state_write+0x40>
   2a558:	4a03      	ldr	r2, [pc, #12]	; (2a568 <am_hal_gpio_state_write+0x78>)
   2a55a:	58a3      	ldr	r3, [r4, r2]
   2a55c:	4073      	eors	r3, r6
   2a55e:	50a3      	str	r3, [r4, r2]
   2a560:	e7e6      	b.n	2a530 <am_hal_gpio_state_write+0x40>
   2a562:	bf00      	nop
   2a564:	400100a8 	.word	0x400100a8
   2a568:	400100b4 	.word	0x400100b4
   2a56c:	40010088 	.word	0x40010088
   2a570:	40010090 	.word	0x40010090
   2a574:	40010098 	.word	0x40010098

0002a578 <am_hal_interrupt_master_disable>:
   2a578:	f3ef 8010 	mrs	r0, PRIMASK
   2a57c:	b672      	cpsid	i
   2a57e:	4770      	bx	lr

0002a580 <am_hal_interrupt_master_set>:
   2a580:	f380 8810 	msr	PRIMASK, r0
   2a584:	4770      	bx	lr
   2a586:	bf00      	nop

0002a588 <am_hal_mcuctrl_info_get>:
   2a588:	b4f0      	push	{r4, r5, r6, r7}
   2a58a:	b121      	cbz	r1, 2a596 <am_hal_mcuctrl_info_get+0xe>
   2a58c:	2801      	cmp	r0, #1
   2a58e:	d038      	beq.n	2a602 <am_hal_mcuctrl_info_get+0x7a>
   2a590:	d320      	bcc.n	2a5d4 <am_hal_mcuctrl_info_get+0x4c>
   2a592:	2802      	cmp	r0, #2
   2a594:	d002      	beq.n	2a59c <am_hal_mcuctrl_info_get+0x14>
   2a596:	2006      	movs	r0, #6
   2a598:	bcf0      	pop	{r4, r5, r6, r7}
   2a59a:	4770      	bx	lr
   2a59c:	4a41      	ldr	r2, [pc, #260]	; (2a6a4 <am_hal_mcuctrl_info_get+0x11c>)
   2a59e:	684d      	ldr	r5, [r1, #4]
   2a5a0:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   2a5a4:	694c      	ldr	r4, [r1, #20]
   2a5a6:	f003 0601 	and.w	r6, r3, #1
   2a5aa:	f3c3 0040 	ubfx	r0, r3, #1, #1
   2a5ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2a5b2:	700e      	strb	r6, [r1, #0]
   2a5b4:	7208      	strb	r0, [r1, #8]
   2a5b6:	740b      	strb	r3, [r1, #16]
   2a5b8:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   2a5bc:	60cb      	str	r3, [r1, #12]
   2a5be:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   2a5c2:	4328      	orrs	r0, r5
   2a5c4:	6048      	str	r0, [r1, #4]
   2a5c6:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   2a5ca:	4323      	orrs	r3, r4
   2a5cc:	2000      	movs	r0, #0
   2a5ce:	614b      	str	r3, [r1, #20]
   2a5d0:	bcf0      	pop	{r4, r5, r6, r7}
   2a5d2:	4770      	bx	lr
   2a5d4:	4a33      	ldr	r2, [pc, #204]	; (2a6a4 <am_hal_mcuctrl_info_get+0x11c>)
   2a5d6:	6993      	ldr	r3, [r2, #24]
   2a5d8:	f3c3 1080 	ubfx	r0, r3, #6, #1
   2a5dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2a5e0:	7008      	strb	r0, [r1, #0]
   2a5e2:	704b      	strb	r3, [r1, #1]
   2a5e4:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   2a5e8:	f3c3 6381 	ubfx	r3, r3, #26, #2
   2a5ec:	710b      	strb	r3, [r1, #4]
   2a5ee:	6953      	ldr	r3, [r2, #20]
   2a5f0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   2a5f4:	f003 0301 	and.w	r3, r3, #1
   2a5f8:	2000      	movs	r0, #0
   2a5fa:	708a      	strb	r2, [r1, #2]
   2a5fc:	70cb      	strb	r3, [r1, #3]
   2a5fe:	bcf0      	pop	{r4, r5, r6, r7}
   2a600:	4770      	bx	lr
   2a602:	4b28      	ldr	r3, [pc, #160]	; (2a6a4 <am_hal_mcuctrl_info_get+0x11c>)
   2a604:	4c28      	ldr	r4, [pc, #160]	; (2a6a8 <am_hal_mcuctrl_info_get+0x120>)
   2a606:	681a      	ldr	r2, [r3, #0]
   2a608:	600a      	str	r2, [r1, #0]
   2a60a:	6858      	ldr	r0, [r3, #4]
   2a60c:	6048      	str	r0, [r1, #4]
   2a60e:	6898      	ldr	r0, [r3, #8]
   2a610:	6088      	str	r0, [r1, #8]
   2a612:	68d8      	ldr	r0, [r3, #12]
   2a614:	60c8      	str	r0, [r1, #12]
   2a616:	691d      	ldr	r5, [r3, #16]
   2a618:	4824      	ldr	r0, [pc, #144]	; (2a6ac <am_hal_mcuctrl_info_get+0x124>)
   2a61a:	610d      	str	r5, [r1, #16]
   2a61c:	f3c2 5703 	ubfx	r7, r2, #20, #4
   2a620:	f3c2 4603 	ubfx	r6, r2, #16, #4
   2a624:	695d      	ldr	r5, [r3, #20]
   2a626:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   2a62a:	4b21      	ldr	r3, [pc, #132]	; (2a6b0 <am_hal_mcuctrl_info_get+0x128>)
   2a62c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   2a630:	6208      	str	r0, [r1, #32]
   2a632:	f002 0201 	and.w	r2, r2, #1
   2a636:	614d      	str	r5, [r1, #20]
   2a638:	61cc      	str	r4, [r1, #28]
   2a63a:	618a      	str	r2, [r1, #24]
   2a63c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   2a640:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   2a644:	b2d0      	uxtb	r0, r2
   2a646:	f004 020f 	and.w	r2, r4, #15
   2a64a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   2a64e:	624a      	str	r2, [r1, #36]	; 0x24
   2a650:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   2a654:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   2a658:	f3c2 1003 	ubfx	r0, r2, #4, #4
   2a65c:	f004 020f 	and.w	r2, r4, #15
   2a660:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   2a664:	628a      	str	r2, [r1, #40]	; 0x28
   2a666:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   2a66a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   2a66e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   2a672:	f3c2 1203 	ubfx	r2, r2, #4, #4
   2a676:	4302      	orrs	r2, r0
   2a678:	62ca      	str	r2, [r1, #44]	; 0x2c
   2a67a:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   2a67e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   2a682:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   2a686:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2a68a:	b2c0      	uxtb	r0, r0
   2a68c:	0400      	lsls	r0, r0, #16
   2a68e:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   2a692:	b2d2      	uxtb	r2, r2
   2a694:	431a      	orrs	r2, r3
   2a696:	b2e3      	uxtb	r3, r4
   2a698:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2a69c:	630b      	str	r3, [r1, #48]	; 0x30
   2a69e:	2000      	movs	r0, #0
   2a6a0:	bcf0      	pop	{r4, r5, r6, r7}
   2a6a2:	4770      	bx	lr
   2a6a4:	40020000 	.word	0x40020000
   2a6a8:	0002ea28 	.word	0x0002ea28
   2a6ac:	0002ea68 	.word	0x0002ea68
   2a6b0:	f0000f00 	.word	0xf0000f00

0002a6b4 <am_hal_pwrctrl_periph_enable>:
   2a6b4:	b570      	push	{r4, r5, r6, lr}
   2a6b6:	b082      	sub	sp, #8
   2a6b8:	4604      	mov	r4, r0
   2a6ba:	f7ff ff5d 	bl	2a578 <am_hal_interrupt_master_disable>
   2a6be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2a6c2:	4d0f      	ldr	r5, [pc, #60]	; (2a700 <am_hal_pwrctrl_periph_enable+0x4c>)
   2a6c4:	4e0f      	ldr	r6, [pc, #60]	; (2a704 <am_hal_pwrctrl_periph_enable+0x50>)
   2a6c6:	9001      	str	r0, [sp, #4]
   2a6c8:	00a4      	lsls	r4, r4, #2
   2a6ca:	68aa      	ldr	r2, [r5, #8]
   2a6cc:	5933      	ldr	r3, [r6, r4]
   2a6ce:	4313      	orrs	r3, r2
   2a6d0:	60ab      	str	r3, [r5, #8]
   2a6d2:	9801      	ldr	r0, [sp, #4]
   2a6d4:	4434      	add	r4, r6
   2a6d6:	f7ff ff53 	bl	2a580 <am_hal_interrupt_master_set>
   2a6da:	20a0      	movs	r0, #160	; 0xa0
   2a6dc:	f7ff fd46 	bl	2a16c <am_hal_flash_delay>
   2a6e0:	69ab      	ldr	r3, [r5, #24]
   2a6e2:	6864      	ldr	r4, [r4, #4]
   2a6e4:	4223      	tst	r3, r4
   2a6e6:	d103      	bne.n	2a6f0 <am_hal_pwrctrl_periph_enable+0x3c>
   2a6e8:	20a0      	movs	r0, #160	; 0xa0
   2a6ea:	f7ff fd3f 	bl	2a16c <am_hal_flash_delay>
   2a6ee:	69ab      	ldr	r3, [r5, #24]
   2a6f0:	4b03      	ldr	r3, [pc, #12]	; (2a700 <am_hal_pwrctrl_periph_enable+0x4c>)
   2a6f2:	699b      	ldr	r3, [r3, #24]
   2a6f4:	4223      	tst	r3, r4
   2a6f6:	bf0c      	ite	eq
   2a6f8:	2001      	moveq	r0, #1
   2a6fa:	2000      	movne	r0, #0
   2a6fc:	b002      	add	sp, #8
   2a6fe:	bd70      	pop	{r4, r5, r6, pc}
   2a700:	40021000 	.word	0x40021000
   2a704:	0002eaa8 	.word	0x0002eaa8

0002a708 <am_hal_pwrctrl_periph_disable>:
   2a708:	b570      	push	{r4, r5, r6, lr}
   2a70a:	b082      	sub	sp, #8
   2a70c:	4604      	mov	r4, r0
   2a70e:	f7ff ff33 	bl	2a578 <am_hal_interrupt_master_disable>
   2a712:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2a716:	4d10      	ldr	r5, [pc, #64]	; (2a758 <am_hal_pwrctrl_periph_disable+0x50>)
   2a718:	4e10      	ldr	r6, [pc, #64]	; (2a75c <am_hal_pwrctrl_periph_disable+0x54>)
   2a71a:	9001      	str	r0, [sp, #4]
   2a71c:	00a4      	lsls	r4, r4, #2
   2a71e:	68ab      	ldr	r3, [r5, #8]
   2a720:	5932      	ldr	r2, [r6, r4]
   2a722:	ea23 0302 	bic.w	r3, r3, r2
   2a726:	60ab      	str	r3, [r5, #8]
   2a728:	9801      	ldr	r0, [sp, #4]
   2a72a:	4434      	add	r4, r6
   2a72c:	f7ff ff28 	bl	2a580 <am_hal_interrupt_master_set>
   2a730:	20a0      	movs	r0, #160	; 0xa0
   2a732:	f7ff fd1b 	bl	2a16c <am_hal_flash_delay>
   2a736:	69ab      	ldr	r3, [r5, #24]
   2a738:	6864      	ldr	r4, [r4, #4]
   2a73a:	4223      	tst	r3, r4
   2a73c:	d003      	beq.n	2a746 <am_hal_pwrctrl_periph_disable+0x3e>
   2a73e:	20a0      	movs	r0, #160	; 0xa0
   2a740:	f7ff fd14 	bl	2a16c <am_hal_flash_delay>
   2a744:	69ab      	ldr	r3, [r5, #24]
   2a746:	4b04      	ldr	r3, [pc, #16]	; (2a758 <am_hal_pwrctrl_periph_disable+0x50>)
   2a748:	699b      	ldr	r3, [r3, #24]
   2a74a:	4223      	tst	r3, r4
   2a74c:	bf14      	ite	ne
   2a74e:	2001      	movne	r0, #1
   2a750:	2000      	moveq	r0, #0
   2a752:	b002      	add	sp, #8
   2a754:	bd70      	pop	{r4, r5, r6, pc}
   2a756:	bf00      	nop
   2a758:	40021000 	.word	0x40021000
   2a75c:	0002eaa8 	.word	0x0002eaa8

0002a760 <am_hal_pwrctrl_low_power_init>:
   2a760:	b530      	push	{r4, r5, lr}
   2a762:	4b56      	ldr	r3, [pc, #344]	; (2a8bc <am_hal_pwrctrl_low_power_init+0x15c>)
   2a764:	681a      	ldr	r2, [r3, #0]
   2a766:	b085      	sub	sp, #20
   2a768:	b912      	cbnz	r2, 2a770 <am_hal_pwrctrl_low_power_init+0x10>
   2a76a:	4a55      	ldr	r2, [pc, #340]	; (2a8c0 <am_hal_pwrctrl_low_power_init+0x160>)
   2a76c:	6812      	ldr	r2, [r2, #0]
   2a76e:	601a      	str	r2, [r3, #0]
   2a770:	4b54      	ldr	r3, [pc, #336]	; (2a8c4 <am_hal_pwrctrl_low_power_init+0x164>)
   2a772:	68db      	ldr	r3, [r3, #12]
   2a774:	b2db      	uxtb	r3, r3
   2a776:	2b12      	cmp	r3, #18
   2a778:	d061      	beq.n	2a83e <am_hal_pwrctrl_low_power_init+0xde>
   2a77a:	4b52      	ldr	r3, [pc, #328]	; (2a8c4 <am_hal_pwrctrl_low_power_init+0x164>)
   2a77c:	68da      	ldr	r2, [r3, #12]
   2a77e:	b2d2      	uxtb	r2, r2
   2a780:	2a20      	cmp	r2, #32
   2a782:	d934      	bls.n	2a7ee <am_hal_pwrctrl_low_power_init+0x8e>
   2a784:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   2a788:	2002      	movs	r0, #2
   2a78a:	f360 4213 	bfi	r2, r0, #16, #4
   2a78e:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   2a792:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   2a796:	2203      	movs	r2, #3
   2a798:	f362 5117 	bfi	r1, r2, #20, #4
   2a79c:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   2a7a0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2a7a4:	2405      	movs	r4, #5
   2a7a6:	f364 0103 	bfi	r1, r4, #0, #4
   2a7aa:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2a7ae:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2a7b2:	f360 1107 	bfi	r1, r0, #4, #4
   2a7b6:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2a7ba:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2a7be:	2006      	movs	r0, #6
   2a7c0:	f360 210b 	bfi	r1, r0, #8, #4
   2a7c4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2a7c8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2a7cc:	2001      	movs	r0, #1
   2a7ce:	f360 310f 	bfi	r1, r0, #12, #4
   2a7d2:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2a7d6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2a7da:	f362 61de 	bfi	r1, r2, #27, #4
   2a7de:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2a7e2:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   2a7e6:	f362 0103 	bfi	r1, r2, #0, #4
   2a7ea:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   2a7ee:	4a35      	ldr	r2, [pc, #212]	; (2a8c4 <am_hal_pwrctrl_low_power_init+0x164>)
   2a7f0:	68d3      	ldr	r3, [r2, #12]
   2a7f2:	b2db      	uxtb	r3, r3
   2a7f4:	2b11      	cmp	r3, #17
   2a7f6:	d80a      	bhi.n	2a80e <am_hal_pwrctrl_low_power_init+0xae>
   2a7f8:	4c33      	ldr	r4, [pc, #204]	; (2a8c8 <am_hal_pwrctrl_low_power_init+0x168>)
   2a7fa:	2100      	movs	r1, #0
   2a7fc:	200c      	movs	r0, #12
   2a7fe:	f7ff fa57 	bl	29cb0 <am_hal_cachectrl_control>
   2a802:	69a3      	ldr	r3, [r4, #24]
   2a804:	05db      	lsls	r3, r3, #23
   2a806:	d509      	bpl.n	2a81c <am_hal_pwrctrl_low_power_init+0xbc>
   2a808:	2000      	movs	r0, #0
   2a80a:	b005      	add	sp, #20
   2a80c:	bd30      	pop	{r4, r5, pc}
   2a80e:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   2a812:	f36f 6318 	bfc	r3, #24, #1
   2a816:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   2a81a:	e7ed      	b.n	2a7f8 <am_hal_pwrctrl_low_power_init+0x98>
   2a81c:	4d29      	ldr	r5, [pc, #164]	; (2a8c4 <am_hal_pwrctrl_low_power_init+0x164>)
   2a81e:	492b      	ldr	r1, [pc, #172]	; (2a8cc <am_hal_pwrctrl_low_power_init+0x16c>)
   2a820:	7e2a      	ldrb	r2, [r5, #24]
   2a822:	2001      	movs	r0, #1
   2a824:	4302      	orrs	r2, r0
   2a826:	2307      	movs	r3, #7
   2a828:	762a      	strb	r2, [r5, #24]
   2a82a:	9000      	str	r0, [sp, #0]
   2a82c:	461a      	mov	r2, r3
   2a82e:	f242 7010 	movw	r0, #10000	; 0x2710
   2a832:	f7ff fcab 	bl	2a18c <am_hal_flash_delay_status_check>
   2a836:	b300      	cbz	r0, 2a87a <am_hal_pwrctrl_low_power_init+0x11a>
   2a838:	2004      	movs	r0, #4
   2a83a:	b005      	add	sp, #20
   2a83c:	bd30      	pop	{r4, r5, pc}
   2a83e:	4c22      	ldr	r4, [pc, #136]	; (2a8c8 <am_hal_pwrctrl_low_power_init+0x168>)
   2a840:	6863      	ldr	r3, [r4, #4]
   2a842:	07d8      	lsls	r0, r3, #31
   2a844:	d599      	bpl.n	2a77a <am_hal_pwrctrl_low_power_init+0x1a>
   2a846:	f7ff fe97 	bl	2a578 <am_hal_interrupt_master_disable>
   2a84a:	9003      	str	r0, [sp, #12]
   2a84c:	68a3      	ldr	r3, [r4, #8]
   2a84e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2a852:	60a3      	str	r3, [r4, #8]
   2a854:	9803      	ldr	r0, [sp, #12]
   2a856:	f7ff fe93 	bl	2a580 <am_hal_interrupt_master_set>
   2a85a:	20a0      	movs	r0, #160	; 0xa0
   2a85c:	f7ff fc86 	bl	2a16c <am_hal_flash_delay>
   2a860:	69a3      	ldr	r3, [r4, #24]
   2a862:	0619      	lsls	r1, r3, #24
   2a864:	d403      	bmi.n	2a86e <am_hal_pwrctrl_low_power_init+0x10e>
   2a866:	20a0      	movs	r0, #160	; 0xa0
   2a868:	f7ff fc80 	bl	2a16c <am_hal_flash_delay>
   2a86c:	69a3      	ldr	r3, [r4, #24]
   2a86e:	4b16      	ldr	r3, [pc, #88]	; (2a8c8 <am_hal_pwrctrl_low_power_init+0x168>)
   2a870:	699b      	ldr	r3, [r3, #24]
   2a872:	061a      	lsls	r2, r3, #24
   2a874:	d481      	bmi.n	2a77a <am_hal_pwrctrl_low_power_init+0x1a>
   2a876:	2001      	movs	r0, #1
   2a878:	e7c7      	b.n	2a80a <am_hal_pwrctrl_low_power_init+0xaa>
   2a87a:	6823      	ldr	r3, [r4, #0]
   2a87c:	f043 0301 	orr.w	r3, r3, #1
   2a880:	6023      	str	r3, [r4, #0]
   2a882:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a888:	6263      	str	r3, [r4, #36]	; 0x24
   2a88a:	68eb      	ldr	r3, [r5, #12]
   2a88c:	b2db      	uxtb	r3, r3
   2a88e:	2b11      	cmp	r3, #17
   2a890:	d1ba      	bne.n	2a808 <am_hal_pwrctrl_low_power_init+0xa8>
   2a892:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   2a896:	f360 5356 	bfi	r3, r0, #21, #2
   2a89a:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   2a89e:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   2a8a2:	220f      	movs	r2, #15
   2a8a4:	f362 138b 	bfi	r3, r2, #6, #6
   2a8a8:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   2a8ac:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   2a8b0:	f362 0305 	bfi	r3, r2, #0, #6
   2a8b4:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   2a8b8:	e7a7      	b.n	2a80a <am_hal_pwrctrl_low_power_init+0xaa>
   2a8ba:	bf00      	nop
   2a8bc:	100088d0 	.word	0x100088d0
   2a8c0:	4ffff000 	.word	0x4ffff000
   2a8c4:	40020000 	.word	0x40020000
   2a8c8:	40021000 	.word	0x40021000
   2a8cc:	40020018 	.word	0x40020018

0002a8d0 <am_hal_pwrctrl_blebuck_trim>:
   2a8d0:	b510      	push	{r4, lr}
   2a8d2:	4c11      	ldr	r4, [pc, #68]	; (2a918 <am_hal_pwrctrl_blebuck_trim+0x48>)
   2a8d4:	68e3      	ldr	r3, [r4, #12]
   2a8d6:	b2db      	uxtb	r3, r3
   2a8d8:	2b11      	cmp	r3, #17
   2a8da:	b082      	sub	sp, #8
   2a8dc:	d919      	bls.n	2a912 <am_hal_pwrctrl_blebuck_trim+0x42>
   2a8de:	f7ff fe4b 	bl	2a578 <am_hal_interrupt_master_disable>
   2a8e2:	9001      	str	r0, [sp, #4]
   2a8e4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   2a8e8:	2219      	movs	r2, #25
   2a8ea:	f362 138b 	bfi	r3, r2, #6, #6
   2a8ee:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   2a8f2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   2a8f6:	230c      	movs	r3, #12
   2a8f8:	f363 0205 	bfi	r2, r3, #0, #6
   2a8fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a900:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   2a904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2a906:	f36f 5296 	bfc	r2, #22, #1
   2a90a:	63da      	str	r2, [r3, #60]	; 0x3c
   2a90c:	9801      	ldr	r0, [sp, #4]
   2a90e:	f7ff fe37 	bl	2a580 <am_hal_interrupt_master_set>
   2a912:	b002      	add	sp, #8
   2a914:	bd10      	pop	{r4, pc}
   2a916:	bf00      	nop
   2a918:	40020000 	.word	0x40020000

0002a91c <am_hal_queue_init>:
   2a91c:	b410      	push	{r4}
   2a91e:	2400      	movs	r4, #0
   2a920:	6004      	str	r4, [r0, #0]
   2a922:	6044      	str	r4, [r0, #4]
   2a924:	6084      	str	r4, [r0, #8]
   2a926:	60c3      	str	r3, [r0, #12]
   2a928:	6102      	str	r2, [r0, #16]
   2a92a:	6141      	str	r1, [r0, #20]
   2a92c:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a930:	4770      	bx	lr
   2a932:	bf00      	nop

0002a934 <am_hal_queue_item_add>:
   2a934:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a936:	4604      	mov	r4, r0
   2a938:	6906      	ldr	r6, [r0, #16]
   2a93a:	b083      	sub	sp, #12
   2a93c:	fb06 f602 	mul.w	r6, r6, r2
   2a940:	460d      	mov	r5, r1
   2a942:	f7ff fe19 	bl	2a578 <am_hal_interrupt_master_disable>
   2a946:	68e7      	ldr	r7, [r4, #12]
   2a948:	68a2      	ldr	r2, [r4, #8]
   2a94a:	9001      	str	r0, [sp, #4]
   2a94c:	1abb      	subs	r3, r7, r2
   2a94e:	429e      	cmp	r6, r3
   2a950:	d826      	bhi.n	2a9a0 <am_hal_queue_item_add+0x6c>
   2a952:	b196      	cbz	r6, 2a97a <am_hal_queue_item_add+0x46>
   2a954:	6823      	ldr	r3, [r4, #0]
   2a956:	4629      	mov	r1, r5
   2a958:	b1c5      	cbz	r5, 2a98c <am_hal_queue_item_add+0x58>
   2a95a:	19af      	adds	r7, r5, r6
   2a95c:	6962      	ldr	r2, [r4, #20]
   2a95e:	f811 0b01 	ldrb.w	r0, [r1], #1
   2a962:	54d0      	strb	r0, [r2, r3]
   2a964:	6823      	ldr	r3, [r4, #0]
   2a966:	68e5      	ldr	r5, [r4, #12]
   2a968:	3301      	adds	r3, #1
   2a96a:	42b9      	cmp	r1, r7
   2a96c:	fbb3 f0f5 	udiv	r0, r3, r5
   2a970:	fb05 3310 	mls	r3, r5, r0, r3
   2a974:	6023      	str	r3, [r4, #0]
   2a976:	d1f1      	bne.n	2a95c <am_hal_queue_item_add+0x28>
   2a978:	68a2      	ldr	r2, [r4, #8]
   2a97a:	4432      	add	r2, r6
   2a97c:	60a2      	str	r2, [r4, #8]
   2a97e:	2401      	movs	r4, #1
   2a980:	9801      	ldr	r0, [sp, #4]
   2a982:	f7ff fdfd 	bl	2a580 <am_hal_interrupt_master_set>
   2a986:	4620      	mov	r0, r4
   2a988:	b003      	add	sp, #12
   2a98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a98c:	3101      	adds	r1, #1
   2a98e:	3301      	adds	r3, #1
   2a990:	428e      	cmp	r6, r1
   2a992:	fbb3 f0f7 	udiv	r0, r3, r7
   2a996:	fb07 3310 	mls	r3, r7, r0, r3
   2a99a:	d1f7      	bne.n	2a98c <am_hal_queue_item_add+0x58>
   2a99c:	6023      	str	r3, [r4, #0]
   2a99e:	e7ec      	b.n	2a97a <am_hal_queue_item_add+0x46>
   2a9a0:	2400      	movs	r4, #0
   2a9a2:	e7ed      	b.n	2a980 <am_hal_queue_item_add+0x4c>

0002a9a4 <am_hal_queue_item_get>:
   2a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9a6:	4604      	mov	r4, r0
   2a9a8:	6906      	ldr	r6, [r0, #16]
   2a9aa:	b083      	sub	sp, #12
   2a9ac:	fb06 f602 	mul.w	r6, r6, r2
   2a9b0:	460d      	mov	r5, r1
   2a9b2:	f7ff fde1 	bl	2a578 <am_hal_interrupt_master_disable>
   2a9b6:	68a2      	ldr	r2, [r4, #8]
   2a9b8:	9001      	str	r0, [sp, #4]
   2a9ba:	4296      	cmp	r6, r2
   2a9bc:	d81c      	bhi.n	2a9f8 <am_hal_queue_item_get+0x54>
   2a9be:	b196      	cbz	r6, 2a9e6 <am_hal_queue_item_get+0x42>
   2a9c0:	6863      	ldr	r3, [r4, #4]
   2a9c2:	b1dd      	cbz	r5, 2a9fc <am_hal_queue_item_get+0x58>
   2a9c4:	4629      	mov	r1, r5
   2a9c6:	19af      	adds	r7, r5, r6
   2a9c8:	6962      	ldr	r2, [r4, #20]
   2a9ca:	5cd3      	ldrb	r3, [r2, r3]
   2a9cc:	f801 3b01 	strb.w	r3, [r1], #1
   2a9d0:	6863      	ldr	r3, [r4, #4]
   2a9d2:	68e5      	ldr	r5, [r4, #12]
   2a9d4:	3301      	adds	r3, #1
   2a9d6:	428f      	cmp	r7, r1
   2a9d8:	fbb3 f0f5 	udiv	r0, r3, r5
   2a9dc:	fb05 3310 	mls	r3, r5, r0, r3
   2a9e0:	6063      	str	r3, [r4, #4]
   2a9e2:	d1f1      	bne.n	2a9c8 <am_hal_queue_item_get+0x24>
   2a9e4:	68a2      	ldr	r2, [r4, #8]
   2a9e6:	1b92      	subs	r2, r2, r6
   2a9e8:	60a2      	str	r2, [r4, #8]
   2a9ea:	2401      	movs	r4, #1
   2a9ec:	9801      	ldr	r0, [sp, #4]
   2a9ee:	f7ff fdc7 	bl	2a580 <am_hal_interrupt_master_set>
   2a9f2:	4620      	mov	r0, r4
   2a9f4:	b003      	add	sp, #12
   2a9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a9f8:	2400      	movs	r4, #0
   2a9fa:	e7f7      	b.n	2a9ec <am_hal_queue_item_get+0x48>
   2a9fc:	68e0      	ldr	r0, [r4, #12]
   2a9fe:	4629      	mov	r1, r5
   2aa00:	3101      	adds	r1, #1
   2aa02:	3301      	adds	r3, #1
   2aa04:	428e      	cmp	r6, r1
   2aa06:	fbb3 f5f0 	udiv	r5, r3, r0
   2aa0a:	fb00 3315 	mls	r3, r0, r5, r3
   2aa0e:	d1f7      	bne.n	2aa00 <am_hal_queue_item_get+0x5c>
   2aa10:	6063      	str	r3, [r4, #4]
   2aa12:	e7e8      	b.n	2a9e6 <am_hal_queue_item_get+0x42>

0002aa14 <am_hal_stimer_config>:
   2aa14:	4b03      	ldr	r3, [pc, #12]	; (2aa24 <am_hal_stimer_config+0x10>)
   2aa16:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2aa1a:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   2aa1e:	4610      	mov	r0, r2
   2aa20:	4770      	bx	lr
   2aa22:	bf00      	nop
   2aa24:	40008000 	.word	0x40008000

0002aa28 <am_hal_stimer_counter_get>:
   2aa28:	4b01      	ldr	r3, [pc, #4]	; (2aa30 <am_hal_stimer_counter_get+0x8>)
   2aa2a:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   2aa2e:	4770      	bx	lr
   2aa30:	40008000 	.word	0x40008000

0002aa34 <am_hal_stimer_compare_delta_set>:
   2aa34:	2807      	cmp	r0, #7
   2aa36:	d900      	bls.n	2aa3a <am_hal_stimer_compare_delta_set+0x6>
   2aa38:	4770      	bx	lr
   2aa3a:	b570      	push	{r4, r5, r6, lr}
   2aa3c:	b082      	sub	sp, #8
   2aa3e:	460c      	mov	r4, r1
   2aa40:	4605      	mov	r5, r0
   2aa42:	f7ff fd99 	bl	2a578 <am_hal_interrupt_master_disable>
   2aa46:	4923      	ldr	r1, [pc, #140]	; (2aad4 <am_hal_stimer_compare_delta_set+0xa0>)
   2aa48:	9001      	str	r0, [sp, #4]
   2aa4a:	4b23      	ldr	r3, [pc, #140]	; (2aad8 <am_hal_stimer_compare_delta_set+0xa4>)
   2aa4c:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   2aa50:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   2aa54:	f44f 7280 	mov.w	r2, #256	; 0x100
   2aa58:	442b      	add	r3, r5
   2aa5a:	40aa      	lsls	r2, r5
   2aa5c:	ea26 0502 	bic.w	r5, r6, r2
   2aa60:	009b      	lsls	r3, r3, #2
   2aa62:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   2aa66:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2aa6a:	601c      	str	r4, [r3, #0]
   2aa6c:	681d      	ldr	r5, [r3, #0]
   2aa6e:	4421      	add	r1, r4
   2aa70:	1a6e      	subs	r6, r5, r1
   2aa72:	2e00      	cmp	r6, #0
   2aa74:	db03      	blt.n	2aa7e <am_hal_stimer_compare_delta_set+0x4a>
   2aa76:	310a      	adds	r1, #10
   2aa78:	1a69      	subs	r1, r5, r1
   2aa7a:	2900      	cmp	r1, #0
   2aa7c:	dd1e      	ble.n	2aabc <am_hal_stimer_compare_delta_set+0x88>
   2aa7e:	4915      	ldr	r1, [pc, #84]	; (2aad4 <am_hal_stimer_compare_delta_set+0xa0>)
   2aa80:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2aa84:	601c      	str	r4, [r3, #0]
   2aa86:	681d      	ldr	r5, [r3, #0]
   2aa88:	4421      	add	r1, r4
   2aa8a:	1a6e      	subs	r6, r5, r1
   2aa8c:	2e00      	cmp	r6, #0
   2aa8e:	db03      	blt.n	2aa98 <am_hal_stimer_compare_delta_set+0x64>
   2aa90:	310a      	adds	r1, #10
   2aa92:	1a69      	subs	r1, r5, r1
   2aa94:	2900      	cmp	r1, #0
   2aa96:	dd11      	ble.n	2aabc <am_hal_stimer_compare_delta_set+0x88>
   2aa98:	490e      	ldr	r1, [pc, #56]	; (2aad4 <am_hal_stimer_compare_delta_set+0xa0>)
   2aa9a:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2aa9e:	601c      	str	r4, [r3, #0]
   2aaa0:	681d      	ldr	r5, [r3, #0]
   2aaa2:	4421      	add	r1, r4
   2aaa4:	1a6e      	subs	r6, r5, r1
   2aaa6:	2e00      	cmp	r6, #0
   2aaa8:	db03      	blt.n	2aab2 <am_hal_stimer_compare_delta_set+0x7e>
   2aaaa:	310a      	adds	r1, #10
   2aaac:	1a69      	subs	r1, r5, r1
   2aaae:	2900      	cmp	r1, #0
   2aab0:	dd04      	ble.n	2aabc <am_hal_stimer_compare_delta_set+0x88>
   2aab2:	4908      	ldr	r1, [pc, #32]	; (2aad4 <am_hal_stimer_compare_delta_set+0xa0>)
   2aab4:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2aab8:	601c      	str	r4, [r3, #0]
   2aaba:	681b      	ldr	r3, [r3, #0]
   2aabc:	4905      	ldr	r1, [pc, #20]	; (2aad4 <am_hal_stimer_compare_delta_set+0xa0>)
   2aabe:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   2aac2:	4002      	ands	r2, r0
   2aac4:	431a      	orrs	r2, r3
   2aac6:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   2aaca:	9801      	ldr	r0, [sp, #4]
   2aacc:	f7ff fd58 	bl	2a580 <am_hal_interrupt_master_set>
   2aad0:	b002      	add	sp, #8
   2aad2:	bd70      	pop	{r4, r5, r6, pc}
   2aad4:	40008000 	.word	0x40008000
   2aad8:	10002054 	.word	0x10002054

0002aadc <am_hal_stimer_int_enable>:
   2aadc:	4a03      	ldr	r2, [pc, #12]	; (2aaec <am_hal_stimer_int_enable+0x10>)
   2aade:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   2aae2:	4318      	orrs	r0, r3
   2aae4:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   2aae8:	4770      	bx	lr
   2aaea:	bf00      	nop
   2aaec:	40008000 	.word	0x40008000

0002aaf0 <am_hal_stimer_int_clear>:
   2aaf0:	4b01      	ldr	r3, [pc, #4]	; (2aaf8 <am_hal_stimer_int_clear+0x8>)
   2aaf2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2aaf6:	4770      	bx	lr
   2aaf8:	40008000 	.word	0x40008000

0002aafc <am_hal_stimer_int_status_get>:
   2aafc:	4a04      	ldr	r2, [pc, #16]	; (2ab10 <am_hal_stimer_int_status_get+0x14>)
   2aafe:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2ab02:	b110      	cbz	r0, 2ab0a <am_hal_stimer_int_status_get+0xe>
   2ab04:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   2ab08:	4013      	ands	r3, r2
   2ab0a:	4618      	mov	r0, r3
   2ab0c:	4770      	bx	lr
   2ab0e:	bf00      	nop
   2ab10:	40008000 	.word	0x40008000

0002ab14 <am_hal_sysctrl_sleep>:
   2ab14:	b510      	push	{r4, lr}
   2ab16:	b082      	sub	sp, #8
   2ab18:	4604      	mov	r4, r0
   2ab1a:	f7ff fd2d 	bl	2a578 <am_hal_interrupt_master_disable>
   2ab1e:	9001      	str	r0, [sp, #4]
   2ab20:	b124      	cbz	r4, 2ab2c <am_hal_sysctrl_sleep+0x18>
   2ab22:	4b12      	ldr	r3, [pc, #72]	; (2ab6c <am_hal_sysctrl_sleep+0x58>)
   2ab24:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   2ab28:	07db      	lsls	r3, r3, #31
   2ab2a:	d512      	bpl.n	2ab52 <am_hal_sysctrl_sleep+0x3e>
   2ab2c:	4a10      	ldr	r2, [pc, #64]	; (2ab70 <am_hal_sysctrl_sleep+0x5c>)
   2ab2e:	6913      	ldr	r3, [r2, #16]
   2ab30:	f023 0304 	bic.w	r3, r3, #4
   2ab34:	6113      	str	r3, [r2, #16]
   2ab36:	f3bf 8f4f 	dsb	sy
   2ab3a:	4a0e      	ldr	r2, [pc, #56]	; (2ab74 <am_hal_sysctrl_sleep+0x60>)
   2ab3c:	4b0e      	ldr	r3, [pc, #56]	; (2ab78 <am_hal_sysctrl_sleep+0x64>)
   2ab3e:	6812      	ldr	r2, [r2, #0]
   2ab40:	601a      	str	r2, [r3, #0]
   2ab42:	bf30      	wfi
   2ab44:	f3bf 8f6f 	isb	sy
   2ab48:	9801      	ldr	r0, [sp, #4]
   2ab4a:	f7ff fd19 	bl	2a580 <am_hal_interrupt_master_set>
   2ab4e:	b002      	add	sp, #8
   2ab50:	bd10      	pop	{r4, pc}
   2ab52:	4b0a      	ldr	r3, [pc, #40]	; (2ab7c <am_hal_sysctrl_sleep+0x68>)
   2ab54:	681a      	ldr	r2, [r3, #0]
   2ab56:	b912      	cbnz	r2, 2ab5e <am_hal_sysctrl_sleep+0x4a>
   2ab58:	4a09      	ldr	r2, [pc, #36]	; (2ab80 <am_hal_sysctrl_sleep+0x6c>)
   2ab5a:	6812      	ldr	r2, [r2, #0]
   2ab5c:	601a      	str	r2, [r3, #0]
   2ab5e:	4a04      	ldr	r2, [pc, #16]	; (2ab70 <am_hal_sysctrl_sleep+0x5c>)
   2ab60:	6913      	ldr	r3, [r2, #16]
   2ab62:	f043 0304 	orr.w	r3, r3, #4
   2ab66:	6113      	str	r3, [r2, #16]
   2ab68:	e7e5      	b.n	2ab36 <am_hal_sysctrl_sleep+0x22>
   2ab6a:	bf00      	nop
   2ab6c:	40020000 	.word	0x40020000
   2ab70:	e000ed00 	.word	0xe000ed00
   2ab74:	5fff0000 	.word	0x5fff0000
   2ab78:	100088d4 	.word	0x100088d4
   2ab7c:	100088d0 	.word	0x100088d0
   2ab80:	4ffff000 	.word	0x4ffff000

0002ab84 <am_hal_sysctrl_fpu_enable>:
   2ab84:	4b02      	ldr	r3, [pc, #8]	; (2ab90 <am_hal_sysctrl_fpu_enable+0xc>)
   2ab86:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   2ab8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   2ab8e:	4770      	bx	lr
   2ab90:	e000ed00 	.word	0xe000ed00

0002ab94 <am_hal_sysctrl_fpu_stacking_enable>:
   2ab94:	b510      	push	{r4, lr}
   2ab96:	b082      	sub	sp, #8
   2ab98:	4604      	mov	r4, r0
   2ab9a:	f7ff fced 	bl	2a578 <am_hal_interrupt_master_disable>
   2ab9e:	4a09      	ldr	r2, [pc, #36]	; (2abc4 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   2aba0:	9001      	str	r0, [sp, #4]
   2aba2:	6853      	ldr	r3, [r2, #4]
   2aba4:	2c00      	cmp	r4, #0
   2aba6:	bf14      	ite	ne
   2aba8:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   2abac:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   2abb0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   2abb4:	430b      	orrs	r3, r1
   2abb6:	6053      	str	r3, [r2, #4]
   2abb8:	9801      	ldr	r0, [sp, #4]
   2abba:	f7ff fce1 	bl	2a580 <am_hal_interrupt_master_set>
   2abbe:	b002      	add	sp, #8
   2abc0:	bd10      	pop	{r4, pc}
   2abc2:	bf00      	nop
   2abc4:	e000ef30 	.word	0xe000ef30

0002abc8 <am_bsp_low_power_init>:
   2abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abca:	f000 f86d 	bl	2aca8 <am_hal_itm_disable>
   2abce:	2000      	movs	r0, #0
   2abd0:	f7f6 ffe4 	bl	21b9c <am_util_stdio_printf_init>
   2abd4:	4b12      	ldr	r3, [pc, #72]	; (2ac20 <am_bsp_low_power_init+0x58>)
   2abd6:	4f13      	ldr	r7, [pc, #76]	; (2ac24 <am_bsp_low_power_init+0x5c>)
   2abd8:	6819      	ldr	r1, [r3, #0]
   2abda:	2021      	movs	r0, #33	; 0x21
   2abdc:	f7ff fb1a 	bl	2a214 <am_hal_gpio_pinconfig>
   2abe0:	f7ff fdbe 	bl	2a760 <am_hal_pwrctrl_low_power_init>
   2abe4:	2001      	movs	r0, #1
   2abe6:	f000 f8cd 	bl	2ad84 <am_hal_rtc_osc_select>
   2abea:	2100      	movs	r1, #0
   2abec:	2003      	movs	r0, #3
   2abee:	f7ff f9d1 	bl	29f94 <am_hal_clkgen_control>
   2abf2:	f000 f8cf 	bl	2ad94 <am_hal_rtc_osc_disable>
   2abf6:	4b0c      	ldr	r3, [pc, #48]	; (2ac28 <am_bsp_low_power_init+0x60>)
   2abf8:	681e      	ldr	r6, [r3, #0]
   2abfa:	2400      	movs	r4, #0
   2abfc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   2ac00:	4631      	mov	r1, r6
   2ac02:	4628      	mov	r0, r5
   2ac04:	f7ff fb06 	bl	2a214 <am_hal_gpio_pinconfig>
   2ac08:	2103      	movs	r1, #3
   2ac0a:	4628      	mov	r0, r5
   2ac0c:	f7ff fc70 	bl	2a4f0 <am_hal_gpio_state_write>
   2ac10:	3401      	adds	r4, #1
   2ac12:	4628      	mov	r0, r5
   2ac14:	2100      	movs	r1, #0
   2ac16:	f7ff fc6b 	bl	2a4f0 <am_hal_gpio_state_write>
   2ac1a:	2c04      	cmp	r4, #4
   2ac1c:	d1ee      	bne.n	2abfc <am_bsp_low_power_init+0x34>
   2ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ac20:	0002e9e8 	.word	0x0002e9e8
   2ac24:	100035c8 	.word	0x100035c8
   2ac28:	0002e9f0 	.word	0x0002e9f0

0002ac2c <am_bsp_itm_printf_enable>:
   2ac2c:	b500      	push	{lr}
   2ac2e:	4b0b      	ldr	r3, [pc, #44]	; (2ac5c <am_bsp_itm_printf_enable+0x30>)
   2ac30:	b087      	sub	sp, #28
   2ac32:	2201      	movs	r2, #1
   2ac34:	601a      	str	r2, [r3, #0]
   2ac36:	f000 f819 	bl	2ac6c <am_hal_itm_enable>
   2ac3a:	4b09      	ldr	r3, [pc, #36]	; (2ac60 <am_bsp_itm_printf_enable+0x34>)
   2ac3c:	9301      	str	r3, [sp, #4]
   2ac3e:	a801      	add	r0, sp, #4
   2ac40:	f000 f8b2 	bl	2ada8 <am_hal_tpiu_enable>
   2ac44:	4b07      	ldr	r3, [pc, #28]	; (2ac64 <am_bsp_itm_printf_enable+0x38>)
   2ac46:	2021      	movs	r0, #33	; 0x21
   2ac48:	6819      	ldr	r1, [r3, #0]
   2ac4a:	f7ff fae3 	bl	2a214 <am_hal_gpio_pinconfig>
   2ac4e:	4806      	ldr	r0, [pc, #24]	; (2ac68 <am_bsp_itm_printf_enable+0x3c>)
   2ac50:	f7f6 ffa4 	bl	21b9c <am_util_stdio_printf_init>
   2ac54:	b007      	add	sp, #28
   2ac56:	f85d fb04 	ldr.w	pc, [sp], #4
   2ac5a:	bf00      	nop
   2ac5c:	100088d8 	.word	0x100088d8
   2ac60:	000f4240 	.word	0x000f4240
   2ac64:	0002eb5c 	.word	0x0002eb5c
   2ac68:	0002ad55 	.word	0x0002ad55

0002ac6c <am_hal_itm_enable>:
   2ac6c:	4a0b      	ldr	r2, [pc, #44]	; (2ac9c <am_hal_itm_enable+0x30>)
   2ac6e:	68d3      	ldr	r3, [r2, #12]
   2ac70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2ac74:	60d3      	str	r3, [r2, #12]
   2ac76:	68d3      	ldr	r3, [r2, #12]
   2ac78:	01db      	lsls	r3, r3, #7
   2ac7a:	d5fc      	bpl.n	2ac76 <am_hal_itm_enable+0xa>
   2ac7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2ac80:	4907      	ldr	r1, [pc, #28]	; (2aca0 <am_hal_itm_enable+0x34>)
   2ac82:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   2ac86:	4a07      	ldr	r2, [pc, #28]	; (2aca4 <am_hal_itm_enable+0x38>)
   2ac88:	200f      	movs	r0, #15
   2ac8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ac8e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2ac92:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2ac96:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   2ac9a:	4770      	bx	lr
   2ac9c:	e000edf0 	.word	0xe000edf0
   2aca0:	c5acce55 	.word	0xc5acce55
   2aca4:	00150511 	.word	0x00150511

0002aca8 <am_hal_itm_disable>:
   2aca8:	b510      	push	{r4, lr}
   2acaa:	4b25      	ldr	r3, [pc, #148]	; (2ad40 <am_hal_itm_disable+0x98>)
   2acac:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   2acb0:	b9b3      	cbnz	r3, 2ace0 <am_hal_itm_disable+0x38>
   2acb2:	4b24      	ldr	r3, [pc, #144]	; (2ad44 <am_hal_itm_disable+0x9c>)
   2acb4:	68da      	ldr	r2, [r3, #12]
   2acb6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2acba:	60da      	str	r2, [r3, #12]
   2acbc:	68da      	ldr	r2, [r3, #12]
   2acbe:	01d2      	lsls	r2, r2, #7
   2acc0:	d5fc      	bpl.n	2acbc <am_hal_itm_disable+0x14>
   2acc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2acc6:	4920      	ldr	r1, [pc, #128]	; (2ad48 <am_hal_itm_disable+0xa0>)
   2acc8:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   2accc:	4a1f      	ldr	r2, [pc, #124]	; (2ad4c <am_hal_itm_disable+0xa4>)
   2acce:	200f      	movs	r0, #15
   2acd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2acd4:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2acd8:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2acdc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   2ace0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2ace4:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   2ace8:	021b      	lsls	r3, r3, #8
   2acea:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   2acee:	d4f9      	bmi.n	2ace4 <am_hal_itm_disable+0x3c>
   2acf0:	f44f 7048 	mov.w	r0, #800	; 0x320
   2acf4:	f7ff fa3a 	bl	2a16c <am_hal_flash_delay>
   2acf8:	4b13      	ldr	r3, [pc, #76]	; (2ad48 <am_hal_itm_disable+0xa0>)
   2acfa:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   2acfe:	4621      	mov	r1, r4
   2ad00:	2064      	movs	r0, #100	; 0x64
   2ad02:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
   2ad06:	f023 0301 	bic.w	r3, r3, #1
   2ad0a:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
   2ad0e:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
   2ad12:	4b0f      	ldr	r3, [pc, #60]	; (2ad50 <am_hal_itm_disable+0xa8>)
   2ad14:	4013      	ands	r3, r2
   2ad16:	2b00      	cmp	r3, #0
   2ad18:	d1f9      	bne.n	2ad0e <am_hal_itm_disable+0x66>
   2ad1a:	3801      	subs	r0, #1
   2ad1c:	d1f1      	bne.n	2ad02 <am_hal_itm_disable+0x5a>
   2ad1e:	4a09      	ldr	r2, [pc, #36]	; (2ad44 <am_hal_itm_disable+0x9c>)
   2ad20:	68d3      	ldr	r3, [r2, #12]
   2ad22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2ad26:	60d3      	str	r3, [r2, #12]
   2ad28:	68d3      	ldr	r3, [r2, #12]
   2ad2a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   2ad2e:	d1fb      	bne.n	2ad28 <am_hal_itm_disable+0x80>
   2ad30:	4a03      	ldr	r2, [pc, #12]	; (2ad40 <am_hal_itm_disable+0x98>)
   2ad32:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   2ad36:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   2ad3a:	2b00      	cmp	r3, #0
   2ad3c:	d1fb      	bne.n	2ad36 <am_hal_itm_disable+0x8e>
   2ad3e:	bd10      	pop	{r4, pc}
   2ad40:	40020000 	.word	0x40020000
   2ad44:	e000edf0 	.word	0xe000edf0
   2ad48:	c5acce55 	.word	0xc5acce55
   2ad4c:	00150511 	.word	0x00150511
   2ad50:	00800001 	.word	0x00800001

0002ad54 <am_hal_itm_print>:
   2ad54:	7803      	ldrb	r3, [r0, #0]
   2ad56:	b1a3      	cbz	r3, 2ad82 <am_hal_itm_print+0x2e>
   2ad58:	4602      	mov	r2, r0
   2ad5a:	2300      	movs	r3, #0
   2ad5c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2ad60:	3301      	adds	r3, #1
   2ad62:	2900      	cmp	r1, #0
   2ad64:	d1fa      	bne.n	2ad5c <am_hal_itm_print+0x8>
   2ad66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2ad6a:	b430      	push	{r4, r5}
   2ad6c:	18c1      	adds	r1, r0, r3
   2ad6e:	4615      	mov	r5, r2
   2ad70:	f810 4b01 	ldrb.w	r4, [r0], #1
   2ad74:	6813      	ldr	r3, [r2, #0]
   2ad76:	2b00      	cmp	r3, #0
   2ad78:	d0fc      	beq.n	2ad74 <am_hal_itm_print+0x20>
   2ad7a:	4288      	cmp	r0, r1
   2ad7c:	702c      	strb	r4, [r5, #0]
   2ad7e:	d1f7      	bne.n	2ad70 <am_hal_itm_print+0x1c>
   2ad80:	bc30      	pop	{r4, r5}
   2ad82:	4770      	bx	lr

0002ad84 <am_hal_rtc_osc_select>:
   2ad84:	b928      	cbnz	r0, 2ad92 <am_hal_rtc_osc_select+0xe>
   2ad86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2ad8a:	68d3      	ldr	r3, [r2, #12]
   2ad8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2ad90:	60d3      	str	r3, [r2, #12]
   2ad92:	4770      	bx	lr

0002ad94 <am_hal_rtc_osc_disable>:
   2ad94:	4a03      	ldr	r2, [pc, #12]	; (2ada4 <am_hal_rtc_osc_disable+0x10>)
   2ad96:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   2ad9a:	f043 0310 	orr.w	r3, r3, #16
   2ad9e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   2ada2:	4770      	bx	lr
   2ada4:	40004200 	.word	0x40004200

0002ada8 <am_hal_tpiu_enable>:
   2ada8:	b530      	push	{r4, r5, lr}
   2adaa:	4a23      	ldr	r2, [pc, #140]	; (2ae38 <am_hal_tpiu_enable+0x90>)
   2adac:	6804      	ldr	r4, [r0, #0]
   2adae:	2300      	movs	r3, #0
   2adb0:	b085      	sub	sp, #20
   2adb2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   2adb6:	b334      	cbz	r4, 2ae06 <am_hal_tpiu_enable+0x5e>
   2adb8:	4b20      	ldr	r3, [pc, #128]	; (2ae3c <am_hal_tpiu_enable+0x94>)
   2adba:	4921      	ldr	r1, [pc, #132]	; (2ae40 <am_hal_tpiu_enable+0x98>)
   2adbc:	2001      	movs	r0, #1
   2adbe:	6050      	str	r0, [r2, #4]
   2adc0:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   2adc4:	a801      	add	r0, sp, #4
   2adc6:	428a      	cmp	r2, r1
   2adc8:	bf88      	it	hi
   2adca:	461c      	movhi	r4, r3
   2adcc:	f7ff f970 	bl	2a0b0 <am_hal_clkgen_status_get>
   2add0:	9b01      	ldr	r3, [sp, #4]
   2add2:	1c5a      	adds	r2, r3, #1
   2add4:	d02d      	beq.n	2ae32 <am_hal_tpiu_enable+0x8a>
   2add6:	08db      	lsrs	r3, r3, #3
   2add8:	fbb3 f3f4 	udiv	r3, r3, r4
   2addc:	3b01      	subs	r3, #1
   2adde:	b29b      	uxth	r3, r3
   2ade0:	4a15      	ldr	r2, [pc, #84]	; (2ae38 <am_hal_tpiu_enable+0x90>)
   2ade2:	4918      	ldr	r1, [pc, #96]	; (2ae44 <am_hal_tpiu_enable+0x9c>)
   2ade4:	6113      	str	r3, [r2, #16]
   2ade6:	2402      	movs	r4, #2
   2ade8:	f240 2301 	movw	r3, #513	; 0x201
   2adec:	2000      	movs	r0, #0
   2adee:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   2adf2:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   2adf6:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   2adfa:	f44f 7048 	mov.w	r0, #800	; 0x320
   2adfe:	f7ff f9b5 	bl	2a16c <am_hal_flash_delay>
   2ae02:	b005      	add	sp, #20
   2ae04:	bd30      	pop	{r4, r5, pc}
   2ae06:	6903      	ldr	r3, [r0, #16]
   2ae08:	6113      	str	r3, [r2, #16]
   2ae0a:	6883      	ldr	r3, [r0, #8]
   2ae0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   2ae10:	68c3      	ldr	r3, [r0, #12]
   2ae12:	4d0c      	ldr	r5, [pc, #48]	; (2ae44 <am_hal_tpiu_enable+0x9c>)
   2ae14:	1e59      	subs	r1, r3, #1
   2ae16:	2301      	movs	r3, #1
   2ae18:	408b      	lsls	r3, r1
   2ae1a:	6053      	str	r3, [r2, #4]
   2ae1c:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   2ae20:	6843      	ldr	r3, [r0, #4]
   2ae22:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   2ae26:	f44f 7048 	mov.w	r0, #800	; 0x320
   2ae2a:	f7ff f99f 	bl	2a16c <am_hal_flash_delay>
   2ae2e:	b005      	add	sp, #20
   2ae30:	bd30      	pop	{r4, r5, pc}
   2ae32:	2305      	movs	r3, #5
   2ae34:	e7d4      	b.n	2ade0 <am_hal_tpiu_enable+0x38>
   2ae36:	bf00      	nop
   2ae38:	e0040000 	.word	0xe0040000
   2ae3c:	000f4240 	.word	0x000f4240
   2ae40:	001da380 	.word	0x001da380
   2ae44:	40020000 	.word	0x40020000
   2ae48:	64766372 	.word	0x64766372
   2ae4c:	74616420 	.word	0x74616420
   2ae50:	6e6f2061 	.word	0x6e6f2061
   2ae54:	65727520 	.word	0x65727520
   2ae58:	74736967 	.word	0x74736967
   2ae5c:	64657265 	.word	0x64657265
   2ae60:	64696320 	.word	0x64696320
   2ae64:	00000000 	.word	0x00000000
   2ae68:	6e6b6e75 	.word	0x6e6b6e75
   2ae6c:	206e776f 	.word	0x206e776f
   2ae70:	3d646963 	.word	0x3d646963
   2ae74:	30257830 	.word	0x30257830
   2ae78:	00007834 	.word	0x00007834
   2ae7c:	61766e49 	.word	0x61766e49
   2ae80:	2064696c 	.word	0x2064696c
   2ae84:	656c6f72 	.word	0x656c6f72
   2ae88:	6e6f6320 	.word	0x6e6f6320
   2ae8c:	75676966 	.word	0x75676966
   2ae90:	69746172 	.word	0x69746172
   2ae94:	203a6e6f 	.word	0x203a6e6f
   2ae98:	656c6f72 	.word	0x656c6f72
   2ae9c:	0064253d 	.word	0x0064253d
   2aea0:	676e656c 	.word	0x676e656c
   2aea4:	6d206874 	.word	0x6d206874
   2aea8:	616d7369 	.word	0x616d7369
   2aeac:	3a686374 	.word	0x3a686374
   2aeb0:	63326c20 	.word	0x63326c20
   2aeb4:	2075253d 	.word	0x2075253d
   2aeb8:	3d696368 	.word	0x3d696368
   2aebc:	00007525 	.word	0x00007525
   2aec0:	6e6e6f63 	.word	0x6e6e6f63
   2aec4:	64707520 	.word	0x64707520
   2aec8:	20657461 	.word	0x20657461
   2aecc:	20716572 	.word	0x20716572
   2aed0:	656d6974 	.word	0x656d6974
   2aed4:	0074756f 	.word	0x0074756f
   2aed8:	61766e69 	.word	0x61766e69
   2aedc:	2064696c 	.word	0x2064696c
   2aee0:	2067736d 	.word	0x2067736d
   2aee4:	65646f63 	.word	0x65646f63
   2aee8:	2064253a 	.word	0x2064253a
   2aeec:	3a6e656c 	.word	0x3a6e656c
   2aef0:	6c206425 	.word	0x6c206425
   2aef4:	654c6332 	.word	0x654c6332
   2aef8:	64253a6e 	.word	0x64253a6e
   2aefc:	00000000 	.word	0x00000000
   2af00:	65657246 	.word	0x65657246
   2af04:	534f5452 	.word	0x534f5452
   2af08:	67615420 	.word	0x67615420
   2af0c:	61784520 	.word	0x61784520
   2af10:	656c706d 	.word	0x656c706d
   2af14:	0000000a 	.word	0x0000000a
   2af18:	20746f47 	.word	0x20746f47
   2af1c:	74747542 	.word	0x74747542
   2af20:	30206e6f 	.word	0x30206e6f
   2af24:	65725020 	.word	0x65725020
   2af28:	000a7373 	.word	0x000a7373
   2af2c:	20746f47 	.word	0x20746f47
   2af30:	74747542 	.word	0x74747542
   2af34:	31206e6f 	.word	0x31206e6f
   2af38:	65725020 	.word	0x65725020
   2af3c:	000a7373 	.word	0x000a7373
   2af40:	20746f47 	.word	0x20746f47
   2af44:	74747542 	.word	0x74747542
   2af48:	32206e6f 	.word	0x32206e6f
   2af4c:	65725020 	.word	0x65725020
   2af50:	000a7373 	.word	0x000a7373
   2af54:	6f6d654d 	.word	0x6f6d654d
   2af58:	70207972 	.word	0x70207972
   2af5c:	206c6f6f 	.word	0x206c6f6f
   2af60:	74207369 	.word	0x74207369
   2af64:	73206f6f 	.word	0x73206f6f
   2af68:	6c6c616d 	.word	0x6c6c616d
   2af6c:	20796220 	.word	0x20796220
   2af70:	0a0d6425 	.word	0x0a0d6425
   2af74:	00000000 	.word	0x00000000
   2af78:	69646152 	.word	0x69646152
   2af7c:	7361546f 	.word	0x7361546f
   2af80:	73203a6b 	.word	0x73203a6b
   2af84:	70757465 	.word	0x70757465
   2af88:	00000a0d 	.word	0x00000a0d
   2af8c:	72617453 	.word	0x72617453
   2af90:	676e6974 	.word	0x676e6974
   2af94:	63697720 	.word	0x63697720
   2af98:	72746e65 	.word	0x72746e65
   2af9c:	74206369 	.word	0x74206369
   2afa0:	65636172 	.word	0x65636172
   2afa4:	000a0a3a 	.word	0x000a0a3a
   2afa8:	6e6e7552 	.word	0x6e6e7552
   2afac:	20676e69 	.word	0x20676e69
   2afb0:	75746573 	.word	0x75746573
   2afb4:	61742070 	.word	0x61742070
   2afb8:	2e736b73 	.word	0x2e736b73
   2afbc:	0a0d2e2e 	.word	0x0a0d2e2e
   2afc0:	00000000 	.word	0x00000000
   2afc4:	69646152 	.word	0x69646152
   2afc8:	7361546f 	.word	0x7361546f
   2afcc:	0000006b 	.word	0x0000006b
   2afd0:	75746553 	.word	0x75746553
   2afd4:	00000070 	.word	0x00000070
   2afd8:	42667357 	.word	0x42667357
   2afdc:	6c416675 	.word	0x6c416675
   2afe0:	20636f6c 	.word	0x20636f6c
   2afe4:	6c696166 	.word	0x6c696166
   2afe8:	6c206465 	.word	0x6c206465
   2afec:	253a6e65 	.word	0x253a6e65
   2aff0:	00000075 	.word	0x00000075
   2aff4:	20465357 	.word	0x20465357
   2aff8:	656d6954 	.word	0x656d6954
   2affc:	00000072 	.word	0x00000072
   2b000:	58323025 	.word	0x58323025
   2b004:	00000020 	.word	0x00000020
   2b008:	0000000a 	.word	0x0000000a
   2b00c:	00000a0a 	.word	0x00000a0a
   2b010:	6573552f 	.word	0x6573552f
   2b014:	6e2f7372 	.word	0x6e2f7372
   2b018:	2f736d61 	.word	0x2f736d61
   2b01c:	69626d41 	.word	0x69626d41
   2b020:	69755371 	.word	0x69755371
   2b024:	742f6574 	.word	0x742f6574
   2b028:	64726968 	.word	0x64726968
   2b02c:	7261705f 	.word	0x7261705f
   2b030:	652f7974 	.word	0x652f7974
   2b034:	74636178 	.word	0x74636178
   2b038:	772f656c 	.word	0x772f656c
   2b03c:	732f6673 	.word	0x732f6673
   2b040:	6372756f 	.word	0x6372756f
   2b044:	702f7365 	.word	0x702f7365
   2b048:	2f74726f 	.word	0x2f74726f
   2b04c:	65657266 	.word	0x65657266
   2b050:	736f7472 	.word	0x736f7472
   2b054:	6673772f 	.word	0x6673772f
   2b058:	6172745f 	.word	0x6172745f
   2b05c:	632e6563 	.word	0x632e6563
   2b060:	00000000 	.word	0x00000000
   2b064:	63736564 	.word	0x63736564
   2b068:	74706972 	.word	0x74706972
   2b06c:	6620726f 	.word	0x6620726f
   2b070:	646e756f 	.word	0x646e756f
   2b074:	6e616820 	.word	0x6e616820
   2b078:	3a656c64 	.word	0x3a656c64
   2b07c:	78257830 	.word	0x78257830
   2b080:	00000000 	.word	0x00000000
   2b084:	72616863 	.word	0x72616863
   2b088:	65746361 	.word	0x65746361
   2b08c:	74736972 	.word	0x74736972
   2b090:	66206369 	.word	0x66206369
   2b094:	646e756f 	.word	0x646e756f
   2b098:	6e616820 	.word	0x6e616820
   2b09c:	3a656c64 	.word	0x3a656c64
   2b0a0:	78257830 	.word	0x78257830
   2b0a4:	00000000 	.word	0x00000000
   2b0a8:	61766e69 	.word	0x61766e69
   2b0ac:	2064696c 	.word	0x2064696c
   2b0b0:	646e6168 	.word	0x646e6168
   2b0b4:	303a656c 	.word	0x303a656c
   2b0b8:	00782578 	.word	0x00782578
   2b0bc:	78656e75 	.word	0x78656e75
   2b0c0:	74636570 	.word	0x74636570
   2b0c4:	63206465 	.word	0x63206465
   2b0c8:	626c6c61 	.word	0x626c6c61
   2b0cc:	206b6361 	.word	0x206b6361
   2b0d0:	6e657665 	.word	0x6e657665
   2b0d4:	64252074 	.word	0x64252074
   2b0d8:	00000000 	.word	0x00000000
   2b0dc:	6e756f66 	.word	0x6e756f66
   2b0e0:	65732064 	.word	0x65732064
   2b0e4:	63697672 	.word	0x63697672
   2b0e8:	74732065 	.word	0x74732065
   2b0ec:	48747261 	.word	0x48747261
   2b0f0:	303d6c64 	.word	0x303d6c64
   2b0f4:	20782578 	.word	0x20782578
   2b0f8:	48646e65 	.word	0x48646e65
   2b0fc:	303d6c64 	.word	0x303d6c64
   2b100:	00782578 	.word	0x00782578
   2b104:	2055544d 	.word	0x2055544d
   2b108:	20716572 	.word	0x20716572
   2b10c:	63736964 	.word	0x63736964
   2b110:	65647261 	.word	0x65647261
   2b114:	00000064 	.word	0x00000064
   2b118:	63747461 	.word	0x63747461
   2b11c:	6b6e7520 	.word	0x6b6e7520
   2b120:	6e776f6e 	.word	0x6e776f6e
   2b124:	63706f20 	.word	0x63706f20
   2b128:	2065646f 	.word	0x2065646f
   2b12c:	30257830 	.word	0x30257830
   2b130:	00007832 	.word	0x00007832
   2b134:	63747461 	.word	0x63747461
   2b138:	62636320 	.word	0x62636320
   2b13c:	746f6e20 	.word	0x746f6e20
   2b140:	206e6920 	.word	0x206e6920
   2b144:	3a657375 	.word	0x3a657375
   2b148:	00642520 	.word	0x00642520
   2b14c:	73747461 	.word	0x73747461
   2b150:	4d636343 	.word	0x4d636343
   2b154:	436e6961 	.word	0x436e6961
   2b158:	6b636162 	.word	0x6b636162
   2b15c:	6e6f6320 	.word	0x6e6f6320
   2b160:	3d64496e 	.word	0x3d64496e
   2b164:	68206425 	.word	0x68206425
   2b168:	6c646e61 	.word	0x6c646e61
   2b16c:	64253d65 	.word	0x64253d65
   2b170:	00000000 	.word	0x00000000
   2b174:	73747441 	.word	0x73747441
   2b178:	49636343 	.word	0x49636343
   2b17c:	5474696e 	.word	0x5474696e
   2b180:	656c6261 	.word	0x656c6261
   2b184:	6e6f6320 	.word	0x6e6f6320
   2b188:	3d64496e 	.word	0x3d64496e
   2b18c:	00006425 	.word	0x00006425
   2b190:	73747441 	.word	0x73747441
   2b194:	43636343 	.word	0x43636343
   2b198:	7261656c 	.word	0x7261656c
   2b19c:	6c626154 	.word	0x6c626154
   2b1a0:	6f632065 	.word	0x6f632065
   2b1a4:	64496e6e 	.word	0x64496e6e
   2b1a8:	0064253d 	.word	0x0064253d
   2b1ac:	61746144 	.word	0x61746144
   2b1b0:	65736162 	.word	0x65736162
   2b1b4:	73616820 	.word	0x73616820
   2b1b8:	61632068 	.word	0x61632068
   2b1bc:	6c75636c 	.word	0x6c75636c
   2b1c0:	6f697461 	.word	0x6f697461
   2b1c4:	6f63206e 	.word	0x6f63206e
   2b1c8:	656c706d 	.word	0x656c706d
   2b1cc:	00006574 	.word	0x00006574
   2b1d0:	636c6143 	.word	0x636c6143
   2b1d4:	74616c75 	.word	0x74616c75
   2b1d8:	20676e69 	.word	0x20676e69
   2b1dc:	61746164 	.word	0x61746164
   2b1e0:	65736162 	.word	0x65736162
   2b1e4:	73616820 	.word	0x73616820
   2b1e8:	00000068 	.word	0x00000068
   2b1ec:	6e6e6f43 	.word	0x6e6e6f43
   2b1f0:	25206449 	.word	0x25206449
   2b1f4:	68632064 	.word	0x68632064
   2b1f8:	65676e61 	.word	0x65676e61
   2b1fc:	61776120 	.word	0x61776120
   2b200:	73206572 	.word	0x73206572
   2b204:	65746174 	.word	0x65746174
   2b208:	20736920 	.word	0x20736920
   2b20c:	00006425 	.word	0x00006425
   2b210:	6e6e6f43 	.word	0x6e6e6f43
   2b214:	25206449 	.word	0x25206449
   2b218:	756f2064 	.word	0x756f2064
   2b21c:	666f2074 	.word	0x666f2074
   2b220:	6e797320 	.word	0x6e797320
   2b224:	50202c63 	.word	0x50202c63
   2b228:	77205544 	.word	0x77205544
   2b22c:	20687469 	.word	0x20687469
   2b230:	6f63706f 	.word	0x6f63706f
   2b234:	30206564 	.word	0x30206564
   2b238:	32302578 	.word	0x32302578
   2b23c:	67692078 	.word	0x67692078
   2b240:	65726f6e 	.word	0x65726f6e
   2b244:	00002164 	.word	0x00002164
   2b248:	6e6e6f63 	.word	0x6e6e6f63
   2b24c:	25206449 	.word	0x25206449
   2b250:	70752064 	.word	0x70752064
   2b254:	65746164 	.word	0x65746164
   2b258:	73632064 	.word	0x73632064
   2b25c:	6f742066 	.word	0x6f742066
   2b260:	25783020 	.word	0x25783020
   2b264:	00783230 	.word	0x00783230
   2b268:	73747461 	.word	0x73747461
   2b26c:	62636320 	.word	0x62636320
   2b270:	746f6e20 	.word	0x746f6e20
   2b274:	206e6920 	.word	0x206e6920
   2b278:	3a657375 	.word	0x3a657375
   2b27c:	00642520 	.word	0x00642520
   2b280:	203e3e3e 	.word	0x203e3e3e
   2b284:	65736552 	.word	0x65736552
   2b288:	6f632074 	.word	0x6f632074
   2b28c:	656c706d 	.word	0x656c706d
   2b290:	3c206574 	.word	0x3c206574
   2b294:	00003c3c 	.word	0x00003c3c
   2b298:	203e3e3e 	.word	0x203e3e3e
   2b29c:	65766441 	.word	0x65766441
   2b2a0:	73697472 	.word	0x73697472
   2b2a4:	20676e69 	.word	0x20676e69
   2b2a8:	72617473 	.word	0x72617473
   2b2ac:	20646574 	.word	0x20646574
   2b2b0:	003c3c3c 	.word	0x003c3c3c
   2b2b4:	203e3e3e 	.word	0x203e3e3e
   2b2b8:	65766441 	.word	0x65766441
   2b2bc:	73697472 	.word	0x73697472
   2b2c0:	20676e69 	.word	0x20676e69
   2b2c4:	706f7473 	.word	0x706f7473
   2b2c8:	20646570 	.word	0x20646570
   2b2cc:	003c3c3c 	.word	0x003c3c3c
   2b2d0:	203e3e3e 	.word	0x203e3e3e
   2b2d4:	6e616353 	.word	0x6e616353
   2b2d8:	676e696e 	.word	0x676e696e
   2b2dc:	61747320 	.word	0x61747320
   2b2e0:	64657472 	.word	0x64657472
   2b2e4:	3c3c3c20 	.word	0x3c3c3c20
   2b2e8:	00000000 	.word	0x00000000
   2b2ec:	203e3e3e 	.word	0x203e3e3e
   2b2f0:	6e616353 	.word	0x6e616353
   2b2f4:	676e696e 	.word	0x676e696e
   2b2f8:	6f747320 	.word	0x6f747320
   2b2fc:	64657070 	.word	0x64657070
   2b300:	3c3c3c20 	.word	0x3c3c3c20
   2b304:	00000000 	.word	0x00000000
   2b308:	203e3e3e 	.word	0x203e3e3e
   2b30c:	6e616353 	.word	0x6e616353
   2b310:	74616420 	.word	0x74616420
   2b314:	65722061 	.word	0x65722061
   2b318:	76696563 	.word	0x76696563
   2b31c:	66206465 	.word	0x66206465
   2b320:	206d6f72 	.word	0x206d6f72
   2b324:	72656570 	.word	0x72656570
   2b328:	3c3c3c20 	.word	0x3c3c3c20
   2b32c:	00000000 	.word	0x00000000
   2b330:	203e3e3e 	.word	0x203e3e3e
   2b334:	6e6e6f43 	.word	0x6e6e6f43
   2b338:	69746365 	.word	0x69746365
   2b33c:	6f206e6f 	.word	0x6f206e6f
   2b340:	656e6570 	.word	0x656e6570
   2b344:	3c3c2064 	.word	0x3c3c2064
   2b348:	0000003c 	.word	0x0000003c
   2b34c:	203e3e3e 	.word	0x203e3e3e
   2b350:	6e6e6f43 	.word	0x6e6e6f43
   2b354:	69746365 	.word	0x69746365
   2b358:	63206e6f 	.word	0x63206e6f
   2b35c:	65736f6c 	.word	0x65736f6c
   2b360:	3c3c2064 	.word	0x3c3c2064
   2b364:	0000003c 	.word	0x0000003c
   2b368:	203e3e3e 	.word	0x203e3e3e
   2b36c:	72696150 	.word	0x72696150
   2b370:	20676e69 	.word	0x20676e69
   2b374:	706d6f63 	.word	0x706d6f63
   2b378:	6574656c 	.word	0x6574656c
   2b37c:	75732064 	.word	0x75732064
   2b380:	73656363 	.word	0x73656363
   2b384:	6c756673 	.word	0x6c756673
   2b388:	3c20796c 	.word	0x3c20796c
   2b38c:	00003c3c 	.word	0x00003c3c
   2b390:	203e3e3e 	.word	0x203e3e3e
   2b394:	72696150 	.word	0x72696150
   2b398:	20676e69 	.word	0x20676e69
   2b39c:	6c696166 	.word	0x6c696166
   2b3a0:	3c206465 	.word	0x3c206465
   2b3a4:	00003c3c 	.word	0x00003c3c
   2b3a8:	203e3e3e 	.word	0x203e3e3e
   2b3ac:	6e6e6f43 	.word	0x6e6e6f43
   2b3b0:	69746365 	.word	0x69746365
   2b3b4:	65206e6f 	.word	0x65206e6f
   2b3b8:	7972636e 	.word	0x7972636e
   2b3bc:	64657470 	.word	0x64657470
   2b3c0:	3c3c3c20 	.word	0x3c3c3c20
   2b3c4:	00000000 	.word	0x00000000
   2b3c8:	203e3e3e 	.word	0x203e3e3e
   2b3cc:	72636e45 	.word	0x72636e45
   2b3d0:	69747079 	.word	0x69747079
   2b3d4:	66206e6f 	.word	0x66206e6f
   2b3d8:	656c6961 	.word	0x656c6961
   2b3dc:	3c3c2064 	.word	0x3c3c2064
   2b3e0:	0000003c 	.word	0x0000003c
   2b3e4:	203e3e3e 	.word	0x203e3e3e
   2b3e8:	6d6f7250 	.word	0x6d6f7250
   2b3ec:	75207470 	.word	0x75207470
   2b3f0:	20726573 	.word	0x20726573
   2b3f4:	65206f74 	.word	0x65206f74
   2b3f8:	7265746e 	.word	0x7265746e
   2b3fc:	73617020 	.word	0x73617020
   2b400:	79656b73 	.word	0x79656b73
   2b404:	3c3c3c20 	.word	0x3c3c3c20
   2b408:	00000000 	.word	0x00000000
   2b40c:	203e3e3e 	.word	0x203e3e3e
   2b410:	636e6143 	.word	0x636e6143
   2b414:	61206c65 	.word	0x61206c65
   2b418:	776f6c20 	.word	0x776f6c20
   2b41c:	20726f20 	.word	0x20726f20
   2b420:	68676968 	.word	0x68676968
   2b424:	656c6120 	.word	0x656c6120
   2b428:	3c207472 	.word	0x3c207472
   2b42c:	00003c3c 	.word	0x00003c3c
   2b430:	203e3e3e 	.word	0x203e3e3e
   2b434:	20776f4c 	.word	0x20776f4c
   2b438:	72656c61 	.word	0x72656c61
   2b43c:	3c3c2074 	.word	0x3c3c2074
   2b440:	0000003c 	.word	0x0000003c
   2b444:	203e3e3e 	.word	0x203e3e3e
   2b448:	68676948 	.word	0x68676948
   2b44c:	656c6120 	.word	0x656c6120
   2b450:	3c207472 	.word	0x3c207472
   2b454:	00003c3c 	.word	0x00003c3c
   2b458:	203e3e3e 	.word	0x203e3e3e
   2b45c:	65766441 	.word	0x65766441
   2b460:	73697472 	.word	0x73697472
   2b464:	20676e69 	.word	0x20676e69
   2b468:	73746573 	.word	0x73746573
   2b46c:	61747320 	.word	0x61747320
   2b470:	64657472 	.word	0x64657472
   2b474:	3c3c3c20 	.word	0x3c3c3c20
   2b478:	00000000 	.word	0x00000000
   2b47c:	203e3e3e 	.word	0x203e3e3e
   2b480:	65766441 	.word	0x65766441
   2b484:	73697472 	.word	0x73697472
   2b488:	20676e69 	.word	0x20676e69
   2b48c:	73746573 	.word	0x73746573
   2b490:	6f747320 	.word	0x6f747320
   2b494:	64657070 	.word	0x64657070
   2b498:	3c3c3c20 	.word	0x3c3c3c20
   2b49c:	00000000 	.word	0x00000000
   2b4a0:	203e3e3e 	.word	0x203e3e3e
   2b4a4:	6e616353 	.word	0x6e616353
   2b4a8:	71657220 	.word	0x71657220
   2b4ac:	74736575 	.word	0x74736575
   2b4b0:	63657220 	.word	0x63657220
   2b4b4:	65766965 	.word	0x65766965
   2b4b8:	3c3c2064 	.word	0x3c3c2064
   2b4bc:	0000003c 	.word	0x0000003c
   2b4c0:	203e3e3e 	.word	0x203e3e3e
   2b4c4:	65747845 	.word	0x65747845
   2b4c8:	6465646e 	.word	0x6465646e
   2b4cc:	61637320 	.word	0x61637320
   2b4d0:	6e696e6e 	.word	0x6e696e6e
   2b4d4:	74732067 	.word	0x74732067
   2b4d8:	65747261 	.word	0x65747261
   2b4dc:	3c3c2064 	.word	0x3c3c2064
   2b4e0:	0000003c 	.word	0x0000003c
   2b4e4:	203e3e3e 	.word	0x203e3e3e
   2b4e8:	65747845 	.word	0x65747845
   2b4ec:	6465646e 	.word	0x6465646e
   2b4f0:	61637320 	.word	0x61637320
   2b4f4:	6e696e6e 	.word	0x6e696e6e
   2b4f8:	74732067 	.word	0x74732067
   2b4fc:	6570706f 	.word	0x6570706f
   2b500:	3c3c2064 	.word	0x3c3c2064
   2b504:	0000003c 	.word	0x0000003c
   2b508:	203e3e3e 	.word	0x203e3e3e
   2b50c:	69726550 	.word	0x69726550
   2b510:	6369646f 	.word	0x6369646f
   2b514:	76646120 	.word	0x76646120
   2b518:	69747265 	.word	0x69747265
   2b51c:	676e6973 	.word	0x676e6973
   2b520:	74657320 	.word	0x74657320
   2b524:	61747320 	.word	0x61747320
   2b528:	64657472 	.word	0x64657472
   2b52c:	3c3c3c20 	.word	0x3c3c3c20
   2b530:	00000000 	.word	0x00000000
   2b534:	203e3e3e 	.word	0x203e3e3e
   2b538:	69726550 	.word	0x69726550
   2b53c:	6369646f 	.word	0x6369646f
   2b540:	76646120 	.word	0x76646120
   2b544:	69747265 	.word	0x69747265
   2b548:	676e6973 	.word	0x676e6973
   2b54c:	74657320 	.word	0x74657320
   2b550:	6f747320 	.word	0x6f747320
   2b554:	64657070 	.word	0x64657070
   2b558:	3c3c3c20 	.word	0x3c3c3c20
   2b55c:	00000000 	.word	0x00000000
   2b560:	203e3e3e 	.word	0x203e3e3e
   2b564:	69726550 	.word	0x69726550
   2b568:	6369646f 	.word	0x6369646f
   2b56c:	76646120 	.word	0x76646120
   2b570:	69747265 	.word	0x69747265
   2b574:	676e6973 	.word	0x676e6973
   2b578:	6e797320 	.word	0x6e797320
   2b57c:	73652063 	.word	0x73652063
   2b580:	6c626174 	.word	0x6c626174
   2b584:	65687369 	.word	0x65687369
   2b588:	3c3c2064 	.word	0x3c3c2064
   2b58c:	0000003c 	.word	0x0000003c
   2b590:	203e3e3e 	.word	0x203e3e3e
   2b594:	69726550 	.word	0x69726550
   2b598:	6369646f 	.word	0x6369646f
   2b59c:	76646120 	.word	0x76646120
   2b5a0:	69747265 	.word	0x69747265
   2b5a4:	676e6973 	.word	0x676e6973
   2b5a8:	6e797320 	.word	0x6e797320
   2b5ac:	6f6c2063 	.word	0x6f6c2063
   2b5b0:	3c207473 	.word	0x3c207473
   2b5b4:	00003c3c 	.word	0x00003c3c
   2b5b8:	203e3e3e 	.word	0x203e3e3e
   2b5bc:	73736150 	.word	0x73736150
   2b5c0:	3a79656b 	.word	0x3a79656b
   2b5c4:	20642520 	.word	0x20642520
   2b5c8:	003c3c3c 	.word	0x003c3c3c
   2b5cc:	203e3e3e 	.word	0x203e3e3e
   2b5d0:	666e6f43 	.word	0x666e6f43
   2b5d4:	206d7269 	.word	0x206d7269
   2b5d8:	756c6156 	.word	0x756c6156
   2b5dc:	25203a65 	.word	0x25203a65
   2b5e0:	3c3c2064 	.word	0x3c3c2064
   2b5e4:	0000003c 	.word	0x0000003c
   2b5e8:	203e3e3e 	.word	0x203e3e3e
   2b5ec:	49535352 	.word	0x49535352
   2b5f0:	6425203a 	.word	0x6425203a
   2b5f4:	6d426420 	.word	0x6d426420
   2b5f8:	3c3c3c20 	.word	0x3c3c3c20
   2b5fc:	00000000 	.word	0x00000000
   2b600:	4f525245 	.word	0x4f525245
   2b604:	48435f52 	.word	0x48435f52
   2b608:	5f4b4345 	.word	0x5f4b4345
   2b60c:	44494f56 	.word	0x44494f56
   2b610:	5f6d6120 	.word	0x5f6d6120
   2b614:	5f6c6168 	.word	0x5f6c6168
   2b618:	5f656c62 	.word	0x5f656c62
   2b61c:	74696e69 	.word	0x74696e69
   2b620:	696c6169 	.word	0x696c6169
   2b624:	3028657a 	.word	0x3028657a
   2b628:	4226202c 	.word	0x4226202c
   2b62c:	0a29454c 	.word	0x0a29454c
   2b630:	00000000 	.word	0x00000000
   2b634:	4f525245 	.word	0x4f525245
   2b638:	48435f52 	.word	0x48435f52
   2b63c:	5f4b4345 	.word	0x5f4b4345
   2b640:	44494f56 	.word	0x44494f56
   2b644:	5f6d6120 	.word	0x5f6d6120
   2b648:	5f6c6168 	.word	0x5f6c6168
   2b64c:	5f656c62 	.word	0x5f656c62
   2b650:	65776f70 	.word	0x65776f70
   2b654:	6f635f72 	.word	0x6f635f72
   2b658:	6f72746e 	.word	0x6f72746e
   2b65c:	4c42286c 	.word	0x4c42286c
   2b660:	41202c45 	.word	0x41202c45
   2b664:	41485f4d 	.word	0x41485f4d
   2b668:	4c425f4c 	.word	0x4c425f4c
   2b66c:	4f505f45 	.word	0x4f505f45
   2b670:	5f524557 	.word	0x5f524557
   2b674:	49544341 	.word	0x49544341
   2b678:	0a294556 	.word	0x0a294556
   2b67c:	00000000 	.word	0x00000000
   2b680:	4f525245 	.word	0x4f525245
   2b684:	48435f52 	.word	0x48435f52
   2b688:	5f4b4345 	.word	0x5f4b4345
   2b68c:	44494f56 	.word	0x44494f56
   2b690:	5f6d6120 	.word	0x5f6d6120
   2b694:	5f6c6168 	.word	0x5f6c6168
   2b698:	5f656c62 	.word	0x5f656c62
   2b69c:	666e6f63 	.word	0x666e6f63
   2b6a0:	42286769 	.word	0x42286769
   2b6a4:	202c454c 	.word	0x202c454c
   2b6a8:	6c427326 	.word	0x6c427326
   2b6ac:	6e6f4365 	.word	0x6e6f4365
   2b6b0:	29676966 	.word	0x29676966
   2b6b4:	0000000a 	.word	0x0000000a
   2b6b8:	4f525245 	.word	0x4f525245
   2b6bc:	48435f52 	.word	0x48435f52
   2b6c0:	5f4b4345 	.word	0x5f4b4345
   2b6c4:	44494f56 	.word	0x44494f56
   2b6c8:	5f6d6120 	.word	0x5f6d6120
   2b6cc:	5f6c6168 	.word	0x5f6c6168
   2b6d0:	5f656c62 	.word	0x5f656c62
   2b6d4:	65776f70 	.word	0x65776f70
   2b6d8:	6f635f72 	.word	0x6f635f72
   2b6dc:	6f72746e 	.word	0x6f72746e
   2b6e0:	4c42286c 	.word	0x4c42286c
   2b6e4:	41202c45 	.word	0x41202c45
   2b6e8:	41485f4d 	.word	0x41485f4d
   2b6ec:	4c425f4c 	.word	0x4c425f4c
   2b6f0:	4f505f45 	.word	0x4f505f45
   2b6f4:	5f524557 	.word	0x5f524557
   2b6f8:	2946464f 	.word	0x2946464f
   2b6fc:	0000000a 	.word	0x0000000a
   2b700:	4f525245 	.word	0x4f525245
   2b704:	48435f52 	.word	0x48435f52
   2b708:	5f4b4345 	.word	0x5f4b4345
   2b70c:	44494f56 	.word	0x44494f56
   2b710:	5f6d6120 	.word	0x5f6d6120
   2b714:	5f6c6168 	.word	0x5f6c6168
   2b718:	5f656c62 	.word	0x5f656c62
   2b71c:	6e696564 	.word	0x6e696564
   2b720:	61697469 	.word	0x61697469
   2b724:	657a696c 	.word	0x657a696c
   2b728:	454c4228 	.word	0x454c4228
   2b72c:	00000a29 	.word	0x00000a29
   2b730:	00000004 	.word	0x00000004
   2b734:	00000020 	.word	0x00000020
   2b738:	00000020 	.word	0x00000020
   2b73c:	00000002 	.word	0x00000002
   2b740:	00000000 	.word	0x00000000
   2b744:	00000032 	.word	0x00000032
   2b748:	00010101 	.word	0x00010101
   2b74c:	4f525245 	.word	0x4f525245
   2b750:	48435f52 	.word	0x48435f52
   2b754:	5f4b4345 	.word	0x5f4b4345
   2b758:	44494f56 	.word	0x44494f56
   2b75c:	49434820 	.word	0x49434820
   2b760:	5652445f 	.word	0x5652445f
   2b764:	5f58525f 	.word	0x5f58525f
   2b768:	4b434150 	.word	0x4b434150
   2b76c:	545f5445 	.word	0x545f5445
   2b770:	4c5f4f4f 	.word	0x4c5f4f4f
   2b774:	45475241 	.word	0x45475241
   2b778:	0000000a 	.word	0x0000000a
   2b77c:	64416d64 	.word	0x64416d64
   2b780:	74634176 	.word	0x74634176
   2b784:	666e6f43 	.word	0x666e6f43
   2b788:	203a6769 	.word	0x203a6769
   2b78c:	74617473 	.word	0x74617473
   2b790:	25203a65 	.word	0x25203a65
   2b794:	00000064 	.word	0x00000064
   2b798:	64416d44 	.word	0x64416d44
   2b79c:	6e6f4376 	.word	0x6e6f4376
   2b7a0:	20676966 	.word	0x20676966
   2b7a4:	69727564 	.word	0x69727564
   2b7a8:	6420676e 	.word	0x6420676e
   2b7ac:	63657269 	.word	0x63657269
   2b7b0:	20646574 	.word	0x20646574
   2b7b4:	65766461 	.word	0x65766461
   2b7b8:	73697472 	.word	0x73697472
   2b7bc:	21676e69 	.word	0x21676e69
   2b7c0:	00000000 	.word	0x00000000
   2b7c4:	64416d64 	.word	0x64416d64
   2b7c8:	74634176 	.word	0x74634176
   2b7cc:	44746553 	.word	0x44746553
   2b7d0:	3a617461 	.word	0x3a617461
   2b7d4:	61747320 	.word	0x61747320
   2b7d8:	203a6574 	.word	0x203a6574
   2b7dc:	00006425 	.word	0x00006425
   2b7e0:	64416d64 	.word	0x64416d64
   2b7e4:	74634176 	.word	0x74634176
   2b7e8:	72617453 	.word	0x72617453
   2b7ec:	73203a74 	.word	0x73203a74
   2b7f0:	65746174 	.word	0x65746174
   2b7f4:	6425203a 	.word	0x6425203a
   2b7f8:	00000000 	.word	0x00000000
   2b7fc:	64416d64 	.word	0x64416d64
   2b800:	74634176 	.word	0x74634176
   2b804:	72617453 	.word	0x72617453
   2b808:	75642074 	.word	0x75642074
   2b80c:	676e6972 	.word	0x676e6972
   2b810:	72696420 	.word	0x72696420
   2b814:	65746365 	.word	0x65746365
   2b818:	64612064 	.word	0x64612064
   2b81c:	74726576 	.word	0x74726576
   2b820:	6e697369 	.word	0x6e697369
   2b824:	00002167 	.word	0x00002167
   2b828:	64416d64 	.word	0x64416d64
   2b82c:	74634176 	.word	0x74634176
   2b830:	706f7453 	.word	0x706f7453
   2b834:	7473203a 	.word	0x7473203a
   2b838:	3a657461 	.word	0x3a657461
   2b83c:	00642520 	.word	0x00642520
   2b840:	64416d44 	.word	0x64416d44
   2b844:	6f745376 	.word	0x6f745376
   2b848:	75642070 	.word	0x75642070
   2b84c:	676e6972 	.word	0x676e6972
   2b850:	72696420 	.word	0x72696420
   2b854:	65746365 	.word	0x65746365
   2b858:	64612064 	.word	0x64612064
   2b85c:	74726576 	.word	0x74726576
   2b860:	6e697369 	.word	0x6e697369
   2b864:	00002167 	.word	0x00002167
   2b868:	64416d64 	.word	0x64416d64
   2b86c:	74634176 	.word	0x74634176
   2b870:	656d6954 	.word	0x656d6954
   2b874:	2174756f 	.word	0x2174756f
   2b878:	00000000 	.word	0x00000000
   2b87c:	5f494348 	.word	0x5f494348
   2b880:	415f454c 	.word	0x415f454c
   2b884:	455f5644 	.word	0x455f5644
   2b888:	4c42414e 	.word	0x4c42414e
   2b88c:	4d435f45 	.word	0x4d435f45
   2b890:	4d435f44 	.word	0x4d435f44
   2b894:	435f4c50 	.word	0x435f4c50
   2b898:	4b434142 	.word	0x4b434142
   2b89c:	5456455f 	.word	0x5456455f
   2b8a0:	7473203a 	.word	0x7473203a
   2b8a4:	3a657461 	.word	0x3a657461
   2b8a8:	00642520 	.word	0x00642520
   2b8ac:	64416d64 	.word	0x64416d64
   2b8b0:	61745376 	.word	0x61745376
   2b8b4:	69447472 	.word	0x69447472
   2b8b8:	74636572 	.word	0x74636572
   2b8bc:	203a6465 	.word	0x203a6465
   2b8c0:	74617473 	.word	0x74617473
   2b8c4:	25203a65 	.word	0x25203a65
   2b8c8:	00000064 	.word	0x00000064
   2b8cc:	64416d64 	.word	0x64416d64
   2b8d0:	6f745376 	.word	0x6f745376
   2b8d4:	72694470 	.word	0x72694470
   2b8d8:	65746365 	.word	0x65746365
   2b8dc:	73203a64 	.word	0x73203a64
   2b8e0:	65746174 	.word	0x65746174
   2b8e4:	6425203a 	.word	0x6425203a
   2b8e8:	00000000 	.word	0x00000000
   2b8ec:	64416d64 	.word	0x64416d64
   2b8f0:	6e6f4376 	.word	0x6e6f4376
   2b8f4:	7463656e 	.word	0x7463656e
   2b8f8:	203a6465 	.word	0x203a6465
   2b8fc:	74617473 	.word	0x74617473
   2b900:	25203a65 	.word	0x25203a65
   2b904:	00000064 	.word	0x00000064
   2b908:	64416d64 	.word	0x64416d64
   2b90c:	6e6f4376 	.word	0x6e6f4376
   2b910:	7463656e 	.word	0x7463656e
   2b914:	6c696146 	.word	0x6c696146
   2b918:	203a6465 	.word	0x203a6465
   2b91c:	74617473 	.word	0x74617473
   2b920:	25203a65 	.word	0x25203a65
   2b924:	00000064 	.word	0x00000064
   2b928:	6f436d64 	.word	0x6f436d64
   2b92c:	6d436e6e 	.word	0x6d436e6e
   2b930:	74536c70 	.word	0x74536c70
   2b934:	73657461 	.word	0x73657461
   2b938:	00642520 	.word	0x00642520
   2b93c:	6f436d64 	.word	0x6f436d64
   2b940:	63436e6e 	.word	0x63436e6e
   2b944:	6c6c4162 	.word	0x6c6c4162
   2b948:	2520636f 	.word	0x2520636f
   2b94c:	00000064 	.word	0x00000064
   2b950:	6f436d64 	.word	0x6f436d64
   2b954:	63436e6e 	.word	0x63436e6e
   2b958:	6c6c4162 	.word	0x6c6c4162
   2b95c:	6620636f 	.word	0x6620636f
   2b960:	656c6961 	.word	0x656c6961
   2b964:	00000064 	.word	0x00000064
   2b968:	6f436d64 	.word	0x6f436d64
   2b96c:	63436e6e 	.word	0x63436e6e
   2b970:	61654462 	.word	0x61654462
   2b974:	636f6c6c 	.word	0x636f6c6c
   2b978:	00642520 	.word	0x00642520
   2b97c:	6f436d64 	.word	0x6f436d64
   2b980:	63436e6e 	.word	0x63436e6e
   2b984:	48794262 	.word	0x48794262
   2b988:	6c646e61 	.word	0x6c646e61
   2b98c:	6f6e2065 	.word	0x6f6e2065
   2b990:	6f662074 	.word	0x6f662074
   2b994:	20646e75 	.word	0x20646e75
   2b998:	30257830 	.word	0x30257830
   2b99c:	00007834 	.word	0x00007834
   2b9a0:	6f436d64 	.word	0x6f436d64
   2b9a4:	64496e6e 	.word	0x64496e6e
   2b9a8:	64427942 	.word	0x64427942
   2b9ac:	72646441 	.word	0x72646441
   2b9b0:	746f6e20 	.word	0x746f6e20
   2b9b4:	756f6620 	.word	0x756f6620
   2b9b8:	0000646e 	.word	0x0000646e
   2b9bc:	6f436d44 	.word	0x6f436d44
   2b9c0:	64496e6e 	.word	0x64496e6e
   2b9c4:	61487942 	.word	0x61487942
   2b9c8:	656c646e 	.word	0x656c646e
   2b9cc:	746f6e20 	.word	0x746f6e20
   2b9d0:	756f6620 	.word	0x756f6620
   2b9d4:	3020646e 	.word	0x3020646e
   2b9d8:	34302578 	.word	0x34302578
   2b9dc:	00000078 	.word	0x00000078
   2b9e0:	6e6e6f63 	.word	0x6e6e6f63
   2b9e4:	253d6449 	.word	0x253d6449
   2b9e8:	64692064 	.word	0x64692064
   2b9ec:	614d656c 	.word	0x614d656c
   2b9f0:	303d6b73 	.word	0x303d6b73
   2b9f4:	34302578 	.word	0x34302578
   2b9f8:	00000078 	.word	0x00000078
   2b9fc:	6f436d64 	.word	0x6f436d64
   2ba00:	6d536e6e 	.word	0x6d536e6e
   2ba04:	63657845 	.word	0x63657845
   2ba08:	20657475 	.word	0x20657475
   2ba0c:	6e657665 	.word	0x6e657665
   2ba10:	64253d74 	.word	0x64253d74
   2ba14:	61747320 	.word	0x61747320
   2ba18:	253d6574 	.word	0x253d6574
   2ba1c:	00000064 	.word	0x00000064
   2ba20:	65446d64 	.word	0x65446d64
   2ba24:	73615076 	.word	0x73615076
   2ba28:	74764573 	.word	0x74764573
   2ba2c:	65446f54 	.word	0x65446f54
   2ba30:	69725076 	.word	0x69725076
   2ba34:	65203a76 	.word	0x65203a76
   2ba38:	746e6576 	.word	0x746e6576
   2ba3c:	6425203a 	.word	0x6425203a
   2ba40:	6170202c 	.word	0x6170202c
   2ba44:	3a6d6172 	.word	0x3a6d6172
   2ba48:	2c642520 	.word	0x2c642520
   2ba4c:	76646120 	.word	0x76646120
   2ba50:	646e6148 	.word	0x646e6148
   2ba54:	203a656c 	.word	0x203a656c
   2ba58:	00006425 	.word	0x00006425
   2ba5c:	746e6543 	.word	0x746e6543
   2ba60:	206c6172 	.word	0x206c6172
   2ba64:	72646461 	.word	0x72646461
   2ba68:	20737365 	.word	0x20737365
   2ba6c:	6f736572 	.word	0x6f736572
   2ba70:	6974756c 	.word	0x6974756c
   2ba74:	203a6e6f 	.word	0x203a6e6f
   2ba78:	00006425 	.word	0x00006425
   2ba7c:	72635370 	.word	0x72635370
   2ba80:	726c6120 	.word	0x726c6120
   2ba84:	79646165 	.word	0x79646165
   2ba88:	6c6c6120 	.word	0x6c6c6120
   2ba8c:	7461636f 	.word	0x7461636f
   2ba90:	00006465 	.word	0x00006465
   2ba94:	646e6152 	.word	0x646e6152
   2ba98:	00624e20 	.word	0x00624e20
   2ba9c:	434e574a 	.word	0x434e574a
   2baa0:	6e6f4320 	.word	0x6e6f4320
   2baa4:	6d726966 	.word	0x6d726966
   2baa8:	00000000 	.word	0x00000000
   2baac:	00696243 	.word	0x00696243
   2bab0:	00006143 	.word	0x00006143
   2bab4:	50206143 	.word	0x50206143
   2bab8:	00726565 	.word	0x00726565
   2babc:	654b4844 	.word	0x654b4844
   2bac0:	62452079 	.word	0x62452079
   2bac4:	00000000 	.word	0x00000000
   2bac8:	53706d73 	.word	0x53706d73
   2bacc:	4b646e65 	.word	0x4b646e65
   2bad0:	75207965 	.word	0x75207965
   2bad4:	7078656e 	.word	0x7078656e
   2bad8:	65746365 	.word	0x65746365
   2badc:	74732064 	.word	0x74732064
   2bae0:	20657461 	.word	0x20657461
   2bae4:	4479656b 	.word	0x4479656b
   2bae8:	3a747369 	.word	0x3a747369
   2baec:	6c206425 	.word	0x6c206425
   2baf0:	53747361 	.word	0x53747361
   2baf4:	4b746e65 	.word	0x4b746e65
   2baf8:	253a7965 	.word	0x253a7965
   2bafc:	00000064 	.word	0x00000064
   2bb00:	53706d73 	.word	0x53706d73
   2bb04:	6578456d 	.word	0x6578456d
   2bb08:	65747563 	.word	0x65747563
   2bb0c:	65766520 	.word	0x65766520
   2bb10:	253d746e 	.word	0x253d746e
   2bb14:	74732064 	.word	0x74732064
   2bb18:	3d657461 	.word	0x3d657461
   2bb1c:	00006425 	.word	0x00006425
   2bb20:	44706d73 	.word	0x44706d73
   2bb24:	64644162 	.word	0x64644162
   2bb28:	69766544 	.word	0x69766544
   2bb2c:	00006563 	.word	0x00006563
   2bb30:	44706d73 	.word	0x44706d73
   2bb34:	74654762 	.word	0x74654762
   2bb38:	6f636552 	.word	0x6f636552
   2bb3c:	203a6472 	.word	0x203a6472
   2bb40:	6e6e6f63 	.word	0x6e6e6f63
   2bb44:	203a6449 	.word	0x203a6449
   2bb48:	74206425 	.word	0x74206425
   2bb4c:	3a657079 	.word	0x3a657079
   2bb50:	00642520 	.word	0x00642520
   2bb54:	44706d73 	.word	0x44706d73
   2bb58:	74654762 	.word	0x74654762
   2bb5c:	6f636552 	.word	0x6f636552
   2bb60:	203a6472 	.word	0x203a6472
   2bb64:	6d6d6f63 	.word	0x6d6d6f63
   2bb68:	72206e6f 	.word	0x72206e6f
   2bb6c:	726f6365 	.word	0x726f6365
   2bb70:	00000064 	.word	0x00000064
   2bb74:	44706d53 	.word	0x44706d53
   2bb78:	74654762 	.word	0x74654762
   2bb7c:	72696150 	.word	0x72696150
   2bb80:	44676e69 	.word	0x44676e69
   2bb84:	62617369 	.word	0x62617369
   2bb88:	5464656c 	.word	0x5464656c
   2bb8c:	3a656d69 	.word	0x3a656d69
   2bb90:	6e6f6320 	.word	0x6e6f6320
   2bb94:	3a64496e 	.word	0x3a64496e
   2bb98:	20642520 	.word	0x20642520
   2bb9c:	69726570 	.word	0x69726570
   2bba0:	203a646f 	.word	0x203a646f
   2bba4:	61206425 	.word	0x61206425
   2bba8:	6d657474 	.word	0x6d657474
   2bbac:	754d7470 	.word	0x754d7470
   2bbb0:	203a746c 	.word	0x203a746c
   2bbb4:	00006425 	.word	0x00006425
   2bbb8:	44706d53 	.word	0x44706d53
   2bbbc:	74655362 	.word	0x74655362
   2bbc0:	6c696146 	.word	0x6c696146
   2bbc4:	43657275 	.word	0x43657275
   2bbc8:	746e756f 	.word	0x746e756f
   2bbcc:	6f63203a 	.word	0x6f63203a
   2bbd0:	64496e6e 	.word	0x64496e6e
   2bbd4:	6425203a 	.word	0x6425203a
   2bbd8:	756f6320 	.word	0x756f6320
   2bbdc:	203a746e 	.word	0x203a746e
   2bbe0:	00006425 	.word	0x00006425
   2bbe4:	44706d53 	.word	0x44706d53
   2bbe8:	74654762 	.word	0x74654762
   2bbec:	6c696146 	.word	0x6c696146
   2bbf0:	43657275 	.word	0x43657275
   2bbf4:	746e756f 	.word	0x746e756f
   2bbf8:	6f63203a 	.word	0x6f63203a
   2bbfc:	64496e6e 	.word	0x64496e6e
   2bc00:	6425203a 	.word	0x6425203a
   2bc04:	756f6320 	.word	0x756f6320
   2bc08:	203a746e 	.word	0x203a746e
   2bc0c:	00006425 	.word	0x00006425
   2bc10:	44706d53 	.word	0x44706d53
   2bc14:	78614d62 	.word	0x78614d62
   2bc18:	65747441 	.word	0x65747441
   2bc1c:	5274706d 	.word	0x5274706d
   2bc20:	68636165 	.word	0x68636165
   2bc24:	203a6465 	.word	0x203a6465
   2bc28:	6e6e6f63 	.word	0x6e6e6f63
   2bc2c:	203a6449 	.word	0x203a6449
   2bc30:	00006425 	.word	0x00006425
   2bc34:	44706d53 	.word	0x44706d53
   2bc38:	69615062 	.word	0x69615062
   2bc3c:	676e6972 	.word	0x676e6972
   2bc40:	6c696146 	.word	0x6c696146
   2bc44:	203a6465 	.word	0x203a6465
   2bc48:	6e6e6f63 	.word	0x6e6e6f63
   2bc4c:	203a6449 	.word	0x203a6449
   2bc50:	00006425 	.word	0x00006425
   2bc54:	78656e75 	.word	0x78656e75
   2bc58:	74636570 	.word	0x74636570
   2bc5c:	70206465 	.word	0x70206465
   2bc60:	656b6361 	.word	0x656b6361
   2bc64:	6d632074 	.word	0x6d632074
   2bc68:	64253a64 	.word	0x64253a64
   2bc6c:	6e656c20 	.word	0x6e656c20
   2bc70:	2c64253a 	.word	0x2c64253a
   2bc74:	70786520 	.word	0x70786520
   2bc78:	65746365 	.word	0x65746365
   2bc7c:	64253a64 	.word	0x64253a64
   2bc80:	00000000 	.word	0x00000000
   2bc84:	53706d73 	.word	0x53706d73
   2bc88:	50646e65 	.word	0x50646e65
   2bc8c:	7020746b 	.word	0x7020746b
   2bc90:	656b6361 	.word	0x656b6361
   2bc94:	69642074 	.word	0x69642074
   2bc98:	72616373 	.word	0x72616373
   2bc9c:	20646564 	.word	0x20646564
   2bca0:	3a646d63 	.word	0x3a646d63
   2bca4:	00006425 	.word	0x00006425
   2bca8:	20534541 	.word	0x20534541
   2bcac:	656b6f74 	.word	0x656b6f74
   2bcb0:	696d206e 	.word	0x696d206e
   2bcb4:	74616d73 	.word	0x74616d73
   2bcb8:	203a6863 	.word	0x203a6863
   2bcbc:	25206425 	.word	0x25206425
   2bcc0:	00000064 	.word	0x00000064
   2bcc4:	50203446 	.word	0x50203446
   2bcc8:	0000624b 	.word	0x0000624b
   2bccc:	50203446 	.word	0x50203446
   2bcd0:	0000614b 	.word	0x0000614b
   2bcd4:	4e203446 	.word	0x4e203446
   2bcd8:	00000062 	.word	0x00000062
   2bcdc:	434e574a 	.word	0x434e574a
   2bce0:	73694420 	.word	0x73694420
   2bce4:	79616c70 	.word	0x79616c70
   2bce8:	666e4320 	.word	0x666e4320
   2bcec:	00000000 	.word	0x00000000
   2bcf0:	654b4844 	.word	0x654b4844
   2bcf4:	53282079 	.word	0x53282079
   2bcf8:	65726168 	.word	0x65726168
   2bcfc:	65532064 	.word	0x65532064
   2bd00:	74657263 	.word	0x74657263
   2bd04:	00000029 	.word	0x00000029
   2bd08:	9183886c 	.word	0x9183886c
   2bd0c:	38a5f5aa 	.word	0x38a5f5aa
   2bd10:	db0b3760 	.word	0xdb0b3760
   2bd14:	be83605a 	.word	0xbe83605a
   2bd18:	00000054 	.word	0x00000054
   2bd1c:	0043414d 	.word	0x0043414d
   2bd20:	004b544c 	.word	0x004b544c
   2bd24:	654b4844 	.word	0x654b4844
   2bd28:	61452079 	.word	0x61452079
   2bd2c:	00000000 	.word	0x00000000
   2bd30:	20424f4f 	.word	0x20424f4f
   2bd34:	72656550 	.word	0x72656550
   2bd38:	6e6f4320 	.word	0x6e6f4320
   2bd3c:	6d726966 	.word	0x6d726966
   2bd40:	00000000 	.word	0x00000000
   2bd44:	20424f4f 	.word	0x20424f4f
   2bd48:	72656550 	.word	0x72656550
   2bd4c:	6e615220 	.word	0x6e615220
   2bd50:	006d6f64 	.word	0x006d6f64
   2bd54:	20424f4f 	.word	0x20424f4f
   2bd58:	61636f4c 	.word	0x61636f4c
   2bd5c:	6f43206c 	.word	0x6f43206c
   2bd60:	7269666e 	.word	0x7269666e
   2bd64:	0000006d 	.word	0x0000006d
   2bd68:	20424f4f 	.word	0x20424f4f
   2bd6c:	61636f4c 	.word	0x61636f4c
   2bd70:	6152206c 	.word	0x6152206c
   2bd74:	6d6f646e 	.word	0x6d6f646e
   2bd78:	00000000 	.word	0x00000000
   2bd7c:	53706d53 	.word	0x53706d53
   2bd80:	74654763 	.word	0x74654763
   2bd84:	636e6143 	.word	0x636e6143
   2bd88:	734d6c65 	.word	0x734d6c65
   2bd8c:	74695767 	.word	0x74695767
   2bd90:	61655268 	.word	0x61655268
   2bd94:	6d657474 	.word	0x6d657474
   2bd98:	203a7470 	.word	0x203a7470
   2bd9c:	00006425 	.word	0x00006425
   2bda0:	5f495041 	.word	0x5f495041
   2bda4:	52494150 	.word	0x52494150
   2bda8:	5145525f 	.word	0x5145525f
   2bdac:	00000000 	.word	0x00000000
   2bdb0:	5f495041 	.word	0x5f495041
   2bdb4:	52494150 	.word	0x52494150
   2bdb8:	5053525f 	.word	0x5053525f
   2bdbc:	00000000 	.word	0x00000000
   2bdc0:	5f495041 	.word	0x5f495041
   2bdc4:	434e4143 	.word	0x434e4143
   2bdc8:	525f4c45 	.word	0x525f4c45
   2bdcc:	00005145 	.word	0x00005145
   2bdd0:	5f495041 	.word	0x5f495041
   2bdd4:	48545541 	.word	0x48545541
   2bdd8:	5053525f 	.word	0x5053525f
   2bddc:	00000000 	.word	0x00000000
   2bde0:	5f495041 	.word	0x5f495041
   2bde4:	55434553 	.word	0x55434553
   2bde8:	59544952 	.word	0x59544952
   2bdec:	5145525f 	.word	0x5145525f
   2bdf0:	00000000 	.word	0x00000000
   2bdf4:	5f444d43 	.word	0x5f444d43
   2bdf8:	00544b50 	.word	0x00544b50
   2bdfc:	5f444d43 	.word	0x5f444d43
   2be00:	52494150 	.word	0x52494150
   2be04:	5f474e49 	.word	0x5f474e49
   2be08:	4c494146 	.word	0x4c494146
   2be0c:	00004445 	.word	0x00004445
   2be10:	455f4d44 	.word	0x455f4d44
   2be14:	5952434e 	.word	0x5952434e
   2be18:	435f5450 	.word	0x435f5450
   2be1c:	004c504d 	.word	0x004c504d
   2be20:	455f4d44 	.word	0x455f4d44
   2be24:	5952434e 	.word	0x5952434e
   2be28:	465f5450 	.word	0x465f5450
   2be2c:	454c4941 	.word	0x454c4941
   2be30:	00000044 	.word	0x00000044
   2be34:	435f4d44 	.word	0x435f4d44
   2be38:	5f4e4e4f 	.word	0x5f4e4e4f
   2be3c:	534f4c43 	.word	0x534f4c43
   2be40:	00000045 	.word	0x00000045
   2be44:	5f465357 	.word	0x5f465357
   2be48:	5f534541 	.word	0x5f534541
   2be4c:	4c504d43 	.word	0x4c504d43
   2be50:	00000000 	.word	0x00000000
   2be54:	5f544e49 	.word	0x5f544e49
   2be58:	444e4553 	.word	0x444e4553
   2be5c:	58454e5f 	.word	0x58454e5f
   2be60:	454b5f54 	.word	0x454b5f54
   2be64:	00000059 	.word	0x00000059
   2be68:	5f544e49 	.word	0x5f544e49
   2be6c:	5f58414d 	.word	0x5f58414d
   2be70:	45545441 	.word	0x45545441
   2be74:	5354504d 	.word	0x5354504d
   2be78:	00000000 	.word	0x00000000
   2be7c:	5f544e49 	.word	0x5f544e49
   2be80:	52494150 	.word	0x52494150
   2be84:	5f474e49 	.word	0x5f474e49
   2be88:	4c504d43 	.word	0x4c504d43
   2be8c:	00000000 	.word	0x00000000
   2be90:	5f544e49 	.word	0x5f544e49
   2be94:	5f505352 	.word	0x5f505352
   2be98:	454d4954 	.word	0x454d4954
   2be9c:	0054554f 	.word	0x0054554f
   2bea0:	5f544e49 	.word	0x5f544e49
   2bea4:	545f4957 	.word	0x545f4957
   2bea8:	4f454d49 	.word	0x4f454d49
   2beac:	00005455 	.word	0x00005455
   2beb0:	5f544e49 	.word	0x5f544e49
   2beb4:	4353454c 	.word	0x4353454c
   2beb8:	00000000 	.word	0x00000000
   2bebc:	5f544e49 	.word	0x5f544e49
   2bec0:	4147454c 	.word	0x4147454c
   2bec4:	00005943 	.word	0x00005943
   2bec8:	5f544e49 	.word	0x5f544e49
   2becc:	4e5f574a 	.word	0x4e5f574a
   2bed0:	00000043 	.word	0x00000043
   2bed4:	5f544e49 	.word	0x5f544e49
   2bed8:	53534150 	.word	0x53534150
   2bedc:	0059454b 	.word	0x0059454b
   2bee0:	5f544e49 	.word	0x5f544e49
   2bee4:	00424f4f 	.word	0x00424f4f
   2bee8:	5f495041 	.word	0x5f495041
   2beec:	52455355 	.word	0x52455355
   2bef0:	4e4f435f 	.word	0x4e4f435f
   2bef4:	4d524946 	.word	0x4d524946
   2bef8:	00000000 	.word	0x00000000
   2befc:	5f495041 	.word	0x5f495041
   2bf00:	52455355 	.word	0x52455355
   2bf04:	59454b5f 	.word	0x59454b5f
   2bf08:	53455250 	.word	0x53455250
   2bf0c:	00000053 	.word	0x00000053
   2bf10:	5f495041 	.word	0x5f495041
   2bf14:	5059454b 	.word	0x5059454b
   2bf18:	53534552 	.word	0x53534552
   2bf1c:	504d435f 	.word	0x504d435f
   2bf20:	0000004c 	.word	0x0000004c
   2bf24:	5f465357 	.word	0x5f465357
   2bf28:	5f434345 	.word	0x5f434345
   2bf2c:	4c504d43 	.word	0x4c504d43
   2bf30:	00000000 	.word	0x00000000
   2bf34:	5f544e49 	.word	0x5f544e49
   2bf38:	4e5f4b50 	.word	0x4e5f4b50
   2bf3c:	00545845 	.word	0x00545845
   2bf40:	5f544e49 	.word	0x5f544e49
   2bf44:	435f4b50 	.word	0x435f4b50
   2bf48:	004c504d 	.word	0x004c504d
   2bf4c:	5f465357 	.word	0x5f465357
   2bf50:	43414d43 	.word	0x43414d43
   2bf54:	504d435f 	.word	0x504d435f
   2bf58:	0000004c 	.word	0x0000004c
   2bf5c:	435f4844 	.word	0x435f4844
   2bf60:	4b434548 	.word	0x4b434548
   2bf64:	4941465f 	.word	0x4941465f
   2bf68:	4552554c 	.word	0x4552554c
   2bf6c:	00000000 	.word	0x00000000
   2bf70:	6e6b6e55 	.word	0x6e6b6e55
   2bf74:	006e776f 	.word	0x006e776f
   2bf78:	454c4449 	.word	0x454c4449
   2bf7c:	00000000 	.word	0x00000000
   2bf80:	20726d54 	.word	0x20726d54
   2bf84:	00637653 	.word	0x00637653
   2bf88:	49676174 	.word	0x49676174
   2bf8c:	72577361 	.word	0x72577361
   2bf90:	43657469 	.word	0x43657469
   2bf94:	6b636162 	.word	0x6b636162
   2bf98:	6e6f6320 	.word	0x6e6f6320
   2bf9c:	3a64496e 	.word	0x3a64496e
   2bfa0:	68206425 	.word	0x68206425
   2bfa4:	6c646e61 	.word	0x6c646e61
   2bfa8:	78303a65 	.word	0x78303a65
   2bfac:	78343025 	.word	0x78343025
   2bfb0:	3a706f20 	.word	0x3a706f20
   2bfb4:	30257830 	.word	0x30257830
   2bfb8:	00007832 	.word	0x00007832
   2bfbc:	20202020 	.word	0x20202020
   2bfc0:	20202020 	.word	0x20202020
   2bfc4:	20202020 	.word	0x20202020
   2bfc8:	20202020 	.word	0x20202020
   2bfcc:	66666f20 	.word	0x66666f20
   2bfd0:	3a746573 	.word	0x3a746573
   2bfd4:	30257830 	.word	0x30257830
   2bfd8:	6c207834 	.word	0x6c207834
   2bfdc:	303a6e65 	.word	0x303a6e65
   2bfe0:	34302578 	.word	0x34302578
   2bfe4:	00000078 	.word	0x00000078
   2bfe8:	6f67654e 	.word	0x6f67654e
   2bfec:	74616974 	.word	0x74616974
   2bff0:	4d206465 	.word	0x4d206465
   2bff4:	25205554 	.word	0x25205554
   2bff8:	00000064 	.word	0x00000064
   2bffc:	61656c43 	.word	0x61656c43
   2c000:	65722072 	.word	0x65722072
   2c004:	766c6f73 	.word	0x766c6f73
   2c008:	20676e69 	.word	0x20676e69
   2c00c:	7473696c 	.word	0x7473696c
   2c010:	61747320 	.word	0x61747320
   2c014:	20737574 	.word	0x20737574
   2c018:	30257830 	.word	0x30257830
   2c01c:	00007832 	.word	0x00007832
   2c020:	48676154 	.word	0x48676154
   2c024:	6c646e61 	.word	0x6c646e61
   2c028:	6e497265 	.word	0x6e497265
   2c02c:	00007469 	.word	0x00007469
   2c030:	20676154 	.word	0x20676154
   2c034:	20746f67 	.word	0x20746f67
   2c038:	20747665 	.word	0x20747665
   2c03c:	00006425 	.word	0x00006425
   2c040:	63747441 	.word	0x63747441
   2c044:	63736944 	.word	0x63736944
   2c048:	76726553 	.word	0x76726553
   2c04c:	43656369 	.word	0x43656369
   2c050:	206c706d 	.word	0x206c706d
   2c054:	74617473 	.word	0x74617473
   2c058:	30207375 	.word	0x30207375
   2c05c:	32302578 	.word	0x32302578
   2c060:	00000078 	.word	0x00000078
   2c064:	63747441 	.word	0x63747441
   2c068:	63736944 	.word	0x63736944
   2c06c:	72616843 	.word	0x72616843
   2c070:	6c706d43 	.word	0x6c706d43
   2c074:	61747320 	.word	0x61747320
   2c078:	20737574 	.word	0x20737574
   2c07c:	30257830 	.word	0x30257830
   2c080:	00007832 	.word	0x00007832
   2c084:	63747441 	.word	0x63747441
   2c088:	63736944 	.word	0x63736944
   2c08c:	666e6f43 	.word	0x666e6f43
   2c090:	6d436769 	.word	0x6d436769
   2c094:	73206c70 	.word	0x73206c70
   2c098:	75746174 	.word	0x75746174
   2c09c:	78302073 	.word	0x78302073
   2c0a0:	78323025 	.word	0x78323025
   2c0a4:	00000000 	.word	0x00000000
   2c0a8:	44707041 	.word	0x44707041
   2c0ac:	43637369 	.word	0x43637369
   2c0b0:	6c706d6f 	.word	0x6c706d6f
   2c0b4:	20657465 	.word	0x20657465
   2c0b8:	6e6e6f63 	.word	0x6e6e6f63
   2c0bc:	253a6449 	.word	0x253a6449
   2c0c0:	74732064 	.word	0x74732064
   2c0c4:	73757461 	.word	0x73757461
   2c0c8:	2578303a 	.word	0x2578303a
   2c0cc:	00783230 	.word	0x00783230
   2c0d0:	20707041 	.word	0x20707041
   2c0d4:	20746f67 	.word	0x20746f67
   2c0d8:	20747665 	.word	0x20747665
   2c0dc:	00006425 	.word	0x00006425
   2c0e0:	61656c43 	.word	0x61656c43
   2c0e4:	6f622072 	.word	0x6f622072
   2c0e8:	6e69646e 	.word	0x6e69646e
   2c0ec:	6e692067 	.word	0x6e692067
   2c0f0:	00006f66 	.word	0x00006f66
   2c0f4:	61746144 	.word	0x61746144
   2c0f8:	65736162 	.word	0x65736162
   2c0fc:	73616820 	.word	0x73616820
   2c100:	70752068 	.word	0x70752068
   2c104:	65746164 	.word	0x65746164
   2c108:	00000064 	.word	0x00000064
   2c10c:	61766e49 	.word	0x61766e49
   2c110:	2064696c 	.word	0x2064696c
   2c114:	61204d44 	.word	0x61204d44
   2c118:	72657664 	.word	0x72657664
   2c11c:	69736974 	.word	0x69736974
   2c120:	6d20676e 	.word	0x6d20676e
   2c124:	3b65646f 	.word	0x3b65646f
   2c128:	646f6d20 	.word	0x646f6d20
   2c12c:	6f632065 	.word	0x6f632065
   2c130:	6769666e 	.word	0x6769666e
   2c134:	64657275 	.word	0x64657275
   2c138:	20736120 	.word	0x20736120
   2c13c:	65747865 	.word	0x65747865
   2c140:	6465646e 	.word	0x6465646e
   2c144:	00000000 	.word	0x00000000

0002c148 <fmplIasAl>:
   2c148:	0002c22c 00000002                       ,.......

0002c150 <attcFcnIf>:
   2c150:	0000e7e5 0000e865 0000e9c9 0000e8a5     ....e...........

0002c160 <attcSendReqTbl>:
   2c160:	00000000 0000e5d5 0000e4cd 0000e4cd     ................
   2c170:	0000e4cd 0000e479 0000e4cd 0000e479     ....y.......y...
   2c180:	0000e4cd 0000e479 0000e625 0000e669     ....y...%...i...
   2c190:	0000e479                                y...

0002c194 <attcProcRspTbl>:
   2c194:	0000ecc9 0000ed59 0000edd1 0000f51f     ....Y...........
   2c1a4:	0000edd1 0000ef79 0000f631 0000ef79     ....y...1...y...
   2c1b4:	0000edd1 0000ef8d 00000000 0000f7c3     ................
   2c1c4:	0000ef8d                                ....

0002c1c8 <attsIndFcnIf>:
   2c1c8:	00012f5f 00010577 000104b1 00010435     _/..w.......5...

0002c1d8 <attsFcnIf>:
   2c1d8:	00010871 00010a85 00010a25 000109d9     q.......%.......

0002c1e8 <attsMinPduLen>:
   2c1e8:	07050300 05050305 05030305 01000002     ................
   2c1f8:	0000000f                                ....

0002c1fc <attFcnDefault>:
   2c1fc:	00012f5f 00012f49 00012f49 00012f53     _/..I/..I/..S/..

0002c20c <attGapSvcUuid>:
   2c20c:	00001800                                ....

0002c210 <attGattSvcUuid>:
   2c210:	00001801                                ....

0002c214 <attIasSvcUuid>:
   2c214:	00001802                                ....

0002c218 <attPrimSvcUuid>:
   2c218:	00002800                                .(..

0002c21c <attChUuid>:
   2c21c:	00002803                                .(..

0002c220 <attCliChCfgUuid>:
   2c220:	00002902                                .)..

0002c224 <attApChUuid>:
   2c224:	00002a01                                .*..

0002c228 <attScChUuid>:
   2c228:	00002a05                                .*..

0002c22c <attAlChUuid>:
   2c22c:	00002a06                                .*..

0002c230 <attCarChUuid>:
   2c230:	00002aa6                                .*..

0002c234 <attRpaoChUuid>:
   2c234:	00002ac9                                .*..

0002c238 <attGattCsfChUuid>:
   2c238:	00002b29                                )+..

0002c23c <attGattDbhChUuid>:
   2c23c:	00002b2a                                *+..

0002c240 <calc128Zeros>:
	...

0002c250 <dmAdvAct>:
   2c250:	00014a61 00014ab9 00014b0d 00014b65     aJ...J...K..eK..
   2c260:	00014bb5 00014bbf 00014bc9 00014bd5     .K...K...K...K..

0002c270 <dmAdvFcnIf>:
   2c270:	00014c05 00014c51 00014d75              .L..QL..uM..

0002c27c <dmConnSpecDefaults>:
   2c27c:	00280018 07d00000 00000000              ..(.........

0002c288 <dmConnActSetMain>:
   2c288:	000152cd 000152d9 000152f9 000153e9     .R...R...R...S..
   2c298:	00015441 0001548d                       AT...T..

0002c2a0 <dmConnFcnIf>:
   2c2a0:	000154b1 000155b3 00015589              .T...U...U..

0002c2ac <dmConn2FcnIf>:
   2c2ac:	00016711 00015721 00015655              .g..!W..UV..

0002c2b8 <dmConnActSetSlave>:
   2c2b8:	0001620b 0001622f 0001608d 0001624b     .b../b...`..Kb..
   2c2c8:	00016267 000160f1                       gb...`..

0002c2d0 <dmConnStateTbl>:
   2c2d0:	00001001 00002002 00000000 00000000     ..... ..........
   2c2e0:	00002303 00000000 00010000 00011104     .#..............
   2c2f0:	00010001 00010001 02030300 00010300     ................
   2c300:	00010001 21000002 00020002 00020002     .......!........
   2c310:	24000002 24002303 00020002 00030002     ...$.#.$........
   2c320:	00030104 22031203 25031303 00030003     ......."...%....
   2c330:	05030400 05030003 00040004 00040004     ................
   2c340:	00040004 04000004 04000104 00040004     ................
   2c350:	00000004                                ....

0002c354 <dmDevFcnIf>:
   2c354:	00016711 00016405 00016445              .g...d..Ed..

0002c360 <dmHciToIdTbl>:
   2c360:	03030307 04020303 04040404 05050505     ................
   2c370:	07070705 06060607 05060606 07040405     ................
   2c380:	04070407 04050504 09090904 00000202     ................
   2c390:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   2c3a0:	0d0d0d0d                                ....

0002c3a4 <dmEvtCbackLen>:
   2c3a4:	00040004 000c0004 00040004 0024001c     ..............$.
   2c3b4:	000e000a 00040006 00040006 00220006     ..............".
   2c3c4:	00080010 00240006 00140064 00040006     ......$.d.......
   2c3d4:	000a000a 00060006 000c0006 0006000c     ................
   2c3e4:	000e000e 00060008 0006000a 0006000a     ................
   2c3f4:	000c000a 00040004 00060024 00160006     ........$.......
   2c404:	00060016 001a001a 00080008 00100010     ................
   2c414:	001c000e 00080008 00080008 00080008     ................
   2c424:	00080008 0008000a 00060004 00000006     ................

0002c434 <dmFcnDefault>:
   2c434:	00016711 00016715 00016715              .g...g...g..

0002c440 <dmPrivAct>:
   2c440:	000168d1 00016959 000169ad 000169ed     .h..Yi...i...i..
   2c450:	00016a1d 00016a2f 00016a4b 00016a71     .j../j..Kj..qj..
   2c460:	00016b01                                .k..

0002c464 <dmPrivFcnIf>:
   2c464:	00016cad 00016b61 00016c89              .l..ak...l..

0002c470 <dmSecFcnIf>:
   2c470:	00017191 00016e81 00016fa5              .q...n...o..

0002c47c <dmSecLescFcnIf>:
   2c47c:	00016711 00016715 0001719d              .g...g...q..

0002c488 <gattSc>:
   2c488:	0002c228 00000000                       (.......

0002c490 <gattScCcc>:
   2c490:	0002c220 00000004                        .......

0002c498 <gattCsf>:
   2c498:	0002c238 00000000                       8.......

0002c4a0 <gapCar>:
   2c4a0:	0002c230 00000000                       0.......

0002c4a8 <gapRpao>:
   2c4a8:	0002c234 00000000                       4.......

0002c4b0 <curve_p>:
   2c4b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   2c4c8:	00000001 ffffffff                       ........

0002c4d0 <curve_b>:
   2c4d0:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   2c4e0:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

0002c4f0 <curve_G>:
   2c4f0:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   2c500:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
   2c510:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   2c520:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

0002c530 <curve_n>:
   2c530:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   2c540:	ffffffff ffffffff 00000000 ffffffff     ................

0002c550 <smprScActionTbl>:
   2c550:	0001ab45 0001cbe9 0001cc07 0001cc27     E...........'...
   2c560:	0001a4bd 0001ac61 0001a441 0001af2d     ....a...A...-...
   2c570:	0001af67 0001af89 0001afe9 0001b01f     g...............
   2c580:	0001b48b 0001b55b 0001b523 0001b4df     ....[...#.......
   2c590:	0001b501 0001b4cb 00019f11 00019f59     ............Y...
   2c5a0:	0001a025 0001a119 0001a4dd 0001a549     %...........I...
   2c5b0:	0001a579 0001a5a9 0001cced 0001cf39     y...........9...
   2c5c0:	0001cfa7 0001a5db 0001a605 0001a625     ............%...
   2c5d0:	0001a645 0001a6b5 0001a6e5 0001a73d     E...........=...
   2c5e0:	0001a7e9 0001a7fd 0001a8a9 0001a939     ............9...
   2c5f0:	0001a96b 0001a99f 0001d0b1 0001d135     k...........5...
   2c600:	0001d209 0001d2d5 0001d3ad 0001a9dd     ................
   2c610:	0001a149 0001a185 0001a215 0001a2ab     I...............
   2c620:	0001a3f5 0001a315                       ........

0002c628 <smprScStateTblCommon>:
   2c628:	0702000a 00030200 02270f03 00000000     ..........'.....

0002c638 <smprScStateTblIdle>:
   2c638:	0a120105 02060100 00000713 0f010003     ................
	...

0002c650 <smprScStateTblApiPairReq>:
   2c650:	0601000a 00071302 01000302 09010008     ................
   2c660:	00000100 00000000                       ........

0002c668 <smprScStateTblApiPairRsp>:
   2c668:	00140302 00000000                       ........

0002c670 <smprScStateTblModeSelect>:
   2c670:	12000511 0000001c 00000000              ............

0002c67c <smprScStateTblLescPin>:
   2c67c:	00060404 00000000                       ........

0002c684 <smprScStateTblPubKey>:
   2c684:	00040606 00000000                       ........

0002c68c <smprScStateTblAuthSelect>:
   2c68c:	14160713 14151a0c 00000024              ........$...

0002c698 <smprScStateTblJwNcSetup>:
   2c698:	0017081c 00000000                       ........

0002c6a0 <smprScStateTblJwNcWaitRand>:
   2c6a0:	00180906 00000000                       ........

0002c6a8 <smprScStateTblJwNcCalcG2>:
   2c6a8:	00190a1c 00000000                       ........

0002c6b0 <smprScStateTblJwNcWaitUser>:
   2c6b0:	06281516 260d270b 0000000c              ..(..'.&....

0002c6bc <smprScStateTblJwNcWaitUserDhCheckRcvd>:
   2c6bc:	0d291616 00000c26 00000000              ..).&.......

0002c6c8 <smprScStateTblPassKeyKeypress>:
   2c6c8:	1e1b0c06 0c171d0d 060e041c 00000000     ................

0002c6d8 <smprScStateTblPassWaitAuthRsp>:
   2c6d8:	001f0f04 00000000                       ........

0002c6e0 <smprScStateTblPasskeyWaitCnf>:
   2c6e0:	001e0f06 00000000                       ........

0002c6e8 <smprScStateTblPasskeyCalc>:
   2c6e8:	0021101c 00000000                       ..!.....

0002c6f0 <smprScStateTblPasskeyRand>:
   2c6f0:	00221106 00000000                       ..".....

0002c6f8 <smprScStateTblPasskeyCheck>:
   2c6f8:	0023121c 00000000                       ..#.....

0002c700 <smprScStateTblPasskeyRepeat>:
   2c700:	1b000e1a 260d2815 0000000c              .....(.&....

0002c70c <smprScStateTblOobWaitRand>:
   2c70c:	00251306 00000000                       ..%.....

0002c714 <smprScStateTblOobSendRand>:
   2c714:	0026151c 00000000                       ..&.....

0002c71c <smprScStateTblWaitDhCheck>:
   2c71c:	0d291606 00000c26 00000000              ..).&.......

0002c728 <smprScStateTblCalcDHKey>:
   2c728:	002a1719 00000000                       ..*.....

0002c730 <smprScStateTblCalcF5TKey>:
   2c730:	0d2b181c 00000c26 00000000              ..+.&.......

0002c73c <smprScStateTblCalcF5MacKey>:
   2c73c:	002c191c 00000000                       ..,.....

0002c744 <smprScStateTblCalcF5LTK>:
   2c744:	002d1a1c 00000000                       ..-.....

0002c74c <smprScStateTblDhCalcF6Ea>:
   2c74c:	002e1b1c 00000000                       ........

0002c754 <smprScStateTblDhCalcF6Eb>:
   2c754:	002f241c 00000000                       .$/.....

0002c75c <smprStateTblPinPair1>:
   2c75c:	06051d04 0000151d 00000000              ............

0002c768 <smprStateTblPinPair2>:
   2c768:	06071e04 0000301e 00000000              .....0......

0002c774 <smprStateTblCnfCalc1>:
   2c774:	00081f0b 00000000                       ........

0002c77c <smprStateTblCnfCalc2>:
   2c77c:	0009200b 00000000                       . ......

0002c784 <smprStateTblPairRand>:
   2c784:	000a2106 00000000                       .!......

0002c78c <smprStateTblCnfVerCalc1>:
   2c78c:	000b220b 00000000                       ."......

0002c794 <smprStateTblCnfVerCalc2>:
   2c794:	0031230b 00000000                       .#1.....

0002c79c <smprScStateTblStkCalc>:
   2c79c:	0d32240b 00000c26 00000000              .$2.&.......

0002c7a8 <smprScStateTblEncrypt>:
   2c7a8:	09332508 24030200 03001d00 000c260d     .%3....$.....&..
   2c7b8:	00000000                                ....

0002c7bc <smprScStateTblKeyDist>:
   2c7bc:	0c342506 000e3525 0025030d 00000000     .%4.%5....%.....

0002c7cc <smprScStateTblAttempts>:
   2c7cc:	0f0e0010 26060227 0f000511 0301000a     ....'..&........
   2c7dc:	26070100 00000000                       ...&....

0002c7e4 <smprScStateTblRspTo>:
   2c7e4:	0701000a 27030027 00270f00 00102705     ....'..'..'..'..
   2c7f4:	00000000                                ....

0002c7f8 <smprScStateTbl>:
   2c7f8:	0002c638 0002c650 0002c668 0002c670     8...P...h...p...
   2c808:	0002c684 0002c67c 0002c68c 0002c698     ....|...........
   2c818:	0002c6a0 0002c6a8 0002c6b0 0002c6bc     ................
   2c828:	0002c6c8 0002c6d8 0002c6e0 0002c6e8     ................
   2c838:	0002c6f0 0002c6f8 0002c700 0002c714     ................
   2c848:	0002c70c 0002c71c 0002c728 0002c730     ........(...0...
   2c858:	0002c73c 0002c744 0002c74c 0002c754     <...D...L...T...
   2c868:	0002c75c 0002c768 0002c774 0002c77c     \...h...t...|...
   2c878:	0002c784 0002c78c 0002c794 0002c79c     ................
   2c888:	0002c7a8 0002c7bc 0002c7cc 0002c7e4     ................

0002c898 <smprScSmIf>:
   2c898:	0002c7f8 0002c550 0002c628              ....P...(...

0002c8a4 <smprActionTbl>:
   2c8a4:	0001ab45 0001abaf 0001ac0b 0001ac3d     E...........=...
   2c8b4:	0001ac61 0001af2d 0001af67 0001af89     a...-...g.......
   2c8c4:	0001afe9 0001b01f 0001b48b 0001b4cb     ................
   2c8d4:	0001b523 0001b4df 0001b501 0001b55b     #...........[...
   2c8e4:	00019f11 00019f59 0001a025 0001a119     ....Y...%.......
   2c8f4:	0001a149 0001a185 0001a215 0001a2ab     I...............
   2c904:	0001a315 0001a3f5                       ........

0002c90c <smprStateTblCommon>:
   2c90c:	0702000a 00030200 020e0f03 00000000     ................

0002c91c <smprStateTblIdle>:
   2c91c:	0a100105 02060100 00000711 0f010003     ................
	...

0002c934 <smprStateTblApiPairReq>:
   2c934:	0601000a 00071102 01000302 09010008     ................
   2c944:	00000100 00000000                       ........

0002c94c <smprStateTblApiPairRsp>:
   2c94c:	00120302 00000000                       ........

0002c954 <smprStateTblPinPair1>:
   2c954:	06040404 00001304 00000000              ............

0002c960 <smprStateTblPinPair2>:
   2c960:	06050504 00001405 00000000              ............

0002c96c <smprStateTblCnfCalc1>:
   2c96c:	0006060b 00000000                       ........

0002c974 <smprStateTblCnfCalc2>:
   2c974:	0007070b 00000000                       ........

0002c97c <smprStateTblPairRand>:
   2c97c:	00080806 00000000                       ........

0002c984 <smprStateTblCnfVerCalc1>:
   2c984:	0009090b 00000000                       ........

0002c98c <smprStateTblCnfVerCalc2>:
   2c98c:	00150a0b 00000000                       ........

0002c994 <smprStateTblStkCalc>:
   2c994:	0d160b0b 00000a0d 00000000              ............

0002c9a0 <smprStateTblEncrypt>:
   2c9a0:	09170c08 0b030200 00000000              ............

0002c9ac <smprStateTblKeyDist>:
   2c9ac:	06180c0c 000e190c 000c030f 00000000     ................

0002c9bc <smprStateTblAttempts>:
   2c9bc:	0f0c0010 0d06020e 0d00050b 0301000a     ................
   2c9cc:	0d070100 00000000                       ........

0002c9d4 <smprStateTblRspTo>:
   2c9d4:	0701000a 0e03000e 000e0f00 000e0e05     ................
   2c9e4:	00000000                                ....

0002c9e8 <smprStateTbl>:
   2c9e8:	0002c91c 0002c934 0002c94c 0002c954     ....4...L...T...
   2c9f8:	0002c960 0002c96c 0002c974 0002c97c     `...l...t...|...
   2ca08:	0002c984 0002c98c 0002c994 0002c9a0     ................
   2ca18:	0002c9ac 0002c9bc 0002c9d4              ............

0002ca24 <smprSmIf>:
   2ca24:	0002c9e8 0002c8a4 0002c90c              ............

0002ca30 <smpPktLenTbl>:
   2ca30:	11070700 0b110211 02110811 00021141     ............A...

0002ca40 <smpScF5Key>:
   2ca40:	656c7462                                btle

0002ca44 <attCfg>:
   2ca44:	0000000f 041e01e0                       ........

0002ca4c <smpCfg>:
   2ca4c:	000001f4 01100703 00000000 0000fa00     ................
   2ca5c:	0000fa00 00000002                       ........

0002ca64 <hciEventMask>:
   2ca64:	02008890 20008000                       ....... 

0002ca6c <hciLeEventMask>:
   2ca6c:	000fffff 00000000                       ........

0002ca74 <hciEventMaskPage2>:
   2ca74:	00800000 00000000                       ........

0002ca7c <hciEvtParseFcnTbl>:
   2ca7c:	00000000 0001f5b1 0001f6b5 0001f7c1     ................
   2ca8c:	0001f81b 0001f8c9 00000000 0001f8ef     ................
   2ca9c:	0001f94b 0001f9ab 0001f9f7 0001fa91     K...............
   2caac:	0001faf1 0001fb3f 0001fb8d 0001fbdb     ....?...........
   2cabc:	0001fc35 0001fca7 0001fcd9 0001fd33     5...........3...
   2cacc:	0001fd59 0001fde7 0001fe0d 0001fe33     Y...........3...
   2cadc:	0001fe59 0001fe95 0001fed1 0001fd77     Y...........w...
   2caec:	0001fdaf 0001fef7 0001ff45 0001ff93     ........E.......
   2cafc:	0001fff9 0002001f 0002006d 00020113     ........m.......
   2cb0c:	000201cd 00020287 000202bf 000202f7     ................
   2cb1c:	00020345 0002037f 000203e5 0002040b     E...............
   2cb2c:	00000000 00020739 0002074b 000207b1     ....9...K.......
   2cb3c:	000207f1 00000000 00020997 00000000     ................
   2cb4c:	00020979 00020979 00020979 00020979     y...y...y...y...
   2cb5c:	00020979                                y...

0002cb60 <hciEvtCbackLen>:
   2cb60:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   2cb70:	06080610 06060606 16060c0c 0a08080e     ................
   2cb80:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   2cb90:	04061016 04040404 00000004              ............

0002cb9c <gapValSvc>:
   2cb9c:	                                         ..

0002cb9e <gapLenSvc>:
   2cb9e:	                                         ..

0002cba0 <gapValApCh>:
   2cba0:	01000502                                 ....*.

0002cba6 <gapLenApCh>:
   2cba6:	                                         ..

0002cba8 <gapLenAp>:
   2cba8:	00000002                                ....

0002cbac <gapValCarCh>:
   2cbac:	a6000702                                 ....*.

0002cbb2 <gapLenCarCh>:
   2cbb2:	                                         ..

0002cbb4 <gapLenCar>:
   2cbb4:	00000001                                ....

0002cbb8 <gapValRpaoCh>:
   2cbb8:	c9000902                                 ....*.

0002cbbe <gapLenRpaoCh>:
   2cbbe:	                                         ..

0002cbc0 <gapLenRpao>:
   2cbc0:	00000001                                ....

0002cbc4 <gapList>:
   2cbc4:	0002c218 0002cb9c 0002cb9e 01000002     ................
   2cbd4:	0002c21c 0002cba0 0002cba6 01000005     ................
   2cbe4:	0002c224 100087a4 0002cba8 01000002     $...............
   2cbf4:	0002c21c 0002cbac 0002cbb2 01000005     ................
   2cc04:	0002c230 100087a8 0002cbb4 01000001     0...............
   2cc14:	0002c21c 0002cbb8 0002cbbe 01000005     ................
   2cc24:	0002c234 100087ac 0002cbc0 01000001     4...............

0002cc34 <gattValSvc>:
   2cc34:	                                         ..

0002cc36 <gattLenSvc>:
   2cc36:	                                         ..

0002cc38 <gattValScCh>:
   2cc38:	05001220                                  ...*.

0002cc3e <gattLenScCh>:
   2cc3e:	                                         ..

0002cc40 <gattValSc>:
   2cc40:	ffff0001                                ....

0002cc44 <gattLenSc>:
   2cc44:	                                         ..

0002cc46 <gattLenScChCcc>:
   2cc46:	                                         ..

0002cc48 <gattValCsfCh>:
   2cc48:	29001502                                 ...)+.

0002cc4e <gattLenCsfCh>:
   2cc4e:	                                         ..

0002cc50 <gattLenCsf>:
   2cc50:	00000001                                ....

0002cc54 <gattValDbhCh>:
   2cc54:	2a001702                                 ...*+.

0002cc5a <gattLenDbhCh>:
   2cc5a:	                                         ..

0002cc5c <gattLenDbh>:
   2cc5c:	00000010                                ....

0002cc60 <gattList>:
   2cc60:	0002c218 0002cc34 0002cc36 01000002     ....4...6.......
   2cc70:	0002c21c 0002cc38 0002cc3e 01000005     ....8...>.......
   2cc80:	0002c228 0002cc40 0002cc44 00000004     (...@...D.......
   2cc90:	0002c220 100087b0 0002cc46 11200002      .......F..... .
   2cca0:	0002c21c 0002cc48 0002cc4e 01000005     ....H...N.......
   2ccb0:	0002c238 100087b4 0002cc50 11060001     8.......P.......
   2ccc0:	0002c21c 0002cc54 0002cc5a 01000005     ....T...Z.......
   2ccd0:	0002c23c 100087b8 0002cc5c 01040010     <.......\.......

0002cce0 <svcAlLvlUuid>:
   2cce0:	00002a06                                .*..

0002cce4 <svcTxPwrUuid>:
   2cce4:	00002a07                                .*..

0002cce8 <llsValSvc>:
   2cce8:	                                         ..

0002ccea <llsLenSvc>:
   2ccea:	                                         ..

0002ccec <llsValAlCh>:
   2ccec:	0600520a                                 .R..*.

0002ccf2 <llsLenAlCh>:
   2ccf2:	                                         ..

0002ccf4 <llsLenAl>:
   2ccf4:	00000001                                ....

0002ccf8 <iasValSvc>:
   2ccf8:	                                         ..

0002ccfa <iasLenSvc>:
   2ccfa:	                                         ..

0002ccfc <iasValAlCh>:
   2ccfc:	06005504                                 .U..*.

0002cd02 <iasLenAlCh>:
   2cd02:	                                         ..

0002cd04 <iasLenAl>:
   2cd04:	00000001                                ....

0002cd08 <txsValSvc>:
   2cd08:	                                         ..

0002cd0a <txsLenSvc>:
   2cd0a:	                                         ..

0002cd0c <txsValTxCh>:
   2cd0c:	07005802                                 .X..*.

0002cd12 <txsLenTxCh>:
   2cd12:	                                         ..

0002cd14 <txsLenTx>:
   2cd14:	00000001                                ....

0002cd18 <pxList>:
   2cd18:	0002c218 0002cce8 0002ccea 01000002     ................
   2cd28:	0002c21c 0002ccec 0002ccf2 01000005     ................
   2cd38:	0002cce0 100087c8 0002ccf4 11000001     ................
   2cd48:	0002c218 0002ccf8 0002ccfa 01000002     ................
   2cd58:	0002c21c 0002ccfc 0002cd02 01000005     ................
   2cd68:	0002cce0 100087cc 0002cd04 10020001     ................
   2cd78:	0002c218 0002cd08 0002cd0a 01000002     ................
   2cd88:	0002c21c 0002cd0c 0002cd12 01000005     ................
   2cd98:	0002cce4 100087d0 0002cd14 01000001     ................

0002cda8 <tagAdvCfg>:
   2cda8:	afc83a98 00380000 07200280              .:....8... .

0002cdb4 <tagSlaveCfg>:
   2cdb4:	00000001                                ....

0002cdb8 <tagSecCfg>:
   2cdb8:	00030201 00000000                       ........

0002cdc0 <tagUpdateCfg>:
   2cdc0:	00001770 03200280 02580000 00000005     p..... ...X.....

0002cdd0 <tagDiscCfg>:
   2cdd0:	00000000                                ....

0002cdd4 <tagSmpCfg>:
   2cdd4:	000001f4 01100703 00000000 0000fa00     ................
   2cde4:	0000fa00 00000002                       ........

0002cdec <tagAppCfg>:
   2cdec:	00000101                                ....

0002cdf0 <tagAdvDataDisc>:
   2cdf0:	02050102 0904000a 00676154              ........Tag.

0002cdfc <tagScanData>:
   2cdfc:	18030307 18041802                       ........

0002ce04 <tagGattScCccVal>:
   2ce04:	00000002                                ....

0002ce08 <tagCsfVal>:
   2ce08:	00000001                                ....

0002ce0c <tagDiscCfgList>:
   2ce0c:	0002ce04 00000202 0002ce08 00000301     ................
   2ce1c:	00000000 00000400                       ........

0002ce24 <tagCccSet>:
   2ce24:	00020013 00000001                       ........

0002ce2c <appReqActCfg>:
   2ce2c:	00000000                                ....

0002ce30 <ccitt_table>:
   2ce30:	80050000 000a800f 001e801b 80110014     ................
   2ce40:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   2ce50:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   2ce60:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   2ce70:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   2ce80:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   2ce90:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   2cea0:	00968093 8099009c 808d0088 00828087     ................
   2ceb0:	01868183 8189018c 819d0198 01928197     ................
   2cec0:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   2ced0:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   2cee0:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   2cef0:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   2cf00:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   2cf10:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   2cf20:	81150110 011a811f 010e810b 81010104     ................
   2cf30:	03068303 8309030c 831d0318 03128317     ................
   2cf40:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   2cf50:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   2cf60:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   2cf70:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   2cf80:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   2cf90:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   2cfa0:	83950390 039a839f 038e838b 83810384     ................
   2cfb0:	82850280 028a828f 029e829b 82910294     ................
   2cfc0:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   2cfd0:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   2cfe0:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   2cff0:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   2d000:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   2d010:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   2d020:	02168213 8219021c 820d0208 02028207     ................

0002d030 <am_ble_buffer_patch_data>:
   2d030:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   2d040:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   2d050:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   2d060:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   2d070:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   2d0ac:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   2d0bc:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   2d0cc:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   2d0dc:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   2d0ec:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   2d0fc:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   2d10c:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   2d11c:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   2d12c:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   2d13c:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   2d14c:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   2d15c:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   2d16c:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   2d17c:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   2d18c:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   2d19c:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   2d1ac:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   2d1bc:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   2d1cc:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   2d1dc:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   2d1ec:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   2d1fc:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   2d20c:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   2d21c:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   2d22c:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   2d23c:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   2d24c:	8f809011 9812900e 900d3008 30309812     .........0....00
   2d25c:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   2d26c:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   2d27c:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   2d28c:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   2d29c:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   2d2ac:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   2d2bc:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   2d2cc:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   2d2dc:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   2d2ec:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   2d2fc:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   2d30c:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   2d31c:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   2d33c:	00000021 00000000 00000001 00000000     !...............
   2d34c:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   2d35c:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   2d36c:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   2d37c:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   2d38c:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   2d39c:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   2d3ac:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   2d3bc:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   2d3cc:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   2d3dc:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   2d3ec:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   2d3fc:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   2d40c:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   2d41c:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   2d42c:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   2d43c:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   2d44c:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   2d45c:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   2d46c:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   2d47c:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   2d48c:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   2d49c:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   2d4ac:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   2d4bc:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   2d4cc:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   2d4dc:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   2d4ec:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   2d4fc:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   2d50c:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   2d51c:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   2d52c:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   2d53c:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   2d54c:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   2d55c:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   2d56c:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   2d57c:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   2d58c:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   2d59c:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   2d5ac:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   2d5bc:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   2d5cc:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   2d5dc:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   2d5ec:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   2d5fc:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   2d60c:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   2d61c:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   2d62c:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   2d63c:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   2d64c:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   2d65c:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   2d66c:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   2d67c:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   2d68c:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   2d69c:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   2d6ac:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   2d6bc:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   2d6cc:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   2d6dc:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   2d6ec:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   2d6fc:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   2d70c:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   2d71c:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   2d72c:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   2d73c:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   2d74c:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   2d75c:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   2d76c:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   2d77c:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   2d78c:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   2d79c:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   2d7ac:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   2d7bc:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   2d7cc:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   2d7dc:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   2d7ec:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   2d7fc:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   2d80c:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   2d81c:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   2d82c:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   2d83c:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   2d84c:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   2d85c:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   2d86c:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   2d87c:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   2d88c:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   2d89c:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   2d8ac:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   2d8bc:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   2d8cc:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   2d8dc:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   2d8ec:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   2d8fc:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   2d90c:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   2d91c:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   2d92c:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   2d93c:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   2d94c:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   2d95c:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   2d96c:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   2d97c:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   2d98c:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   2d99c:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   2d9ac:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   2d9bc:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   2d9cc:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   2d9dc:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   2d9ec:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   2d9fc:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   2da0c:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   2da1c:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   2da2c:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   2da3c:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   2da4c:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   2da5c:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   2da6c:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   2da7c:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   2da8c:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   2da9c:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   2daac:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   2dabc:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   2dacc:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   2dadc:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   2daec:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   2dafc:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   2db0c:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   2db1c:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   2db2c:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   2db3c:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   2db4c:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   2db5c:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   2db6c:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   2db7c:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   2db8c:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   2db9c:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   2dbac:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   2dbbc:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   2dbcc:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   2dbdc:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   2dbec:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   2dbfc:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   2dc0c:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   2dc1c:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   2dc2c:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   2dc3c:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   2dc4c:	00010341 50804000 000093a5 00000466     A....@.P....f...
   2dc5c:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   2dc6c:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   2dc7c:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   2dc8c:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   2dc9c:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   2dcac:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   2dcbc:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   2dccc:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   2dcdc:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   2dcec:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   2dcfc:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   2dd0c:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   2dd1c:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   2dd2c:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   2dd3c:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   2dd4c:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   2dd5c:	00004770 20006780 20006054              pG...g. T`. 

0002dd68 <am_hal_ble_num_default_patches>:
   2dd68:	00000003                                ....

0002dd6c <am_ble_performance_copy_patch_data>:
   2dd6c:	006e1100 00000400 00000000 01c50101     ..n.............
   2dd7c:	00000039 00000000 00000000 00000000     9...............
   2dd8c:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   2dd9c:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   2ddac:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   2ddbc:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   2ddcc:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   2dddc:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   2ddec:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   2ddfc:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   2de0c:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   2de1c:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   2de2c:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   2de3c:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   2de4c:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   2de5c:	f000e00a e007fb94 b2c09801 fac7f000     ................
   2de6c:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   2de7c:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   2de8c:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   2de9c:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   2deac:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   2debc:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   2decc:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   2dedc:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   2deec:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   2defc:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   2df0c:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   2df1c:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   2df2c:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   2df3c:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   2df4c:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   2df5c:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   2df6c:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   2df7c:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   2df8c:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   2df9c:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   2dfac:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   2dfbc:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   2dfcc:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   2dfdc:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   2dfec:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   2dffc:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   2e00c:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   2e01c:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   2e02c:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   2e03c:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   2e04c:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   2e05c:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   2e06c:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   2e07c:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   2e08c:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   2e09c:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   2e0ac:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   2e0bc:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   2e0cc:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   2e0dc:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   2e0ec:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   2e0fc:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   2e10c:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   2e11c:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   2e12c:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   2e13c:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   2e14c:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   2e15c:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   2e16c:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   2e17c:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   2e18c:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   2e19c:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   2e1ac:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   2e1bc:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   2e1cc:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   2e1dc:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   2e1ec:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   2e1fc:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   2e20c:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   2e21c:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   2e22c:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   2e23c:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   2e24c:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   2e25c:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   2e26c:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   2e27c:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   2e28c:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   2e29c:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   2e2ac:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   2e2bc:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   2e2cc:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   2e2dc:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   2e2ec:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   2e2fc:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   2e30c:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   2e31c:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   2e32c:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   2e33c:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   2e34c:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   2e35c:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   2e36c:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   2e37c:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   2e38c:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   2e39c:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   2e3ac:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   2e3bc:	00400000 00804580 021e4580 00030000     ..@..E...E......
   2e3cc:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   2e3dc:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   2e3ec:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   2e3fc:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   2e40c:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   2e41c:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   2e42c:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   2e43c:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   2e44c:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   2e45c:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   2e46c:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   2e47c:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   2e48c:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   2e49c:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   2e4ac:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   2e4bc:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   2e4cc:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   2e4dc:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   2e4ec:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   2e4fc:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   2e50c:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   2e51c:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   2e52c:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   2e53c:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   2e54c:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   2e55c:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   2e56c:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   2e57c:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   2e58c:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   2e59c:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   2e5ac:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   2e5bc:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   2e5cc:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   2e5dc:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   2e5ec:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   2e5fc:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   2e60c:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   2e61c:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   2e62c:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   2e63c:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   2e64c:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   2e65c:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   2e66c:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   2e67c:	00000001                                ....

0002e680 <am_hal_ble_num_default_patches_b0>:
   2e680:	00000003                                ....

0002e684 <am_ble_buffer_patch_data_b0>:
   2e684:	02302200 0000001f 00066584 00066d73     ."0......e..sm..
   2e694:	00067575 00067b17 000685a9 00000000     uu...{..........
	...
   2e6b0:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   2e6c0:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   2e6d0:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   2e6e0:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   2e6f0:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   2e700:	20003441 7cca4e23 6ac96875 d01d2a00     A4. #N.|uh.j.*..
   2e710:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   2e720:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   2e730:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   2e740:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   2e750:	2000682c 20006e0c 47084900 200034b1     ,h. .n. .I.G.4. 
   2e760:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   2e770:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   2e780:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   2e790:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   2e7a0:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   2e7b0:	00000021 00000000 00000001 00000000     !...............
   2e7c0:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   2e7d0:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   2e7e0:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   2e7f0:	2300b4f0 69254c18 227d4918 02126809     ...#.L%i.I}".h..
   2e800:	d3024291 23011a8a 1a52e000 43564606     .B.....#..R..FVC
   2e810:	435113f2 261e1a71 104f434e 118f19f6     ..QCq..&NCO.....
   2e820:	124919f6 13ce1871 d0012b00 e0001a80     ..I.q....+......
   2e830:	19421810 008d0891 2b001b52 0143d004     ..B.....R..+..C.
   2e840:	18401a18 e0031b80 1a180143 19801840     ..@.....C...@...
   2e850:	bcf06122 00004770 20006e00 20006858     "a..pG...n. Xh. 
   2e860:	2300b410 46022114 4911434a 6809247d     ...#.!.FJC.I}$.h
   2e870:	42a10224 1b09d902 e0002301 43481a61     $..B.....#..a.HC
   2e880:	18410081 0c0c0a88 0c4c1900 0d4c1900     ..A.......L...L.
   2e890:	0e4c1900 0fc91900 08c01840 d0012b00     ..L.....@....+..
   2e8a0:	e0011810 1e401a10 bc101e40 00004770     ......@.@...pG..
   2e8b0:	20006858                                Xh. 

0002e8b4 <am_hal_cachectrl_defaults>:
   2e8b4:	00000308                                ....

0002e8b8 <g_ui8Bit76Capabilities>:
   2e8b8:	02800101 80010180 80800101 80808080     ................
   2e8c8:	80808080 80808008 01800180 80808080     ................
   2e8d8:	80808080 01800402 01010401 80808080     ................
   2e8e8:	00000101                                ....

0002e8ec <g_ui8NCEtable>:
   2e8ec:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   2e8fc:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   2e90c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   2e91c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   2e92c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   2e93c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   2e94c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   2e95c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   2e96c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   2e97c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   2e98c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   2e99c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   2e9ac:	32221202 43231303                       .."2..#C

0002e9b4 <g_ui8Inpen>:
   2e9b4:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   2e9c4:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   2e9d4:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   2e9e4:	00003130                                01..

0002e9e8 <g_AM_HAL_GPIO_DISABLE>:
   2e9e8:	00000003                                ....

0002e9ec <g_AM_HAL_GPIO_INPUT>:
   2e9ec:	00001003                                ....

0002e9f0 <g_AM_HAL_GPIO_OUTPUT>:
   2e9f0:	00000403                                ....

0002e9f4 <g_ui8nCEpins>:
   2e9f4:	02070707 00080802 01020202 01010101     ................
   2ea04:	01010101 01010101 01010101 01010101     ................
   2ea14:	01010101 08010101 01010008 01010101     ................
   2ea24:	00000101                                ....

0002ea28 <g_am_hal_mcuctrl_flash_size>:
   2ea28:	00004000 00008000 00010000 00020000     .@..............
   2ea38:	00040000 00080000 00100000 00200000     .............. .
   2ea48:	00180000 00000000 00000000 00000000     ................
	...

0002ea68 <g_am_hal_mcuctrl_sram_size>:
   2ea68:	00004000 00008000 00010000 00020000     .@..............
   2ea78:	00040000 00080000 00100000 00060000     ................
   2ea88:	000c0000 00000000 00000000 00000000     ................
	...

0002eaa8 <am_hal_pwrctrl_peripheral_control>:
	...
   2eab4:	00000001 00000004 00000004 00000002     ................
   2eac4:	00000008 00000008 00000004 00000008     ................
   2ead4:	00000008 00000008 00000008 00000008     ................
   2eae4:	00000010 00000010 00000010 00000020     ............ ...
   2eaf4:	00000010 00000010 00000040 00000010     ........@.......
   2eb04:	00000010 00000080 00000004 00000004     ................
   2eb14:	00000100 00000004 00000004 00000200     ................
   2eb24:	00000020 00000020 00000400 00000004      ... ...........
   2eb34:	00000004 00000800 00000040 00000040     ........@...@...
   2eb44:	00001000 00000080 00000080 00002000     ............. ..
   2eb54:	00000100 00000100                       ........

0002eb5c <g_AM_BSP_GPIO_ITM_SWO>:
   2eb5c:	00000007                                ....
